/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddNetworkSwitchStackRequest;
import org.openapitools.client.model.AssignOrganizationLicensesSeats200Response;
import org.openapitools.client.model.AssignOrganizationLicensesSeatsRequest;
import org.openapitools.client.model.BindNetworkRequest;
import org.openapitools.client.model.CheckinNetworkSmDevices200Response;
import org.openapitools.client.model.CheckinNetworkSmDevicesRequest;
import org.openapitools.client.model.ClaimIntoOrganizationInventoryRequest;
import org.openapitools.client.model.ClaimIntoOrganizationRequest;
import org.openapitools.client.model.ClaimNetworkDevicesRequest;
import org.openapitools.client.model.CloneOrganizationRequest;
import org.openapitools.client.model.CloneOrganizationSwitchDevicesRequest;
import org.openapitools.client.model.CombineOrganizationNetworks200Response;
import org.openapitools.client.model.CombineOrganizationNetworksRequest;
import org.openapitools.client.model.CreateDeviceApplianceVmxAuthenticationToken201Response;
import org.openapitools.client.model.CreateDeviceSwitchRoutingInterfaceRequest;
import org.openapitools.client.model.CreateDeviceSwitchRoutingStaticRouteRequest;
import org.openapitools.client.model.CreateNetworkAppliancePrefixesDelegatedStaticRequest;
import org.openapitools.client.model.CreateNetworkApplianceStaticRouteRequest;
import org.openapitools.client.model.CreateNetworkApplianceTrafficShapingCustomPerformanceClassRequest;
import org.openapitools.client.model.CreateNetworkApplianceVlan201Response;
import org.openapitools.client.model.CreateNetworkApplianceVlanRequest;
import org.openapitools.client.model.CreateNetworkCameraQualityRetentionProfileRequest;
import org.openapitools.client.model.CreateNetworkCameraWirelessProfileRequest;
import org.openapitools.client.model.CreateNetworkFirmwareUpgradesRollback200Response;
import org.openapitools.client.model.CreateNetworkFirmwareUpgradesRollbackRequest;
import org.openapitools.client.model.CreateNetworkFirmwareUpgradesStagedEventRequest;
import org.openapitools.client.model.CreateNetworkFirmwareUpgradesStagedGroupRequest;
import org.openapitools.client.model.CreateNetworkFloorPlanRequest;
import org.openapitools.client.model.CreateNetworkGroupPolicyRequest;
import org.openapitools.client.model.CreateNetworkMerakiAuthUserRequest;
import org.openapitools.client.model.CreateNetworkMqttBrokerRequest;
import org.openapitools.client.model.CreateNetworkPiiRequestRequest;
import org.openapitools.client.model.CreateNetworkSensorAlertsProfileRequest;
import org.openapitools.client.model.CreateNetworkSmBypassActivationLockAttemptRequest;
import org.openapitools.client.model.CreateNetworkSmTargetGroupRequest;
import org.openapitools.client.model.CreateNetworkSwitchAccessPolicyRequest;
import org.openapitools.client.model.CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest;
import org.openapitools.client.model.CreateNetworkSwitchLinkAggregationRequest;
import org.openapitools.client.model.CreateNetworkSwitchPortScheduleRequest;
import org.openapitools.client.model.CreateNetworkSwitchQosRuleRequest;
import org.openapitools.client.model.CreateNetworkSwitchRoutingMulticastRendezvousPointRequest;
import org.openapitools.client.model.CreateNetworkSwitchStackRequest;
import org.openapitools.client.model.CreateNetworkSwitchStackRoutingInterfaceRequest;
import org.openapitools.client.model.CreateNetworkWebhooksHttpServerRequest;
import org.openapitools.client.model.CreateNetworkWebhooksPayloadTemplateRequest;
import org.openapitools.client.model.CreateNetworkWebhooksWebhookTest201Response;
import org.openapitools.client.model.CreateNetworkWebhooksWebhookTestRequest;
import org.openapitools.client.model.CreateNetworkWirelessRfProfile201Response;
import org.openapitools.client.model.CreateNetworkWirelessRfProfileRequest;
import org.openapitools.client.model.CreateNetworkWirelessSsidIdentityPskRequest;
import org.openapitools.client.model.CreateOrganizationActionBatch201Response;
import org.openapitools.client.model.CreateOrganizationActionBatchRequest;
import org.openapitools.client.model.CreateOrganizationAdaptivePolicyAclRequest;
import org.openapitools.client.model.CreateOrganizationAdaptivePolicyGroupRequest;
import org.openapitools.client.model.CreateOrganizationAdaptivePolicyPolicyRequest;
import org.openapitools.client.model.CreateOrganizationAdminRequest;
import org.openapitools.client.model.CreateOrganizationAlertsProfileRequest;
import org.openapitools.client.model.CreateOrganizationBrandingPolicy201Response;
import org.openapitools.client.model.CreateOrganizationBrandingPolicyRequest;
import org.openapitools.client.model.CreateOrganizationCameraCustomAnalyticsArtifactRequest;
import org.openapitools.client.model.CreateOrganizationConfigTemplateRequest;
import org.openapitools.client.model.CreateOrganizationEarlyAccessFeaturesOptInRequest;
import org.openapitools.client.model.CreateOrganizationInsightMonitoredMediaServerRequest;
import org.openapitools.client.model.CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest;
import org.openapitools.client.model.CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner;
import org.openapitools.client.model.CreateOrganizationInventoryOnboardingCloudMonitoringImportRequest;
import org.openapitools.client.model.CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner;
import org.openapitools.client.model.CreateOrganizationInventoryOnboardingCloudMonitoringPrepareRequest;
import org.openapitools.client.model.CreateOrganizationNetworkRequest;
import org.openapitools.client.model.CreateOrganizationPolicyObjectRequest;
import org.openapitools.client.model.CreateOrganizationPolicyObjectsGroupRequest;
import org.openapitools.client.model.CreateOrganizationRequest;
import org.openapitools.client.model.CreateOrganizationSamlIdpRequest;
import org.openapitools.client.model.CreateOrganizationSamlRoleRequest;
import org.openapitools.client.model.GetDeviceApplianceUplinksSettings200Response;
import org.openapitools.client.model.GetDeviceSensorRelationships200ResponseInner;
import org.openapitools.client.model.GetDeviceSwitchPorts200ResponseInner;
import org.openapitools.client.model.GetDeviceSwitchRoutingInterfaces200ResponseInner;
import org.openapitools.client.model.GetDeviceSwitchRoutingStaticRoute200Response;
import org.openapitools.client.model.GetDeviceWirelessBluetoothSettings200Response;
import org.openapitools.client.model.GetNetwork200Response;
import org.openapitools.client.model.GetNetworkAppliancePorts200ResponseInner;
import org.openapitools.client.model.GetNetworkAppliancePrefixesDelegatedStatics200ResponseInner;
import org.openapitools.client.model.GetNetworkApplianceSettings200Response;
import org.openapitools.client.model.GetNetworkApplianceSingleLan200Response;
import org.openapitools.client.model.GetNetworkApplianceSsids200ResponseInner;
import org.openapitools.client.model.GetNetworkApplianceTrafficShapingUplinkBandwidth200Response;
import org.openapitools.client.model.GetNetworkApplianceTrafficShapingUplinkSelection200Response;
import org.openapitools.client.model.GetNetworkApplianceVlans200ResponseInner;
import org.openapitools.client.model.GetNetworkApplianceVpnSiteToSiteVpn200Response;
import org.openapitools.client.model.GetNetworkCellularGatewayDhcp200Response;
import org.openapitools.client.model.GetNetworkFirmwareUpgrades200Response;
import org.openapitools.client.model.GetNetworkFirmwareUpgradesStagedEvents200Response;
import org.openapitools.client.model.GetNetworkFirmwareUpgradesStagedGroups200ResponseInner;
import org.openapitools.client.model.GetNetworkFirmwareUpgradesStagedStages200ResponseInner;
import org.openapitools.client.model.GetNetworkHealthAlerts200ResponseInner;
import org.openapitools.client.model.GetNetworkMerakiAuthUsers200ResponseInner;
import org.openapitools.client.model.GetNetworkPoliciesByClient200ResponseInner;
import org.openapitools.client.model.GetNetworkSensorAlertsProfiles200ResponseInner;
import org.openapitools.client.model.GetNetworkSensorRelationships200ResponseInner;
import org.openapitools.client.model.GetNetworkSettings200Response;
import org.openapitools.client.model.GetNetworkSmDeviceCerts200ResponseInner;
import org.openapitools.client.model.GetNetworkSmDeviceDeviceProfiles200ResponseInner;
import org.openapitools.client.model.GetNetworkSmDeviceNetworkAdapters200ResponseInner;
import org.openapitools.client.model.GetNetworkSmDeviceSecurityCenters200ResponseInner;
import org.openapitools.client.model.GetNetworkSmDeviceSoftwares200ResponseInner;
import org.openapitools.client.model.GetNetworkSmDeviceWlanLists200ResponseInner;
import org.openapitools.client.model.GetNetworkSmDevices200ResponseInner;
import org.openapitools.client.model.GetNetworkSmProfiles200ResponseInner;
import org.openapitools.client.model.GetNetworkSmTrustedAccessConfigs200ResponseInner;
import org.openapitools.client.model.GetNetworkSmUserAccessDevices200ResponseInner;
import org.openapitools.client.model.GetNetworkSmUsers200ResponseInner;
import org.openapitools.client.model.GetNetworkSwitchAccessControlLists200Response;
import org.openapitools.client.model.GetNetworkSwitchAccessPolicies200ResponseInner;
import org.openapitools.client.model.GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner;
import org.openapitools.client.model.GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner;
import org.openapitools.client.model.GetNetworkSwitchDhcpV4ServersSeen200ResponseInner;
import org.openapitools.client.model.GetNetworkSwitchMtu200Response;
import org.openapitools.client.model.GetNetworkSwitchSettings200Response;
import org.openapitools.client.model.GetNetworkSwitchStack200Response;
import org.openapitools.client.model.GetNetworkSwitchStormControl200Response;
import org.openapitools.client.model.GetNetworkSyslogServers200Response;
import org.openapitools.client.model.GetNetworkWebhooksHttpServers200ResponseInner;
import org.openapitools.client.model.GetNetworkWebhooksPayloadTemplates200ResponseInner;
import org.openapitools.client.model.GetNetworkWirelessBluetoothSettings200Response;
import org.openapitools.client.model.GetNetworkWirelessSettings200Response;
import org.openapitools.client.model.GetNetworkWirelessSsidEapOverride200Response;
import org.openapitools.client.model.GetNetworkWirelessSsidIdentityPsks200ResponseInner;
import org.openapitools.client.model.GetNetworkWirelessSsidSplashSettings200Response;
import org.openapitools.client.model.GetOrganizationApplianceVpnThirdPartyVPNPeers200Response;
import org.openapitools.client.model.GetOrganizationBrandingPolicies200ResponseInner;
import org.openapitools.client.model.GetOrganizationBrandingPoliciesPriorities200Response;
import org.openapitools.client.model.GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner;
import org.openapitools.client.model.GetOrganizationConfigTemplateSwitchProfiles200Response;
import org.openapitools.client.model.GetOrganizationDevices200ResponseInner;
import org.openapitools.client.model.GetOrganizationFirmwareUpgrades200ResponseInner;
import org.openapitools.client.model.GetOrganizationFirmwareUpgradesByDevice200ResponseInner;
import org.openapitools.client.model.GetOrganizationInsightApplications200ResponseInner;
import org.openapitools.client.model.GetOrganizationInsightMonitoredMediaServers200ResponseInner;
import org.openapitools.client.model.GetOrganizationInventoryDevices200ResponseInner;
import org.openapitools.client.model.GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner;
import org.openapitools.client.model.GetOrganizationLicenses200ResponseInner;
import org.openapitools.client.model.GetOrganizationLicensingCotermLicenses200ResponseInner;
import org.openapitools.client.model.GetOrganizationLoginSecurity200Response;
import org.openapitools.client.model.GetOrganizationSaml200Response;
import org.openapitools.client.model.GetOrganizationSamlIdps200ResponseInner;
import org.openapitools.client.model.GetOrganizationSmApnsCert200Response;
import org.openapitools.client.model.GetOrganizationSmVppAccounts200ResponseInner;
import org.openapitools.client.model.GetOrganizationSwitchPortsBySwitch200ResponseInner;
import org.openapitools.client.model.GetOrganizationWirelessDevicesEthernetStatuses200ResponseInner;
import org.openapitools.client.model.GetOrganizations200ResponseInner;
import org.openapitools.client.model.LockNetworkSmDevicesRequest;
import org.openapitools.client.model.ModifyNetworkSmDevicesTags200ResponseInner;
import org.openapitools.client.model.ModifyNetworkSmDevicesTagsRequest;
import org.openapitools.client.model.MoveNetworkSmDevices200Response;
import org.openapitools.client.model.MoveNetworkSmDevicesRequest;
import org.openapitools.client.model.MoveOrganizationLicenses200Response;
import org.openapitools.client.model.MoveOrganizationLicensesRequest;
import org.openapitools.client.model.MoveOrganizationLicensesSeats200Response;
import org.openapitools.client.model.MoveOrganizationLicensesSeatsRequest;
import org.openapitools.client.model.MoveOrganizationLicensingCotermLicenses200Response;
import org.openapitools.client.model.MoveOrganizationLicensingCotermLicensesRequest;
import java.time.OffsetDateTime;
import org.openapitools.client.model.ProvisionNetworkClientsRequest;
import org.openapitools.client.model.ReleaseFromOrganizationInventoryRequest;
import org.openapitools.client.model.RemoveNetworkDevicesRequest;
import org.openapitools.client.model.RemoveNetworkSwitchStackRequest;
import org.openapitools.client.model.RenewOrganizationLicensesSeatsRequest;
import org.openapitools.client.model.RollbacksNetworkFirmwareUpgradesStagedEventsRequest;
import org.openapitools.client.model.SplitNetwork200Response;
import org.openapitools.client.model.UnbindNetworkRequest;
import org.openapitools.client.model.UpdateDeviceApplianceUplinksSettingsRequest;
import org.openapitools.client.model.UpdateDeviceCameraCustomAnalyticsRequest;
import org.openapitools.client.model.UpdateDeviceCameraQualityAndRetentionRequest;
import org.openapitools.client.model.UpdateDeviceCameraSenseRequest;
import org.openapitools.client.model.UpdateDeviceCameraVideoSettingsRequest;
import org.openapitools.client.model.UpdateDeviceCameraWirelessProfilesRequest;
import org.openapitools.client.model.UpdateDeviceCellularGatewayLanRequest;
import org.openapitools.client.model.UpdateDeviceCellularGatewayPortForwardingRulesRequest;
import org.openapitools.client.model.UpdateDeviceCellularSimsRequest;
import org.openapitools.client.model.UpdateDeviceManagementInterfaceRequest;
import org.openapitools.client.model.UpdateDeviceRequest;
import org.openapitools.client.model.UpdateDeviceSensorRelationshipsRequest;
import org.openapitools.client.model.UpdateDeviceSwitchPortRequest;
import org.openapitools.client.model.UpdateDeviceSwitchRoutingInterfaceDhcpRequest;
import org.openapitools.client.model.UpdateDeviceSwitchRoutingStaticRouteRequest;
import org.openapitools.client.model.UpdateDeviceSwitchWarmSpareRequest;
import org.openapitools.client.model.UpdateDeviceWirelessBluetoothSettingsRequest;
import org.openapitools.client.model.UpdateDeviceWirelessRadioSettingsRequest;
import org.openapitools.client.model.UpdateNetworkAlertsSettingsRequest;
import org.openapitools.client.model.UpdateNetworkApplianceConnectivityMonitoringDestinationsRequest;
import org.openapitools.client.model.UpdateNetworkApplianceContentFilteringRequest;
import org.openapitools.client.model.UpdateNetworkApplianceFirewallCellularFirewallRulesRequest;
import org.openapitools.client.model.UpdateNetworkApplianceFirewallFirewalledServiceRequest;
import org.openapitools.client.model.UpdateNetworkApplianceFirewallInboundFirewallRulesRequest;
import org.openapitools.client.model.UpdateNetworkApplianceFirewallL7FirewallRulesRequest;
import org.openapitools.client.model.UpdateNetworkApplianceFirewallOneToManyNatRulesRequest;
import org.openapitools.client.model.UpdateNetworkApplianceFirewallOneToOneNatRulesRequest;
import org.openapitools.client.model.UpdateNetworkApplianceFirewallPortForwardingRulesRequest;
import org.openapitools.client.model.UpdateNetworkApplianceFirewallSettingsRequest;
import org.openapitools.client.model.UpdateNetworkAppliancePortRequest;
import org.openapitools.client.model.UpdateNetworkAppliancePrefixesDelegatedStaticRequest;
import org.openapitools.client.model.UpdateNetworkApplianceSecurityIntrusionRequest;
import org.openapitools.client.model.UpdateNetworkApplianceSecurityMalwareRequest;
import org.openapitools.client.model.UpdateNetworkApplianceSettingsRequest;
import org.openapitools.client.model.UpdateNetworkApplianceSingleLanRequest;
import org.openapitools.client.model.UpdateNetworkApplianceSsidRequest;
import org.openapitools.client.model.UpdateNetworkApplianceStaticRouteRequest;
import org.openapitools.client.model.UpdateNetworkApplianceTrafficShapingCustomPerformanceClassRequest;
import org.openapitools.client.model.UpdateNetworkApplianceTrafficShapingRequest;
import org.openapitools.client.model.UpdateNetworkApplianceTrafficShapingRulesRequest;
import org.openapitools.client.model.UpdateNetworkApplianceTrafficShapingUplinkBandwidthRequest;
import org.openapitools.client.model.UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest;
import org.openapitools.client.model.UpdateNetworkApplianceVlanRequest;
import org.openapitools.client.model.UpdateNetworkApplianceVlansSettingsRequest;
import org.openapitools.client.model.UpdateNetworkApplianceVpnBgpRequest;
import org.openapitools.client.model.UpdateNetworkApplianceVpnSiteToSiteVpnRequest;
import org.openapitools.client.model.UpdateNetworkApplianceWarmSpareRequest;
import org.openapitools.client.model.UpdateNetworkCameraQualityRetentionProfileRequest;
import org.openapitools.client.model.UpdateNetworkCameraWirelessProfileRequest;
import org.openapitools.client.model.UpdateNetworkCellularGatewayConnectivityMonitoringDestinationsRequest;
import org.openapitools.client.model.UpdateNetworkCellularGatewayDhcpRequest;
import org.openapitools.client.model.UpdateNetworkCellularGatewaySubnetPoolRequest;
import org.openapitools.client.model.UpdateNetworkCellularGatewayUplinkRequest;
import org.openapitools.client.model.UpdateNetworkClientPolicyRequest;
import org.openapitools.client.model.UpdateNetworkClientSplashAuthorizationStatusRequest;
import org.openapitools.client.model.UpdateNetworkFirmwareUpgradesRequest;
import org.openapitools.client.model.UpdateNetworkFirmwareUpgradesStagedEventsRequest;
import org.openapitools.client.model.UpdateNetworkFirmwareUpgradesStagedStagesRequest;
import org.openapitools.client.model.UpdateNetworkFloorPlanRequest;
import org.openapitools.client.model.UpdateNetworkGroupPolicyRequest;
import org.openapitools.client.model.UpdateNetworkMerakiAuthUserRequest;
import org.openapitools.client.model.UpdateNetworkMqttBrokerRequest;
import org.openapitools.client.model.UpdateNetworkNetflowRequest;
import org.openapitools.client.model.UpdateNetworkRequest;
import org.openapitools.client.model.UpdateNetworkSensorAlertsProfileRequest;
import org.openapitools.client.model.UpdateNetworkSettingsRequest;
import org.openapitools.client.model.UpdateNetworkSmDevicesFields200ResponseInner;
import org.openapitools.client.model.UpdateNetworkSmDevicesFieldsRequest;
import org.openapitools.client.model.UpdateNetworkSnmpRequest;
import org.openapitools.client.model.UpdateNetworkSwitchAccessControlListsRequest;
import org.openapitools.client.model.UpdateNetworkSwitchAccessPolicyRequest;
import org.openapitools.client.model.UpdateNetworkSwitchAlternateManagementInterfaceRequest;
import org.openapitools.client.model.UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest;
import org.openapitools.client.model.UpdateNetworkSwitchDhcpServerPolicyRequest;
import org.openapitools.client.model.UpdateNetworkSwitchDscpToCosMappingsRequest;
import org.openapitools.client.model.UpdateNetworkSwitchLinkAggregationRequest;
import org.openapitools.client.model.UpdateNetworkSwitchMtuRequest;
import org.openapitools.client.model.UpdateNetworkSwitchPortScheduleRequest;
import org.openapitools.client.model.UpdateNetworkSwitchQosRuleRequest;
import org.openapitools.client.model.UpdateNetworkSwitchQosRulesOrderRequest;
import org.openapitools.client.model.UpdateNetworkSwitchRoutingMulticastRendezvousPointRequest;
import org.openapitools.client.model.UpdateNetworkSwitchRoutingMulticastRequest;
import org.openapitools.client.model.UpdateNetworkSwitchRoutingOspfRequest;
import org.openapitools.client.model.UpdateNetworkSwitchSettingsRequest;
import org.openapitools.client.model.UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest;
import org.openapitools.client.model.UpdateNetworkSwitchStackRoutingInterfaceRequest;
import org.openapitools.client.model.UpdateNetworkSwitchStormControlRequest;
import org.openapitools.client.model.UpdateNetworkSwitchStpRequest;
import org.openapitools.client.model.UpdateNetworkSyslogServersRequest;
import org.openapitools.client.model.UpdateNetworkTrafficAnalysisRequest;
import org.openapitools.client.model.UpdateNetworkWebhooksHttpServerRequest;
import org.openapitools.client.model.UpdateNetworkWebhooksPayloadTemplateRequest;
import org.openapitools.client.model.UpdateNetworkWirelessAlternateManagementInterfaceRequest;
import org.openapitools.client.model.UpdateNetworkWirelessBillingRequest;
import org.openapitools.client.model.UpdateNetworkWirelessBluetoothSettingsRequest;
import org.openapitools.client.model.UpdateNetworkWirelessRfProfileRequest;
import org.openapitools.client.model.UpdateNetworkWirelessSettingsRequest;
import org.openapitools.client.model.UpdateNetworkWirelessSsidBonjourForwardingRequest;
import org.openapitools.client.model.UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesRequest;
import org.openapitools.client.model.UpdateNetworkWirelessSsidEapOverrideRequest;
import org.openapitools.client.model.UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequest;
import org.openapitools.client.model.UpdateNetworkWirelessSsidFirewallL7FirewallRulesRequest;
import org.openapitools.client.model.UpdateNetworkWirelessSsidHotspot20Request;
import org.openapitools.client.model.UpdateNetworkWirelessSsidIdentityPskRequest;
import org.openapitools.client.model.UpdateNetworkWirelessSsidRequest;
import org.openapitools.client.model.UpdateNetworkWirelessSsidSchedulesRequest;
import org.openapitools.client.model.UpdateNetworkWirelessSsidSplashSettingsRequest;
import org.openapitools.client.model.UpdateNetworkWirelessSsidTrafficShapingRulesRequest;
import org.openapitools.client.model.UpdateNetworkWirelessSsidVpnRequest;
import org.openapitools.client.model.UpdateOrganizationActionBatchRequest;
import org.openapitools.client.model.UpdateOrganizationAdaptivePolicyAclRequest;
import org.openapitools.client.model.UpdateOrganizationAdaptivePolicyGroupRequest;
import org.openapitools.client.model.UpdateOrganizationAdaptivePolicyPolicyRequest;
import org.openapitools.client.model.UpdateOrganizationAdaptivePolicySettingsRequest;
import org.openapitools.client.model.UpdateOrganizationAdminRequest;
import org.openapitools.client.model.UpdateOrganizationAlertsProfileRequest;
import org.openapitools.client.model.UpdateOrganizationApplianceSecurityIntrusionRequest;
import org.openapitools.client.model.UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequest;
import org.openapitools.client.model.UpdateOrganizationApplianceVpnVpnFirewallRulesRequest;
import org.openapitools.client.model.UpdateOrganizationBrandingPoliciesPrioritiesRequest;
import org.openapitools.client.model.UpdateOrganizationBrandingPolicyRequest;
import org.openapitools.client.model.UpdateOrganizationCameraOnboardingStatusesRequest;
import org.openapitools.client.model.UpdateOrganizationConfigTemplateRequest;
import org.openapitools.client.model.UpdateOrganizationConfigTemplateSwitchProfilePortRequest;
import org.openapitools.client.model.UpdateOrganizationEarlyAccessFeaturesOptInRequest;
import org.openapitools.client.model.UpdateOrganizationInsightMonitoredMediaServerRequest;
import org.openapitools.client.model.UpdateOrganizationLicenseRequest;
import org.openapitools.client.model.UpdateOrganizationLoginSecurityRequest;
import org.openapitools.client.model.UpdateOrganizationPolicyObjectRequest;
import org.openapitools.client.model.UpdateOrganizationPolicyObjectsGroupRequest;
import org.openapitools.client.model.UpdateOrganizationRequest;
import org.openapitools.client.model.UpdateOrganizationSamlIdpRequest;
import org.openapitools.client.model.UpdateOrganizationSamlRequest;
import org.openapitools.client.model.UpdateOrganizationSamlRole200Response;
import org.openapitools.client.model.UpdateOrganizationSamlRoleRequest;
import org.openapitools.client.model.UpdateOrganizationSnmpRequest;
import org.openapitools.client.model.VmxNetworkDevicesClaimRequest;
import org.openapitools.client.model.WipeNetworkSmDevices200Response;
import org.openapitools.client.model.WipeNetworkSmDevicesRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConfigureApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ConfigureApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConfigureApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addNetworkSwitchStack_0
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param addNetworkSwitchStackRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addNetworkSwitchStack_0Call(String networkId, String switchStackId, AddNetworkSwitchStackRequest addNetworkSwitchStackRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addNetworkSwitchStackRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/stacks/{switchStackId}/add"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "switchStackId" + "}", localVarApiClient.escapeString(switchStackId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNetworkSwitchStack_0ValidateBeforeCall(String networkId, String switchStackId, AddNetworkSwitchStackRequest addNetworkSwitchStackRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling addNetworkSwitchStack_0(Async)");
        }

        // verify the required parameter 'switchStackId' is set
        if (switchStackId == null) {
            throw new ApiException("Missing the required parameter 'switchStackId' when calling addNetworkSwitchStack_0(Async)");
        }

        // verify the required parameter 'addNetworkSwitchStackRequest' is set
        if (addNetworkSwitchStackRequest == null) {
            throw new ApiException("Missing the required parameter 'addNetworkSwitchStackRequest' when calling addNetworkSwitchStack_0(Async)");
        }

        return addNetworkSwitchStack_0Call(networkId, switchStackId, addNetworkSwitchStackRequest, _callback);

    }

    /**
     * Add a switch to a stack
     * Add a switch to a stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param addNetworkSwitchStackRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object addNetworkSwitchStack_0(String networkId, String switchStackId, AddNetworkSwitchStackRequest addNetworkSwitchStackRequest) throws ApiException {
        ApiResponse<Object> localVarResp = addNetworkSwitchStack_0WithHttpInfo(networkId, switchStackId, addNetworkSwitchStackRequest);
        return localVarResp.getData();
    }

    /**
     * Add a switch to a stack
     * Add a switch to a stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param addNetworkSwitchStackRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> addNetworkSwitchStack_0WithHttpInfo(String networkId, String switchStackId, AddNetworkSwitchStackRequest addNetworkSwitchStackRequest) throws ApiException {
        okhttp3.Call localVarCall = addNetworkSwitchStack_0ValidateBeforeCall(networkId, switchStackId, addNetworkSwitchStackRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a switch to a stack (asynchronously)
     * Add a switch to a stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param addNetworkSwitchStackRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addNetworkSwitchStack_0Async(String networkId, String switchStackId, AddNetworkSwitchStackRequest addNetworkSwitchStackRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNetworkSwitchStack_0ValidateBeforeCall(networkId, switchStackId, addNetworkSwitchStackRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assignOrganizationLicensesSeats_0
     * @param organizationId  (required)
     * @param assignOrganizationLicensesSeatsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assignOrganizationLicensesSeats_0Call(String organizationId, AssignOrganizationLicensesSeatsRequest assignOrganizationLicensesSeatsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = assignOrganizationLicensesSeatsRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/licenses/assignSeats"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assignOrganizationLicensesSeats_0ValidateBeforeCall(String organizationId, AssignOrganizationLicensesSeatsRequest assignOrganizationLicensesSeatsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling assignOrganizationLicensesSeats_0(Async)");
        }

        // verify the required parameter 'assignOrganizationLicensesSeatsRequest' is set
        if (assignOrganizationLicensesSeatsRequest == null) {
            throw new ApiException("Missing the required parameter 'assignOrganizationLicensesSeatsRequest' when calling assignOrganizationLicensesSeats_0(Async)");
        }

        return assignOrganizationLicensesSeats_0Call(organizationId, assignOrganizationLicensesSeatsRequest, _callback);

    }

    /**
     * Assign SM seats to a network
     * Assign SM seats to a network. This will increase the managed SM device limit of the network
     * @param organizationId  (required)
     * @param assignOrganizationLicensesSeatsRequest  (required)
     * @return AssignOrganizationLicensesSeats200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public AssignOrganizationLicensesSeats200Response assignOrganizationLicensesSeats_0(String organizationId, AssignOrganizationLicensesSeatsRequest assignOrganizationLicensesSeatsRequest) throws ApiException {
        ApiResponse<AssignOrganizationLicensesSeats200Response> localVarResp = assignOrganizationLicensesSeats_0WithHttpInfo(organizationId, assignOrganizationLicensesSeatsRequest);
        return localVarResp.getData();
    }

    /**
     * Assign SM seats to a network
     * Assign SM seats to a network. This will increase the managed SM device limit of the network
     * @param organizationId  (required)
     * @param assignOrganizationLicensesSeatsRequest  (required)
     * @return ApiResponse&lt;AssignOrganizationLicensesSeats200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssignOrganizationLicensesSeats200Response> assignOrganizationLicensesSeats_0WithHttpInfo(String organizationId, AssignOrganizationLicensesSeatsRequest assignOrganizationLicensesSeatsRequest) throws ApiException {
        okhttp3.Call localVarCall = assignOrganizationLicensesSeats_0ValidateBeforeCall(organizationId, assignOrganizationLicensesSeatsRequest, null);
        Type localVarReturnType = new TypeToken<AssignOrganizationLicensesSeats200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Assign SM seats to a network (asynchronously)
     * Assign SM seats to a network. This will increase the managed SM device limit of the network
     * @param organizationId  (required)
     * @param assignOrganizationLicensesSeatsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assignOrganizationLicensesSeats_0Async(String organizationId, AssignOrganizationLicensesSeatsRequest assignOrganizationLicensesSeatsRequest, final ApiCallback<AssignOrganizationLicensesSeats200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = assignOrganizationLicensesSeats_0ValidateBeforeCall(organizationId, assignOrganizationLicensesSeatsRequest, _callback);
        Type localVarReturnType = new TypeToken<AssignOrganizationLicensesSeats200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bindNetwork_0
     * @param networkId  (required)
     * @param bindNetworkRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bindNetwork_0Call(String networkId, BindNetworkRequest bindNetworkRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bindNetworkRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/bind"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bindNetwork_0ValidateBeforeCall(String networkId, BindNetworkRequest bindNetworkRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling bindNetwork_0(Async)");
        }

        // verify the required parameter 'bindNetworkRequest' is set
        if (bindNetworkRequest == null) {
            throw new ApiException("Missing the required parameter 'bindNetworkRequest' when calling bindNetwork_0(Async)");
        }

        return bindNetwork_0Call(networkId, bindNetworkRequest, _callback);

    }

    /**
     * Bind a network to a template.
     * Bind a network to a template.
     * @param networkId  (required)
     * @param bindNetworkRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object bindNetwork_0(String networkId, BindNetworkRequest bindNetworkRequest) throws ApiException {
        ApiResponse<Object> localVarResp = bindNetwork_0WithHttpInfo(networkId, bindNetworkRequest);
        return localVarResp.getData();
    }

    /**
     * Bind a network to a template.
     * Bind a network to a template.
     * @param networkId  (required)
     * @param bindNetworkRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> bindNetwork_0WithHttpInfo(String networkId, BindNetworkRequest bindNetworkRequest) throws ApiException {
        okhttp3.Call localVarCall = bindNetwork_0ValidateBeforeCall(networkId, bindNetworkRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Bind a network to a template. (asynchronously)
     * Bind a network to a template.
     * @param networkId  (required)
     * @param bindNetworkRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bindNetwork_0Async(String networkId, BindNetworkRequest bindNetworkRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = bindNetwork_0ValidateBeforeCall(networkId, bindNetworkRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for checkinNetworkSmDevices_0
     * @param networkId  (required)
     * @param checkinNetworkSmDevicesRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkinNetworkSmDevices_0Call(String networkId, CheckinNetworkSmDevicesRequest checkinNetworkSmDevicesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = checkinNetworkSmDevicesRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/sm/devices/checkin"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkinNetworkSmDevices_0ValidateBeforeCall(String networkId, CheckinNetworkSmDevicesRequest checkinNetworkSmDevicesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling checkinNetworkSmDevices_0(Async)");
        }

        return checkinNetworkSmDevices_0Call(networkId, checkinNetworkSmDevicesRequest, _callback);

    }

    /**
     * Force check-in a set of devices
     * Force check-in a set of devices
     * @param networkId  (required)
     * @param checkinNetworkSmDevicesRequest  (optional)
     * @return CheckinNetworkSmDevices200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CheckinNetworkSmDevices200Response checkinNetworkSmDevices_0(String networkId, CheckinNetworkSmDevicesRequest checkinNetworkSmDevicesRequest) throws ApiException {
        ApiResponse<CheckinNetworkSmDevices200Response> localVarResp = checkinNetworkSmDevices_0WithHttpInfo(networkId, checkinNetworkSmDevicesRequest);
        return localVarResp.getData();
    }

    /**
     * Force check-in a set of devices
     * Force check-in a set of devices
     * @param networkId  (required)
     * @param checkinNetworkSmDevicesRequest  (optional)
     * @return ApiResponse&lt;CheckinNetworkSmDevices200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CheckinNetworkSmDevices200Response> checkinNetworkSmDevices_0WithHttpInfo(String networkId, CheckinNetworkSmDevicesRequest checkinNetworkSmDevicesRequest) throws ApiException {
        okhttp3.Call localVarCall = checkinNetworkSmDevices_0ValidateBeforeCall(networkId, checkinNetworkSmDevicesRequest, null);
        Type localVarReturnType = new TypeToken<CheckinNetworkSmDevices200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Force check-in a set of devices (asynchronously)
     * Force check-in a set of devices
     * @param networkId  (required)
     * @param checkinNetworkSmDevicesRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkinNetworkSmDevices_0Async(String networkId, CheckinNetworkSmDevicesRequest checkinNetworkSmDevicesRequest, final ApiCallback<CheckinNetworkSmDevices200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkinNetworkSmDevices_0ValidateBeforeCall(networkId, checkinNetworkSmDevicesRequest, _callback);
        Type localVarReturnType = new TypeToken<CheckinNetworkSmDevices200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for claimIntoOrganizationInventory_0
     * @param organizationId  (required)
     * @param claimIntoOrganizationInventoryRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call claimIntoOrganizationInventory_0Call(String organizationId, ClaimIntoOrganizationInventoryRequest claimIntoOrganizationInventoryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = claimIntoOrganizationInventoryRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/inventory/claim"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call claimIntoOrganizationInventory_0ValidateBeforeCall(String organizationId, ClaimIntoOrganizationInventoryRequest claimIntoOrganizationInventoryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling claimIntoOrganizationInventory_0(Async)");
        }

        return claimIntoOrganizationInventory_0Call(organizationId, claimIntoOrganizationInventoryRequest, _callback);

    }

    /**
     * Claim a list of devices, licenses, and/or orders into an organization inventory
     * Claim a list of devices, licenses, and/or orders into an organization inventory. When claiming by order, all devices and licenses in the order will be claimed; licenses will be added to the organization and devices will be placed in the organization&#39;s inventory. Use /organizations/{organizationId}/inventory/release to release devices from an organization.
     * @param organizationId  (required)
     * @param claimIntoOrganizationInventoryRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object claimIntoOrganizationInventory_0(String organizationId, ClaimIntoOrganizationInventoryRequest claimIntoOrganizationInventoryRequest) throws ApiException {
        ApiResponse<Object> localVarResp = claimIntoOrganizationInventory_0WithHttpInfo(organizationId, claimIntoOrganizationInventoryRequest);
        return localVarResp.getData();
    }

    /**
     * Claim a list of devices, licenses, and/or orders into an organization inventory
     * Claim a list of devices, licenses, and/or orders into an organization inventory. When claiming by order, all devices and licenses in the order will be claimed; licenses will be added to the organization and devices will be placed in the organization&#39;s inventory. Use /organizations/{organizationId}/inventory/release to release devices from an organization.
     * @param organizationId  (required)
     * @param claimIntoOrganizationInventoryRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> claimIntoOrganizationInventory_0WithHttpInfo(String organizationId, ClaimIntoOrganizationInventoryRequest claimIntoOrganizationInventoryRequest) throws ApiException {
        okhttp3.Call localVarCall = claimIntoOrganizationInventory_0ValidateBeforeCall(organizationId, claimIntoOrganizationInventoryRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Claim a list of devices, licenses, and/or orders into an organization inventory (asynchronously)
     * Claim a list of devices, licenses, and/or orders into an organization inventory. When claiming by order, all devices and licenses in the order will be claimed; licenses will be added to the organization and devices will be placed in the organization&#39;s inventory. Use /organizations/{organizationId}/inventory/release to release devices from an organization.
     * @param organizationId  (required)
     * @param claimIntoOrganizationInventoryRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call claimIntoOrganizationInventory_0Async(String organizationId, ClaimIntoOrganizationInventoryRequest claimIntoOrganizationInventoryRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = claimIntoOrganizationInventory_0ValidateBeforeCall(organizationId, claimIntoOrganizationInventoryRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for claimIntoOrganization_0
     * @param organizationId  (required)
     * @param claimIntoOrganizationRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call claimIntoOrganization_0Call(String organizationId, ClaimIntoOrganizationRequest claimIntoOrganizationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = claimIntoOrganizationRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/claim"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call claimIntoOrganization_0ValidateBeforeCall(String organizationId, ClaimIntoOrganizationRequest claimIntoOrganizationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling claimIntoOrganization_0(Async)");
        }

        return claimIntoOrganization_0Call(organizationId, claimIntoOrganizationRequest, _callback);

    }

    /**
     * Claim a list of devices, licenses, and/or orders into an organization
     * Claim a list of devices, licenses, and/or orders into an organization. When claiming by order, all devices and licenses in the order will be claimed; licenses will be added to the organization and devices will be placed in the organization&#39;s inventory.
     * @param organizationId  (required)
     * @param claimIntoOrganizationRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object claimIntoOrganization_0(String organizationId, ClaimIntoOrganizationRequest claimIntoOrganizationRequest) throws ApiException {
        ApiResponse<Object> localVarResp = claimIntoOrganization_0WithHttpInfo(organizationId, claimIntoOrganizationRequest);
        return localVarResp.getData();
    }

    /**
     * Claim a list of devices, licenses, and/or orders into an organization
     * Claim a list of devices, licenses, and/or orders into an organization. When claiming by order, all devices and licenses in the order will be claimed; licenses will be added to the organization and devices will be placed in the organization&#39;s inventory.
     * @param organizationId  (required)
     * @param claimIntoOrganizationRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> claimIntoOrganization_0WithHttpInfo(String organizationId, ClaimIntoOrganizationRequest claimIntoOrganizationRequest) throws ApiException {
        okhttp3.Call localVarCall = claimIntoOrganization_0ValidateBeforeCall(organizationId, claimIntoOrganizationRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Claim a list of devices, licenses, and/or orders into an organization (asynchronously)
     * Claim a list of devices, licenses, and/or orders into an organization. When claiming by order, all devices and licenses in the order will be claimed; licenses will be added to the organization and devices will be placed in the organization&#39;s inventory.
     * @param organizationId  (required)
     * @param claimIntoOrganizationRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call claimIntoOrganization_0Async(String organizationId, ClaimIntoOrganizationRequest claimIntoOrganizationRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = claimIntoOrganization_0ValidateBeforeCall(organizationId, claimIntoOrganizationRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for claimNetworkDevices_0
     * @param networkId  (required)
     * @param claimNetworkDevicesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call claimNetworkDevices_0Call(String networkId, ClaimNetworkDevicesRequest claimNetworkDevicesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = claimNetworkDevicesRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/devices/claim"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call claimNetworkDevices_0ValidateBeforeCall(String networkId, ClaimNetworkDevicesRequest claimNetworkDevicesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling claimNetworkDevices_0(Async)");
        }

        // verify the required parameter 'claimNetworkDevicesRequest' is set
        if (claimNetworkDevicesRequest == null) {
            throw new ApiException("Missing the required parameter 'claimNetworkDevicesRequest' when calling claimNetworkDevices_0(Async)");
        }

        return claimNetworkDevices_0Call(networkId, claimNetworkDevicesRequest, _callback);

    }

    /**
     * Claim devices into a network. (Note: for recently claimed devices, it may take a few minutes for API requsts against that device to succeed)
     * Claim devices into a network. (Note: for recently claimed devices, it may take a few minutes for API requsts against that device to succeed)
     * @param networkId  (required)
     * @param claimNetworkDevicesRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void claimNetworkDevices_0(String networkId, ClaimNetworkDevicesRequest claimNetworkDevicesRequest) throws ApiException {
        claimNetworkDevices_0WithHttpInfo(networkId, claimNetworkDevicesRequest);
    }

    /**
     * Claim devices into a network. (Note: for recently claimed devices, it may take a few minutes for API requsts against that device to succeed)
     * Claim devices into a network. (Note: for recently claimed devices, it may take a few minutes for API requsts against that device to succeed)
     * @param networkId  (required)
     * @param claimNetworkDevicesRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> claimNetworkDevices_0WithHttpInfo(String networkId, ClaimNetworkDevicesRequest claimNetworkDevicesRequest) throws ApiException {
        okhttp3.Call localVarCall = claimNetworkDevices_0ValidateBeforeCall(networkId, claimNetworkDevicesRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Claim devices into a network. (Note: for recently claimed devices, it may take a few minutes for API requsts against that device to succeed) (asynchronously)
     * Claim devices into a network. (Note: for recently claimed devices, it may take a few minutes for API requsts against that device to succeed)
     * @param networkId  (required)
     * @param claimNetworkDevicesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call claimNetworkDevices_0Async(String networkId, ClaimNetworkDevicesRequest claimNetworkDevicesRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = claimNetworkDevices_0ValidateBeforeCall(networkId, claimNetworkDevicesRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for cloneOrganizationSwitchDevices_0
     * @param organizationId  (required)
     * @param cloneOrganizationSwitchDevicesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloneOrganizationSwitchDevices_0Call(String organizationId, CloneOrganizationSwitchDevicesRequest cloneOrganizationSwitchDevicesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cloneOrganizationSwitchDevicesRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/switch/devices/clone"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cloneOrganizationSwitchDevices_0ValidateBeforeCall(String organizationId, CloneOrganizationSwitchDevicesRequest cloneOrganizationSwitchDevicesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling cloneOrganizationSwitchDevices_0(Async)");
        }

        // verify the required parameter 'cloneOrganizationSwitchDevicesRequest' is set
        if (cloneOrganizationSwitchDevicesRequest == null) {
            throw new ApiException("Missing the required parameter 'cloneOrganizationSwitchDevicesRequest' when calling cloneOrganizationSwitchDevices_0(Async)");
        }

        return cloneOrganizationSwitchDevices_0Call(organizationId, cloneOrganizationSwitchDevicesRequest, _callback);

    }

    /**
     * Clone port-level and some switch-level configuration settings from a source switch to one or more target switches
     * Clone port-level and some switch-level configuration settings from a source switch to one or more target switches. Cloned settings include: Aggregation Groups, Power Settings, Multicast Settings, MTU Configuration, STP Bridge priority, Port Mirroring
     * @param organizationId  (required)
     * @param cloneOrganizationSwitchDevicesRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object cloneOrganizationSwitchDevices_0(String organizationId, CloneOrganizationSwitchDevicesRequest cloneOrganizationSwitchDevicesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = cloneOrganizationSwitchDevices_0WithHttpInfo(organizationId, cloneOrganizationSwitchDevicesRequest);
        return localVarResp.getData();
    }

    /**
     * Clone port-level and some switch-level configuration settings from a source switch to one or more target switches
     * Clone port-level and some switch-level configuration settings from a source switch to one or more target switches. Cloned settings include: Aggregation Groups, Power Settings, Multicast Settings, MTU Configuration, STP Bridge priority, Port Mirroring
     * @param organizationId  (required)
     * @param cloneOrganizationSwitchDevicesRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> cloneOrganizationSwitchDevices_0WithHttpInfo(String organizationId, CloneOrganizationSwitchDevicesRequest cloneOrganizationSwitchDevicesRequest) throws ApiException {
        okhttp3.Call localVarCall = cloneOrganizationSwitchDevices_0ValidateBeforeCall(organizationId, cloneOrganizationSwitchDevicesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Clone port-level and some switch-level configuration settings from a source switch to one or more target switches (asynchronously)
     * Clone port-level and some switch-level configuration settings from a source switch to one or more target switches. Cloned settings include: Aggregation Groups, Power Settings, Multicast Settings, MTU Configuration, STP Bridge priority, Port Mirroring
     * @param organizationId  (required)
     * @param cloneOrganizationSwitchDevicesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloneOrganizationSwitchDevices_0Async(String organizationId, CloneOrganizationSwitchDevicesRequest cloneOrganizationSwitchDevicesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = cloneOrganizationSwitchDevices_0ValidateBeforeCall(organizationId, cloneOrganizationSwitchDevicesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cloneOrganization_0
     * @param organizationId  (required)
     * @param cloneOrganizationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloneOrganization_0Call(String organizationId, CloneOrganizationRequest cloneOrganizationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cloneOrganizationRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/clone"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cloneOrganization_0ValidateBeforeCall(String organizationId, CloneOrganizationRequest cloneOrganizationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling cloneOrganization_0(Async)");
        }

        // verify the required parameter 'cloneOrganizationRequest' is set
        if (cloneOrganizationRequest == null) {
            throw new ApiException("Missing the required parameter 'cloneOrganizationRequest' when calling cloneOrganization_0(Async)");
        }

        return cloneOrganization_0Call(organizationId, cloneOrganizationRequest, _callback);

    }

    /**
     * Create a new organization by cloning the addressed organization
     * Create a new organization by cloning the addressed organization
     * @param organizationId  (required)
     * @param cloneOrganizationRequest  (required)
     * @return GetOrganizations200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetOrganizations200ResponseInner cloneOrganization_0(String organizationId, CloneOrganizationRequest cloneOrganizationRequest) throws ApiException {
        ApiResponse<GetOrganizations200ResponseInner> localVarResp = cloneOrganization_0WithHttpInfo(organizationId, cloneOrganizationRequest);
        return localVarResp.getData();
    }

    /**
     * Create a new organization by cloning the addressed organization
     * Create a new organization by cloning the addressed organization
     * @param organizationId  (required)
     * @param cloneOrganizationRequest  (required)
     * @return ApiResponse&lt;GetOrganizations200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOrganizations200ResponseInner> cloneOrganization_0WithHttpInfo(String organizationId, CloneOrganizationRequest cloneOrganizationRequest) throws ApiException {
        okhttp3.Call localVarCall = cloneOrganization_0ValidateBeforeCall(organizationId, cloneOrganizationRequest, null);
        Type localVarReturnType = new TypeToken<GetOrganizations200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new organization by cloning the addressed organization (asynchronously)
     * Create a new organization by cloning the addressed organization
     * @param organizationId  (required)
     * @param cloneOrganizationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloneOrganization_0Async(String organizationId, CloneOrganizationRequest cloneOrganizationRequest, final ApiCallback<GetOrganizations200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = cloneOrganization_0ValidateBeforeCall(organizationId, cloneOrganizationRequest, _callback);
        Type localVarReturnType = new TypeToken<GetOrganizations200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for combineOrganizationNetworks_0
     * @param organizationId  (required)
     * @param combineOrganizationNetworksRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call combineOrganizationNetworks_0Call(String organizationId, CombineOrganizationNetworksRequest combineOrganizationNetworksRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = combineOrganizationNetworksRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/networks/combine"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call combineOrganizationNetworks_0ValidateBeforeCall(String organizationId, CombineOrganizationNetworksRequest combineOrganizationNetworksRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling combineOrganizationNetworks_0(Async)");
        }

        // verify the required parameter 'combineOrganizationNetworksRequest' is set
        if (combineOrganizationNetworksRequest == null) {
            throw new ApiException("Missing the required parameter 'combineOrganizationNetworksRequest' when calling combineOrganizationNetworks_0(Async)");
        }

        return combineOrganizationNetworks_0Call(organizationId, combineOrganizationNetworksRequest, _callback);

    }

    /**
     * Combine multiple networks into a single network
     * Combine multiple networks into a single network
     * @param organizationId  (required)
     * @param combineOrganizationNetworksRequest  (required)
     * @return CombineOrganizationNetworks200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CombineOrganizationNetworks200Response combineOrganizationNetworks_0(String organizationId, CombineOrganizationNetworksRequest combineOrganizationNetworksRequest) throws ApiException {
        ApiResponse<CombineOrganizationNetworks200Response> localVarResp = combineOrganizationNetworks_0WithHttpInfo(organizationId, combineOrganizationNetworksRequest);
        return localVarResp.getData();
    }

    /**
     * Combine multiple networks into a single network
     * Combine multiple networks into a single network
     * @param organizationId  (required)
     * @param combineOrganizationNetworksRequest  (required)
     * @return ApiResponse&lt;CombineOrganizationNetworks200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CombineOrganizationNetworks200Response> combineOrganizationNetworks_0WithHttpInfo(String organizationId, CombineOrganizationNetworksRequest combineOrganizationNetworksRequest) throws ApiException {
        okhttp3.Call localVarCall = combineOrganizationNetworks_0ValidateBeforeCall(organizationId, combineOrganizationNetworksRequest, null);
        Type localVarReturnType = new TypeToken<CombineOrganizationNetworks200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Combine multiple networks into a single network (asynchronously)
     * Combine multiple networks into a single network
     * @param organizationId  (required)
     * @param combineOrganizationNetworksRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call combineOrganizationNetworks_0Async(String organizationId, CombineOrganizationNetworksRequest combineOrganizationNetworksRequest, final ApiCallback<CombineOrganizationNetworks200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = combineOrganizationNetworks_0ValidateBeforeCall(organizationId, combineOrganizationNetworksRequest, _callback);
        Type localVarReturnType = new TypeToken<CombineOrganizationNetworks200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDeviceApplianceVmxAuthenticationToken_0
     * @param serial  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDeviceApplianceVmxAuthenticationToken_0Call(String serial, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/devices/{serial}/appliance/vmx/authenticationToken"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDeviceApplianceVmxAuthenticationToken_0ValidateBeforeCall(String serial, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling createDeviceApplianceVmxAuthenticationToken_0(Async)");
        }

        return createDeviceApplianceVmxAuthenticationToken_0Call(serial, _callback);

    }

    /**
     * Generate a new vMX authentication token
     * Generate a new vMX authentication token
     * @param serial  (required)
     * @return CreateDeviceApplianceVmxAuthenticationToken201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CreateDeviceApplianceVmxAuthenticationToken201Response createDeviceApplianceVmxAuthenticationToken_0(String serial) throws ApiException {
        ApiResponse<CreateDeviceApplianceVmxAuthenticationToken201Response> localVarResp = createDeviceApplianceVmxAuthenticationToken_0WithHttpInfo(serial);
        return localVarResp.getData();
    }

    /**
     * Generate a new vMX authentication token
     * Generate a new vMX authentication token
     * @param serial  (required)
     * @return ApiResponse&lt;CreateDeviceApplianceVmxAuthenticationToken201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateDeviceApplianceVmxAuthenticationToken201Response> createDeviceApplianceVmxAuthenticationToken_0WithHttpInfo(String serial) throws ApiException {
        okhttp3.Call localVarCall = createDeviceApplianceVmxAuthenticationToken_0ValidateBeforeCall(serial, null);
        Type localVarReturnType = new TypeToken<CreateDeviceApplianceVmxAuthenticationToken201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate a new vMX authentication token (asynchronously)
     * Generate a new vMX authentication token
     * @param serial  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDeviceApplianceVmxAuthenticationToken_0Async(String serial, final ApiCallback<CreateDeviceApplianceVmxAuthenticationToken201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDeviceApplianceVmxAuthenticationToken_0ValidateBeforeCall(serial, _callback);
        Type localVarReturnType = new TypeToken<CreateDeviceApplianceVmxAuthenticationToken201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDeviceSwitchRoutingInterface_0
     * @param serial  (required)
     * @param createDeviceSwitchRoutingInterfaceRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDeviceSwitchRoutingInterface_0Call(String serial, CreateDeviceSwitchRoutingInterfaceRequest createDeviceSwitchRoutingInterfaceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDeviceSwitchRoutingInterfaceRequest;

        // create path and map variables
        String localVarPath = "/devices/{serial}/switch/routing/interfaces"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDeviceSwitchRoutingInterface_0ValidateBeforeCall(String serial, CreateDeviceSwitchRoutingInterfaceRequest createDeviceSwitchRoutingInterfaceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling createDeviceSwitchRoutingInterface_0(Async)");
        }

        return createDeviceSwitchRoutingInterface_0Call(serial, createDeviceSwitchRoutingInterfaceRequest, _callback);

    }

    /**
     * Create a layer 3 interface for a switch
     * Create a layer 3 interface for a switch
     * @param serial  (required)
     * @param createDeviceSwitchRoutingInterfaceRequest  (optional)
     * @return GetDeviceSwitchRoutingInterfaces200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetDeviceSwitchRoutingInterfaces200ResponseInner createDeviceSwitchRoutingInterface_0(String serial, CreateDeviceSwitchRoutingInterfaceRequest createDeviceSwitchRoutingInterfaceRequest) throws ApiException {
        ApiResponse<GetDeviceSwitchRoutingInterfaces200ResponseInner> localVarResp = createDeviceSwitchRoutingInterface_0WithHttpInfo(serial, createDeviceSwitchRoutingInterfaceRequest);
        return localVarResp.getData();
    }

    /**
     * Create a layer 3 interface for a switch
     * Create a layer 3 interface for a switch
     * @param serial  (required)
     * @param createDeviceSwitchRoutingInterfaceRequest  (optional)
     * @return ApiResponse&lt;GetDeviceSwitchRoutingInterfaces200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDeviceSwitchRoutingInterfaces200ResponseInner> createDeviceSwitchRoutingInterface_0WithHttpInfo(String serial, CreateDeviceSwitchRoutingInterfaceRequest createDeviceSwitchRoutingInterfaceRequest) throws ApiException {
        okhttp3.Call localVarCall = createDeviceSwitchRoutingInterface_0ValidateBeforeCall(serial, createDeviceSwitchRoutingInterfaceRequest, null);
        Type localVarReturnType = new TypeToken<GetDeviceSwitchRoutingInterfaces200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a layer 3 interface for a switch (asynchronously)
     * Create a layer 3 interface for a switch
     * @param serial  (required)
     * @param createDeviceSwitchRoutingInterfaceRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDeviceSwitchRoutingInterface_0Async(String serial, CreateDeviceSwitchRoutingInterfaceRequest createDeviceSwitchRoutingInterfaceRequest, final ApiCallback<GetDeviceSwitchRoutingInterfaces200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDeviceSwitchRoutingInterface_0ValidateBeforeCall(serial, createDeviceSwitchRoutingInterfaceRequest, _callback);
        Type localVarReturnType = new TypeToken<GetDeviceSwitchRoutingInterfaces200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDeviceSwitchRoutingStaticRoute_0
     * @param serial  (required)
     * @param createDeviceSwitchRoutingStaticRouteRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDeviceSwitchRoutingStaticRoute_0Call(String serial, CreateDeviceSwitchRoutingStaticRouteRequest createDeviceSwitchRoutingStaticRouteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDeviceSwitchRoutingStaticRouteRequest;

        // create path and map variables
        String localVarPath = "/devices/{serial}/switch/routing/staticRoutes"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDeviceSwitchRoutingStaticRoute_0ValidateBeforeCall(String serial, CreateDeviceSwitchRoutingStaticRouteRequest createDeviceSwitchRoutingStaticRouteRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling createDeviceSwitchRoutingStaticRoute_0(Async)");
        }

        // verify the required parameter 'createDeviceSwitchRoutingStaticRouteRequest' is set
        if (createDeviceSwitchRoutingStaticRouteRequest == null) {
            throw new ApiException("Missing the required parameter 'createDeviceSwitchRoutingStaticRouteRequest' when calling createDeviceSwitchRoutingStaticRoute_0(Async)");
        }

        return createDeviceSwitchRoutingStaticRoute_0Call(serial, createDeviceSwitchRoutingStaticRouteRequest, _callback);

    }

    /**
     * Create a layer 3 static route for a switch
     * Create a layer 3 static route for a switch
     * @param serial  (required)
     * @param createDeviceSwitchRoutingStaticRouteRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object createDeviceSwitchRoutingStaticRoute_0(String serial, CreateDeviceSwitchRoutingStaticRouteRequest createDeviceSwitchRoutingStaticRouteRequest) throws ApiException {
        ApiResponse<Object> localVarResp = createDeviceSwitchRoutingStaticRoute_0WithHttpInfo(serial, createDeviceSwitchRoutingStaticRouteRequest);
        return localVarResp.getData();
    }

    /**
     * Create a layer 3 static route for a switch
     * Create a layer 3 static route for a switch
     * @param serial  (required)
     * @param createDeviceSwitchRoutingStaticRouteRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createDeviceSwitchRoutingStaticRoute_0WithHttpInfo(String serial, CreateDeviceSwitchRoutingStaticRouteRequest createDeviceSwitchRoutingStaticRouteRequest) throws ApiException {
        okhttp3.Call localVarCall = createDeviceSwitchRoutingStaticRoute_0ValidateBeforeCall(serial, createDeviceSwitchRoutingStaticRouteRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a layer 3 static route for a switch (asynchronously)
     * Create a layer 3 static route for a switch
     * @param serial  (required)
     * @param createDeviceSwitchRoutingStaticRouteRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDeviceSwitchRoutingStaticRoute_0Async(String serial, CreateDeviceSwitchRoutingStaticRouteRequest createDeviceSwitchRoutingStaticRouteRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDeviceSwitchRoutingStaticRoute_0ValidateBeforeCall(serial, createDeviceSwitchRoutingStaticRouteRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNetworkAppliancePrefixesDelegatedStatic_0
     * @param networkId  (required)
     * @param createNetworkAppliancePrefixesDelegatedStaticRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkAppliancePrefixesDelegatedStatic_0Call(String networkId, CreateNetworkAppliancePrefixesDelegatedStaticRequest createNetworkAppliancePrefixesDelegatedStaticRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNetworkAppliancePrefixesDelegatedStaticRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/prefixes/delegated/statics"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkAppliancePrefixesDelegatedStatic_0ValidateBeforeCall(String networkId, CreateNetworkAppliancePrefixesDelegatedStaticRequest createNetworkAppliancePrefixesDelegatedStaticRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling createNetworkAppliancePrefixesDelegatedStatic_0(Async)");
        }

        // verify the required parameter 'createNetworkAppliancePrefixesDelegatedStaticRequest' is set
        if (createNetworkAppliancePrefixesDelegatedStaticRequest == null) {
            throw new ApiException("Missing the required parameter 'createNetworkAppliancePrefixesDelegatedStaticRequest' when calling createNetworkAppliancePrefixesDelegatedStatic_0(Async)");
        }

        return createNetworkAppliancePrefixesDelegatedStatic_0Call(networkId, createNetworkAppliancePrefixesDelegatedStaticRequest, _callback);

    }

    /**
     * Add a static delegated prefix from a network
     * Add a static delegated prefix from a network
     * @param networkId  (required)
     * @param createNetworkAppliancePrefixesDelegatedStaticRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object createNetworkAppliancePrefixesDelegatedStatic_0(String networkId, CreateNetworkAppliancePrefixesDelegatedStaticRequest createNetworkAppliancePrefixesDelegatedStaticRequest) throws ApiException {
        ApiResponse<Object> localVarResp = createNetworkAppliancePrefixesDelegatedStatic_0WithHttpInfo(networkId, createNetworkAppliancePrefixesDelegatedStaticRequest);
        return localVarResp.getData();
    }

    /**
     * Add a static delegated prefix from a network
     * Add a static delegated prefix from a network
     * @param networkId  (required)
     * @param createNetworkAppliancePrefixesDelegatedStaticRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createNetworkAppliancePrefixesDelegatedStatic_0WithHttpInfo(String networkId, CreateNetworkAppliancePrefixesDelegatedStaticRequest createNetworkAppliancePrefixesDelegatedStaticRequest) throws ApiException {
        okhttp3.Call localVarCall = createNetworkAppliancePrefixesDelegatedStatic_0ValidateBeforeCall(networkId, createNetworkAppliancePrefixesDelegatedStaticRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a static delegated prefix from a network (asynchronously)
     * Add a static delegated prefix from a network
     * @param networkId  (required)
     * @param createNetworkAppliancePrefixesDelegatedStaticRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkAppliancePrefixesDelegatedStatic_0Async(String networkId, CreateNetworkAppliancePrefixesDelegatedStaticRequest createNetworkAppliancePrefixesDelegatedStaticRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkAppliancePrefixesDelegatedStatic_0ValidateBeforeCall(networkId, createNetworkAppliancePrefixesDelegatedStaticRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNetworkApplianceStaticRoute_0
     * @param networkId  (required)
     * @param createNetworkApplianceStaticRouteRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkApplianceStaticRoute_0Call(String networkId, CreateNetworkApplianceStaticRouteRequest createNetworkApplianceStaticRouteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNetworkApplianceStaticRouteRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/staticRoutes"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkApplianceStaticRoute_0ValidateBeforeCall(String networkId, CreateNetworkApplianceStaticRouteRequest createNetworkApplianceStaticRouteRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling createNetworkApplianceStaticRoute_0(Async)");
        }

        // verify the required parameter 'createNetworkApplianceStaticRouteRequest' is set
        if (createNetworkApplianceStaticRouteRequest == null) {
            throw new ApiException("Missing the required parameter 'createNetworkApplianceStaticRouteRequest' when calling createNetworkApplianceStaticRoute_0(Async)");
        }

        return createNetworkApplianceStaticRoute_0Call(networkId, createNetworkApplianceStaticRouteRequest, _callback);

    }

    /**
     * Add a static route for an MX or teleworker network
     * Add a static route for an MX or teleworker network
     * @param networkId  (required)
     * @param createNetworkApplianceStaticRouteRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object createNetworkApplianceStaticRoute_0(String networkId, CreateNetworkApplianceStaticRouteRequest createNetworkApplianceStaticRouteRequest) throws ApiException {
        ApiResponse<Object> localVarResp = createNetworkApplianceStaticRoute_0WithHttpInfo(networkId, createNetworkApplianceStaticRouteRequest);
        return localVarResp.getData();
    }

    /**
     * Add a static route for an MX or teleworker network
     * Add a static route for an MX or teleworker network
     * @param networkId  (required)
     * @param createNetworkApplianceStaticRouteRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createNetworkApplianceStaticRoute_0WithHttpInfo(String networkId, CreateNetworkApplianceStaticRouteRequest createNetworkApplianceStaticRouteRequest) throws ApiException {
        okhttp3.Call localVarCall = createNetworkApplianceStaticRoute_0ValidateBeforeCall(networkId, createNetworkApplianceStaticRouteRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a static route for an MX or teleworker network (asynchronously)
     * Add a static route for an MX or teleworker network
     * @param networkId  (required)
     * @param createNetworkApplianceStaticRouteRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkApplianceStaticRoute_0Async(String networkId, CreateNetworkApplianceStaticRouteRequest createNetworkApplianceStaticRouteRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkApplianceStaticRoute_0ValidateBeforeCall(networkId, createNetworkApplianceStaticRouteRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNetworkApplianceTrafficShapingCustomPerformanceClass_0
     * @param networkId  (required)
     * @param createNetworkApplianceTrafficShapingCustomPerformanceClassRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkApplianceTrafficShapingCustomPerformanceClass_0Call(String networkId, CreateNetworkApplianceTrafficShapingCustomPerformanceClassRequest createNetworkApplianceTrafficShapingCustomPerformanceClassRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNetworkApplianceTrafficShapingCustomPerformanceClassRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/trafficShaping/customPerformanceClasses"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkApplianceTrafficShapingCustomPerformanceClass_0ValidateBeforeCall(String networkId, CreateNetworkApplianceTrafficShapingCustomPerformanceClassRequest createNetworkApplianceTrafficShapingCustomPerformanceClassRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling createNetworkApplianceTrafficShapingCustomPerformanceClass_0(Async)");
        }

        // verify the required parameter 'createNetworkApplianceTrafficShapingCustomPerformanceClassRequest' is set
        if (createNetworkApplianceTrafficShapingCustomPerformanceClassRequest == null) {
            throw new ApiException("Missing the required parameter 'createNetworkApplianceTrafficShapingCustomPerformanceClassRequest' when calling createNetworkApplianceTrafficShapingCustomPerformanceClass_0(Async)");
        }

        return createNetworkApplianceTrafficShapingCustomPerformanceClass_0Call(networkId, createNetworkApplianceTrafficShapingCustomPerformanceClassRequest, _callback);

    }

    /**
     * Add a custom performance class for an MX network
     * Add a custom performance class for an MX network
     * @param networkId  (required)
     * @param createNetworkApplianceTrafficShapingCustomPerformanceClassRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object createNetworkApplianceTrafficShapingCustomPerformanceClass_0(String networkId, CreateNetworkApplianceTrafficShapingCustomPerformanceClassRequest createNetworkApplianceTrafficShapingCustomPerformanceClassRequest) throws ApiException {
        ApiResponse<Object> localVarResp = createNetworkApplianceTrafficShapingCustomPerformanceClass_0WithHttpInfo(networkId, createNetworkApplianceTrafficShapingCustomPerformanceClassRequest);
        return localVarResp.getData();
    }

    /**
     * Add a custom performance class for an MX network
     * Add a custom performance class for an MX network
     * @param networkId  (required)
     * @param createNetworkApplianceTrafficShapingCustomPerformanceClassRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createNetworkApplianceTrafficShapingCustomPerformanceClass_0WithHttpInfo(String networkId, CreateNetworkApplianceTrafficShapingCustomPerformanceClassRequest createNetworkApplianceTrafficShapingCustomPerformanceClassRequest) throws ApiException {
        okhttp3.Call localVarCall = createNetworkApplianceTrafficShapingCustomPerformanceClass_0ValidateBeforeCall(networkId, createNetworkApplianceTrafficShapingCustomPerformanceClassRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a custom performance class for an MX network (asynchronously)
     * Add a custom performance class for an MX network
     * @param networkId  (required)
     * @param createNetworkApplianceTrafficShapingCustomPerformanceClassRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkApplianceTrafficShapingCustomPerformanceClass_0Async(String networkId, CreateNetworkApplianceTrafficShapingCustomPerformanceClassRequest createNetworkApplianceTrafficShapingCustomPerformanceClassRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkApplianceTrafficShapingCustomPerformanceClass_0ValidateBeforeCall(networkId, createNetworkApplianceTrafficShapingCustomPerformanceClassRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNetworkApplianceVlan_0
     * @param networkId  (required)
     * @param createNetworkApplianceVlanRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkApplianceVlan_0Call(String networkId, CreateNetworkApplianceVlanRequest createNetworkApplianceVlanRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNetworkApplianceVlanRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/vlans"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkApplianceVlan_0ValidateBeforeCall(String networkId, CreateNetworkApplianceVlanRequest createNetworkApplianceVlanRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling createNetworkApplianceVlan_0(Async)");
        }

        // verify the required parameter 'createNetworkApplianceVlanRequest' is set
        if (createNetworkApplianceVlanRequest == null) {
            throw new ApiException("Missing the required parameter 'createNetworkApplianceVlanRequest' when calling createNetworkApplianceVlan_0(Async)");
        }

        return createNetworkApplianceVlan_0Call(networkId, createNetworkApplianceVlanRequest, _callback);

    }

    /**
     * Add a VLAN
     * Add a VLAN
     * @param networkId  (required)
     * @param createNetworkApplianceVlanRequest  (required)
     * @return CreateNetworkApplianceVlan201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CreateNetworkApplianceVlan201Response createNetworkApplianceVlan_0(String networkId, CreateNetworkApplianceVlanRequest createNetworkApplianceVlanRequest) throws ApiException {
        ApiResponse<CreateNetworkApplianceVlan201Response> localVarResp = createNetworkApplianceVlan_0WithHttpInfo(networkId, createNetworkApplianceVlanRequest);
        return localVarResp.getData();
    }

    /**
     * Add a VLAN
     * Add a VLAN
     * @param networkId  (required)
     * @param createNetworkApplianceVlanRequest  (required)
     * @return ApiResponse&lt;CreateNetworkApplianceVlan201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateNetworkApplianceVlan201Response> createNetworkApplianceVlan_0WithHttpInfo(String networkId, CreateNetworkApplianceVlanRequest createNetworkApplianceVlanRequest) throws ApiException {
        okhttp3.Call localVarCall = createNetworkApplianceVlan_0ValidateBeforeCall(networkId, createNetworkApplianceVlanRequest, null);
        Type localVarReturnType = new TypeToken<CreateNetworkApplianceVlan201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a VLAN (asynchronously)
     * Add a VLAN
     * @param networkId  (required)
     * @param createNetworkApplianceVlanRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkApplianceVlan_0Async(String networkId, CreateNetworkApplianceVlanRequest createNetworkApplianceVlanRequest, final ApiCallback<CreateNetworkApplianceVlan201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkApplianceVlan_0ValidateBeforeCall(networkId, createNetworkApplianceVlanRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateNetworkApplianceVlan201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNetworkCameraQualityRetentionProfile_0
     * @param networkId  (required)
     * @param createNetworkCameraQualityRetentionProfileRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkCameraQualityRetentionProfile_0Call(String networkId, CreateNetworkCameraQualityRetentionProfileRequest createNetworkCameraQualityRetentionProfileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNetworkCameraQualityRetentionProfileRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/camera/qualityRetentionProfiles"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkCameraQualityRetentionProfile_0ValidateBeforeCall(String networkId, CreateNetworkCameraQualityRetentionProfileRequest createNetworkCameraQualityRetentionProfileRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling createNetworkCameraQualityRetentionProfile_0(Async)");
        }

        // verify the required parameter 'createNetworkCameraQualityRetentionProfileRequest' is set
        if (createNetworkCameraQualityRetentionProfileRequest == null) {
            throw new ApiException("Missing the required parameter 'createNetworkCameraQualityRetentionProfileRequest' when calling createNetworkCameraQualityRetentionProfile_0(Async)");
        }

        return createNetworkCameraQualityRetentionProfile_0Call(networkId, createNetworkCameraQualityRetentionProfileRequest, _callback);

    }

    /**
     * Creates new quality retention profile for this network.
     * Creates new quality retention profile for this network.
     * @param networkId  (required)
     * @param createNetworkCameraQualityRetentionProfileRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object createNetworkCameraQualityRetentionProfile_0(String networkId, CreateNetworkCameraQualityRetentionProfileRequest createNetworkCameraQualityRetentionProfileRequest) throws ApiException {
        ApiResponse<Object> localVarResp = createNetworkCameraQualityRetentionProfile_0WithHttpInfo(networkId, createNetworkCameraQualityRetentionProfileRequest);
        return localVarResp.getData();
    }

    /**
     * Creates new quality retention profile for this network.
     * Creates new quality retention profile for this network.
     * @param networkId  (required)
     * @param createNetworkCameraQualityRetentionProfileRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createNetworkCameraQualityRetentionProfile_0WithHttpInfo(String networkId, CreateNetworkCameraQualityRetentionProfileRequest createNetworkCameraQualityRetentionProfileRequest) throws ApiException {
        okhttp3.Call localVarCall = createNetworkCameraQualityRetentionProfile_0ValidateBeforeCall(networkId, createNetworkCameraQualityRetentionProfileRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates new quality retention profile for this network. (asynchronously)
     * Creates new quality retention profile for this network.
     * @param networkId  (required)
     * @param createNetworkCameraQualityRetentionProfileRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkCameraQualityRetentionProfile_0Async(String networkId, CreateNetworkCameraQualityRetentionProfileRequest createNetworkCameraQualityRetentionProfileRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkCameraQualityRetentionProfile_0ValidateBeforeCall(networkId, createNetworkCameraQualityRetentionProfileRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNetworkCameraWirelessProfile_0
     * @param networkId  (required)
     * @param createNetworkCameraWirelessProfileRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkCameraWirelessProfile_0Call(String networkId, CreateNetworkCameraWirelessProfileRequest createNetworkCameraWirelessProfileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNetworkCameraWirelessProfileRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/camera/wirelessProfiles"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkCameraWirelessProfile_0ValidateBeforeCall(String networkId, CreateNetworkCameraWirelessProfileRequest createNetworkCameraWirelessProfileRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling createNetworkCameraWirelessProfile_0(Async)");
        }

        // verify the required parameter 'createNetworkCameraWirelessProfileRequest' is set
        if (createNetworkCameraWirelessProfileRequest == null) {
            throw new ApiException("Missing the required parameter 'createNetworkCameraWirelessProfileRequest' when calling createNetworkCameraWirelessProfile_0(Async)");
        }

        return createNetworkCameraWirelessProfile_0Call(networkId, createNetworkCameraWirelessProfileRequest, _callback);

    }

    /**
     * Creates a new camera wireless profile for this network.
     * Creates a new camera wireless profile for this network.
     * @param networkId  (required)
     * @param createNetworkCameraWirelessProfileRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object createNetworkCameraWirelessProfile_0(String networkId, CreateNetworkCameraWirelessProfileRequest createNetworkCameraWirelessProfileRequest) throws ApiException {
        ApiResponse<Object> localVarResp = createNetworkCameraWirelessProfile_0WithHttpInfo(networkId, createNetworkCameraWirelessProfileRequest);
        return localVarResp.getData();
    }

    /**
     * Creates a new camera wireless profile for this network.
     * Creates a new camera wireless profile for this network.
     * @param networkId  (required)
     * @param createNetworkCameraWirelessProfileRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createNetworkCameraWirelessProfile_0WithHttpInfo(String networkId, CreateNetworkCameraWirelessProfileRequest createNetworkCameraWirelessProfileRequest) throws ApiException {
        okhttp3.Call localVarCall = createNetworkCameraWirelessProfile_0ValidateBeforeCall(networkId, createNetworkCameraWirelessProfileRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new camera wireless profile for this network. (asynchronously)
     * Creates a new camera wireless profile for this network.
     * @param networkId  (required)
     * @param createNetworkCameraWirelessProfileRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkCameraWirelessProfile_0Async(String networkId, CreateNetworkCameraWirelessProfileRequest createNetworkCameraWirelessProfileRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkCameraWirelessProfile_0ValidateBeforeCall(networkId, createNetworkCameraWirelessProfileRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNetworkFirmwareUpgradesRollback_0
     * @param networkId  (required)
     * @param createNetworkFirmwareUpgradesRollbackRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkFirmwareUpgradesRollback_0Call(String networkId, CreateNetworkFirmwareUpgradesRollbackRequest createNetworkFirmwareUpgradesRollbackRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNetworkFirmwareUpgradesRollbackRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/firmwareUpgrades/rollbacks"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkFirmwareUpgradesRollback_0ValidateBeforeCall(String networkId, CreateNetworkFirmwareUpgradesRollbackRequest createNetworkFirmwareUpgradesRollbackRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling createNetworkFirmwareUpgradesRollback_0(Async)");
        }

        // verify the required parameter 'createNetworkFirmwareUpgradesRollbackRequest' is set
        if (createNetworkFirmwareUpgradesRollbackRequest == null) {
            throw new ApiException("Missing the required parameter 'createNetworkFirmwareUpgradesRollbackRequest' when calling createNetworkFirmwareUpgradesRollback_0(Async)");
        }

        return createNetworkFirmwareUpgradesRollback_0Call(networkId, createNetworkFirmwareUpgradesRollbackRequest, _callback);

    }

    /**
     * Rollback a Firmware Upgrade For A Network
     * Rollback a Firmware Upgrade For A Network
     * @param networkId  (required)
     * @param createNetworkFirmwareUpgradesRollbackRequest  (required)
     * @return CreateNetworkFirmwareUpgradesRollback200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CreateNetworkFirmwareUpgradesRollback200Response createNetworkFirmwareUpgradesRollback_0(String networkId, CreateNetworkFirmwareUpgradesRollbackRequest createNetworkFirmwareUpgradesRollbackRequest) throws ApiException {
        ApiResponse<CreateNetworkFirmwareUpgradesRollback200Response> localVarResp = createNetworkFirmwareUpgradesRollback_0WithHttpInfo(networkId, createNetworkFirmwareUpgradesRollbackRequest);
        return localVarResp.getData();
    }

    /**
     * Rollback a Firmware Upgrade For A Network
     * Rollback a Firmware Upgrade For A Network
     * @param networkId  (required)
     * @param createNetworkFirmwareUpgradesRollbackRequest  (required)
     * @return ApiResponse&lt;CreateNetworkFirmwareUpgradesRollback200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateNetworkFirmwareUpgradesRollback200Response> createNetworkFirmwareUpgradesRollback_0WithHttpInfo(String networkId, CreateNetworkFirmwareUpgradesRollbackRequest createNetworkFirmwareUpgradesRollbackRequest) throws ApiException {
        okhttp3.Call localVarCall = createNetworkFirmwareUpgradesRollback_0ValidateBeforeCall(networkId, createNetworkFirmwareUpgradesRollbackRequest, null);
        Type localVarReturnType = new TypeToken<CreateNetworkFirmwareUpgradesRollback200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Rollback a Firmware Upgrade For A Network (asynchronously)
     * Rollback a Firmware Upgrade For A Network
     * @param networkId  (required)
     * @param createNetworkFirmwareUpgradesRollbackRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkFirmwareUpgradesRollback_0Async(String networkId, CreateNetworkFirmwareUpgradesRollbackRequest createNetworkFirmwareUpgradesRollbackRequest, final ApiCallback<CreateNetworkFirmwareUpgradesRollback200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkFirmwareUpgradesRollback_0ValidateBeforeCall(networkId, createNetworkFirmwareUpgradesRollbackRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateNetworkFirmwareUpgradesRollback200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNetworkFirmwareUpgradesStagedEvent_0
     * @param networkId  (required)
     * @param createNetworkFirmwareUpgradesStagedEventRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkFirmwareUpgradesStagedEvent_0Call(String networkId, CreateNetworkFirmwareUpgradesStagedEventRequest createNetworkFirmwareUpgradesStagedEventRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNetworkFirmwareUpgradesStagedEventRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/firmwareUpgrades/staged/events"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkFirmwareUpgradesStagedEvent_0ValidateBeforeCall(String networkId, CreateNetworkFirmwareUpgradesStagedEventRequest createNetworkFirmwareUpgradesStagedEventRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling createNetworkFirmwareUpgradesStagedEvent_0(Async)");
        }

        // verify the required parameter 'createNetworkFirmwareUpgradesStagedEventRequest' is set
        if (createNetworkFirmwareUpgradesStagedEventRequest == null) {
            throw new ApiException("Missing the required parameter 'createNetworkFirmwareUpgradesStagedEventRequest' when calling createNetworkFirmwareUpgradesStagedEvent_0(Async)");
        }

        return createNetworkFirmwareUpgradesStagedEvent_0Call(networkId, createNetworkFirmwareUpgradesStagedEventRequest, _callback);

    }

    /**
     * Create a Staged Upgrade Event for a network
     * Create a Staged Upgrade Event for a network
     * @param networkId  (required)
     * @param createNetworkFirmwareUpgradesStagedEventRequest  (required)
     * @return GetNetworkFirmwareUpgradesStagedEvents200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkFirmwareUpgradesStagedEvents200Response createNetworkFirmwareUpgradesStagedEvent_0(String networkId, CreateNetworkFirmwareUpgradesStagedEventRequest createNetworkFirmwareUpgradesStagedEventRequest) throws ApiException {
        ApiResponse<GetNetworkFirmwareUpgradesStagedEvents200Response> localVarResp = createNetworkFirmwareUpgradesStagedEvent_0WithHttpInfo(networkId, createNetworkFirmwareUpgradesStagedEventRequest);
        return localVarResp.getData();
    }

    /**
     * Create a Staged Upgrade Event for a network
     * Create a Staged Upgrade Event for a network
     * @param networkId  (required)
     * @param createNetworkFirmwareUpgradesStagedEventRequest  (required)
     * @return ApiResponse&lt;GetNetworkFirmwareUpgradesStagedEvents200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkFirmwareUpgradesStagedEvents200Response> createNetworkFirmwareUpgradesStagedEvent_0WithHttpInfo(String networkId, CreateNetworkFirmwareUpgradesStagedEventRequest createNetworkFirmwareUpgradesStagedEventRequest) throws ApiException {
        okhttp3.Call localVarCall = createNetworkFirmwareUpgradesStagedEvent_0ValidateBeforeCall(networkId, createNetworkFirmwareUpgradesStagedEventRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkFirmwareUpgradesStagedEvents200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Staged Upgrade Event for a network (asynchronously)
     * Create a Staged Upgrade Event for a network
     * @param networkId  (required)
     * @param createNetworkFirmwareUpgradesStagedEventRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkFirmwareUpgradesStagedEvent_0Async(String networkId, CreateNetworkFirmwareUpgradesStagedEventRequest createNetworkFirmwareUpgradesStagedEventRequest, final ApiCallback<GetNetworkFirmwareUpgradesStagedEvents200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkFirmwareUpgradesStagedEvent_0ValidateBeforeCall(networkId, createNetworkFirmwareUpgradesStagedEventRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkFirmwareUpgradesStagedEvents200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNetworkFirmwareUpgradesStagedGroup_0
     * @param networkId  (required)
     * @param createNetworkFirmwareUpgradesStagedGroupRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkFirmwareUpgradesStagedGroup_0Call(String networkId, CreateNetworkFirmwareUpgradesStagedGroupRequest createNetworkFirmwareUpgradesStagedGroupRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNetworkFirmwareUpgradesStagedGroupRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/firmwareUpgrades/staged/groups"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkFirmwareUpgradesStagedGroup_0ValidateBeforeCall(String networkId, CreateNetworkFirmwareUpgradesStagedGroupRequest createNetworkFirmwareUpgradesStagedGroupRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling createNetworkFirmwareUpgradesStagedGroup_0(Async)");
        }

        // verify the required parameter 'createNetworkFirmwareUpgradesStagedGroupRequest' is set
        if (createNetworkFirmwareUpgradesStagedGroupRequest == null) {
            throw new ApiException("Missing the required parameter 'createNetworkFirmwareUpgradesStagedGroupRequest' when calling createNetworkFirmwareUpgradesStagedGroup_0(Async)");
        }

        return createNetworkFirmwareUpgradesStagedGroup_0Call(networkId, createNetworkFirmwareUpgradesStagedGroupRequest, _callback);

    }

    /**
     * Create a Staged Upgrade Group for a network
     * Create a Staged Upgrade Group for a network
     * @param networkId  (required)
     * @param createNetworkFirmwareUpgradesStagedGroupRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object createNetworkFirmwareUpgradesStagedGroup_0(String networkId, CreateNetworkFirmwareUpgradesStagedGroupRequest createNetworkFirmwareUpgradesStagedGroupRequest) throws ApiException {
        ApiResponse<Object> localVarResp = createNetworkFirmwareUpgradesStagedGroup_0WithHttpInfo(networkId, createNetworkFirmwareUpgradesStagedGroupRequest);
        return localVarResp.getData();
    }

    /**
     * Create a Staged Upgrade Group for a network
     * Create a Staged Upgrade Group for a network
     * @param networkId  (required)
     * @param createNetworkFirmwareUpgradesStagedGroupRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createNetworkFirmwareUpgradesStagedGroup_0WithHttpInfo(String networkId, CreateNetworkFirmwareUpgradesStagedGroupRequest createNetworkFirmwareUpgradesStagedGroupRequest) throws ApiException {
        okhttp3.Call localVarCall = createNetworkFirmwareUpgradesStagedGroup_0ValidateBeforeCall(networkId, createNetworkFirmwareUpgradesStagedGroupRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Staged Upgrade Group for a network (asynchronously)
     * Create a Staged Upgrade Group for a network
     * @param networkId  (required)
     * @param createNetworkFirmwareUpgradesStagedGroupRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkFirmwareUpgradesStagedGroup_0Async(String networkId, CreateNetworkFirmwareUpgradesStagedGroupRequest createNetworkFirmwareUpgradesStagedGroupRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkFirmwareUpgradesStagedGroup_0ValidateBeforeCall(networkId, createNetworkFirmwareUpgradesStagedGroupRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNetworkFloorPlan_0
     * @param networkId  (required)
     * @param createNetworkFloorPlanRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkFloorPlan_0Call(String networkId, CreateNetworkFloorPlanRequest createNetworkFloorPlanRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNetworkFloorPlanRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/floorPlans"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkFloorPlan_0ValidateBeforeCall(String networkId, CreateNetworkFloorPlanRequest createNetworkFloorPlanRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling createNetworkFloorPlan_0(Async)");
        }

        // verify the required parameter 'createNetworkFloorPlanRequest' is set
        if (createNetworkFloorPlanRequest == null) {
            throw new ApiException("Missing the required parameter 'createNetworkFloorPlanRequest' when calling createNetworkFloorPlan_0(Async)");
        }

        return createNetworkFloorPlan_0Call(networkId, createNetworkFloorPlanRequest, _callback);

    }

    /**
     * Upload a floor plan
     * Upload a floor plan
     * @param networkId  (required)
     * @param createNetworkFloorPlanRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object createNetworkFloorPlan_0(String networkId, CreateNetworkFloorPlanRequest createNetworkFloorPlanRequest) throws ApiException {
        ApiResponse<Object> localVarResp = createNetworkFloorPlan_0WithHttpInfo(networkId, createNetworkFloorPlanRequest);
        return localVarResp.getData();
    }

    /**
     * Upload a floor plan
     * Upload a floor plan
     * @param networkId  (required)
     * @param createNetworkFloorPlanRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createNetworkFloorPlan_0WithHttpInfo(String networkId, CreateNetworkFloorPlanRequest createNetworkFloorPlanRequest) throws ApiException {
        okhttp3.Call localVarCall = createNetworkFloorPlan_0ValidateBeforeCall(networkId, createNetworkFloorPlanRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload a floor plan (asynchronously)
     * Upload a floor plan
     * @param networkId  (required)
     * @param createNetworkFloorPlanRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkFloorPlan_0Async(String networkId, CreateNetworkFloorPlanRequest createNetworkFloorPlanRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkFloorPlan_0ValidateBeforeCall(networkId, createNetworkFloorPlanRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNetworkGroupPolicy_0
     * @param networkId  (required)
     * @param createNetworkGroupPolicyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkGroupPolicy_0Call(String networkId, CreateNetworkGroupPolicyRequest createNetworkGroupPolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNetworkGroupPolicyRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/groupPolicies"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkGroupPolicy_0ValidateBeforeCall(String networkId, CreateNetworkGroupPolicyRequest createNetworkGroupPolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling createNetworkGroupPolicy_0(Async)");
        }

        // verify the required parameter 'createNetworkGroupPolicyRequest' is set
        if (createNetworkGroupPolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'createNetworkGroupPolicyRequest' when calling createNetworkGroupPolicy_0(Async)");
        }

        return createNetworkGroupPolicy_0Call(networkId, createNetworkGroupPolicyRequest, _callback);

    }

    /**
     * Create a group policy
     * Create a group policy
     * @param networkId  (required)
     * @param createNetworkGroupPolicyRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object createNetworkGroupPolicy_0(String networkId, CreateNetworkGroupPolicyRequest createNetworkGroupPolicyRequest) throws ApiException {
        ApiResponse<Object> localVarResp = createNetworkGroupPolicy_0WithHttpInfo(networkId, createNetworkGroupPolicyRequest);
        return localVarResp.getData();
    }

    /**
     * Create a group policy
     * Create a group policy
     * @param networkId  (required)
     * @param createNetworkGroupPolicyRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createNetworkGroupPolicy_0WithHttpInfo(String networkId, CreateNetworkGroupPolicyRequest createNetworkGroupPolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = createNetworkGroupPolicy_0ValidateBeforeCall(networkId, createNetworkGroupPolicyRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a group policy (asynchronously)
     * Create a group policy
     * @param networkId  (required)
     * @param createNetworkGroupPolicyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkGroupPolicy_0Async(String networkId, CreateNetworkGroupPolicyRequest createNetworkGroupPolicyRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkGroupPolicy_0ValidateBeforeCall(networkId, createNetworkGroupPolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNetworkMerakiAuthUser_0
     * @param networkId  (required)
     * @param createNetworkMerakiAuthUserRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkMerakiAuthUser_0Call(String networkId, CreateNetworkMerakiAuthUserRequest createNetworkMerakiAuthUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNetworkMerakiAuthUserRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/merakiAuthUsers"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkMerakiAuthUser_0ValidateBeforeCall(String networkId, CreateNetworkMerakiAuthUserRequest createNetworkMerakiAuthUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling createNetworkMerakiAuthUser_0(Async)");
        }

        // verify the required parameter 'createNetworkMerakiAuthUserRequest' is set
        if (createNetworkMerakiAuthUserRequest == null) {
            throw new ApiException("Missing the required parameter 'createNetworkMerakiAuthUserRequest' when calling createNetworkMerakiAuthUser_0(Async)");
        }

        return createNetworkMerakiAuthUser_0Call(networkId, createNetworkMerakiAuthUserRequest, _callback);

    }

    /**
     * Authorize a user configured with Meraki Authentication for a network (currently supports 802.1X, splash guest, and client VPN users, and currently, organizations have a 50,000 user cap)
     * Authorize a user configured with Meraki Authentication for a network (currently supports 802.1X, splash guest, and client VPN users, and currently, organizations have a 50,000 user cap)
     * @param networkId  (required)
     * @param createNetworkMerakiAuthUserRequest  (required)
     * @return GetNetworkMerakiAuthUsers200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkMerakiAuthUsers200ResponseInner createNetworkMerakiAuthUser_0(String networkId, CreateNetworkMerakiAuthUserRequest createNetworkMerakiAuthUserRequest) throws ApiException {
        ApiResponse<GetNetworkMerakiAuthUsers200ResponseInner> localVarResp = createNetworkMerakiAuthUser_0WithHttpInfo(networkId, createNetworkMerakiAuthUserRequest);
        return localVarResp.getData();
    }

    /**
     * Authorize a user configured with Meraki Authentication for a network (currently supports 802.1X, splash guest, and client VPN users, and currently, organizations have a 50,000 user cap)
     * Authorize a user configured with Meraki Authentication for a network (currently supports 802.1X, splash guest, and client VPN users, and currently, organizations have a 50,000 user cap)
     * @param networkId  (required)
     * @param createNetworkMerakiAuthUserRequest  (required)
     * @return ApiResponse&lt;GetNetworkMerakiAuthUsers200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkMerakiAuthUsers200ResponseInner> createNetworkMerakiAuthUser_0WithHttpInfo(String networkId, CreateNetworkMerakiAuthUserRequest createNetworkMerakiAuthUserRequest) throws ApiException {
        okhttp3.Call localVarCall = createNetworkMerakiAuthUser_0ValidateBeforeCall(networkId, createNetworkMerakiAuthUserRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkMerakiAuthUsers200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Authorize a user configured with Meraki Authentication for a network (currently supports 802.1X, splash guest, and client VPN users, and currently, organizations have a 50,000 user cap) (asynchronously)
     * Authorize a user configured with Meraki Authentication for a network (currently supports 802.1X, splash guest, and client VPN users, and currently, organizations have a 50,000 user cap)
     * @param networkId  (required)
     * @param createNetworkMerakiAuthUserRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkMerakiAuthUser_0Async(String networkId, CreateNetworkMerakiAuthUserRequest createNetworkMerakiAuthUserRequest, final ApiCallback<GetNetworkMerakiAuthUsers200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkMerakiAuthUser_0ValidateBeforeCall(networkId, createNetworkMerakiAuthUserRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkMerakiAuthUsers200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNetworkMqttBroker_0
     * @param networkId  (required)
     * @param createNetworkMqttBrokerRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkMqttBroker_0Call(String networkId, CreateNetworkMqttBrokerRequest createNetworkMqttBrokerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNetworkMqttBrokerRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/mqttBrokers"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkMqttBroker_0ValidateBeforeCall(String networkId, CreateNetworkMqttBrokerRequest createNetworkMqttBrokerRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling createNetworkMqttBroker_0(Async)");
        }

        // verify the required parameter 'createNetworkMqttBrokerRequest' is set
        if (createNetworkMqttBrokerRequest == null) {
            throw new ApiException("Missing the required parameter 'createNetworkMqttBrokerRequest' when calling createNetworkMqttBroker_0(Async)");
        }

        return createNetworkMqttBroker_0Call(networkId, createNetworkMqttBrokerRequest, _callback);

    }

    /**
     * Add an MQTT broker
     * Add an MQTT broker
     * @param networkId  (required)
     * @param createNetworkMqttBrokerRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object createNetworkMqttBroker_0(String networkId, CreateNetworkMqttBrokerRequest createNetworkMqttBrokerRequest) throws ApiException {
        ApiResponse<Object> localVarResp = createNetworkMqttBroker_0WithHttpInfo(networkId, createNetworkMqttBrokerRequest);
        return localVarResp.getData();
    }

    /**
     * Add an MQTT broker
     * Add an MQTT broker
     * @param networkId  (required)
     * @param createNetworkMqttBrokerRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createNetworkMqttBroker_0WithHttpInfo(String networkId, CreateNetworkMqttBrokerRequest createNetworkMqttBrokerRequest) throws ApiException {
        okhttp3.Call localVarCall = createNetworkMqttBroker_0ValidateBeforeCall(networkId, createNetworkMqttBrokerRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add an MQTT broker (asynchronously)
     * Add an MQTT broker
     * @param networkId  (required)
     * @param createNetworkMqttBrokerRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkMqttBroker_0Async(String networkId, CreateNetworkMqttBrokerRequest createNetworkMqttBrokerRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkMqttBroker_0ValidateBeforeCall(networkId, createNetworkMqttBrokerRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNetworkPiiRequest_0
     * @param networkId  (required)
     * @param createNetworkPiiRequestRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkPiiRequest_0Call(String networkId, CreateNetworkPiiRequestRequest createNetworkPiiRequestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNetworkPiiRequestRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/pii/requests"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkPiiRequest_0ValidateBeforeCall(String networkId, CreateNetworkPiiRequestRequest createNetworkPiiRequestRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling createNetworkPiiRequest_0(Async)");
        }

        return createNetworkPiiRequest_0Call(networkId, createNetworkPiiRequestRequest, _callback);

    }

    /**
     * Submit a new delete or restrict processing PII request
     * Submit a new delete or restrict processing PII request  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/requests &#x60;&#x60;&#x60;
     * @param networkId  (required)
     * @param createNetworkPiiRequestRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object createNetworkPiiRequest_0(String networkId, CreateNetworkPiiRequestRequest createNetworkPiiRequestRequest) throws ApiException {
        ApiResponse<Object> localVarResp = createNetworkPiiRequest_0WithHttpInfo(networkId, createNetworkPiiRequestRequest);
        return localVarResp.getData();
    }

    /**
     * Submit a new delete or restrict processing PII request
     * Submit a new delete or restrict processing PII request  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/requests &#x60;&#x60;&#x60;
     * @param networkId  (required)
     * @param createNetworkPiiRequestRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createNetworkPiiRequest_0WithHttpInfo(String networkId, CreateNetworkPiiRequestRequest createNetworkPiiRequestRequest) throws ApiException {
        okhttp3.Call localVarCall = createNetworkPiiRequest_0ValidateBeforeCall(networkId, createNetworkPiiRequestRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Submit a new delete or restrict processing PII request (asynchronously)
     * Submit a new delete or restrict processing PII request  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/requests &#x60;&#x60;&#x60;
     * @param networkId  (required)
     * @param createNetworkPiiRequestRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkPiiRequest_0Async(String networkId, CreateNetworkPiiRequestRequest createNetworkPiiRequestRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkPiiRequest_0ValidateBeforeCall(networkId, createNetworkPiiRequestRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNetworkSensorAlertsProfile_0
     * @param networkId  (required)
     * @param createNetworkSensorAlertsProfileRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkSensorAlertsProfile_0Call(String networkId, CreateNetworkSensorAlertsProfileRequest createNetworkSensorAlertsProfileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNetworkSensorAlertsProfileRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/sensor/alerts/profiles"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkSensorAlertsProfile_0ValidateBeforeCall(String networkId, CreateNetworkSensorAlertsProfileRequest createNetworkSensorAlertsProfileRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling createNetworkSensorAlertsProfile_0(Async)");
        }

        // verify the required parameter 'createNetworkSensorAlertsProfileRequest' is set
        if (createNetworkSensorAlertsProfileRequest == null) {
            throw new ApiException("Missing the required parameter 'createNetworkSensorAlertsProfileRequest' when calling createNetworkSensorAlertsProfile_0(Async)");
        }

        return createNetworkSensorAlertsProfile_0Call(networkId, createNetworkSensorAlertsProfileRequest, _callback);

    }

    /**
     * Creates a sensor alert profile for a network.
     * Creates a sensor alert profile for a network.
     * @param networkId  (required)
     * @param createNetworkSensorAlertsProfileRequest  (required)
     * @return GetNetworkSensorAlertsProfiles200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkSensorAlertsProfiles200ResponseInner createNetworkSensorAlertsProfile_0(String networkId, CreateNetworkSensorAlertsProfileRequest createNetworkSensorAlertsProfileRequest) throws ApiException {
        ApiResponse<GetNetworkSensorAlertsProfiles200ResponseInner> localVarResp = createNetworkSensorAlertsProfile_0WithHttpInfo(networkId, createNetworkSensorAlertsProfileRequest);
        return localVarResp.getData();
    }

    /**
     * Creates a sensor alert profile for a network.
     * Creates a sensor alert profile for a network.
     * @param networkId  (required)
     * @param createNetworkSensorAlertsProfileRequest  (required)
     * @return ApiResponse&lt;GetNetworkSensorAlertsProfiles200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkSensorAlertsProfiles200ResponseInner> createNetworkSensorAlertsProfile_0WithHttpInfo(String networkId, CreateNetworkSensorAlertsProfileRequest createNetworkSensorAlertsProfileRequest) throws ApiException {
        okhttp3.Call localVarCall = createNetworkSensorAlertsProfile_0ValidateBeforeCall(networkId, createNetworkSensorAlertsProfileRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkSensorAlertsProfiles200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a sensor alert profile for a network. (asynchronously)
     * Creates a sensor alert profile for a network.
     * @param networkId  (required)
     * @param createNetworkSensorAlertsProfileRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkSensorAlertsProfile_0Async(String networkId, CreateNetworkSensorAlertsProfileRequest createNetworkSensorAlertsProfileRequest, final ApiCallback<GetNetworkSensorAlertsProfiles200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkSensorAlertsProfile_0ValidateBeforeCall(networkId, createNetworkSensorAlertsProfileRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkSensorAlertsProfiles200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNetworkSmBypassActivationLockAttempt_0
     * @param networkId  (required)
     * @param createNetworkSmBypassActivationLockAttemptRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkSmBypassActivationLockAttempt_0Call(String networkId, CreateNetworkSmBypassActivationLockAttemptRequest createNetworkSmBypassActivationLockAttemptRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNetworkSmBypassActivationLockAttemptRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/sm/bypassActivationLockAttempts"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkSmBypassActivationLockAttempt_0ValidateBeforeCall(String networkId, CreateNetworkSmBypassActivationLockAttemptRequest createNetworkSmBypassActivationLockAttemptRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling createNetworkSmBypassActivationLockAttempt_0(Async)");
        }

        // verify the required parameter 'createNetworkSmBypassActivationLockAttemptRequest' is set
        if (createNetworkSmBypassActivationLockAttemptRequest == null) {
            throw new ApiException("Missing the required parameter 'createNetworkSmBypassActivationLockAttemptRequest' when calling createNetworkSmBypassActivationLockAttempt_0(Async)");
        }

        return createNetworkSmBypassActivationLockAttempt_0Call(networkId, createNetworkSmBypassActivationLockAttemptRequest, _callback);

    }

    /**
     * Bypass activation lock attempt
     * Bypass activation lock attempt
     * @param networkId  (required)
     * @param createNetworkSmBypassActivationLockAttemptRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object createNetworkSmBypassActivationLockAttempt_0(String networkId, CreateNetworkSmBypassActivationLockAttemptRequest createNetworkSmBypassActivationLockAttemptRequest) throws ApiException {
        ApiResponse<Object> localVarResp = createNetworkSmBypassActivationLockAttempt_0WithHttpInfo(networkId, createNetworkSmBypassActivationLockAttemptRequest);
        return localVarResp.getData();
    }

    /**
     * Bypass activation lock attempt
     * Bypass activation lock attempt
     * @param networkId  (required)
     * @param createNetworkSmBypassActivationLockAttemptRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createNetworkSmBypassActivationLockAttempt_0WithHttpInfo(String networkId, CreateNetworkSmBypassActivationLockAttemptRequest createNetworkSmBypassActivationLockAttemptRequest) throws ApiException {
        okhttp3.Call localVarCall = createNetworkSmBypassActivationLockAttempt_0ValidateBeforeCall(networkId, createNetworkSmBypassActivationLockAttemptRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Bypass activation lock attempt (asynchronously)
     * Bypass activation lock attempt
     * @param networkId  (required)
     * @param createNetworkSmBypassActivationLockAttemptRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkSmBypassActivationLockAttempt_0Async(String networkId, CreateNetworkSmBypassActivationLockAttemptRequest createNetworkSmBypassActivationLockAttemptRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkSmBypassActivationLockAttempt_0ValidateBeforeCall(networkId, createNetworkSmBypassActivationLockAttemptRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNetworkSmTargetGroup_0
     * @param networkId  (required)
     * @param createNetworkSmTargetGroupRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkSmTargetGroup_0Call(String networkId, CreateNetworkSmTargetGroupRequest createNetworkSmTargetGroupRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNetworkSmTargetGroupRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/sm/targetGroups"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkSmTargetGroup_0ValidateBeforeCall(String networkId, CreateNetworkSmTargetGroupRequest createNetworkSmTargetGroupRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling createNetworkSmTargetGroup_0(Async)");
        }

        return createNetworkSmTargetGroup_0Call(networkId, createNetworkSmTargetGroupRequest, _callback);

    }

    /**
     * Add a target group
     * Add a target group
     * @param networkId  (required)
     * @param createNetworkSmTargetGroupRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object createNetworkSmTargetGroup_0(String networkId, CreateNetworkSmTargetGroupRequest createNetworkSmTargetGroupRequest) throws ApiException {
        ApiResponse<Object> localVarResp = createNetworkSmTargetGroup_0WithHttpInfo(networkId, createNetworkSmTargetGroupRequest);
        return localVarResp.getData();
    }

    /**
     * Add a target group
     * Add a target group
     * @param networkId  (required)
     * @param createNetworkSmTargetGroupRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createNetworkSmTargetGroup_0WithHttpInfo(String networkId, CreateNetworkSmTargetGroupRequest createNetworkSmTargetGroupRequest) throws ApiException {
        okhttp3.Call localVarCall = createNetworkSmTargetGroup_0ValidateBeforeCall(networkId, createNetworkSmTargetGroupRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a target group (asynchronously)
     * Add a target group
     * @param networkId  (required)
     * @param createNetworkSmTargetGroupRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkSmTargetGroup_0Async(String networkId, CreateNetworkSmTargetGroupRequest createNetworkSmTargetGroupRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkSmTargetGroup_0ValidateBeforeCall(networkId, createNetworkSmTargetGroupRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNetworkSwitchAccessPolicy_0
     * @param networkId  (required)
     * @param createNetworkSwitchAccessPolicyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkSwitchAccessPolicy_0Call(String networkId, CreateNetworkSwitchAccessPolicyRequest createNetworkSwitchAccessPolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNetworkSwitchAccessPolicyRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/accessPolicies"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkSwitchAccessPolicy_0ValidateBeforeCall(String networkId, CreateNetworkSwitchAccessPolicyRequest createNetworkSwitchAccessPolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling createNetworkSwitchAccessPolicy_0(Async)");
        }

        // verify the required parameter 'createNetworkSwitchAccessPolicyRequest' is set
        if (createNetworkSwitchAccessPolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'createNetworkSwitchAccessPolicyRequest' when calling createNetworkSwitchAccessPolicy_0(Async)");
        }

        return createNetworkSwitchAccessPolicy_0Call(networkId, createNetworkSwitchAccessPolicyRequest, _callback);

    }

    /**
     * Create an access policy for a switch network
     * Create an access policy for a switch network. If you would like to enable Meraki Authentication, set radiusServers to empty array.
     * @param networkId  (required)
     * @param createNetworkSwitchAccessPolicyRequest  (required)
     * @return GetNetworkSwitchAccessPolicies200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkSwitchAccessPolicies200ResponseInner createNetworkSwitchAccessPolicy_0(String networkId, CreateNetworkSwitchAccessPolicyRequest createNetworkSwitchAccessPolicyRequest) throws ApiException {
        ApiResponse<GetNetworkSwitchAccessPolicies200ResponseInner> localVarResp = createNetworkSwitchAccessPolicy_0WithHttpInfo(networkId, createNetworkSwitchAccessPolicyRequest);
        return localVarResp.getData();
    }

    /**
     * Create an access policy for a switch network
     * Create an access policy for a switch network. If you would like to enable Meraki Authentication, set radiusServers to empty array.
     * @param networkId  (required)
     * @param createNetworkSwitchAccessPolicyRequest  (required)
     * @return ApiResponse&lt;GetNetworkSwitchAccessPolicies200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkSwitchAccessPolicies200ResponseInner> createNetworkSwitchAccessPolicy_0WithHttpInfo(String networkId, CreateNetworkSwitchAccessPolicyRequest createNetworkSwitchAccessPolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = createNetworkSwitchAccessPolicy_0ValidateBeforeCall(networkId, createNetworkSwitchAccessPolicyRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkSwitchAccessPolicies200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an access policy for a switch network (asynchronously)
     * Create an access policy for a switch network. If you would like to enable Meraki Authentication, set radiusServers to empty array.
     * @param networkId  (required)
     * @param createNetworkSwitchAccessPolicyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkSwitchAccessPolicy_0Async(String networkId, CreateNetworkSwitchAccessPolicyRequest createNetworkSwitchAccessPolicyRequest, final ApiCallback<GetNetworkSwitchAccessPolicies200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkSwitchAccessPolicy_0ValidateBeforeCall(networkId, createNetworkSwitchAccessPolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkSwitchAccessPolicies200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_0
     * @param networkId  (required)
     * @param createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_0Call(String networkId, CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/dhcpServerPolicy/arpInspection/trustedServers"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_0ValidateBeforeCall(String networkId, CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_0(Async)");
        }

        // verify the required parameter 'createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest' is set
        if (createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest == null) {
            throw new ApiException("Missing the required parameter 'createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest' when calling createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_0(Async)");
        }

        return createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_0Call(networkId, createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest, _callback);

    }

    /**
     * Add a server to be trusted by Dynamic ARP Inspection on this network
     * Add a server to be trusted by Dynamic ARP Inspection on this network
     * @param networkId  (required)
     * @param createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest  (required)
     * @return GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_0(String networkId, CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest) throws ApiException {
        ApiResponse<GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner> localVarResp = createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_0WithHttpInfo(networkId, createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest);
        return localVarResp.getData();
    }

    /**
     * Add a server to be trusted by Dynamic ARP Inspection on this network
     * Add a server to be trusted by Dynamic ARP Inspection on this network
     * @param networkId  (required)
     * @param createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest  (required)
     * @return ApiResponse&lt;GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner> createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_0WithHttpInfo(String networkId, CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest) throws ApiException {
        okhttp3.Call localVarCall = createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_0ValidateBeforeCall(networkId, createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a server to be trusted by Dynamic ARP Inspection on this network (asynchronously)
     * Add a server to be trusted by Dynamic ARP Inspection on this network
     * @param networkId  (required)
     * @param createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_0Async(String networkId, CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest, final ApiCallback<GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_0ValidateBeforeCall(networkId, createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNetworkSwitchLinkAggregation_0
     * @param networkId  (required)
     * @param createNetworkSwitchLinkAggregationRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkSwitchLinkAggregation_0Call(String networkId, CreateNetworkSwitchLinkAggregationRequest createNetworkSwitchLinkAggregationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNetworkSwitchLinkAggregationRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/linkAggregations"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkSwitchLinkAggregation_0ValidateBeforeCall(String networkId, CreateNetworkSwitchLinkAggregationRequest createNetworkSwitchLinkAggregationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling createNetworkSwitchLinkAggregation_0(Async)");
        }

        return createNetworkSwitchLinkAggregation_0Call(networkId, createNetworkSwitchLinkAggregationRequest, _callback);

    }

    /**
     * Create a link aggregation group
     * Create a link aggregation group
     * @param networkId  (required)
     * @param createNetworkSwitchLinkAggregationRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object createNetworkSwitchLinkAggregation_0(String networkId, CreateNetworkSwitchLinkAggregationRequest createNetworkSwitchLinkAggregationRequest) throws ApiException {
        ApiResponse<Object> localVarResp = createNetworkSwitchLinkAggregation_0WithHttpInfo(networkId, createNetworkSwitchLinkAggregationRequest);
        return localVarResp.getData();
    }

    /**
     * Create a link aggregation group
     * Create a link aggregation group
     * @param networkId  (required)
     * @param createNetworkSwitchLinkAggregationRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createNetworkSwitchLinkAggregation_0WithHttpInfo(String networkId, CreateNetworkSwitchLinkAggregationRequest createNetworkSwitchLinkAggregationRequest) throws ApiException {
        okhttp3.Call localVarCall = createNetworkSwitchLinkAggregation_0ValidateBeforeCall(networkId, createNetworkSwitchLinkAggregationRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a link aggregation group (asynchronously)
     * Create a link aggregation group
     * @param networkId  (required)
     * @param createNetworkSwitchLinkAggregationRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkSwitchLinkAggregation_0Async(String networkId, CreateNetworkSwitchLinkAggregationRequest createNetworkSwitchLinkAggregationRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkSwitchLinkAggregation_0ValidateBeforeCall(networkId, createNetworkSwitchLinkAggregationRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNetworkSwitchPortSchedule_0
     * @param networkId  (required)
     * @param createNetworkSwitchPortScheduleRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkSwitchPortSchedule_0Call(String networkId, CreateNetworkSwitchPortScheduleRequest createNetworkSwitchPortScheduleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNetworkSwitchPortScheduleRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/portSchedules"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkSwitchPortSchedule_0ValidateBeforeCall(String networkId, CreateNetworkSwitchPortScheduleRequest createNetworkSwitchPortScheduleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling createNetworkSwitchPortSchedule_0(Async)");
        }

        // verify the required parameter 'createNetworkSwitchPortScheduleRequest' is set
        if (createNetworkSwitchPortScheduleRequest == null) {
            throw new ApiException("Missing the required parameter 'createNetworkSwitchPortScheduleRequest' when calling createNetworkSwitchPortSchedule_0(Async)");
        }

        return createNetworkSwitchPortSchedule_0Call(networkId, createNetworkSwitchPortScheduleRequest, _callback);

    }

    /**
     * Add a switch port schedule
     * Add a switch port schedule
     * @param networkId  (required)
     * @param createNetworkSwitchPortScheduleRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object createNetworkSwitchPortSchedule_0(String networkId, CreateNetworkSwitchPortScheduleRequest createNetworkSwitchPortScheduleRequest) throws ApiException {
        ApiResponse<Object> localVarResp = createNetworkSwitchPortSchedule_0WithHttpInfo(networkId, createNetworkSwitchPortScheduleRequest);
        return localVarResp.getData();
    }

    /**
     * Add a switch port schedule
     * Add a switch port schedule
     * @param networkId  (required)
     * @param createNetworkSwitchPortScheduleRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createNetworkSwitchPortSchedule_0WithHttpInfo(String networkId, CreateNetworkSwitchPortScheduleRequest createNetworkSwitchPortScheduleRequest) throws ApiException {
        okhttp3.Call localVarCall = createNetworkSwitchPortSchedule_0ValidateBeforeCall(networkId, createNetworkSwitchPortScheduleRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a switch port schedule (asynchronously)
     * Add a switch port schedule
     * @param networkId  (required)
     * @param createNetworkSwitchPortScheduleRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkSwitchPortSchedule_0Async(String networkId, CreateNetworkSwitchPortScheduleRequest createNetworkSwitchPortScheduleRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkSwitchPortSchedule_0ValidateBeforeCall(networkId, createNetworkSwitchPortScheduleRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNetworkSwitchQosRule_0
     * @param networkId  (required)
     * @param createNetworkSwitchQosRuleRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkSwitchQosRule_0Call(String networkId, CreateNetworkSwitchQosRuleRequest createNetworkSwitchQosRuleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNetworkSwitchQosRuleRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/qosRules"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkSwitchQosRule_0ValidateBeforeCall(String networkId, CreateNetworkSwitchQosRuleRequest createNetworkSwitchQosRuleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling createNetworkSwitchQosRule_0(Async)");
        }

        // verify the required parameter 'createNetworkSwitchQosRuleRequest' is set
        if (createNetworkSwitchQosRuleRequest == null) {
            throw new ApiException("Missing the required parameter 'createNetworkSwitchQosRuleRequest' when calling createNetworkSwitchQosRule_0(Async)");
        }

        return createNetworkSwitchQosRule_0Call(networkId, createNetworkSwitchQosRuleRequest, _callback);

    }

    /**
     * Add a quality of service rule
     * Add a quality of service rule
     * @param networkId  (required)
     * @param createNetworkSwitchQosRuleRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object createNetworkSwitchQosRule_0(String networkId, CreateNetworkSwitchQosRuleRequest createNetworkSwitchQosRuleRequest) throws ApiException {
        ApiResponse<Object> localVarResp = createNetworkSwitchQosRule_0WithHttpInfo(networkId, createNetworkSwitchQosRuleRequest);
        return localVarResp.getData();
    }

    /**
     * Add a quality of service rule
     * Add a quality of service rule
     * @param networkId  (required)
     * @param createNetworkSwitchQosRuleRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createNetworkSwitchQosRule_0WithHttpInfo(String networkId, CreateNetworkSwitchQosRuleRequest createNetworkSwitchQosRuleRequest) throws ApiException {
        okhttp3.Call localVarCall = createNetworkSwitchQosRule_0ValidateBeforeCall(networkId, createNetworkSwitchQosRuleRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a quality of service rule (asynchronously)
     * Add a quality of service rule
     * @param networkId  (required)
     * @param createNetworkSwitchQosRuleRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkSwitchQosRule_0Async(String networkId, CreateNetworkSwitchQosRuleRequest createNetworkSwitchQosRuleRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkSwitchQosRule_0ValidateBeforeCall(networkId, createNetworkSwitchQosRuleRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNetworkSwitchRoutingMulticastRendezvousPoint_0
     * @param networkId  (required)
     * @param createNetworkSwitchRoutingMulticastRendezvousPointRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkSwitchRoutingMulticastRendezvousPoint_0Call(String networkId, CreateNetworkSwitchRoutingMulticastRendezvousPointRequest createNetworkSwitchRoutingMulticastRendezvousPointRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNetworkSwitchRoutingMulticastRendezvousPointRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/routing/multicast/rendezvousPoints"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkSwitchRoutingMulticastRendezvousPoint_0ValidateBeforeCall(String networkId, CreateNetworkSwitchRoutingMulticastRendezvousPointRequest createNetworkSwitchRoutingMulticastRendezvousPointRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling createNetworkSwitchRoutingMulticastRendezvousPoint_0(Async)");
        }

        // verify the required parameter 'createNetworkSwitchRoutingMulticastRendezvousPointRequest' is set
        if (createNetworkSwitchRoutingMulticastRendezvousPointRequest == null) {
            throw new ApiException("Missing the required parameter 'createNetworkSwitchRoutingMulticastRendezvousPointRequest' when calling createNetworkSwitchRoutingMulticastRendezvousPoint_0(Async)");
        }

        return createNetworkSwitchRoutingMulticastRendezvousPoint_0Call(networkId, createNetworkSwitchRoutingMulticastRendezvousPointRequest, _callback);

    }

    /**
     * Create a multicast rendezvous point
     * Create a multicast rendezvous point
     * @param networkId  (required)
     * @param createNetworkSwitchRoutingMulticastRendezvousPointRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object createNetworkSwitchRoutingMulticastRendezvousPoint_0(String networkId, CreateNetworkSwitchRoutingMulticastRendezvousPointRequest createNetworkSwitchRoutingMulticastRendezvousPointRequest) throws ApiException {
        ApiResponse<Object> localVarResp = createNetworkSwitchRoutingMulticastRendezvousPoint_0WithHttpInfo(networkId, createNetworkSwitchRoutingMulticastRendezvousPointRequest);
        return localVarResp.getData();
    }

    /**
     * Create a multicast rendezvous point
     * Create a multicast rendezvous point
     * @param networkId  (required)
     * @param createNetworkSwitchRoutingMulticastRendezvousPointRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createNetworkSwitchRoutingMulticastRendezvousPoint_0WithHttpInfo(String networkId, CreateNetworkSwitchRoutingMulticastRendezvousPointRequest createNetworkSwitchRoutingMulticastRendezvousPointRequest) throws ApiException {
        okhttp3.Call localVarCall = createNetworkSwitchRoutingMulticastRendezvousPoint_0ValidateBeforeCall(networkId, createNetworkSwitchRoutingMulticastRendezvousPointRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a multicast rendezvous point (asynchronously)
     * Create a multicast rendezvous point
     * @param networkId  (required)
     * @param createNetworkSwitchRoutingMulticastRendezvousPointRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkSwitchRoutingMulticastRendezvousPoint_0Async(String networkId, CreateNetworkSwitchRoutingMulticastRendezvousPointRequest createNetworkSwitchRoutingMulticastRendezvousPointRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkSwitchRoutingMulticastRendezvousPoint_0ValidateBeforeCall(networkId, createNetworkSwitchRoutingMulticastRendezvousPointRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNetworkSwitchStackRoutingInterface_0
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param createNetworkSwitchStackRoutingInterfaceRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkSwitchStackRoutingInterface_0Call(String networkId, String switchStackId, CreateNetworkSwitchStackRoutingInterfaceRequest createNetworkSwitchStackRoutingInterfaceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNetworkSwitchStackRoutingInterfaceRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "switchStackId" + "}", localVarApiClient.escapeString(switchStackId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkSwitchStackRoutingInterface_0ValidateBeforeCall(String networkId, String switchStackId, CreateNetworkSwitchStackRoutingInterfaceRequest createNetworkSwitchStackRoutingInterfaceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling createNetworkSwitchStackRoutingInterface_0(Async)");
        }

        // verify the required parameter 'switchStackId' is set
        if (switchStackId == null) {
            throw new ApiException("Missing the required parameter 'switchStackId' when calling createNetworkSwitchStackRoutingInterface_0(Async)");
        }

        // verify the required parameter 'createNetworkSwitchStackRoutingInterfaceRequest' is set
        if (createNetworkSwitchStackRoutingInterfaceRequest == null) {
            throw new ApiException("Missing the required parameter 'createNetworkSwitchStackRoutingInterfaceRequest' when calling createNetworkSwitchStackRoutingInterface_0(Async)");
        }

        return createNetworkSwitchStackRoutingInterface_0Call(networkId, switchStackId, createNetworkSwitchStackRoutingInterfaceRequest, _callback);

    }

    /**
     * Create a layer 3 interface for a switch stack
     * Create a layer 3 interface for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param createNetworkSwitchStackRoutingInterfaceRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object createNetworkSwitchStackRoutingInterface_0(String networkId, String switchStackId, CreateNetworkSwitchStackRoutingInterfaceRequest createNetworkSwitchStackRoutingInterfaceRequest) throws ApiException {
        ApiResponse<Object> localVarResp = createNetworkSwitchStackRoutingInterface_0WithHttpInfo(networkId, switchStackId, createNetworkSwitchStackRoutingInterfaceRequest);
        return localVarResp.getData();
    }

    /**
     * Create a layer 3 interface for a switch stack
     * Create a layer 3 interface for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param createNetworkSwitchStackRoutingInterfaceRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createNetworkSwitchStackRoutingInterface_0WithHttpInfo(String networkId, String switchStackId, CreateNetworkSwitchStackRoutingInterfaceRequest createNetworkSwitchStackRoutingInterfaceRequest) throws ApiException {
        okhttp3.Call localVarCall = createNetworkSwitchStackRoutingInterface_0ValidateBeforeCall(networkId, switchStackId, createNetworkSwitchStackRoutingInterfaceRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a layer 3 interface for a switch stack (asynchronously)
     * Create a layer 3 interface for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param createNetworkSwitchStackRoutingInterfaceRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkSwitchStackRoutingInterface_0Async(String networkId, String switchStackId, CreateNetworkSwitchStackRoutingInterfaceRequest createNetworkSwitchStackRoutingInterfaceRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkSwitchStackRoutingInterface_0ValidateBeforeCall(networkId, switchStackId, createNetworkSwitchStackRoutingInterfaceRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNetworkSwitchStackRoutingStaticRoute_0
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param createDeviceSwitchRoutingStaticRouteRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkSwitchStackRoutingStaticRoute_0Call(String networkId, String switchStackId, CreateDeviceSwitchRoutingStaticRouteRequest createDeviceSwitchRoutingStaticRouteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDeviceSwitchRoutingStaticRouteRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "switchStackId" + "}", localVarApiClient.escapeString(switchStackId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkSwitchStackRoutingStaticRoute_0ValidateBeforeCall(String networkId, String switchStackId, CreateDeviceSwitchRoutingStaticRouteRequest createDeviceSwitchRoutingStaticRouteRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling createNetworkSwitchStackRoutingStaticRoute_0(Async)");
        }

        // verify the required parameter 'switchStackId' is set
        if (switchStackId == null) {
            throw new ApiException("Missing the required parameter 'switchStackId' when calling createNetworkSwitchStackRoutingStaticRoute_0(Async)");
        }

        // verify the required parameter 'createDeviceSwitchRoutingStaticRouteRequest' is set
        if (createDeviceSwitchRoutingStaticRouteRequest == null) {
            throw new ApiException("Missing the required parameter 'createDeviceSwitchRoutingStaticRouteRequest' when calling createNetworkSwitchStackRoutingStaticRoute_0(Async)");
        }

        return createNetworkSwitchStackRoutingStaticRoute_0Call(networkId, switchStackId, createDeviceSwitchRoutingStaticRouteRequest, _callback);

    }

    /**
     * Create a layer 3 static route for a switch stack
     * Create a layer 3 static route for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param createDeviceSwitchRoutingStaticRouteRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object createNetworkSwitchStackRoutingStaticRoute_0(String networkId, String switchStackId, CreateDeviceSwitchRoutingStaticRouteRequest createDeviceSwitchRoutingStaticRouteRequest) throws ApiException {
        ApiResponse<Object> localVarResp = createNetworkSwitchStackRoutingStaticRoute_0WithHttpInfo(networkId, switchStackId, createDeviceSwitchRoutingStaticRouteRequest);
        return localVarResp.getData();
    }

    /**
     * Create a layer 3 static route for a switch stack
     * Create a layer 3 static route for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param createDeviceSwitchRoutingStaticRouteRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createNetworkSwitchStackRoutingStaticRoute_0WithHttpInfo(String networkId, String switchStackId, CreateDeviceSwitchRoutingStaticRouteRequest createDeviceSwitchRoutingStaticRouteRequest) throws ApiException {
        okhttp3.Call localVarCall = createNetworkSwitchStackRoutingStaticRoute_0ValidateBeforeCall(networkId, switchStackId, createDeviceSwitchRoutingStaticRouteRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a layer 3 static route for a switch stack (asynchronously)
     * Create a layer 3 static route for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param createDeviceSwitchRoutingStaticRouteRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkSwitchStackRoutingStaticRoute_0Async(String networkId, String switchStackId, CreateDeviceSwitchRoutingStaticRouteRequest createDeviceSwitchRoutingStaticRouteRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkSwitchStackRoutingStaticRoute_0ValidateBeforeCall(networkId, switchStackId, createDeviceSwitchRoutingStaticRouteRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNetworkSwitchStack_0
     * @param networkId  (required)
     * @param createNetworkSwitchStackRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkSwitchStack_0Call(String networkId, CreateNetworkSwitchStackRequest createNetworkSwitchStackRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNetworkSwitchStackRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/stacks"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkSwitchStack_0ValidateBeforeCall(String networkId, CreateNetworkSwitchStackRequest createNetworkSwitchStackRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling createNetworkSwitchStack_0(Async)");
        }

        // verify the required parameter 'createNetworkSwitchStackRequest' is set
        if (createNetworkSwitchStackRequest == null) {
            throw new ApiException("Missing the required parameter 'createNetworkSwitchStackRequest' when calling createNetworkSwitchStack_0(Async)");
        }

        return createNetworkSwitchStack_0Call(networkId, createNetworkSwitchStackRequest, _callback);

    }

    /**
     * Create a stack
     * Create a stack
     * @param networkId  (required)
     * @param createNetworkSwitchStackRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object createNetworkSwitchStack_0(String networkId, CreateNetworkSwitchStackRequest createNetworkSwitchStackRequest) throws ApiException {
        ApiResponse<Object> localVarResp = createNetworkSwitchStack_0WithHttpInfo(networkId, createNetworkSwitchStackRequest);
        return localVarResp.getData();
    }

    /**
     * Create a stack
     * Create a stack
     * @param networkId  (required)
     * @param createNetworkSwitchStackRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createNetworkSwitchStack_0WithHttpInfo(String networkId, CreateNetworkSwitchStackRequest createNetworkSwitchStackRequest) throws ApiException {
        okhttp3.Call localVarCall = createNetworkSwitchStack_0ValidateBeforeCall(networkId, createNetworkSwitchStackRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a stack (asynchronously)
     * Create a stack
     * @param networkId  (required)
     * @param createNetworkSwitchStackRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkSwitchStack_0Async(String networkId, CreateNetworkSwitchStackRequest createNetworkSwitchStackRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkSwitchStack_0ValidateBeforeCall(networkId, createNetworkSwitchStackRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNetworkWebhooksHttpServer_0
     * @param networkId  (required)
     * @param createNetworkWebhooksHttpServerRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkWebhooksHttpServer_0Call(String networkId, CreateNetworkWebhooksHttpServerRequest createNetworkWebhooksHttpServerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNetworkWebhooksHttpServerRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/webhooks/httpServers"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkWebhooksHttpServer_0ValidateBeforeCall(String networkId, CreateNetworkWebhooksHttpServerRequest createNetworkWebhooksHttpServerRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling createNetworkWebhooksHttpServer_0(Async)");
        }

        // verify the required parameter 'createNetworkWebhooksHttpServerRequest' is set
        if (createNetworkWebhooksHttpServerRequest == null) {
            throw new ApiException("Missing the required parameter 'createNetworkWebhooksHttpServerRequest' when calling createNetworkWebhooksHttpServer_0(Async)");
        }

        return createNetworkWebhooksHttpServer_0Call(networkId, createNetworkWebhooksHttpServerRequest, _callback);

    }

    /**
     * Add an HTTP server to a network
     * Add an HTTP server to a network
     * @param networkId  (required)
     * @param createNetworkWebhooksHttpServerRequest  (required)
     * @return GetNetworkWebhooksHttpServers200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkWebhooksHttpServers200ResponseInner createNetworkWebhooksHttpServer_0(String networkId, CreateNetworkWebhooksHttpServerRequest createNetworkWebhooksHttpServerRequest) throws ApiException {
        ApiResponse<GetNetworkWebhooksHttpServers200ResponseInner> localVarResp = createNetworkWebhooksHttpServer_0WithHttpInfo(networkId, createNetworkWebhooksHttpServerRequest);
        return localVarResp.getData();
    }

    /**
     * Add an HTTP server to a network
     * Add an HTTP server to a network
     * @param networkId  (required)
     * @param createNetworkWebhooksHttpServerRequest  (required)
     * @return ApiResponse&lt;GetNetworkWebhooksHttpServers200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkWebhooksHttpServers200ResponseInner> createNetworkWebhooksHttpServer_0WithHttpInfo(String networkId, CreateNetworkWebhooksHttpServerRequest createNetworkWebhooksHttpServerRequest) throws ApiException {
        okhttp3.Call localVarCall = createNetworkWebhooksHttpServer_0ValidateBeforeCall(networkId, createNetworkWebhooksHttpServerRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkWebhooksHttpServers200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add an HTTP server to a network (asynchronously)
     * Add an HTTP server to a network
     * @param networkId  (required)
     * @param createNetworkWebhooksHttpServerRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkWebhooksHttpServer_0Async(String networkId, CreateNetworkWebhooksHttpServerRequest createNetworkWebhooksHttpServerRequest, final ApiCallback<GetNetworkWebhooksHttpServers200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkWebhooksHttpServer_0ValidateBeforeCall(networkId, createNetworkWebhooksHttpServerRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkWebhooksHttpServers200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNetworkWebhooksPayloadTemplate_0
     * @param networkId  (required)
     * @param createNetworkWebhooksPayloadTemplateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkWebhooksPayloadTemplate_0Call(String networkId, CreateNetworkWebhooksPayloadTemplateRequest createNetworkWebhooksPayloadTemplateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNetworkWebhooksPayloadTemplateRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/webhooks/payloadTemplates"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkWebhooksPayloadTemplate_0ValidateBeforeCall(String networkId, CreateNetworkWebhooksPayloadTemplateRequest createNetworkWebhooksPayloadTemplateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling createNetworkWebhooksPayloadTemplate_0(Async)");
        }

        // verify the required parameter 'createNetworkWebhooksPayloadTemplateRequest' is set
        if (createNetworkWebhooksPayloadTemplateRequest == null) {
            throw new ApiException("Missing the required parameter 'createNetworkWebhooksPayloadTemplateRequest' when calling createNetworkWebhooksPayloadTemplate_0(Async)");
        }

        return createNetworkWebhooksPayloadTemplate_0Call(networkId, createNetworkWebhooksPayloadTemplateRequest, _callback);

    }

    /**
     * Create a webhook payload template for a network
     * Create a webhook payload template for a network
     * @param networkId  (required)
     * @param createNetworkWebhooksPayloadTemplateRequest  (required)
     * @return GetNetworkWebhooksPayloadTemplates200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkWebhooksPayloadTemplates200ResponseInner createNetworkWebhooksPayloadTemplate_0(String networkId, CreateNetworkWebhooksPayloadTemplateRequest createNetworkWebhooksPayloadTemplateRequest) throws ApiException {
        ApiResponse<GetNetworkWebhooksPayloadTemplates200ResponseInner> localVarResp = createNetworkWebhooksPayloadTemplate_0WithHttpInfo(networkId, createNetworkWebhooksPayloadTemplateRequest);
        return localVarResp.getData();
    }

    /**
     * Create a webhook payload template for a network
     * Create a webhook payload template for a network
     * @param networkId  (required)
     * @param createNetworkWebhooksPayloadTemplateRequest  (required)
     * @return ApiResponse&lt;GetNetworkWebhooksPayloadTemplates200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkWebhooksPayloadTemplates200ResponseInner> createNetworkWebhooksPayloadTemplate_0WithHttpInfo(String networkId, CreateNetworkWebhooksPayloadTemplateRequest createNetworkWebhooksPayloadTemplateRequest) throws ApiException {
        okhttp3.Call localVarCall = createNetworkWebhooksPayloadTemplate_0ValidateBeforeCall(networkId, createNetworkWebhooksPayloadTemplateRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkWebhooksPayloadTemplates200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a webhook payload template for a network (asynchronously)
     * Create a webhook payload template for a network
     * @param networkId  (required)
     * @param createNetworkWebhooksPayloadTemplateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkWebhooksPayloadTemplate_0Async(String networkId, CreateNetworkWebhooksPayloadTemplateRequest createNetworkWebhooksPayloadTemplateRequest, final ApiCallback<GetNetworkWebhooksPayloadTemplates200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkWebhooksPayloadTemplate_0ValidateBeforeCall(networkId, createNetworkWebhooksPayloadTemplateRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkWebhooksPayloadTemplates200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNetworkWebhooksWebhookTest_0
     * @param networkId  (required)
     * @param createNetworkWebhooksWebhookTestRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkWebhooksWebhookTest_0Call(String networkId, CreateNetworkWebhooksWebhookTestRequest createNetworkWebhooksWebhookTestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNetworkWebhooksWebhookTestRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/webhooks/webhookTests"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkWebhooksWebhookTest_0ValidateBeforeCall(String networkId, CreateNetworkWebhooksWebhookTestRequest createNetworkWebhooksWebhookTestRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling createNetworkWebhooksWebhookTest_0(Async)");
        }

        // verify the required parameter 'createNetworkWebhooksWebhookTestRequest' is set
        if (createNetworkWebhooksWebhookTestRequest == null) {
            throw new ApiException("Missing the required parameter 'createNetworkWebhooksWebhookTestRequest' when calling createNetworkWebhooksWebhookTest_0(Async)");
        }

        return createNetworkWebhooksWebhookTest_0Call(networkId, createNetworkWebhooksWebhookTestRequest, _callback);

    }

    /**
     * Send a test webhook for a network
     * Send a test webhook for a network
     * @param networkId  (required)
     * @param createNetworkWebhooksWebhookTestRequest  (required)
     * @return CreateNetworkWebhooksWebhookTest201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CreateNetworkWebhooksWebhookTest201Response createNetworkWebhooksWebhookTest_0(String networkId, CreateNetworkWebhooksWebhookTestRequest createNetworkWebhooksWebhookTestRequest) throws ApiException {
        ApiResponse<CreateNetworkWebhooksWebhookTest201Response> localVarResp = createNetworkWebhooksWebhookTest_0WithHttpInfo(networkId, createNetworkWebhooksWebhookTestRequest);
        return localVarResp.getData();
    }

    /**
     * Send a test webhook for a network
     * Send a test webhook for a network
     * @param networkId  (required)
     * @param createNetworkWebhooksWebhookTestRequest  (required)
     * @return ApiResponse&lt;CreateNetworkWebhooksWebhookTest201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateNetworkWebhooksWebhookTest201Response> createNetworkWebhooksWebhookTest_0WithHttpInfo(String networkId, CreateNetworkWebhooksWebhookTestRequest createNetworkWebhooksWebhookTestRequest) throws ApiException {
        okhttp3.Call localVarCall = createNetworkWebhooksWebhookTest_0ValidateBeforeCall(networkId, createNetworkWebhooksWebhookTestRequest, null);
        Type localVarReturnType = new TypeToken<CreateNetworkWebhooksWebhookTest201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send a test webhook for a network (asynchronously)
     * Send a test webhook for a network
     * @param networkId  (required)
     * @param createNetworkWebhooksWebhookTestRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkWebhooksWebhookTest_0Async(String networkId, CreateNetworkWebhooksWebhookTestRequest createNetworkWebhooksWebhookTestRequest, final ApiCallback<CreateNetworkWebhooksWebhookTest201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkWebhooksWebhookTest_0ValidateBeforeCall(networkId, createNetworkWebhooksWebhookTestRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateNetworkWebhooksWebhookTest201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNetworkWirelessRfProfile_0
     * @param networkId  (required)
     * @param createNetworkWirelessRfProfileRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkWirelessRfProfile_0Call(String networkId, CreateNetworkWirelessRfProfileRequest createNetworkWirelessRfProfileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNetworkWirelessRfProfileRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/wireless/rfProfiles"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkWirelessRfProfile_0ValidateBeforeCall(String networkId, CreateNetworkWirelessRfProfileRequest createNetworkWirelessRfProfileRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling createNetworkWirelessRfProfile_0(Async)");
        }

        // verify the required parameter 'createNetworkWirelessRfProfileRequest' is set
        if (createNetworkWirelessRfProfileRequest == null) {
            throw new ApiException("Missing the required parameter 'createNetworkWirelessRfProfileRequest' when calling createNetworkWirelessRfProfile_0(Async)");
        }

        return createNetworkWirelessRfProfile_0Call(networkId, createNetworkWirelessRfProfileRequest, _callback);

    }

    /**
     * Creates new RF profile for this network
     * Creates new RF profile for this network
     * @param networkId  (required)
     * @param createNetworkWirelessRfProfileRequest  (required)
     * @return CreateNetworkWirelessRfProfile201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CreateNetworkWirelessRfProfile201Response createNetworkWirelessRfProfile_0(String networkId, CreateNetworkWirelessRfProfileRequest createNetworkWirelessRfProfileRequest) throws ApiException {
        ApiResponse<CreateNetworkWirelessRfProfile201Response> localVarResp = createNetworkWirelessRfProfile_0WithHttpInfo(networkId, createNetworkWirelessRfProfileRequest);
        return localVarResp.getData();
    }

    /**
     * Creates new RF profile for this network
     * Creates new RF profile for this network
     * @param networkId  (required)
     * @param createNetworkWirelessRfProfileRequest  (required)
     * @return ApiResponse&lt;CreateNetworkWirelessRfProfile201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateNetworkWirelessRfProfile201Response> createNetworkWirelessRfProfile_0WithHttpInfo(String networkId, CreateNetworkWirelessRfProfileRequest createNetworkWirelessRfProfileRequest) throws ApiException {
        okhttp3.Call localVarCall = createNetworkWirelessRfProfile_0ValidateBeforeCall(networkId, createNetworkWirelessRfProfileRequest, null);
        Type localVarReturnType = new TypeToken<CreateNetworkWirelessRfProfile201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates new RF profile for this network (asynchronously)
     * Creates new RF profile for this network
     * @param networkId  (required)
     * @param createNetworkWirelessRfProfileRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkWirelessRfProfile_0Async(String networkId, CreateNetworkWirelessRfProfileRequest createNetworkWirelessRfProfileRequest, final ApiCallback<CreateNetworkWirelessRfProfile201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkWirelessRfProfile_0ValidateBeforeCall(networkId, createNetworkWirelessRfProfileRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateNetworkWirelessRfProfile201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNetworkWirelessSsidIdentityPsk_0
     * @param networkId  (required)
     * @param number  (required)
     * @param createNetworkWirelessSsidIdentityPskRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkWirelessSsidIdentityPsk_0Call(String networkId, String number, CreateNetworkWirelessSsidIdentityPskRequest createNetworkWirelessSsidIdentityPskRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNetworkWirelessSsidIdentityPskRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/wireless/ssids/{number}/identityPsks"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "number" + "}", localVarApiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkWirelessSsidIdentityPsk_0ValidateBeforeCall(String networkId, String number, CreateNetworkWirelessSsidIdentityPskRequest createNetworkWirelessSsidIdentityPskRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling createNetworkWirelessSsidIdentityPsk_0(Async)");
        }

        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling createNetworkWirelessSsidIdentityPsk_0(Async)");
        }

        // verify the required parameter 'createNetworkWirelessSsidIdentityPskRequest' is set
        if (createNetworkWirelessSsidIdentityPskRequest == null) {
            throw new ApiException("Missing the required parameter 'createNetworkWirelessSsidIdentityPskRequest' when calling createNetworkWirelessSsidIdentityPsk_0(Async)");
        }

        return createNetworkWirelessSsidIdentityPsk_0Call(networkId, number, createNetworkWirelessSsidIdentityPskRequest, _callback);

    }

    /**
     * Create an Identity PSK
     * Create an Identity PSK
     * @param networkId  (required)
     * @param number  (required)
     * @param createNetworkWirelessSsidIdentityPskRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object createNetworkWirelessSsidIdentityPsk_0(String networkId, String number, CreateNetworkWirelessSsidIdentityPskRequest createNetworkWirelessSsidIdentityPskRequest) throws ApiException {
        ApiResponse<Object> localVarResp = createNetworkWirelessSsidIdentityPsk_0WithHttpInfo(networkId, number, createNetworkWirelessSsidIdentityPskRequest);
        return localVarResp.getData();
    }

    /**
     * Create an Identity PSK
     * Create an Identity PSK
     * @param networkId  (required)
     * @param number  (required)
     * @param createNetworkWirelessSsidIdentityPskRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createNetworkWirelessSsidIdentityPsk_0WithHttpInfo(String networkId, String number, CreateNetworkWirelessSsidIdentityPskRequest createNetworkWirelessSsidIdentityPskRequest) throws ApiException {
        okhttp3.Call localVarCall = createNetworkWirelessSsidIdentityPsk_0ValidateBeforeCall(networkId, number, createNetworkWirelessSsidIdentityPskRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an Identity PSK (asynchronously)
     * Create an Identity PSK
     * @param networkId  (required)
     * @param number  (required)
     * @param createNetworkWirelessSsidIdentityPskRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkWirelessSsidIdentityPsk_0Async(String networkId, String number, CreateNetworkWirelessSsidIdentityPskRequest createNetworkWirelessSsidIdentityPskRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkWirelessSsidIdentityPsk_0ValidateBeforeCall(networkId, number, createNetworkWirelessSsidIdentityPskRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createOrganizationActionBatch_0
     * @param organizationId  (required)
     * @param createOrganizationActionBatchRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationActionBatch_0Call(String organizationId, CreateOrganizationActionBatchRequest createOrganizationActionBatchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createOrganizationActionBatchRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/actionBatches"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrganizationActionBatch_0ValidateBeforeCall(String organizationId, CreateOrganizationActionBatchRequest createOrganizationActionBatchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling createOrganizationActionBatch_0(Async)");
        }

        // verify the required parameter 'createOrganizationActionBatchRequest' is set
        if (createOrganizationActionBatchRequest == null) {
            throw new ApiException("Missing the required parameter 'createOrganizationActionBatchRequest' when calling createOrganizationActionBatch_0(Async)");
        }

        return createOrganizationActionBatch_0Call(organizationId, createOrganizationActionBatchRequest, _callback);

    }

    /**
     * Create an action batch
     * Create an action batch
     * @param organizationId  (required)
     * @param createOrganizationActionBatchRequest  (required)
     * @return CreateOrganizationActionBatch201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CreateOrganizationActionBatch201Response createOrganizationActionBatch_0(String organizationId, CreateOrganizationActionBatchRequest createOrganizationActionBatchRequest) throws ApiException {
        ApiResponse<CreateOrganizationActionBatch201Response> localVarResp = createOrganizationActionBatch_0WithHttpInfo(organizationId, createOrganizationActionBatchRequest);
        return localVarResp.getData();
    }

    /**
     * Create an action batch
     * Create an action batch
     * @param organizationId  (required)
     * @param createOrganizationActionBatchRequest  (required)
     * @return ApiResponse&lt;CreateOrganizationActionBatch201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateOrganizationActionBatch201Response> createOrganizationActionBatch_0WithHttpInfo(String organizationId, CreateOrganizationActionBatchRequest createOrganizationActionBatchRequest) throws ApiException {
        okhttp3.Call localVarCall = createOrganizationActionBatch_0ValidateBeforeCall(organizationId, createOrganizationActionBatchRequest, null);
        Type localVarReturnType = new TypeToken<CreateOrganizationActionBatch201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an action batch (asynchronously)
     * Create an action batch
     * @param organizationId  (required)
     * @param createOrganizationActionBatchRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationActionBatch_0Async(String organizationId, CreateOrganizationActionBatchRequest createOrganizationActionBatchRequest, final ApiCallback<CreateOrganizationActionBatch201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrganizationActionBatch_0ValidateBeforeCall(organizationId, createOrganizationActionBatchRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateOrganizationActionBatch201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createOrganizationAdaptivePolicyAcl_0
     * @param organizationId  (required)
     * @param createOrganizationAdaptivePolicyAclRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationAdaptivePolicyAcl_0Call(String organizationId, CreateOrganizationAdaptivePolicyAclRequest createOrganizationAdaptivePolicyAclRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createOrganizationAdaptivePolicyAclRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/adaptivePolicy/acls"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrganizationAdaptivePolicyAcl_0ValidateBeforeCall(String organizationId, CreateOrganizationAdaptivePolicyAclRequest createOrganizationAdaptivePolicyAclRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling createOrganizationAdaptivePolicyAcl_0(Async)");
        }

        // verify the required parameter 'createOrganizationAdaptivePolicyAclRequest' is set
        if (createOrganizationAdaptivePolicyAclRequest == null) {
            throw new ApiException("Missing the required parameter 'createOrganizationAdaptivePolicyAclRequest' when calling createOrganizationAdaptivePolicyAcl_0(Async)");
        }

        return createOrganizationAdaptivePolicyAcl_0Call(organizationId, createOrganizationAdaptivePolicyAclRequest, _callback);

    }

    /**
     * Creates new adaptive policy ACL
     * Creates new adaptive policy ACL
     * @param organizationId  (required)
     * @param createOrganizationAdaptivePolicyAclRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object createOrganizationAdaptivePolicyAcl_0(String organizationId, CreateOrganizationAdaptivePolicyAclRequest createOrganizationAdaptivePolicyAclRequest) throws ApiException {
        ApiResponse<Object> localVarResp = createOrganizationAdaptivePolicyAcl_0WithHttpInfo(organizationId, createOrganizationAdaptivePolicyAclRequest);
        return localVarResp.getData();
    }

    /**
     * Creates new adaptive policy ACL
     * Creates new adaptive policy ACL
     * @param organizationId  (required)
     * @param createOrganizationAdaptivePolicyAclRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createOrganizationAdaptivePolicyAcl_0WithHttpInfo(String organizationId, CreateOrganizationAdaptivePolicyAclRequest createOrganizationAdaptivePolicyAclRequest) throws ApiException {
        okhttp3.Call localVarCall = createOrganizationAdaptivePolicyAcl_0ValidateBeforeCall(organizationId, createOrganizationAdaptivePolicyAclRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates new adaptive policy ACL (asynchronously)
     * Creates new adaptive policy ACL
     * @param organizationId  (required)
     * @param createOrganizationAdaptivePolicyAclRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationAdaptivePolicyAcl_0Async(String organizationId, CreateOrganizationAdaptivePolicyAclRequest createOrganizationAdaptivePolicyAclRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrganizationAdaptivePolicyAcl_0ValidateBeforeCall(organizationId, createOrganizationAdaptivePolicyAclRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createOrganizationAdaptivePolicyGroup_0
     * @param organizationId  (required)
     * @param createOrganizationAdaptivePolicyGroupRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationAdaptivePolicyGroup_0Call(String organizationId, CreateOrganizationAdaptivePolicyGroupRequest createOrganizationAdaptivePolicyGroupRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createOrganizationAdaptivePolicyGroupRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/adaptivePolicy/groups"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrganizationAdaptivePolicyGroup_0ValidateBeforeCall(String organizationId, CreateOrganizationAdaptivePolicyGroupRequest createOrganizationAdaptivePolicyGroupRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling createOrganizationAdaptivePolicyGroup_0(Async)");
        }

        // verify the required parameter 'createOrganizationAdaptivePolicyGroupRequest' is set
        if (createOrganizationAdaptivePolicyGroupRequest == null) {
            throw new ApiException("Missing the required parameter 'createOrganizationAdaptivePolicyGroupRequest' when calling createOrganizationAdaptivePolicyGroup_0(Async)");
        }

        return createOrganizationAdaptivePolicyGroup_0Call(organizationId, createOrganizationAdaptivePolicyGroupRequest, _callback);

    }

    /**
     * Creates a new adaptive policy group
     * Creates a new adaptive policy group
     * @param organizationId  (required)
     * @param createOrganizationAdaptivePolicyGroupRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object createOrganizationAdaptivePolicyGroup_0(String organizationId, CreateOrganizationAdaptivePolicyGroupRequest createOrganizationAdaptivePolicyGroupRequest) throws ApiException {
        ApiResponse<Object> localVarResp = createOrganizationAdaptivePolicyGroup_0WithHttpInfo(organizationId, createOrganizationAdaptivePolicyGroupRequest);
        return localVarResp.getData();
    }

    /**
     * Creates a new adaptive policy group
     * Creates a new adaptive policy group
     * @param organizationId  (required)
     * @param createOrganizationAdaptivePolicyGroupRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createOrganizationAdaptivePolicyGroup_0WithHttpInfo(String organizationId, CreateOrganizationAdaptivePolicyGroupRequest createOrganizationAdaptivePolicyGroupRequest) throws ApiException {
        okhttp3.Call localVarCall = createOrganizationAdaptivePolicyGroup_0ValidateBeforeCall(organizationId, createOrganizationAdaptivePolicyGroupRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new adaptive policy group (asynchronously)
     * Creates a new adaptive policy group
     * @param organizationId  (required)
     * @param createOrganizationAdaptivePolicyGroupRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationAdaptivePolicyGroup_0Async(String organizationId, CreateOrganizationAdaptivePolicyGroupRequest createOrganizationAdaptivePolicyGroupRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrganizationAdaptivePolicyGroup_0ValidateBeforeCall(organizationId, createOrganizationAdaptivePolicyGroupRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createOrganizationAdaptivePolicyPolicy_0
     * @param organizationId  (required)
     * @param createOrganizationAdaptivePolicyPolicyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationAdaptivePolicyPolicy_0Call(String organizationId, CreateOrganizationAdaptivePolicyPolicyRequest createOrganizationAdaptivePolicyPolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createOrganizationAdaptivePolicyPolicyRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/adaptivePolicy/policies"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrganizationAdaptivePolicyPolicy_0ValidateBeforeCall(String organizationId, CreateOrganizationAdaptivePolicyPolicyRequest createOrganizationAdaptivePolicyPolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling createOrganizationAdaptivePolicyPolicy_0(Async)");
        }

        // verify the required parameter 'createOrganizationAdaptivePolicyPolicyRequest' is set
        if (createOrganizationAdaptivePolicyPolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'createOrganizationAdaptivePolicyPolicyRequest' when calling createOrganizationAdaptivePolicyPolicy_0(Async)");
        }

        return createOrganizationAdaptivePolicyPolicy_0Call(organizationId, createOrganizationAdaptivePolicyPolicyRequest, _callback);

    }

    /**
     * Add an Adaptive Policy
     * Add an Adaptive Policy
     * @param organizationId  (required)
     * @param createOrganizationAdaptivePolicyPolicyRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object createOrganizationAdaptivePolicyPolicy_0(String organizationId, CreateOrganizationAdaptivePolicyPolicyRequest createOrganizationAdaptivePolicyPolicyRequest) throws ApiException {
        ApiResponse<Object> localVarResp = createOrganizationAdaptivePolicyPolicy_0WithHttpInfo(organizationId, createOrganizationAdaptivePolicyPolicyRequest);
        return localVarResp.getData();
    }

    /**
     * Add an Adaptive Policy
     * Add an Adaptive Policy
     * @param organizationId  (required)
     * @param createOrganizationAdaptivePolicyPolicyRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createOrganizationAdaptivePolicyPolicy_0WithHttpInfo(String organizationId, CreateOrganizationAdaptivePolicyPolicyRequest createOrganizationAdaptivePolicyPolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = createOrganizationAdaptivePolicyPolicy_0ValidateBeforeCall(organizationId, createOrganizationAdaptivePolicyPolicyRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add an Adaptive Policy (asynchronously)
     * Add an Adaptive Policy
     * @param organizationId  (required)
     * @param createOrganizationAdaptivePolicyPolicyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationAdaptivePolicyPolicy_0Async(String organizationId, CreateOrganizationAdaptivePolicyPolicyRequest createOrganizationAdaptivePolicyPolicyRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrganizationAdaptivePolicyPolicy_0ValidateBeforeCall(organizationId, createOrganizationAdaptivePolicyPolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createOrganizationAdmin_0
     * @param organizationId  (required)
     * @param createOrganizationAdminRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationAdmin_0Call(String organizationId, CreateOrganizationAdminRequest createOrganizationAdminRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createOrganizationAdminRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/admins"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrganizationAdmin_0ValidateBeforeCall(String organizationId, CreateOrganizationAdminRequest createOrganizationAdminRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling createOrganizationAdmin_0(Async)");
        }

        // verify the required parameter 'createOrganizationAdminRequest' is set
        if (createOrganizationAdminRequest == null) {
            throw new ApiException("Missing the required parameter 'createOrganizationAdminRequest' when calling createOrganizationAdmin_0(Async)");
        }

        return createOrganizationAdmin_0Call(organizationId, createOrganizationAdminRequest, _callback);

    }

    /**
     * Create a new dashboard administrator
     * Create a new dashboard administrator
     * @param organizationId  (required)
     * @param createOrganizationAdminRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object createOrganizationAdmin_0(String organizationId, CreateOrganizationAdminRequest createOrganizationAdminRequest) throws ApiException {
        ApiResponse<Object> localVarResp = createOrganizationAdmin_0WithHttpInfo(organizationId, createOrganizationAdminRequest);
        return localVarResp.getData();
    }

    /**
     * Create a new dashboard administrator
     * Create a new dashboard administrator
     * @param organizationId  (required)
     * @param createOrganizationAdminRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createOrganizationAdmin_0WithHttpInfo(String organizationId, CreateOrganizationAdminRequest createOrganizationAdminRequest) throws ApiException {
        okhttp3.Call localVarCall = createOrganizationAdmin_0ValidateBeforeCall(organizationId, createOrganizationAdminRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new dashboard administrator (asynchronously)
     * Create a new dashboard administrator
     * @param organizationId  (required)
     * @param createOrganizationAdminRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationAdmin_0Async(String organizationId, CreateOrganizationAdminRequest createOrganizationAdminRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrganizationAdmin_0ValidateBeforeCall(organizationId, createOrganizationAdminRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createOrganizationAlertsProfile_0
     * @param organizationId  (required)
     * @param createOrganizationAlertsProfileRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationAlertsProfile_0Call(String organizationId, CreateOrganizationAlertsProfileRequest createOrganizationAlertsProfileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createOrganizationAlertsProfileRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/alerts/profiles"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrganizationAlertsProfile_0ValidateBeforeCall(String organizationId, CreateOrganizationAlertsProfileRequest createOrganizationAlertsProfileRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling createOrganizationAlertsProfile_0(Async)");
        }

        // verify the required parameter 'createOrganizationAlertsProfileRequest' is set
        if (createOrganizationAlertsProfileRequest == null) {
            throw new ApiException("Missing the required parameter 'createOrganizationAlertsProfileRequest' when calling createOrganizationAlertsProfile_0(Async)");
        }

        return createOrganizationAlertsProfile_0Call(organizationId, createOrganizationAlertsProfileRequest, _callback);

    }

    /**
     * Create an organization-wide alert configuration
     * Create an organization-wide alert configuration
     * @param organizationId  (required)
     * @param createOrganizationAlertsProfileRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object createOrganizationAlertsProfile_0(String organizationId, CreateOrganizationAlertsProfileRequest createOrganizationAlertsProfileRequest) throws ApiException {
        ApiResponse<Object> localVarResp = createOrganizationAlertsProfile_0WithHttpInfo(organizationId, createOrganizationAlertsProfileRequest);
        return localVarResp.getData();
    }

    /**
     * Create an organization-wide alert configuration
     * Create an organization-wide alert configuration
     * @param organizationId  (required)
     * @param createOrganizationAlertsProfileRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createOrganizationAlertsProfile_0WithHttpInfo(String organizationId, CreateOrganizationAlertsProfileRequest createOrganizationAlertsProfileRequest) throws ApiException {
        okhttp3.Call localVarCall = createOrganizationAlertsProfile_0ValidateBeforeCall(organizationId, createOrganizationAlertsProfileRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an organization-wide alert configuration (asynchronously)
     * Create an organization-wide alert configuration
     * @param organizationId  (required)
     * @param createOrganizationAlertsProfileRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationAlertsProfile_0Async(String organizationId, CreateOrganizationAlertsProfileRequest createOrganizationAlertsProfileRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrganizationAlertsProfile_0ValidateBeforeCall(organizationId, createOrganizationAlertsProfileRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createOrganizationBrandingPolicy_0
     * @param organizationId  (required)
     * @param createOrganizationBrandingPolicyRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationBrandingPolicy_0Call(String organizationId, CreateOrganizationBrandingPolicyRequest createOrganizationBrandingPolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createOrganizationBrandingPolicyRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/brandingPolicies"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrganizationBrandingPolicy_0ValidateBeforeCall(String organizationId, CreateOrganizationBrandingPolicyRequest createOrganizationBrandingPolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling createOrganizationBrandingPolicy_0(Async)");
        }

        return createOrganizationBrandingPolicy_0Call(organizationId, createOrganizationBrandingPolicyRequest, _callback);

    }

    /**
     * Add a new branding policy to an organization
     * Add a new branding policy to an organization
     * @param organizationId  (required)
     * @param createOrganizationBrandingPolicyRequest  (optional)
     * @return CreateOrganizationBrandingPolicy201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CreateOrganizationBrandingPolicy201Response createOrganizationBrandingPolicy_0(String organizationId, CreateOrganizationBrandingPolicyRequest createOrganizationBrandingPolicyRequest) throws ApiException {
        ApiResponse<CreateOrganizationBrandingPolicy201Response> localVarResp = createOrganizationBrandingPolicy_0WithHttpInfo(organizationId, createOrganizationBrandingPolicyRequest);
        return localVarResp.getData();
    }

    /**
     * Add a new branding policy to an organization
     * Add a new branding policy to an organization
     * @param organizationId  (required)
     * @param createOrganizationBrandingPolicyRequest  (optional)
     * @return ApiResponse&lt;CreateOrganizationBrandingPolicy201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateOrganizationBrandingPolicy201Response> createOrganizationBrandingPolicy_0WithHttpInfo(String organizationId, CreateOrganizationBrandingPolicyRequest createOrganizationBrandingPolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = createOrganizationBrandingPolicy_0ValidateBeforeCall(organizationId, createOrganizationBrandingPolicyRequest, null);
        Type localVarReturnType = new TypeToken<CreateOrganizationBrandingPolicy201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a new branding policy to an organization (asynchronously)
     * Add a new branding policy to an organization
     * @param organizationId  (required)
     * @param createOrganizationBrandingPolicyRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationBrandingPolicy_0Async(String organizationId, CreateOrganizationBrandingPolicyRequest createOrganizationBrandingPolicyRequest, final ApiCallback<CreateOrganizationBrandingPolicy201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrganizationBrandingPolicy_0ValidateBeforeCall(organizationId, createOrganizationBrandingPolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateOrganizationBrandingPolicy201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createOrganizationCameraCustomAnalyticsArtifact_0
     * @param organizationId  (required)
     * @param createOrganizationCameraCustomAnalyticsArtifactRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationCameraCustomAnalyticsArtifact_0Call(String organizationId, CreateOrganizationCameraCustomAnalyticsArtifactRequest createOrganizationCameraCustomAnalyticsArtifactRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createOrganizationCameraCustomAnalyticsArtifactRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/camera/customAnalytics/artifacts"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrganizationCameraCustomAnalyticsArtifact_0ValidateBeforeCall(String organizationId, CreateOrganizationCameraCustomAnalyticsArtifactRequest createOrganizationCameraCustomAnalyticsArtifactRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling createOrganizationCameraCustomAnalyticsArtifact_0(Async)");
        }

        return createOrganizationCameraCustomAnalyticsArtifact_0Call(organizationId, createOrganizationCameraCustomAnalyticsArtifactRequest, _callback);

    }

    /**
     * Create custom analytics artifact
     * Create custom analytics artifact. Returns an artifact upload URL with expiry time. Upload the artifact file with a put request to the returned upload URL before its expiry.
     * @param organizationId  (required)
     * @param createOrganizationCameraCustomAnalyticsArtifactRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object createOrganizationCameraCustomAnalyticsArtifact_0(String organizationId, CreateOrganizationCameraCustomAnalyticsArtifactRequest createOrganizationCameraCustomAnalyticsArtifactRequest) throws ApiException {
        ApiResponse<Object> localVarResp = createOrganizationCameraCustomAnalyticsArtifact_0WithHttpInfo(organizationId, createOrganizationCameraCustomAnalyticsArtifactRequest);
        return localVarResp.getData();
    }

    /**
     * Create custom analytics artifact
     * Create custom analytics artifact. Returns an artifact upload URL with expiry time. Upload the artifact file with a put request to the returned upload URL before its expiry.
     * @param organizationId  (required)
     * @param createOrganizationCameraCustomAnalyticsArtifactRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createOrganizationCameraCustomAnalyticsArtifact_0WithHttpInfo(String organizationId, CreateOrganizationCameraCustomAnalyticsArtifactRequest createOrganizationCameraCustomAnalyticsArtifactRequest) throws ApiException {
        okhttp3.Call localVarCall = createOrganizationCameraCustomAnalyticsArtifact_0ValidateBeforeCall(organizationId, createOrganizationCameraCustomAnalyticsArtifactRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create custom analytics artifact (asynchronously)
     * Create custom analytics artifact. Returns an artifact upload URL with expiry time. Upload the artifact file with a put request to the returned upload URL before its expiry.
     * @param organizationId  (required)
     * @param createOrganizationCameraCustomAnalyticsArtifactRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationCameraCustomAnalyticsArtifact_0Async(String organizationId, CreateOrganizationCameraCustomAnalyticsArtifactRequest createOrganizationCameraCustomAnalyticsArtifactRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrganizationCameraCustomAnalyticsArtifact_0ValidateBeforeCall(organizationId, createOrganizationCameraCustomAnalyticsArtifactRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createOrganizationConfigTemplate_0
     * @param organizationId  (required)
     * @param createOrganizationConfigTemplateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationConfigTemplate_0Call(String organizationId, CreateOrganizationConfigTemplateRequest createOrganizationConfigTemplateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createOrganizationConfigTemplateRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/configTemplates"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrganizationConfigTemplate_0ValidateBeforeCall(String organizationId, CreateOrganizationConfigTemplateRequest createOrganizationConfigTemplateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling createOrganizationConfigTemplate_0(Async)");
        }

        // verify the required parameter 'createOrganizationConfigTemplateRequest' is set
        if (createOrganizationConfigTemplateRequest == null) {
            throw new ApiException("Missing the required parameter 'createOrganizationConfigTemplateRequest' when calling createOrganizationConfigTemplate_0(Async)");
        }

        return createOrganizationConfigTemplate_0Call(organizationId, createOrganizationConfigTemplateRequest, _callback);

    }

    /**
     * Create a new configuration template
     * Create a new configuration template
     * @param organizationId  (required)
     * @param createOrganizationConfigTemplateRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object createOrganizationConfigTemplate_0(String organizationId, CreateOrganizationConfigTemplateRequest createOrganizationConfigTemplateRequest) throws ApiException {
        ApiResponse<Object> localVarResp = createOrganizationConfigTemplate_0WithHttpInfo(organizationId, createOrganizationConfigTemplateRequest);
        return localVarResp.getData();
    }

    /**
     * Create a new configuration template
     * Create a new configuration template
     * @param organizationId  (required)
     * @param createOrganizationConfigTemplateRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createOrganizationConfigTemplate_0WithHttpInfo(String organizationId, CreateOrganizationConfigTemplateRequest createOrganizationConfigTemplateRequest) throws ApiException {
        okhttp3.Call localVarCall = createOrganizationConfigTemplate_0ValidateBeforeCall(organizationId, createOrganizationConfigTemplateRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new configuration template (asynchronously)
     * Create a new configuration template
     * @param organizationId  (required)
     * @param createOrganizationConfigTemplateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationConfigTemplate_0Async(String organizationId, CreateOrganizationConfigTemplateRequest createOrganizationConfigTemplateRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrganizationConfigTemplate_0ValidateBeforeCall(organizationId, createOrganizationConfigTemplateRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createOrganizationEarlyAccessFeaturesOptIn_0
     * @param organizationId  (required)
     * @param createOrganizationEarlyAccessFeaturesOptInRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationEarlyAccessFeaturesOptIn_0Call(String organizationId, CreateOrganizationEarlyAccessFeaturesOptInRequest createOrganizationEarlyAccessFeaturesOptInRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createOrganizationEarlyAccessFeaturesOptInRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/earlyAccess/features/optIns"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrganizationEarlyAccessFeaturesOptIn_0ValidateBeforeCall(String organizationId, CreateOrganizationEarlyAccessFeaturesOptInRequest createOrganizationEarlyAccessFeaturesOptInRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling createOrganizationEarlyAccessFeaturesOptIn_0(Async)");
        }

        // verify the required parameter 'createOrganizationEarlyAccessFeaturesOptInRequest' is set
        if (createOrganizationEarlyAccessFeaturesOptInRequest == null) {
            throw new ApiException("Missing the required parameter 'createOrganizationEarlyAccessFeaturesOptInRequest' when calling createOrganizationEarlyAccessFeaturesOptIn_0(Async)");
        }

        return createOrganizationEarlyAccessFeaturesOptIn_0Call(organizationId, createOrganizationEarlyAccessFeaturesOptInRequest, _callback);

    }

    /**
     * Create a new early access feature opt-in for an organization
     * Create a new early access feature opt-in for an organization
     * @param organizationId  (required)
     * @param createOrganizationEarlyAccessFeaturesOptInRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object createOrganizationEarlyAccessFeaturesOptIn_0(String organizationId, CreateOrganizationEarlyAccessFeaturesOptInRequest createOrganizationEarlyAccessFeaturesOptInRequest) throws ApiException {
        ApiResponse<Object> localVarResp = createOrganizationEarlyAccessFeaturesOptIn_0WithHttpInfo(organizationId, createOrganizationEarlyAccessFeaturesOptInRequest);
        return localVarResp.getData();
    }

    /**
     * Create a new early access feature opt-in for an organization
     * Create a new early access feature opt-in for an organization
     * @param organizationId  (required)
     * @param createOrganizationEarlyAccessFeaturesOptInRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createOrganizationEarlyAccessFeaturesOptIn_0WithHttpInfo(String organizationId, CreateOrganizationEarlyAccessFeaturesOptInRequest createOrganizationEarlyAccessFeaturesOptInRequest) throws ApiException {
        okhttp3.Call localVarCall = createOrganizationEarlyAccessFeaturesOptIn_0ValidateBeforeCall(organizationId, createOrganizationEarlyAccessFeaturesOptInRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new early access feature opt-in for an organization (asynchronously)
     * Create a new early access feature opt-in for an organization
     * @param organizationId  (required)
     * @param createOrganizationEarlyAccessFeaturesOptInRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationEarlyAccessFeaturesOptIn_0Async(String organizationId, CreateOrganizationEarlyAccessFeaturesOptInRequest createOrganizationEarlyAccessFeaturesOptInRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrganizationEarlyAccessFeaturesOptIn_0ValidateBeforeCall(organizationId, createOrganizationEarlyAccessFeaturesOptInRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createOrganizationInsightMonitoredMediaServer_0
     * @param organizationId  (required)
     * @param createOrganizationInsightMonitoredMediaServerRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationInsightMonitoredMediaServer_0Call(String organizationId, CreateOrganizationInsightMonitoredMediaServerRequest createOrganizationInsightMonitoredMediaServerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createOrganizationInsightMonitoredMediaServerRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/insight/monitoredMediaServers"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrganizationInsightMonitoredMediaServer_0ValidateBeforeCall(String organizationId, CreateOrganizationInsightMonitoredMediaServerRequest createOrganizationInsightMonitoredMediaServerRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling createOrganizationInsightMonitoredMediaServer_0(Async)");
        }

        // verify the required parameter 'createOrganizationInsightMonitoredMediaServerRequest' is set
        if (createOrganizationInsightMonitoredMediaServerRequest == null) {
            throw new ApiException("Missing the required parameter 'createOrganizationInsightMonitoredMediaServerRequest' when calling createOrganizationInsightMonitoredMediaServer_0(Async)");
        }

        return createOrganizationInsightMonitoredMediaServer_0Call(organizationId, createOrganizationInsightMonitoredMediaServerRequest, _callback);

    }

    /**
     * Add a media server to be monitored for this organization
     * Add a media server to be monitored for this organization. Only valid for organizations with Meraki Insight.
     * @param organizationId  (required)
     * @param createOrganizationInsightMonitoredMediaServerRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object createOrganizationInsightMonitoredMediaServer_0(String organizationId, CreateOrganizationInsightMonitoredMediaServerRequest createOrganizationInsightMonitoredMediaServerRequest) throws ApiException {
        ApiResponse<Object> localVarResp = createOrganizationInsightMonitoredMediaServer_0WithHttpInfo(organizationId, createOrganizationInsightMonitoredMediaServerRequest);
        return localVarResp.getData();
    }

    /**
     * Add a media server to be monitored for this organization
     * Add a media server to be monitored for this organization. Only valid for organizations with Meraki Insight.
     * @param organizationId  (required)
     * @param createOrganizationInsightMonitoredMediaServerRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createOrganizationInsightMonitoredMediaServer_0WithHttpInfo(String organizationId, CreateOrganizationInsightMonitoredMediaServerRequest createOrganizationInsightMonitoredMediaServerRequest) throws ApiException {
        okhttp3.Call localVarCall = createOrganizationInsightMonitoredMediaServer_0ValidateBeforeCall(organizationId, createOrganizationInsightMonitoredMediaServerRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a media server to be monitored for this organization (asynchronously)
     * Add a media server to be monitored for this organization. Only valid for organizations with Meraki Insight.
     * @param organizationId  (required)
     * @param createOrganizationInsightMonitoredMediaServerRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationInsightMonitoredMediaServer_0Async(String organizationId, CreateOrganizationInsightMonitoredMediaServerRequest createOrganizationInsightMonitoredMediaServerRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrganizationInsightMonitoredMediaServer_0ValidateBeforeCall(organizationId, createOrganizationInsightMonitoredMediaServerRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createOrganizationInventoryOnboardingCloudMonitoringExportEvent_0
     * @param organizationId  (required)
     * @param createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationInventoryOnboardingCloudMonitoringExportEvent_0Call(String organizationId, CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/exportEvents"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrganizationInventoryOnboardingCloudMonitoringExportEvent_0ValidateBeforeCall(String organizationId, CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling createOrganizationInventoryOnboardingCloudMonitoringExportEvent_0(Async)");
        }

        // verify the required parameter 'createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest' is set
        if (createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest == null) {
            throw new ApiException("Missing the required parameter 'createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest' when calling createOrganizationInventoryOnboardingCloudMonitoringExportEvent_0(Async)");
        }

        return createOrganizationInventoryOnboardingCloudMonitoringExportEvent_0Call(organizationId, createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest, _callback);

    }

    /**
     * Imports event logs related to the onboarding app into elastisearch
     * Imports event logs related to the onboarding app into elastisearch
     * @param organizationId  (required)
     * @param createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object createOrganizationInventoryOnboardingCloudMonitoringExportEvent_0(String organizationId, CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest) throws ApiException {
        ApiResponse<Object> localVarResp = createOrganizationInventoryOnboardingCloudMonitoringExportEvent_0WithHttpInfo(organizationId, createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest);
        return localVarResp.getData();
    }

    /**
     * Imports event logs related to the onboarding app into elastisearch
     * Imports event logs related to the onboarding app into elastisearch
     * @param organizationId  (required)
     * @param createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createOrganizationInventoryOnboardingCloudMonitoringExportEvent_0WithHttpInfo(String organizationId, CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest) throws ApiException {
        okhttp3.Call localVarCall = createOrganizationInventoryOnboardingCloudMonitoringExportEvent_0ValidateBeforeCall(organizationId, createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Imports event logs related to the onboarding app into elastisearch (asynchronously)
     * Imports event logs related to the onboarding app into elastisearch
     * @param organizationId  (required)
     * @param createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationInventoryOnboardingCloudMonitoringExportEvent_0Async(String organizationId, CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrganizationInventoryOnboardingCloudMonitoringExportEvent_0ValidateBeforeCall(organizationId, createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createOrganizationInventoryOnboardingCloudMonitoringImport_0
     * @param organizationId  (required)
     * @param createOrganizationInventoryOnboardingCloudMonitoringImportRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationInventoryOnboardingCloudMonitoringImport_0Call(String organizationId, CreateOrganizationInventoryOnboardingCloudMonitoringImportRequest createOrganizationInventoryOnboardingCloudMonitoringImportRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createOrganizationInventoryOnboardingCloudMonitoringImportRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/imports"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrganizationInventoryOnboardingCloudMonitoringImport_0ValidateBeforeCall(String organizationId, CreateOrganizationInventoryOnboardingCloudMonitoringImportRequest createOrganizationInventoryOnboardingCloudMonitoringImportRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling createOrganizationInventoryOnboardingCloudMonitoringImport_0(Async)");
        }

        // verify the required parameter 'createOrganizationInventoryOnboardingCloudMonitoringImportRequest' is set
        if (createOrganizationInventoryOnboardingCloudMonitoringImportRequest == null) {
            throw new ApiException("Missing the required parameter 'createOrganizationInventoryOnboardingCloudMonitoringImportRequest' when calling createOrganizationInventoryOnboardingCloudMonitoringImport_0(Async)");
        }

        return createOrganizationInventoryOnboardingCloudMonitoringImport_0Call(organizationId, createOrganizationInventoryOnboardingCloudMonitoringImportRequest, _callback);

    }

    /**
     * Commits the import operation to complete the onboarding of a device into Dashboard for monitoring.
     * Commits the import operation to complete the onboarding of a device into Dashboard for monitoring.
     * @param organizationId  (required)
     * @param createOrganizationInventoryOnboardingCloudMonitoringImportRequest  (required)
     * @return List&lt;CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner> createOrganizationInventoryOnboardingCloudMonitoringImport_0(String organizationId, CreateOrganizationInventoryOnboardingCloudMonitoringImportRequest createOrganizationInventoryOnboardingCloudMonitoringImportRequest) throws ApiException {
        ApiResponse<List<CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner>> localVarResp = createOrganizationInventoryOnboardingCloudMonitoringImport_0WithHttpInfo(organizationId, createOrganizationInventoryOnboardingCloudMonitoringImportRequest);
        return localVarResp.getData();
    }

    /**
     * Commits the import operation to complete the onboarding of a device into Dashboard for monitoring.
     * Commits the import operation to complete the onboarding of a device into Dashboard for monitoring.
     * @param organizationId  (required)
     * @param createOrganizationInventoryOnboardingCloudMonitoringImportRequest  (required)
     * @return ApiResponse&lt;List&lt;CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner>> createOrganizationInventoryOnboardingCloudMonitoringImport_0WithHttpInfo(String organizationId, CreateOrganizationInventoryOnboardingCloudMonitoringImportRequest createOrganizationInventoryOnboardingCloudMonitoringImportRequest) throws ApiException {
        okhttp3.Call localVarCall = createOrganizationInventoryOnboardingCloudMonitoringImport_0ValidateBeforeCall(organizationId, createOrganizationInventoryOnboardingCloudMonitoringImportRequest, null);
        Type localVarReturnType = new TypeToken<List<CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Commits the import operation to complete the onboarding of a device into Dashboard for monitoring. (asynchronously)
     * Commits the import operation to complete the onboarding of a device into Dashboard for monitoring.
     * @param organizationId  (required)
     * @param createOrganizationInventoryOnboardingCloudMonitoringImportRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationInventoryOnboardingCloudMonitoringImport_0Async(String organizationId, CreateOrganizationInventoryOnboardingCloudMonitoringImportRequest createOrganizationInventoryOnboardingCloudMonitoringImportRequest, final ApiCallback<List<CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrganizationInventoryOnboardingCloudMonitoringImport_0ValidateBeforeCall(organizationId, createOrganizationInventoryOnboardingCloudMonitoringImportRequest, _callback);
        Type localVarReturnType = new TypeToken<List<CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createOrganizationInventoryOnboardingCloudMonitoringPrepare_0
     * @param organizationId  (required)
     * @param createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationInventoryOnboardingCloudMonitoringPrepare_0Call(String organizationId, CreateOrganizationInventoryOnboardingCloudMonitoringPrepareRequest createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/prepare"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrganizationInventoryOnboardingCloudMonitoringPrepare_0ValidateBeforeCall(String organizationId, CreateOrganizationInventoryOnboardingCloudMonitoringPrepareRequest createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling createOrganizationInventoryOnboardingCloudMonitoringPrepare_0(Async)");
        }

        // verify the required parameter 'createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest' is set
        if (createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest == null) {
            throw new ApiException("Missing the required parameter 'createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest' when calling createOrganizationInventoryOnboardingCloudMonitoringPrepare_0(Async)");
        }

        return createOrganizationInventoryOnboardingCloudMonitoringPrepare_0Call(organizationId, createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest, _callback);

    }

    /**
     * Initiates or updates an import session
     * Initiates or updates an import session. An import ID will be generated and used when you are ready to commit the import.
     * @param organizationId  (required)
     * @param createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest  (required)
     * @return List&lt;CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner> createOrganizationInventoryOnboardingCloudMonitoringPrepare_0(String organizationId, CreateOrganizationInventoryOnboardingCloudMonitoringPrepareRequest createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest) throws ApiException {
        ApiResponse<List<CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner>> localVarResp = createOrganizationInventoryOnboardingCloudMonitoringPrepare_0WithHttpInfo(organizationId, createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest);
        return localVarResp.getData();
    }

    /**
     * Initiates or updates an import session
     * Initiates or updates an import session. An import ID will be generated and used when you are ready to commit the import.
     * @param organizationId  (required)
     * @param createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest  (required)
     * @return ApiResponse&lt;List&lt;CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner>> createOrganizationInventoryOnboardingCloudMonitoringPrepare_0WithHttpInfo(String organizationId, CreateOrganizationInventoryOnboardingCloudMonitoringPrepareRequest createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest) throws ApiException {
        okhttp3.Call localVarCall = createOrganizationInventoryOnboardingCloudMonitoringPrepare_0ValidateBeforeCall(organizationId, createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest, null);
        Type localVarReturnType = new TypeToken<List<CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Initiates or updates an import session (asynchronously)
     * Initiates or updates an import session. An import ID will be generated and used when you are ready to commit the import.
     * @param organizationId  (required)
     * @param createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationInventoryOnboardingCloudMonitoringPrepare_0Async(String organizationId, CreateOrganizationInventoryOnboardingCloudMonitoringPrepareRequest createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest, final ApiCallback<List<CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrganizationInventoryOnboardingCloudMonitoringPrepare_0ValidateBeforeCall(organizationId, createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest, _callback);
        Type localVarReturnType = new TypeToken<List<CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createOrganizationNetwork_0
     * @param organizationId  (required)
     * @param createOrganizationNetworkRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationNetwork_0Call(String organizationId, CreateOrganizationNetworkRequest createOrganizationNetworkRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createOrganizationNetworkRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/networks"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrganizationNetwork_0ValidateBeforeCall(String organizationId, CreateOrganizationNetworkRequest createOrganizationNetworkRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling createOrganizationNetwork_0(Async)");
        }

        // verify the required parameter 'createOrganizationNetworkRequest' is set
        if (createOrganizationNetworkRequest == null) {
            throw new ApiException("Missing the required parameter 'createOrganizationNetworkRequest' when calling createOrganizationNetwork_0(Async)");
        }

        return createOrganizationNetwork_0Call(organizationId, createOrganizationNetworkRequest, _callback);

    }

    /**
     * Create a network
     * Create a network
     * @param organizationId  (required)
     * @param createOrganizationNetworkRequest  (required)
     * @return GetNetwork200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetwork200Response createOrganizationNetwork_0(String organizationId, CreateOrganizationNetworkRequest createOrganizationNetworkRequest) throws ApiException {
        ApiResponse<GetNetwork200Response> localVarResp = createOrganizationNetwork_0WithHttpInfo(organizationId, createOrganizationNetworkRequest);
        return localVarResp.getData();
    }

    /**
     * Create a network
     * Create a network
     * @param organizationId  (required)
     * @param createOrganizationNetworkRequest  (required)
     * @return ApiResponse&lt;GetNetwork200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetwork200Response> createOrganizationNetwork_0WithHttpInfo(String organizationId, CreateOrganizationNetworkRequest createOrganizationNetworkRequest) throws ApiException {
        okhttp3.Call localVarCall = createOrganizationNetwork_0ValidateBeforeCall(organizationId, createOrganizationNetworkRequest, null);
        Type localVarReturnType = new TypeToken<GetNetwork200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a network (asynchronously)
     * Create a network
     * @param organizationId  (required)
     * @param createOrganizationNetworkRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationNetwork_0Async(String organizationId, CreateOrganizationNetworkRequest createOrganizationNetworkRequest, final ApiCallback<GetNetwork200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrganizationNetwork_0ValidateBeforeCall(organizationId, createOrganizationNetworkRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetwork200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createOrganizationPolicyObject_0
     * @param organizationId  (required)
     * @param createOrganizationPolicyObjectRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationPolicyObject_0Call(String organizationId, CreateOrganizationPolicyObjectRequest createOrganizationPolicyObjectRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createOrganizationPolicyObjectRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/policyObjects"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrganizationPolicyObject_0ValidateBeforeCall(String organizationId, CreateOrganizationPolicyObjectRequest createOrganizationPolicyObjectRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling createOrganizationPolicyObject_0(Async)");
        }

        // verify the required parameter 'createOrganizationPolicyObjectRequest' is set
        if (createOrganizationPolicyObjectRequest == null) {
            throw new ApiException("Missing the required parameter 'createOrganizationPolicyObjectRequest' when calling createOrganizationPolicyObject_0(Async)");
        }

        return createOrganizationPolicyObject_0Call(organizationId, createOrganizationPolicyObjectRequest, _callback);

    }

    /**
     * Creates a new Policy Object.
     * Creates a new Policy Object.
     * @param organizationId  (required)
     * @param createOrganizationPolicyObjectRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object createOrganizationPolicyObject_0(String organizationId, CreateOrganizationPolicyObjectRequest createOrganizationPolicyObjectRequest) throws ApiException {
        ApiResponse<Object> localVarResp = createOrganizationPolicyObject_0WithHttpInfo(organizationId, createOrganizationPolicyObjectRequest);
        return localVarResp.getData();
    }

    /**
     * Creates a new Policy Object.
     * Creates a new Policy Object.
     * @param organizationId  (required)
     * @param createOrganizationPolicyObjectRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createOrganizationPolicyObject_0WithHttpInfo(String organizationId, CreateOrganizationPolicyObjectRequest createOrganizationPolicyObjectRequest) throws ApiException {
        okhttp3.Call localVarCall = createOrganizationPolicyObject_0ValidateBeforeCall(organizationId, createOrganizationPolicyObjectRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new Policy Object. (asynchronously)
     * Creates a new Policy Object.
     * @param organizationId  (required)
     * @param createOrganizationPolicyObjectRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationPolicyObject_0Async(String organizationId, CreateOrganizationPolicyObjectRequest createOrganizationPolicyObjectRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrganizationPolicyObject_0ValidateBeforeCall(organizationId, createOrganizationPolicyObjectRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createOrganizationPolicyObjectsGroup_0
     * @param organizationId  (required)
     * @param createOrganizationPolicyObjectsGroupRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationPolicyObjectsGroup_0Call(String organizationId, CreateOrganizationPolicyObjectsGroupRequest createOrganizationPolicyObjectsGroupRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createOrganizationPolicyObjectsGroupRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/policyObjects/groups"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrganizationPolicyObjectsGroup_0ValidateBeforeCall(String organizationId, CreateOrganizationPolicyObjectsGroupRequest createOrganizationPolicyObjectsGroupRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling createOrganizationPolicyObjectsGroup_0(Async)");
        }

        // verify the required parameter 'createOrganizationPolicyObjectsGroupRequest' is set
        if (createOrganizationPolicyObjectsGroupRequest == null) {
            throw new ApiException("Missing the required parameter 'createOrganizationPolicyObjectsGroupRequest' when calling createOrganizationPolicyObjectsGroup_0(Async)");
        }

        return createOrganizationPolicyObjectsGroup_0Call(organizationId, createOrganizationPolicyObjectsGroupRequest, _callback);

    }

    /**
     * Creates a new Policy Object Group.
     * Creates a new Policy Object Group.
     * @param organizationId  (required)
     * @param createOrganizationPolicyObjectsGroupRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object createOrganizationPolicyObjectsGroup_0(String organizationId, CreateOrganizationPolicyObjectsGroupRequest createOrganizationPolicyObjectsGroupRequest) throws ApiException {
        ApiResponse<Object> localVarResp = createOrganizationPolicyObjectsGroup_0WithHttpInfo(organizationId, createOrganizationPolicyObjectsGroupRequest);
        return localVarResp.getData();
    }

    /**
     * Creates a new Policy Object Group.
     * Creates a new Policy Object Group.
     * @param organizationId  (required)
     * @param createOrganizationPolicyObjectsGroupRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createOrganizationPolicyObjectsGroup_0WithHttpInfo(String organizationId, CreateOrganizationPolicyObjectsGroupRequest createOrganizationPolicyObjectsGroupRequest) throws ApiException {
        okhttp3.Call localVarCall = createOrganizationPolicyObjectsGroup_0ValidateBeforeCall(organizationId, createOrganizationPolicyObjectsGroupRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new Policy Object Group. (asynchronously)
     * Creates a new Policy Object Group.
     * @param organizationId  (required)
     * @param createOrganizationPolicyObjectsGroupRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationPolicyObjectsGroup_0Async(String organizationId, CreateOrganizationPolicyObjectsGroupRequest createOrganizationPolicyObjectsGroupRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrganizationPolicyObjectsGroup_0ValidateBeforeCall(organizationId, createOrganizationPolicyObjectsGroupRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createOrganizationSamlIdp_0
     * @param organizationId  (required)
     * @param createOrganizationSamlIdpRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationSamlIdp_0Call(String organizationId, CreateOrganizationSamlIdpRequest createOrganizationSamlIdpRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createOrganizationSamlIdpRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/saml/idps"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrganizationSamlIdp_0ValidateBeforeCall(String organizationId, CreateOrganizationSamlIdpRequest createOrganizationSamlIdpRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling createOrganizationSamlIdp_0(Async)");
        }

        // verify the required parameter 'createOrganizationSamlIdpRequest' is set
        if (createOrganizationSamlIdpRequest == null) {
            throw new ApiException("Missing the required parameter 'createOrganizationSamlIdpRequest' when calling createOrganizationSamlIdp_0(Async)");
        }

        return createOrganizationSamlIdp_0Call(organizationId, createOrganizationSamlIdpRequest, _callback);

    }

    /**
     * Create a SAML IdP for your organization.
     * Create a SAML IdP for your organization.
     * @param organizationId  (required)
     * @param createOrganizationSamlIdpRequest  (required)
     * @return List&lt;GetOrganizationSamlIdps200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetOrganizationSamlIdps200ResponseInner> createOrganizationSamlIdp_0(String organizationId, CreateOrganizationSamlIdpRequest createOrganizationSamlIdpRequest) throws ApiException {
        ApiResponse<List<GetOrganizationSamlIdps200ResponseInner>> localVarResp = createOrganizationSamlIdp_0WithHttpInfo(organizationId, createOrganizationSamlIdpRequest);
        return localVarResp.getData();
    }

    /**
     * Create a SAML IdP for your organization.
     * Create a SAML IdP for your organization.
     * @param organizationId  (required)
     * @param createOrganizationSamlIdpRequest  (required)
     * @return ApiResponse&lt;List&lt;GetOrganizationSamlIdps200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetOrganizationSamlIdps200ResponseInner>> createOrganizationSamlIdp_0WithHttpInfo(String organizationId, CreateOrganizationSamlIdpRequest createOrganizationSamlIdpRequest) throws ApiException {
        okhttp3.Call localVarCall = createOrganizationSamlIdp_0ValidateBeforeCall(organizationId, createOrganizationSamlIdpRequest, null);
        Type localVarReturnType = new TypeToken<List<GetOrganizationSamlIdps200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a SAML IdP for your organization. (asynchronously)
     * Create a SAML IdP for your organization.
     * @param organizationId  (required)
     * @param createOrganizationSamlIdpRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationSamlIdp_0Async(String organizationId, CreateOrganizationSamlIdpRequest createOrganizationSamlIdpRequest, final ApiCallback<List<GetOrganizationSamlIdps200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrganizationSamlIdp_0ValidateBeforeCall(organizationId, createOrganizationSamlIdpRequest, _callback);
        Type localVarReturnType = new TypeToken<List<GetOrganizationSamlIdps200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createOrganizationSamlRole_0
     * @param organizationId  (required)
     * @param createOrganizationSamlRoleRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationSamlRole_0Call(String organizationId, CreateOrganizationSamlRoleRequest createOrganizationSamlRoleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createOrganizationSamlRoleRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/samlRoles"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrganizationSamlRole_0ValidateBeforeCall(String organizationId, CreateOrganizationSamlRoleRequest createOrganizationSamlRoleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling createOrganizationSamlRole_0(Async)");
        }

        // verify the required parameter 'createOrganizationSamlRoleRequest' is set
        if (createOrganizationSamlRoleRequest == null) {
            throw new ApiException("Missing the required parameter 'createOrganizationSamlRoleRequest' when calling createOrganizationSamlRole_0(Async)");
        }

        return createOrganizationSamlRole_0Call(organizationId, createOrganizationSamlRoleRequest, _callback);

    }

    /**
     * Create a SAML role
     * Create a SAML role
     * @param organizationId  (required)
     * @param createOrganizationSamlRoleRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object createOrganizationSamlRole_0(String organizationId, CreateOrganizationSamlRoleRequest createOrganizationSamlRoleRequest) throws ApiException {
        ApiResponse<Object> localVarResp = createOrganizationSamlRole_0WithHttpInfo(organizationId, createOrganizationSamlRoleRequest);
        return localVarResp.getData();
    }

    /**
     * Create a SAML role
     * Create a SAML role
     * @param organizationId  (required)
     * @param createOrganizationSamlRoleRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createOrganizationSamlRole_0WithHttpInfo(String organizationId, CreateOrganizationSamlRoleRequest createOrganizationSamlRoleRequest) throws ApiException {
        okhttp3.Call localVarCall = createOrganizationSamlRole_0ValidateBeforeCall(organizationId, createOrganizationSamlRoleRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a SAML role (asynchronously)
     * Create a SAML role
     * @param organizationId  (required)
     * @param createOrganizationSamlRoleRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationSamlRole_0Async(String organizationId, CreateOrganizationSamlRoleRequest createOrganizationSamlRoleRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrganizationSamlRole_0ValidateBeforeCall(organizationId, createOrganizationSamlRoleRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createOrganization_0
     * @param createOrganizationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganization_0Call(CreateOrganizationRequest createOrganizationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createOrganizationRequest;

        // create path and map variables
        String localVarPath = "/organizations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrganization_0ValidateBeforeCall(CreateOrganizationRequest createOrganizationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createOrganizationRequest' is set
        if (createOrganizationRequest == null) {
            throw new ApiException("Missing the required parameter 'createOrganizationRequest' when calling createOrganization_0(Async)");
        }

        return createOrganization_0Call(createOrganizationRequest, _callback);

    }

    /**
     * Create a new organization
     * Create a new organization
     * @param createOrganizationRequest  (required)
     * @return GetOrganizations200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetOrganizations200ResponseInner createOrganization_0(CreateOrganizationRequest createOrganizationRequest) throws ApiException {
        ApiResponse<GetOrganizations200ResponseInner> localVarResp = createOrganization_0WithHttpInfo(createOrganizationRequest);
        return localVarResp.getData();
    }

    /**
     * Create a new organization
     * Create a new organization
     * @param createOrganizationRequest  (required)
     * @return ApiResponse&lt;GetOrganizations200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOrganizations200ResponseInner> createOrganization_0WithHttpInfo(CreateOrganizationRequest createOrganizationRequest) throws ApiException {
        okhttp3.Call localVarCall = createOrganization_0ValidateBeforeCall(createOrganizationRequest, null);
        Type localVarReturnType = new TypeToken<GetOrganizations200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new organization (asynchronously)
     * Create a new organization
     * @param createOrganizationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganization_0Async(CreateOrganizationRequest createOrganizationRequest, final ApiCallback<GetOrganizations200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrganization_0ValidateBeforeCall(createOrganizationRequest, _callback);
        Type localVarReturnType = new TypeToken<GetOrganizations200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deferNetworkFirmwareUpgradesStagedEvents_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deferNetworkFirmwareUpgradesStagedEvents_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/firmwareUpgrades/staged/events/defer"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deferNetworkFirmwareUpgradesStagedEvents_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deferNetworkFirmwareUpgradesStagedEvents_0(Async)");
        }

        return deferNetworkFirmwareUpgradesStagedEvents_0Call(networkId, _callback);

    }

    /**
     * Postpone by 1 week all pending staged upgrade stages for a network
     * Postpone by 1 week all pending staged upgrade stages for a network
     * @param networkId  (required)
     * @return GetNetworkFirmwareUpgradesStagedEvents200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkFirmwareUpgradesStagedEvents200Response deferNetworkFirmwareUpgradesStagedEvents_0(String networkId) throws ApiException {
        ApiResponse<GetNetworkFirmwareUpgradesStagedEvents200Response> localVarResp = deferNetworkFirmwareUpgradesStagedEvents_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Postpone by 1 week all pending staged upgrade stages for a network
     * Postpone by 1 week all pending staged upgrade stages for a network
     * @param networkId  (required)
     * @return ApiResponse&lt;GetNetworkFirmwareUpgradesStagedEvents200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkFirmwareUpgradesStagedEvents200Response> deferNetworkFirmwareUpgradesStagedEvents_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = deferNetworkFirmwareUpgradesStagedEvents_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<GetNetworkFirmwareUpgradesStagedEvents200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Postpone by 1 week all pending staged upgrade stages for a network (asynchronously)
     * Postpone by 1 week all pending staged upgrade stages for a network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deferNetworkFirmwareUpgradesStagedEvents_0Async(String networkId, final ApiCallback<GetNetworkFirmwareUpgradesStagedEvents200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = deferNetworkFirmwareUpgradesStagedEvents_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkFirmwareUpgradesStagedEvents200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDeviceSwitchRoutingInterface_0
     * @param serial  (required)
     * @param interfaceId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDeviceSwitchRoutingInterface_0Call(String serial, String interfaceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/devices/{serial}/switch/routing/interfaces/{interfaceId}"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()))
            .replace("{" + "interfaceId" + "}", localVarApiClient.escapeString(interfaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDeviceSwitchRoutingInterface_0ValidateBeforeCall(String serial, String interfaceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling deleteDeviceSwitchRoutingInterface_0(Async)");
        }

        // verify the required parameter 'interfaceId' is set
        if (interfaceId == null) {
            throw new ApiException("Missing the required parameter 'interfaceId' when calling deleteDeviceSwitchRoutingInterface_0(Async)");
        }

        return deleteDeviceSwitchRoutingInterface_0Call(serial, interfaceId, _callback);

    }

    /**
     * Delete a layer 3 interface from the switch
     * Delete a layer 3 interface from the switch
     * @param serial  (required)
     * @param interfaceId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteDeviceSwitchRoutingInterface_0(String serial, String interfaceId) throws ApiException {
        deleteDeviceSwitchRoutingInterface_0WithHttpInfo(serial, interfaceId);
    }

    /**
     * Delete a layer 3 interface from the switch
     * Delete a layer 3 interface from the switch
     * @param serial  (required)
     * @param interfaceId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteDeviceSwitchRoutingInterface_0WithHttpInfo(String serial, String interfaceId) throws ApiException {
        okhttp3.Call localVarCall = deleteDeviceSwitchRoutingInterface_0ValidateBeforeCall(serial, interfaceId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a layer 3 interface from the switch (asynchronously)
     * Delete a layer 3 interface from the switch
     * @param serial  (required)
     * @param interfaceId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDeviceSwitchRoutingInterface_0Async(String serial, String interfaceId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDeviceSwitchRoutingInterface_0ValidateBeforeCall(serial, interfaceId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDeviceSwitchRoutingStaticRoute_0
     * @param serial  (required)
     * @param staticRouteId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDeviceSwitchRoutingStaticRoute_0Call(String serial, String staticRouteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/devices/{serial}/switch/routing/staticRoutes/{staticRouteId}"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()))
            .replace("{" + "staticRouteId" + "}", localVarApiClient.escapeString(staticRouteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDeviceSwitchRoutingStaticRoute_0ValidateBeforeCall(String serial, String staticRouteId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling deleteDeviceSwitchRoutingStaticRoute_0(Async)");
        }

        // verify the required parameter 'staticRouteId' is set
        if (staticRouteId == null) {
            throw new ApiException("Missing the required parameter 'staticRouteId' when calling deleteDeviceSwitchRoutingStaticRoute_0(Async)");
        }

        return deleteDeviceSwitchRoutingStaticRoute_0Call(serial, staticRouteId, _callback);

    }

    /**
     * Delete a layer 3 static route for a switch
     * Delete a layer 3 static route for a switch
     * @param serial  (required)
     * @param staticRouteId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteDeviceSwitchRoutingStaticRoute_0(String serial, String staticRouteId) throws ApiException {
        deleteDeviceSwitchRoutingStaticRoute_0WithHttpInfo(serial, staticRouteId);
    }

    /**
     * Delete a layer 3 static route for a switch
     * Delete a layer 3 static route for a switch
     * @param serial  (required)
     * @param staticRouteId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteDeviceSwitchRoutingStaticRoute_0WithHttpInfo(String serial, String staticRouteId) throws ApiException {
        okhttp3.Call localVarCall = deleteDeviceSwitchRoutingStaticRoute_0ValidateBeforeCall(serial, staticRouteId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a layer 3 static route for a switch (asynchronously)
     * Delete a layer 3 static route for a switch
     * @param serial  (required)
     * @param staticRouteId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDeviceSwitchRoutingStaticRoute_0Async(String serial, String staticRouteId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDeviceSwitchRoutingStaticRoute_0ValidateBeforeCall(serial, staticRouteId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkAppliancePrefixesDelegatedStatic_0
     * @param networkId  (required)
     * @param staticDelegatedPrefixId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkAppliancePrefixesDelegatedStatic_0Call(String networkId, String staticDelegatedPrefixId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/prefixes/delegated/statics/{staticDelegatedPrefixId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "staticDelegatedPrefixId" + "}", localVarApiClient.escapeString(staticDelegatedPrefixId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkAppliancePrefixesDelegatedStatic_0ValidateBeforeCall(String networkId, String staticDelegatedPrefixId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deleteNetworkAppliancePrefixesDelegatedStatic_0(Async)");
        }

        // verify the required parameter 'staticDelegatedPrefixId' is set
        if (staticDelegatedPrefixId == null) {
            throw new ApiException("Missing the required parameter 'staticDelegatedPrefixId' when calling deleteNetworkAppliancePrefixesDelegatedStatic_0(Async)");
        }

        return deleteNetworkAppliancePrefixesDelegatedStatic_0Call(networkId, staticDelegatedPrefixId, _callback);

    }

    /**
     * Delete a static delegated prefix from a network
     * Delete a static delegated prefix from a network
     * @param networkId  (required)
     * @param staticDelegatedPrefixId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkAppliancePrefixesDelegatedStatic_0(String networkId, String staticDelegatedPrefixId) throws ApiException {
        deleteNetworkAppliancePrefixesDelegatedStatic_0WithHttpInfo(networkId, staticDelegatedPrefixId);
    }

    /**
     * Delete a static delegated prefix from a network
     * Delete a static delegated prefix from a network
     * @param networkId  (required)
     * @param staticDelegatedPrefixId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkAppliancePrefixesDelegatedStatic_0WithHttpInfo(String networkId, String staticDelegatedPrefixId) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkAppliancePrefixesDelegatedStatic_0ValidateBeforeCall(networkId, staticDelegatedPrefixId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a static delegated prefix from a network (asynchronously)
     * Delete a static delegated prefix from a network
     * @param networkId  (required)
     * @param staticDelegatedPrefixId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkAppliancePrefixesDelegatedStatic_0Async(String networkId, String staticDelegatedPrefixId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkAppliancePrefixesDelegatedStatic_0ValidateBeforeCall(networkId, staticDelegatedPrefixId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkApplianceStaticRoute_0
     * @param networkId  (required)
     * @param staticRouteId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkApplianceStaticRoute_0Call(String networkId, String staticRouteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/staticRoutes/{staticRouteId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "staticRouteId" + "}", localVarApiClient.escapeString(staticRouteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkApplianceStaticRoute_0ValidateBeforeCall(String networkId, String staticRouteId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deleteNetworkApplianceStaticRoute_0(Async)");
        }

        // verify the required parameter 'staticRouteId' is set
        if (staticRouteId == null) {
            throw new ApiException("Missing the required parameter 'staticRouteId' when calling deleteNetworkApplianceStaticRoute_0(Async)");
        }

        return deleteNetworkApplianceStaticRoute_0Call(networkId, staticRouteId, _callback);

    }

    /**
     * Delete a static route from an MX or teleworker network
     * Delete a static route from an MX or teleworker network
     * @param networkId  (required)
     * @param staticRouteId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkApplianceStaticRoute_0(String networkId, String staticRouteId) throws ApiException {
        deleteNetworkApplianceStaticRoute_0WithHttpInfo(networkId, staticRouteId);
    }

    /**
     * Delete a static route from an MX or teleworker network
     * Delete a static route from an MX or teleworker network
     * @param networkId  (required)
     * @param staticRouteId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkApplianceStaticRoute_0WithHttpInfo(String networkId, String staticRouteId) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkApplianceStaticRoute_0ValidateBeforeCall(networkId, staticRouteId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a static route from an MX or teleworker network (asynchronously)
     * Delete a static route from an MX or teleworker network
     * @param networkId  (required)
     * @param staticRouteId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkApplianceStaticRoute_0Async(String networkId, String staticRouteId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkApplianceStaticRoute_0ValidateBeforeCall(networkId, staticRouteId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkApplianceTrafficShapingCustomPerformanceClass_0
     * @param networkId  (required)
     * @param customPerformanceClassId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkApplianceTrafficShapingCustomPerformanceClass_0Call(String networkId, String customPerformanceClassId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/trafficShaping/customPerformanceClasses/{customPerformanceClassId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "customPerformanceClassId" + "}", localVarApiClient.escapeString(customPerformanceClassId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkApplianceTrafficShapingCustomPerformanceClass_0ValidateBeforeCall(String networkId, String customPerformanceClassId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deleteNetworkApplianceTrafficShapingCustomPerformanceClass_0(Async)");
        }

        // verify the required parameter 'customPerformanceClassId' is set
        if (customPerformanceClassId == null) {
            throw new ApiException("Missing the required parameter 'customPerformanceClassId' when calling deleteNetworkApplianceTrafficShapingCustomPerformanceClass_0(Async)");
        }

        return deleteNetworkApplianceTrafficShapingCustomPerformanceClass_0Call(networkId, customPerformanceClassId, _callback);

    }

    /**
     * Delete a custom performance class from an MX network
     * Delete a custom performance class from an MX network
     * @param networkId  (required)
     * @param customPerformanceClassId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkApplianceTrafficShapingCustomPerformanceClass_0(String networkId, String customPerformanceClassId) throws ApiException {
        deleteNetworkApplianceTrafficShapingCustomPerformanceClass_0WithHttpInfo(networkId, customPerformanceClassId);
    }

    /**
     * Delete a custom performance class from an MX network
     * Delete a custom performance class from an MX network
     * @param networkId  (required)
     * @param customPerformanceClassId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkApplianceTrafficShapingCustomPerformanceClass_0WithHttpInfo(String networkId, String customPerformanceClassId) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkApplianceTrafficShapingCustomPerformanceClass_0ValidateBeforeCall(networkId, customPerformanceClassId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a custom performance class from an MX network (asynchronously)
     * Delete a custom performance class from an MX network
     * @param networkId  (required)
     * @param customPerformanceClassId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkApplianceTrafficShapingCustomPerformanceClass_0Async(String networkId, String customPerformanceClassId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkApplianceTrafficShapingCustomPerformanceClass_0ValidateBeforeCall(networkId, customPerformanceClassId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkApplianceVlan_0
     * @param networkId  (required)
     * @param vlanId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkApplianceVlan_0Call(String networkId, String vlanId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/vlans/{vlanId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "vlanId" + "}", localVarApiClient.escapeString(vlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkApplianceVlan_0ValidateBeforeCall(String networkId, String vlanId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deleteNetworkApplianceVlan_0(Async)");
        }

        // verify the required parameter 'vlanId' is set
        if (vlanId == null) {
            throw new ApiException("Missing the required parameter 'vlanId' when calling deleteNetworkApplianceVlan_0(Async)");
        }

        return deleteNetworkApplianceVlan_0Call(networkId, vlanId, _callback);

    }

    /**
     * Delete a VLAN from a network
     * Delete a VLAN from a network
     * @param networkId  (required)
     * @param vlanId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkApplianceVlan_0(String networkId, String vlanId) throws ApiException {
        deleteNetworkApplianceVlan_0WithHttpInfo(networkId, vlanId);
    }

    /**
     * Delete a VLAN from a network
     * Delete a VLAN from a network
     * @param networkId  (required)
     * @param vlanId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkApplianceVlan_0WithHttpInfo(String networkId, String vlanId) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkApplianceVlan_0ValidateBeforeCall(networkId, vlanId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a VLAN from a network (asynchronously)
     * Delete a VLAN from a network
     * @param networkId  (required)
     * @param vlanId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkApplianceVlan_0Async(String networkId, String vlanId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkApplianceVlan_0ValidateBeforeCall(networkId, vlanId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkCameraQualityRetentionProfile_0
     * @param networkId  (required)
     * @param qualityRetentionProfileId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkCameraQualityRetentionProfile_0Call(String networkId, String qualityRetentionProfileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/camera/qualityRetentionProfiles/{qualityRetentionProfileId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "qualityRetentionProfileId" + "}", localVarApiClient.escapeString(qualityRetentionProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkCameraQualityRetentionProfile_0ValidateBeforeCall(String networkId, String qualityRetentionProfileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deleteNetworkCameraQualityRetentionProfile_0(Async)");
        }

        // verify the required parameter 'qualityRetentionProfileId' is set
        if (qualityRetentionProfileId == null) {
            throw new ApiException("Missing the required parameter 'qualityRetentionProfileId' when calling deleteNetworkCameraQualityRetentionProfile_0(Async)");
        }

        return deleteNetworkCameraQualityRetentionProfile_0Call(networkId, qualityRetentionProfileId, _callback);

    }

    /**
     * Delete an existing quality retention profile for this network.
     * Delete an existing quality retention profile for this network.
     * @param networkId  (required)
     * @param qualityRetentionProfileId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkCameraQualityRetentionProfile_0(String networkId, String qualityRetentionProfileId) throws ApiException {
        deleteNetworkCameraQualityRetentionProfile_0WithHttpInfo(networkId, qualityRetentionProfileId);
    }

    /**
     * Delete an existing quality retention profile for this network.
     * Delete an existing quality retention profile for this network.
     * @param networkId  (required)
     * @param qualityRetentionProfileId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkCameraQualityRetentionProfile_0WithHttpInfo(String networkId, String qualityRetentionProfileId) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkCameraQualityRetentionProfile_0ValidateBeforeCall(networkId, qualityRetentionProfileId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an existing quality retention profile for this network. (asynchronously)
     * Delete an existing quality retention profile for this network.
     * @param networkId  (required)
     * @param qualityRetentionProfileId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkCameraQualityRetentionProfile_0Async(String networkId, String qualityRetentionProfileId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkCameraQualityRetentionProfile_0ValidateBeforeCall(networkId, qualityRetentionProfileId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkCameraWirelessProfile_0
     * @param networkId  (required)
     * @param wirelessProfileId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkCameraWirelessProfile_0Call(String networkId, String wirelessProfileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/camera/wirelessProfiles/{wirelessProfileId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "wirelessProfileId" + "}", localVarApiClient.escapeString(wirelessProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkCameraWirelessProfile_0ValidateBeforeCall(String networkId, String wirelessProfileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deleteNetworkCameraWirelessProfile_0(Async)");
        }

        // verify the required parameter 'wirelessProfileId' is set
        if (wirelessProfileId == null) {
            throw new ApiException("Missing the required parameter 'wirelessProfileId' when calling deleteNetworkCameraWirelessProfile_0(Async)");
        }

        return deleteNetworkCameraWirelessProfile_0Call(networkId, wirelessProfileId, _callback);

    }

    /**
     * Delete an existing camera wireless profile for this network.
     * Delete an existing camera wireless profile for this network.
     * @param networkId  (required)
     * @param wirelessProfileId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkCameraWirelessProfile_0(String networkId, String wirelessProfileId) throws ApiException {
        deleteNetworkCameraWirelessProfile_0WithHttpInfo(networkId, wirelessProfileId);
    }

    /**
     * Delete an existing camera wireless profile for this network.
     * Delete an existing camera wireless profile for this network.
     * @param networkId  (required)
     * @param wirelessProfileId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkCameraWirelessProfile_0WithHttpInfo(String networkId, String wirelessProfileId) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkCameraWirelessProfile_0ValidateBeforeCall(networkId, wirelessProfileId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an existing camera wireless profile for this network. (asynchronously)
     * Delete an existing camera wireless profile for this network.
     * @param networkId  (required)
     * @param wirelessProfileId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkCameraWirelessProfile_0Async(String networkId, String wirelessProfileId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkCameraWirelessProfile_0ValidateBeforeCall(networkId, wirelessProfileId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkFirmwareUpgradesStagedGroup_0
     * @param networkId  (required)
     * @param groupId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkFirmwareUpgradesStagedGroup_0Call(String networkId, String groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/firmwareUpgrades/staged/groups/{groupId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkFirmwareUpgradesStagedGroup_0ValidateBeforeCall(String networkId, String groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deleteNetworkFirmwareUpgradesStagedGroup_0(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling deleteNetworkFirmwareUpgradesStagedGroup_0(Async)");
        }

        return deleteNetworkFirmwareUpgradesStagedGroup_0Call(networkId, groupId, _callback);

    }

    /**
     * Delete a Staged Upgrade Group
     * Delete a Staged Upgrade Group
     * @param networkId  (required)
     * @param groupId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkFirmwareUpgradesStagedGroup_0(String networkId, String groupId) throws ApiException {
        deleteNetworkFirmwareUpgradesStagedGroup_0WithHttpInfo(networkId, groupId);
    }

    /**
     * Delete a Staged Upgrade Group
     * Delete a Staged Upgrade Group
     * @param networkId  (required)
     * @param groupId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkFirmwareUpgradesStagedGroup_0WithHttpInfo(String networkId, String groupId) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkFirmwareUpgradesStagedGroup_0ValidateBeforeCall(networkId, groupId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a Staged Upgrade Group (asynchronously)
     * Delete a Staged Upgrade Group
     * @param networkId  (required)
     * @param groupId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkFirmwareUpgradesStagedGroup_0Async(String networkId, String groupId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkFirmwareUpgradesStagedGroup_0ValidateBeforeCall(networkId, groupId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkFloorPlan_0
     * @param networkId  (required)
     * @param floorPlanId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkFloorPlan_0Call(String networkId, String floorPlanId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/floorPlans/{floorPlanId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "floorPlanId" + "}", localVarApiClient.escapeString(floorPlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkFloorPlan_0ValidateBeforeCall(String networkId, String floorPlanId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deleteNetworkFloorPlan_0(Async)");
        }

        // verify the required parameter 'floorPlanId' is set
        if (floorPlanId == null) {
            throw new ApiException("Missing the required parameter 'floorPlanId' when calling deleteNetworkFloorPlan_0(Async)");
        }

        return deleteNetworkFloorPlan_0Call(networkId, floorPlanId, _callback);

    }

    /**
     * Destroy a floor plan
     * Destroy a floor plan
     * @param networkId  (required)
     * @param floorPlanId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkFloorPlan_0(String networkId, String floorPlanId) throws ApiException {
        deleteNetworkFloorPlan_0WithHttpInfo(networkId, floorPlanId);
    }

    /**
     * Destroy a floor plan
     * Destroy a floor plan
     * @param networkId  (required)
     * @param floorPlanId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkFloorPlan_0WithHttpInfo(String networkId, String floorPlanId) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkFloorPlan_0ValidateBeforeCall(networkId, floorPlanId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Destroy a floor plan (asynchronously)
     * Destroy a floor plan
     * @param networkId  (required)
     * @param floorPlanId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkFloorPlan_0Async(String networkId, String floorPlanId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkFloorPlan_0ValidateBeforeCall(networkId, floorPlanId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkGroupPolicy_0
     * @param networkId  (required)
     * @param groupPolicyId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkGroupPolicy_0Call(String networkId, String groupPolicyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/groupPolicies/{groupPolicyId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "groupPolicyId" + "}", localVarApiClient.escapeString(groupPolicyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkGroupPolicy_0ValidateBeforeCall(String networkId, String groupPolicyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deleteNetworkGroupPolicy_0(Async)");
        }

        // verify the required parameter 'groupPolicyId' is set
        if (groupPolicyId == null) {
            throw new ApiException("Missing the required parameter 'groupPolicyId' when calling deleteNetworkGroupPolicy_0(Async)");
        }

        return deleteNetworkGroupPolicy_0Call(networkId, groupPolicyId, _callback);

    }

    /**
     * Delete a group policy
     * Delete a group policy
     * @param networkId  (required)
     * @param groupPolicyId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkGroupPolicy_0(String networkId, String groupPolicyId) throws ApiException {
        deleteNetworkGroupPolicy_0WithHttpInfo(networkId, groupPolicyId);
    }

    /**
     * Delete a group policy
     * Delete a group policy
     * @param networkId  (required)
     * @param groupPolicyId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkGroupPolicy_0WithHttpInfo(String networkId, String groupPolicyId) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkGroupPolicy_0ValidateBeforeCall(networkId, groupPolicyId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a group policy (asynchronously)
     * Delete a group policy
     * @param networkId  (required)
     * @param groupPolicyId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkGroupPolicy_0Async(String networkId, String groupPolicyId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkGroupPolicy_0ValidateBeforeCall(networkId, groupPolicyId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkMerakiAuthUser_0
     * @param networkId  (required)
     * @param merakiAuthUserId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkMerakiAuthUser_0Call(String networkId, String merakiAuthUserId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/merakiAuthUsers/{merakiAuthUserId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "merakiAuthUserId" + "}", localVarApiClient.escapeString(merakiAuthUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkMerakiAuthUser_0ValidateBeforeCall(String networkId, String merakiAuthUserId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deleteNetworkMerakiAuthUser_0(Async)");
        }

        // verify the required parameter 'merakiAuthUserId' is set
        if (merakiAuthUserId == null) {
            throw new ApiException("Missing the required parameter 'merakiAuthUserId' when calling deleteNetworkMerakiAuthUser_0(Async)");
        }

        return deleteNetworkMerakiAuthUser_0Call(networkId, merakiAuthUserId, _callback);

    }

    /**
     * Deauthorize a user
     * Deauthorize a user. To reauthorize a user after deauthorizing them, POST to this endpoint. (Currently, 802.1X RADIUS, splash guest, and client VPN users can be deauthorized.)
     * @param networkId  (required)
     * @param merakiAuthUserId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkMerakiAuthUser_0(String networkId, String merakiAuthUserId) throws ApiException {
        deleteNetworkMerakiAuthUser_0WithHttpInfo(networkId, merakiAuthUserId);
    }

    /**
     * Deauthorize a user
     * Deauthorize a user. To reauthorize a user after deauthorizing them, POST to this endpoint. (Currently, 802.1X RADIUS, splash guest, and client VPN users can be deauthorized.)
     * @param networkId  (required)
     * @param merakiAuthUserId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkMerakiAuthUser_0WithHttpInfo(String networkId, String merakiAuthUserId) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkMerakiAuthUser_0ValidateBeforeCall(networkId, merakiAuthUserId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deauthorize a user (asynchronously)
     * Deauthorize a user. To reauthorize a user after deauthorizing them, POST to this endpoint. (Currently, 802.1X RADIUS, splash guest, and client VPN users can be deauthorized.)
     * @param networkId  (required)
     * @param merakiAuthUserId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkMerakiAuthUser_0Async(String networkId, String merakiAuthUserId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkMerakiAuthUser_0ValidateBeforeCall(networkId, merakiAuthUserId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkMqttBroker_0
     * @param networkId  (required)
     * @param mqttBrokerId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkMqttBroker_0Call(String networkId, String mqttBrokerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/mqttBrokers/{mqttBrokerId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "mqttBrokerId" + "}", localVarApiClient.escapeString(mqttBrokerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkMqttBroker_0ValidateBeforeCall(String networkId, String mqttBrokerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deleteNetworkMqttBroker_0(Async)");
        }

        // verify the required parameter 'mqttBrokerId' is set
        if (mqttBrokerId == null) {
            throw new ApiException("Missing the required parameter 'mqttBrokerId' when calling deleteNetworkMqttBroker_0(Async)");
        }

        return deleteNetworkMqttBroker_0Call(networkId, mqttBrokerId, _callback);

    }

    /**
     * Delete an MQTT broker
     * Delete an MQTT broker
     * @param networkId  (required)
     * @param mqttBrokerId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkMqttBroker_0(String networkId, String mqttBrokerId) throws ApiException {
        deleteNetworkMqttBroker_0WithHttpInfo(networkId, mqttBrokerId);
    }

    /**
     * Delete an MQTT broker
     * Delete an MQTT broker
     * @param networkId  (required)
     * @param mqttBrokerId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkMqttBroker_0WithHttpInfo(String networkId, String mqttBrokerId) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkMqttBroker_0ValidateBeforeCall(networkId, mqttBrokerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an MQTT broker (asynchronously)
     * Delete an MQTT broker
     * @param networkId  (required)
     * @param mqttBrokerId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkMqttBroker_0Async(String networkId, String mqttBrokerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkMqttBroker_0ValidateBeforeCall(networkId, mqttBrokerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkPiiRequest_0
     * @param networkId  (required)
     * @param requestId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkPiiRequest_0Call(String networkId, String requestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/pii/requests/{requestId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "requestId" + "}", localVarApiClient.escapeString(requestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkPiiRequest_0ValidateBeforeCall(String networkId, String requestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deleteNetworkPiiRequest_0(Async)");
        }

        // verify the required parameter 'requestId' is set
        if (requestId == null) {
            throw new ApiException("Missing the required parameter 'requestId' when calling deleteNetworkPiiRequest_0(Async)");
        }

        return deleteNetworkPiiRequest_0Call(networkId, requestId, _callback);

    }

    /**
     * Delete a restrict processing PII request
     * Delete a restrict processing PII request  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/requests/{requestId} &#x60;&#x60;&#x60;
     * @param networkId  (required)
     * @param requestId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkPiiRequest_0(String networkId, String requestId) throws ApiException {
        deleteNetworkPiiRequest_0WithHttpInfo(networkId, requestId);
    }

    /**
     * Delete a restrict processing PII request
     * Delete a restrict processing PII request  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/requests/{requestId} &#x60;&#x60;&#x60;
     * @param networkId  (required)
     * @param requestId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkPiiRequest_0WithHttpInfo(String networkId, String requestId) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkPiiRequest_0ValidateBeforeCall(networkId, requestId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a restrict processing PII request (asynchronously)
     * Delete a restrict processing PII request  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/requests/{requestId} &#x60;&#x60;&#x60;
     * @param networkId  (required)
     * @param requestId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkPiiRequest_0Async(String networkId, String requestId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkPiiRequest_0ValidateBeforeCall(networkId, requestId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkSensorAlertsProfile_0
     * @param networkId  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkSensorAlertsProfile_0Call(String networkId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/sensor/alerts/profiles/{id}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkSensorAlertsProfile_0ValidateBeforeCall(String networkId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deleteNetworkSensorAlertsProfile_0(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteNetworkSensorAlertsProfile_0(Async)");
        }

        return deleteNetworkSensorAlertsProfile_0Call(networkId, id, _callback);

    }

    /**
     * Deletes a sensor alert profile from a network.
     * Deletes a sensor alert profile from a network.
     * @param networkId  (required)
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkSensorAlertsProfile_0(String networkId, String id) throws ApiException {
        deleteNetworkSensorAlertsProfile_0WithHttpInfo(networkId, id);
    }

    /**
     * Deletes a sensor alert profile from a network.
     * Deletes a sensor alert profile from a network.
     * @param networkId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkSensorAlertsProfile_0WithHttpInfo(String networkId, String id) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkSensorAlertsProfile_0ValidateBeforeCall(networkId, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a sensor alert profile from a network. (asynchronously)
     * Deletes a sensor alert profile from a network.
     * @param networkId  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkSensorAlertsProfile_0Async(String networkId, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkSensorAlertsProfile_0ValidateBeforeCall(networkId, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkSmTargetGroup_0
     * @param networkId  (required)
     * @param targetGroupId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkSmTargetGroup_0Call(String networkId, String targetGroupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/sm/targetGroups/{targetGroupId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "targetGroupId" + "}", localVarApiClient.escapeString(targetGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkSmTargetGroup_0ValidateBeforeCall(String networkId, String targetGroupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deleteNetworkSmTargetGroup_0(Async)");
        }

        // verify the required parameter 'targetGroupId' is set
        if (targetGroupId == null) {
            throw new ApiException("Missing the required parameter 'targetGroupId' when calling deleteNetworkSmTargetGroup_0(Async)");
        }

        return deleteNetworkSmTargetGroup_0Call(networkId, targetGroupId, _callback);

    }

    /**
     * Delete a target group from a network
     * Delete a target group from a network
     * @param networkId  (required)
     * @param targetGroupId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkSmTargetGroup_0(String networkId, String targetGroupId) throws ApiException {
        deleteNetworkSmTargetGroup_0WithHttpInfo(networkId, targetGroupId);
    }

    /**
     * Delete a target group from a network
     * Delete a target group from a network
     * @param networkId  (required)
     * @param targetGroupId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkSmTargetGroup_0WithHttpInfo(String networkId, String targetGroupId) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkSmTargetGroup_0ValidateBeforeCall(networkId, targetGroupId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a target group from a network (asynchronously)
     * Delete a target group from a network
     * @param networkId  (required)
     * @param targetGroupId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkSmTargetGroup_0Async(String networkId, String targetGroupId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkSmTargetGroup_0ValidateBeforeCall(networkId, targetGroupId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkSmUserAccessDevice_0
     * @param networkId  (required)
     * @param userAccessDeviceId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkSmUserAccessDevice_0Call(String networkId, String userAccessDeviceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/sm/userAccessDevices/{userAccessDeviceId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "userAccessDeviceId" + "}", localVarApiClient.escapeString(userAccessDeviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkSmUserAccessDevice_0ValidateBeforeCall(String networkId, String userAccessDeviceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deleteNetworkSmUserAccessDevice_0(Async)");
        }

        // verify the required parameter 'userAccessDeviceId' is set
        if (userAccessDeviceId == null) {
            throw new ApiException("Missing the required parameter 'userAccessDeviceId' when calling deleteNetworkSmUserAccessDevice_0(Async)");
        }

        return deleteNetworkSmUserAccessDevice_0Call(networkId, userAccessDeviceId, _callback);

    }

    /**
     * Delete a User Access Device
     * Delete a User Access Device
     * @param networkId  (required)
     * @param userAccessDeviceId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkSmUserAccessDevice_0(String networkId, String userAccessDeviceId) throws ApiException {
        deleteNetworkSmUserAccessDevice_0WithHttpInfo(networkId, userAccessDeviceId);
    }

    /**
     * Delete a User Access Device
     * Delete a User Access Device
     * @param networkId  (required)
     * @param userAccessDeviceId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkSmUserAccessDevice_0WithHttpInfo(String networkId, String userAccessDeviceId) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkSmUserAccessDevice_0ValidateBeforeCall(networkId, userAccessDeviceId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a User Access Device (asynchronously)
     * Delete a User Access Device
     * @param networkId  (required)
     * @param userAccessDeviceId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkSmUserAccessDevice_0Async(String networkId, String userAccessDeviceId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkSmUserAccessDevice_0ValidateBeforeCall(networkId, userAccessDeviceId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkSwitchAccessPolicy_0
     * @param networkId  (required)
     * @param accessPolicyNumber  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkSwitchAccessPolicy_0Call(String networkId, String accessPolicyNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/accessPolicies/{accessPolicyNumber}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "accessPolicyNumber" + "}", localVarApiClient.escapeString(accessPolicyNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkSwitchAccessPolicy_0ValidateBeforeCall(String networkId, String accessPolicyNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deleteNetworkSwitchAccessPolicy_0(Async)");
        }

        // verify the required parameter 'accessPolicyNumber' is set
        if (accessPolicyNumber == null) {
            throw new ApiException("Missing the required parameter 'accessPolicyNumber' when calling deleteNetworkSwitchAccessPolicy_0(Async)");
        }

        return deleteNetworkSwitchAccessPolicy_0Call(networkId, accessPolicyNumber, _callback);

    }

    /**
     * Delete an access policy for a switch network
     * Delete an access policy for a switch network
     * @param networkId  (required)
     * @param accessPolicyNumber  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkSwitchAccessPolicy_0(String networkId, String accessPolicyNumber) throws ApiException {
        deleteNetworkSwitchAccessPolicy_0WithHttpInfo(networkId, accessPolicyNumber);
    }

    /**
     * Delete an access policy for a switch network
     * Delete an access policy for a switch network
     * @param networkId  (required)
     * @param accessPolicyNumber  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkSwitchAccessPolicy_0WithHttpInfo(String networkId, String accessPolicyNumber) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkSwitchAccessPolicy_0ValidateBeforeCall(networkId, accessPolicyNumber, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an access policy for a switch network (asynchronously)
     * Delete an access policy for a switch network
     * @param networkId  (required)
     * @param accessPolicyNumber  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkSwitchAccessPolicy_0Async(String networkId, String accessPolicyNumber, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkSwitchAccessPolicy_0ValidateBeforeCall(networkId, accessPolicyNumber, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_0
     * @param networkId  (required)
     * @param trustedServerId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_0Call(String networkId, String trustedServerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/dhcpServerPolicy/arpInspection/trustedServers/{trustedServerId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "trustedServerId" + "}", localVarApiClient.escapeString(trustedServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_0ValidateBeforeCall(String networkId, String trustedServerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_0(Async)");
        }

        // verify the required parameter 'trustedServerId' is set
        if (trustedServerId == null) {
            throw new ApiException("Missing the required parameter 'trustedServerId' when calling deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_0(Async)");
        }

        return deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_0Call(networkId, trustedServerId, _callback);

    }

    /**
     * Remove a server from being trusted by Dynamic ARP Inspection on this network
     * Remove a server from being trusted by Dynamic ARP Inspection on this network
     * @param networkId  (required)
     * @param trustedServerId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_0(String networkId, String trustedServerId) throws ApiException {
        deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_0WithHttpInfo(networkId, trustedServerId);
    }

    /**
     * Remove a server from being trusted by Dynamic ARP Inspection on this network
     * Remove a server from being trusted by Dynamic ARP Inspection on this network
     * @param networkId  (required)
     * @param trustedServerId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_0WithHttpInfo(String networkId, String trustedServerId) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_0ValidateBeforeCall(networkId, trustedServerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a server from being trusted by Dynamic ARP Inspection on this network (asynchronously)
     * Remove a server from being trusted by Dynamic ARP Inspection on this network
     * @param networkId  (required)
     * @param trustedServerId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_0Async(String networkId, String trustedServerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_0ValidateBeforeCall(networkId, trustedServerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkSwitchLinkAggregation_0
     * @param networkId  (required)
     * @param linkAggregationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkSwitchLinkAggregation_0Call(String networkId, String linkAggregationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/linkAggregations/{linkAggregationId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "linkAggregationId" + "}", localVarApiClient.escapeString(linkAggregationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkSwitchLinkAggregation_0ValidateBeforeCall(String networkId, String linkAggregationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deleteNetworkSwitchLinkAggregation_0(Async)");
        }

        // verify the required parameter 'linkAggregationId' is set
        if (linkAggregationId == null) {
            throw new ApiException("Missing the required parameter 'linkAggregationId' when calling deleteNetworkSwitchLinkAggregation_0(Async)");
        }

        return deleteNetworkSwitchLinkAggregation_0Call(networkId, linkAggregationId, _callback);

    }

    /**
     * Split a link aggregation group into separate ports
     * Split a link aggregation group into separate ports
     * @param networkId  (required)
     * @param linkAggregationId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkSwitchLinkAggregation_0(String networkId, String linkAggregationId) throws ApiException {
        deleteNetworkSwitchLinkAggregation_0WithHttpInfo(networkId, linkAggregationId);
    }

    /**
     * Split a link aggregation group into separate ports
     * Split a link aggregation group into separate ports
     * @param networkId  (required)
     * @param linkAggregationId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkSwitchLinkAggregation_0WithHttpInfo(String networkId, String linkAggregationId) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkSwitchLinkAggregation_0ValidateBeforeCall(networkId, linkAggregationId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Split a link aggregation group into separate ports (asynchronously)
     * Split a link aggregation group into separate ports
     * @param networkId  (required)
     * @param linkAggregationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkSwitchLinkAggregation_0Async(String networkId, String linkAggregationId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkSwitchLinkAggregation_0ValidateBeforeCall(networkId, linkAggregationId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkSwitchPortSchedule_0
     * @param networkId  (required)
     * @param portScheduleId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkSwitchPortSchedule_0Call(String networkId, String portScheduleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/portSchedules/{portScheduleId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "portScheduleId" + "}", localVarApiClient.escapeString(portScheduleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkSwitchPortSchedule_0ValidateBeforeCall(String networkId, String portScheduleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deleteNetworkSwitchPortSchedule_0(Async)");
        }

        // verify the required parameter 'portScheduleId' is set
        if (portScheduleId == null) {
            throw new ApiException("Missing the required parameter 'portScheduleId' when calling deleteNetworkSwitchPortSchedule_0(Async)");
        }

        return deleteNetworkSwitchPortSchedule_0Call(networkId, portScheduleId, _callback);

    }

    /**
     * Delete a switch port schedule
     * Delete a switch port schedule
     * @param networkId  (required)
     * @param portScheduleId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkSwitchPortSchedule_0(String networkId, String portScheduleId) throws ApiException {
        deleteNetworkSwitchPortSchedule_0WithHttpInfo(networkId, portScheduleId);
    }

    /**
     * Delete a switch port schedule
     * Delete a switch port schedule
     * @param networkId  (required)
     * @param portScheduleId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkSwitchPortSchedule_0WithHttpInfo(String networkId, String portScheduleId) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkSwitchPortSchedule_0ValidateBeforeCall(networkId, portScheduleId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a switch port schedule (asynchronously)
     * Delete a switch port schedule
     * @param networkId  (required)
     * @param portScheduleId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkSwitchPortSchedule_0Async(String networkId, String portScheduleId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkSwitchPortSchedule_0ValidateBeforeCall(networkId, portScheduleId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkSwitchQosRule_0
     * @param networkId  (required)
     * @param qosRuleId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkSwitchQosRule_0Call(String networkId, String qosRuleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/qosRules/{qosRuleId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "qosRuleId" + "}", localVarApiClient.escapeString(qosRuleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkSwitchQosRule_0ValidateBeforeCall(String networkId, String qosRuleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deleteNetworkSwitchQosRule_0(Async)");
        }

        // verify the required parameter 'qosRuleId' is set
        if (qosRuleId == null) {
            throw new ApiException("Missing the required parameter 'qosRuleId' when calling deleteNetworkSwitchQosRule_0(Async)");
        }

        return deleteNetworkSwitchQosRule_0Call(networkId, qosRuleId, _callback);

    }

    /**
     * Delete a quality of service rule
     * Delete a quality of service rule
     * @param networkId  (required)
     * @param qosRuleId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkSwitchQosRule_0(String networkId, String qosRuleId) throws ApiException {
        deleteNetworkSwitchQosRule_0WithHttpInfo(networkId, qosRuleId);
    }

    /**
     * Delete a quality of service rule
     * Delete a quality of service rule
     * @param networkId  (required)
     * @param qosRuleId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkSwitchQosRule_0WithHttpInfo(String networkId, String qosRuleId) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkSwitchQosRule_0ValidateBeforeCall(networkId, qosRuleId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a quality of service rule (asynchronously)
     * Delete a quality of service rule
     * @param networkId  (required)
     * @param qosRuleId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkSwitchQosRule_0Async(String networkId, String qosRuleId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkSwitchQosRule_0ValidateBeforeCall(networkId, qosRuleId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkSwitchRoutingMulticastRendezvousPoint_0
     * @param networkId  (required)
     * @param rendezvousPointId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkSwitchRoutingMulticastRendezvousPoint_0Call(String networkId, String rendezvousPointId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/routing/multicast/rendezvousPoints/{rendezvousPointId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "rendezvousPointId" + "}", localVarApiClient.escapeString(rendezvousPointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkSwitchRoutingMulticastRendezvousPoint_0ValidateBeforeCall(String networkId, String rendezvousPointId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deleteNetworkSwitchRoutingMulticastRendezvousPoint_0(Async)");
        }

        // verify the required parameter 'rendezvousPointId' is set
        if (rendezvousPointId == null) {
            throw new ApiException("Missing the required parameter 'rendezvousPointId' when calling deleteNetworkSwitchRoutingMulticastRendezvousPoint_0(Async)");
        }

        return deleteNetworkSwitchRoutingMulticastRendezvousPoint_0Call(networkId, rendezvousPointId, _callback);

    }

    /**
     * Delete a multicast rendezvous point
     * Delete a multicast rendezvous point
     * @param networkId  (required)
     * @param rendezvousPointId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkSwitchRoutingMulticastRendezvousPoint_0(String networkId, String rendezvousPointId) throws ApiException {
        deleteNetworkSwitchRoutingMulticastRendezvousPoint_0WithHttpInfo(networkId, rendezvousPointId);
    }

    /**
     * Delete a multicast rendezvous point
     * Delete a multicast rendezvous point
     * @param networkId  (required)
     * @param rendezvousPointId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkSwitchRoutingMulticastRendezvousPoint_0WithHttpInfo(String networkId, String rendezvousPointId) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkSwitchRoutingMulticastRendezvousPoint_0ValidateBeforeCall(networkId, rendezvousPointId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a multicast rendezvous point (asynchronously)
     * Delete a multicast rendezvous point
     * @param networkId  (required)
     * @param rendezvousPointId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkSwitchRoutingMulticastRendezvousPoint_0Async(String networkId, String rendezvousPointId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkSwitchRoutingMulticastRendezvousPoint_0ValidateBeforeCall(networkId, rendezvousPointId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkSwitchStackRoutingInterface_0
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param interfaceId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkSwitchStackRoutingInterface_0Call(String networkId, String switchStackId, String interfaceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "switchStackId" + "}", localVarApiClient.escapeString(switchStackId.toString()))
            .replace("{" + "interfaceId" + "}", localVarApiClient.escapeString(interfaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkSwitchStackRoutingInterface_0ValidateBeforeCall(String networkId, String switchStackId, String interfaceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deleteNetworkSwitchStackRoutingInterface_0(Async)");
        }

        // verify the required parameter 'switchStackId' is set
        if (switchStackId == null) {
            throw new ApiException("Missing the required parameter 'switchStackId' when calling deleteNetworkSwitchStackRoutingInterface_0(Async)");
        }

        // verify the required parameter 'interfaceId' is set
        if (interfaceId == null) {
            throw new ApiException("Missing the required parameter 'interfaceId' when calling deleteNetworkSwitchStackRoutingInterface_0(Async)");
        }

        return deleteNetworkSwitchStackRoutingInterface_0Call(networkId, switchStackId, interfaceId, _callback);

    }

    /**
     * Delete a layer 3 interface from a switch stack
     * Delete a layer 3 interface from a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param interfaceId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkSwitchStackRoutingInterface_0(String networkId, String switchStackId, String interfaceId) throws ApiException {
        deleteNetworkSwitchStackRoutingInterface_0WithHttpInfo(networkId, switchStackId, interfaceId);
    }

    /**
     * Delete a layer 3 interface from a switch stack
     * Delete a layer 3 interface from a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param interfaceId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkSwitchStackRoutingInterface_0WithHttpInfo(String networkId, String switchStackId, String interfaceId) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkSwitchStackRoutingInterface_0ValidateBeforeCall(networkId, switchStackId, interfaceId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a layer 3 interface from a switch stack (asynchronously)
     * Delete a layer 3 interface from a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param interfaceId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkSwitchStackRoutingInterface_0Async(String networkId, String switchStackId, String interfaceId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkSwitchStackRoutingInterface_0ValidateBeforeCall(networkId, switchStackId, interfaceId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkSwitchStackRoutingStaticRoute_0
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param staticRouteId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkSwitchStackRoutingStaticRoute_0Call(String networkId, String switchStackId, String staticRouteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes/{staticRouteId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "switchStackId" + "}", localVarApiClient.escapeString(switchStackId.toString()))
            .replace("{" + "staticRouteId" + "}", localVarApiClient.escapeString(staticRouteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkSwitchStackRoutingStaticRoute_0ValidateBeforeCall(String networkId, String switchStackId, String staticRouteId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deleteNetworkSwitchStackRoutingStaticRoute_0(Async)");
        }

        // verify the required parameter 'switchStackId' is set
        if (switchStackId == null) {
            throw new ApiException("Missing the required parameter 'switchStackId' when calling deleteNetworkSwitchStackRoutingStaticRoute_0(Async)");
        }

        // verify the required parameter 'staticRouteId' is set
        if (staticRouteId == null) {
            throw new ApiException("Missing the required parameter 'staticRouteId' when calling deleteNetworkSwitchStackRoutingStaticRoute_0(Async)");
        }

        return deleteNetworkSwitchStackRoutingStaticRoute_0Call(networkId, switchStackId, staticRouteId, _callback);

    }

    /**
     * Delete a layer 3 static route for a switch stack
     * Delete a layer 3 static route for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param staticRouteId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkSwitchStackRoutingStaticRoute_0(String networkId, String switchStackId, String staticRouteId) throws ApiException {
        deleteNetworkSwitchStackRoutingStaticRoute_0WithHttpInfo(networkId, switchStackId, staticRouteId);
    }

    /**
     * Delete a layer 3 static route for a switch stack
     * Delete a layer 3 static route for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param staticRouteId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkSwitchStackRoutingStaticRoute_0WithHttpInfo(String networkId, String switchStackId, String staticRouteId) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkSwitchStackRoutingStaticRoute_0ValidateBeforeCall(networkId, switchStackId, staticRouteId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a layer 3 static route for a switch stack (asynchronously)
     * Delete a layer 3 static route for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param staticRouteId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkSwitchStackRoutingStaticRoute_0Async(String networkId, String switchStackId, String staticRouteId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkSwitchStackRoutingStaticRoute_0ValidateBeforeCall(networkId, switchStackId, staticRouteId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkSwitchStack_0
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkSwitchStack_0Call(String networkId, String switchStackId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/stacks/{switchStackId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "switchStackId" + "}", localVarApiClient.escapeString(switchStackId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkSwitchStack_0ValidateBeforeCall(String networkId, String switchStackId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deleteNetworkSwitchStack_0(Async)");
        }

        // verify the required parameter 'switchStackId' is set
        if (switchStackId == null) {
            throw new ApiException("Missing the required parameter 'switchStackId' when calling deleteNetworkSwitchStack_0(Async)");
        }

        return deleteNetworkSwitchStack_0Call(networkId, switchStackId, _callback);

    }

    /**
     * Delete a stack
     * Delete a stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkSwitchStack_0(String networkId, String switchStackId) throws ApiException {
        deleteNetworkSwitchStack_0WithHttpInfo(networkId, switchStackId);
    }

    /**
     * Delete a stack
     * Delete a stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkSwitchStack_0WithHttpInfo(String networkId, String switchStackId) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkSwitchStack_0ValidateBeforeCall(networkId, switchStackId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a stack (asynchronously)
     * Delete a stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkSwitchStack_0Async(String networkId, String switchStackId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkSwitchStack_0ValidateBeforeCall(networkId, switchStackId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkWebhooksHttpServer_0
     * @param networkId  (required)
     * @param httpServerId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkWebhooksHttpServer_0Call(String networkId, String httpServerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/webhooks/httpServers/{httpServerId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "httpServerId" + "}", localVarApiClient.escapeString(httpServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkWebhooksHttpServer_0ValidateBeforeCall(String networkId, String httpServerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deleteNetworkWebhooksHttpServer_0(Async)");
        }

        // verify the required parameter 'httpServerId' is set
        if (httpServerId == null) {
            throw new ApiException("Missing the required parameter 'httpServerId' when calling deleteNetworkWebhooksHttpServer_0(Async)");
        }

        return deleteNetworkWebhooksHttpServer_0Call(networkId, httpServerId, _callback);

    }

    /**
     * Delete an HTTP server from a network
     * Delete an HTTP server from a network
     * @param networkId  (required)
     * @param httpServerId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkWebhooksHttpServer_0(String networkId, String httpServerId) throws ApiException {
        deleteNetworkWebhooksHttpServer_0WithHttpInfo(networkId, httpServerId);
    }

    /**
     * Delete an HTTP server from a network
     * Delete an HTTP server from a network
     * @param networkId  (required)
     * @param httpServerId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkWebhooksHttpServer_0WithHttpInfo(String networkId, String httpServerId) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkWebhooksHttpServer_0ValidateBeforeCall(networkId, httpServerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an HTTP server from a network (asynchronously)
     * Delete an HTTP server from a network
     * @param networkId  (required)
     * @param httpServerId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkWebhooksHttpServer_0Async(String networkId, String httpServerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkWebhooksHttpServer_0ValidateBeforeCall(networkId, httpServerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkWebhooksPayloadTemplate_0
     * @param networkId  (required)
     * @param payloadTemplateId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkWebhooksPayloadTemplate_0Call(String networkId, String payloadTemplateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/webhooks/payloadTemplates/{payloadTemplateId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "payloadTemplateId" + "}", localVarApiClient.escapeString(payloadTemplateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkWebhooksPayloadTemplate_0ValidateBeforeCall(String networkId, String payloadTemplateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deleteNetworkWebhooksPayloadTemplate_0(Async)");
        }

        // verify the required parameter 'payloadTemplateId' is set
        if (payloadTemplateId == null) {
            throw new ApiException("Missing the required parameter 'payloadTemplateId' when calling deleteNetworkWebhooksPayloadTemplate_0(Async)");
        }

        return deleteNetworkWebhooksPayloadTemplate_0Call(networkId, payloadTemplateId, _callback);

    }

    /**
     * Destroy a webhook payload template for a network
     * Destroy a webhook payload template for a network. Does not work for included templates (&#39;wpt_00001&#39;, &#39;wpt_00002&#39;, &#39;wpt_00003&#39;, &#39;wpt_00004&#39;, &#39;wpt_00005&#39; or &#39;wpt_00006&#39;)
     * @param networkId  (required)
     * @param payloadTemplateId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkWebhooksPayloadTemplate_0(String networkId, String payloadTemplateId) throws ApiException {
        deleteNetworkWebhooksPayloadTemplate_0WithHttpInfo(networkId, payloadTemplateId);
    }

    /**
     * Destroy a webhook payload template for a network
     * Destroy a webhook payload template for a network. Does not work for included templates (&#39;wpt_00001&#39;, &#39;wpt_00002&#39;, &#39;wpt_00003&#39;, &#39;wpt_00004&#39;, &#39;wpt_00005&#39; or &#39;wpt_00006&#39;)
     * @param networkId  (required)
     * @param payloadTemplateId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkWebhooksPayloadTemplate_0WithHttpInfo(String networkId, String payloadTemplateId) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkWebhooksPayloadTemplate_0ValidateBeforeCall(networkId, payloadTemplateId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Destroy a webhook payload template for a network (asynchronously)
     * Destroy a webhook payload template for a network. Does not work for included templates (&#39;wpt_00001&#39;, &#39;wpt_00002&#39;, &#39;wpt_00003&#39;, &#39;wpt_00004&#39;, &#39;wpt_00005&#39; or &#39;wpt_00006&#39;)
     * @param networkId  (required)
     * @param payloadTemplateId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkWebhooksPayloadTemplate_0Async(String networkId, String payloadTemplateId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkWebhooksPayloadTemplate_0ValidateBeforeCall(networkId, payloadTemplateId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkWirelessRfProfile_0
     * @param networkId  (required)
     * @param rfProfileId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkWirelessRfProfile_0Call(String networkId, String rfProfileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/wireless/rfProfiles/{rfProfileId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "rfProfileId" + "}", localVarApiClient.escapeString(rfProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkWirelessRfProfile_0ValidateBeforeCall(String networkId, String rfProfileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deleteNetworkWirelessRfProfile_0(Async)");
        }

        // verify the required parameter 'rfProfileId' is set
        if (rfProfileId == null) {
            throw new ApiException("Missing the required parameter 'rfProfileId' when calling deleteNetworkWirelessRfProfile_0(Async)");
        }

        return deleteNetworkWirelessRfProfile_0Call(networkId, rfProfileId, _callback);

    }

    /**
     * Delete a RF Profile
     * Delete a RF Profile
     * @param networkId  (required)
     * @param rfProfileId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkWirelessRfProfile_0(String networkId, String rfProfileId) throws ApiException {
        deleteNetworkWirelessRfProfile_0WithHttpInfo(networkId, rfProfileId);
    }

    /**
     * Delete a RF Profile
     * Delete a RF Profile
     * @param networkId  (required)
     * @param rfProfileId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkWirelessRfProfile_0WithHttpInfo(String networkId, String rfProfileId) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkWirelessRfProfile_0ValidateBeforeCall(networkId, rfProfileId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a RF Profile (asynchronously)
     * Delete a RF Profile
     * @param networkId  (required)
     * @param rfProfileId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkWirelessRfProfile_0Async(String networkId, String rfProfileId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkWirelessRfProfile_0ValidateBeforeCall(networkId, rfProfileId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkWirelessSsidIdentityPsk_0
     * @param networkId  (required)
     * @param number  (required)
     * @param identityPskId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkWirelessSsidIdentityPsk_0Call(String networkId, String number, String identityPskId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/wireless/ssids/{number}/identityPsks/{identityPskId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "number" + "}", localVarApiClient.escapeString(number.toString()))
            .replace("{" + "identityPskId" + "}", localVarApiClient.escapeString(identityPskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkWirelessSsidIdentityPsk_0ValidateBeforeCall(String networkId, String number, String identityPskId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deleteNetworkWirelessSsidIdentityPsk_0(Async)");
        }

        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling deleteNetworkWirelessSsidIdentityPsk_0(Async)");
        }

        // verify the required parameter 'identityPskId' is set
        if (identityPskId == null) {
            throw new ApiException("Missing the required parameter 'identityPskId' when calling deleteNetworkWirelessSsidIdentityPsk_0(Async)");
        }

        return deleteNetworkWirelessSsidIdentityPsk_0Call(networkId, number, identityPskId, _callback);

    }

    /**
     * Delete an Identity PSK
     * Delete an Identity PSK
     * @param networkId  (required)
     * @param number  (required)
     * @param identityPskId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkWirelessSsidIdentityPsk_0(String networkId, String number, String identityPskId) throws ApiException {
        deleteNetworkWirelessSsidIdentityPsk_0WithHttpInfo(networkId, number, identityPskId);
    }

    /**
     * Delete an Identity PSK
     * Delete an Identity PSK
     * @param networkId  (required)
     * @param number  (required)
     * @param identityPskId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkWirelessSsidIdentityPsk_0WithHttpInfo(String networkId, String number, String identityPskId) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkWirelessSsidIdentityPsk_0ValidateBeforeCall(networkId, number, identityPskId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an Identity PSK (asynchronously)
     * Delete an Identity PSK
     * @param networkId  (required)
     * @param number  (required)
     * @param identityPskId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkWirelessSsidIdentityPsk_0Async(String networkId, String number, String identityPskId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkWirelessSsidIdentityPsk_0ValidateBeforeCall(networkId, number, identityPskId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetwork_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetwork_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetwork_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deleteNetwork_0(Async)");
        }

        return deleteNetwork_0Call(networkId, _callback);

    }

    /**
     * Delete a network
     * Delete a network
     * @param networkId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetwork_0(String networkId) throws ApiException {
        deleteNetwork_0WithHttpInfo(networkId);
    }

    /**
     * Delete a network
     * Delete a network
     * @param networkId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetwork_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = deleteNetwork_0ValidateBeforeCall(networkId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a network (asynchronously)
     * Delete a network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetwork_0Async(String networkId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetwork_0ValidateBeforeCall(networkId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganizationActionBatch_0
     * @param organizationId  (required)
     * @param actionBatchId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganizationActionBatch_0Call(String organizationId, String actionBatchId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/actionBatches/{actionBatchId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "actionBatchId" + "}", localVarApiClient.escapeString(actionBatchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganizationActionBatch_0ValidateBeforeCall(String organizationId, String actionBatchId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling deleteOrganizationActionBatch_0(Async)");
        }

        // verify the required parameter 'actionBatchId' is set
        if (actionBatchId == null) {
            throw new ApiException("Missing the required parameter 'actionBatchId' when calling deleteOrganizationActionBatch_0(Async)");
        }

        return deleteOrganizationActionBatch_0Call(organizationId, actionBatchId, _callback);

    }

    /**
     * Delete an action batch
     * Delete an action batch
     * @param organizationId  (required)
     * @param actionBatchId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganizationActionBatch_0(String organizationId, String actionBatchId) throws ApiException {
        deleteOrganizationActionBatch_0WithHttpInfo(organizationId, actionBatchId);
    }

    /**
     * Delete an action batch
     * Delete an action batch
     * @param organizationId  (required)
     * @param actionBatchId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganizationActionBatch_0WithHttpInfo(String organizationId, String actionBatchId) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganizationActionBatch_0ValidateBeforeCall(organizationId, actionBatchId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an action batch (asynchronously)
     * Delete an action batch
     * @param organizationId  (required)
     * @param actionBatchId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganizationActionBatch_0Async(String organizationId, String actionBatchId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganizationActionBatch_0ValidateBeforeCall(organizationId, actionBatchId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganizationAdaptivePolicyAcl_0
     * @param organizationId  (required)
     * @param aclId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganizationAdaptivePolicyAcl_0Call(String organizationId, String aclId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/adaptivePolicy/acls/{aclId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "aclId" + "}", localVarApiClient.escapeString(aclId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganizationAdaptivePolicyAcl_0ValidateBeforeCall(String organizationId, String aclId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling deleteOrganizationAdaptivePolicyAcl_0(Async)");
        }

        // verify the required parameter 'aclId' is set
        if (aclId == null) {
            throw new ApiException("Missing the required parameter 'aclId' when calling deleteOrganizationAdaptivePolicyAcl_0(Async)");
        }

        return deleteOrganizationAdaptivePolicyAcl_0Call(organizationId, aclId, _callback);

    }

    /**
     * Deletes the specified adaptive policy ACL
     * Deletes the specified adaptive policy ACL. Note this adaptive policy ACL will also be removed from policies using it.
     * @param organizationId  (required)
     * @param aclId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganizationAdaptivePolicyAcl_0(String organizationId, String aclId) throws ApiException {
        deleteOrganizationAdaptivePolicyAcl_0WithHttpInfo(organizationId, aclId);
    }

    /**
     * Deletes the specified adaptive policy ACL
     * Deletes the specified adaptive policy ACL. Note this adaptive policy ACL will also be removed from policies using it.
     * @param organizationId  (required)
     * @param aclId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganizationAdaptivePolicyAcl_0WithHttpInfo(String organizationId, String aclId) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganizationAdaptivePolicyAcl_0ValidateBeforeCall(organizationId, aclId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes the specified adaptive policy ACL (asynchronously)
     * Deletes the specified adaptive policy ACL. Note this adaptive policy ACL will also be removed from policies using it.
     * @param organizationId  (required)
     * @param aclId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganizationAdaptivePolicyAcl_0Async(String organizationId, String aclId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganizationAdaptivePolicyAcl_0ValidateBeforeCall(organizationId, aclId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganizationAdaptivePolicyGroup_0
     * @param organizationId  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganizationAdaptivePolicyGroup_0Call(String organizationId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/adaptivePolicy/groups/{id}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganizationAdaptivePolicyGroup_0ValidateBeforeCall(String organizationId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling deleteOrganizationAdaptivePolicyGroup_0(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOrganizationAdaptivePolicyGroup_0(Async)");
        }

        return deleteOrganizationAdaptivePolicyGroup_0Call(organizationId, id, _callback);

    }

    /**
     * Deletes the specified adaptive policy group and any associated policies and references
     * Deletes the specified adaptive policy group and any associated policies and references
     * @param organizationId  (required)
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganizationAdaptivePolicyGroup_0(String organizationId, String id) throws ApiException {
        deleteOrganizationAdaptivePolicyGroup_0WithHttpInfo(organizationId, id);
    }

    /**
     * Deletes the specified adaptive policy group and any associated policies and references
     * Deletes the specified adaptive policy group and any associated policies and references
     * @param organizationId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganizationAdaptivePolicyGroup_0WithHttpInfo(String organizationId, String id) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganizationAdaptivePolicyGroup_0ValidateBeforeCall(organizationId, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes the specified adaptive policy group and any associated policies and references (asynchronously)
     * Deletes the specified adaptive policy group and any associated policies and references
     * @param organizationId  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganizationAdaptivePolicyGroup_0Async(String organizationId, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganizationAdaptivePolicyGroup_0ValidateBeforeCall(organizationId, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganizationAdaptivePolicyPolicy_0
     * @param organizationId  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganizationAdaptivePolicyPolicy_0Call(String organizationId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/adaptivePolicy/policies/{id}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganizationAdaptivePolicyPolicy_0ValidateBeforeCall(String organizationId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling deleteOrganizationAdaptivePolicyPolicy_0(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOrganizationAdaptivePolicyPolicy_0(Async)");
        }

        return deleteOrganizationAdaptivePolicyPolicy_0Call(organizationId, id, _callback);

    }

    /**
     * Delete an Adaptive Policy
     * Delete an Adaptive Policy
     * @param organizationId  (required)
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganizationAdaptivePolicyPolicy_0(String organizationId, String id) throws ApiException {
        deleteOrganizationAdaptivePolicyPolicy_0WithHttpInfo(organizationId, id);
    }

    /**
     * Delete an Adaptive Policy
     * Delete an Adaptive Policy
     * @param organizationId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganizationAdaptivePolicyPolicy_0WithHttpInfo(String organizationId, String id) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganizationAdaptivePolicyPolicy_0ValidateBeforeCall(organizationId, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an Adaptive Policy (asynchronously)
     * Delete an Adaptive Policy
     * @param organizationId  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganizationAdaptivePolicyPolicy_0Async(String organizationId, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganizationAdaptivePolicyPolicy_0ValidateBeforeCall(organizationId, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganizationAdmin_0
     * @param organizationId  (required)
     * @param adminId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganizationAdmin_0Call(String organizationId, String adminId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/admins/{adminId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "adminId" + "}", localVarApiClient.escapeString(adminId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganizationAdmin_0ValidateBeforeCall(String organizationId, String adminId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling deleteOrganizationAdmin_0(Async)");
        }

        // verify the required parameter 'adminId' is set
        if (adminId == null) {
            throw new ApiException("Missing the required parameter 'adminId' when calling deleteOrganizationAdmin_0(Async)");
        }

        return deleteOrganizationAdmin_0Call(organizationId, adminId, _callback);

    }

    /**
     * Revoke all access for a dashboard administrator within this organization
     * Revoke all access for a dashboard administrator within this organization
     * @param organizationId  (required)
     * @param adminId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganizationAdmin_0(String organizationId, String adminId) throws ApiException {
        deleteOrganizationAdmin_0WithHttpInfo(organizationId, adminId);
    }

    /**
     * Revoke all access for a dashboard administrator within this organization
     * Revoke all access for a dashboard administrator within this organization
     * @param organizationId  (required)
     * @param adminId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganizationAdmin_0WithHttpInfo(String organizationId, String adminId) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganizationAdmin_0ValidateBeforeCall(organizationId, adminId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Revoke all access for a dashboard administrator within this organization (asynchronously)
     * Revoke all access for a dashboard administrator within this organization
     * @param organizationId  (required)
     * @param adminId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganizationAdmin_0Async(String organizationId, String adminId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganizationAdmin_0ValidateBeforeCall(organizationId, adminId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganizationAlertsProfile_0
     * @param organizationId  (required)
     * @param alertConfigId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganizationAlertsProfile_0Call(String organizationId, String alertConfigId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/alerts/profiles/{alertConfigId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "alertConfigId" + "}", localVarApiClient.escapeString(alertConfigId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganizationAlertsProfile_0ValidateBeforeCall(String organizationId, String alertConfigId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling deleteOrganizationAlertsProfile_0(Async)");
        }

        // verify the required parameter 'alertConfigId' is set
        if (alertConfigId == null) {
            throw new ApiException("Missing the required parameter 'alertConfigId' when calling deleteOrganizationAlertsProfile_0(Async)");
        }

        return deleteOrganizationAlertsProfile_0Call(organizationId, alertConfigId, _callback);

    }

    /**
     * Removes an organization-wide alert config
     * Removes an organization-wide alert config
     * @param organizationId  (required)
     * @param alertConfigId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganizationAlertsProfile_0(String organizationId, String alertConfigId) throws ApiException {
        deleteOrganizationAlertsProfile_0WithHttpInfo(organizationId, alertConfigId);
    }

    /**
     * Removes an organization-wide alert config
     * Removes an organization-wide alert config
     * @param organizationId  (required)
     * @param alertConfigId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganizationAlertsProfile_0WithHttpInfo(String organizationId, String alertConfigId) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganizationAlertsProfile_0ValidateBeforeCall(organizationId, alertConfigId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Removes an organization-wide alert config (asynchronously)
     * Removes an organization-wide alert config
     * @param organizationId  (required)
     * @param alertConfigId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganizationAlertsProfile_0Async(String organizationId, String alertConfigId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganizationAlertsProfile_0ValidateBeforeCall(organizationId, alertConfigId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganizationBrandingPolicy_0
     * @param organizationId  (required)
     * @param brandingPolicyId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganizationBrandingPolicy_0Call(String organizationId, String brandingPolicyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/brandingPolicies/{brandingPolicyId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "brandingPolicyId" + "}", localVarApiClient.escapeString(brandingPolicyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganizationBrandingPolicy_0ValidateBeforeCall(String organizationId, String brandingPolicyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling deleteOrganizationBrandingPolicy_0(Async)");
        }

        // verify the required parameter 'brandingPolicyId' is set
        if (brandingPolicyId == null) {
            throw new ApiException("Missing the required parameter 'brandingPolicyId' when calling deleteOrganizationBrandingPolicy_0(Async)");
        }

        return deleteOrganizationBrandingPolicy_0Call(organizationId, brandingPolicyId, _callback);

    }

    /**
     * Delete a branding policy
     * Delete a branding policy
     * @param organizationId  (required)
     * @param brandingPolicyId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganizationBrandingPolicy_0(String organizationId, String brandingPolicyId) throws ApiException {
        deleteOrganizationBrandingPolicy_0WithHttpInfo(organizationId, brandingPolicyId);
    }

    /**
     * Delete a branding policy
     * Delete a branding policy
     * @param organizationId  (required)
     * @param brandingPolicyId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganizationBrandingPolicy_0WithHttpInfo(String organizationId, String brandingPolicyId) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganizationBrandingPolicy_0ValidateBeforeCall(organizationId, brandingPolicyId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a branding policy (asynchronously)
     * Delete a branding policy
     * @param organizationId  (required)
     * @param brandingPolicyId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganizationBrandingPolicy_0Async(String organizationId, String brandingPolicyId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganizationBrandingPolicy_0ValidateBeforeCall(organizationId, brandingPolicyId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganizationCameraCustomAnalyticsArtifact_0
     * @param organizationId  (required)
     * @param artifactId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganizationCameraCustomAnalyticsArtifact_0Call(String organizationId, String artifactId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/camera/customAnalytics/artifacts/{artifactId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "artifactId" + "}", localVarApiClient.escapeString(artifactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganizationCameraCustomAnalyticsArtifact_0ValidateBeforeCall(String organizationId, String artifactId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling deleteOrganizationCameraCustomAnalyticsArtifact_0(Async)");
        }

        // verify the required parameter 'artifactId' is set
        if (artifactId == null) {
            throw new ApiException("Missing the required parameter 'artifactId' when calling deleteOrganizationCameraCustomAnalyticsArtifact_0(Async)");
        }

        return deleteOrganizationCameraCustomAnalyticsArtifact_0Call(organizationId, artifactId, _callback);

    }

    /**
     * Delete Custom Analytics Artifact
     * Delete Custom Analytics Artifact
     * @param organizationId  (required)
     * @param artifactId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganizationCameraCustomAnalyticsArtifact_0(String organizationId, String artifactId) throws ApiException {
        deleteOrganizationCameraCustomAnalyticsArtifact_0WithHttpInfo(organizationId, artifactId);
    }

    /**
     * Delete Custom Analytics Artifact
     * Delete Custom Analytics Artifact
     * @param organizationId  (required)
     * @param artifactId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganizationCameraCustomAnalyticsArtifact_0WithHttpInfo(String organizationId, String artifactId) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganizationCameraCustomAnalyticsArtifact_0ValidateBeforeCall(organizationId, artifactId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Custom Analytics Artifact (asynchronously)
     * Delete Custom Analytics Artifact
     * @param organizationId  (required)
     * @param artifactId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganizationCameraCustomAnalyticsArtifact_0Async(String organizationId, String artifactId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganizationCameraCustomAnalyticsArtifact_0ValidateBeforeCall(organizationId, artifactId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganizationConfigTemplate_0
     * @param organizationId  (required)
     * @param configTemplateId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganizationConfigTemplate_0Call(String organizationId, String configTemplateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/configTemplates/{configTemplateId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "configTemplateId" + "}", localVarApiClient.escapeString(configTemplateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganizationConfigTemplate_0ValidateBeforeCall(String organizationId, String configTemplateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling deleteOrganizationConfigTemplate_0(Async)");
        }

        // verify the required parameter 'configTemplateId' is set
        if (configTemplateId == null) {
            throw new ApiException("Missing the required parameter 'configTemplateId' when calling deleteOrganizationConfigTemplate_0(Async)");
        }

        return deleteOrganizationConfigTemplate_0Call(organizationId, configTemplateId, _callback);

    }

    /**
     * Remove a configuration template
     * Remove a configuration template
     * @param organizationId  (required)
     * @param configTemplateId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganizationConfigTemplate_0(String organizationId, String configTemplateId) throws ApiException {
        deleteOrganizationConfigTemplate_0WithHttpInfo(organizationId, configTemplateId);
    }

    /**
     * Remove a configuration template
     * Remove a configuration template
     * @param organizationId  (required)
     * @param configTemplateId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganizationConfigTemplate_0WithHttpInfo(String organizationId, String configTemplateId) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganizationConfigTemplate_0ValidateBeforeCall(organizationId, configTemplateId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a configuration template (asynchronously)
     * Remove a configuration template
     * @param organizationId  (required)
     * @param configTemplateId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganizationConfigTemplate_0Async(String organizationId, String configTemplateId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganizationConfigTemplate_0ValidateBeforeCall(organizationId, configTemplateId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganizationEarlyAccessFeaturesOptIn_0
     * @param organizationId  (required)
     * @param optInId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganizationEarlyAccessFeaturesOptIn_0Call(String organizationId, String optInId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/earlyAccess/features/optIns/{optInId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "optInId" + "}", localVarApiClient.escapeString(optInId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganizationEarlyAccessFeaturesOptIn_0ValidateBeforeCall(String organizationId, String optInId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling deleteOrganizationEarlyAccessFeaturesOptIn_0(Async)");
        }

        // verify the required parameter 'optInId' is set
        if (optInId == null) {
            throw new ApiException("Missing the required parameter 'optInId' when calling deleteOrganizationEarlyAccessFeaturesOptIn_0(Async)");
        }

        return deleteOrganizationEarlyAccessFeaturesOptIn_0Call(organizationId, optInId, _callback);

    }

    /**
     * Delete an early access feature opt-in
     * Delete an early access feature opt-in
     * @param organizationId  (required)
     * @param optInId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganizationEarlyAccessFeaturesOptIn_0(String organizationId, String optInId) throws ApiException {
        deleteOrganizationEarlyAccessFeaturesOptIn_0WithHttpInfo(organizationId, optInId);
    }

    /**
     * Delete an early access feature opt-in
     * Delete an early access feature opt-in
     * @param organizationId  (required)
     * @param optInId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganizationEarlyAccessFeaturesOptIn_0WithHttpInfo(String organizationId, String optInId) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganizationEarlyAccessFeaturesOptIn_0ValidateBeforeCall(organizationId, optInId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an early access feature opt-in (asynchronously)
     * Delete an early access feature opt-in
     * @param organizationId  (required)
     * @param optInId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganizationEarlyAccessFeaturesOptIn_0Async(String organizationId, String optInId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganizationEarlyAccessFeaturesOptIn_0ValidateBeforeCall(organizationId, optInId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganizationInsightMonitoredMediaServer_0
     * @param organizationId  (required)
     * @param monitoredMediaServerId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganizationInsightMonitoredMediaServer_0Call(String organizationId, String monitoredMediaServerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/insight/monitoredMediaServers/{monitoredMediaServerId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "monitoredMediaServerId" + "}", localVarApiClient.escapeString(monitoredMediaServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganizationInsightMonitoredMediaServer_0ValidateBeforeCall(String organizationId, String monitoredMediaServerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling deleteOrganizationInsightMonitoredMediaServer_0(Async)");
        }

        // verify the required parameter 'monitoredMediaServerId' is set
        if (monitoredMediaServerId == null) {
            throw new ApiException("Missing the required parameter 'monitoredMediaServerId' when calling deleteOrganizationInsightMonitoredMediaServer_0(Async)");
        }

        return deleteOrganizationInsightMonitoredMediaServer_0Call(organizationId, monitoredMediaServerId, _callback);

    }

    /**
     * Delete a monitored media server from this organization
     * Delete a monitored media server from this organization. Only valid for organizations with Meraki Insight.
     * @param organizationId  (required)
     * @param monitoredMediaServerId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganizationInsightMonitoredMediaServer_0(String organizationId, String monitoredMediaServerId) throws ApiException {
        deleteOrganizationInsightMonitoredMediaServer_0WithHttpInfo(organizationId, monitoredMediaServerId);
    }

    /**
     * Delete a monitored media server from this organization
     * Delete a monitored media server from this organization. Only valid for organizations with Meraki Insight.
     * @param organizationId  (required)
     * @param monitoredMediaServerId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganizationInsightMonitoredMediaServer_0WithHttpInfo(String organizationId, String monitoredMediaServerId) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganizationInsightMonitoredMediaServer_0ValidateBeforeCall(organizationId, monitoredMediaServerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a monitored media server from this organization (asynchronously)
     * Delete a monitored media server from this organization. Only valid for organizations with Meraki Insight.
     * @param organizationId  (required)
     * @param monitoredMediaServerId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganizationInsightMonitoredMediaServer_0Async(String organizationId, String monitoredMediaServerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganizationInsightMonitoredMediaServer_0ValidateBeforeCall(organizationId, monitoredMediaServerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganizationPolicyObject_0
     * @param organizationId  (required)
     * @param policyObjectId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganizationPolicyObject_0Call(String organizationId, String policyObjectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/policyObjects/{policyObjectId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "policyObjectId" + "}", localVarApiClient.escapeString(policyObjectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganizationPolicyObject_0ValidateBeforeCall(String organizationId, String policyObjectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling deleteOrganizationPolicyObject_0(Async)");
        }

        // verify the required parameter 'policyObjectId' is set
        if (policyObjectId == null) {
            throw new ApiException("Missing the required parameter 'policyObjectId' when calling deleteOrganizationPolicyObject_0(Async)");
        }

        return deleteOrganizationPolicyObject_0Call(organizationId, policyObjectId, _callback);

    }

    /**
     * Deletes a Policy Object.
     * Deletes a Policy Object.
     * @param organizationId  (required)
     * @param policyObjectId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganizationPolicyObject_0(String organizationId, String policyObjectId) throws ApiException {
        deleteOrganizationPolicyObject_0WithHttpInfo(organizationId, policyObjectId);
    }

    /**
     * Deletes a Policy Object.
     * Deletes a Policy Object.
     * @param organizationId  (required)
     * @param policyObjectId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganizationPolicyObject_0WithHttpInfo(String organizationId, String policyObjectId) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganizationPolicyObject_0ValidateBeforeCall(organizationId, policyObjectId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a Policy Object. (asynchronously)
     * Deletes a Policy Object.
     * @param organizationId  (required)
     * @param policyObjectId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganizationPolicyObject_0Async(String organizationId, String policyObjectId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganizationPolicyObject_0ValidateBeforeCall(organizationId, policyObjectId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganizationPolicyObjectsGroup_0
     * @param organizationId  (required)
     * @param policyObjectGroupId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganizationPolicyObjectsGroup_0Call(String organizationId, String policyObjectGroupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/policyObjects/groups/{policyObjectGroupId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "policyObjectGroupId" + "}", localVarApiClient.escapeString(policyObjectGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganizationPolicyObjectsGroup_0ValidateBeforeCall(String organizationId, String policyObjectGroupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling deleteOrganizationPolicyObjectsGroup_0(Async)");
        }

        // verify the required parameter 'policyObjectGroupId' is set
        if (policyObjectGroupId == null) {
            throw new ApiException("Missing the required parameter 'policyObjectGroupId' when calling deleteOrganizationPolicyObjectsGroup_0(Async)");
        }

        return deleteOrganizationPolicyObjectsGroup_0Call(organizationId, policyObjectGroupId, _callback);

    }

    /**
     * Deletes a Policy Object Group.
     * Deletes a Policy Object Group.
     * @param organizationId  (required)
     * @param policyObjectGroupId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganizationPolicyObjectsGroup_0(String organizationId, String policyObjectGroupId) throws ApiException {
        deleteOrganizationPolicyObjectsGroup_0WithHttpInfo(organizationId, policyObjectGroupId);
    }

    /**
     * Deletes a Policy Object Group.
     * Deletes a Policy Object Group.
     * @param organizationId  (required)
     * @param policyObjectGroupId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganizationPolicyObjectsGroup_0WithHttpInfo(String organizationId, String policyObjectGroupId) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganizationPolicyObjectsGroup_0ValidateBeforeCall(organizationId, policyObjectGroupId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a Policy Object Group. (asynchronously)
     * Deletes a Policy Object Group.
     * @param organizationId  (required)
     * @param policyObjectGroupId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganizationPolicyObjectsGroup_0Async(String organizationId, String policyObjectGroupId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganizationPolicyObjectsGroup_0ValidateBeforeCall(organizationId, policyObjectGroupId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganizationSamlIdp_0
     * @param organizationId  (required)
     * @param idpId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganizationSamlIdp_0Call(String organizationId, String idpId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/saml/idps/{idpId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "idpId" + "}", localVarApiClient.escapeString(idpId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganizationSamlIdp_0ValidateBeforeCall(String organizationId, String idpId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling deleteOrganizationSamlIdp_0(Async)");
        }

        // verify the required parameter 'idpId' is set
        if (idpId == null) {
            throw new ApiException("Missing the required parameter 'idpId' when calling deleteOrganizationSamlIdp_0(Async)");
        }

        return deleteOrganizationSamlIdp_0Call(organizationId, idpId, _callback);

    }

    /**
     * Remove a SAML IdP in your organization.
     * Remove a SAML IdP in your organization.
     * @param organizationId  (required)
     * @param idpId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganizationSamlIdp_0(String organizationId, String idpId) throws ApiException {
        deleteOrganizationSamlIdp_0WithHttpInfo(organizationId, idpId);
    }

    /**
     * Remove a SAML IdP in your organization.
     * Remove a SAML IdP in your organization.
     * @param organizationId  (required)
     * @param idpId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganizationSamlIdp_0WithHttpInfo(String organizationId, String idpId) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganizationSamlIdp_0ValidateBeforeCall(organizationId, idpId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a SAML IdP in your organization. (asynchronously)
     * Remove a SAML IdP in your organization.
     * @param organizationId  (required)
     * @param idpId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganizationSamlIdp_0Async(String organizationId, String idpId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganizationSamlIdp_0ValidateBeforeCall(organizationId, idpId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganizationSamlRole_0
     * @param organizationId  (required)
     * @param samlRoleId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganizationSamlRole_0Call(String organizationId, String samlRoleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/samlRoles/{samlRoleId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "samlRoleId" + "}", localVarApiClient.escapeString(samlRoleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganizationSamlRole_0ValidateBeforeCall(String organizationId, String samlRoleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling deleteOrganizationSamlRole_0(Async)");
        }

        // verify the required parameter 'samlRoleId' is set
        if (samlRoleId == null) {
            throw new ApiException("Missing the required parameter 'samlRoleId' when calling deleteOrganizationSamlRole_0(Async)");
        }

        return deleteOrganizationSamlRole_0Call(organizationId, samlRoleId, _callback);

    }

    /**
     * Remove a SAML role
     * Remove a SAML role
     * @param organizationId  (required)
     * @param samlRoleId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganizationSamlRole_0(String organizationId, String samlRoleId) throws ApiException {
        deleteOrganizationSamlRole_0WithHttpInfo(organizationId, samlRoleId);
    }

    /**
     * Remove a SAML role
     * Remove a SAML role
     * @param organizationId  (required)
     * @param samlRoleId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganizationSamlRole_0WithHttpInfo(String organizationId, String samlRoleId) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganizationSamlRole_0ValidateBeforeCall(organizationId, samlRoleId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a SAML role (asynchronously)
     * Remove a SAML role
     * @param organizationId  (required)
     * @param samlRoleId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganizationSamlRole_0Async(String organizationId, String samlRoleId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganizationSamlRole_0ValidateBeforeCall(organizationId, samlRoleId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganizationUser_0
     * @param organizationId  (required)
     * @param userId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganizationUser_0Call(String organizationId, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/users/{userId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganizationUser_0ValidateBeforeCall(String organizationId, String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling deleteOrganizationUser_0(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteOrganizationUser_0(Async)");
        }

        return deleteOrganizationUser_0Call(organizationId, userId, _callback);

    }

    /**
     * Delete a user and all of its authentication methods.
     * Delete a user and all of its authentication methods.
     * @param organizationId  (required)
     * @param userId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganizationUser_0(String organizationId, String userId) throws ApiException {
        deleteOrganizationUser_0WithHttpInfo(organizationId, userId);
    }

    /**
     * Delete a user and all of its authentication methods.
     * Delete a user and all of its authentication methods.
     * @param organizationId  (required)
     * @param userId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganizationUser_0WithHttpInfo(String organizationId, String userId) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganizationUser_0ValidateBeforeCall(organizationId, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a user and all of its authentication methods. (asynchronously)
     * Delete a user and all of its authentication methods.
     * @param organizationId  (required)
     * @param userId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganizationUser_0Async(String organizationId, String userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganizationUser_0ValidateBeforeCall(organizationId, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganization_0
     * @param organizationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganization_0Call(String organizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganization_0ValidateBeforeCall(String organizationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling deleteOrganization_0(Async)");
        }

        return deleteOrganization_0Call(organizationId, _callback);

    }

    /**
     * Delete an organization
     * Delete an organization
     * @param organizationId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganization_0(String organizationId) throws ApiException {
        deleteOrganization_0WithHttpInfo(organizationId);
    }

    /**
     * Delete an organization
     * Delete an organization
     * @param organizationId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganization_0WithHttpInfo(String organizationId) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganization_0ValidateBeforeCall(organizationId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an organization (asynchronously)
     * Delete an organization
     * @param organizationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganization_0Async(String organizationId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganization_0ValidateBeforeCall(organizationId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDeviceApplianceUplinksSettings_0
     * @param serial  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceApplianceUplinksSettings_0Call(String serial, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/devices/{serial}/appliance/uplinks/settings"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeviceApplianceUplinksSettings_0ValidateBeforeCall(String serial, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling getDeviceApplianceUplinksSettings_0(Async)");
        }

        return getDeviceApplianceUplinksSettings_0Call(serial, _callback);

    }

    /**
     * Return the uplink settings for an MX appliance
     * Return the uplink settings for an MX appliance
     * @param serial  (required)
     * @return GetDeviceApplianceUplinksSettings200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetDeviceApplianceUplinksSettings200Response getDeviceApplianceUplinksSettings_0(String serial) throws ApiException {
        ApiResponse<GetDeviceApplianceUplinksSettings200Response> localVarResp = getDeviceApplianceUplinksSettings_0WithHttpInfo(serial);
        return localVarResp.getData();
    }

    /**
     * Return the uplink settings for an MX appliance
     * Return the uplink settings for an MX appliance
     * @param serial  (required)
     * @return ApiResponse&lt;GetDeviceApplianceUplinksSettings200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDeviceApplianceUplinksSettings200Response> getDeviceApplianceUplinksSettings_0WithHttpInfo(String serial) throws ApiException {
        okhttp3.Call localVarCall = getDeviceApplianceUplinksSettings_0ValidateBeforeCall(serial, null);
        Type localVarReturnType = new TypeToken<GetDeviceApplianceUplinksSettings200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the uplink settings for an MX appliance (asynchronously)
     * Return the uplink settings for an MX appliance
     * @param serial  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceApplianceUplinksSettings_0Async(String serial, final ApiCallback<GetDeviceApplianceUplinksSettings200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeviceApplianceUplinksSettings_0ValidateBeforeCall(serial, _callback);
        Type localVarReturnType = new TypeToken<GetDeviceApplianceUplinksSettings200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDeviceCameraCustomAnalytics_0
     * @param serial  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceCameraCustomAnalytics_0Call(String serial, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/devices/{serial}/camera/customAnalytics"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeviceCameraCustomAnalytics_0ValidateBeforeCall(String serial, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling getDeviceCameraCustomAnalytics_0(Async)");
        }

        return getDeviceCameraCustomAnalytics_0Call(serial, _callback);

    }

    /**
     * Return custom analytics settings for a camera
     * Return custom analytics settings for a camera
     * @param serial  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getDeviceCameraCustomAnalytics_0(String serial) throws ApiException {
        ApiResponse<Object> localVarResp = getDeviceCameraCustomAnalytics_0WithHttpInfo(serial);
        return localVarResp.getData();
    }

    /**
     * Return custom analytics settings for a camera
     * Return custom analytics settings for a camera
     * @param serial  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getDeviceCameraCustomAnalytics_0WithHttpInfo(String serial) throws ApiException {
        okhttp3.Call localVarCall = getDeviceCameraCustomAnalytics_0ValidateBeforeCall(serial, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return custom analytics settings for a camera (asynchronously)
     * Return custom analytics settings for a camera
     * @param serial  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceCameraCustomAnalytics_0Async(String serial, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeviceCameraCustomAnalytics_0ValidateBeforeCall(serial, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDeviceCameraQualityAndRetention_0
     * @param serial  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceCameraQualityAndRetention_0Call(String serial, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/devices/{serial}/camera/qualityAndRetention"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeviceCameraQualityAndRetention_0ValidateBeforeCall(String serial, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling getDeviceCameraQualityAndRetention_0(Async)");
        }

        return getDeviceCameraQualityAndRetention_0Call(serial, _callback);

    }

    /**
     * Returns quality and retention settings for the given camera
     * Returns quality and retention settings for the given camera
     * @param serial  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getDeviceCameraQualityAndRetention_0(String serial) throws ApiException {
        ApiResponse<Object> localVarResp = getDeviceCameraQualityAndRetention_0WithHttpInfo(serial);
        return localVarResp.getData();
    }

    /**
     * Returns quality and retention settings for the given camera
     * Returns quality and retention settings for the given camera
     * @param serial  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getDeviceCameraQualityAndRetention_0WithHttpInfo(String serial) throws ApiException {
        okhttp3.Call localVarCall = getDeviceCameraQualityAndRetention_0ValidateBeforeCall(serial, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns quality and retention settings for the given camera (asynchronously)
     * Returns quality and retention settings for the given camera
     * @param serial  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceCameraQualityAndRetention_0Async(String serial, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeviceCameraQualityAndRetention_0ValidateBeforeCall(serial, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDeviceCameraSenseObjectDetectionModels_0
     * @param serial  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceCameraSenseObjectDetectionModels_0Call(String serial, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/devices/{serial}/camera/sense/objectDetectionModels"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeviceCameraSenseObjectDetectionModels_0ValidateBeforeCall(String serial, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling getDeviceCameraSenseObjectDetectionModels_0(Async)");
        }

        return getDeviceCameraSenseObjectDetectionModels_0Call(serial, _callback);

    }

    /**
     * Returns the MV Sense object detection model list for the given camera
     * Returns the MV Sense object detection model list for the given camera
     * @param serial  (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getDeviceCameraSenseObjectDetectionModels_0(String serial) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getDeviceCameraSenseObjectDetectionModels_0WithHttpInfo(serial);
        return localVarResp.getData();
    }

    /**
     * Returns the MV Sense object detection model list for the given camera
     * Returns the MV Sense object detection model list for the given camera
     * @param serial  (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getDeviceCameraSenseObjectDetectionModels_0WithHttpInfo(String serial) throws ApiException {
        okhttp3.Call localVarCall = getDeviceCameraSenseObjectDetectionModels_0ValidateBeforeCall(serial, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the MV Sense object detection model list for the given camera (asynchronously)
     * Returns the MV Sense object detection model list for the given camera
     * @param serial  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceCameraSenseObjectDetectionModels_0Async(String serial, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeviceCameraSenseObjectDetectionModels_0ValidateBeforeCall(serial, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDeviceCameraSense_0
     * @param serial  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceCameraSense_0Call(String serial, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/devices/{serial}/camera/sense"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeviceCameraSense_0ValidateBeforeCall(String serial, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling getDeviceCameraSense_0(Async)");
        }

        return getDeviceCameraSense_0Call(serial, _callback);

    }

    /**
     * Returns sense settings for a given camera
     * Returns sense settings for a given camera
     * @param serial  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getDeviceCameraSense_0(String serial) throws ApiException {
        ApiResponse<Object> localVarResp = getDeviceCameraSense_0WithHttpInfo(serial);
        return localVarResp.getData();
    }

    /**
     * Returns sense settings for a given camera
     * Returns sense settings for a given camera
     * @param serial  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getDeviceCameraSense_0WithHttpInfo(String serial) throws ApiException {
        okhttp3.Call localVarCall = getDeviceCameraSense_0ValidateBeforeCall(serial, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns sense settings for a given camera (asynchronously)
     * Returns sense settings for a given camera
     * @param serial  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceCameraSense_0Async(String serial, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeviceCameraSense_0ValidateBeforeCall(serial, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDeviceCameraVideoLink_0
     * @param serial  (required)
     * @param timestamp [optional] The video link will start at this time. The timestamp should be a string in ISO8601 format. If no timestamp is specified, we will assume current time. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceCameraVideoLink_0Call(String serial, OffsetDateTime timestamp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/devices/{serial}/camera/videoLink"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timestamp", timestamp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeviceCameraVideoLink_0ValidateBeforeCall(String serial, OffsetDateTime timestamp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling getDeviceCameraVideoLink_0(Async)");
        }

        return getDeviceCameraVideoLink_0Call(serial, timestamp, _callback);

    }

    /**
     * Returns video link to the specified camera
     * Returns video link to the specified camera. If a timestamp is supplied, it links to that timestamp.
     * @param serial  (required)
     * @param timestamp [optional] The video link will start at this time. The timestamp should be a string in ISO8601 format. If no timestamp is specified, we will assume current time. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getDeviceCameraVideoLink_0(String serial, OffsetDateTime timestamp) throws ApiException {
        ApiResponse<Object> localVarResp = getDeviceCameraVideoLink_0WithHttpInfo(serial, timestamp);
        return localVarResp.getData();
    }

    /**
     * Returns video link to the specified camera
     * Returns video link to the specified camera. If a timestamp is supplied, it links to that timestamp.
     * @param serial  (required)
     * @param timestamp [optional] The video link will start at this time. The timestamp should be a string in ISO8601 format. If no timestamp is specified, we will assume current time. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getDeviceCameraVideoLink_0WithHttpInfo(String serial, OffsetDateTime timestamp) throws ApiException {
        okhttp3.Call localVarCall = getDeviceCameraVideoLink_0ValidateBeforeCall(serial, timestamp, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns video link to the specified camera (asynchronously)
     * Returns video link to the specified camera. If a timestamp is supplied, it links to that timestamp.
     * @param serial  (required)
     * @param timestamp [optional] The video link will start at this time. The timestamp should be a string in ISO8601 format. If no timestamp is specified, we will assume current time. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceCameraVideoLink_0Async(String serial, OffsetDateTime timestamp, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeviceCameraVideoLink_0ValidateBeforeCall(serial, timestamp, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDeviceCameraVideoSettings_0
     * @param serial  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceCameraVideoSettings_0Call(String serial, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/devices/{serial}/camera/video/settings"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeviceCameraVideoSettings_0ValidateBeforeCall(String serial, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling getDeviceCameraVideoSettings_0(Async)");
        }

        return getDeviceCameraVideoSettings_0Call(serial, _callback);

    }

    /**
     * Returns video settings for the given camera
     * Returns video settings for the given camera
     * @param serial  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getDeviceCameraVideoSettings_0(String serial) throws ApiException {
        ApiResponse<Object> localVarResp = getDeviceCameraVideoSettings_0WithHttpInfo(serial);
        return localVarResp.getData();
    }

    /**
     * Returns video settings for the given camera
     * Returns video settings for the given camera
     * @param serial  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getDeviceCameraVideoSettings_0WithHttpInfo(String serial) throws ApiException {
        okhttp3.Call localVarCall = getDeviceCameraVideoSettings_0ValidateBeforeCall(serial, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns video settings for the given camera (asynchronously)
     * Returns video settings for the given camera
     * @param serial  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceCameraVideoSettings_0Async(String serial, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeviceCameraVideoSettings_0ValidateBeforeCall(serial, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDeviceCameraWirelessProfiles_0
     * @param serial  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceCameraWirelessProfiles_0Call(String serial, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/devices/{serial}/camera/wirelessProfiles"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeviceCameraWirelessProfiles_0ValidateBeforeCall(String serial, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling getDeviceCameraWirelessProfiles_0(Async)");
        }

        return getDeviceCameraWirelessProfiles_0Call(serial, _callback);

    }

    /**
     * Returns wireless profile assigned to the given camera
     * Returns wireless profile assigned to the given camera
     * @param serial  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getDeviceCameraWirelessProfiles_0(String serial) throws ApiException {
        ApiResponse<Object> localVarResp = getDeviceCameraWirelessProfiles_0WithHttpInfo(serial);
        return localVarResp.getData();
    }

    /**
     * Returns wireless profile assigned to the given camera
     * Returns wireless profile assigned to the given camera
     * @param serial  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getDeviceCameraWirelessProfiles_0WithHttpInfo(String serial) throws ApiException {
        okhttp3.Call localVarCall = getDeviceCameraWirelessProfiles_0ValidateBeforeCall(serial, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns wireless profile assigned to the given camera (asynchronously)
     * Returns wireless profile assigned to the given camera
     * @param serial  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceCameraWirelessProfiles_0Async(String serial, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeviceCameraWirelessProfiles_0ValidateBeforeCall(serial, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDeviceCellularGatewayLan_0
     * @param serial  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceCellularGatewayLan_0Call(String serial, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/devices/{serial}/cellularGateway/lan"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeviceCellularGatewayLan_0ValidateBeforeCall(String serial, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling getDeviceCellularGatewayLan_0(Async)");
        }

        return getDeviceCellularGatewayLan_0Call(serial, _callback);

    }

    /**
     * Show the LAN Settings of a MG
     * Show the LAN Settings of a MG
     * @param serial  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getDeviceCellularGatewayLan_0(String serial) throws ApiException {
        ApiResponse<Object> localVarResp = getDeviceCellularGatewayLan_0WithHttpInfo(serial);
        return localVarResp.getData();
    }

    /**
     * Show the LAN Settings of a MG
     * Show the LAN Settings of a MG
     * @param serial  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getDeviceCellularGatewayLan_0WithHttpInfo(String serial) throws ApiException {
        okhttp3.Call localVarCall = getDeviceCellularGatewayLan_0ValidateBeforeCall(serial, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Show the LAN Settings of a MG (asynchronously)
     * Show the LAN Settings of a MG
     * @param serial  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceCellularGatewayLan_0Async(String serial, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeviceCellularGatewayLan_0ValidateBeforeCall(serial, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDeviceCellularGatewayPortForwardingRules_0
     * @param serial  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceCellularGatewayPortForwardingRules_0Call(String serial, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/devices/{serial}/cellularGateway/portForwardingRules"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeviceCellularGatewayPortForwardingRules_0ValidateBeforeCall(String serial, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling getDeviceCellularGatewayPortForwardingRules_0(Async)");
        }

        return getDeviceCellularGatewayPortForwardingRules_0Call(serial, _callback);

    }

    /**
     * Returns the port forwarding rules for a single MG.
     * Returns the port forwarding rules for a single MG.
     * @param serial  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getDeviceCellularGatewayPortForwardingRules_0(String serial) throws ApiException {
        ApiResponse<Object> localVarResp = getDeviceCellularGatewayPortForwardingRules_0WithHttpInfo(serial);
        return localVarResp.getData();
    }

    /**
     * Returns the port forwarding rules for a single MG.
     * Returns the port forwarding rules for a single MG.
     * @param serial  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getDeviceCellularGatewayPortForwardingRules_0WithHttpInfo(String serial) throws ApiException {
        okhttp3.Call localVarCall = getDeviceCellularGatewayPortForwardingRules_0ValidateBeforeCall(serial, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the port forwarding rules for a single MG. (asynchronously)
     * Returns the port forwarding rules for a single MG.
     * @param serial  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceCellularGatewayPortForwardingRules_0Async(String serial, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeviceCellularGatewayPortForwardingRules_0ValidateBeforeCall(serial, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDeviceCellularSims_0
     * @param serial  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceCellularSims_0Call(String serial, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/devices/{serial}/cellular/sims"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeviceCellularSims_0ValidateBeforeCall(String serial, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling getDeviceCellularSims_0(Async)");
        }

        return getDeviceCellularSims_0Call(serial, _callback);

    }

    /**
     * Return the SIM and APN configurations for a cellular device.
     * Return the SIM and APN configurations for a cellular device.
     * @param serial  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getDeviceCellularSims_0(String serial) throws ApiException {
        ApiResponse<Object> localVarResp = getDeviceCellularSims_0WithHttpInfo(serial);
        return localVarResp.getData();
    }

    /**
     * Return the SIM and APN configurations for a cellular device.
     * Return the SIM and APN configurations for a cellular device.
     * @param serial  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getDeviceCellularSims_0WithHttpInfo(String serial) throws ApiException {
        okhttp3.Call localVarCall = getDeviceCellularSims_0ValidateBeforeCall(serial, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the SIM and APN configurations for a cellular device. (asynchronously)
     * Return the SIM and APN configurations for a cellular device.
     * @param serial  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceCellularSims_0Async(String serial, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeviceCellularSims_0ValidateBeforeCall(serial, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDeviceManagementInterface_0
     * @param serial  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceManagementInterface_0Call(String serial, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/devices/{serial}/managementInterface"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeviceManagementInterface_0ValidateBeforeCall(String serial, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling getDeviceManagementInterface_0(Async)");
        }

        return getDeviceManagementInterface_0Call(serial, _callback);

    }

    /**
     * Return the management interface settings for a device
     * Return the management interface settings for a device
     * @param serial  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getDeviceManagementInterface_0(String serial) throws ApiException {
        ApiResponse<Object> localVarResp = getDeviceManagementInterface_0WithHttpInfo(serial);
        return localVarResp.getData();
    }

    /**
     * Return the management interface settings for a device
     * Return the management interface settings for a device
     * @param serial  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getDeviceManagementInterface_0WithHttpInfo(String serial) throws ApiException {
        okhttp3.Call localVarCall = getDeviceManagementInterface_0ValidateBeforeCall(serial, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the management interface settings for a device (asynchronously)
     * Return the management interface settings for a device
     * @param serial  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceManagementInterface_0Async(String serial, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeviceManagementInterface_0ValidateBeforeCall(serial, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDeviceSensorRelationships_0
     * @param serial  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceSensorRelationships_0Call(String serial, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/devices/{serial}/sensor/relationships"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeviceSensorRelationships_0ValidateBeforeCall(String serial, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling getDeviceSensorRelationships_0(Async)");
        }

        return getDeviceSensorRelationships_0Call(serial, _callback);

    }

    /**
     * List the sensor roles for a given sensor or camera device.
     * List the sensor roles for a given sensor or camera device.
     * @param serial  (required)
     * @return List&lt;GetDeviceSensorRelationships200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetDeviceSensorRelationships200ResponseInner> getDeviceSensorRelationships_0(String serial) throws ApiException {
        ApiResponse<List<GetDeviceSensorRelationships200ResponseInner>> localVarResp = getDeviceSensorRelationships_0WithHttpInfo(serial);
        return localVarResp.getData();
    }

    /**
     * List the sensor roles for a given sensor or camera device.
     * List the sensor roles for a given sensor or camera device.
     * @param serial  (required)
     * @return ApiResponse&lt;List&lt;GetDeviceSensorRelationships200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetDeviceSensorRelationships200ResponseInner>> getDeviceSensorRelationships_0WithHttpInfo(String serial) throws ApiException {
        okhttp3.Call localVarCall = getDeviceSensorRelationships_0ValidateBeforeCall(serial, null);
        Type localVarReturnType = new TypeToken<List<GetDeviceSensorRelationships200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the sensor roles for a given sensor or camera device. (asynchronously)
     * List the sensor roles for a given sensor or camera device.
     * @param serial  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceSensorRelationships_0Async(String serial, final ApiCallback<List<GetDeviceSensorRelationships200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeviceSensorRelationships_0ValidateBeforeCall(serial, _callback);
        Type localVarReturnType = new TypeToken<List<GetDeviceSensorRelationships200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDeviceSwitchPort_0
     * @param serial  (required)
     * @param portId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceSwitchPort_0Call(String serial, String portId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/devices/{serial}/switch/ports/{portId}"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()))
            .replace("{" + "portId" + "}", localVarApiClient.escapeString(portId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeviceSwitchPort_0ValidateBeforeCall(String serial, String portId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling getDeviceSwitchPort_0(Async)");
        }

        // verify the required parameter 'portId' is set
        if (portId == null) {
            throw new ApiException("Missing the required parameter 'portId' when calling getDeviceSwitchPort_0(Async)");
        }

        return getDeviceSwitchPort_0Call(serial, portId, _callback);

    }

    /**
     * Return a switch port
     * Return a switch port
     * @param serial  (required)
     * @param portId  (required)
     * @return GetDeviceSwitchPorts200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetDeviceSwitchPorts200ResponseInner getDeviceSwitchPort_0(String serial, String portId) throws ApiException {
        ApiResponse<GetDeviceSwitchPorts200ResponseInner> localVarResp = getDeviceSwitchPort_0WithHttpInfo(serial, portId);
        return localVarResp.getData();
    }

    /**
     * Return a switch port
     * Return a switch port
     * @param serial  (required)
     * @param portId  (required)
     * @return ApiResponse&lt;GetDeviceSwitchPorts200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDeviceSwitchPorts200ResponseInner> getDeviceSwitchPort_0WithHttpInfo(String serial, String portId) throws ApiException {
        okhttp3.Call localVarCall = getDeviceSwitchPort_0ValidateBeforeCall(serial, portId, null);
        Type localVarReturnType = new TypeToken<GetDeviceSwitchPorts200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a switch port (asynchronously)
     * Return a switch port
     * @param serial  (required)
     * @param portId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceSwitchPort_0Async(String serial, String portId, final ApiCallback<GetDeviceSwitchPorts200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeviceSwitchPort_0ValidateBeforeCall(serial, portId, _callback);
        Type localVarReturnType = new TypeToken<GetDeviceSwitchPorts200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDeviceSwitchPorts_0
     * @param serial  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceSwitchPorts_0Call(String serial, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/devices/{serial}/switch/ports"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeviceSwitchPorts_0ValidateBeforeCall(String serial, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling getDeviceSwitchPorts_0(Async)");
        }

        return getDeviceSwitchPorts_0Call(serial, _callback);

    }

    /**
     * List the switch ports for a switch
     * List the switch ports for a switch
     * @param serial  (required)
     * @return List&lt;GetDeviceSwitchPorts200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetDeviceSwitchPorts200ResponseInner> getDeviceSwitchPorts_0(String serial) throws ApiException {
        ApiResponse<List<GetDeviceSwitchPorts200ResponseInner>> localVarResp = getDeviceSwitchPorts_0WithHttpInfo(serial);
        return localVarResp.getData();
    }

    /**
     * List the switch ports for a switch
     * List the switch ports for a switch
     * @param serial  (required)
     * @return ApiResponse&lt;List&lt;GetDeviceSwitchPorts200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetDeviceSwitchPorts200ResponseInner>> getDeviceSwitchPorts_0WithHttpInfo(String serial) throws ApiException {
        okhttp3.Call localVarCall = getDeviceSwitchPorts_0ValidateBeforeCall(serial, null);
        Type localVarReturnType = new TypeToken<List<GetDeviceSwitchPorts200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the switch ports for a switch (asynchronously)
     * List the switch ports for a switch
     * @param serial  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceSwitchPorts_0Async(String serial, final ApiCallback<List<GetDeviceSwitchPorts200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeviceSwitchPorts_0ValidateBeforeCall(serial, _callback);
        Type localVarReturnType = new TypeToken<List<GetDeviceSwitchPorts200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDeviceSwitchRoutingInterfaceDhcp_0
     * @param serial  (required)
     * @param interfaceId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceSwitchRoutingInterfaceDhcp_0Call(String serial, String interfaceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/devices/{serial}/switch/routing/interfaces/{interfaceId}/dhcp"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()))
            .replace("{" + "interfaceId" + "}", localVarApiClient.escapeString(interfaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeviceSwitchRoutingInterfaceDhcp_0ValidateBeforeCall(String serial, String interfaceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling getDeviceSwitchRoutingInterfaceDhcp_0(Async)");
        }

        // verify the required parameter 'interfaceId' is set
        if (interfaceId == null) {
            throw new ApiException("Missing the required parameter 'interfaceId' when calling getDeviceSwitchRoutingInterfaceDhcp_0(Async)");
        }

        return getDeviceSwitchRoutingInterfaceDhcp_0Call(serial, interfaceId, _callback);

    }

    /**
     * Return a layer 3 interface DHCP configuration for a switch
     * Return a layer 3 interface DHCP configuration for a switch
     * @param serial  (required)
     * @param interfaceId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getDeviceSwitchRoutingInterfaceDhcp_0(String serial, String interfaceId) throws ApiException {
        ApiResponse<Object> localVarResp = getDeviceSwitchRoutingInterfaceDhcp_0WithHttpInfo(serial, interfaceId);
        return localVarResp.getData();
    }

    /**
     * Return a layer 3 interface DHCP configuration for a switch
     * Return a layer 3 interface DHCP configuration for a switch
     * @param serial  (required)
     * @param interfaceId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getDeviceSwitchRoutingInterfaceDhcp_0WithHttpInfo(String serial, String interfaceId) throws ApiException {
        okhttp3.Call localVarCall = getDeviceSwitchRoutingInterfaceDhcp_0ValidateBeforeCall(serial, interfaceId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a layer 3 interface DHCP configuration for a switch (asynchronously)
     * Return a layer 3 interface DHCP configuration for a switch
     * @param serial  (required)
     * @param interfaceId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceSwitchRoutingInterfaceDhcp_0Async(String serial, String interfaceId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeviceSwitchRoutingInterfaceDhcp_0ValidateBeforeCall(serial, interfaceId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDeviceSwitchRoutingInterface_0
     * @param serial  (required)
     * @param interfaceId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceSwitchRoutingInterface_0Call(String serial, String interfaceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/devices/{serial}/switch/routing/interfaces/{interfaceId}"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()))
            .replace("{" + "interfaceId" + "}", localVarApiClient.escapeString(interfaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeviceSwitchRoutingInterface_0ValidateBeforeCall(String serial, String interfaceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling getDeviceSwitchRoutingInterface_0(Async)");
        }

        // verify the required parameter 'interfaceId' is set
        if (interfaceId == null) {
            throw new ApiException("Missing the required parameter 'interfaceId' when calling getDeviceSwitchRoutingInterface_0(Async)");
        }

        return getDeviceSwitchRoutingInterface_0Call(serial, interfaceId, _callback);

    }

    /**
     * Return a layer 3 interface for a switch
     * Return a layer 3 interface for a switch
     * @param serial  (required)
     * @param interfaceId  (required)
     * @return GetDeviceSwitchRoutingInterfaces200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetDeviceSwitchRoutingInterfaces200ResponseInner getDeviceSwitchRoutingInterface_0(String serial, String interfaceId) throws ApiException {
        ApiResponse<GetDeviceSwitchRoutingInterfaces200ResponseInner> localVarResp = getDeviceSwitchRoutingInterface_0WithHttpInfo(serial, interfaceId);
        return localVarResp.getData();
    }

    /**
     * Return a layer 3 interface for a switch
     * Return a layer 3 interface for a switch
     * @param serial  (required)
     * @param interfaceId  (required)
     * @return ApiResponse&lt;GetDeviceSwitchRoutingInterfaces200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDeviceSwitchRoutingInterfaces200ResponseInner> getDeviceSwitchRoutingInterface_0WithHttpInfo(String serial, String interfaceId) throws ApiException {
        okhttp3.Call localVarCall = getDeviceSwitchRoutingInterface_0ValidateBeforeCall(serial, interfaceId, null);
        Type localVarReturnType = new TypeToken<GetDeviceSwitchRoutingInterfaces200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a layer 3 interface for a switch (asynchronously)
     * Return a layer 3 interface for a switch
     * @param serial  (required)
     * @param interfaceId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceSwitchRoutingInterface_0Async(String serial, String interfaceId, final ApiCallback<GetDeviceSwitchRoutingInterfaces200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeviceSwitchRoutingInterface_0ValidateBeforeCall(serial, interfaceId, _callback);
        Type localVarReturnType = new TypeToken<GetDeviceSwitchRoutingInterfaces200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDeviceSwitchRoutingInterfaces_0
     * @param serial  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceSwitchRoutingInterfaces_0Call(String serial, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/devices/{serial}/switch/routing/interfaces"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeviceSwitchRoutingInterfaces_0ValidateBeforeCall(String serial, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling getDeviceSwitchRoutingInterfaces_0(Async)");
        }

        return getDeviceSwitchRoutingInterfaces_0Call(serial, _callback);

    }

    /**
     * List layer 3 interfaces for a switch
     * List layer 3 interfaces for a switch. Those for a stack may be found under switch stack routing.
     * @param serial  (required)
     * @return List&lt;GetDeviceSwitchRoutingInterfaces200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetDeviceSwitchRoutingInterfaces200ResponseInner> getDeviceSwitchRoutingInterfaces_0(String serial) throws ApiException {
        ApiResponse<List<GetDeviceSwitchRoutingInterfaces200ResponseInner>> localVarResp = getDeviceSwitchRoutingInterfaces_0WithHttpInfo(serial);
        return localVarResp.getData();
    }

    /**
     * List layer 3 interfaces for a switch
     * List layer 3 interfaces for a switch. Those for a stack may be found under switch stack routing.
     * @param serial  (required)
     * @return ApiResponse&lt;List&lt;GetDeviceSwitchRoutingInterfaces200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetDeviceSwitchRoutingInterfaces200ResponseInner>> getDeviceSwitchRoutingInterfaces_0WithHttpInfo(String serial) throws ApiException {
        okhttp3.Call localVarCall = getDeviceSwitchRoutingInterfaces_0ValidateBeforeCall(serial, null);
        Type localVarReturnType = new TypeToken<List<GetDeviceSwitchRoutingInterfaces200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List layer 3 interfaces for a switch (asynchronously)
     * List layer 3 interfaces for a switch. Those for a stack may be found under switch stack routing.
     * @param serial  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceSwitchRoutingInterfaces_0Async(String serial, final ApiCallback<List<GetDeviceSwitchRoutingInterfaces200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeviceSwitchRoutingInterfaces_0ValidateBeforeCall(serial, _callback);
        Type localVarReturnType = new TypeToken<List<GetDeviceSwitchRoutingInterfaces200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDeviceSwitchRoutingStaticRoute_0
     * @param serial  (required)
     * @param staticRouteId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceSwitchRoutingStaticRoute_0Call(String serial, String staticRouteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/devices/{serial}/switch/routing/staticRoutes/{staticRouteId}"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()))
            .replace("{" + "staticRouteId" + "}", localVarApiClient.escapeString(staticRouteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeviceSwitchRoutingStaticRoute_0ValidateBeforeCall(String serial, String staticRouteId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling getDeviceSwitchRoutingStaticRoute_0(Async)");
        }

        // verify the required parameter 'staticRouteId' is set
        if (staticRouteId == null) {
            throw new ApiException("Missing the required parameter 'staticRouteId' when calling getDeviceSwitchRoutingStaticRoute_0(Async)");
        }

        return getDeviceSwitchRoutingStaticRoute_0Call(serial, staticRouteId, _callback);

    }

    /**
     * Return a layer 3 static route for a switch
     * Return a layer 3 static route for a switch
     * @param serial  (required)
     * @param staticRouteId  (required)
     * @return GetDeviceSwitchRoutingStaticRoute200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetDeviceSwitchRoutingStaticRoute200Response getDeviceSwitchRoutingStaticRoute_0(String serial, String staticRouteId) throws ApiException {
        ApiResponse<GetDeviceSwitchRoutingStaticRoute200Response> localVarResp = getDeviceSwitchRoutingStaticRoute_0WithHttpInfo(serial, staticRouteId);
        return localVarResp.getData();
    }

    /**
     * Return a layer 3 static route for a switch
     * Return a layer 3 static route for a switch
     * @param serial  (required)
     * @param staticRouteId  (required)
     * @return ApiResponse&lt;GetDeviceSwitchRoutingStaticRoute200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDeviceSwitchRoutingStaticRoute200Response> getDeviceSwitchRoutingStaticRoute_0WithHttpInfo(String serial, String staticRouteId) throws ApiException {
        okhttp3.Call localVarCall = getDeviceSwitchRoutingStaticRoute_0ValidateBeforeCall(serial, staticRouteId, null);
        Type localVarReturnType = new TypeToken<GetDeviceSwitchRoutingStaticRoute200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a layer 3 static route for a switch (asynchronously)
     * Return a layer 3 static route for a switch
     * @param serial  (required)
     * @param staticRouteId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceSwitchRoutingStaticRoute_0Async(String serial, String staticRouteId, final ApiCallback<GetDeviceSwitchRoutingStaticRoute200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeviceSwitchRoutingStaticRoute_0ValidateBeforeCall(serial, staticRouteId, _callback);
        Type localVarReturnType = new TypeToken<GetDeviceSwitchRoutingStaticRoute200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDeviceSwitchRoutingStaticRoutes_0
     * @param serial  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceSwitchRoutingStaticRoutes_0Call(String serial, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/devices/{serial}/switch/routing/staticRoutes"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeviceSwitchRoutingStaticRoutes_0ValidateBeforeCall(String serial, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling getDeviceSwitchRoutingStaticRoutes_0(Async)");
        }

        return getDeviceSwitchRoutingStaticRoutes_0Call(serial, _callback);

    }

    /**
     * List layer 3 static routes for a switch
     * List layer 3 static routes for a switch
     * @param serial  (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getDeviceSwitchRoutingStaticRoutes_0(String serial) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getDeviceSwitchRoutingStaticRoutes_0WithHttpInfo(serial);
        return localVarResp.getData();
    }

    /**
     * List layer 3 static routes for a switch
     * List layer 3 static routes for a switch
     * @param serial  (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getDeviceSwitchRoutingStaticRoutes_0WithHttpInfo(String serial) throws ApiException {
        okhttp3.Call localVarCall = getDeviceSwitchRoutingStaticRoutes_0ValidateBeforeCall(serial, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List layer 3 static routes for a switch (asynchronously)
     * List layer 3 static routes for a switch
     * @param serial  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceSwitchRoutingStaticRoutes_0Async(String serial, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeviceSwitchRoutingStaticRoutes_0ValidateBeforeCall(serial, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDeviceSwitchWarmSpare_0
     * @param serial  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceSwitchWarmSpare_0Call(String serial, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/devices/{serial}/switch/warmSpare"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeviceSwitchWarmSpare_0ValidateBeforeCall(String serial, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling getDeviceSwitchWarmSpare_0(Async)");
        }

        return getDeviceSwitchWarmSpare_0Call(serial, _callback);

    }

    /**
     * Return warm spare configuration for a switch
     * Return warm spare configuration for a switch
     * @param serial  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getDeviceSwitchWarmSpare_0(String serial) throws ApiException {
        ApiResponse<Object> localVarResp = getDeviceSwitchWarmSpare_0WithHttpInfo(serial);
        return localVarResp.getData();
    }

    /**
     * Return warm spare configuration for a switch
     * Return warm spare configuration for a switch
     * @param serial  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getDeviceSwitchWarmSpare_0WithHttpInfo(String serial) throws ApiException {
        okhttp3.Call localVarCall = getDeviceSwitchWarmSpare_0ValidateBeforeCall(serial, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return warm spare configuration for a switch (asynchronously)
     * Return warm spare configuration for a switch
     * @param serial  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceSwitchWarmSpare_0Async(String serial, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeviceSwitchWarmSpare_0ValidateBeforeCall(serial, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDeviceWirelessBluetoothSettings_0
     * @param serial  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceWirelessBluetoothSettings_0Call(String serial, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/devices/{serial}/wireless/bluetooth/settings"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeviceWirelessBluetoothSettings_0ValidateBeforeCall(String serial, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling getDeviceWirelessBluetoothSettings_0(Async)");
        }

        return getDeviceWirelessBluetoothSettings_0Call(serial, _callback);

    }

    /**
     * Return the bluetooth settings for a wireless device
     * Return the bluetooth settings for a wireless device
     * @param serial  (required)
     * @return GetDeviceWirelessBluetoothSettings200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetDeviceWirelessBluetoothSettings200Response getDeviceWirelessBluetoothSettings_0(String serial) throws ApiException {
        ApiResponse<GetDeviceWirelessBluetoothSettings200Response> localVarResp = getDeviceWirelessBluetoothSettings_0WithHttpInfo(serial);
        return localVarResp.getData();
    }

    /**
     * Return the bluetooth settings for a wireless device
     * Return the bluetooth settings for a wireless device
     * @param serial  (required)
     * @return ApiResponse&lt;GetDeviceWirelessBluetoothSettings200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDeviceWirelessBluetoothSettings200Response> getDeviceWirelessBluetoothSettings_0WithHttpInfo(String serial) throws ApiException {
        okhttp3.Call localVarCall = getDeviceWirelessBluetoothSettings_0ValidateBeforeCall(serial, null);
        Type localVarReturnType = new TypeToken<GetDeviceWirelessBluetoothSettings200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the bluetooth settings for a wireless device (asynchronously)
     * Return the bluetooth settings for a wireless device
     * @param serial  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceWirelessBluetoothSettings_0Async(String serial, final ApiCallback<GetDeviceWirelessBluetoothSettings200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeviceWirelessBluetoothSettings_0ValidateBeforeCall(serial, _callback);
        Type localVarReturnType = new TypeToken<GetDeviceWirelessBluetoothSettings200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDeviceWirelessRadioSettings_0
     * @param serial  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceWirelessRadioSettings_0Call(String serial, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/devices/{serial}/wireless/radio/settings"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeviceWirelessRadioSettings_0ValidateBeforeCall(String serial, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling getDeviceWirelessRadioSettings_0(Async)");
        }

        return getDeviceWirelessRadioSettings_0Call(serial, _callback);

    }

    /**
     * Return the radio settings of a device
     * Return the radio settings of a device
     * @param serial  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getDeviceWirelessRadioSettings_0(String serial) throws ApiException {
        ApiResponse<Object> localVarResp = getDeviceWirelessRadioSettings_0WithHttpInfo(serial);
        return localVarResp.getData();
    }

    /**
     * Return the radio settings of a device
     * Return the radio settings of a device
     * @param serial  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getDeviceWirelessRadioSettings_0WithHttpInfo(String serial) throws ApiException {
        okhttp3.Call localVarCall = getDeviceWirelessRadioSettings_0ValidateBeforeCall(serial, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the radio settings of a device (asynchronously)
     * Return the radio settings of a device
     * @param serial  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceWirelessRadioSettings_0Async(String serial, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeviceWirelessRadioSettings_0ValidateBeforeCall(serial, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDevice_0
     * @param serial  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDevice_0Call(String serial, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/devices/{serial}"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDevice_0ValidateBeforeCall(String serial, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling getDevice_0(Async)");
        }

        return getDevice_0Call(serial, _callback);

    }

    /**
     * Return a single device
     * Return a single device
     * @param serial  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getDevice_0(String serial) throws ApiException {
        ApiResponse<Object> localVarResp = getDevice_0WithHttpInfo(serial);
        return localVarResp.getData();
    }

    /**
     * Return a single device
     * Return a single device
     * @param serial  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getDevice_0WithHttpInfo(String serial) throws ApiException {
        okhttp3.Call localVarCall = getDevice_0ValidateBeforeCall(serial, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a single device (asynchronously)
     * Return a single device
     * @param serial  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDevice_0Async(String serial, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDevice_0ValidateBeforeCall(serial, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkAlertsSettings_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkAlertsSettings_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/alerts/settings"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkAlertsSettings_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkAlertsSettings_0(Async)");
        }

        return getNetworkAlertsSettings_0Call(networkId, _callback);

    }

    /**
     * Return the alert configuration for this network
     * Return the alert configuration for this network
     * @param networkId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkAlertsSettings_0(String networkId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkAlertsSettings_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Return the alert configuration for this network
     * Return the alert configuration for this network
     * @param networkId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkAlertsSettings_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkAlertsSettings_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the alert configuration for this network (asynchronously)
     * Return the alert configuration for this network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkAlertsSettings_0Async(String networkId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkAlertsSettings_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkApplianceConnectivityMonitoringDestinations_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceConnectivityMonitoringDestinations_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/connectivityMonitoringDestinations"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkApplianceConnectivityMonitoringDestinations_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkApplianceConnectivityMonitoringDestinations_0(Async)");
        }

        return getNetworkApplianceConnectivityMonitoringDestinations_0Call(networkId, _callback);

    }

    /**
     * Return the connectivity testing destinations for an MX network
     * Return the connectivity testing destinations for an MX network
     * @param networkId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkApplianceConnectivityMonitoringDestinations_0(String networkId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkApplianceConnectivityMonitoringDestinations_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Return the connectivity testing destinations for an MX network
     * Return the connectivity testing destinations for an MX network
     * @param networkId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkApplianceConnectivityMonitoringDestinations_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkApplianceConnectivityMonitoringDestinations_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the connectivity testing destinations for an MX network (asynchronously)
     * Return the connectivity testing destinations for an MX network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceConnectivityMonitoringDestinations_0Async(String networkId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkApplianceConnectivityMonitoringDestinations_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkApplianceContentFilteringCategories_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceContentFilteringCategories_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/contentFiltering/categories"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkApplianceContentFilteringCategories_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkApplianceContentFilteringCategories_0(Async)");
        }

        return getNetworkApplianceContentFilteringCategories_0Call(networkId, _callback);

    }

    /**
     * List all available content filtering categories for an MX network
     * List all available content filtering categories for an MX network
     * @param networkId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkApplianceContentFilteringCategories_0(String networkId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkApplianceContentFilteringCategories_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * List all available content filtering categories for an MX network
     * List all available content filtering categories for an MX network
     * @param networkId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkApplianceContentFilteringCategories_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkApplianceContentFilteringCategories_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all available content filtering categories for an MX network (asynchronously)
     * List all available content filtering categories for an MX network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceContentFilteringCategories_0Async(String networkId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkApplianceContentFilteringCategories_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkApplianceContentFiltering_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceContentFiltering_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/contentFiltering"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkApplianceContentFiltering_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkApplianceContentFiltering_0(Async)");
        }

        return getNetworkApplianceContentFiltering_0Call(networkId, _callback);

    }

    /**
     * Return the content filtering settings for an MX network
     * Return the content filtering settings for an MX network
     * @param networkId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkApplianceContentFiltering_0(String networkId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkApplianceContentFiltering_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Return the content filtering settings for an MX network
     * Return the content filtering settings for an MX network
     * @param networkId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkApplianceContentFiltering_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkApplianceContentFiltering_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the content filtering settings for an MX network (asynchronously)
     * Return the content filtering settings for an MX network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceContentFiltering_0Async(String networkId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkApplianceContentFiltering_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkApplianceFirewallCellularFirewallRules_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceFirewallCellularFirewallRules_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/firewall/cellularFirewallRules"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkApplianceFirewallCellularFirewallRules_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkApplianceFirewallCellularFirewallRules_0(Async)");
        }

        return getNetworkApplianceFirewallCellularFirewallRules_0Call(networkId, _callback);

    }

    /**
     * Return the cellular firewall rules for an MX network
     * Return the cellular firewall rules for an MX network
     * @param networkId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkApplianceFirewallCellularFirewallRules_0(String networkId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkApplianceFirewallCellularFirewallRules_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Return the cellular firewall rules for an MX network
     * Return the cellular firewall rules for an MX network
     * @param networkId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkApplianceFirewallCellularFirewallRules_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkApplianceFirewallCellularFirewallRules_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the cellular firewall rules for an MX network (asynchronously)
     * Return the cellular firewall rules for an MX network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceFirewallCellularFirewallRules_0Async(String networkId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkApplianceFirewallCellularFirewallRules_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkApplianceFirewallFirewalledService_0
     * @param networkId  (required)
     * @param service  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceFirewallFirewalledService_0Call(String networkId, String service, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/firewall/firewalledServices/{service}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "service" + "}", localVarApiClient.escapeString(service.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkApplianceFirewallFirewalledService_0ValidateBeforeCall(String networkId, String service, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkApplianceFirewallFirewalledService_0(Async)");
        }

        // verify the required parameter 'service' is set
        if (service == null) {
            throw new ApiException("Missing the required parameter 'service' when calling getNetworkApplianceFirewallFirewalledService_0(Async)");
        }

        return getNetworkApplianceFirewallFirewalledService_0Call(networkId, service, _callback);

    }

    /**
     * Return the accessibility settings of the given service (&#39;ICMP&#39;, &#39;web&#39;, or &#39;SNMP&#39;)
     * Return the accessibility settings of the given service (&#39;ICMP&#39;, &#39;web&#39;, or &#39;SNMP&#39;)
     * @param networkId  (required)
     * @param service  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkApplianceFirewallFirewalledService_0(String networkId, String service) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkApplianceFirewallFirewalledService_0WithHttpInfo(networkId, service);
        return localVarResp.getData();
    }

    /**
     * Return the accessibility settings of the given service (&#39;ICMP&#39;, &#39;web&#39;, or &#39;SNMP&#39;)
     * Return the accessibility settings of the given service (&#39;ICMP&#39;, &#39;web&#39;, or &#39;SNMP&#39;)
     * @param networkId  (required)
     * @param service  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkApplianceFirewallFirewalledService_0WithHttpInfo(String networkId, String service) throws ApiException {
        okhttp3.Call localVarCall = getNetworkApplianceFirewallFirewalledService_0ValidateBeforeCall(networkId, service, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the accessibility settings of the given service (&#39;ICMP&#39;, &#39;web&#39;, or &#39;SNMP&#39;) (asynchronously)
     * Return the accessibility settings of the given service (&#39;ICMP&#39;, &#39;web&#39;, or &#39;SNMP&#39;)
     * @param networkId  (required)
     * @param service  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceFirewallFirewalledService_0Async(String networkId, String service, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkApplianceFirewallFirewalledService_0ValidateBeforeCall(networkId, service, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkApplianceFirewallFirewalledServices_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceFirewallFirewalledServices_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/firewall/firewalledServices"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkApplianceFirewallFirewalledServices_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkApplianceFirewallFirewalledServices_0(Async)");
        }

        return getNetworkApplianceFirewallFirewalledServices_0Call(networkId, _callback);

    }

    /**
     * List the appliance services and their accessibility rules
     * List the appliance services and their accessibility rules
     * @param networkId  (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getNetworkApplianceFirewallFirewalledServices_0(String networkId) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getNetworkApplianceFirewallFirewalledServices_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * List the appliance services and their accessibility rules
     * List the appliance services and their accessibility rules
     * @param networkId  (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getNetworkApplianceFirewallFirewalledServices_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkApplianceFirewallFirewalledServices_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the appliance services and their accessibility rules (asynchronously)
     * List the appliance services and their accessibility rules
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceFirewallFirewalledServices_0Async(String networkId, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkApplianceFirewallFirewalledServices_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkApplianceFirewallInboundCellularFirewallRules_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceFirewallInboundCellularFirewallRules_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/firewall/inboundCellularFirewallRules"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkApplianceFirewallInboundCellularFirewallRules_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkApplianceFirewallInboundCellularFirewallRules_0(Async)");
        }

        return getNetworkApplianceFirewallInboundCellularFirewallRules_0Call(networkId, _callback);

    }

    /**
     * Return the inbound cellular firewall rules for an MX network
     * Return the inbound cellular firewall rules for an MX network
     * @param networkId  (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getNetworkApplianceFirewallInboundCellularFirewallRules_0(String networkId) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getNetworkApplianceFirewallInboundCellularFirewallRules_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Return the inbound cellular firewall rules for an MX network
     * Return the inbound cellular firewall rules for an MX network
     * @param networkId  (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getNetworkApplianceFirewallInboundCellularFirewallRules_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkApplianceFirewallInboundCellularFirewallRules_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the inbound cellular firewall rules for an MX network (asynchronously)
     * Return the inbound cellular firewall rules for an MX network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceFirewallInboundCellularFirewallRules_0Async(String networkId, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkApplianceFirewallInboundCellularFirewallRules_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkApplianceFirewallInboundFirewallRules_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceFirewallInboundFirewallRules_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/firewall/inboundFirewallRules"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkApplianceFirewallInboundFirewallRules_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkApplianceFirewallInboundFirewallRules_0(Async)");
        }

        return getNetworkApplianceFirewallInboundFirewallRules_0Call(networkId, _callback);

    }

    /**
     * Return the inbound firewall rules for an MX network
     * Return the inbound firewall rules for an MX network
     * @param networkId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkApplianceFirewallInboundFirewallRules_0(String networkId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkApplianceFirewallInboundFirewallRules_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Return the inbound firewall rules for an MX network
     * Return the inbound firewall rules for an MX network
     * @param networkId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkApplianceFirewallInboundFirewallRules_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkApplianceFirewallInboundFirewallRules_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the inbound firewall rules for an MX network (asynchronously)
     * Return the inbound firewall rules for an MX network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceFirewallInboundFirewallRules_0Async(String networkId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkApplianceFirewallInboundFirewallRules_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkApplianceFirewallL3FirewallRules_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceFirewallL3FirewallRules_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/firewall/l3FirewallRules"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkApplianceFirewallL3FirewallRules_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkApplianceFirewallL3FirewallRules_0(Async)");
        }

        return getNetworkApplianceFirewallL3FirewallRules_0Call(networkId, _callback);

    }

    /**
     * Return the L3 firewall rules for an MX network
     * Return the L3 firewall rules for an MX network
     * @param networkId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkApplianceFirewallL3FirewallRules_0(String networkId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkApplianceFirewallL3FirewallRules_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Return the L3 firewall rules for an MX network
     * Return the L3 firewall rules for an MX network
     * @param networkId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkApplianceFirewallL3FirewallRules_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkApplianceFirewallL3FirewallRules_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the L3 firewall rules for an MX network (asynchronously)
     * Return the L3 firewall rules for an MX network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceFirewallL3FirewallRules_0Async(String networkId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkApplianceFirewallL3FirewallRules_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkApplianceFirewallL7FirewallRulesApplicationCategories_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceFirewallL7FirewallRulesApplicationCategories_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/firewall/l7FirewallRules/applicationCategories"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkApplianceFirewallL7FirewallRulesApplicationCategories_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkApplianceFirewallL7FirewallRulesApplicationCategories_0(Async)");
        }

        return getNetworkApplianceFirewallL7FirewallRulesApplicationCategories_0Call(networkId, _callback);

    }

    /**
     * Return the L7 firewall application categories and their associated applications for an MX network
     * Return the L7 firewall application categories and their associated applications for an MX network
     * @param networkId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkApplianceFirewallL7FirewallRulesApplicationCategories_0(String networkId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkApplianceFirewallL7FirewallRulesApplicationCategories_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Return the L7 firewall application categories and their associated applications for an MX network
     * Return the L7 firewall application categories and their associated applications for an MX network
     * @param networkId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkApplianceFirewallL7FirewallRulesApplicationCategories_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkApplianceFirewallL7FirewallRulesApplicationCategories_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the L7 firewall application categories and their associated applications for an MX network (asynchronously)
     * Return the L7 firewall application categories and their associated applications for an MX network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceFirewallL7FirewallRulesApplicationCategories_0Async(String networkId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkApplianceFirewallL7FirewallRulesApplicationCategories_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkApplianceFirewallL7FirewallRules_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceFirewallL7FirewallRules_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/firewall/l7FirewallRules"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkApplianceFirewallL7FirewallRules_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkApplianceFirewallL7FirewallRules_0(Async)");
        }

        return getNetworkApplianceFirewallL7FirewallRules_0Call(networkId, _callback);

    }

    /**
     * List the MX L7 firewall rules for an MX network
     * List the MX L7 firewall rules for an MX network
     * @param networkId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkApplianceFirewallL7FirewallRules_0(String networkId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkApplianceFirewallL7FirewallRules_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * List the MX L7 firewall rules for an MX network
     * List the MX L7 firewall rules for an MX network
     * @param networkId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkApplianceFirewallL7FirewallRules_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkApplianceFirewallL7FirewallRules_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the MX L7 firewall rules for an MX network (asynchronously)
     * List the MX L7 firewall rules for an MX network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceFirewallL7FirewallRules_0Async(String networkId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkApplianceFirewallL7FirewallRules_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkApplianceFirewallOneToManyNatRules_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceFirewallOneToManyNatRules_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/firewall/oneToManyNatRules"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkApplianceFirewallOneToManyNatRules_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkApplianceFirewallOneToManyNatRules_0(Async)");
        }

        return getNetworkApplianceFirewallOneToManyNatRules_0Call(networkId, _callback);

    }

    /**
     * Return the 1:Many NAT mapping rules for an MX network
     * Return the 1:Many NAT mapping rules for an MX network
     * @param networkId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkApplianceFirewallOneToManyNatRules_0(String networkId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkApplianceFirewallOneToManyNatRules_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Return the 1:Many NAT mapping rules for an MX network
     * Return the 1:Many NAT mapping rules for an MX network
     * @param networkId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkApplianceFirewallOneToManyNatRules_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkApplianceFirewallOneToManyNatRules_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the 1:Many NAT mapping rules for an MX network (asynchronously)
     * Return the 1:Many NAT mapping rules for an MX network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceFirewallOneToManyNatRules_0Async(String networkId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkApplianceFirewallOneToManyNatRules_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkApplianceFirewallOneToOneNatRules_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceFirewallOneToOneNatRules_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/firewall/oneToOneNatRules"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkApplianceFirewallOneToOneNatRules_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkApplianceFirewallOneToOneNatRules_0(Async)");
        }

        return getNetworkApplianceFirewallOneToOneNatRules_0Call(networkId, _callback);

    }

    /**
     * Return the 1:1 NAT mapping rules for an MX network
     * Return the 1:1 NAT mapping rules for an MX network
     * @param networkId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkApplianceFirewallOneToOneNatRules_0(String networkId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkApplianceFirewallOneToOneNatRules_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Return the 1:1 NAT mapping rules for an MX network
     * Return the 1:1 NAT mapping rules for an MX network
     * @param networkId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkApplianceFirewallOneToOneNatRules_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkApplianceFirewallOneToOneNatRules_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the 1:1 NAT mapping rules for an MX network (asynchronously)
     * Return the 1:1 NAT mapping rules for an MX network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceFirewallOneToOneNatRules_0Async(String networkId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkApplianceFirewallOneToOneNatRules_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkApplianceFirewallPortForwardingRules_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceFirewallPortForwardingRules_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/firewall/portForwardingRules"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkApplianceFirewallPortForwardingRules_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkApplianceFirewallPortForwardingRules_0(Async)");
        }

        return getNetworkApplianceFirewallPortForwardingRules_0Call(networkId, _callback);

    }

    /**
     * Return the port forwarding rules for an MX network
     * Return the port forwarding rules for an MX network
     * @param networkId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkApplianceFirewallPortForwardingRules_0(String networkId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkApplianceFirewallPortForwardingRules_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Return the port forwarding rules for an MX network
     * Return the port forwarding rules for an MX network
     * @param networkId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkApplianceFirewallPortForwardingRules_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkApplianceFirewallPortForwardingRules_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the port forwarding rules for an MX network (asynchronously)
     * Return the port forwarding rules for an MX network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceFirewallPortForwardingRules_0Async(String networkId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkApplianceFirewallPortForwardingRules_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkApplianceFirewallSettings_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceFirewallSettings_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/firewall/settings"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkApplianceFirewallSettings_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkApplianceFirewallSettings_0(Async)");
        }

        return getNetworkApplianceFirewallSettings_0Call(networkId, _callback);

    }

    /**
     * Return the firewall settings for this network
     * Return the firewall settings for this network
     * @param networkId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkApplianceFirewallSettings_0(String networkId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkApplianceFirewallSettings_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Return the firewall settings for this network
     * Return the firewall settings for this network
     * @param networkId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkApplianceFirewallSettings_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkApplianceFirewallSettings_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the firewall settings for this network (asynchronously)
     * Return the firewall settings for this network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceFirewallSettings_0Async(String networkId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkApplianceFirewallSettings_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkAppliancePort_0
     * @param networkId  (required)
     * @param portId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkAppliancePort_0Call(String networkId, String portId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/ports/{portId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "portId" + "}", localVarApiClient.escapeString(portId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkAppliancePort_0ValidateBeforeCall(String networkId, String portId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkAppliancePort_0(Async)");
        }

        // verify the required parameter 'portId' is set
        if (portId == null) {
            throw new ApiException("Missing the required parameter 'portId' when calling getNetworkAppliancePort_0(Async)");
        }

        return getNetworkAppliancePort_0Call(networkId, portId, _callback);

    }

    /**
     * Return per-port VLAN settings for a single MX port.
     * Return per-port VLAN settings for a single MX port.
     * @param networkId  (required)
     * @param portId  (required)
     * @return GetNetworkAppliancePorts200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkAppliancePorts200ResponseInner getNetworkAppliancePort_0(String networkId, String portId) throws ApiException {
        ApiResponse<GetNetworkAppliancePorts200ResponseInner> localVarResp = getNetworkAppliancePort_0WithHttpInfo(networkId, portId);
        return localVarResp.getData();
    }

    /**
     * Return per-port VLAN settings for a single MX port.
     * Return per-port VLAN settings for a single MX port.
     * @param networkId  (required)
     * @param portId  (required)
     * @return ApiResponse&lt;GetNetworkAppliancePorts200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkAppliancePorts200ResponseInner> getNetworkAppliancePort_0WithHttpInfo(String networkId, String portId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkAppliancePort_0ValidateBeforeCall(networkId, portId, null);
        Type localVarReturnType = new TypeToken<GetNetworkAppliancePorts200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return per-port VLAN settings for a single MX port. (asynchronously)
     * Return per-port VLAN settings for a single MX port.
     * @param networkId  (required)
     * @param portId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkAppliancePort_0Async(String networkId, String portId, final ApiCallback<GetNetworkAppliancePorts200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkAppliancePort_0ValidateBeforeCall(networkId, portId, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkAppliancePorts200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkAppliancePorts_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkAppliancePorts_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/ports"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkAppliancePorts_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkAppliancePorts_0(Async)");
        }

        return getNetworkAppliancePorts_0Call(networkId, _callback);

    }

    /**
     * List per-port VLAN settings for all ports of a MX.
     * List per-port VLAN settings for all ports of a MX.
     * @param networkId  (required)
     * @return List&lt;GetNetworkAppliancePorts200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetNetworkAppliancePorts200ResponseInner> getNetworkAppliancePorts_0(String networkId) throws ApiException {
        ApiResponse<List<GetNetworkAppliancePorts200ResponseInner>> localVarResp = getNetworkAppliancePorts_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * List per-port VLAN settings for all ports of a MX.
     * List per-port VLAN settings for all ports of a MX.
     * @param networkId  (required)
     * @return ApiResponse&lt;List&lt;GetNetworkAppliancePorts200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetworkAppliancePorts200ResponseInner>> getNetworkAppliancePorts_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkAppliancePorts_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<List<GetNetworkAppliancePorts200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List per-port VLAN settings for all ports of a MX. (asynchronously)
     * List per-port VLAN settings for all ports of a MX.
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkAppliancePorts_0Async(String networkId, final ApiCallback<List<GetNetworkAppliancePorts200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkAppliancePorts_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetworkAppliancePorts200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkAppliancePrefixesDelegatedStatic_0
     * @param networkId  (required)
     * @param staticDelegatedPrefixId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkAppliancePrefixesDelegatedStatic_0Call(String networkId, String staticDelegatedPrefixId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/prefixes/delegated/statics/{staticDelegatedPrefixId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "staticDelegatedPrefixId" + "}", localVarApiClient.escapeString(staticDelegatedPrefixId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkAppliancePrefixesDelegatedStatic_0ValidateBeforeCall(String networkId, String staticDelegatedPrefixId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkAppliancePrefixesDelegatedStatic_0(Async)");
        }

        // verify the required parameter 'staticDelegatedPrefixId' is set
        if (staticDelegatedPrefixId == null) {
            throw new ApiException("Missing the required parameter 'staticDelegatedPrefixId' when calling getNetworkAppliancePrefixesDelegatedStatic_0(Async)");
        }

        return getNetworkAppliancePrefixesDelegatedStatic_0Call(networkId, staticDelegatedPrefixId, _callback);

    }

    /**
     * Return a static delegated prefix from a network
     * Return a static delegated prefix from a network
     * @param networkId  (required)
     * @param staticDelegatedPrefixId  (required)
     * @return GetNetworkAppliancePrefixesDelegatedStatics200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkAppliancePrefixesDelegatedStatics200ResponseInner getNetworkAppliancePrefixesDelegatedStatic_0(String networkId, String staticDelegatedPrefixId) throws ApiException {
        ApiResponse<GetNetworkAppliancePrefixesDelegatedStatics200ResponseInner> localVarResp = getNetworkAppliancePrefixesDelegatedStatic_0WithHttpInfo(networkId, staticDelegatedPrefixId);
        return localVarResp.getData();
    }

    /**
     * Return a static delegated prefix from a network
     * Return a static delegated prefix from a network
     * @param networkId  (required)
     * @param staticDelegatedPrefixId  (required)
     * @return ApiResponse&lt;GetNetworkAppliancePrefixesDelegatedStatics200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkAppliancePrefixesDelegatedStatics200ResponseInner> getNetworkAppliancePrefixesDelegatedStatic_0WithHttpInfo(String networkId, String staticDelegatedPrefixId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkAppliancePrefixesDelegatedStatic_0ValidateBeforeCall(networkId, staticDelegatedPrefixId, null);
        Type localVarReturnType = new TypeToken<GetNetworkAppliancePrefixesDelegatedStatics200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a static delegated prefix from a network (asynchronously)
     * Return a static delegated prefix from a network
     * @param networkId  (required)
     * @param staticDelegatedPrefixId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkAppliancePrefixesDelegatedStatic_0Async(String networkId, String staticDelegatedPrefixId, final ApiCallback<GetNetworkAppliancePrefixesDelegatedStatics200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkAppliancePrefixesDelegatedStatic_0ValidateBeforeCall(networkId, staticDelegatedPrefixId, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkAppliancePrefixesDelegatedStatics200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkAppliancePrefixesDelegatedStatics_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkAppliancePrefixesDelegatedStatics_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/prefixes/delegated/statics"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkAppliancePrefixesDelegatedStatics_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkAppliancePrefixesDelegatedStatics_0(Async)");
        }

        return getNetworkAppliancePrefixesDelegatedStatics_0Call(networkId, _callback);

    }

    /**
     * List static delegated prefixes for a network
     * List static delegated prefixes for a network
     * @param networkId  (required)
     * @return List&lt;GetNetworkAppliancePrefixesDelegatedStatics200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetNetworkAppliancePrefixesDelegatedStatics200ResponseInner> getNetworkAppliancePrefixesDelegatedStatics_0(String networkId) throws ApiException {
        ApiResponse<List<GetNetworkAppliancePrefixesDelegatedStatics200ResponseInner>> localVarResp = getNetworkAppliancePrefixesDelegatedStatics_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * List static delegated prefixes for a network
     * List static delegated prefixes for a network
     * @param networkId  (required)
     * @return ApiResponse&lt;List&lt;GetNetworkAppliancePrefixesDelegatedStatics200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetworkAppliancePrefixesDelegatedStatics200ResponseInner>> getNetworkAppliancePrefixesDelegatedStatics_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkAppliancePrefixesDelegatedStatics_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<List<GetNetworkAppliancePrefixesDelegatedStatics200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List static delegated prefixes for a network (asynchronously)
     * List static delegated prefixes for a network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkAppliancePrefixesDelegatedStatics_0Async(String networkId, final ApiCallback<List<GetNetworkAppliancePrefixesDelegatedStatics200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkAppliancePrefixesDelegatedStatics_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetworkAppliancePrefixesDelegatedStatics200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkApplianceSecurityIntrusion_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceSecurityIntrusion_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/security/intrusion"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkApplianceSecurityIntrusion_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkApplianceSecurityIntrusion_0(Async)");
        }

        return getNetworkApplianceSecurityIntrusion_0Call(networkId, _callback);

    }

    /**
     * Returns all supported intrusion settings for an MX network
     * Returns all supported intrusion settings for an MX network
     * @param networkId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkApplianceSecurityIntrusion_0(String networkId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkApplianceSecurityIntrusion_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Returns all supported intrusion settings for an MX network
     * Returns all supported intrusion settings for an MX network
     * @param networkId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkApplianceSecurityIntrusion_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkApplianceSecurityIntrusion_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns all supported intrusion settings for an MX network (asynchronously)
     * Returns all supported intrusion settings for an MX network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceSecurityIntrusion_0Async(String networkId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkApplianceSecurityIntrusion_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkApplianceSecurityMalware_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceSecurityMalware_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/security/malware"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkApplianceSecurityMalware_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkApplianceSecurityMalware_0(Async)");
        }

        return getNetworkApplianceSecurityMalware_0Call(networkId, _callback);

    }

    /**
     * Returns all supported malware settings for an MX network
     * Returns all supported malware settings for an MX network
     * @param networkId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkApplianceSecurityMalware_0(String networkId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkApplianceSecurityMalware_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Returns all supported malware settings for an MX network
     * Returns all supported malware settings for an MX network
     * @param networkId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkApplianceSecurityMalware_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkApplianceSecurityMalware_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns all supported malware settings for an MX network (asynchronously)
     * Returns all supported malware settings for an MX network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceSecurityMalware_0Async(String networkId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkApplianceSecurityMalware_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkApplianceSettings_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceSettings_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/settings"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkApplianceSettings_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkApplianceSettings_0(Async)");
        }

        return getNetworkApplianceSettings_0Call(networkId, _callback);

    }

    /**
     * Return the appliance settings for a network
     * Return the appliance settings for a network
     * @param networkId  (required)
     * @return GetNetworkApplianceSettings200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkApplianceSettings200Response getNetworkApplianceSettings_0(String networkId) throws ApiException {
        ApiResponse<GetNetworkApplianceSettings200Response> localVarResp = getNetworkApplianceSettings_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Return the appliance settings for a network
     * Return the appliance settings for a network
     * @param networkId  (required)
     * @return ApiResponse&lt;GetNetworkApplianceSettings200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkApplianceSettings200Response> getNetworkApplianceSettings_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkApplianceSettings_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<GetNetworkApplianceSettings200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the appliance settings for a network (asynchronously)
     * Return the appliance settings for a network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceSettings_0Async(String networkId, final ApiCallback<GetNetworkApplianceSettings200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkApplianceSettings_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkApplianceSettings200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkApplianceSingleLan_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceSingleLan_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/singleLan"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkApplianceSingleLan_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkApplianceSingleLan_0(Async)");
        }

        return getNetworkApplianceSingleLan_0Call(networkId, _callback);

    }

    /**
     * Return single LAN configuration
     * Return single LAN configuration
     * @param networkId  (required)
     * @return GetNetworkApplianceSingleLan200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkApplianceSingleLan200Response getNetworkApplianceSingleLan_0(String networkId) throws ApiException {
        ApiResponse<GetNetworkApplianceSingleLan200Response> localVarResp = getNetworkApplianceSingleLan_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Return single LAN configuration
     * Return single LAN configuration
     * @param networkId  (required)
     * @return ApiResponse&lt;GetNetworkApplianceSingleLan200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkApplianceSingleLan200Response> getNetworkApplianceSingleLan_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkApplianceSingleLan_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<GetNetworkApplianceSingleLan200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return single LAN configuration (asynchronously)
     * Return single LAN configuration
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceSingleLan_0Async(String networkId, final ApiCallback<GetNetworkApplianceSingleLan200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkApplianceSingleLan_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkApplianceSingleLan200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkApplianceSsid_0
     * @param networkId  (required)
     * @param number  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceSsid_0Call(String networkId, String number, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/ssids/{number}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "number" + "}", localVarApiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkApplianceSsid_0ValidateBeforeCall(String networkId, String number, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkApplianceSsid_0(Async)");
        }

        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling getNetworkApplianceSsid_0(Async)");
        }

        return getNetworkApplianceSsid_0Call(networkId, number, _callback);

    }

    /**
     * Return a single MX SSID
     * Return a single MX SSID
     * @param networkId  (required)
     * @param number  (required)
     * @return GetNetworkApplianceSsids200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkApplianceSsids200ResponseInner getNetworkApplianceSsid_0(String networkId, String number) throws ApiException {
        ApiResponse<GetNetworkApplianceSsids200ResponseInner> localVarResp = getNetworkApplianceSsid_0WithHttpInfo(networkId, number);
        return localVarResp.getData();
    }

    /**
     * Return a single MX SSID
     * Return a single MX SSID
     * @param networkId  (required)
     * @param number  (required)
     * @return ApiResponse&lt;GetNetworkApplianceSsids200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkApplianceSsids200ResponseInner> getNetworkApplianceSsid_0WithHttpInfo(String networkId, String number) throws ApiException {
        okhttp3.Call localVarCall = getNetworkApplianceSsid_0ValidateBeforeCall(networkId, number, null);
        Type localVarReturnType = new TypeToken<GetNetworkApplianceSsids200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a single MX SSID (asynchronously)
     * Return a single MX SSID
     * @param networkId  (required)
     * @param number  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceSsid_0Async(String networkId, String number, final ApiCallback<GetNetworkApplianceSsids200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkApplianceSsid_0ValidateBeforeCall(networkId, number, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkApplianceSsids200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkApplianceSsids_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceSsids_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/ssids"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkApplianceSsids_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkApplianceSsids_0(Async)");
        }

        return getNetworkApplianceSsids_0Call(networkId, _callback);

    }

    /**
     * List the MX SSIDs in a network
     * List the MX SSIDs in a network
     * @param networkId  (required)
     * @return List&lt;GetNetworkApplianceSsids200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetNetworkApplianceSsids200ResponseInner> getNetworkApplianceSsids_0(String networkId) throws ApiException {
        ApiResponse<List<GetNetworkApplianceSsids200ResponseInner>> localVarResp = getNetworkApplianceSsids_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * List the MX SSIDs in a network
     * List the MX SSIDs in a network
     * @param networkId  (required)
     * @return ApiResponse&lt;List&lt;GetNetworkApplianceSsids200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetworkApplianceSsids200ResponseInner>> getNetworkApplianceSsids_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkApplianceSsids_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<List<GetNetworkApplianceSsids200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the MX SSIDs in a network (asynchronously)
     * List the MX SSIDs in a network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceSsids_0Async(String networkId, final ApiCallback<List<GetNetworkApplianceSsids200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkApplianceSsids_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetworkApplianceSsids200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkApplianceStaticRoute_0
     * @param networkId  (required)
     * @param staticRouteId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceStaticRoute_0Call(String networkId, String staticRouteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/staticRoutes/{staticRouteId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "staticRouteId" + "}", localVarApiClient.escapeString(staticRouteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkApplianceStaticRoute_0ValidateBeforeCall(String networkId, String staticRouteId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkApplianceStaticRoute_0(Async)");
        }

        // verify the required parameter 'staticRouteId' is set
        if (staticRouteId == null) {
            throw new ApiException("Missing the required parameter 'staticRouteId' when calling getNetworkApplianceStaticRoute_0(Async)");
        }

        return getNetworkApplianceStaticRoute_0Call(networkId, staticRouteId, _callback);

    }

    /**
     * Return a static route for an MX or teleworker network
     * Return a static route for an MX or teleworker network
     * @param networkId  (required)
     * @param staticRouteId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkApplianceStaticRoute_0(String networkId, String staticRouteId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkApplianceStaticRoute_0WithHttpInfo(networkId, staticRouteId);
        return localVarResp.getData();
    }

    /**
     * Return a static route for an MX or teleworker network
     * Return a static route for an MX or teleworker network
     * @param networkId  (required)
     * @param staticRouteId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkApplianceStaticRoute_0WithHttpInfo(String networkId, String staticRouteId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkApplianceStaticRoute_0ValidateBeforeCall(networkId, staticRouteId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a static route for an MX or teleworker network (asynchronously)
     * Return a static route for an MX or teleworker network
     * @param networkId  (required)
     * @param staticRouteId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceStaticRoute_0Async(String networkId, String staticRouteId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkApplianceStaticRoute_0ValidateBeforeCall(networkId, staticRouteId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkApplianceStaticRoutes_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceStaticRoutes_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/staticRoutes"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkApplianceStaticRoutes_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkApplianceStaticRoutes_0(Async)");
        }

        return getNetworkApplianceStaticRoutes_0Call(networkId, _callback);

    }

    /**
     * List the static routes for an MX or teleworker network
     * List the static routes for an MX or teleworker network
     * @param networkId  (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getNetworkApplianceStaticRoutes_0(String networkId) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getNetworkApplianceStaticRoutes_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * List the static routes for an MX or teleworker network
     * List the static routes for an MX or teleworker network
     * @param networkId  (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getNetworkApplianceStaticRoutes_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkApplianceStaticRoutes_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the static routes for an MX or teleworker network (asynchronously)
     * List the static routes for an MX or teleworker network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceStaticRoutes_0Async(String networkId, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkApplianceStaticRoutes_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkApplianceTrafficShapingCustomPerformanceClass_0
     * @param networkId  (required)
     * @param customPerformanceClassId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceTrafficShapingCustomPerformanceClass_0Call(String networkId, String customPerformanceClassId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/trafficShaping/customPerformanceClasses/{customPerformanceClassId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "customPerformanceClassId" + "}", localVarApiClient.escapeString(customPerformanceClassId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkApplianceTrafficShapingCustomPerformanceClass_0ValidateBeforeCall(String networkId, String customPerformanceClassId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkApplianceTrafficShapingCustomPerformanceClass_0(Async)");
        }

        // verify the required parameter 'customPerformanceClassId' is set
        if (customPerformanceClassId == null) {
            throw new ApiException("Missing the required parameter 'customPerformanceClassId' when calling getNetworkApplianceTrafficShapingCustomPerformanceClass_0(Async)");
        }

        return getNetworkApplianceTrafficShapingCustomPerformanceClass_0Call(networkId, customPerformanceClassId, _callback);

    }

    /**
     * Return a custom performance class for an MX network
     * Return a custom performance class for an MX network
     * @param networkId  (required)
     * @param customPerformanceClassId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkApplianceTrafficShapingCustomPerformanceClass_0(String networkId, String customPerformanceClassId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkApplianceTrafficShapingCustomPerformanceClass_0WithHttpInfo(networkId, customPerformanceClassId);
        return localVarResp.getData();
    }

    /**
     * Return a custom performance class for an MX network
     * Return a custom performance class for an MX network
     * @param networkId  (required)
     * @param customPerformanceClassId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkApplianceTrafficShapingCustomPerformanceClass_0WithHttpInfo(String networkId, String customPerformanceClassId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkApplianceTrafficShapingCustomPerformanceClass_0ValidateBeforeCall(networkId, customPerformanceClassId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a custom performance class for an MX network (asynchronously)
     * Return a custom performance class for an MX network
     * @param networkId  (required)
     * @param customPerformanceClassId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceTrafficShapingCustomPerformanceClass_0Async(String networkId, String customPerformanceClassId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkApplianceTrafficShapingCustomPerformanceClass_0ValidateBeforeCall(networkId, customPerformanceClassId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkApplianceTrafficShapingCustomPerformanceClasses_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceTrafficShapingCustomPerformanceClasses_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/trafficShaping/customPerformanceClasses"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkApplianceTrafficShapingCustomPerformanceClasses_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkApplianceTrafficShapingCustomPerformanceClasses_0(Async)");
        }

        return getNetworkApplianceTrafficShapingCustomPerformanceClasses_0Call(networkId, _callback);

    }

    /**
     * List all custom performance classes for an MX network
     * List all custom performance classes for an MX network
     * @param networkId  (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getNetworkApplianceTrafficShapingCustomPerformanceClasses_0(String networkId) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getNetworkApplianceTrafficShapingCustomPerformanceClasses_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * List all custom performance classes for an MX network
     * List all custom performance classes for an MX network
     * @param networkId  (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getNetworkApplianceTrafficShapingCustomPerformanceClasses_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkApplianceTrafficShapingCustomPerformanceClasses_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all custom performance classes for an MX network (asynchronously)
     * List all custom performance classes for an MX network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceTrafficShapingCustomPerformanceClasses_0Async(String networkId, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkApplianceTrafficShapingCustomPerformanceClasses_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkApplianceTrafficShapingRules_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceTrafficShapingRules_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/trafficShaping/rules"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkApplianceTrafficShapingRules_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkApplianceTrafficShapingRules_0(Async)");
        }

        return getNetworkApplianceTrafficShapingRules_0Call(networkId, _callback);

    }

    /**
     * Display the traffic shaping settings rules for an MX network
     * Display the traffic shaping settings rules for an MX network
     * @param networkId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkApplianceTrafficShapingRules_0(String networkId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkApplianceTrafficShapingRules_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Display the traffic shaping settings rules for an MX network
     * Display the traffic shaping settings rules for an MX network
     * @param networkId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkApplianceTrafficShapingRules_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkApplianceTrafficShapingRules_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Display the traffic shaping settings rules for an MX network (asynchronously)
     * Display the traffic shaping settings rules for an MX network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceTrafficShapingRules_0Async(String networkId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkApplianceTrafficShapingRules_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkApplianceTrafficShapingUplinkBandwidth_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceTrafficShapingUplinkBandwidth_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/trafficShaping/uplinkBandwidth"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkApplianceTrafficShapingUplinkBandwidth_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkApplianceTrafficShapingUplinkBandwidth_0(Async)");
        }

        return getNetworkApplianceTrafficShapingUplinkBandwidth_0Call(networkId, _callback);

    }

    /**
     * Returns the uplink bandwidth limits for your MX network
     * Returns the uplink bandwidth limits for your MX network. This may not reflect the affected device&#39;s hardware capabilities.  For more information on your device&#39;s hardware capabilities, please consult our MX Family Datasheet - [https://meraki.cisco.com/product-collateral/mx-family-datasheet/?file]
     * @param networkId  (required)
     * @return GetNetworkApplianceTrafficShapingUplinkBandwidth200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkApplianceTrafficShapingUplinkBandwidth200Response getNetworkApplianceTrafficShapingUplinkBandwidth_0(String networkId) throws ApiException {
        ApiResponse<GetNetworkApplianceTrafficShapingUplinkBandwidth200Response> localVarResp = getNetworkApplianceTrafficShapingUplinkBandwidth_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Returns the uplink bandwidth limits for your MX network
     * Returns the uplink bandwidth limits for your MX network. This may not reflect the affected device&#39;s hardware capabilities.  For more information on your device&#39;s hardware capabilities, please consult our MX Family Datasheet - [https://meraki.cisco.com/product-collateral/mx-family-datasheet/?file]
     * @param networkId  (required)
     * @return ApiResponse&lt;GetNetworkApplianceTrafficShapingUplinkBandwidth200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkApplianceTrafficShapingUplinkBandwidth200Response> getNetworkApplianceTrafficShapingUplinkBandwidth_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkApplianceTrafficShapingUplinkBandwidth_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<GetNetworkApplianceTrafficShapingUplinkBandwidth200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the uplink bandwidth limits for your MX network (asynchronously)
     * Returns the uplink bandwidth limits for your MX network. This may not reflect the affected device&#39;s hardware capabilities.  For more information on your device&#39;s hardware capabilities, please consult our MX Family Datasheet - [https://meraki.cisco.com/product-collateral/mx-family-datasheet/?file]
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceTrafficShapingUplinkBandwidth_0Async(String networkId, final ApiCallback<GetNetworkApplianceTrafficShapingUplinkBandwidth200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkApplianceTrafficShapingUplinkBandwidth_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkApplianceTrafficShapingUplinkBandwidth200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkApplianceTrafficShapingUplinkSelection_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceTrafficShapingUplinkSelection_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/trafficShaping/uplinkSelection"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkApplianceTrafficShapingUplinkSelection_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkApplianceTrafficShapingUplinkSelection_0(Async)");
        }

        return getNetworkApplianceTrafficShapingUplinkSelection_0Call(networkId, _callback);

    }

    /**
     * Show uplink selection settings for an MX network
     * Show uplink selection settings for an MX network
     * @param networkId  (required)
     * @return GetNetworkApplianceTrafficShapingUplinkSelection200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkApplianceTrafficShapingUplinkSelection200Response getNetworkApplianceTrafficShapingUplinkSelection_0(String networkId) throws ApiException {
        ApiResponse<GetNetworkApplianceTrafficShapingUplinkSelection200Response> localVarResp = getNetworkApplianceTrafficShapingUplinkSelection_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Show uplink selection settings for an MX network
     * Show uplink selection settings for an MX network
     * @param networkId  (required)
     * @return ApiResponse&lt;GetNetworkApplianceTrafficShapingUplinkSelection200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkApplianceTrafficShapingUplinkSelection200Response> getNetworkApplianceTrafficShapingUplinkSelection_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkApplianceTrafficShapingUplinkSelection_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<GetNetworkApplianceTrafficShapingUplinkSelection200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Show uplink selection settings for an MX network (asynchronously)
     * Show uplink selection settings for an MX network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceTrafficShapingUplinkSelection_0Async(String networkId, final ApiCallback<GetNetworkApplianceTrafficShapingUplinkSelection200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkApplianceTrafficShapingUplinkSelection_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkApplianceTrafficShapingUplinkSelection200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkApplianceTrafficShaping_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceTrafficShaping_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/trafficShaping"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkApplianceTrafficShaping_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkApplianceTrafficShaping_0(Async)");
        }

        return getNetworkApplianceTrafficShaping_0Call(networkId, _callback);

    }

    /**
     * Display the traffic shaping settings for an MX network
     * Display the traffic shaping settings for an MX network
     * @param networkId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkApplianceTrafficShaping_0(String networkId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkApplianceTrafficShaping_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Display the traffic shaping settings for an MX network
     * Display the traffic shaping settings for an MX network
     * @param networkId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkApplianceTrafficShaping_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkApplianceTrafficShaping_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Display the traffic shaping settings for an MX network (asynchronously)
     * Display the traffic shaping settings for an MX network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceTrafficShaping_0Async(String networkId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkApplianceTrafficShaping_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkApplianceVlan_0
     * @param networkId  (required)
     * @param vlanId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceVlan_0Call(String networkId, String vlanId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/vlans/{vlanId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "vlanId" + "}", localVarApiClient.escapeString(vlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkApplianceVlan_0ValidateBeforeCall(String networkId, String vlanId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkApplianceVlan_0(Async)");
        }

        // verify the required parameter 'vlanId' is set
        if (vlanId == null) {
            throw new ApiException("Missing the required parameter 'vlanId' when calling getNetworkApplianceVlan_0(Async)");
        }

        return getNetworkApplianceVlan_0Call(networkId, vlanId, _callback);

    }

    /**
     * Return a VLAN
     * Return a VLAN
     * @param networkId  (required)
     * @param vlanId  (required)
     * @return GetNetworkApplianceVlans200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkApplianceVlans200ResponseInner getNetworkApplianceVlan_0(String networkId, String vlanId) throws ApiException {
        ApiResponse<GetNetworkApplianceVlans200ResponseInner> localVarResp = getNetworkApplianceVlan_0WithHttpInfo(networkId, vlanId);
        return localVarResp.getData();
    }

    /**
     * Return a VLAN
     * Return a VLAN
     * @param networkId  (required)
     * @param vlanId  (required)
     * @return ApiResponse&lt;GetNetworkApplianceVlans200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkApplianceVlans200ResponseInner> getNetworkApplianceVlan_0WithHttpInfo(String networkId, String vlanId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkApplianceVlan_0ValidateBeforeCall(networkId, vlanId, null);
        Type localVarReturnType = new TypeToken<GetNetworkApplianceVlans200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a VLAN (asynchronously)
     * Return a VLAN
     * @param networkId  (required)
     * @param vlanId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceVlan_0Async(String networkId, String vlanId, final ApiCallback<GetNetworkApplianceVlans200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkApplianceVlan_0ValidateBeforeCall(networkId, vlanId, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkApplianceVlans200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkApplianceVlansSettings_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceVlansSettings_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/vlans/settings"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkApplianceVlansSettings_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkApplianceVlansSettings_0(Async)");
        }

        return getNetworkApplianceVlansSettings_0Call(networkId, _callback);

    }

    /**
     * Returns the enabled status of VLANs for the network
     * Returns the enabled status of VLANs for the network
     * @param networkId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkApplianceVlansSettings_0(String networkId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkApplianceVlansSettings_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Returns the enabled status of VLANs for the network
     * Returns the enabled status of VLANs for the network
     * @param networkId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkApplianceVlansSettings_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkApplianceVlansSettings_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the enabled status of VLANs for the network (asynchronously)
     * Returns the enabled status of VLANs for the network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceVlansSettings_0Async(String networkId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkApplianceVlansSettings_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkApplianceVlans_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceVlans_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/vlans"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkApplianceVlans_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkApplianceVlans_0(Async)");
        }

        return getNetworkApplianceVlans_0Call(networkId, _callback);

    }

    /**
     * List the VLANs for an MX network
     * List the VLANs for an MX network
     * @param networkId  (required)
     * @return List&lt;GetNetworkApplianceVlans200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetNetworkApplianceVlans200ResponseInner> getNetworkApplianceVlans_0(String networkId) throws ApiException {
        ApiResponse<List<GetNetworkApplianceVlans200ResponseInner>> localVarResp = getNetworkApplianceVlans_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * List the VLANs for an MX network
     * List the VLANs for an MX network
     * @param networkId  (required)
     * @return ApiResponse&lt;List&lt;GetNetworkApplianceVlans200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetworkApplianceVlans200ResponseInner>> getNetworkApplianceVlans_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkApplianceVlans_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<List<GetNetworkApplianceVlans200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the VLANs for an MX network (asynchronously)
     * List the VLANs for an MX network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceVlans_0Async(String networkId, final ApiCallback<List<GetNetworkApplianceVlans200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkApplianceVlans_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetworkApplianceVlans200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkApplianceVpnBgp_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceVpnBgp_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/vpn/bgp"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkApplianceVpnBgp_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkApplianceVpnBgp_0(Async)");
        }

        return getNetworkApplianceVpnBgp_0Call(networkId, _callback);

    }

    /**
     * Return a Hub BGP Configuration
     * Return a Hub BGP Configuration
     * @param networkId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkApplianceVpnBgp_0(String networkId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkApplianceVpnBgp_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Return a Hub BGP Configuration
     * Return a Hub BGP Configuration
     * @param networkId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkApplianceVpnBgp_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkApplianceVpnBgp_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a Hub BGP Configuration (asynchronously)
     * Return a Hub BGP Configuration
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceVpnBgp_0Async(String networkId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkApplianceVpnBgp_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkApplianceVpnSiteToSiteVpn_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceVpnSiteToSiteVpn_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/vpn/siteToSiteVpn"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkApplianceVpnSiteToSiteVpn_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkApplianceVpnSiteToSiteVpn_0(Async)");
        }

        return getNetworkApplianceVpnSiteToSiteVpn_0Call(networkId, _callback);

    }

    /**
     * Return the site-to-site VPN settings of a network
     * Return the site-to-site VPN settings of a network. Only valid for MX networks.
     * @param networkId  (required)
     * @return GetNetworkApplianceVpnSiteToSiteVpn200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkApplianceVpnSiteToSiteVpn200Response getNetworkApplianceVpnSiteToSiteVpn_0(String networkId) throws ApiException {
        ApiResponse<GetNetworkApplianceVpnSiteToSiteVpn200Response> localVarResp = getNetworkApplianceVpnSiteToSiteVpn_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Return the site-to-site VPN settings of a network
     * Return the site-to-site VPN settings of a network. Only valid for MX networks.
     * @param networkId  (required)
     * @return ApiResponse&lt;GetNetworkApplianceVpnSiteToSiteVpn200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkApplianceVpnSiteToSiteVpn200Response> getNetworkApplianceVpnSiteToSiteVpn_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkApplianceVpnSiteToSiteVpn_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<GetNetworkApplianceVpnSiteToSiteVpn200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the site-to-site VPN settings of a network (asynchronously)
     * Return the site-to-site VPN settings of a network. Only valid for MX networks.
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceVpnSiteToSiteVpn_0Async(String networkId, final ApiCallback<GetNetworkApplianceVpnSiteToSiteVpn200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkApplianceVpnSiteToSiteVpn_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkApplianceVpnSiteToSiteVpn200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkApplianceWarmSpare_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceWarmSpare_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/warmSpare"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkApplianceWarmSpare_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkApplianceWarmSpare_0(Async)");
        }

        return getNetworkApplianceWarmSpare_0Call(networkId, _callback);

    }

    /**
     * Return MX warm spare settings
     * Return MX warm spare settings
     * @param networkId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkApplianceWarmSpare_0(String networkId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkApplianceWarmSpare_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Return MX warm spare settings
     * Return MX warm spare settings
     * @param networkId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkApplianceWarmSpare_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkApplianceWarmSpare_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return MX warm spare settings (asynchronously)
     * Return MX warm spare settings
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkApplianceWarmSpare_0Async(String networkId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkApplianceWarmSpare_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkCameraQualityRetentionProfile_0
     * @param networkId  (required)
     * @param qualityRetentionProfileId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkCameraQualityRetentionProfile_0Call(String networkId, String qualityRetentionProfileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/camera/qualityRetentionProfiles/{qualityRetentionProfileId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "qualityRetentionProfileId" + "}", localVarApiClient.escapeString(qualityRetentionProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkCameraQualityRetentionProfile_0ValidateBeforeCall(String networkId, String qualityRetentionProfileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkCameraQualityRetentionProfile_0(Async)");
        }

        // verify the required parameter 'qualityRetentionProfileId' is set
        if (qualityRetentionProfileId == null) {
            throw new ApiException("Missing the required parameter 'qualityRetentionProfileId' when calling getNetworkCameraQualityRetentionProfile_0(Async)");
        }

        return getNetworkCameraQualityRetentionProfile_0Call(networkId, qualityRetentionProfileId, _callback);

    }

    /**
     * Retrieve a single quality retention profile
     * Retrieve a single quality retention profile
     * @param networkId  (required)
     * @param qualityRetentionProfileId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkCameraQualityRetentionProfile_0(String networkId, String qualityRetentionProfileId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkCameraQualityRetentionProfile_0WithHttpInfo(networkId, qualityRetentionProfileId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a single quality retention profile
     * Retrieve a single quality retention profile
     * @param networkId  (required)
     * @param qualityRetentionProfileId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkCameraQualityRetentionProfile_0WithHttpInfo(String networkId, String qualityRetentionProfileId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkCameraQualityRetentionProfile_0ValidateBeforeCall(networkId, qualityRetentionProfileId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a single quality retention profile (asynchronously)
     * Retrieve a single quality retention profile
     * @param networkId  (required)
     * @param qualityRetentionProfileId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkCameraQualityRetentionProfile_0Async(String networkId, String qualityRetentionProfileId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkCameraQualityRetentionProfile_0ValidateBeforeCall(networkId, qualityRetentionProfileId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkCameraQualityRetentionProfiles_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkCameraQualityRetentionProfiles_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/camera/qualityRetentionProfiles"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkCameraQualityRetentionProfiles_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkCameraQualityRetentionProfiles_0(Async)");
        }

        return getNetworkCameraQualityRetentionProfiles_0Call(networkId, _callback);

    }

    /**
     * List the quality retention profiles for this network
     * List the quality retention profiles for this network
     * @param networkId  (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getNetworkCameraQualityRetentionProfiles_0(String networkId) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getNetworkCameraQualityRetentionProfiles_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * List the quality retention profiles for this network
     * List the quality retention profiles for this network
     * @param networkId  (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getNetworkCameraQualityRetentionProfiles_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkCameraQualityRetentionProfiles_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the quality retention profiles for this network (asynchronously)
     * List the quality retention profiles for this network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkCameraQualityRetentionProfiles_0Async(String networkId, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkCameraQualityRetentionProfiles_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkCameraSchedules_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkCameraSchedules_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/camera/schedules"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkCameraSchedules_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkCameraSchedules_0(Async)");
        }

        return getNetworkCameraSchedules_0Call(networkId, _callback);

    }

    /**
     * Returns a list of all camera recording schedules.
     * Returns a list of all camera recording schedules.
     * @param networkId  (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getNetworkCameraSchedules_0(String networkId) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getNetworkCameraSchedules_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Returns a list of all camera recording schedules.
     * Returns a list of all camera recording schedules.
     * @param networkId  (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getNetworkCameraSchedules_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkCameraSchedules_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of all camera recording schedules. (asynchronously)
     * Returns a list of all camera recording schedules.
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkCameraSchedules_0Async(String networkId, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkCameraSchedules_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkCameraWirelessProfile_0
     * @param networkId  (required)
     * @param wirelessProfileId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkCameraWirelessProfile_0Call(String networkId, String wirelessProfileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/camera/wirelessProfiles/{wirelessProfileId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "wirelessProfileId" + "}", localVarApiClient.escapeString(wirelessProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkCameraWirelessProfile_0ValidateBeforeCall(String networkId, String wirelessProfileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkCameraWirelessProfile_0(Async)");
        }

        // verify the required parameter 'wirelessProfileId' is set
        if (wirelessProfileId == null) {
            throw new ApiException("Missing the required parameter 'wirelessProfileId' when calling getNetworkCameraWirelessProfile_0(Async)");
        }

        return getNetworkCameraWirelessProfile_0Call(networkId, wirelessProfileId, _callback);

    }

    /**
     * Retrieve a single camera wireless profile.
     * Retrieve a single camera wireless profile.
     * @param networkId  (required)
     * @param wirelessProfileId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkCameraWirelessProfile_0(String networkId, String wirelessProfileId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkCameraWirelessProfile_0WithHttpInfo(networkId, wirelessProfileId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a single camera wireless profile.
     * Retrieve a single camera wireless profile.
     * @param networkId  (required)
     * @param wirelessProfileId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkCameraWirelessProfile_0WithHttpInfo(String networkId, String wirelessProfileId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkCameraWirelessProfile_0ValidateBeforeCall(networkId, wirelessProfileId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a single camera wireless profile. (asynchronously)
     * Retrieve a single camera wireless profile.
     * @param networkId  (required)
     * @param wirelessProfileId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkCameraWirelessProfile_0Async(String networkId, String wirelessProfileId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkCameraWirelessProfile_0ValidateBeforeCall(networkId, wirelessProfileId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkCameraWirelessProfiles_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkCameraWirelessProfiles_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/camera/wirelessProfiles"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkCameraWirelessProfiles_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkCameraWirelessProfiles_0(Async)");
        }

        return getNetworkCameraWirelessProfiles_0Call(networkId, _callback);

    }

    /**
     * List the camera wireless profiles for this network.
     * List the camera wireless profiles for this network.
     * @param networkId  (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getNetworkCameraWirelessProfiles_0(String networkId) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getNetworkCameraWirelessProfiles_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * List the camera wireless profiles for this network.
     * List the camera wireless profiles for this network.
     * @param networkId  (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getNetworkCameraWirelessProfiles_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkCameraWirelessProfiles_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the camera wireless profiles for this network. (asynchronously)
     * List the camera wireless profiles for this network.
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkCameraWirelessProfiles_0Async(String networkId, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkCameraWirelessProfiles_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkCellularGatewayConnectivityMonitoringDestinations_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkCellularGatewayConnectivityMonitoringDestinations_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/cellularGateway/connectivityMonitoringDestinations"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkCellularGatewayConnectivityMonitoringDestinations_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkCellularGatewayConnectivityMonitoringDestinations_0(Async)");
        }

        return getNetworkCellularGatewayConnectivityMonitoringDestinations_0Call(networkId, _callback);

    }

    /**
     * Return the connectivity testing destinations for an MG network
     * Return the connectivity testing destinations for an MG network
     * @param networkId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkCellularGatewayConnectivityMonitoringDestinations_0(String networkId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkCellularGatewayConnectivityMonitoringDestinations_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Return the connectivity testing destinations for an MG network
     * Return the connectivity testing destinations for an MG network
     * @param networkId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkCellularGatewayConnectivityMonitoringDestinations_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkCellularGatewayConnectivityMonitoringDestinations_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the connectivity testing destinations for an MG network (asynchronously)
     * Return the connectivity testing destinations for an MG network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkCellularGatewayConnectivityMonitoringDestinations_0Async(String networkId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkCellularGatewayConnectivityMonitoringDestinations_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkCellularGatewayDhcp_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkCellularGatewayDhcp_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/cellularGateway/dhcp"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkCellularGatewayDhcp_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkCellularGatewayDhcp_0(Async)");
        }

        return getNetworkCellularGatewayDhcp_0Call(networkId, _callback);

    }

    /**
     * List common DHCP settings of MGs
     * List common DHCP settings of MGs
     * @param networkId  (required)
     * @return GetNetworkCellularGatewayDhcp200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkCellularGatewayDhcp200Response getNetworkCellularGatewayDhcp_0(String networkId) throws ApiException {
        ApiResponse<GetNetworkCellularGatewayDhcp200Response> localVarResp = getNetworkCellularGatewayDhcp_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * List common DHCP settings of MGs
     * List common DHCP settings of MGs
     * @param networkId  (required)
     * @return ApiResponse&lt;GetNetworkCellularGatewayDhcp200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkCellularGatewayDhcp200Response> getNetworkCellularGatewayDhcp_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkCellularGatewayDhcp_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<GetNetworkCellularGatewayDhcp200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List common DHCP settings of MGs (asynchronously)
     * List common DHCP settings of MGs
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkCellularGatewayDhcp_0Async(String networkId, final ApiCallback<GetNetworkCellularGatewayDhcp200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkCellularGatewayDhcp_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkCellularGatewayDhcp200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkCellularGatewaySubnetPool_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkCellularGatewaySubnetPool_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/cellularGateway/subnetPool"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkCellularGatewaySubnetPool_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkCellularGatewaySubnetPool_0(Async)");
        }

        return getNetworkCellularGatewaySubnetPool_0Call(networkId, _callback);

    }

    /**
     * Return the subnet pool and mask configured for MGs in the network.
     * Return the subnet pool and mask configured for MGs in the network.
     * @param networkId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkCellularGatewaySubnetPool_0(String networkId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkCellularGatewaySubnetPool_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Return the subnet pool and mask configured for MGs in the network.
     * Return the subnet pool and mask configured for MGs in the network.
     * @param networkId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkCellularGatewaySubnetPool_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkCellularGatewaySubnetPool_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the subnet pool and mask configured for MGs in the network. (asynchronously)
     * Return the subnet pool and mask configured for MGs in the network.
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkCellularGatewaySubnetPool_0Async(String networkId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkCellularGatewaySubnetPool_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkCellularGatewayUplink_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkCellularGatewayUplink_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/cellularGateway/uplink"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkCellularGatewayUplink_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkCellularGatewayUplink_0(Async)");
        }

        return getNetworkCellularGatewayUplink_0Call(networkId, _callback);

    }

    /**
     * Returns the uplink settings for your MG network.
     * Returns the uplink settings for your MG network.
     * @param networkId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkCellularGatewayUplink_0(String networkId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkCellularGatewayUplink_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Returns the uplink settings for your MG network.
     * Returns the uplink settings for your MG network.
     * @param networkId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkCellularGatewayUplink_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkCellularGatewayUplink_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the uplink settings for your MG network. (asynchronously)
     * Returns the uplink settings for your MG network.
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkCellularGatewayUplink_0Async(String networkId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkCellularGatewayUplink_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkClientPolicy_0
     * @param networkId  (required)
     * @param clientId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkClientPolicy_0Call(String networkId, String clientId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/clients/{clientId}/policy"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "clientId" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkClientPolicy_0ValidateBeforeCall(String networkId, String clientId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkClientPolicy_0(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getNetworkClientPolicy_0(Async)");
        }

        return getNetworkClientPolicy_0Call(networkId, clientId, _callback);

    }

    /**
     * Return the policy assigned to a client on the network
     * Return the policy assigned to a client on the network. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clientId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkClientPolicy_0(String networkId, String clientId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkClientPolicy_0WithHttpInfo(networkId, clientId);
        return localVarResp.getData();
    }

    /**
     * Return the policy assigned to a client on the network
     * Return the policy assigned to a client on the network. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clientId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkClientPolicy_0WithHttpInfo(String networkId, String clientId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkClientPolicy_0ValidateBeforeCall(networkId, clientId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the policy assigned to a client on the network (asynchronously)
     * Return the policy assigned to a client on the network. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clientId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkClientPolicy_0Async(String networkId, String clientId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkClientPolicy_0ValidateBeforeCall(networkId, clientId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkClientSplashAuthorizationStatus_0
     * @param networkId  (required)
     * @param clientId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkClientSplashAuthorizationStatus_0Call(String networkId, String clientId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/clients/{clientId}/splashAuthorizationStatus"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "clientId" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkClientSplashAuthorizationStatus_0ValidateBeforeCall(String networkId, String clientId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkClientSplashAuthorizationStatus_0(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getNetworkClientSplashAuthorizationStatus_0(Async)");
        }

        return getNetworkClientSplashAuthorizationStatus_0Call(networkId, clientId, _callback);

    }

    /**
     * Return the splash authorization for a client, for each SSID they&#39;ve associated with through splash
     * Return the splash authorization for a client, for each SSID they&#39;ve associated with through splash. Only enabled SSIDs with Click-through splash enabled will be included. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clientId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkClientSplashAuthorizationStatus_0(String networkId, String clientId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkClientSplashAuthorizationStatus_0WithHttpInfo(networkId, clientId);
        return localVarResp.getData();
    }

    /**
     * Return the splash authorization for a client, for each SSID they&#39;ve associated with through splash
     * Return the splash authorization for a client, for each SSID they&#39;ve associated with through splash. Only enabled SSIDs with Click-through splash enabled will be included. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clientId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkClientSplashAuthorizationStatus_0WithHttpInfo(String networkId, String clientId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkClientSplashAuthorizationStatus_0ValidateBeforeCall(networkId, clientId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the splash authorization for a client, for each SSID they&#39;ve associated with through splash (asynchronously)
     * Return the splash authorization for a client, for each SSID they&#39;ve associated with through splash. Only enabled SSIDs with Click-through splash enabled will be included. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clientId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkClientSplashAuthorizationStatus_0Async(String networkId, String clientId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkClientSplashAuthorizationStatus_0ValidateBeforeCall(networkId, clientId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkDevices_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkDevices_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/devices"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkDevices_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkDevices_0(Async)");
        }

        return getNetworkDevices_0Call(networkId, _callback);

    }

    /**
     * List the devices in a network
     * List the devices in a network
     * @param networkId  (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getNetworkDevices_0(String networkId) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getNetworkDevices_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * List the devices in a network
     * List the devices in a network
     * @param networkId  (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getNetworkDevices_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkDevices_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the devices in a network (asynchronously)
     * List the devices in a network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkDevices_0Async(String networkId, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkDevices_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkFirmwareUpgradesStagedEvents_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkFirmwareUpgradesStagedEvents_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/firmwareUpgrades/staged/events"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkFirmwareUpgradesStagedEvents_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkFirmwareUpgradesStagedEvents_0(Async)");
        }

        return getNetworkFirmwareUpgradesStagedEvents_0Call(networkId, _callback);

    }

    /**
     * Get the Staged Upgrade Event from a network
     * Get the Staged Upgrade Event from a network
     * @param networkId  (required)
     * @return GetNetworkFirmwareUpgradesStagedEvents200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkFirmwareUpgradesStagedEvents200Response getNetworkFirmwareUpgradesStagedEvents_0(String networkId) throws ApiException {
        ApiResponse<GetNetworkFirmwareUpgradesStagedEvents200Response> localVarResp = getNetworkFirmwareUpgradesStagedEvents_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Get the Staged Upgrade Event from a network
     * Get the Staged Upgrade Event from a network
     * @param networkId  (required)
     * @return ApiResponse&lt;GetNetworkFirmwareUpgradesStagedEvents200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkFirmwareUpgradesStagedEvents200Response> getNetworkFirmwareUpgradesStagedEvents_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkFirmwareUpgradesStagedEvents_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<GetNetworkFirmwareUpgradesStagedEvents200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the Staged Upgrade Event from a network (asynchronously)
     * Get the Staged Upgrade Event from a network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkFirmwareUpgradesStagedEvents_0Async(String networkId, final ApiCallback<GetNetworkFirmwareUpgradesStagedEvents200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkFirmwareUpgradesStagedEvents_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkFirmwareUpgradesStagedEvents200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkFirmwareUpgradesStagedGroup_0
     * @param networkId  (required)
     * @param groupId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkFirmwareUpgradesStagedGroup_0Call(String networkId, String groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/firmwareUpgrades/staged/groups/{groupId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkFirmwareUpgradesStagedGroup_0ValidateBeforeCall(String networkId, String groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkFirmwareUpgradesStagedGroup_0(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getNetworkFirmwareUpgradesStagedGroup_0(Async)");
        }

        return getNetworkFirmwareUpgradesStagedGroup_0Call(networkId, groupId, _callback);

    }

    /**
     * Get a Staged Upgrade Group from a network
     * Get a Staged Upgrade Group from a network
     * @param networkId  (required)
     * @param groupId  (required)
     * @return GetNetworkFirmwareUpgradesStagedGroups200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkFirmwareUpgradesStagedGroups200ResponseInner getNetworkFirmwareUpgradesStagedGroup_0(String networkId, String groupId) throws ApiException {
        ApiResponse<GetNetworkFirmwareUpgradesStagedGroups200ResponseInner> localVarResp = getNetworkFirmwareUpgradesStagedGroup_0WithHttpInfo(networkId, groupId);
        return localVarResp.getData();
    }

    /**
     * Get a Staged Upgrade Group from a network
     * Get a Staged Upgrade Group from a network
     * @param networkId  (required)
     * @param groupId  (required)
     * @return ApiResponse&lt;GetNetworkFirmwareUpgradesStagedGroups200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkFirmwareUpgradesStagedGroups200ResponseInner> getNetworkFirmwareUpgradesStagedGroup_0WithHttpInfo(String networkId, String groupId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkFirmwareUpgradesStagedGroup_0ValidateBeforeCall(networkId, groupId, null);
        Type localVarReturnType = new TypeToken<GetNetworkFirmwareUpgradesStagedGroups200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Staged Upgrade Group from a network (asynchronously)
     * Get a Staged Upgrade Group from a network
     * @param networkId  (required)
     * @param groupId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkFirmwareUpgradesStagedGroup_0Async(String networkId, String groupId, final ApiCallback<GetNetworkFirmwareUpgradesStagedGroups200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkFirmwareUpgradesStagedGroup_0ValidateBeforeCall(networkId, groupId, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkFirmwareUpgradesStagedGroups200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkFirmwareUpgradesStagedGroups_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkFirmwareUpgradesStagedGroups_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/firmwareUpgrades/staged/groups"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkFirmwareUpgradesStagedGroups_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkFirmwareUpgradesStagedGroups_0(Async)");
        }

        return getNetworkFirmwareUpgradesStagedGroups_0Call(networkId, _callback);

    }

    /**
     * List of Staged Upgrade Groups in a network
     * List of Staged Upgrade Groups in a network
     * @param networkId  (required)
     * @return List&lt;GetNetworkFirmwareUpgradesStagedGroups200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetNetworkFirmwareUpgradesStagedGroups200ResponseInner> getNetworkFirmwareUpgradesStagedGroups_0(String networkId) throws ApiException {
        ApiResponse<List<GetNetworkFirmwareUpgradesStagedGroups200ResponseInner>> localVarResp = getNetworkFirmwareUpgradesStagedGroups_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * List of Staged Upgrade Groups in a network
     * List of Staged Upgrade Groups in a network
     * @param networkId  (required)
     * @return ApiResponse&lt;List&lt;GetNetworkFirmwareUpgradesStagedGroups200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetworkFirmwareUpgradesStagedGroups200ResponseInner>> getNetworkFirmwareUpgradesStagedGroups_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkFirmwareUpgradesStagedGroups_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<List<GetNetworkFirmwareUpgradesStagedGroups200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List of Staged Upgrade Groups in a network (asynchronously)
     * List of Staged Upgrade Groups in a network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkFirmwareUpgradesStagedGroups_0Async(String networkId, final ApiCallback<List<GetNetworkFirmwareUpgradesStagedGroups200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkFirmwareUpgradesStagedGroups_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetworkFirmwareUpgradesStagedGroups200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkFirmwareUpgradesStagedStages_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkFirmwareUpgradesStagedStages_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/firmwareUpgrades/staged/stages"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkFirmwareUpgradesStagedStages_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkFirmwareUpgradesStagedStages_0(Async)");
        }

        return getNetworkFirmwareUpgradesStagedStages_0Call(networkId, _callback);

    }

    /**
     * Order of Staged Upgrade Groups in a network
     * Order of Staged Upgrade Groups in a network
     * @param networkId  (required)
     * @return List&lt;GetNetworkFirmwareUpgradesStagedStages200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetNetworkFirmwareUpgradesStagedStages200ResponseInner> getNetworkFirmwareUpgradesStagedStages_0(String networkId) throws ApiException {
        ApiResponse<List<GetNetworkFirmwareUpgradesStagedStages200ResponseInner>> localVarResp = getNetworkFirmwareUpgradesStagedStages_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Order of Staged Upgrade Groups in a network
     * Order of Staged Upgrade Groups in a network
     * @param networkId  (required)
     * @return ApiResponse&lt;List&lt;GetNetworkFirmwareUpgradesStagedStages200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetworkFirmwareUpgradesStagedStages200ResponseInner>> getNetworkFirmwareUpgradesStagedStages_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkFirmwareUpgradesStagedStages_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<List<GetNetworkFirmwareUpgradesStagedStages200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Order of Staged Upgrade Groups in a network (asynchronously)
     * Order of Staged Upgrade Groups in a network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkFirmwareUpgradesStagedStages_0Async(String networkId, final ApiCallback<List<GetNetworkFirmwareUpgradesStagedStages200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkFirmwareUpgradesStagedStages_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetworkFirmwareUpgradesStagedStages200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkFirmwareUpgrades_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkFirmwareUpgrades_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/firmwareUpgrades"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkFirmwareUpgrades_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkFirmwareUpgrades_0(Async)");
        }

        return getNetworkFirmwareUpgrades_0Call(networkId, _callback);

    }

    /**
     * Get firmware upgrade information for a network
     * Get firmware upgrade information for a network
     * @param networkId  (required)
     * @return GetNetworkFirmwareUpgrades200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkFirmwareUpgrades200Response getNetworkFirmwareUpgrades_0(String networkId) throws ApiException {
        ApiResponse<GetNetworkFirmwareUpgrades200Response> localVarResp = getNetworkFirmwareUpgrades_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Get firmware upgrade information for a network
     * Get firmware upgrade information for a network
     * @param networkId  (required)
     * @return ApiResponse&lt;GetNetworkFirmwareUpgrades200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkFirmwareUpgrades200Response> getNetworkFirmwareUpgrades_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkFirmwareUpgrades_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<GetNetworkFirmwareUpgrades200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get firmware upgrade information for a network (asynchronously)
     * Get firmware upgrade information for a network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkFirmwareUpgrades_0Async(String networkId, final ApiCallback<GetNetworkFirmwareUpgrades200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkFirmwareUpgrades_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkFirmwareUpgrades200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkFloorPlan_0
     * @param networkId  (required)
     * @param floorPlanId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkFloorPlan_0Call(String networkId, String floorPlanId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/floorPlans/{floorPlanId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "floorPlanId" + "}", localVarApiClient.escapeString(floorPlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkFloorPlan_0ValidateBeforeCall(String networkId, String floorPlanId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkFloorPlan_0(Async)");
        }

        // verify the required parameter 'floorPlanId' is set
        if (floorPlanId == null) {
            throw new ApiException("Missing the required parameter 'floorPlanId' when calling getNetworkFloorPlan_0(Async)");
        }

        return getNetworkFloorPlan_0Call(networkId, floorPlanId, _callback);

    }

    /**
     * Find a floor plan by ID
     * Find a floor plan by ID
     * @param networkId  (required)
     * @param floorPlanId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkFloorPlan_0(String networkId, String floorPlanId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkFloorPlan_0WithHttpInfo(networkId, floorPlanId);
        return localVarResp.getData();
    }

    /**
     * Find a floor plan by ID
     * Find a floor plan by ID
     * @param networkId  (required)
     * @param floorPlanId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkFloorPlan_0WithHttpInfo(String networkId, String floorPlanId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkFloorPlan_0ValidateBeforeCall(networkId, floorPlanId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find a floor plan by ID (asynchronously)
     * Find a floor plan by ID
     * @param networkId  (required)
     * @param floorPlanId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkFloorPlan_0Async(String networkId, String floorPlanId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkFloorPlan_0ValidateBeforeCall(networkId, floorPlanId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkFloorPlans_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkFloorPlans_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/floorPlans"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkFloorPlans_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkFloorPlans_0(Async)");
        }

        return getNetworkFloorPlans_0Call(networkId, _callback);

    }

    /**
     * List the floor plans that belong to your network
     * List the floor plans that belong to your network
     * @param networkId  (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getNetworkFloorPlans_0(String networkId) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getNetworkFloorPlans_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * List the floor plans that belong to your network
     * List the floor plans that belong to your network
     * @param networkId  (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getNetworkFloorPlans_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkFloorPlans_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the floor plans that belong to your network (asynchronously)
     * List the floor plans that belong to your network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkFloorPlans_0Async(String networkId, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkFloorPlans_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkGroupPolicies_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkGroupPolicies_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/groupPolicies"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkGroupPolicies_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkGroupPolicies_0(Async)");
        }

        return getNetworkGroupPolicies_0Call(networkId, _callback);

    }

    /**
     * List the group policies in a network
     * List the group policies in a network
     * @param networkId  (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getNetworkGroupPolicies_0(String networkId) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getNetworkGroupPolicies_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * List the group policies in a network
     * List the group policies in a network
     * @param networkId  (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getNetworkGroupPolicies_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkGroupPolicies_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the group policies in a network (asynchronously)
     * List the group policies in a network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkGroupPolicies_0Async(String networkId, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkGroupPolicies_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkGroupPolicy_0
     * @param networkId  (required)
     * @param groupPolicyId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkGroupPolicy_0Call(String networkId, String groupPolicyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/groupPolicies/{groupPolicyId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "groupPolicyId" + "}", localVarApiClient.escapeString(groupPolicyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkGroupPolicy_0ValidateBeforeCall(String networkId, String groupPolicyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkGroupPolicy_0(Async)");
        }

        // verify the required parameter 'groupPolicyId' is set
        if (groupPolicyId == null) {
            throw new ApiException("Missing the required parameter 'groupPolicyId' when calling getNetworkGroupPolicy_0(Async)");
        }

        return getNetworkGroupPolicy_0Call(networkId, groupPolicyId, _callback);

    }

    /**
     * Display a group policy
     * Display a group policy
     * @param networkId  (required)
     * @param groupPolicyId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkGroupPolicy_0(String networkId, String groupPolicyId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkGroupPolicy_0WithHttpInfo(networkId, groupPolicyId);
        return localVarResp.getData();
    }

    /**
     * Display a group policy
     * Display a group policy
     * @param networkId  (required)
     * @param groupPolicyId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkGroupPolicy_0WithHttpInfo(String networkId, String groupPolicyId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkGroupPolicy_0ValidateBeforeCall(networkId, groupPolicyId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Display a group policy (asynchronously)
     * Display a group policy
     * @param networkId  (required)
     * @param groupPolicyId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkGroupPolicy_0Async(String networkId, String groupPolicyId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkGroupPolicy_0ValidateBeforeCall(networkId, groupPolicyId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkHealthAlerts_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkHealthAlerts_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/health/alerts"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkHealthAlerts_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkHealthAlerts_0(Async)");
        }

        return getNetworkHealthAlerts_0Call(networkId, _callback);

    }

    /**
     * Return all global alerts on this network
     * Return all global alerts on this network
     * @param networkId  (required)
     * @return List&lt;GetNetworkHealthAlerts200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetNetworkHealthAlerts200ResponseInner> getNetworkHealthAlerts_0(String networkId) throws ApiException {
        ApiResponse<List<GetNetworkHealthAlerts200ResponseInner>> localVarResp = getNetworkHealthAlerts_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Return all global alerts on this network
     * Return all global alerts on this network
     * @param networkId  (required)
     * @return ApiResponse&lt;List&lt;GetNetworkHealthAlerts200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetworkHealthAlerts200ResponseInner>> getNetworkHealthAlerts_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkHealthAlerts_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<List<GetNetworkHealthAlerts200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return all global alerts on this network (asynchronously)
     * Return all global alerts on this network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkHealthAlerts_0Async(String networkId, final ApiCallback<List<GetNetworkHealthAlerts200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkHealthAlerts_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetworkHealthAlerts200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkMerakiAuthUser_0
     * @param networkId  (required)
     * @param merakiAuthUserId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkMerakiAuthUser_0Call(String networkId, String merakiAuthUserId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/merakiAuthUsers/{merakiAuthUserId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "merakiAuthUserId" + "}", localVarApiClient.escapeString(merakiAuthUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkMerakiAuthUser_0ValidateBeforeCall(String networkId, String merakiAuthUserId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkMerakiAuthUser_0(Async)");
        }

        // verify the required parameter 'merakiAuthUserId' is set
        if (merakiAuthUserId == null) {
            throw new ApiException("Missing the required parameter 'merakiAuthUserId' when calling getNetworkMerakiAuthUser_0(Async)");
        }

        return getNetworkMerakiAuthUser_0Call(networkId, merakiAuthUserId, _callback);

    }

    /**
     * Return the Meraki Auth splash guest, RADIUS, or client VPN user
     * Return the Meraki Auth splash guest, RADIUS, or client VPN user
     * @param networkId  (required)
     * @param merakiAuthUserId  (required)
     * @return GetNetworkMerakiAuthUsers200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkMerakiAuthUsers200ResponseInner getNetworkMerakiAuthUser_0(String networkId, String merakiAuthUserId) throws ApiException {
        ApiResponse<GetNetworkMerakiAuthUsers200ResponseInner> localVarResp = getNetworkMerakiAuthUser_0WithHttpInfo(networkId, merakiAuthUserId);
        return localVarResp.getData();
    }

    /**
     * Return the Meraki Auth splash guest, RADIUS, or client VPN user
     * Return the Meraki Auth splash guest, RADIUS, or client VPN user
     * @param networkId  (required)
     * @param merakiAuthUserId  (required)
     * @return ApiResponse&lt;GetNetworkMerakiAuthUsers200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkMerakiAuthUsers200ResponseInner> getNetworkMerakiAuthUser_0WithHttpInfo(String networkId, String merakiAuthUserId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkMerakiAuthUser_0ValidateBeforeCall(networkId, merakiAuthUserId, null);
        Type localVarReturnType = new TypeToken<GetNetworkMerakiAuthUsers200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the Meraki Auth splash guest, RADIUS, or client VPN user (asynchronously)
     * Return the Meraki Auth splash guest, RADIUS, or client VPN user
     * @param networkId  (required)
     * @param merakiAuthUserId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkMerakiAuthUser_0Async(String networkId, String merakiAuthUserId, final ApiCallback<GetNetworkMerakiAuthUsers200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkMerakiAuthUser_0ValidateBeforeCall(networkId, merakiAuthUserId, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkMerakiAuthUsers200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkMerakiAuthUsers_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkMerakiAuthUsers_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/merakiAuthUsers"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkMerakiAuthUsers_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkMerakiAuthUsers_0(Async)");
        }

        return getNetworkMerakiAuthUsers_0Call(networkId, _callback);

    }

    /**
     * List the users configured under Meraki Authentication for a network (splash guest or RADIUS users for a wireless network, or client VPN users for a wired network)
     * List the users configured under Meraki Authentication for a network (splash guest or RADIUS users for a wireless network, or client VPN users for a wired network)
     * @param networkId  (required)
     * @return List&lt;GetNetworkMerakiAuthUsers200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetNetworkMerakiAuthUsers200ResponseInner> getNetworkMerakiAuthUsers_0(String networkId) throws ApiException {
        ApiResponse<List<GetNetworkMerakiAuthUsers200ResponseInner>> localVarResp = getNetworkMerakiAuthUsers_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * List the users configured under Meraki Authentication for a network (splash guest or RADIUS users for a wireless network, or client VPN users for a wired network)
     * List the users configured under Meraki Authentication for a network (splash guest or RADIUS users for a wireless network, or client VPN users for a wired network)
     * @param networkId  (required)
     * @return ApiResponse&lt;List&lt;GetNetworkMerakiAuthUsers200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetworkMerakiAuthUsers200ResponseInner>> getNetworkMerakiAuthUsers_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkMerakiAuthUsers_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<List<GetNetworkMerakiAuthUsers200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the users configured under Meraki Authentication for a network (splash guest or RADIUS users for a wireless network, or client VPN users for a wired network) (asynchronously)
     * List the users configured under Meraki Authentication for a network (splash guest or RADIUS users for a wireless network, or client VPN users for a wired network)
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkMerakiAuthUsers_0Async(String networkId, final ApiCallback<List<GetNetworkMerakiAuthUsers200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkMerakiAuthUsers_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetworkMerakiAuthUsers200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkMqttBroker_0
     * @param networkId  (required)
     * @param mqttBrokerId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkMqttBroker_0Call(String networkId, String mqttBrokerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/mqttBrokers/{mqttBrokerId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "mqttBrokerId" + "}", localVarApiClient.escapeString(mqttBrokerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkMqttBroker_0ValidateBeforeCall(String networkId, String mqttBrokerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkMqttBroker_0(Async)");
        }

        // verify the required parameter 'mqttBrokerId' is set
        if (mqttBrokerId == null) {
            throw new ApiException("Missing the required parameter 'mqttBrokerId' when calling getNetworkMqttBroker_0(Async)");
        }

        return getNetworkMqttBroker_0Call(networkId, mqttBrokerId, _callback);

    }

    /**
     * Return an MQTT broker
     * Return an MQTT broker
     * @param networkId  (required)
     * @param mqttBrokerId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkMqttBroker_0(String networkId, String mqttBrokerId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkMqttBroker_0WithHttpInfo(networkId, mqttBrokerId);
        return localVarResp.getData();
    }

    /**
     * Return an MQTT broker
     * Return an MQTT broker
     * @param networkId  (required)
     * @param mqttBrokerId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkMqttBroker_0WithHttpInfo(String networkId, String mqttBrokerId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkMqttBroker_0ValidateBeforeCall(networkId, mqttBrokerId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return an MQTT broker (asynchronously)
     * Return an MQTT broker
     * @param networkId  (required)
     * @param mqttBrokerId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkMqttBroker_0Async(String networkId, String mqttBrokerId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkMqttBroker_0ValidateBeforeCall(networkId, mqttBrokerId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkMqttBrokers_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkMqttBrokers_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/mqttBrokers"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkMqttBrokers_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkMqttBrokers_0(Async)");
        }

        return getNetworkMqttBrokers_0Call(networkId, _callback);

    }

    /**
     * List the MQTT brokers for this network
     * List the MQTT brokers for this network
     * @param networkId  (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getNetworkMqttBrokers_0(String networkId) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getNetworkMqttBrokers_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * List the MQTT brokers for this network
     * List the MQTT brokers for this network
     * @param networkId  (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getNetworkMqttBrokers_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkMqttBrokers_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the MQTT brokers for this network (asynchronously)
     * List the MQTT brokers for this network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkMqttBrokers_0Async(String networkId, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkMqttBrokers_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkNetflow_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkNetflow_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/netflow"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkNetflow_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkNetflow_0(Async)");
        }

        return getNetworkNetflow_0Call(networkId, _callback);

    }

    /**
     * Return the NetFlow traffic reporting settings for a network
     * Return the NetFlow traffic reporting settings for a network
     * @param networkId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkNetflow_0(String networkId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkNetflow_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Return the NetFlow traffic reporting settings for a network
     * Return the NetFlow traffic reporting settings for a network
     * @param networkId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkNetflow_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkNetflow_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the NetFlow traffic reporting settings for a network (asynchronously)
     * Return the NetFlow traffic reporting settings for a network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkNetflow_0Async(String networkId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkNetflow_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkPiiPiiKeys_0
     * @param networkId  (required)
     * @param username The username of a Systems Manager user (optional)
     * @param email The email of a network user account or a Systems Manager device (optional)
     * @param mac The MAC of a network client device or a Systems Manager device (optional)
     * @param serial The serial of a Systems Manager device (optional)
     * @param imei The IMEI of a Systems Manager device (optional)
     * @param bluetoothMac The MAC of a Bluetooth client (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkPiiPiiKeys_0Call(String networkId, String username, String email, String mac, String serial, String imei, String bluetoothMac, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/pii/piiKeys"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (mac != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac", mac));
        }

        if (serial != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial", serial));
        }

        if (imei != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("imei", imei));
        }

        if (bluetoothMac != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bluetoothMac", bluetoothMac));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkPiiPiiKeys_0ValidateBeforeCall(String networkId, String username, String email, String mac, String serial, String imei, String bluetoothMac, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkPiiPiiKeys_0(Async)");
        }

        return getNetworkPiiPiiKeys_0Call(networkId, username, email, mac, serial, imei, bluetoothMac, _callback);

    }

    /**
     * List the keys required to access Personally Identifiable Information (PII) for a given identifier
     * List the keys required to access Personally Identifiable Information (PII) for a given identifier. Exactly one identifier will be accepted. If the organization contains org-wide Systems Manager users matching the key provided then there will be an entry with the key \&quot;0\&quot; containing the applicable keys.  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/piiKeys &#x60;&#x60;&#x60;
     * @param networkId  (required)
     * @param username The username of a Systems Manager user (optional)
     * @param email The email of a network user account or a Systems Manager device (optional)
     * @param mac The MAC of a network client device or a Systems Manager device (optional)
     * @param serial The serial of a Systems Manager device (optional)
     * @param imei The IMEI of a Systems Manager device (optional)
     * @param bluetoothMac The MAC of a Bluetooth client (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkPiiPiiKeys_0(String networkId, String username, String email, String mac, String serial, String imei, String bluetoothMac) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkPiiPiiKeys_0WithHttpInfo(networkId, username, email, mac, serial, imei, bluetoothMac);
        return localVarResp.getData();
    }

    /**
     * List the keys required to access Personally Identifiable Information (PII) for a given identifier
     * List the keys required to access Personally Identifiable Information (PII) for a given identifier. Exactly one identifier will be accepted. If the organization contains org-wide Systems Manager users matching the key provided then there will be an entry with the key \&quot;0\&quot; containing the applicable keys.  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/piiKeys &#x60;&#x60;&#x60;
     * @param networkId  (required)
     * @param username The username of a Systems Manager user (optional)
     * @param email The email of a network user account or a Systems Manager device (optional)
     * @param mac The MAC of a network client device or a Systems Manager device (optional)
     * @param serial The serial of a Systems Manager device (optional)
     * @param imei The IMEI of a Systems Manager device (optional)
     * @param bluetoothMac The MAC of a Bluetooth client (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkPiiPiiKeys_0WithHttpInfo(String networkId, String username, String email, String mac, String serial, String imei, String bluetoothMac) throws ApiException {
        okhttp3.Call localVarCall = getNetworkPiiPiiKeys_0ValidateBeforeCall(networkId, username, email, mac, serial, imei, bluetoothMac, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the keys required to access Personally Identifiable Information (PII) for a given identifier (asynchronously)
     * List the keys required to access Personally Identifiable Information (PII) for a given identifier. Exactly one identifier will be accepted. If the organization contains org-wide Systems Manager users matching the key provided then there will be an entry with the key \&quot;0\&quot; containing the applicable keys.  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/piiKeys &#x60;&#x60;&#x60;
     * @param networkId  (required)
     * @param username The username of a Systems Manager user (optional)
     * @param email The email of a network user account or a Systems Manager device (optional)
     * @param mac The MAC of a network client device or a Systems Manager device (optional)
     * @param serial The serial of a Systems Manager device (optional)
     * @param imei The IMEI of a Systems Manager device (optional)
     * @param bluetoothMac The MAC of a Bluetooth client (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkPiiPiiKeys_0Async(String networkId, String username, String email, String mac, String serial, String imei, String bluetoothMac, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkPiiPiiKeys_0ValidateBeforeCall(networkId, username, email, mac, serial, imei, bluetoothMac, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkPiiRequest_0
     * @param networkId  (required)
     * @param requestId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkPiiRequest_0Call(String networkId, String requestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/pii/requests/{requestId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "requestId" + "}", localVarApiClient.escapeString(requestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkPiiRequest_0ValidateBeforeCall(String networkId, String requestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkPiiRequest_0(Async)");
        }

        // verify the required parameter 'requestId' is set
        if (requestId == null) {
            throw new ApiException("Missing the required parameter 'requestId' when calling getNetworkPiiRequest_0(Async)");
        }

        return getNetworkPiiRequest_0Call(networkId, requestId, _callback);

    }

    /**
     * Return a PII request
     * Return a PII request  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/requests/{requestId} &#x60;&#x60;&#x60;
     * @param networkId  (required)
     * @param requestId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkPiiRequest_0(String networkId, String requestId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkPiiRequest_0WithHttpInfo(networkId, requestId);
        return localVarResp.getData();
    }

    /**
     * Return a PII request
     * Return a PII request  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/requests/{requestId} &#x60;&#x60;&#x60;
     * @param networkId  (required)
     * @param requestId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkPiiRequest_0WithHttpInfo(String networkId, String requestId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkPiiRequest_0ValidateBeforeCall(networkId, requestId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a PII request (asynchronously)
     * Return a PII request  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/requests/{requestId} &#x60;&#x60;&#x60;
     * @param networkId  (required)
     * @param requestId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkPiiRequest_0Async(String networkId, String requestId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkPiiRequest_0ValidateBeforeCall(networkId, requestId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkPiiRequests_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkPiiRequests_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/pii/requests"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkPiiRequests_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkPiiRequests_0(Async)");
        }

        return getNetworkPiiRequests_0Call(networkId, _callback);

    }

    /**
     * List the PII requests for this network or organization
     * List the PII requests for this network or organization  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/requests &#x60;&#x60;&#x60;
     * @param networkId  (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getNetworkPiiRequests_0(String networkId) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getNetworkPiiRequests_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * List the PII requests for this network or organization
     * List the PII requests for this network or organization  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/requests &#x60;&#x60;&#x60;
     * @param networkId  (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getNetworkPiiRequests_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkPiiRequests_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the PII requests for this network or organization (asynchronously)
     * List the PII requests for this network or organization  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/requests &#x60;&#x60;&#x60;
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkPiiRequests_0Async(String networkId, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkPiiRequests_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkPiiSmDevicesForKey_0
     * @param networkId  (required)
     * @param username The username of a Systems Manager user (optional)
     * @param email The email of a network user account or a Systems Manager device (optional)
     * @param mac The MAC of a network client device or a Systems Manager device (optional)
     * @param serial The serial of a Systems Manager device (optional)
     * @param imei The IMEI of a Systems Manager device (optional)
     * @param bluetoothMac The MAC of a Bluetooth client (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkPiiSmDevicesForKey_0Call(String networkId, String username, String email, String mac, String serial, String imei, String bluetoothMac, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/pii/smDevicesForKey"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (mac != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac", mac));
        }

        if (serial != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial", serial));
        }

        if (imei != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("imei", imei));
        }

        if (bluetoothMac != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bluetoothMac", bluetoothMac));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkPiiSmDevicesForKey_0ValidateBeforeCall(String networkId, String username, String email, String mac, String serial, String imei, String bluetoothMac, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkPiiSmDevicesForKey_0(Async)");
        }

        return getNetworkPiiSmDevicesForKey_0Call(networkId, username, email, mac, serial, imei, bluetoothMac, _callback);

    }

    /**
     * Given a piece of Personally Identifiable Information (PII), return the Systems Manager device ID(s) associated with that identifier
     * Given a piece of Personally Identifiable Information (PII), return the Systems Manager device ID(s) associated with that identifier. These device IDs can be used with the Systems Manager API endpoints to retrieve device details. Exactly one identifier will be accepted.  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/smDevicesForKey &#x60;&#x60;&#x60;
     * @param networkId  (required)
     * @param username The username of a Systems Manager user (optional)
     * @param email The email of a network user account or a Systems Manager device (optional)
     * @param mac The MAC of a network client device or a Systems Manager device (optional)
     * @param serial The serial of a Systems Manager device (optional)
     * @param imei The IMEI of a Systems Manager device (optional)
     * @param bluetoothMac The MAC of a Bluetooth client (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkPiiSmDevicesForKey_0(String networkId, String username, String email, String mac, String serial, String imei, String bluetoothMac) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkPiiSmDevicesForKey_0WithHttpInfo(networkId, username, email, mac, serial, imei, bluetoothMac);
        return localVarResp.getData();
    }

    /**
     * Given a piece of Personally Identifiable Information (PII), return the Systems Manager device ID(s) associated with that identifier
     * Given a piece of Personally Identifiable Information (PII), return the Systems Manager device ID(s) associated with that identifier. These device IDs can be used with the Systems Manager API endpoints to retrieve device details. Exactly one identifier will be accepted.  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/smDevicesForKey &#x60;&#x60;&#x60;
     * @param networkId  (required)
     * @param username The username of a Systems Manager user (optional)
     * @param email The email of a network user account or a Systems Manager device (optional)
     * @param mac The MAC of a network client device or a Systems Manager device (optional)
     * @param serial The serial of a Systems Manager device (optional)
     * @param imei The IMEI of a Systems Manager device (optional)
     * @param bluetoothMac The MAC of a Bluetooth client (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkPiiSmDevicesForKey_0WithHttpInfo(String networkId, String username, String email, String mac, String serial, String imei, String bluetoothMac) throws ApiException {
        okhttp3.Call localVarCall = getNetworkPiiSmDevicesForKey_0ValidateBeforeCall(networkId, username, email, mac, serial, imei, bluetoothMac, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Given a piece of Personally Identifiable Information (PII), return the Systems Manager device ID(s) associated with that identifier (asynchronously)
     * Given a piece of Personally Identifiable Information (PII), return the Systems Manager device ID(s) associated with that identifier. These device IDs can be used with the Systems Manager API endpoints to retrieve device details. Exactly one identifier will be accepted.  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/smDevicesForKey &#x60;&#x60;&#x60;
     * @param networkId  (required)
     * @param username The username of a Systems Manager user (optional)
     * @param email The email of a network user account or a Systems Manager device (optional)
     * @param mac The MAC of a network client device or a Systems Manager device (optional)
     * @param serial The serial of a Systems Manager device (optional)
     * @param imei The IMEI of a Systems Manager device (optional)
     * @param bluetoothMac The MAC of a Bluetooth client (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkPiiSmDevicesForKey_0Async(String networkId, String username, String email, String mac, String serial, String imei, String bluetoothMac, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkPiiSmDevicesForKey_0ValidateBeforeCall(networkId, username, email, mac, serial, imei, bluetoothMac, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkPiiSmOwnersForKey_0
     * @param networkId  (required)
     * @param username The username of a Systems Manager user (optional)
     * @param email The email of a network user account or a Systems Manager device (optional)
     * @param mac The MAC of a network client device or a Systems Manager device (optional)
     * @param serial The serial of a Systems Manager device (optional)
     * @param imei The IMEI of a Systems Manager device (optional)
     * @param bluetoothMac The MAC of a Bluetooth client (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkPiiSmOwnersForKey_0Call(String networkId, String username, String email, String mac, String serial, String imei, String bluetoothMac, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/pii/smOwnersForKey"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (mac != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac", mac));
        }

        if (serial != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial", serial));
        }

        if (imei != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("imei", imei));
        }

        if (bluetoothMac != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bluetoothMac", bluetoothMac));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkPiiSmOwnersForKey_0ValidateBeforeCall(String networkId, String username, String email, String mac, String serial, String imei, String bluetoothMac, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkPiiSmOwnersForKey_0(Async)");
        }

        return getNetworkPiiSmOwnersForKey_0Call(networkId, username, email, mac, serial, imei, bluetoothMac, _callback);

    }

    /**
     * Given a piece of Personally Identifiable Information (PII), return the Systems Manager owner ID(s) associated with that identifier
     * Given a piece of Personally Identifiable Information (PII), return the Systems Manager owner ID(s) associated with that identifier. These owner IDs can be used with the Systems Manager API endpoints to retrieve owner details. Exactly one identifier will be accepted.  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/smOwnersForKey &#x60;&#x60;&#x60;
     * @param networkId  (required)
     * @param username The username of a Systems Manager user (optional)
     * @param email The email of a network user account or a Systems Manager device (optional)
     * @param mac The MAC of a network client device or a Systems Manager device (optional)
     * @param serial The serial of a Systems Manager device (optional)
     * @param imei The IMEI of a Systems Manager device (optional)
     * @param bluetoothMac The MAC of a Bluetooth client (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkPiiSmOwnersForKey_0(String networkId, String username, String email, String mac, String serial, String imei, String bluetoothMac) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkPiiSmOwnersForKey_0WithHttpInfo(networkId, username, email, mac, serial, imei, bluetoothMac);
        return localVarResp.getData();
    }

    /**
     * Given a piece of Personally Identifiable Information (PII), return the Systems Manager owner ID(s) associated with that identifier
     * Given a piece of Personally Identifiable Information (PII), return the Systems Manager owner ID(s) associated with that identifier. These owner IDs can be used with the Systems Manager API endpoints to retrieve owner details. Exactly one identifier will be accepted.  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/smOwnersForKey &#x60;&#x60;&#x60;
     * @param networkId  (required)
     * @param username The username of a Systems Manager user (optional)
     * @param email The email of a network user account or a Systems Manager device (optional)
     * @param mac The MAC of a network client device or a Systems Manager device (optional)
     * @param serial The serial of a Systems Manager device (optional)
     * @param imei The IMEI of a Systems Manager device (optional)
     * @param bluetoothMac The MAC of a Bluetooth client (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkPiiSmOwnersForKey_0WithHttpInfo(String networkId, String username, String email, String mac, String serial, String imei, String bluetoothMac) throws ApiException {
        okhttp3.Call localVarCall = getNetworkPiiSmOwnersForKey_0ValidateBeforeCall(networkId, username, email, mac, serial, imei, bluetoothMac, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Given a piece of Personally Identifiable Information (PII), return the Systems Manager owner ID(s) associated with that identifier (asynchronously)
     * Given a piece of Personally Identifiable Information (PII), return the Systems Manager owner ID(s) associated with that identifier. These owner IDs can be used with the Systems Manager API endpoints to retrieve owner details. Exactly one identifier will be accepted.  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/smOwnersForKey &#x60;&#x60;&#x60;
     * @param networkId  (required)
     * @param username The username of a Systems Manager user (optional)
     * @param email The email of a network user account or a Systems Manager device (optional)
     * @param mac The MAC of a network client device or a Systems Manager device (optional)
     * @param serial The serial of a Systems Manager device (optional)
     * @param imei The IMEI of a Systems Manager device (optional)
     * @param bluetoothMac The MAC of a Bluetooth client (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkPiiSmOwnersForKey_0Async(String networkId, String username, String email, String mac, String serial, String imei, String bluetoothMac, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkPiiSmOwnersForKey_0ValidateBeforeCall(networkId, username, email, mac, serial, imei, bluetoothMac, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkPoliciesByClient_0
     * @param networkId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 50. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkPoliciesByClient_0Call(String networkId, Integer perPage, String startingAfter, String endingBefore, String t0, Float timespan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/policies/byClient"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingAfter", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endingBefore", endingBefore));
        }

        if (t0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t0", t0));
        }

        if (timespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timespan", timespan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkPoliciesByClient_0ValidateBeforeCall(String networkId, Integer perPage, String startingAfter, String endingBefore, String t0, Float timespan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkPoliciesByClient_0(Async)");
        }

        return getNetworkPoliciesByClient_0Call(networkId, perPage, startingAfter, endingBefore, t0, timespan, _callback);

    }

    /**
     * Get policies for all clients with policies
     * Get policies for all clients with policies
     * @param networkId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 50. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @return List&lt;GetNetworkPoliciesByClient200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public List<GetNetworkPoliciesByClient200ResponseInner> getNetworkPoliciesByClient_0(String networkId, Integer perPage, String startingAfter, String endingBefore, String t0, Float timespan) throws ApiException {
        ApiResponse<List<GetNetworkPoliciesByClient200ResponseInner>> localVarResp = getNetworkPoliciesByClient_0WithHttpInfo(networkId, perPage, startingAfter, endingBefore, t0, timespan);
        return localVarResp.getData();
    }

    /**
     * Get policies for all clients with policies
     * Get policies for all clients with policies
     * @param networkId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 50. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @return ApiResponse&lt;List&lt;GetNetworkPoliciesByClient200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetworkPoliciesByClient200ResponseInner>> getNetworkPoliciesByClient_0WithHttpInfo(String networkId, Integer perPage, String startingAfter, String endingBefore, String t0, Float timespan) throws ApiException {
        okhttp3.Call localVarCall = getNetworkPoliciesByClient_0ValidateBeforeCall(networkId, perPage, startingAfter, endingBefore, t0, timespan, null);
        Type localVarReturnType = new TypeToken<List<GetNetworkPoliciesByClient200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get policies for all clients with policies (asynchronously)
     * Get policies for all clients with policies
     * @param networkId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 50. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkPoliciesByClient_0Async(String networkId, Integer perPage, String startingAfter, String endingBefore, String t0, Float timespan, final ApiCallback<List<GetNetworkPoliciesByClient200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkPoliciesByClient_0ValidateBeforeCall(networkId, perPage, startingAfter, endingBefore, t0, timespan, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetworkPoliciesByClient200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSensorAlertsProfile_0
     * @param networkId  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSensorAlertsProfile_0Call(String networkId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/sensor/alerts/profiles/{id}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSensorAlertsProfile_0ValidateBeforeCall(String networkId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSensorAlertsProfile_0(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getNetworkSensorAlertsProfile_0(Async)");
        }

        return getNetworkSensorAlertsProfile_0Call(networkId, id, _callback);

    }

    /**
     * Show details of a sensor alert profile for a network.
     * Show details of a sensor alert profile for a network.
     * @param networkId  (required)
     * @param id  (required)
     * @return GetNetworkSensorAlertsProfiles200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkSensorAlertsProfiles200ResponseInner getNetworkSensorAlertsProfile_0(String networkId, String id) throws ApiException {
        ApiResponse<GetNetworkSensorAlertsProfiles200ResponseInner> localVarResp = getNetworkSensorAlertsProfile_0WithHttpInfo(networkId, id);
        return localVarResp.getData();
    }

    /**
     * Show details of a sensor alert profile for a network.
     * Show details of a sensor alert profile for a network.
     * @param networkId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;GetNetworkSensorAlertsProfiles200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkSensorAlertsProfiles200ResponseInner> getNetworkSensorAlertsProfile_0WithHttpInfo(String networkId, String id) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSensorAlertsProfile_0ValidateBeforeCall(networkId, id, null);
        Type localVarReturnType = new TypeToken<GetNetworkSensorAlertsProfiles200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Show details of a sensor alert profile for a network. (asynchronously)
     * Show details of a sensor alert profile for a network.
     * @param networkId  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSensorAlertsProfile_0Async(String networkId, String id, final ApiCallback<GetNetworkSensorAlertsProfiles200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSensorAlertsProfile_0ValidateBeforeCall(networkId, id, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkSensorAlertsProfiles200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSensorAlertsProfiles_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSensorAlertsProfiles_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/sensor/alerts/profiles"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSensorAlertsProfiles_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSensorAlertsProfiles_0(Async)");
        }

        return getNetworkSensorAlertsProfiles_0Call(networkId, _callback);

    }

    /**
     * Lists all sensor alert profiles for a network.
     * Lists all sensor alert profiles for a network.
     * @param networkId  (required)
     * @return List&lt;GetNetworkSensorAlertsProfiles200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetNetworkSensorAlertsProfiles200ResponseInner> getNetworkSensorAlertsProfiles_0(String networkId) throws ApiException {
        ApiResponse<List<GetNetworkSensorAlertsProfiles200ResponseInner>> localVarResp = getNetworkSensorAlertsProfiles_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Lists all sensor alert profiles for a network.
     * Lists all sensor alert profiles for a network.
     * @param networkId  (required)
     * @return ApiResponse&lt;List&lt;GetNetworkSensorAlertsProfiles200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetworkSensorAlertsProfiles200ResponseInner>> getNetworkSensorAlertsProfiles_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSensorAlertsProfiles_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<List<GetNetworkSensorAlertsProfiles200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists all sensor alert profiles for a network. (asynchronously)
     * Lists all sensor alert profiles for a network.
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSensorAlertsProfiles_0Async(String networkId, final ApiCallback<List<GetNetworkSensorAlertsProfiles200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSensorAlertsProfiles_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetworkSensorAlertsProfiles200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSensorRelationships_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSensorRelationships_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/sensor/relationships"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSensorRelationships_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSensorRelationships_0(Async)");
        }

        return getNetworkSensorRelationships_0Call(networkId, _callback);

    }

    /**
     * List the sensor roles for devices in a given network
     * List the sensor roles for devices in a given network
     * @param networkId  (required)
     * @return List&lt;GetNetworkSensorRelationships200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetNetworkSensorRelationships200ResponseInner> getNetworkSensorRelationships_0(String networkId) throws ApiException {
        ApiResponse<List<GetNetworkSensorRelationships200ResponseInner>> localVarResp = getNetworkSensorRelationships_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * List the sensor roles for devices in a given network
     * List the sensor roles for devices in a given network
     * @param networkId  (required)
     * @return ApiResponse&lt;List&lt;GetNetworkSensorRelationships200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetworkSensorRelationships200ResponseInner>> getNetworkSensorRelationships_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSensorRelationships_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<List<GetNetworkSensorRelationships200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the sensor roles for devices in a given network (asynchronously)
     * List the sensor roles for devices in a given network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSensorRelationships_0Async(String networkId, final ApiCallback<List<GetNetworkSensorRelationships200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSensorRelationships_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetworkSensorRelationships200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSettings_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSettings_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/settings"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSettings_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSettings_0(Async)");
        }

        return getNetworkSettings_0Call(networkId, _callback);

    }

    /**
     * Return the settings for a network
     * Return the settings for a network
     * @param networkId  (required)
     * @return GetNetworkSettings200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkSettings200Response getNetworkSettings_0(String networkId) throws ApiException {
        ApiResponse<GetNetworkSettings200Response> localVarResp = getNetworkSettings_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Return the settings for a network
     * Return the settings for a network
     * @param networkId  (required)
     * @return ApiResponse&lt;GetNetworkSettings200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkSettings200Response> getNetworkSettings_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSettings_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<GetNetworkSettings200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the settings for a network (asynchronously)
     * Return the settings for a network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSettings_0Async(String networkId, final ApiCallback<GetNetworkSettings200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSettings_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkSettings200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSmBypassActivationLockAttempt_0
     * @param networkId  (required)
     * @param attemptId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSmBypassActivationLockAttempt_0Call(String networkId, String attemptId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/sm/bypassActivationLockAttempts/{attemptId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "attemptId" + "}", localVarApiClient.escapeString(attemptId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSmBypassActivationLockAttempt_0ValidateBeforeCall(String networkId, String attemptId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSmBypassActivationLockAttempt_0(Async)");
        }

        // verify the required parameter 'attemptId' is set
        if (attemptId == null) {
            throw new ApiException("Missing the required parameter 'attemptId' when calling getNetworkSmBypassActivationLockAttempt_0(Async)");
        }

        return getNetworkSmBypassActivationLockAttempt_0Call(networkId, attemptId, _callback);

    }

    /**
     * Bypass activation lock attempt status
     * Bypass activation lock attempt status
     * @param networkId  (required)
     * @param attemptId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkSmBypassActivationLockAttempt_0(String networkId, String attemptId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkSmBypassActivationLockAttempt_0WithHttpInfo(networkId, attemptId);
        return localVarResp.getData();
    }

    /**
     * Bypass activation lock attempt status
     * Bypass activation lock attempt status
     * @param networkId  (required)
     * @param attemptId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkSmBypassActivationLockAttempt_0WithHttpInfo(String networkId, String attemptId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSmBypassActivationLockAttempt_0ValidateBeforeCall(networkId, attemptId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Bypass activation lock attempt status (asynchronously)
     * Bypass activation lock attempt status
     * @param networkId  (required)
     * @param attemptId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSmBypassActivationLockAttempt_0Async(String networkId, String attemptId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSmBypassActivationLockAttempt_0ValidateBeforeCall(networkId, attemptId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSmDeviceCerts_0
     * @param networkId  (required)
     * @param deviceId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSmDeviceCerts_0Call(String networkId, String deviceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/sm/devices/{deviceId}/certs"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "deviceId" + "}", localVarApiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSmDeviceCerts_0ValidateBeforeCall(String networkId, String deviceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSmDeviceCerts_0(Async)");
        }

        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling getNetworkSmDeviceCerts_0(Async)");
        }

        return getNetworkSmDeviceCerts_0Call(networkId, deviceId, _callback);

    }

    /**
     * List the certs on a device
     * List the certs on a device
     * @param networkId  (required)
     * @param deviceId  (required)
     * @return List&lt;GetNetworkSmDeviceCerts200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetNetworkSmDeviceCerts200ResponseInner> getNetworkSmDeviceCerts_0(String networkId, String deviceId) throws ApiException {
        ApiResponse<List<GetNetworkSmDeviceCerts200ResponseInner>> localVarResp = getNetworkSmDeviceCerts_0WithHttpInfo(networkId, deviceId);
        return localVarResp.getData();
    }

    /**
     * List the certs on a device
     * List the certs on a device
     * @param networkId  (required)
     * @param deviceId  (required)
     * @return ApiResponse&lt;List&lt;GetNetworkSmDeviceCerts200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetworkSmDeviceCerts200ResponseInner>> getNetworkSmDeviceCerts_0WithHttpInfo(String networkId, String deviceId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSmDeviceCerts_0ValidateBeforeCall(networkId, deviceId, null);
        Type localVarReturnType = new TypeToken<List<GetNetworkSmDeviceCerts200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the certs on a device (asynchronously)
     * List the certs on a device
     * @param networkId  (required)
     * @param deviceId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSmDeviceCerts_0Async(String networkId, String deviceId, final ApiCallback<List<GetNetworkSmDeviceCerts200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSmDeviceCerts_0ValidateBeforeCall(networkId, deviceId, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetworkSmDeviceCerts200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSmDeviceDeviceProfiles_0
     * @param networkId  (required)
     * @param deviceId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSmDeviceDeviceProfiles_0Call(String networkId, String deviceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/sm/devices/{deviceId}/deviceProfiles"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "deviceId" + "}", localVarApiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSmDeviceDeviceProfiles_0ValidateBeforeCall(String networkId, String deviceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSmDeviceDeviceProfiles_0(Async)");
        }

        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling getNetworkSmDeviceDeviceProfiles_0(Async)");
        }

        return getNetworkSmDeviceDeviceProfiles_0Call(networkId, deviceId, _callback);

    }

    /**
     * Get the installed profiles associated with a device
     * Get the installed profiles associated with a device
     * @param networkId  (required)
     * @param deviceId  (required)
     * @return List&lt;GetNetworkSmDeviceDeviceProfiles200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetNetworkSmDeviceDeviceProfiles200ResponseInner> getNetworkSmDeviceDeviceProfiles_0(String networkId, String deviceId) throws ApiException {
        ApiResponse<List<GetNetworkSmDeviceDeviceProfiles200ResponseInner>> localVarResp = getNetworkSmDeviceDeviceProfiles_0WithHttpInfo(networkId, deviceId);
        return localVarResp.getData();
    }

    /**
     * Get the installed profiles associated with a device
     * Get the installed profiles associated with a device
     * @param networkId  (required)
     * @param deviceId  (required)
     * @return ApiResponse&lt;List&lt;GetNetworkSmDeviceDeviceProfiles200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetworkSmDeviceDeviceProfiles200ResponseInner>> getNetworkSmDeviceDeviceProfiles_0WithHttpInfo(String networkId, String deviceId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSmDeviceDeviceProfiles_0ValidateBeforeCall(networkId, deviceId, null);
        Type localVarReturnType = new TypeToken<List<GetNetworkSmDeviceDeviceProfiles200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the installed profiles associated with a device (asynchronously)
     * Get the installed profiles associated with a device
     * @param networkId  (required)
     * @param deviceId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSmDeviceDeviceProfiles_0Async(String networkId, String deviceId, final ApiCallback<List<GetNetworkSmDeviceDeviceProfiles200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSmDeviceDeviceProfiles_0ValidateBeforeCall(networkId, deviceId, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetworkSmDeviceDeviceProfiles200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSmDeviceNetworkAdapters_0
     * @param networkId  (required)
     * @param deviceId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSmDeviceNetworkAdapters_0Call(String networkId, String deviceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/sm/devices/{deviceId}/networkAdapters"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "deviceId" + "}", localVarApiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSmDeviceNetworkAdapters_0ValidateBeforeCall(String networkId, String deviceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSmDeviceNetworkAdapters_0(Async)");
        }

        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling getNetworkSmDeviceNetworkAdapters_0(Async)");
        }

        return getNetworkSmDeviceNetworkAdapters_0Call(networkId, deviceId, _callback);

    }

    /**
     * List the network adapters of a device
     * List the network adapters of a device
     * @param networkId  (required)
     * @param deviceId  (required)
     * @return List&lt;GetNetworkSmDeviceNetworkAdapters200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetNetworkSmDeviceNetworkAdapters200ResponseInner> getNetworkSmDeviceNetworkAdapters_0(String networkId, String deviceId) throws ApiException {
        ApiResponse<List<GetNetworkSmDeviceNetworkAdapters200ResponseInner>> localVarResp = getNetworkSmDeviceNetworkAdapters_0WithHttpInfo(networkId, deviceId);
        return localVarResp.getData();
    }

    /**
     * List the network adapters of a device
     * List the network adapters of a device
     * @param networkId  (required)
     * @param deviceId  (required)
     * @return ApiResponse&lt;List&lt;GetNetworkSmDeviceNetworkAdapters200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetworkSmDeviceNetworkAdapters200ResponseInner>> getNetworkSmDeviceNetworkAdapters_0WithHttpInfo(String networkId, String deviceId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSmDeviceNetworkAdapters_0ValidateBeforeCall(networkId, deviceId, null);
        Type localVarReturnType = new TypeToken<List<GetNetworkSmDeviceNetworkAdapters200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the network adapters of a device (asynchronously)
     * List the network adapters of a device
     * @param networkId  (required)
     * @param deviceId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSmDeviceNetworkAdapters_0Async(String networkId, String deviceId, final ApiCallback<List<GetNetworkSmDeviceNetworkAdapters200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSmDeviceNetworkAdapters_0ValidateBeforeCall(networkId, deviceId, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetworkSmDeviceNetworkAdapters200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSmDeviceRestrictions_0
     * @param networkId  (required)
     * @param deviceId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSmDeviceRestrictions_0Call(String networkId, String deviceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/sm/devices/{deviceId}/restrictions"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "deviceId" + "}", localVarApiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSmDeviceRestrictions_0ValidateBeforeCall(String networkId, String deviceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSmDeviceRestrictions_0(Async)");
        }

        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling getNetworkSmDeviceRestrictions_0(Async)");
        }

        return getNetworkSmDeviceRestrictions_0Call(networkId, deviceId, _callback);

    }

    /**
     * List the restrictions on a device
     * List the restrictions on a device
     * @param networkId  (required)
     * @param deviceId  (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getNetworkSmDeviceRestrictions_0(String networkId, String deviceId) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getNetworkSmDeviceRestrictions_0WithHttpInfo(networkId, deviceId);
        return localVarResp.getData();
    }

    /**
     * List the restrictions on a device
     * List the restrictions on a device
     * @param networkId  (required)
     * @param deviceId  (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getNetworkSmDeviceRestrictions_0WithHttpInfo(String networkId, String deviceId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSmDeviceRestrictions_0ValidateBeforeCall(networkId, deviceId, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the restrictions on a device (asynchronously)
     * List the restrictions on a device
     * @param networkId  (required)
     * @param deviceId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSmDeviceRestrictions_0Async(String networkId, String deviceId, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSmDeviceRestrictions_0ValidateBeforeCall(networkId, deviceId, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSmDeviceSecurityCenters_0
     * @param networkId  (required)
     * @param deviceId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSmDeviceSecurityCenters_0Call(String networkId, String deviceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/sm/devices/{deviceId}/securityCenters"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "deviceId" + "}", localVarApiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSmDeviceSecurityCenters_0ValidateBeforeCall(String networkId, String deviceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSmDeviceSecurityCenters_0(Async)");
        }

        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling getNetworkSmDeviceSecurityCenters_0(Async)");
        }

        return getNetworkSmDeviceSecurityCenters_0Call(networkId, deviceId, _callback);

    }

    /**
     * List the security centers on a device
     * List the security centers on a device
     * @param networkId  (required)
     * @param deviceId  (required)
     * @return List&lt;GetNetworkSmDeviceSecurityCenters200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetNetworkSmDeviceSecurityCenters200ResponseInner> getNetworkSmDeviceSecurityCenters_0(String networkId, String deviceId) throws ApiException {
        ApiResponse<List<GetNetworkSmDeviceSecurityCenters200ResponseInner>> localVarResp = getNetworkSmDeviceSecurityCenters_0WithHttpInfo(networkId, deviceId);
        return localVarResp.getData();
    }

    /**
     * List the security centers on a device
     * List the security centers on a device
     * @param networkId  (required)
     * @param deviceId  (required)
     * @return ApiResponse&lt;List&lt;GetNetworkSmDeviceSecurityCenters200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetworkSmDeviceSecurityCenters200ResponseInner>> getNetworkSmDeviceSecurityCenters_0WithHttpInfo(String networkId, String deviceId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSmDeviceSecurityCenters_0ValidateBeforeCall(networkId, deviceId, null);
        Type localVarReturnType = new TypeToken<List<GetNetworkSmDeviceSecurityCenters200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the security centers on a device (asynchronously)
     * List the security centers on a device
     * @param networkId  (required)
     * @param deviceId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSmDeviceSecurityCenters_0Async(String networkId, String deviceId, final ApiCallback<List<GetNetworkSmDeviceSecurityCenters200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSmDeviceSecurityCenters_0ValidateBeforeCall(networkId, deviceId, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetworkSmDeviceSecurityCenters200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSmDeviceSoftwares_0
     * @param networkId  (required)
     * @param deviceId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSmDeviceSoftwares_0Call(String networkId, String deviceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/sm/devices/{deviceId}/softwares"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "deviceId" + "}", localVarApiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSmDeviceSoftwares_0ValidateBeforeCall(String networkId, String deviceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSmDeviceSoftwares_0(Async)");
        }

        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling getNetworkSmDeviceSoftwares_0(Async)");
        }

        return getNetworkSmDeviceSoftwares_0Call(networkId, deviceId, _callback);

    }

    /**
     * Get a list of softwares associated with a device
     * Get a list of softwares associated with a device
     * @param networkId  (required)
     * @param deviceId  (required)
     * @return List&lt;GetNetworkSmDeviceSoftwares200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetNetworkSmDeviceSoftwares200ResponseInner> getNetworkSmDeviceSoftwares_0(String networkId, String deviceId) throws ApiException {
        ApiResponse<List<GetNetworkSmDeviceSoftwares200ResponseInner>> localVarResp = getNetworkSmDeviceSoftwares_0WithHttpInfo(networkId, deviceId);
        return localVarResp.getData();
    }

    /**
     * Get a list of softwares associated with a device
     * Get a list of softwares associated with a device
     * @param networkId  (required)
     * @param deviceId  (required)
     * @return ApiResponse&lt;List&lt;GetNetworkSmDeviceSoftwares200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetworkSmDeviceSoftwares200ResponseInner>> getNetworkSmDeviceSoftwares_0WithHttpInfo(String networkId, String deviceId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSmDeviceSoftwares_0ValidateBeforeCall(networkId, deviceId, null);
        Type localVarReturnType = new TypeToken<List<GetNetworkSmDeviceSoftwares200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of softwares associated with a device (asynchronously)
     * Get a list of softwares associated with a device
     * @param networkId  (required)
     * @param deviceId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSmDeviceSoftwares_0Async(String networkId, String deviceId, final ApiCallback<List<GetNetworkSmDeviceSoftwares200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSmDeviceSoftwares_0ValidateBeforeCall(networkId, deviceId, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetworkSmDeviceSoftwares200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSmDeviceWlanLists_0
     * @param networkId  (required)
     * @param deviceId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSmDeviceWlanLists_0Call(String networkId, String deviceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/sm/devices/{deviceId}/wlanLists"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "deviceId" + "}", localVarApiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSmDeviceWlanLists_0ValidateBeforeCall(String networkId, String deviceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSmDeviceWlanLists_0(Async)");
        }

        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling getNetworkSmDeviceWlanLists_0(Async)");
        }

        return getNetworkSmDeviceWlanLists_0Call(networkId, deviceId, _callback);

    }

    /**
     * List the saved SSID names on a device
     * List the saved SSID names on a device
     * @param networkId  (required)
     * @param deviceId  (required)
     * @return List&lt;GetNetworkSmDeviceWlanLists200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetNetworkSmDeviceWlanLists200ResponseInner> getNetworkSmDeviceWlanLists_0(String networkId, String deviceId) throws ApiException {
        ApiResponse<List<GetNetworkSmDeviceWlanLists200ResponseInner>> localVarResp = getNetworkSmDeviceWlanLists_0WithHttpInfo(networkId, deviceId);
        return localVarResp.getData();
    }

    /**
     * List the saved SSID names on a device
     * List the saved SSID names on a device
     * @param networkId  (required)
     * @param deviceId  (required)
     * @return ApiResponse&lt;List&lt;GetNetworkSmDeviceWlanLists200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetworkSmDeviceWlanLists200ResponseInner>> getNetworkSmDeviceWlanLists_0WithHttpInfo(String networkId, String deviceId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSmDeviceWlanLists_0ValidateBeforeCall(networkId, deviceId, null);
        Type localVarReturnType = new TypeToken<List<GetNetworkSmDeviceWlanLists200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the saved SSID names on a device (asynchronously)
     * List the saved SSID names on a device
     * @param networkId  (required)
     * @param deviceId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSmDeviceWlanLists_0Async(String networkId, String deviceId, final ApiCallback<List<GetNetworkSmDeviceWlanLists200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSmDeviceWlanLists_0ValidateBeforeCall(networkId, deviceId, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetworkSmDeviceWlanLists200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSmDevices_0
     * @param networkId  (required)
     * @param fields Additional fields that will be displayed for each device.     The default fields are: id, name, tags, ssid, wifiMac, osName, systemModel, uuid, and serialNumber. The additional fields are: ip,     systemType, availableDeviceCapacity, kioskAppName, biosVersion, lastConnected, missingAppsCount, userSuppliedAddress, location, lastUser,     ownerEmail, ownerUsername, osBuild, publicIp, phoneNumber, diskInfoJson, deviceCapacity, isManaged, hadMdm, isSupervised, meid, imei, iccid,     simCarrierNetwork, cellularDataUsed, isHotspotEnabled, createdAt, batteryEstCharge, quarantined, avName, avRunning, asName, fwName,     isRooted, loginRequired, screenLockEnabled, screenLockDelay, autoLoginDisabled, autoTags, hasMdm, hasDesktopAgent, diskEncryptionEnabled,     hardwareEncryptionCaps, passCodeLock, usesHardwareKeystore, androidSecurityPatchVersion, and url. (optional)
     * @param wifiMacs Filter devices by wifi mac(s). (optional)
     * @param serials Filter devices by serial(s). (optional)
     * @param ids Filter devices by id(s). (optional)
     * @param scope Specify a scope (one of all, none, withAny, withAll, withoutAny, or withoutAll) and a set of tags. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSmDevices_0Call(String networkId, List<String> fields, List<String> wifiMacs, List<String> serials, List<String> ids, List<String> scope, Integer perPage, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/sm/devices"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (wifiMacs != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "wifiMacs", wifiMacs));
        }

        if (serials != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "serials", serials));
        }

        if (ids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "ids", ids));
        }

        if (scope != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "scope", scope));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingAfter", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endingBefore", endingBefore));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSmDevices_0ValidateBeforeCall(String networkId, List<String> fields, List<String> wifiMacs, List<String> serials, List<String> ids, List<String> scope, Integer perPage, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSmDevices_0(Async)");
        }

        return getNetworkSmDevices_0Call(networkId, fields, wifiMacs, serials, ids, scope, perPage, startingAfter, endingBefore, _callback);

    }

    /**
     * List the devices enrolled in an SM network with various specified fields and filters
     * List the devices enrolled in an SM network with various specified fields and filters
     * @param networkId  (required)
     * @param fields Additional fields that will be displayed for each device.     The default fields are: id, name, tags, ssid, wifiMac, osName, systemModel, uuid, and serialNumber. The additional fields are: ip,     systemType, availableDeviceCapacity, kioskAppName, biosVersion, lastConnected, missingAppsCount, userSuppliedAddress, location, lastUser,     ownerEmail, ownerUsername, osBuild, publicIp, phoneNumber, diskInfoJson, deviceCapacity, isManaged, hadMdm, isSupervised, meid, imei, iccid,     simCarrierNetwork, cellularDataUsed, isHotspotEnabled, createdAt, batteryEstCharge, quarantined, avName, avRunning, asName, fwName,     isRooted, loginRequired, screenLockEnabled, screenLockDelay, autoLoginDisabled, autoTags, hasMdm, hasDesktopAgent, diskEncryptionEnabled,     hardwareEncryptionCaps, passCodeLock, usesHardwareKeystore, androidSecurityPatchVersion, and url. (optional)
     * @param wifiMacs Filter devices by wifi mac(s). (optional)
     * @param serials Filter devices by serial(s). (optional)
     * @param ids Filter devices by id(s). (optional)
     * @param scope Specify a scope (one of all, none, withAny, withAll, withoutAny, or withoutAll) and a set of tags. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @return List&lt;GetNetworkSmDevices200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public List<GetNetworkSmDevices200ResponseInner> getNetworkSmDevices_0(String networkId, List<String> fields, List<String> wifiMacs, List<String> serials, List<String> ids, List<String> scope, Integer perPage, String startingAfter, String endingBefore) throws ApiException {
        ApiResponse<List<GetNetworkSmDevices200ResponseInner>> localVarResp = getNetworkSmDevices_0WithHttpInfo(networkId, fields, wifiMacs, serials, ids, scope, perPage, startingAfter, endingBefore);
        return localVarResp.getData();
    }

    /**
     * List the devices enrolled in an SM network with various specified fields and filters
     * List the devices enrolled in an SM network with various specified fields and filters
     * @param networkId  (required)
     * @param fields Additional fields that will be displayed for each device.     The default fields are: id, name, tags, ssid, wifiMac, osName, systemModel, uuid, and serialNumber. The additional fields are: ip,     systemType, availableDeviceCapacity, kioskAppName, biosVersion, lastConnected, missingAppsCount, userSuppliedAddress, location, lastUser,     ownerEmail, ownerUsername, osBuild, publicIp, phoneNumber, diskInfoJson, deviceCapacity, isManaged, hadMdm, isSupervised, meid, imei, iccid,     simCarrierNetwork, cellularDataUsed, isHotspotEnabled, createdAt, batteryEstCharge, quarantined, avName, avRunning, asName, fwName,     isRooted, loginRequired, screenLockEnabled, screenLockDelay, autoLoginDisabled, autoTags, hasMdm, hasDesktopAgent, diskEncryptionEnabled,     hardwareEncryptionCaps, passCodeLock, usesHardwareKeystore, androidSecurityPatchVersion, and url. (optional)
     * @param wifiMacs Filter devices by wifi mac(s). (optional)
     * @param serials Filter devices by serial(s). (optional)
     * @param ids Filter devices by id(s). (optional)
     * @param scope Specify a scope (one of all, none, withAny, withAll, withoutAny, or withoutAll) and a set of tags. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @return ApiResponse&lt;List&lt;GetNetworkSmDevices200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetworkSmDevices200ResponseInner>> getNetworkSmDevices_0WithHttpInfo(String networkId, List<String> fields, List<String> wifiMacs, List<String> serials, List<String> ids, List<String> scope, Integer perPage, String startingAfter, String endingBefore) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSmDevices_0ValidateBeforeCall(networkId, fields, wifiMacs, serials, ids, scope, perPage, startingAfter, endingBefore, null);
        Type localVarReturnType = new TypeToken<List<GetNetworkSmDevices200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the devices enrolled in an SM network with various specified fields and filters (asynchronously)
     * List the devices enrolled in an SM network with various specified fields and filters
     * @param networkId  (required)
     * @param fields Additional fields that will be displayed for each device.     The default fields are: id, name, tags, ssid, wifiMac, osName, systemModel, uuid, and serialNumber. The additional fields are: ip,     systemType, availableDeviceCapacity, kioskAppName, biosVersion, lastConnected, missingAppsCount, userSuppliedAddress, location, lastUser,     ownerEmail, ownerUsername, osBuild, publicIp, phoneNumber, diskInfoJson, deviceCapacity, isManaged, hadMdm, isSupervised, meid, imei, iccid,     simCarrierNetwork, cellularDataUsed, isHotspotEnabled, createdAt, batteryEstCharge, quarantined, avName, avRunning, asName, fwName,     isRooted, loginRequired, screenLockEnabled, screenLockDelay, autoLoginDisabled, autoTags, hasMdm, hasDesktopAgent, diskEncryptionEnabled,     hardwareEncryptionCaps, passCodeLock, usesHardwareKeystore, androidSecurityPatchVersion, and url. (optional)
     * @param wifiMacs Filter devices by wifi mac(s). (optional)
     * @param serials Filter devices by serial(s). (optional)
     * @param ids Filter devices by id(s). (optional)
     * @param scope Specify a scope (one of all, none, withAny, withAll, withoutAny, or withoutAll) and a set of tags. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSmDevices_0Async(String networkId, List<String> fields, List<String> wifiMacs, List<String> serials, List<String> ids, List<String> scope, Integer perPage, String startingAfter, String endingBefore, final ApiCallback<List<GetNetworkSmDevices200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSmDevices_0ValidateBeforeCall(networkId, fields, wifiMacs, serials, ids, scope, perPage, startingAfter, endingBefore, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetworkSmDevices200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSmProfiles_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSmProfiles_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/sm/profiles"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSmProfiles_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSmProfiles_0(Async)");
        }

        return getNetworkSmProfiles_0Call(networkId, _callback);

    }

    /**
     * List all profiles in a network
     * List all profiles in a network
     * @param networkId  (required)
     * @return List&lt;GetNetworkSmProfiles200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetNetworkSmProfiles200ResponseInner> getNetworkSmProfiles_0(String networkId) throws ApiException {
        ApiResponse<List<GetNetworkSmProfiles200ResponseInner>> localVarResp = getNetworkSmProfiles_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * List all profiles in a network
     * List all profiles in a network
     * @param networkId  (required)
     * @return ApiResponse&lt;List&lt;GetNetworkSmProfiles200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetworkSmProfiles200ResponseInner>> getNetworkSmProfiles_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSmProfiles_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<List<GetNetworkSmProfiles200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all profiles in a network (asynchronously)
     * List all profiles in a network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSmProfiles_0Async(String networkId, final ApiCallback<List<GetNetworkSmProfiles200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSmProfiles_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetworkSmProfiles200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSmTargetGroup_0
     * @param networkId  (required)
     * @param targetGroupId  (required)
     * @param withDetails Boolean indicating if the the ids of the devices or users scoped by the target group should be included in the response (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSmTargetGroup_0Call(String networkId, String targetGroupId, Boolean withDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/sm/targetGroups/{targetGroupId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "targetGroupId" + "}", localVarApiClient.escapeString(targetGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (withDetails != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("withDetails", withDetails));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSmTargetGroup_0ValidateBeforeCall(String networkId, String targetGroupId, Boolean withDetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSmTargetGroup_0(Async)");
        }

        // verify the required parameter 'targetGroupId' is set
        if (targetGroupId == null) {
            throw new ApiException("Missing the required parameter 'targetGroupId' when calling getNetworkSmTargetGroup_0(Async)");
        }

        return getNetworkSmTargetGroup_0Call(networkId, targetGroupId, withDetails, _callback);

    }

    /**
     * Return a target group
     * Return a target group
     * @param networkId  (required)
     * @param targetGroupId  (required)
     * @param withDetails Boolean indicating if the the ids of the devices or users scoped by the target group should be included in the response (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkSmTargetGroup_0(String networkId, String targetGroupId, Boolean withDetails) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkSmTargetGroup_0WithHttpInfo(networkId, targetGroupId, withDetails);
        return localVarResp.getData();
    }

    /**
     * Return a target group
     * Return a target group
     * @param networkId  (required)
     * @param targetGroupId  (required)
     * @param withDetails Boolean indicating if the the ids of the devices or users scoped by the target group should be included in the response (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkSmTargetGroup_0WithHttpInfo(String networkId, String targetGroupId, Boolean withDetails) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSmTargetGroup_0ValidateBeforeCall(networkId, targetGroupId, withDetails, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a target group (asynchronously)
     * Return a target group
     * @param networkId  (required)
     * @param targetGroupId  (required)
     * @param withDetails Boolean indicating if the the ids of the devices or users scoped by the target group should be included in the response (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSmTargetGroup_0Async(String networkId, String targetGroupId, Boolean withDetails, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSmTargetGroup_0ValidateBeforeCall(networkId, targetGroupId, withDetails, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSmTargetGroups_0
     * @param networkId  (required)
     * @param withDetails Boolean indicating if the the ids of the devices or users scoped by the target group should be included in the response (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSmTargetGroups_0Call(String networkId, Boolean withDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/sm/targetGroups"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (withDetails != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("withDetails", withDetails));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSmTargetGroups_0ValidateBeforeCall(String networkId, Boolean withDetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSmTargetGroups_0(Async)");
        }

        return getNetworkSmTargetGroups_0Call(networkId, withDetails, _callback);

    }

    /**
     * List the target groups in this network
     * List the target groups in this network
     * @param networkId  (required)
     * @param withDetails Boolean indicating if the the ids of the devices or users scoped by the target group should be included in the response (optional)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getNetworkSmTargetGroups_0(String networkId, Boolean withDetails) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getNetworkSmTargetGroups_0WithHttpInfo(networkId, withDetails);
        return localVarResp.getData();
    }

    /**
     * List the target groups in this network
     * List the target groups in this network
     * @param networkId  (required)
     * @param withDetails Boolean indicating if the the ids of the devices or users scoped by the target group should be included in the response (optional)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getNetworkSmTargetGroups_0WithHttpInfo(String networkId, Boolean withDetails) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSmTargetGroups_0ValidateBeforeCall(networkId, withDetails, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the target groups in this network (asynchronously)
     * List the target groups in this network
     * @param networkId  (required)
     * @param withDetails Boolean indicating if the the ids of the devices or users scoped by the target group should be included in the response (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSmTargetGroups_0Async(String networkId, Boolean withDetails, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSmTargetGroups_0ValidateBeforeCall(networkId, withDetails, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSmTrustedAccessConfigs_0
     * @param networkId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSmTrustedAccessConfigs_0Call(String networkId, Integer perPage, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/sm/trustedAccessConfigs"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingAfter", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endingBefore", endingBefore));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSmTrustedAccessConfigs_0ValidateBeforeCall(String networkId, Integer perPage, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSmTrustedAccessConfigs_0(Async)");
        }

        return getNetworkSmTrustedAccessConfigs_0Call(networkId, perPage, startingAfter, endingBefore, _callback);

    }

    /**
     * List Trusted Access Configs
     * List Trusted Access Configs
     * @param networkId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @return List&lt;GetNetworkSmTrustedAccessConfigs200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public List<GetNetworkSmTrustedAccessConfigs200ResponseInner> getNetworkSmTrustedAccessConfigs_0(String networkId, Integer perPage, String startingAfter, String endingBefore) throws ApiException {
        ApiResponse<List<GetNetworkSmTrustedAccessConfigs200ResponseInner>> localVarResp = getNetworkSmTrustedAccessConfigs_0WithHttpInfo(networkId, perPage, startingAfter, endingBefore);
        return localVarResp.getData();
    }

    /**
     * List Trusted Access Configs
     * List Trusted Access Configs
     * @param networkId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @return ApiResponse&lt;List&lt;GetNetworkSmTrustedAccessConfigs200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetworkSmTrustedAccessConfigs200ResponseInner>> getNetworkSmTrustedAccessConfigs_0WithHttpInfo(String networkId, Integer perPage, String startingAfter, String endingBefore) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSmTrustedAccessConfigs_0ValidateBeforeCall(networkId, perPage, startingAfter, endingBefore, null);
        Type localVarReturnType = new TypeToken<List<GetNetworkSmTrustedAccessConfigs200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Trusted Access Configs (asynchronously)
     * List Trusted Access Configs
     * @param networkId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSmTrustedAccessConfigs_0Async(String networkId, Integer perPage, String startingAfter, String endingBefore, final ApiCallback<List<GetNetworkSmTrustedAccessConfigs200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSmTrustedAccessConfigs_0ValidateBeforeCall(networkId, perPage, startingAfter, endingBefore, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetworkSmTrustedAccessConfigs200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSmUserAccessDevices_0
     * @param networkId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSmUserAccessDevices_0Call(String networkId, Integer perPage, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/sm/userAccessDevices"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingAfter", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endingBefore", endingBefore));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSmUserAccessDevices_0ValidateBeforeCall(String networkId, Integer perPage, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSmUserAccessDevices_0(Async)");
        }

        return getNetworkSmUserAccessDevices_0Call(networkId, perPage, startingAfter, endingBefore, _callback);

    }

    /**
     * List User Access Devices and its Trusted Access Connections
     * List User Access Devices and its Trusted Access Connections
     * @param networkId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @return List&lt;GetNetworkSmUserAccessDevices200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public List<GetNetworkSmUserAccessDevices200ResponseInner> getNetworkSmUserAccessDevices_0(String networkId, Integer perPage, String startingAfter, String endingBefore) throws ApiException {
        ApiResponse<List<GetNetworkSmUserAccessDevices200ResponseInner>> localVarResp = getNetworkSmUserAccessDevices_0WithHttpInfo(networkId, perPage, startingAfter, endingBefore);
        return localVarResp.getData();
    }

    /**
     * List User Access Devices and its Trusted Access Connections
     * List User Access Devices and its Trusted Access Connections
     * @param networkId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @return ApiResponse&lt;List&lt;GetNetworkSmUserAccessDevices200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetworkSmUserAccessDevices200ResponseInner>> getNetworkSmUserAccessDevices_0WithHttpInfo(String networkId, Integer perPage, String startingAfter, String endingBefore) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSmUserAccessDevices_0ValidateBeforeCall(networkId, perPage, startingAfter, endingBefore, null);
        Type localVarReturnType = new TypeToken<List<GetNetworkSmUserAccessDevices200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List User Access Devices and its Trusted Access Connections (asynchronously)
     * List User Access Devices and its Trusted Access Connections
     * @param networkId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSmUserAccessDevices_0Async(String networkId, Integer perPage, String startingAfter, String endingBefore, final ApiCallback<List<GetNetworkSmUserAccessDevices200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSmUserAccessDevices_0ValidateBeforeCall(networkId, perPage, startingAfter, endingBefore, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetworkSmUserAccessDevices200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSmUserDeviceProfiles_0
     * @param networkId  (required)
     * @param userId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSmUserDeviceProfiles_0Call(String networkId, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/sm/users/{userId}/deviceProfiles"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSmUserDeviceProfiles_0ValidateBeforeCall(String networkId, String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSmUserDeviceProfiles_0(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getNetworkSmUserDeviceProfiles_0(Async)");
        }

        return getNetworkSmUserDeviceProfiles_0Call(networkId, userId, _callback);

    }

    /**
     * Get the profiles associated with a user
     * Get the profiles associated with a user
     * @param networkId  (required)
     * @param userId  (required)
     * @return List&lt;GetNetworkSmDeviceDeviceProfiles200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetNetworkSmDeviceDeviceProfiles200ResponseInner> getNetworkSmUserDeviceProfiles_0(String networkId, String userId) throws ApiException {
        ApiResponse<List<GetNetworkSmDeviceDeviceProfiles200ResponseInner>> localVarResp = getNetworkSmUserDeviceProfiles_0WithHttpInfo(networkId, userId);
        return localVarResp.getData();
    }

    /**
     * Get the profiles associated with a user
     * Get the profiles associated with a user
     * @param networkId  (required)
     * @param userId  (required)
     * @return ApiResponse&lt;List&lt;GetNetworkSmDeviceDeviceProfiles200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetworkSmDeviceDeviceProfiles200ResponseInner>> getNetworkSmUserDeviceProfiles_0WithHttpInfo(String networkId, String userId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSmUserDeviceProfiles_0ValidateBeforeCall(networkId, userId, null);
        Type localVarReturnType = new TypeToken<List<GetNetworkSmDeviceDeviceProfiles200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the profiles associated with a user (asynchronously)
     * Get the profiles associated with a user
     * @param networkId  (required)
     * @param userId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSmUserDeviceProfiles_0Async(String networkId, String userId, final ApiCallback<List<GetNetworkSmDeviceDeviceProfiles200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSmUserDeviceProfiles_0ValidateBeforeCall(networkId, userId, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetworkSmDeviceDeviceProfiles200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSmUserSoftwares_0
     * @param networkId  (required)
     * @param userId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSmUserSoftwares_0Call(String networkId, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/sm/users/{userId}/softwares"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSmUserSoftwares_0ValidateBeforeCall(String networkId, String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSmUserSoftwares_0(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getNetworkSmUserSoftwares_0(Async)");
        }

        return getNetworkSmUserSoftwares_0Call(networkId, userId, _callback);

    }

    /**
     * Get a list of softwares associated with a user
     * Get a list of softwares associated with a user
     * @param networkId  (required)
     * @param userId  (required)
     * @return List&lt;GetNetworkSmDeviceSoftwares200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetNetworkSmDeviceSoftwares200ResponseInner> getNetworkSmUserSoftwares_0(String networkId, String userId) throws ApiException {
        ApiResponse<List<GetNetworkSmDeviceSoftwares200ResponseInner>> localVarResp = getNetworkSmUserSoftwares_0WithHttpInfo(networkId, userId);
        return localVarResp.getData();
    }

    /**
     * Get a list of softwares associated with a user
     * Get a list of softwares associated with a user
     * @param networkId  (required)
     * @param userId  (required)
     * @return ApiResponse&lt;List&lt;GetNetworkSmDeviceSoftwares200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetworkSmDeviceSoftwares200ResponseInner>> getNetworkSmUserSoftwares_0WithHttpInfo(String networkId, String userId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSmUserSoftwares_0ValidateBeforeCall(networkId, userId, null);
        Type localVarReturnType = new TypeToken<List<GetNetworkSmDeviceSoftwares200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of softwares associated with a user (asynchronously)
     * Get a list of softwares associated with a user
     * @param networkId  (required)
     * @param userId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSmUserSoftwares_0Async(String networkId, String userId, final ApiCallback<List<GetNetworkSmDeviceSoftwares200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSmUserSoftwares_0ValidateBeforeCall(networkId, userId, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetworkSmDeviceSoftwares200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSmUsers_0
     * @param networkId  (required)
     * @param ids Filter users by id(s). (optional)
     * @param usernames Filter users by username(s). (optional)
     * @param emails Filter users by email(s). (optional)
     * @param scope Specifiy a scope (one of all, none, withAny, withAll, withoutAny, withoutAll) and a set of tags. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSmUsers_0Call(String networkId, List<String> ids, List<String> usernames, List<String> emails, List<String> scope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/sm/users"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "ids", ids));
        }

        if (usernames != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "usernames", usernames));
        }

        if (emails != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "emails", emails));
        }

        if (scope != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "scope", scope));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSmUsers_0ValidateBeforeCall(String networkId, List<String> ids, List<String> usernames, List<String> emails, List<String> scope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSmUsers_0(Async)");
        }

        return getNetworkSmUsers_0Call(networkId, ids, usernames, emails, scope, _callback);

    }

    /**
     * List the owners in an SM network with various specified fields and filters
     * List the owners in an SM network with various specified fields and filters
     * @param networkId  (required)
     * @param ids Filter users by id(s). (optional)
     * @param usernames Filter users by username(s). (optional)
     * @param emails Filter users by email(s). (optional)
     * @param scope Specifiy a scope (one of all, none, withAny, withAll, withoutAny, withoutAll) and a set of tags. (optional)
     * @return List&lt;GetNetworkSmUsers200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetNetworkSmUsers200ResponseInner> getNetworkSmUsers_0(String networkId, List<String> ids, List<String> usernames, List<String> emails, List<String> scope) throws ApiException {
        ApiResponse<List<GetNetworkSmUsers200ResponseInner>> localVarResp = getNetworkSmUsers_0WithHttpInfo(networkId, ids, usernames, emails, scope);
        return localVarResp.getData();
    }

    /**
     * List the owners in an SM network with various specified fields and filters
     * List the owners in an SM network with various specified fields and filters
     * @param networkId  (required)
     * @param ids Filter users by id(s). (optional)
     * @param usernames Filter users by username(s). (optional)
     * @param emails Filter users by email(s). (optional)
     * @param scope Specifiy a scope (one of all, none, withAny, withAll, withoutAny, withoutAll) and a set of tags. (optional)
     * @return ApiResponse&lt;List&lt;GetNetworkSmUsers200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetworkSmUsers200ResponseInner>> getNetworkSmUsers_0WithHttpInfo(String networkId, List<String> ids, List<String> usernames, List<String> emails, List<String> scope) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSmUsers_0ValidateBeforeCall(networkId, ids, usernames, emails, scope, null);
        Type localVarReturnType = new TypeToken<List<GetNetworkSmUsers200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the owners in an SM network with various specified fields and filters (asynchronously)
     * List the owners in an SM network with various specified fields and filters
     * @param networkId  (required)
     * @param ids Filter users by id(s). (optional)
     * @param usernames Filter users by username(s). (optional)
     * @param emails Filter users by email(s). (optional)
     * @param scope Specifiy a scope (one of all, none, withAny, withAll, withoutAny, withoutAll) and a set of tags. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSmUsers_0Async(String networkId, List<String> ids, List<String> usernames, List<String> emails, List<String> scope, final ApiCallback<List<GetNetworkSmUsers200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSmUsers_0ValidateBeforeCall(networkId, ids, usernames, emails, scope, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetworkSmUsers200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSnmp_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSnmp_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/snmp"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSnmp_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSnmp_0(Async)");
        }

        return getNetworkSnmp_0Call(networkId, _callback);

    }

    /**
     * Return the SNMP settings for a network
     * Return the SNMP settings for a network
     * @param networkId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkSnmp_0(String networkId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkSnmp_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Return the SNMP settings for a network
     * Return the SNMP settings for a network
     * @param networkId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkSnmp_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSnmp_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the SNMP settings for a network (asynchronously)
     * Return the SNMP settings for a network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSnmp_0Async(String networkId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSnmp_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSwitchAccessControlLists_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchAccessControlLists_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/accessControlLists"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSwitchAccessControlLists_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSwitchAccessControlLists_0(Async)");
        }

        return getNetworkSwitchAccessControlLists_0Call(networkId, _callback);

    }

    /**
     * Return the access control lists for a MS network
     * Return the access control lists for a MS network
     * @param networkId  (required)
     * @return GetNetworkSwitchAccessControlLists200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkSwitchAccessControlLists200Response getNetworkSwitchAccessControlLists_0(String networkId) throws ApiException {
        ApiResponse<GetNetworkSwitchAccessControlLists200Response> localVarResp = getNetworkSwitchAccessControlLists_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Return the access control lists for a MS network
     * Return the access control lists for a MS network
     * @param networkId  (required)
     * @return ApiResponse&lt;GetNetworkSwitchAccessControlLists200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkSwitchAccessControlLists200Response> getNetworkSwitchAccessControlLists_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSwitchAccessControlLists_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<GetNetworkSwitchAccessControlLists200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the access control lists for a MS network (asynchronously)
     * Return the access control lists for a MS network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchAccessControlLists_0Async(String networkId, final ApiCallback<GetNetworkSwitchAccessControlLists200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSwitchAccessControlLists_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkSwitchAccessControlLists200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSwitchAccessPolicies_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchAccessPolicies_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/accessPolicies"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSwitchAccessPolicies_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSwitchAccessPolicies_0(Async)");
        }

        return getNetworkSwitchAccessPolicies_0Call(networkId, _callback);

    }

    /**
     * List the access policies for a switch network
     * List the access policies for a switch network. Only returns access policies with &#39;my RADIUS server&#39; as authentication method
     * @param networkId  (required)
     * @return List&lt;GetNetworkSwitchAccessPolicies200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetNetworkSwitchAccessPolicies200ResponseInner> getNetworkSwitchAccessPolicies_0(String networkId) throws ApiException {
        ApiResponse<List<GetNetworkSwitchAccessPolicies200ResponseInner>> localVarResp = getNetworkSwitchAccessPolicies_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * List the access policies for a switch network
     * List the access policies for a switch network. Only returns access policies with &#39;my RADIUS server&#39; as authentication method
     * @param networkId  (required)
     * @return ApiResponse&lt;List&lt;GetNetworkSwitchAccessPolicies200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetworkSwitchAccessPolicies200ResponseInner>> getNetworkSwitchAccessPolicies_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSwitchAccessPolicies_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<List<GetNetworkSwitchAccessPolicies200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the access policies for a switch network (asynchronously)
     * List the access policies for a switch network. Only returns access policies with &#39;my RADIUS server&#39; as authentication method
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchAccessPolicies_0Async(String networkId, final ApiCallback<List<GetNetworkSwitchAccessPolicies200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSwitchAccessPolicies_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetworkSwitchAccessPolicies200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSwitchAccessPolicy_0
     * @param networkId  (required)
     * @param accessPolicyNumber  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchAccessPolicy_0Call(String networkId, String accessPolicyNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/accessPolicies/{accessPolicyNumber}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "accessPolicyNumber" + "}", localVarApiClient.escapeString(accessPolicyNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSwitchAccessPolicy_0ValidateBeforeCall(String networkId, String accessPolicyNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSwitchAccessPolicy_0(Async)");
        }

        // verify the required parameter 'accessPolicyNumber' is set
        if (accessPolicyNumber == null) {
            throw new ApiException("Missing the required parameter 'accessPolicyNumber' when calling getNetworkSwitchAccessPolicy_0(Async)");
        }

        return getNetworkSwitchAccessPolicy_0Call(networkId, accessPolicyNumber, _callback);

    }

    /**
     * Return a specific access policy for a switch network
     * Return a specific access policy for a switch network
     * @param networkId  (required)
     * @param accessPolicyNumber  (required)
     * @return GetNetworkSwitchAccessPolicies200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkSwitchAccessPolicies200ResponseInner getNetworkSwitchAccessPolicy_0(String networkId, String accessPolicyNumber) throws ApiException {
        ApiResponse<GetNetworkSwitchAccessPolicies200ResponseInner> localVarResp = getNetworkSwitchAccessPolicy_0WithHttpInfo(networkId, accessPolicyNumber);
        return localVarResp.getData();
    }

    /**
     * Return a specific access policy for a switch network
     * Return a specific access policy for a switch network
     * @param networkId  (required)
     * @param accessPolicyNumber  (required)
     * @return ApiResponse&lt;GetNetworkSwitchAccessPolicies200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkSwitchAccessPolicies200ResponseInner> getNetworkSwitchAccessPolicy_0WithHttpInfo(String networkId, String accessPolicyNumber) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSwitchAccessPolicy_0ValidateBeforeCall(networkId, accessPolicyNumber, null);
        Type localVarReturnType = new TypeToken<GetNetworkSwitchAccessPolicies200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a specific access policy for a switch network (asynchronously)
     * Return a specific access policy for a switch network
     * @param networkId  (required)
     * @param accessPolicyNumber  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchAccessPolicy_0Async(String networkId, String accessPolicyNumber, final ApiCallback<GetNetworkSwitchAccessPolicies200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSwitchAccessPolicy_0ValidateBeforeCall(networkId, accessPolicyNumber, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkSwitchAccessPolicies200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSwitchAlternateManagementInterface_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchAlternateManagementInterface_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/alternateManagementInterface"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSwitchAlternateManagementInterface_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSwitchAlternateManagementInterface_0(Async)");
        }

        return getNetworkSwitchAlternateManagementInterface_0Call(networkId, _callback);

    }

    /**
     * Return the switch alternate management interface for the network
     * Return the switch alternate management interface for the network
     * @param networkId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkSwitchAlternateManagementInterface_0(String networkId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkSwitchAlternateManagementInterface_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Return the switch alternate management interface for the network
     * Return the switch alternate management interface for the network
     * @param networkId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkSwitchAlternateManagementInterface_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSwitchAlternateManagementInterface_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the switch alternate management interface for the network (asynchronously)
     * Return the switch alternate management interface for the network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchAlternateManagementInterface_0Async(String networkId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSwitchAlternateManagementInterface_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_0
     * @param networkId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_0Call(String networkId, Integer perPage, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/dhcpServerPolicy/arpInspection/trustedServers"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingAfter", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endingBefore", endingBefore));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_0ValidateBeforeCall(String networkId, Integer perPage, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_0(Async)");
        }

        return getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_0Call(networkId, perPage, startingAfter, endingBefore, _callback);

    }

    /**
     * Return the list of servers trusted by Dynamic ARP Inspection on this network
     * Return the list of servers trusted by Dynamic ARP Inspection on this network. These are also known as whitelisted snoop entries
     * @param networkId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @return List&lt;GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public List<GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner> getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_0(String networkId, Integer perPage, String startingAfter, String endingBefore) throws ApiException {
        ApiResponse<List<GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner>> localVarResp = getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_0WithHttpInfo(networkId, perPage, startingAfter, endingBefore);
        return localVarResp.getData();
    }

    /**
     * Return the list of servers trusted by Dynamic ARP Inspection on this network
     * Return the list of servers trusted by Dynamic ARP Inspection on this network. These are also known as whitelisted snoop entries
     * @param networkId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @return ApiResponse&lt;List&lt;GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner>> getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_0WithHttpInfo(String networkId, Integer perPage, String startingAfter, String endingBefore) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_0ValidateBeforeCall(networkId, perPage, startingAfter, endingBefore, null);
        Type localVarReturnType = new TypeToken<List<GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the list of servers trusted by Dynamic ARP Inspection on this network (asynchronously)
     * Return the list of servers trusted by Dynamic ARP Inspection on this network. These are also known as whitelisted snoop entries
     * @param networkId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_0Async(String networkId, Integer perPage, String startingAfter, String endingBefore, final ApiCallback<List<GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_0ValidateBeforeCall(networkId, perPage, startingAfter, endingBefore, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice_0
     * @param networkId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice_0Call(String networkId, Integer perPage, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/dhcpServerPolicy/arpInspection/warnings/byDevice"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingAfter", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endingBefore", endingBefore));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice_0ValidateBeforeCall(String networkId, Integer perPage, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice_0(Async)");
        }

        return getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice_0Call(networkId, perPage, startingAfter, endingBefore, _callback);

    }

    /**
     * Return the devices that have a Dynamic ARP Inspection warning and their warnings
     * Return the devices that have a Dynamic ARP Inspection warning and their warnings
     * @param networkId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @return List&lt;GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public List<GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner> getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice_0(String networkId, Integer perPage, String startingAfter, String endingBefore) throws ApiException {
        ApiResponse<List<GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner>> localVarResp = getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice_0WithHttpInfo(networkId, perPage, startingAfter, endingBefore);
        return localVarResp.getData();
    }

    /**
     * Return the devices that have a Dynamic ARP Inspection warning and their warnings
     * Return the devices that have a Dynamic ARP Inspection warning and their warnings
     * @param networkId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @return ApiResponse&lt;List&lt;GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner>> getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice_0WithHttpInfo(String networkId, Integer perPage, String startingAfter, String endingBefore) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice_0ValidateBeforeCall(networkId, perPage, startingAfter, endingBefore, null);
        Type localVarReturnType = new TypeToken<List<GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the devices that have a Dynamic ARP Inspection warning and their warnings (asynchronously)
     * Return the devices that have a Dynamic ARP Inspection warning and their warnings
     * @param networkId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice_0Async(String networkId, Integer perPage, String startingAfter, String endingBefore, final ApiCallback<List<GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice_0ValidateBeforeCall(networkId, perPage, startingAfter, endingBefore, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSwitchDhcpServerPolicy_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchDhcpServerPolicy_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/dhcpServerPolicy"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSwitchDhcpServerPolicy_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSwitchDhcpServerPolicy_0(Async)");
        }

        return getNetworkSwitchDhcpServerPolicy_0Call(networkId, _callback);

    }

    /**
     * Return the DHCP server settings
     * Return the DHCP server settings. Blocked/allowed servers are only applied when default policy is allow/block, respectively
     * @param networkId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkSwitchDhcpServerPolicy_0(String networkId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkSwitchDhcpServerPolicy_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Return the DHCP server settings
     * Return the DHCP server settings. Blocked/allowed servers are only applied when default policy is allow/block, respectively
     * @param networkId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkSwitchDhcpServerPolicy_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSwitchDhcpServerPolicy_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the DHCP server settings (asynchronously)
     * Return the DHCP server settings. Blocked/allowed servers are only applied when default policy is allow/block, respectively
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchDhcpServerPolicy_0Async(String networkId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSwitchDhcpServerPolicy_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSwitchDhcpV4ServersSeen_0
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchDhcpV4ServersSeen_0Call(String networkId, String t0, Float timespan, Integer perPage, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/dhcp/v4/servers/seen"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (t0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t0", t0));
        }

        if (timespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timespan", timespan));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingAfter", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endingBefore", endingBefore));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSwitchDhcpV4ServersSeen_0ValidateBeforeCall(String networkId, String t0, Float timespan, Integer perPage, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSwitchDhcpV4ServersSeen_0(Async)");
        }

        return getNetworkSwitchDhcpV4ServersSeen_0Call(networkId, t0, timespan, perPage, startingAfter, endingBefore, _callback);

    }

    /**
     * Return the network&#39;s DHCPv4 servers seen within the selected timeframe (default 1 day)
     * Return the network&#39;s DHCPv4 servers seen within the selected timeframe (default 1 day)
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @return List&lt;GetNetworkSwitchDhcpV4ServersSeen200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public List<GetNetworkSwitchDhcpV4ServersSeen200ResponseInner> getNetworkSwitchDhcpV4ServersSeen_0(String networkId, String t0, Float timespan, Integer perPage, String startingAfter, String endingBefore) throws ApiException {
        ApiResponse<List<GetNetworkSwitchDhcpV4ServersSeen200ResponseInner>> localVarResp = getNetworkSwitchDhcpV4ServersSeen_0WithHttpInfo(networkId, t0, timespan, perPage, startingAfter, endingBefore);
        return localVarResp.getData();
    }

    /**
     * Return the network&#39;s DHCPv4 servers seen within the selected timeframe (default 1 day)
     * Return the network&#39;s DHCPv4 servers seen within the selected timeframe (default 1 day)
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @return ApiResponse&lt;List&lt;GetNetworkSwitchDhcpV4ServersSeen200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetworkSwitchDhcpV4ServersSeen200ResponseInner>> getNetworkSwitchDhcpV4ServersSeen_0WithHttpInfo(String networkId, String t0, Float timespan, Integer perPage, String startingAfter, String endingBefore) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSwitchDhcpV4ServersSeen_0ValidateBeforeCall(networkId, t0, timespan, perPage, startingAfter, endingBefore, null);
        Type localVarReturnType = new TypeToken<List<GetNetworkSwitchDhcpV4ServersSeen200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the network&#39;s DHCPv4 servers seen within the selected timeframe (default 1 day) (asynchronously)
     * Return the network&#39;s DHCPv4 servers seen within the selected timeframe (default 1 day)
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 1 day. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchDhcpV4ServersSeen_0Async(String networkId, String t0, Float timespan, Integer perPage, String startingAfter, String endingBefore, final ApiCallback<List<GetNetworkSwitchDhcpV4ServersSeen200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSwitchDhcpV4ServersSeen_0ValidateBeforeCall(networkId, t0, timespan, perPage, startingAfter, endingBefore, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetworkSwitchDhcpV4ServersSeen200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSwitchDscpToCosMappings_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchDscpToCosMappings_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/dscpToCosMappings"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSwitchDscpToCosMappings_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSwitchDscpToCosMappings_0(Async)");
        }

        return getNetworkSwitchDscpToCosMappings_0Call(networkId, _callback);

    }

    /**
     * Return the DSCP to CoS mappings
     * Return the DSCP to CoS mappings
     * @param networkId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkSwitchDscpToCosMappings_0(String networkId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkSwitchDscpToCosMappings_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Return the DSCP to CoS mappings
     * Return the DSCP to CoS mappings
     * @param networkId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkSwitchDscpToCosMappings_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSwitchDscpToCosMappings_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the DSCP to CoS mappings (asynchronously)
     * Return the DSCP to CoS mappings
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchDscpToCosMappings_0Async(String networkId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSwitchDscpToCosMappings_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSwitchLinkAggregations_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchLinkAggregations_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/linkAggregations"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSwitchLinkAggregations_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSwitchLinkAggregations_0(Async)");
        }

        return getNetworkSwitchLinkAggregations_0Call(networkId, _callback);

    }

    /**
     * List link aggregation groups
     * List link aggregation groups
     * @param networkId  (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getNetworkSwitchLinkAggregations_0(String networkId) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getNetworkSwitchLinkAggregations_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * List link aggregation groups
     * List link aggregation groups
     * @param networkId  (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getNetworkSwitchLinkAggregations_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSwitchLinkAggregations_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List link aggregation groups (asynchronously)
     * List link aggregation groups
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchLinkAggregations_0Async(String networkId, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSwitchLinkAggregations_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSwitchMtu_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchMtu_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/mtu"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSwitchMtu_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSwitchMtu_0(Async)");
        }

        return getNetworkSwitchMtu_0Call(networkId, _callback);

    }

    /**
     * Return the MTU configuration
     * Return the MTU configuration
     * @param networkId  (required)
     * @return GetNetworkSwitchMtu200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkSwitchMtu200Response getNetworkSwitchMtu_0(String networkId) throws ApiException {
        ApiResponse<GetNetworkSwitchMtu200Response> localVarResp = getNetworkSwitchMtu_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Return the MTU configuration
     * Return the MTU configuration
     * @param networkId  (required)
     * @return ApiResponse&lt;GetNetworkSwitchMtu200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkSwitchMtu200Response> getNetworkSwitchMtu_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSwitchMtu_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<GetNetworkSwitchMtu200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the MTU configuration (asynchronously)
     * Return the MTU configuration
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchMtu_0Async(String networkId, final ApiCallback<GetNetworkSwitchMtu200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSwitchMtu_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkSwitchMtu200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSwitchPortSchedules_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchPortSchedules_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/portSchedules"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSwitchPortSchedules_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSwitchPortSchedules_0(Async)");
        }

        return getNetworkSwitchPortSchedules_0Call(networkId, _callback);

    }

    /**
     * List switch port schedules
     * List switch port schedules
     * @param networkId  (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getNetworkSwitchPortSchedules_0(String networkId) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getNetworkSwitchPortSchedules_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * List switch port schedules
     * List switch port schedules
     * @param networkId  (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getNetworkSwitchPortSchedules_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSwitchPortSchedules_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List switch port schedules (asynchronously)
     * List switch port schedules
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchPortSchedules_0Async(String networkId, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSwitchPortSchedules_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSwitchQosRule_0
     * @param networkId  (required)
     * @param qosRuleId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchQosRule_0Call(String networkId, String qosRuleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/qosRules/{qosRuleId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "qosRuleId" + "}", localVarApiClient.escapeString(qosRuleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSwitchQosRule_0ValidateBeforeCall(String networkId, String qosRuleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSwitchQosRule_0(Async)");
        }

        // verify the required parameter 'qosRuleId' is set
        if (qosRuleId == null) {
            throw new ApiException("Missing the required parameter 'qosRuleId' when calling getNetworkSwitchQosRule_0(Async)");
        }

        return getNetworkSwitchQosRule_0Call(networkId, qosRuleId, _callback);

    }

    /**
     * Return a quality of service rule
     * Return a quality of service rule
     * @param networkId  (required)
     * @param qosRuleId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkSwitchQosRule_0(String networkId, String qosRuleId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkSwitchQosRule_0WithHttpInfo(networkId, qosRuleId);
        return localVarResp.getData();
    }

    /**
     * Return a quality of service rule
     * Return a quality of service rule
     * @param networkId  (required)
     * @param qosRuleId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkSwitchQosRule_0WithHttpInfo(String networkId, String qosRuleId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSwitchQosRule_0ValidateBeforeCall(networkId, qosRuleId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a quality of service rule (asynchronously)
     * Return a quality of service rule
     * @param networkId  (required)
     * @param qosRuleId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchQosRule_0Async(String networkId, String qosRuleId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSwitchQosRule_0ValidateBeforeCall(networkId, qosRuleId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSwitchQosRulesOrder_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchQosRulesOrder_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/qosRules/order"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSwitchQosRulesOrder_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSwitchQosRulesOrder_0(Async)");
        }

        return getNetworkSwitchQosRulesOrder_0Call(networkId, _callback);

    }

    /**
     * Return the quality of service rule IDs by order in which they will be processed by the switch
     * Return the quality of service rule IDs by order in which they will be processed by the switch
     * @param networkId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkSwitchQosRulesOrder_0(String networkId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkSwitchQosRulesOrder_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Return the quality of service rule IDs by order in which they will be processed by the switch
     * Return the quality of service rule IDs by order in which they will be processed by the switch
     * @param networkId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkSwitchQosRulesOrder_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSwitchQosRulesOrder_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the quality of service rule IDs by order in which they will be processed by the switch (asynchronously)
     * Return the quality of service rule IDs by order in which they will be processed by the switch
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchQosRulesOrder_0Async(String networkId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSwitchQosRulesOrder_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSwitchQosRules_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchQosRules_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/qosRules"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSwitchQosRules_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSwitchQosRules_0(Async)");
        }

        return getNetworkSwitchQosRules_0Call(networkId, _callback);

    }

    /**
     * List quality of service rules
     * List quality of service rules
     * @param networkId  (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getNetworkSwitchQosRules_0(String networkId) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getNetworkSwitchQosRules_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * List quality of service rules
     * List quality of service rules
     * @param networkId  (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getNetworkSwitchQosRules_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSwitchQosRules_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List quality of service rules (asynchronously)
     * List quality of service rules
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchQosRules_0Async(String networkId, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSwitchQosRules_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSwitchRoutingMulticastRendezvousPoint_0
     * @param networkId  (required)
     * @param rendezvousPointId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchRoutingMulticastRendezvousPoint_0Call(String networkId, String rendezvousPointId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/routing/multicast/rendezvousPoints/{rendezvousPointId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "rendezvousPointId" + "}", localVarApiClient.escapeString(rendezvousPointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSwitchRoutingMulticastRendezvousPoint_0ValidateBeforeCall(String networkId, String rendezvousPointId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSwitchRoutingMulticastRendezvousPoint_0(Async)");
        }

        // verify the required parameter 'rendezvousPointId' is set
        if (rendezvousPointId == null) {
            throw new ApiException("Missing the required parameter 'rendezvousPointId' when calling getNetworkSwitchRoutingMulticastRendezvousPoint_0(Async)");
        }

        return getNetworkSwitchRoutingMulticastRendezvousPoint_0Call(networkId, rendezvousPointId, _callback);

    }

    /**
     * Return a multicast rendezvous point
     * Return a multicast rendezvous point
     * @param networkId  (required)
     * @param rendezvousPointId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkSwitchRoutingMulticastRendezvousPoint_0(String networkId, String rendezvousPointId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkSwitchRoutingMulticastRendezvousPoint_0WithHttpInfo(networkId, rendezvousPointId);
        return localVarResp.getData();
    }

    /**
     * Return a multicast rendezvous point
     * Return a multicast rendezvous point
     * @param networkId  (required)
     * @param rendezvousPointId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkSwitchRoutingMulticastRendezvousPoint_0WithHttpInfo(String networkId, String rendezvousPointId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSwitchRoutingMulticastRendezvousPoint_0ValidateBeforeCall(networkId, rendezvousPointId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a multicast rendezvous point (asynchronously)
     * Return a multicast rendezvous point
     * @param networkId  (required)
     * @param rendezvousPointId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchRoutingMulticastRendezvousPoint_0Async(String networkId, String rendezvousPointId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSwitchRoutingMulticastRendezvousPoint_0ValidateBeforeCall(networkId, rendezvousPointId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSwitchRoutingMulticastRendezvousPoints_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchRoutingMulticastRendezvousPoints_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/routing/multicast/rendezvousPoints"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSwitchRoutingMulticastRendezvousPoints_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSwitchRoutingMulticastRendezvousPoints_0(Async)");
        }

        return getNetworkSwitchRoutingMulticastRendezvousPoints_0Call(networkId, _callback);

    }

    /**
     * List multicast rendezvous points
     * List multicast rendezvous points
     * @param networkId  (required)
     * @return List&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<List<Object>> getNetworkSwitchRoutingMulticastRendezvousPoints_0(String networkId) throws ApiException {
        ApiResponse<List<List<Object>>> localVarResp = getNetworkSwitchRoutingMulticastRendezvousPoints_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * List multicast rendezvous points
     * List multicast rendezvous points
     * @param networkId  (required)
     * @return ApiResponse&lt;List&lt;List&lt;Object&gt;&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<List<Object>>> getNetworkSwitchRoutingMulticastRendezvousPoints_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSwitchRoutingMulticastRendezvousPoints_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<List<List<Object>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List multicast rendezvous points (asynchronously)
     * List multicast rendezvous points
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchRoutingMulticastRendezvousPoints_0Async(String networkId, final ApiCallback<List<List<Object>>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSwitchRoutingMulticastRendezvousPoints_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<List<List<Object>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSwitchRoutingMulticast_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchRoutingMulticast_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/routing/multicast"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSwitchRoutingMulticast_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSwitchRoutingMulticast_0(Async)");
        }

        return getNetworkSwitchRoutingMulticast_0Call(networkId, _callback);

    }

    /**
     * Return multicast settings for a network
     * Return multicast settings for a network
     * @param networkId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkSwitchRoutingMulticast_0(String networkId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkSwitchRoutingMulticast_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Return multicast settings for a network
     * Return multicast settings for a network
     * @param networkId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkSwitchRoutingMulticast_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSwitchRoutingMulticast_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return multicast settings for a network (asynchronously)
     * Return multicast settings for a network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchRoutingMulticast_0Async(String networkId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSwitchRoutingMulticast_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSwitchRoutingOspf_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchRoutingOspf_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/routing/ospf"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSwitchRoutingOspf_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSwitchRoutingOspf_0(Async)");
        }

        return getNetworkSwitchRoutingOspf_0Call(networkId, _callback);

    }

    /**
     * Return layer 3 OSPF routing configuration
     * Return layer 3 OSPF routing configuration
     * @param networkId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkSwitchRoutingOspf_0(String networkId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkSwitchRoutingOspf_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Return layer 3 OSPF routing configuration
     * Return layer 3 OSPF routing configuration
     * @param networkId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkSwitchRoutingOspf_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSwitchRoutingOspf_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return layer 3 OSPF routing configuration (asynchronously)
     * Return layer 3 OSPF routing configuration
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchRoutingOspf_0Async(String networkId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSwitchRoutingOspf_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSwitchSettings_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchSettings_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/settings"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSwitchSettings_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSwitchSettings_0(Async)");
        }

        return getNetworkSwitchSettings_0Call(networkId, _callback);

    }

    /**
     * Returns the switch network settings
     * Returns the switch network settings
     * @param networkId  (required)
     * @return GetNetworkSwitchSettings200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkSwitchSettings200Response getNetworkSwitchSettings_0(String networkId) throws ApiException {
        ApiResponse<GetNetworkSwitchSettings200Response> localVarResp = getNetworkSwitchSettings_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Returns the switch network settings
     * Returns the switch network settings
     * @param networkId  (required)
     * @return ApiResponse&lt;GetNetworkSwitchSettings200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkSwitchSettings200Response> getNetworkSwitchSettings_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSwitchSettings_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<GetNetworkSwitchSettings200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the switch network settings (asynchronously)
     * Returns the switch network settings
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchSettings_0Async(String networkId, final ApiCallback<GetNetworkSwitchSettings200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSwitchSettings_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkSwitchSettings200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSwitchStackRoutingInterfaceDhcp_0
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param interfaceId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchStackRoutingInterfaceDhcp_0Call(String networkId, String switchStackId, String interfaceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}/dhcp"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "switchStackId" + "}", localVarApiClient.escapeString(switchStackId.toString()))
            .replace("{" + "interfaceId" + "}", localVarApiClient.escapeString(interfaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSwitchStackRoutingInterfaceDhcp_0ValidateBeforeCall(String networkId, String switchStackId, String interfaceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSwitchStackRoutingInterfaceDhcp_0(Async)");
        }

        // verify the required parameter 'switchStackId' is set
        if (switchStackId == null) {
            throw new ApiException("Missing the required parameter 'switchStackId' when calling getNetworkSwitchStackRoutingInterfaceDhcp_0(Async)");
        }

        // verify the required parameter 'interfaceId' is set
        if (interfaceId == null) {
            throw new ApiException("Missing the required parameter 'interfaceId' when calling getNetworkSwitchStackRoutingInterfaceDhcp_0(Async)");
        }

        return getNetworkSwitchStackRoutingInterfaceDhcp_0Call(networkId, switchStackId, interfaceId, _callback);

    }

    /**
     * Return a layer 3 interface DHCP configuration for a switch stack
     * Return a layer 3 interface DHCP configuration for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param interfaceId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkSwitchStackRoutingInterfaceDhcp_0(String networkId, String switchStackId, String interfaceId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkSwitchStackRoutingInterfaceDhcp_0WithHttpInfo(networkId, switchStackId, interfaceId);
        return localVarResp.getData();
    }

    /**
     * Return a layer 3 interface DHCP configuration for a switch stack
     * Return a layer 3 interface DHCP configuration for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param interfaceId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkSwitchStackRoutingInterfaceDhcp_0WithHttpInfo(String networkId, String switchStackId, String interfaceId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSwitchStackRoutingInterfaceDhcp_0ValidateBeforeCall(networkId, switchStackId, interfaceId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a layer 3 interface DHCP configuration for a switch stack (asynchronously)
     * Return a layer 3 interface DHCP configuration for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param interfaceId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchStackRoutingInterfaceDhcp_0Async(String networkId, String switchStackId, String interfaceId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSwitchStackRoutingInterfaceDhcp_0ValidateBeforeCall(networkId, switchStackId, interfaceId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSwitchStackRoutingInterface_0
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param interfaceId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchStackRoutingInterface_0Call(String networkId, String switchStackId, String interfaceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "switchStackId" + "}", localVarApiClient.escapeString(switchStackId.toString()))
            .replace("{" + "interfaceId" + "}", localVarApiClient.escapeString(interfaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSwitchStackRoutingInterface_0ValidateBeforeCall(String networkId, String switchStackId, String interfaceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSwitchStackRoutingInterface_0(Async)");
        }

        // verify the required parameter 'switchStackId' is set
        if (switchStackId == null) {
            throw new ApiException("Missing the required parameter 'switchStackId' when calling getNetworkSwitchStackRoutingInterface_0(Async)");
        }

        // verify the required parameter 'interfaceId' is set
        if (interfaceId == null) {
            throw new ApiException("Missing the required parameter 'interfaceId' when calling getNetworkSwitchStackRoutingInterface_0(Async)");
        }

        return getNetworkSwitchStackRoutingInterface_0Call(networkId, switchStackId, interfaceId, _callback);

    }

    /**
     * Return a layer 3 interface from a switch stack
     * Return a layer 3 interface from a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param interfaceId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkSwitchStackRoutingInterface_0(String networkId, String switchStackId, String interfaceId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkSwitchStackRoutingInterface_0WithHttpInfo(networkId, switchStackId, interfaceId);
        return localVarResp.getData();
    }

    /**
     * Return a layer 3 interface from a switch stack
     * Return a layer 3 interface from a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param interfaceId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkSwitchStackRoutingInterface_0WithHttpInfo(String networkId, String switchStackId, String interfaceId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSwitchStackRoutingInterface_0ValidateBeforeCall(networkId, switchStackId, interfaceId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a layer 3 interface from a switch stack (asynchronously)
     * Return a layer 3 interface from a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param interfaceId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchStackRoutingInterface_0Async(String networkId, String switchStackId, String interfaceId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSwitchStackRoutingInterface_0ValidateBeforeCall(networkId, switchStackId, interfaceId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSwitchStackRoutingInterfaces_0
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchStackRoutingInterfaces_0Call(String networkId, String switchStackId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "switchStackId" + "}", localVarApiClient.escapeString(switchStackId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSwitchStackRoutingInterfaces_0ValidateBeforeCall(String networkId, String switchStackId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSwitchStackRoutingInterfaces_0(Async)");
        }

        // verify the required parameter 'switchStackId' is set
        if (switchStackId == null) {
            throw new ApiException("Missing the required parameter 'switchStackId' when calling getNetworkSwitchStackRoutingInterfaces_0(Async)");
        }

        return getNetworkSwitchStackRoutingInterfaces_0Call(networkId, switchStackId, _callback);

    }

    /**
     * List layer 3 interfaces for a switch stack
     * List layer 3 interfaces for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getNetworkSwitchStackRoutingInterfaces_0(String networkId, String switchStackId) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getNetworkSwitchStackRoutingInterfaces_0WithHttpInfo(networkId, switchStackId);
        return localVarResp.getData();
    }

    /**
     * List layer 3 interfaces for a switch stack
     * List layer 3 interfaces for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getNetworkSwitchStackRoutingInterfaces_0WithHttpInfo(String networkId, String switchStackId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSwitchStackRoutingInterfaces_0ValidateBeforeCall(networkId, switchStackId, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List layer 3 interfaces for a switch stack (asynchronously)
     * List layer 3 interfaces for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchStackRoutingInterfaces_0Async(String networkId, String switchStackId, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSwitchStackRoutingInterfaces_0ValidateBeforeCall(networkId, switchStackId, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSwitchStackRoutingStaticRoute_0
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param staticRouteId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchStackRoutingStaticRoute_0Call(String networkId, String switchStackId, String staticRouteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes/{staticRouteId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "switchStackId" + "}", localVarApiClient.escapeString(switchStackId.toString()))
            .replace("{" + "staticRouteId" + "}", localVarApiClient.escapeString(staticRouteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSwitchStackRoutingStaticRoute_0ValidateBeforeCall(String networkId, String switchStackId, String staticRouteId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSwitchStackRoutingStaticRoute_0(Async)");
        }

        // verify the required parameter 'switchStackId' is set
        if (switchStackId == null) {
            throw new ApiException("Missing the required parameter 'switchStackId' when calling getNetworkSwitchStackRoutingStaticRoute_0(Async)");
        }

        // verify the required parameter 'staticRouteId' is set
        if (staticRouteId == null) {
            throw new ApiException("Missing the required parameter 'staticRouteId' when calling getNetworkSwitchStackRoutingStaticRoute_0(Async)");
        }

        return getNetworkSwitchStackRoutingStaticRoute_0Call(networkId, switchStackId, staticRouteId, _callback);

    }

    /**
     * Return a layer 3 static route for a switch stack
     * Return a layer 3 static route for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param staticRouteId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkSwitchStackRoutingStaticRoute_0(String networkId, String switchStackId, String staticRouteId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkSwitchStackRoutingStaticRoute_0WithHttpInfo(networkId, switchStackId, staticRouteId);
        return localVarResp.getData();
    }

    /**
     * Return a layer 3 static route for a switch stack
     * Return a layer 3 static route for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param staticRouteId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkSwitchStackRoutingStaticRoute_0WithHttpInfo(String networkId, String switchStackId, String staticRouteId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSwitchStackRoutingStaticRoute_0ValidateBeforeCall(networkId, switchStackId, staticRouteId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a layer 3 static route for a switch stack (asynchronously)
     * Return a layer 3 static route for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param staticRouteId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchStackRoutingStaticRoute_0Async(String networkId, String switchStackId, String staticRouteId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSwitchStackRoutingStaticRoute_0ValidateBeforeCall(networkId, switchStackId, staticRouteId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSwitchStackRoutingStaticRoutes_0
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchStackRoutingStaticRoutes_0Call(String networkId, String switchStackId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "switchStackId" + "}", localVarApiClient.escapeString(switchStackId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSwitchStackRoutingStaticRoutes_0ValidateBeforeCall(String networkId, String switchStackId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSwitchStackRoutingStaticRoutes_0(Async)");
        }

        // verify the required parameter 'switchStackId' is set
        if (switchStackId == null) {
            throw new ApiException("Missing the required parameter 'switchStackId' when calling getNetworkSwitchStackRoutingStaticRoutes_0(Async)");
        }

        return getNetworkSwitchStackRoutingStaticRoutes_0Call(networkId, switchStackId, _callback);

    }

    /**
     * List layer 3 static routes for a switch stack
     * List layer 3 static routes for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getNetworkSwitchStackRoutingStaticRoutes_0(String networkId, String switchStackId) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getNetworkSwitchStackRoutingStaticRoutes_0WithHttpInfo(networkId, switchStackId);
        return localVarResp.getData();
    }

    /**
     * List layer 3 static routes for a switch stack
     * List layer 3 static routes for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getNetworkSwitchStackRoutingStaticRoutes_0WithHttpInfo(String networkId, String switchStackId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSwitchStackRoutingStaticRoutes_0ValidateBeforeCall(networkId, switchStackId, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List layer 3 static routes for a switch stack (asynchronously)
     * List layer 3 static routes for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchStackRoutingStaticRoutes_0Async(String networkId, String switchStackId, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSwitchStackRoutingStaticRoutes_0ValidateBeforeCall(networkId, switchStackId, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSwitchStack_0
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchStack_0Call(String networkId, String switchStackId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/stacks/{switchStackId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "switchStackId" + "}", localVarApiClient.escapeString(switchStackId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSwitchStack_0ValidateBeforeCall(String networkId, String switchStackId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSwitchStack_0(Async)");
        }

        // verify the required parameter 'switchStackId' is set
        if (switchStackId == null) {
            throw new ApiException("Missing the required parameter 'switchStackId' when calling getNetworkSwitchStack_0(Async)");
        }

        return getNetworkSwitchStack_0Call(networkId, switchStackId, _callback);

    }

    /**
     * Show a switch stack
     * Show a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @return GetNetworkSwitchStack200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkSwitchStack200Response getNetworkSwitchStack_0(String networkId, String switchStackId) throws ApiException {
        ApiResponse<GetNetworkSwitchStack200Response> localVarResp = getNetworkSwitchStack_0WithHttpInfo(networkId, switchStackId);
        return localVarResp.getData();
    }

    /**
     * Show a switch stack
     * Show a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @return ApiResponse&lt;GetNetworkSwitchStack200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkSwitchStack200Response> getNetworkSwitchStack_0WithHttpInfo(String networkId, String switchStackId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSwitchStack_0ValidateBeforeCall(networkId, switchStackId, null);
        Type localVarReturnType = new TypeToken<GetNetworkSwitchStack200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Show a switch stack (asynchronously)
     * Show a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchStack_0Async(String networkId, String switchStackId, final ApiCallback<GetNetworkSwitchStack200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSwitchStack_0ValidateBeforeCall(networkId, switchStackId, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkSwitchStack200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSwitchStacks_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchStacks_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/stacks"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSwitchStacks_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSwitchStacks_0(Async)");
        }

        return getNetworkSwitchStacks_0Call(networkId, _callback);

    }

    /**
     * List the switch stacks in a network
     * List the switch stacks in a network
     * @param networkId  (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getNetworkSwitchStacks_0(String networkId) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getNetworkSwitchStacks_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * List the switch stacks in a network
     * List the switch stacks in a network
     * @param networkId  (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getNetworkSwitchStacks_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSwitchStacks_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the switch stacks in a network (asynchronously)
     * List the switch stacks in a network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchStacks_0Async(String networkId, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSwitchStacks_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSwitchStormControl_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchStormControl_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/stormControl"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSwitchStormControl_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSwitchStormControl_0(Async)");
        }

        return getNetworkSwitchStormControl_0Call(networkId, _callback);

    }

    /**
     * Return the storm control configuration for a switch network
     * Return the storm control configuration for a switch network
     * @param networkId  (required)
     * @return GetNetworkSwitchStormControl200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkSwitchStormControl200Response getNetworkSwitchStormControl_0(String networkId) throws ApiException {
        ApiResponse<GetNetworkSwitchStormControl200Response> localVarResp = getNetworkSwitchStormControl_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Return the storm control configuration for a switch network
     * Return the storm control configuration for a switch network
     * @param networkId  (required)
     * @return ApiResponse&lt;GetNetworkSwitchStormControl200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkSwitchStormControl200Response> getNetworkSwitchStormControl_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSwitchStormControl_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<GetNetworkSwitchStormControl200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the storm control configuration for a switch network (asynchronously)
     * Return the storm control configuration for a switch network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchStormControl_0Async(String networkId, final ApiCallback<GetNetworkSwitchStormControl200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSwitchStormControl_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkSwitchStormControl200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSwitchStp_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchStp_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/stp"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSwitchStp_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSwitchStp_0(Async)");
        }

        return getNetworkSwitchStp_0Call(networkId, _callback);

    }

    /**
     * Returns STP settings
     * Returns STP settings
     * @param networkId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkSwitchStp_0(String networkId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkSwitchStp_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Returns STP settings
     * Returns STP settings
     * @param networkId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkSwitchStp_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSwitchStp_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns STP settings (asynchronously)
     * Returns STP settings
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSwitchStp_0Async(String networkId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSwitchStp_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkSyslogServers_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSyslogServers_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/syslogServers"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkSyslogServers_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkSyslogServers_0(Async)");
        }

        return getNetworkSyslogServers_0Call(networkId, _callback);

    }

    /**
     * List the syslog servers for a network
     * List the syslog servers for a network
     * @param networkId  (required)
     * @return GetNetworkSyslogServers200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkSyslogServers200Response getNetworkSyslogServers_0(String networkId) throws ApiException {
        ApiResponse<GetNetworkSyslogServers200Response> localVarResp = getNetworkSyslogServers_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * List the syslog servers for a network
     * List the syslog servers for a network
     * @param networkId  (required)
     * @return ApiResponse&lt;GetNetworkSyslogServers200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkSyslogServers200Response> getNetworkSyslogServers_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkSyslogServers_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<GetNetworkSyslogServers200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the syslog servers for a network (asynchronously)
     * List the syslog servers for a network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkSyslogServers_0Async(String networkId, final ApiCallback<GetNetworkSyslogServers200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkSyslogServers_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkSyslogServers200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkTrafficAnalysis_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkTrafficAnalysis_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/trafficAnalysis"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkTrafficAnalysis_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkTrafficAnalysis_0(Async)");
        }

        return getNetworkTrafficAnalysis_0Call(networkId, _callback);

    }

    /**
     * Return the traffic analysis settings for a network
     * Return the traffic analysis settings for a network
     * @param networkId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkTrafficAnalysis_0(String networkId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkTrafficAnalysis_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Return the traffic analysis settings for a network
     * Return the traffic analysis settings for a network
     * @param networkId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkTrafficAnalysis_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkTrafficAnalysis_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the traffic analysis settings for a network (asynchronously)
     * Return the traffic analysis settings for a network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkTrafficAnalysis_0Async(String networkId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkTrafficAnalysis_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkTrafficShapingApplicationCategories_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkTrafficShapingApplicationCategories_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/trafficShaping/applicationCategories"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkTrafficShapingApplicationCategories_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkTrafficShapingApplicationCategories_0(Async)");
        }

        return getNetworkTrafficShapingApplicationCategories_0Call(networkId, _callback);

    }

    /**
     * Returns the application categories for traffic shaping rules.
     * Returns the application categories for traffic shaping rules.
     * @param networkId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkTrafficShapingApplicationCategories_0(String networkId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkTrafficShapingApplicationCategories_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Returns the application categories for traffic shaping rules.
     * Returns the application categories for traffic shaping rules.
     * @param networkId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkTrafficShapingApplicationCategories_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkTrafficShapingApplicationCategories_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the application categories for traffic shaping rules. (asynchronously)
     * Returns the application categories for traffic shaping rules.
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkTrafficShapingApplicationCategories_0Async(String networkId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkTrafficShapingApplicationCategories_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkTrafficShapingDscpTaggingOptions_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkTrafficShapingDscpTaggingOptions_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/trafficShaping/dscpTaggingOptions"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkTrafficShapingDscpTaggingOptions_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkTrafficShapingDscpTaggingOptions_0(Async)");
        }

        return getNetworkTrafficShapingDscpTaggingOptions_0Call(networkId, _callback);

    }

    /**
     * Returns the available DSCP tagging options for your traffic shaping rules.
     * Returns the available DSCP tagging options for your traffic shaping rules.
     * @param networkId  (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getNetworkTrafficShapingDscpTaggingOptions_0(String networkId) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getNetworkTrafficShapingDscpTaggingOptions_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Returns the available DSCP tagging options for your traffic shaping rules.
     * Returns the available DSCP tagging options for your traffic shaping rules.
     * @param networkId  (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getNetworkTrafficShapingDscpTaggingOptions_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkTrafficShapingDscpTaggingOptions_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the available DSCP tagging options for your traffic shaping rules. (asynchronously)
     * Returns the available DSCP tagging options for your traffic shaping rules.
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkTrafficShapingDscpTaggingOptions_0Async(String networkId, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkTrafficShapingDscpTaggingOptions_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkWebhooksHttpServer_0
     * @param networkId  (required)
     * @param httpServerId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWebhooksHttpServer_0Call(String networkId, String httpServerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/webhooks/httpServers/{httpServerId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "httpServerId" + "}", localVarApiClient.escapeString(httpServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkWebhooksHttpServer_0ValidateBeforeCall(String networkId, String httpServerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkWebhooksHttpServer_0(Async)");
        }

        // verify the required parameter 'httpServerId' is set
        if (httpServerId == null) {
            throw new ApiException("Missing the required parameter 'httpServerId' when calling getNetworkWebhooksHttpServer_0(Async)");
        }

        return getNetworkWebhooksHttpServer_0Call(networkId, httpServerId, _callback);

    }

    /**
     * Return an HTTP server for a network
     * Return an HTTP server for a network
     * @param networkId  (required)
     * @param httpServerId  (required)
     * @return GetNetworkWebhooksHttpServers200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkWebhooksHttpServers200ResponseInner getNetworkWebhooksHttpServer_0(String networkId, String httpServerId) throws ApiException {
        ApiResponse<GetNetworkWebhooksHttpServers200ResponseInner> localVarResp = getNetworkWebhooksHttpServer_0WithHttpInfo(networkId, httpServerId);
        return localVarResp.getData();
    }

    /**
     * Return an HTTP server for a network
     * Return an HTTP server for a network
     * @param networkId  (required)
     * @param httpServerId  (required)
     * @return ApiResponse&lt;GetNetworkWebhooksHttpServers200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkWebhooksHttpServers200ResponseInner> getNetworkWebhooksHttpServer_0WithHttpInfo(String networkId, String httpServerId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkWebhooksHttpServer_0ValidateBeforeCall(networkId, httpServerId, null);
        Type localVarReturnType = new TypeToken<GetNetworkWebhooksHttpServers200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return an HTTP server for a network (asynchronously)
     * Return an HTTP server for a network
     * @param networkId  (required)
     * @param httpServerId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWebhooksHttpServer_0Async(String networkId, String httpServerId, final ApiCallback<GetNetworkWebhooksHttpServers200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkWebhooksHttpServer_0ValidateBeforeCall(networkId, httpServerId, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkWebhooksHttpServers200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkWebhooksHttpServers_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWebhooksHttpServers_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/webhooks/httpServers"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkWebhooksHttpServers_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkWebhooksHttpServers_0(Async)");
        }

        return getNetworkWebhooksHttpServers_0Call(networkId, _callback);

    }

    /**
     * List the HTTP servers for a network
     * List the HTTP servers for a network
     * @param networkId  (required)
     * @return List&lt;GetNetworkWebhooksHttpServers200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetNetworkWebhooksHttpServers200ResponseInner> getNetworkWebhooksHttpServers_0(String networkId) throws ApiException {
        ApiResponse<List<GetNetworkWebhooksHttpServers200ResponseInner>> localVarResp = getNetworkWebhooksHttpServers_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * List the HTTP servers for a network
     * List the HTTP servers for a network
     * @param networkId  (required)
     * @return ApiResponse&lt;List&lt;GetNetworkWebhooksHttpServers200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetworkWebhooksHttpServers200ResponseInner>> getNetworkWebhooksHttpServers_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkWebhooksHttpServers_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<List<GetNetworkWebhooksHttpServers200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the HTTP servers for a network (asynchronously)
     * List the HTTP servers for a network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWebhooksHttpServers_0Async(String networkId, final ApiCallback<List<GetNetworkWebhooksHttpServers200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkWebhooksHttpServers_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetworkWebhooksHttpServers200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkWebhooksPayloadTemplate_0
     * @param networkId  (required)
     * @param payloadTemplateId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWebhooksPayloadTemplate_0Call(String networkId, String payloadTemplateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/webhooks/payloadTemplates/{payloadTemplateId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "payloadTemplateId" + "}", localVarApiClient.escapeString(payloadTemplateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkWebhooksPayloadTemplate_0ValidateBeforeCall(String networkId, String payloadTemplateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkWebhooksPayloadTemplate_0(Async)");
        }

        // verify the required parameter 'payloadTemplateId' is set
        if (payloadTemplateId == null) {
            throw new ApiException("Missing the required parameter 'payloadTemplateId' when calling getNetworkWebhooksPayloadTemplate_0(Async)");
        }

        return getNetworkWebhooksPayloadTemplate_0Call(networkId, payloadTemplateId, _callback);

    }

    /**
     * Get the webhook payload template for a network
     * Get the webhook payload template for a network
     * @param networkId  (required)
     * @param payloadTemplateId  (required)
     * @return GetNetworkWebhooksPayloadTemplates200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkWebhooksPayloadTemplates200ResponseInner getNetworkWebhooksPayloadTemplate_0(String networkId, String payloadTemplateId) throws ApiException {
        ApiResponse<GetNetworkWebhooksPayloadTemplates200ResponseInner> localVarResp = getNetworkWebhooksPayloadTemplate_0WithHttpInfo(networkId, payloadTemplateId);
        return localVarResp.getData();
    }

    /**
     * Get the webhook payload template for a network
     * Get the webhook payload template for a network
     * @param networkId  (required)
     * @param payloadTemplateId  (required)
     * @return ApiResponse&lt;GetNetworkWebhooksPayloadTemplates200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkWebhooksPayloadTemplates200ResponseInner> getNetworkWebhooksPayloadTemplate_0WithHttpInfo(String networkId, String payloadTemplateId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkWebhooksPayloadTemplate_0ValidateBeforeCall(networkId, payloadTemplateId, null);
        Type localVarReturnType = new TypeToken<GetNetworkWebhooksPayloadTemplates200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the webhook payload template for a network (asynchronously)
     * Get the webhook payload template for a network
     * @param networkId  (required)
     * @param payloadTemplateId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWebhooksPayloadTemplate_0Async(String networkId, String payloadTemplateId, final ApiCallback<GetNetworkWebhooksPayloadTemplates200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkWebhooksPayloadTemplate_0ValidateBeforeCall(networkId, payloadTemplateId, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkWebhooksPayloadTemplates200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkWebhooksPayloadTemplates_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWebhooksPayloadTemplates_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/webhooks/payloadTemplates"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkWebhooksPayloadTemplates_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkWebhooksPayloadTemplates_0(Async)");
        }

        return getNetworkWebhooksPayloadTemplates_0Call(networkId, _callback);

    }

    /**
     * List the webhook payload templates for a network
     * List the webhook payload templates for a network
     * @param networkId  (required)
     * @return List&lt;GetNetworkWebhooksPayloadTemplates200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetNetworkWebhooksPayloadTemplates200ResponseInner> getNetworkWebhooksPayloadTemplates_0(String networkId) throws ApiException {
        ApiResponse<List<GetNetworkWebhooksPayloadTemplates200ResponseInner>> localVarResp = getNetworkWebhooksPayloadTemplates_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * List the webhook payload templates for a network
     * List the webhook payload templates for a network
     * @param networkId  (required)
     * @return ApiResponse&lt;List&lt;GetNetworkWebhooksPayloadTemplates200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetworkWebhooksPayloadTemplates200ResponseInner>> getNetworkWebhooksPayloadTemplates_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkWebhooksPayloadTemplates_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<List<GetNetworkWebhooksPayloadTemplates200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the webhook payload templates for a network (asynchronously)
     * List the webhook payload templates for a network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWebhooksPayloadTemplates_0Async(String networkId, final ApiCallback<List<GetNetworkWebhooksPayloadTemplates200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkWebhooksPayloadTemplates_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetworkWebhooksPayloadTemplates200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkWebhooksWebhookTest_0
     * @param networkId  (required)
     * @param webhookTestId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWebhooksWebhookTest_0Call(String networkId, String webhookTestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/webhooks/webhookTests/{webhookTestId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "webhookTestId" + "}", localVarApiClient.escapeString(webhookTestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkWebhooksWebhookTest_0ValidateBeforeCall(String networkId, String webhookTestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkWebhooksWebhookTest_0(Async)");
        }

        // verify the required parameter 'webhookTestId' is set
        if (webhookTestId == null) {
            throw new ApiException("Missing the required parameter 'webhookTestId' when calling getNetworkWebhooksWebhookTest_0(Async)");
        }

        return getNetworkWebhooksWebhookTest_0Call(networkId, webhookTestId, _callback);

    }

    /**
     * Return the status of a webhook test for a network
     * Return the status of a webhook test for a network
     * @param networkId  (required)
     * @param webhookTestId  (required)
     * @return CreateNetworkWebhooksWebhookTest201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CreateNetworkWebhooksWebhookTest201Response getNetworkWebhooksWebhookTest_0(String networkId, String webhookTestId) throws ApiException {
        ApiResponse<CreateNetworkWebhooksWebhookTest201Response> localVarResp = getNetworkWebhooksWebhookTest_0WithHttpInfo(networkId, webhookTestId);
        return localVarResp.getData();
    }

    /**
     * Return the status of a webhook test for a network
     * Return the status of a webhook test for a network
     * @param networkId  (required)
     * @param webhookTestId  (required)
     * @return ApiResponse&lt;CreateNetworkWebhooksWebhookTest201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateNetworkWebhooksWebhookTest201Response> getNetworkWebhooksWebhookTest_0WithHttpInfo(String networkId, String webhookTestId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkWebhooksWebhookTest_0ValidateBeforeCall(networkId, webhookTestId, null);
        Type localVarReturnType = new TypeToken<CreateNetworkWebhooksWebhookTest201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the status of a webhook test for a network (asynchronously)
     * Return the status of a webhook test for a network
     * @param networkId  (required)
     * @param webhookTestId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWebhooksWebhookTest_0Async(String networkId, String webhookTestId, final ApiCallback<CreateNetworkWebhooksWebhookTest201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkWebhooksWebhookTest_0ValidateBeforeCall(networkId, webhookTestId, _callback);
        Type localVarReturnType = new TypeToken<CreateNetworkWebhooksWebhookTest201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkWirelessAlternateManagementInterface_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWirelessAlternateManagementInterface_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/wireless/alternateManagementInterface"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkWirelessAlternateManagementInterface_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkWirelessAlternateManagementInterface_0(Async)");
        }

        return getNetworkWirelessAlternateManagementInterface_0Call(networkId, _callback);

    }

    /**
     * Return alternate management interface and devices with IP assigned
     * Return alternate management interface and devices with IP assigned
     * @param networkId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkWirelessAlternateManagementInterface_0(String networkId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkWirelessAlternateManagementInterface_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Return alternate management interface and devices with IP assigned
     * Return alternate management interface and devices with IP assigned
     * @param networkId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkWirelessAlternateManagementInterface_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkWirelessAlternateManagementInterface_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return alternate management interface and devices with IP assigned (asynchronously)
     * Return alternate management interface and devices with IP assigned
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWirelessAlternateManagementInterface_0Async(String networkId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkWirelessAlternateManagementInterface_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkWirelessBilling_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWirelessBilling_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/wireless/billing"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkWirelessBilling_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkWirelessBilling_0(Async)");
        }

        return getNetworkWirelessBilling_0Call(networkId, _callback);

    }

    /**
     * Return the billing settings of this network
     * Return the billing settings of this network
     * @param networkId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkWirelessBilling_0(String networkId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkWirelessBilling_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Return the billing settings of this network
     * Return the billing settings of this network
     * @param networkId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkWirelessBilling_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkWirelessBilling_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the billing settings of this network (asynchronously)
     * Return the billing settings of this network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWirelessBilling_0Async(String networkId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkWirelessBilling_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkWirelessBluetoothSettings_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWirelessBluetoothSettings_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/wireless/bluetooth/settings"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkWirelessBluetoothSettings_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkWirelessBluetoothSettings_0(Async)");
        }

        return getNetworkWirelessBluetoothSettings_0Call(networkId, _callback);

    }

    /**
     * Return the Bluetooth settings for a network. &lt;a href&#x3D;\&quot;https://documentation.meraki.com/MR/Bluetooth/Bluetooth_Low_Energy_(BLE)\&quot;&gt;Bluetooth settings&lt;/a&gt; must be enabled on the network.
     * Return the Bluetooth settings for a network. &lt;a href&#x3D;\&quot;https://documentation.meraki.com/MR/Bluetooth/Bluetooth_Low_Energy_(BLE)\&quot;&gt;Bluetooth settings&lt;/a&gt; must be enabled on the network.
     * @param networkId  (required)
     * @return GetNetworkWirelessBluetoothSettings200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkWirelessBluetoothSettings200Response getNetworkWirelessBluetoothSettings_0(String networkId) throws ApiException {
        ApiResponse<GetNetworkWirelessBluetoothSettings200Response> localVarResp = getNetworkWirelessBluetoothSettings_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Return the Bluetooth settings for a network. &lt;a href&#x3D;\&quot;https://documentation.meraki.com/MR/Bluetooth/Bluetooth_Low_Energy_(BLE)\&quot;&gt;Bluetooth settings&lt;/a&gt; must be enabled on the network.
     * Return the Bluetooth settings for a network. &lt;a href&#x3D;\&quot;https://documentation.meraki.com/MR/Bluetooth/Bluetooth_Low_Energy_(BLE)\&quot;&gt;Bluetooth settings&lt;/a&gt; must be enabled on the network.
     * @param networkId  (required)
     * @return ApiResponse&lt;GetNetworkWirelessBluetoothSettings200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkWirelessBluetoothSettings200Response> getNetworkWirelessBluetoothSettings_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkWirelessBluetoothSettings_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<GetNetworkWirelessBluetoothSettings200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the Bluetooth settings for a network. &lt;a href&#x3D;\&quot;https://documentation.meraki.com/MR/Bluetooth/Bluetooth_Low_Energy_(BLE)\&quot;&gt;Bluetooth settings&lt;/a&gt; must be enabled on the network. (asynchronously)
     * Return the Bluetooth settings for a network. &lt;a href&#x3D;\&quot;https://documentation.meraki.com/MR/Bluetooth/Bluetooth_Low_Energy_(BLE)\&quot;&gt;Bluetooth settings&lt;/a&gt; must be enabled on the network.
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWirelessBluetoothSettings_0Async(String networkId, final ApiCallback<GetNetworkWirelessBluetoothSettings200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkWirelessBluetoothSettings_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkWirelessBluetoothSettings200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkWirelessRfProfile_0
     * @param networkId  (required)
     * @param rfProfileId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWirelessRfProfile_0Call(String networkId, String rfProfileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/wireless/rfProfiles/{rfProfileId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "rfProfileId" + "}", localVarApiClient.escapeString(rfProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkWirelessRfProfile_0ValidateBeforeCall(String networkId, String rfProfileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkWirelessRfProfile_0(Async)");
        }

        // verify the required parameter 'rfProfileId' is set
        if (rfProfileId == null) {
            throw new ApiException("Missing the required parameter 'rfProfileId' when calling getNetworkWirelessRfProfile_0(Async)");
        }

        return getNetworkWirelessRfProfile_0Call(networkId, rfProfileId, _callback);

    }

    /**
     * Return a RF profile
     * Return a RF profile
     * @param networkId  (required)
     * @param rfProfileId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkWirelessRfProfile_0(String networkId, String rfProfileId) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkWirelessRfProfile_0WithHttpInfo(networkId, rfProfileId);
        return localVarResp.getData();
    }

    /**
     * Return a RF profile
     * Return a RF profile
     * @param networkId  (required)
     * @param rfProfileId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkWirelessRfProfile_0WithHttpInfo(String networkId, String rfProfileId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkWirelessRfProfile_0ValidateBeforeCall(networkId, rfProfileId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a RF profile (asynchronously)
     * Return a RF profile
     * @param networkId  (required)
     * @param rfProfileId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWirelessRfProfile_0Async(String networkId, String rfProfileId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkWirelessRfProfile_0ValidateBeforeCall(networkId, rfProfileId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkWirelessRfProfiles_0
     * @param networkId  (required)
     * @param includeTemplateProfiles If the network is bound to a template, this parameter controls whether or not the non-basic RF profiles defined on the template should be included in the response alongside the non-basic profiles defined on the bound network. Defaults to false. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWirelessRfProfiles_0Call(String networkId, Boolean includeTemplateProfiles, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/wireless/rfProfiles"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeTemplateProfiles != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeTemplateProfiles", includeTemplateProfiles));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkWirelessRfProfiles_0ValidateBeforeCall(String networkId, Boolean includeTemplateProfiles, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkWirelessRfProfiles_0(Async)");
        }

        return getNetworkWirelessRfProfiles_0Call(networkId, includeTemplateProfiles, _callback);

    }

    /**
     * List the non-basic RF profiles for this network
     * List the non-basic RF profiles for this network
     * @param networkId  (required)
     * @param includeTemplateProfiles If the network is bound to a template, this parameter controls whether or not the non-basic RF profiles defined on the template should be included in the response alongside the non-basic profiles defined on the bound network. Defaults to false. (optional)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getNetworkWirelessRfProfiles_0(String networkId, Boolean includeTemplateProfiles) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getNetworkWirelessRfProfiles_0WithHttpInfo(networkId, includeTemplateProfiles);
        return localVarResp.getData();
    }

    /**
     * List the non-basic RF profiles for this network
     * List the non-basic RF profiles for this network
     * @param networkId  (required)
     * @param includeTemplateProfiles If the network is bound to a template, this parameter controls whether or not the non-basic RF profiles defined on the template should be included in the response alongside the non-basic profiles defined on the bound network. Defaults to false. (optional)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getNetworkWirelessRfProfiles_0WithHttpInfo(String networkId, Boolean includeTemplateProfiles) throws ApiException {
        okhttp3.Call localVarCall = getNetworkWirelessRfProfiles_0ValidateBeforeCall(networkId, includeTemplateProfiles, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the non-basic RF profiles for this network (asynchronously)
     * List the non-basic RF profiles for this network
     * @param networkId  (required)
     * @param includeTemplateProfiles If the network is bound to a template, this parameter controls whether or not the non-basic RF profiles defined on the template should be included in the response alongside the non-basic profiles defined on the bound network. Defaults to false. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWirelessRfProfiles_0Async(String networkId, Boolean includeTemplateProfiles, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkWirelessRfProfiles_0ValidateBeforeCall(networkId, includeTemplateProfiles, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkWirelessSettings_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWirelessSettings_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/wireless/settings"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkWirelessSettings_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkWirelessSettings_0(Async)");
        }

        return getNetworkWirelessSettings_0Call(networkId, _callback);

    }

    /**
     * Return the wireless settings for a network
     * Return the wireless settings for a network
     * @param networkId  (required)
     * @return GetNetworkWirelessSettings200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkWirelessSettings200Response getNetworkWirelessSettings_0(String networkId) throws ApiException {
        ApiResponse<GetNetworkWirelessSettings200Response> localVarResp = getNetworkWirelessSettings_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Return the wireless settings for a network
     * Return the wireless settings for a network
     * @param networkId  (required)
     * @return ApiResponse&lt;GetNetworkWirelessSettings200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkWirelessSettings200Response> getNetworkWirelessSettings_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkWirelessSettings_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<GetNetworkWirelessSettings200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the wireless settings for a network (asynchronously)
     * Return the wireless settings for a network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWirelessSettings_0Async(String networkId, final ApiCallback<GetNetworkWirelessSettings200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkWirelessSettings_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkWirelessSettings200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkWirelessSsidBonjourForwarding_0
     * @param networkId  (required)
     * @param number  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWirelessSsidBonjourForwarding_0Call(String networkId, String number, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/wireless/ssids/{number}/bonjourForwarding"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "number" + "}", localVarApiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkWirelessSsidBonjourForwarding_0ValidateBeforeCall(String networkId, String number, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkWirelessSsidBonjourForwarding_0(Async)");
        }

        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling getNetworkWirelessSsidBonjourForwarding_0(Async)");
        }

        return getNetworkWirelessSsidBonjourForwarding_0Call(networkId, number, _callback);

    }

    /**
     * List the Bonjour forwarding setting and rules for the SSID
     * List the Bonjour forwarding setting and rules for the SSID
     * @param networkId  (required)
     * @param number  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkWirelessSsidBonjourForwarding_0(String networkId, String number) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkWirelessSsidBonjourForwarding_0WithHttpInfo(networkId, number);
        return localVarResp.getData();
    }

    /**
     * List the Bonjour forwarding setting and rules for the SSID
     * List the Bonjour forwarding setting and rules for the SSID
     * @param networkId  (required)
     * @param number  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkWirelessSsidBonjourForwarding_0WithHttpInfo(String networkId, String number) throws ApiException {
        okhttp3.Call localVarCall = getNetworkWirelessSsidBonjourForwarding_0ValidateBeforeCall(networkId, number, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the Bonjour forwarding setting and rules for the SSID (asynchronously)
     * List the Bonjour forwarding setting and rules for the SSID
     * @param networkId  (required)
     * @param number  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWirelessSsidBonjourForwarding_0Async(String networkId, String number, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkWirelessSsidBonjourForwarding_0ValidateBeforeCall(networkId, number, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkWirelessSsidDeviceTypeGroupPolicies_0
     * @param networkId  (required)
     * @param number  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWirelessSsidDeviceTypeGroupPolicies_0Call(String networkId, String number, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/wireless/ssids/{number}/deviceTypeGroupPolicies"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "number" + "}", localVarApiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkWirelessSsidDeviceTypeGroupPolicies_0ValidateBeforeCall(String networkId, String number, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkWirelessSsidDeviceTypeGroupPolicies_0(Async)");
        }

        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling getNetworkWirelessSsidDeviceTypeGroupPolicies_0(Async)");
        }

        return getNetworkWirelessSsidDeviceTypeGroupPolicies_0Call(networkId, number, _callback);

    }

    /**
     * List the device type group policies for the SSID
     * List the device type group policies for the SSID
     * @param networkId  (required)
     * @param number  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkWirelessSsidDeviceTypeGroupPolicies_0(String networkId, String number) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkWirelessSsidDeviceTypeGroupPolicies_0WithHttpInfo(networkId, number);
        return localVarResp.getData();
    }

    /**
     * List the device type group policies for the SSID
     * List the device type group policies for the SSID
     * @param networkId  (required)
     * @param number  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkWirelessSsidDeviceTypeGroupPolicies_0WithHttpInfo(String networkId, String number) throws ApiException {
        okhttp3.Call localVarCall = getNetworkWirelessSsidDeviceTypeGroupPolicies_0ValidateBeforeCall(networkId, number, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the device type group policies for the SSID (asynchronously)
     * List the device type group policies for the SSID
     * @param networkId  (required)
     * @param number  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWirelessSsidDeviceTypeGroupPolicies_0Async(String networkId, String number, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkWirelessSsidDeviceTypeGroupPolicies_0ValidateBeforeCall(networkId, number, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkWirelessSsidEapOverride_0
     * @param networkId  (required)
     * @param number  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWirelessSsidEapOverride_0Call(String networkId, String number, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/wireless/ssids/{number}/eapOverride"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "number" + "}", localVarApiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkWirelessSsidEapOverride_0ValidateBeforeCall(String networkId, String number, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkWirelessSsidEapOverride_0(Async)");
        }

        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling getNetworkWirelessSsidEapOverride_0(Async)");
        }

        return getNetworkWirelessSsidEapOverride_0Call(networkId, number, _callback);

    }

    /**
     * Return the EAP overridden parameters for an SSID
     * Return the EAP overridden parameters for an SSID
     * @param networkId  (required)
     * @param number  (required)
     * @return GetNetworkWirelessSsidEapOverride200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkWirelessSsidEapOverride200Response getNetworkWirelessSsidEapOverride_0(String networkId, String number) throws ApiException {
        ApiResponse<GetNetworkWirelessSsidEapOverride200Response> localVarResp = getNetworkWirelessSsidEapOverride_0WithHttpInfo(networkId, number);
        return localVarResp.getData();
    }

    /**
     * Return the EAP overridden parameters for an SSID
     * Return the EAP overridden parameters for an SSID
     * @param networkId  (required)
     * @param number  (required)
     * @return ApiResponse&lt;GetNetworkWirelessSsidEapOverride200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkWirelessSsidEapOverride200Response> getNetworkWirelessSsidEapOverride_0WithHttpInfo(String networkId, String number) throws ApiException {
        okhttp3.Call localVarCall = getNetworkWirelessSsidEapOverride_0ValidateBeforeCall(networkId, number, null);
        Type localVarReturnType = new TypeToken<GetNetworkWirelessSsidEapOverride200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the EAP overridden parameters for an SSID (asynchronously)
     * Return the EAP overridden parameters for an SSID
     * @param networkId  (required)
     * @param number  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWirelessSsidEapOverride_0Async(String networkId, String number, final ApiCallback<GetNetworkWirelessSsidEapOverride200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkWirelessSsidEapOverride_0ValidateBeforeCall(networkId, number, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkWirelessSsidEapOverride200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkWirelessSsidFirewallL3FirewallRules_0
     * @param networkId  (required)
     * @param number  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWirelessSsidFirewallL3FirewallRules_0Call(String networkId, String number, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/wireless/ssids/{number}/firewall/l3FirewallRules"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "number" + "}", localVarApiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkWirelessSsidFirewallL3FirewallRules_0ValidateBeforeCall(String networkId, String number, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkWirelessSsidFirewallL3FirewallRules_0(Async)");
        }

        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling getNetworkWirelessSsidFirewallL3FirewallRules_0(Async)");
        }

        return getNetworkWirelessSsidFirewallL3FirewallRules_0Call(networkId, number, _callback);

    }

    /**
     * Return the L3 firewall rules for an SSID on an MR network
     * Return the L3 firewall rules for an SSID on an MR network
     * @param networkId  (required)
     * @param number  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkWirelessSsidFirewallL3FirewallRules_0(String networkId, String number) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkWirelessSsidFirewallL3FirewallRules_0WithHttpInfo(networkId, number);
        return localVarResp.getData();
    }

    /**
     * Return the L3 firewall rules for an SSID on an MR network
     * Return the L3 firewall rules for an SSID on an MR network
     * @param networkId  (required)
     * @param number  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkWirelessSsidFirewallL3FirewallRules_0WithHttpInfo(String networkId, String number) throws ApiException {
        okhttp3.Call localVarCall = getNetworkWirelessSsidFirewallL3FirewallRules_0ValidateBeforeCall(networkId, number, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the L3 firewall rules for an SSID on an MR network (asynchronously)
     * Return the L3 firewall rules for an SSID on an MR network
     * @param networkId  (required)
     * @param number  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWirelessSsidFirewallL3FirewallRules_0Async(String networkId, String number, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkWirelessSsidFirewallL3FirewallRules_0ValidateBeforeCall(networkId, number, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkWirelessSsidFirewallL7FirewallRules_0
     * @param networkId  (required)
     * @param number  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWirelessSsidFirewallL7FirewallRules_0Call(String networkId, String number, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/wireless/ssids/{number}/firewall/l7FirewallRules"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "number" + "}", localVarApiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkWirelessSsidFirewallL7FirewallRules_0ValidateBeforeCall(String networkId, String number, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkWirelessSsidFirewallL7FirewallRules_0(Async)");
        }

        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling getNetworkWirelessSsidFirewallL7FirewallRules_0(Async)");
        }

        return getNetworkWirelessSsidFirewallL7FirewallRules_0Call(networkId, number, _callback);

    }

    /**
     * Return the L7 firewall rules for an SSID on an MR network
     * Return the L7 firewall rules for an SSID on an MR network
     * @param networkId  (required)
     * @param number  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkWirelessSsidFirewallL7FirewallRules_0(String networkId, String number) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkWirelessSsidFirewallL7FirewallRules_0WithHttpInfo(networkId, number);
        return localVarResp.getData();
    }

    /**
     * Return the L7 firewall rules for an SSID on an MR network
     * Return the L7 firewall rules for an SSID on an MR network
     * @param networkId  (required)
     * @param number  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkWirelessSsidFirewallL7FirewallRules_0WithHttpInfo(String networkId, String number) throws ApiException {
        okhttp3.Call localVarCall = getNetworkWirelessSsidFirewallL7FirewallRules_0ValidateBeforeCall(networkId, number, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the L7 firewall rules for an SSID on an MR network (asynchronously)
     * Return the L7 firewall rules for an SSID on an MR network
     * @param networkId  (required)
     * @param number  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWirelessSsidFirewallL7FirewallRules_0Async(String networkId, String number, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkWirelessSsidFirewallL7FirewallRules_0ValidateBeforeCall(networkId, number, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkWirelessSsidHotspot20_0
     * @param networkId  (required)
     * @param number  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWirelessSsidHotspot20_0Call(String networkId, String number, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/wireless/ssids/{number}/hotspot20"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "number" + "}", localVarApiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkWirelessSsidHotspot20_0ValidateBeforeCall(String networkId, String number, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkWirelessSsidHotspot20_0(Async)");
        }

        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling getNetworkWirelessSsidHotspot20_0(Async)");
        }

        return getNetworkWirelessSsidHotspot20_0Call(networkId, number, _callback);

    }

    /**
     * Return the Hotspot 2.0 settings for an SSID
     * Return the Hotspot 2.0 settings for an SSID
     * @param networkId  (required)
     * @param number  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkWirelessSsidHotspot20_0(String networkId, String number) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkWirelessSsidHotspot20_0WithHttpInfo(networkId, number);
        return localVarResp.getData();
    }

    /**
     * Return the Hotspot 2.0 settings for an SSID
     * Return the Hotspot 2.0 settings for an SSID
     * @param networkId  (required)
     * @param number  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkWirelessSsidHotspot20_0WithHttpInfo(String networkId, String number) throws ApiException {
        okhttp3.Call localVarCall = getNetworkWirelessSsidHotspot20_0ValidateBeforeCall(networkId, number, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the Hotspot 2.0 settings for an SSID (asynchronously)
     * Return the Hotspot 2.0 settings for an SSID
     * @param networkId  (required)
     * @param number  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWirelessSsidHotspot20_0Async(String networkId, String number, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkWirelessSsidHotspot20_0ValidateBeforeCall(networkId, number, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkWirelessSsidIdentityPsk_0
     * @param networkId  (required)
     * @param number  (required)
     * @param identityPskId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWirelessSsidIdentityPsk_0Call(String networkId, String number, String identityPskId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/wireless/ssids/{number}/identityPsks/{identityPskId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "number" + "}", localVarApiClient.escapeString(number.toString()))
            .replace("{" + "identityPskId" + "}", localVarApiClient.escapeString(identityPskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkWirelessSsidIdentityPsk_0ValidateBeforeCall(String networkId, String number, String identityPskId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkWirelessSsidIdentityPsk_0(Async)");
        }

        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling getNetworkWirelessSsidIdentityPsk_0(Async)");
        }

        // verify the required parameter 'identityPskId' is set
        if (identityPskId == null) {
            throw new ApiException("Missing the required parameter 'identityPskId' when calling getNetworkWirelessSsidIdentityPsk_0(Async)");
        }

        return getNetworkWirelessSsidIdentityPsk_0Call(networkId, number, identityPskId, _callback);

    }

    /**
     * Return an Identity PSK
     * Return an Identity PSK
     * @param networkId  (required)
     * @param number  (required)
     * @param identityPskId  (required)
     * @return GetNetworkWirelessSsidIdentityPsks200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkWirelessSsidIdentityPsks200ResponseInner getNetworkWirelessSsidIdentityPsk_0(String networkId, String number, String identityPskId) throws ApiException {
        ApiResponse<GetNetworkWirelessSsidIdentityPsks200ResponseInner> localVarResp = getNetworkWirelessSsidIdentityPsk_0WithHttpInfo(networkId, number, identityPskId);
        return localVarResp.getData();
    }

    /**
     * Return an Identity PSK
     * Return an Identity PSK
     * @param networkId  (required)
     * @param number  (required)
     * @param identityPskId  (required)
     * @return ApiResponse&lt;GetNetworkWirelessSsidIdentityPsks200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkWirelessSsidIdentityPsks200ResponseInner> getNetworkWirelessSsidIdentityPsk_0WithHttpInfo(String networkId, String number, String identityPskId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkWirelessSsidIdentityPsk_0ValidateBeforeCall(networkId, number, identityPskId, null);
        Type localVarReturnType = new TypeToken<GetNetworkWirelessSsidIdentityPsks200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return an Identity PSK (asynchronously)
     * Return an Identity PSK
     * @param networkId  (required)
     * @param number  (required)
     * @param identityPskId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWirelessSsidIdentityPsk_0Async(String networkId, String number, String identityPskId, final ApiCallback<GetNetworkWirelessSsidIdentityPsks200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkWirelessSsidIdentityPsk_0ValidateBeforeCall(networkId, number, identityPskId, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkWirelessSsidIdentityPsks200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkWirelessSsidIdentityPsks_0
     * @param networkId  (required)
     * @param number  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWirelessSsidIdentityPsks_0Call(String networkId, String number, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/wireless/ssids/{number}/identityPsks"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "number" + "}", localVarApiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkWirelessSsidIdentityPsks_0ValidateBeforeCall(String networkId, String number, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkWirelessSsidIdentityPsks_0(Async)");
        }

        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling getNetworkWirelessSsidIdentityPsks_0(Async)");
        }

        return getNetworkWirelessSsidIdentityPsks_0Call(networkId, number, _callback);

    }

    /**
     * List all Identity PSKs in a wireless network
     * List all Identity PSKs in a wireless network
     * @param networkId  (required)
     * @param number  (required)
     * @return List&lt;GetNetworkWirelessSsidIdentityPsks200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetNetworkWirelessSsidIdentityPsks200ResponseInner> getNetworkWirelessSsidIdentityPsks_0(String networkId, String number) throws ApiException {
        ApiResponse<List<GetNetworkWirelessSsidIdentityPsks200ResponseInner>> localVarResp = getNetworkWirelessSsidIdentityPsks_0WithHttpInfo(networkId, number);
        return localVarResp.getData();
    }

    /**
     * List all Identity PSKs in a wireless network
     * List all Identity PSKs in a wireless network
     * @param networkId  (required)
     * @param number  (required)
     * @return ApiResponse&lt;List&lt;GetNetworkWirelessSsidIdentityPsks200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetworkWirelessSsidIdentityPsks200ResponseInner>> getNetworkWirelessSsidIdentityPsks_0WithHttpInfo(String networkId, String number) throws ApiException {
        okhttp3.Call localVarCall = getNetworkWirelessSsidIdentityPsks_0ValidateBeforeCall(networkId, number, null);
        Type localVarReturnType = new TypeToken<List<GetNetworkWirelessSsidIdentityPsks200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all Identity PSKs in a wireless network (asynchronously)
     * List all Identity PSKs in a wireless network
     * @param networkId  (required)
     * @param number  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWirelessSsidIdentityPsks_0Async(String networkId, String number, final ApiCallback<List<GetNetworkWirelessSsidIdentityPsks200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkWirelessSsidIdentityPsks_0ValidateBeforeCall(networkId, number, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetworkWirelessSsidIdentityPsks200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkWirelessSsidSchedules_0
     * @param networkId  (required)
     * @param number  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWirelessSsidSchedules_0Call(String networkId, String number, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/wireless/ssids/{number}/schedules"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "number" + "}", localVarApiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkWirelessSsidSchedules_0ValidateBeforeCall(String networkId, String number, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkWirelessSsidSchedules_0(Async)");
        }

        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling getNetworkWirelessSsidSchedules_0(Async)");
        }

        return getNetworkWirelessSsidSchedules_0Call(networkId, number, _callback);

    }

    /**
     * List the outage schedule for the SSID
     * List the outage schedule for the SSID
     * @param networkId  (required)
     * @param number  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkWirelessSsidSchedules_0(String networkId, String number) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkWirelessSsidSchedules_0WithHttpInfo(networkId, number);
        return localVarResp.getData();
    }

    /**
     * List the outage schedule for the SSID
     * List the outage schedule for the SSID
     * @param networkId  (required)
     * @param number  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkWirelessSsidSchedules_0WithHttpInfo(String networkId, String number) throws ApiException {
        okhttp3.Call localVarCall = getNetworkWirelessSsidSchedules_0ValidateBeforeCall(networkId, number, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the outage schedule for the SSID (asynchronously)
     * List the outage schedule for the SSID
     * @param networkId  (required)
     * @param number  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWirelessSsidSchedules_0Async(String networkId, String number, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkWirelessSsidSchedules_0ValidateBeforeCall(networkId, number, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkWirelessSsidSplashSettings_0
     * @param networkId  (required)
     * @param number  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWirelessSsidSplashSettings_0Call(String networkId, String number, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/wireless/ssids/{number}/splash/settings"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "number" + "}", localVarApiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkWirelessSsidSplashSettings_0ValidateBeforeCall(String networkId, String number, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkWirelessSsidSplashSettings_0(Async)");
        }

        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling getNetworkWirelessSsidSplashSettings_0(Async)");
        }

        return getNetworkWirelessSsidSplashSettings_0Call(networkId, number, _callback);

    }

    /**
     * Display the splash page settings for the given SSID
     * Display the splash page settings for the given SSID
     * @param networkId  (required)
     * @param number  (required)
     * @return GetNetworkWirelessSsidSplashSettings200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkWirelessSsidSplashSettings200Response getNetworkWirelessSsidSplashSettings_0(String networkId, String number) throws ApiException {
        ApiResponse<GetNetworkWirelessSsidSplashSettings200Response> localVarResp = getNetworkWirelessSsidSplashSettings_0WithHttpInfo(networkId, number);
        return localVarResp.getData();
    }

    /**
     * Display the splash page settings for the given SSID
     * Display the splash page settings for the given SSID
     * @param networkId  (required)
     * @param number  (required)
     * @return ApiResponse&lt;GetNetworkWirelessSsidSplashSettings200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkWirelessSsidSplashSettings200Response> getNetworkWirelessSsidSplashSettings_0WithHttpInfo(String networkId, String number) throws ApiException {
        okhttp3.Call localVarCall = getNetworkWirelessSsidSplashSettings_0ValidateBeforeCall(networkId, number, null);
        Type localVarReturnType = new TypeToken<GetNetworkWirelessSsidSplashSettings200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Display the splash page settings for the given SSID (asynchronously)
     * Display the splash page settings for the given SSID
     * @param networkId  (required)
     * @param number  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWirelessSsidSplashSettings_0Async(String networkId, String number, final ApiCallback<GetNetworkWirelessSsidSplashSettings200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkWirelessSsidSplashSettings_0ValidateBeforeCall(networkId, number, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkWirelessSsidSplashSettings200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkWirelessSsidTrafficShapingRules_0
     * @param networkId  (required)
     * @param number  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWirelessSsidTrafficShapingRules_0Call(String networkId, String number, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/wireless/ssids/{number}/trafficShaping/rules"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "number" + "}", localVarApiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkWirelessSsidTrafficShapingRules_0ValidateBeforeCall(String networkId, String number, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkWirelessSsidTrafficShapingRules_0(Async)");
        }

        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling getNetworkWirelessSsidTrafficShapingRules_0(Async)");
        }

        return getNetworkWirelessSsidTrafficShapingRules_0Call(networkId, number, _callback);

    }

    /**
     * Display the traffic shaping settings for a SSID on an MR network
     * Display the traffic shaping settings for a SSID on an MR network
     * @param networkId  (required)
     * @param number  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkWirelessSsidTrafficShapingRules_0(String networkId, String number) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkWirelessSsidTrafficShapingRules_0WithHttpInfo(networkId, number);
        return localVarResp.getData();
    }

    /**
     * Display the traffic shaping settings for a SSID on an MR network
     * Display the traffic shaping settings for a SSID on an MR network
     * @param networkId  (required)
     * @param number  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkWirelessSsidTrafficShapingRules_0WithHttpInfo(String networkId, String number) throws ApiException {
        okhttp3.Call localVarCall = getNetworkWirelessSsidTrafficShapingRules_0ValidateBeforeCall(networkId, number, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Display the traffic shaping settings for a SSID on an MR network (asynchronously)
     * Display the traffic shaping settings for a SSID on an MR network
     * @param networkId  (required)
     * @param number  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWirelessSsidTrafficShapingRules_0Async(String networkId, String number, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkWirelessSsidTrafficShapingRules_0ValidateBeforeCall(networkId, number, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkWirelessSsidVpn_0
     * @param networkId  (required)
     * @param number  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWirelessSsidVpn_0Call(String networkId, String number, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/wireless/ssids/{number}/vpn"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "number" + "}", localVarApiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkWirelessSsidVpn_0ValidateBeforeCall(String networkId, String number, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkWirelessSsidVpn_0(Async)");
        }

        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling getNetworkWirelessSsidVpn_0(Async)");
        }

        return getNetworkWirelessSsidVpn_0Call(networkId, number, _callback);

    }

    /**
     * List the VPN settings for the SSID.
     * List the VPN settings for the SSID.
     * @param networkId  (required)
     * @param number  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkWirelessSsidVpn_0(String networkId, String number) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkWirelessSsidVpn_0WithHttpInfo(networkId, number);
        return localVarResp.getData();
    }

    /**
     * List the VPN settings for the SSID.
     * List the VPN settings for the SSID.
     * @param networkId  (required)
     * @param number  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkWirelessSsidVpn_0WithHttpInfo(String networkId, String number) throws ApiException {
        okhttp3.Call localVarCall = getNetworkWirelessSsidVpn_0ValidateBeforeCall(networkId, number, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the VPN settings for the SSID. (asynchronously)
     * List the VPN settings for the SSID.
     * @param networkId  (required)
     * @param number  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWirelessSsidVpn_0Async(String networkId, String number, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkWirelessSsidVpn_0ValidateBeforeCall(networkId, number, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkWirelessSsid_0
     * @param networkId  (required)
     * @param number  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWirelessSsid_0Call(String networkId, String number, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/wireless/ssids/{number}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "number" + "}", localVarApiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkWirelessSsid_0ValidateBeforeCall(String networkId, String number, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkWirelessSsid_0(Async)");
        }

        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling getNetworkWirelessSsid_0(Async)");
        }

        return getNetworkWirelessSsid_0Call(networkId, number, _callback);

    }

    /**
     * Return a single MR SSID
     * Return a single MR SSID
     * @param networkId  (required)
     * @param number  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkWirelessSsid_0(String networkId, String number) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkWirelessSsid_0WithHttpInfo(networkId, number);
        return localVarResp.getData();
    }

    /**
     * Return a single MR SSID
     * Return a single MR SSID
     * @param networkId  (required)
     * @param number  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkWirelessSsid_0WithHttpInfo(String networkId, String number) throws ApiException {
        okhttp3.Call localVarCall = getNetworkWirelessSsid_0ValidateBeforeCall(networkId, number, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a single MR SSID (asynchronously)
     * Return a single MR SSID
     * @param networkId  (required)
     * @param number  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWirelessSsid_0Async(String networkId, String number, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkWirelessSsid_0ValidateBeforeCall(networkId, number, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkWirelessSsids_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWirelessSsids_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/wireless/ssids"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkWirelessSsids_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkWirelessSsids_0(Async)");
        }

        return getNetworkWirelessSsids_0Call(networkId, _callback);

    }

    /**
     * List the MR SSIDs in a network
     * List the MR SSIDs in a network
     * @param networkId  (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getNetworkWirelessSsids_0(String networkId) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getNetworkWirelessSsids_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * List the MR SSIDs in a network
     * List the MR SSIDs in a network
     * @param networkId  (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getNetworkWirelessSsids_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkWirelessSsids_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the MR SSIDs in a network (asynchronously)
     * List the MR SSIDs in a network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkWirelessSsids_0Async(String networkId, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkWirelessSsids_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetwork_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetwork_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetwork_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetwork_0(Async)");
        }

        return getNetwork_0Call(networkId, _callback);

    }

    /**
     * Return a network
     * Return a network
     * @param networkId  (required)
     * @return GetNetwork200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetwork200Response getNetwork_0(String networkId) throws ApiException {
        ApiResponse<GetNetwork200Response> localVarResp = getNetwork_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Return a network
     * Return a network
     * @param networkId  (required)
     * @return ApiResponse&lt;GetNetwork200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetwork200Response> getNetwork_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetwork_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<GetNetwork200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a network (asynchronously)
     * Return a network
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetwork_0Async(String networkId, final ApiCallback<GetNetwork200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetwork_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<GetNetwork200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationActionBatch_0
     * @param organizationId  (required)
     * @param actionBatchId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationActionBatch_0Call(String organizationId, String actionBatchId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/actionBatches/{actionBatchId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "actionBatchId" + "}", localVarApiClient.escapeString(actionBatchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationActionBatch_0ValidateBeforeCall(String organizationId, String actionBatchId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationActionBatch_0(Async)");
        }

        // verify the required parameter 'actionBatchId' is set
        if (actionBatchId == null) {
            throw new ApiException("Missing the required parameter 'actionBatchId' when calling getOrganizationActionBatch_0(Async)");
        }

        return getOrganizationActionBatch_0Call(organizationId, actionBatchId, _callback);

    }

    /**
     * Return an action batch
     * Return an action batch
     * @param organizationId  (required)
     * @param actionBatchId  (required)
     * @return CreateOrganizationActionBatch201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CreateOrganizationActionBatch201Response getOrganizationActionBatch_0(String organizationId, String actionBatchId) throws ApiException {
        ApiResponse<CreateOrganizationActionBatch201Response> localVarResp = getOrganizationActionBatch_0WithHttpInfo(organizationId, actionBatchId);
        return localVarResp.getData();
    }

    /**
     * Return an action batch
     * Return an action batch
     * @param organizationId  (required)
     * @param actionBatchId  (required)
     * @return ApiResponse&lt;CreateOrganizationActionBatch201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateOrganizationActionBatch201Response> getOrganizationActionBatch_0WithHttpInfo(String organizationId, String actionBatchId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationActionBatch_0ValidateBeforeCall(organizationId, actionBatchId, null);
        Type localVarReturnType = new TypeToken<CreateOrganizationActionBatch201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return an action batch (asynchronously)
     * Return an action batch
     * @param organizationId  (required)
     * @param actionBatchId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationActionBatch_0Async(String organizationId, String actionBatchId, final ApiCallback<CreateOrganizationActionBatch201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationActionBatch_0ValidateBeforeCall(organizationId, actionBatchId, _callback);
        Type localVarReturnType = new TypeToken<CreateOrganizationActionBatch201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationActionBatches_0
     * @param organizationId  (required)
     * @param status Filter batches by status. Valid types are pending, completed, and failed. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationActionBatches_0Call(String organizationId, String status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/actionBatches"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationActionBatches_0ValidateBeforeCall(String organizationId, String status, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationActionBatches_0(Async)");
        }

        return getOrganizationActionBatches_0Call(organizationId, status, _callback);

    }

    /**
     * Return the list of action batches in the organization
     * Return the list of action batches in the organization
     * @param organizationId  (required)
     * @param status Filter batches by status. Valid types are pending, completed, and failed. (optional)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getOrganizationActionBatches_0(String organizationId, String status) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getOrganizationActionBatches_0WithHttpInfo(organizationId, status);
        return localVarResp.getData();
    }

    /**
     * Return the list of action batches in the organization
     * Return the list of action batches in the organization
     * @param organizationId  (required)
     * @param status Filter batches by status. Valid types are pending, completed, and failed. (optional)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getOrganizationActionBatches_0WithHttpInfo(String organizationId, String status) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationActionBatches_0ValidateBeforeCall(organizationId, status, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the list of action batches in the organization (asynchronously)
     * Return the list of action batches in the organization
     * @param organizationId  (required)
     * @param status Filter batches by status. Valid types are pending, completed, and failed. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationActionBatches_0Async(String organizationId, String status, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationActionBatches_0ValidateBeforeCall(organizationId, status, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationAdaptivePolicyAcl_0
     * @param organizationId  (required)
     * @param aclId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationAdaptivePolicyAcl_0Call(String organizationId, String aclId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/adaptivePolicy/acls/{aclId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "aclId" + "}", localVarApiClient.escapeString(aclId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationAdaptivePolicyAcl_0ValidateBeforeCall(String organizationId, String aclId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationAdaptivePolicyAcl_0(Async)");
        }

        // verify the required parameter 'aclId' is set
        if (aclId == null) {
            throw new ApiException("Missing the required parameter 'aclId' when calling getOrganizationAdaptivePolicyAcl_0(Async)");
        }

        return getOrganizationAdaptivePolicyAcl_0Call(organizationId, aclId, _callback);

    }

    /**
     * Returns the adaptive policy ACL information
     * Returns the adaptive policy ACL information
     * @param organizationId  (required)
     * @param aclId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getOrganizationAdaptivePolicyAcl_0(String organizationId, String aclId) throws ApiException {
        ApiResponse<Object> localVarResp = getOrganizationAdaptivePolicyAcl_0WithHttpInfo(organizationId, aclId);
        return localVarResp.getData();
    }

    /**
     * Returns the adaptive policy ACL information
     * Returns the adaptive policy ACL information
     * @param organizationId  (required)
     * @param aclId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getOrganizationAdaptivePolicyAcl_0WithHttpInfo(String organizationId, String aclId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationAdaptivePolicyAcl_0ValidateBeforeCall(organizationId, aclId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the adaptive policy ACL information (asynchronously)
     * Returns the adaptive policy ACL information
     * @param organizationId  (required)
     * @param aclId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationAdaptivePolicyAcl_0Async(String organizationId, String aclId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationAdaptivePolicyAcl_0ValidateBeforeCall(organizationId, aclId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationAdaptivePolicyAcls_0
     * @param organizationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationAdaptivePolicyAcls_0Call(String organizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/adaptivePolicy/acls"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationAdaptivePolicyAcls_0ValidateBeforeCall(String organizationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationAdaptivePolicyAcls_0(Async)");
        }

        return getOrganizationAdaptivePolicyAcls_0Call(organizationId, _callback);

    }

    /**
     * List adaptive policy ACLs in a organization
     * List adaptive policy ACLs in a organization
     * @param organizationId  (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getOrganizationAdaptivePolicyAcls_0(String organizationId) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getOrganizationAdaptivePolicyAcls_0WithHttpInfo(organizationId);
        return localVarResp.getData();
    }

    /**
     * List adaptive policy ACLs in a organization
     * List adaptive policy ACLs in a organization
     * @param organizationId  (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getOrganizationAdaptivePolicyAcls_0WithHttpInfo(String organizationId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationAdaptivePolicyAcls_0ValidateBeforeCall(organizationId, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List adaptive policy ACLs in a organization (asynchronously)
     * List adaptive policy ACLs in a organization
     * @param organizationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationAdaptivePolicyAcls_0Async(String organizationId, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationAdaptivePolicyAcls_0ValidateBeforeCall(organizationId, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationAdaptivePolicyGroup_0
     * @param organizationId  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationAdaptivePolicyGroup_0Call(String organizationId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/adaptivePolicy/groups/{id}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationAdaptivePolicyGroup_0ValidateBeforeCall(String organizationId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationAdaptivePolicyGroup_0(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganizationAdaptivePolicyGroup_0(Async)");
        }

        return getOrganizationAdaptivePolicyGroup_0Call(organizationId, id, _callback);

    }

    /**
     * Returns an adaptive policy group
     * Returns an adaptive policy group
     * @param organizationId  (required)
     * @param id  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getOrganizationAdaptivePolicyGroup_0(String organizationId, String id) throws ApiException {
        ApiResponse<Object> localVarResp = getOrganizationAdaptivePolicyGroup_0WithHttpInfo(organizationId, id);
        return localVarResp.getData();
    }

    /**
     * Returns an adaptive policy group
     * Returns an adaptive policy group
     * @param organizationId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getOrganizationAdaptivePolicyGroup_0WithHttpInfo(String organizationId, String id) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationAdaptivePolicyGroup_0ValidateBeforeCall(organizationId, id, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns an adaptive policy group (asynchronously)
     * Returns an adaptive policy group
     * @param organizationId  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationAdaptivePolicyGroup_0Async(String organizationId, String id, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationAdaptivePolicyGroup_0ValidateBeforeCall(organizationId, id, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationAdaptivePolicyGroups_0
     * @param organizationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationAdaptivePolicyGroups_0Call(String organizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/adaptivePolicy/groups"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationAdaptivePolicyGroups_0ValidateBeforeCall(String organizationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationAdaptivePolicyGroups_0(Async)");
        }

        return getOrganizationAdaptivePolicyGroups_0Call(organizationId, _callback);

    }

    /**
     * List adaptive policy groups in a organization
     * List adaptive policy groups in a organization
     * @param organizationId  (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getOrganizationAdaptivePolicyGroups_0(String organizationId) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getOrganizationAdaptivePolicyGroups_0WithHttpInfo(organizationId);
        return localVarResp.getData();
    }

    /**
     * List adaptive policy groups in a organization
     * List adaptive policy groups in a organization
     * @param organizationId  (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getOrganizationAdaptivePolicyGroups_0WithHttpInfo(String organizationId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationAdaptivePolicyGroups_0ValidateBeforeCall(organizationId, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List adaptive policy groups in a organization (asynchronously)
     * List adaptive policy groups in a organization
     * @param organizationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationAdaptivePolicyGroups_0Async(String organizationId, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationAdaptivePolicyGroups_0ValidateBeforeCall(organizationId, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationAdaptivePolicyPolicies_0
     * @param organizationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationAdaptivePolicyPolicies_0Call(String organizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/adaptivePolicy/policies"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationAdaptivePolicyPolicies_0ValidateBeforeCall(String organizationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationAdaptivePolicyPolicies_0(Async)");
        }

        return getOrganizationAdaptivePolicyPolicies_0Call(organizationId, _callback);

    }

    /**
     * List adaptive policies in an organization
     * List adaptive policies in an organization
     * @param organizationId  (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getOrganizationAdaptivePolicyPolicies_0(String organizationId) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getOrganizationAdaptivePolicyPolicies_0WithHttpInfo(organizationId);
        return localVarResp.getData();
    }

    /**
     * List adaptive policies in an organization
     * List adaptive policies in an organization
     * @param organizationId  (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getOrganizationAdaptivePolicyPolicies_0WithHttpInfo(String organizationId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationAdaptivePolicyPolicies_0ValidateBeforeCall(organizationId, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List adaptive policies in an organization (asynchronously)
     * List adaptive policies in an organization
     * @param organizationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationAdaptivePolicyPolicies_0Async(String organizationId, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationAdaptivePolicyPolicies_0ValidateBeforeCall(organizationId, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationAdaptivePolicyPolicy_0
     * @param organizationId  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationAdaptivePolicyPolicy_0Call(String organizationId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/adaptivePolicy/policies/{id}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationAdaptivePolicyPolicy_0ValidateBeforeCall(String organizationId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationAdaptivePolicyPolicy_0(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganizationAdaptivePolicyPolicy_0(Async)");
        }

        return getOrganizationAdaptivePolicyPolicy_0Call(organizationId, id, _callback);

    }

    /**
     * Return an adaptive policy
     * Return an adaptive policy
     * @param organizationId  (required)
     * @param id  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getOrganizationAdaptivePolicyPolicy_0(String organizationId, String id) throws ApiException {
        ApiResponse<Object> localVarResp = getOrganizationAdaptivePolicyPolicy_0WithHttpInfo(organizationId, id);
        return localVarResp.getData();
    }

    /**
     * Return an adaptive policy
     * Return an adaptive policy
     * @param organizationId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getOrganizationAdaptivePolicyPolicy_0WithHttpInfo(String organizationId, String id) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationAdaptivePolicyPolicy_0ValidateBeforeCall(organizationId, id, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return an adaptive policy (asynchronously)
     * Return an adaptive policy
     * @param organizationId  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationAdaptivePolicyPolicy_0Async(String organizationId, String id, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationAdaptivePolicyPolicy_0ValidateBeforeCall(organizationId, id, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationAdaptivePolicySettings_0
     * @param organizationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationAdaptivePolicySettings_0Call(String organizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/adaptivePolicy/settings"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationAdaptivePolicySettings_0ValidateBeforeCall(String organizationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationAdaptivePolicySettings_0(Async)");
        }

        return getOrganizationAdaptivePolicySettings_0Call(organizationId, _callback);

    }

    /**
     * Returns global adaptive policy settings in an organization
     * Returns global adaptive policy settings in an organization
     * @param organizationId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getOrganizationAdaptivePolicySettings_0(String organizationId) throws ApiException {
        ApiResponse<Object> localVarResp = getOrganizationAdaptivePolicySettings_0WithHttpInfo(organizationId);
        return localVarResp.getData();
    }

    /**
     * Returns global adaptive policy settings in an organization
     * Returns global adaptive policy settings in an organization
     * @param organizationId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getOrganizationAdaptivePolicySettings_0WithHttpInfo(String organizationId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationAdaptivePolicySettings_0ValidateBeforeCall(organizationId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns global adaptive policy settings in an organization (asynchronously)
     * Returns global adaptive policy settings in an organization
     * @param organizationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationAdaptivePolicySettings_0Async(String organizationId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationAdaptivePolicySettings_0ValidateBeforeCall(organizationId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationAdmins_0
     * @param organizationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationAdmins_0Call(String organizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/admins"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationAdmins_0ValidateBeforeCall(String organizationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationAdmins_0(Async)");
        }

        return getOrganizationAdmins_0Call(organizationId, _callback);

    }

    /**
     * List the dashboard administrators in this organization
     * List the dashboard administrators in this organization
     * @param organizationId  (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getOrganizationAdmins_0(String organizationId) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getOrganizationAdmins_0WithHttpInfo(organizationId);
        return localVarResp.getData();
    }

    /**
     * List the dashboard administrators in this organization
     * List the dashboard administrators in this organization
     * @param organizationId  (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getOrganizationAdmins_0WithHttpInfo(String organizationId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationAdmins_0ValidateBeforeCall(organizationId, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the dashboard administrators in this organization (asynchronously)
     * List the dashboard administrators in this organization
     * @param organizationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationAdmins_0Async(String organizationId, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationAdmins_0ValidateBeforeCall(organizationId, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationAlertsProfiles_0
     * @param organizationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationAlertsProfiles_0Call(String organizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/alerts/profiles"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationAlertsProfiles_0ValidateBeforeCall(String organizationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationAlertsProfiles_0(Async)");
        }

        return getOrganizationAlertsProfiles_0Call(organizationId, _callback);

    }

    /**
     * List all organization-wide alert configurations
     * List all organization-wide alert configurations
     * @param organizationId  (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getOrganizationAlertsProfiles_0(String organizationId) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getOrganizationAlertsProfiles_0WithHttpInfo(organizationId);
        return localVarResp.getData();
    }

    /**
     * List all organization-wide alert configurations
     * List all organization-wide alert configurations
     * @param organizationId  (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getOrganizationAlertsProfiles_0WithHttpInfo(String organizationId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationAlertsProfiles_0ValidateBeforeCall(organizationId, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all organization-wide alert configurations (asynchronously)
     * List all organization-wide alert configurations
     * @param organizationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationAlertsProfiles_0Async(String organizationId, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationAlertsProfiles_0ValidateBeforeCall(organizationId, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationApplianceSecurityIntrusion_0
     * @param organizationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationApplianceSecurityIntrusion_0Call(String organizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/appliance/security/intrusion"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationApplianceSecurityIntrusion_0ValidateBeforeCall(String organizationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationApplianceSecurityIntrusion_0(Async)");
        }

        return getOrganizationApplianceSecurityIntrusion_0Call(organizationId, _callback);

    }

    /**
     * Returns all supported intrusion settings for an organization
     * Returns all supported intrusion settings for an organization
     * @param organizationId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getOrganizationApplianceSecurityIntrusion_0(String organizationId) throws ApiException {
        ApiResponse<Object> localVarResp = getOrganizationApplianceSecurityIntrusion_0WithHttpInfo(organizationId);
        return localVarResp.getData();
    }

    /**
     * Returns all supported intrusion settings for an organization
     * Returns all supported intrusion settings for an organization
     * @param organizationId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getOrganizationApplianceSecurityIntrusion_0WithHttpInfo(String organizationId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationApplianceSecurityIntrusion_0ValidateBeforeCall(organizationId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns all supported intrusion settings for an organization (asynchronously)
     * Returns all supported intrusion settings for an organization
     * @param organizationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationApplianceSecurityIntrusion_0Async(String organizationId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationApplianceSecurityIntrusion_0ValidateBeforeCall(organizationId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationApplianceVpnThirdPartyVPNPeers_0
     * @param organizationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationApplianceVpnThirdPartyVPNPeers_0Call(String organizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/appliance/vpn/thirdPartyVPNPeers"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationApplianceVpnThirdPartyVPNPeers_0ValidateBeforeCall(String organizationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationApplianceVpnThirdPartyVPNPeers_0(Async)");
        }

        return getOrganizationApplianceVpnThirdPartyVPNPeers_0Call(organizationId, _callback);

    }

    /**
     * Return the third party VPN peers for an organization
     * Return the third party VPN peers for an organization
     * @param organizationId  (required)
     * @return GetOrganizationApplianceVpnThirdPartyVPNPeers200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetOrganizationApplianceVpnThirdPartyVPNPeers200Response getOrganizationApplianceVpnThirdPartyVPNPeers_0(String organizationId) throws ApiException {
        ApiResponse<GetOrganizationApplianceVpnThirdPartyVPNPeers200Response> localVarResp = getOrganizationApplianceVpnThirdPartyVPNPeers_0WithHttpInfo(organizationId);
        return localVarResp.getData();
    }

    /**
     * Return the third party VPN peers for an organization
     * Return the third party VPN peers for an organization
     * @param organizationId  (required)
     * @return ApiResponse&lt;GetOrganizationApplianceVpnThirdPartyVPNPeers200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOrganizationApplianceVpnThirdPartyVPNPeers200Response> getOrganizationApplianceVpnThirdPartyVPNPeers_0WithHttpInfo(String organizationId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationApplianceVpnThirdPartyVPNPeers_0ValidateBeforeCall(organizationId, null);
        Type localVarReturnType = new TypeToken<GetOrganizationApplianceVpnThirdPartyVPNPeers200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the third party VPN peers for an organization (asynchronously)
     * Return the third party VPN peers for an organization
     * @param organizationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationApplianceVpnThirdPartyVPNPeers_0Async(String organizationId, final ApiCallback<GetOrganizationApplianceVpnThirdPartyVPNPeers200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationApplianceVpnThirdPartyVPNPeers_0ValidateBeforeCall(organizationId, _callback);
        Type localVarReturnType = new TypeToken<GetOrganizationApplianceVpnThirdPartyVPNPeers200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationApplianceVpnVpnFirewallRules_0
     * @param organizationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationApplianceVpnVpnFirewallRules_0Call(String organizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/appliance/vpn/vpnFirewallRules"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationApplianceVpnVpnFirewallRules_0ValidateBeforeCall(String organizationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationApplianceVpnVpnFirewallRules_0(Async)");
        }

        return getOrganizationApplianceVpnVpnFirewallRules_0Call(organizationId, _callback);

    }

    /**
     * Return the firewall rules for an organization&#39;s site-to-site VPN
     * Return the firewall rules for an organization&#39;s site-to-site VPN
     * @param organizationId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getOrganizationApplianceVpnVpnFirewallRules_0(String organizationId) throws ApiException {
        ApiResponse<Object> localVarResp = getOrganizationApplianceVpnVpnFirewallRules_0WithHttpInfo(organizationId);
        return localVarResp.getData();
    }

    /**
     * Return the firewall rules for an organization&#39;s site-to-site VPN
     * Return the firewall rules for an organization&#39;s site-to-site VPN
     * @param organizationId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getOrganizationApplianceVpnVpnFirewallRules_0WithHttpInfo(String organizationId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationApplianceVpnVpnFirewallRules_0ValidateBeforeCall(organizationId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the firewall rules for an organization&#39;s site-to-site VPN (asynchronously)
     * Return the firewall rules for an organization&#39;s site-to-site VPN
     * @param organizationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationApplianceVpnVpnFirewallRules_0Async(String organizationId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationApplianceVpnVpnFirewallRules_0ValidateBeforeCall(organizationId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationBrandingPoliciesPriorities_0
     * @param organizationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationBrandingPoliciesPriorities_0Call(String organizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/brandingPolicies/priorities"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationBrandingPoliciesPriorities_0ValidateBeforeCall(String organizationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationBrandingPoliciesPriorities_0(Async)");
        }

        return getOrganizationBrandingPoliciesPriorities_0Call(organizationId, _callback);

    }

    /**
     * Return the branding policy IDs of an organization in priority order
     * Return the branding policy IDs of an organization in priority order. IDs are ordered in ascending order of priority (IDs later in the array have higher priority).
     * @param organizationId  (required)
     * @return GetOrganizationBrandingPoliciesPriorities200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetOrganizationBrandingPoliciesPriorities200Response getOrganizationBrandingPoliciesPriorities_0(String organizationId) throws ApiException {
        ApiResponse<GetOrganizationBrandingPoliciesPriorities200Response> localVarResp = getOrganizationBrandingPoliciesPriorities_0WithHttpInfo(organizationId);
        return localVarResp.getData();
    }

    /**
     * Return the branding policy IDs of an organization in priority order
     * Return the branding policy IDs of an organization in priority order. IDs are ordered in ascending order of priority (IDs later in the array have higher priority).
     * @param organizationId  (required)
     * @return ApiResponse&lt;GetOrganizationBrandingPoliciesPriorities200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOrganizationBrandingPoliciesPriorities200Response> getOrganizationBrandingPoliciesPriorities_0WithHttpInfo(String organizationId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationBrandingPoliciesPriorities_0ValidateBeforeCall(organizationId, null);
        Type localVarReturnType = new TypeToken<GetOrganizationBrandingPoliciesPriorities200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the branding policy IDs of an organization in priority order (asynchronously)
     * Return the branding policy IDs of an organization in priority order. IDs are ordered in ascending order of priority (IDs later in the array have higher priority).
     * @param organizationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationBrandingPoliciesPriorities_0Async(String organizationId, final ApiCallback<GetOrganizationBrandingPoliciesPriorities200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationBrandingPoliciesPriorities_0ValidateBeforeCall(organizationId, _callback);
        Type localVarReturnType = new TypeToken<GetOrganizationBrandingPoliciesPriorities200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationBrandingPolicies_0
     * @param organizationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationBrandingPolicies_0Call(String organizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/brandingPolicies"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationBrandingPolicies_0ValidateBeforeCall(String organizationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationBrandingPolicies_0(Async)");
        }

        return getOrganizationBrandingPolicies_0Call(organizationId, _callback);

    }

    /**
     * List the branding policies of an organization
     * List the branding policies of an organization
     * @param organizationId  (required)
     * @return List&lt;GetOrganizationBrandingPolicies200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetOrganizationBrandingPolicies200ResponseInner> getOrganizationBrandingPolicies_0(String organizationId) throws ApiException {
        ApiResponse<List<GetOrganizationBrandingPolicies200ResponseInner>> localVarResp = getOrganizationBrandingPolicies_0WithHttpInfo(organizationId);
        return localVarResp.getData();
    }

    /**
     * List the branding policies of an organization
     * List the branding policies of an organization
     * @param organizationId  (required)
     * @return ApiResponse&lt;List&lt;GetOrganizationBrandingPolicies200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetOrganizationBrandingPolicies200ResponseInner>> getOrganizationBrandingPolicies_0WithHttpInfo(String organizationId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationBrandingPolicies_0ValidateBeforeCall(organizationId, null);
        Type localVarReturnType = new TypeToken<List<GetOrganizationBrandingPolicies200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the branding policies of an organization (asynchronously)
     * List the branding policies of an organization
     * @param organizationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationBrandingPolicies_0Async(String organizationId, final ApiCallback<List<GetOrganizationBrandingPolicies200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationBrandingPolicies_0ValidateBeforeCall(organizationId, _callback);
        Type localVarReturnType = new TypeToken<List<GetOrganizationBrandingPolicies200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationBrandingPolicy_0
     * @param organizationId  (required)
     * @param brandingPolicyId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationBrandingPolicy_0Call(String organizationId, String brandingPolicyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/brandingPolicies/{brandingPolicyId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "brandingPolicyId" + "}", localVarApiClient.escapeString(brandingPolicyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationBrandingPolicy_0ValidateBeforeCall(String organizationId, String brandingPolicyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationBrandingPolicy_0(Async)");
        }

        // verify the required parameter 'brandingPolicyId' is set
        if (brandingPolicyId == null) {
            throw new ApiException("Missing the required parameter 'brandingPolicyId' when calling getOrganizationBrandingPolicy_0(Async)");
        }

        return getOrganizationBrandingPolicy_0Call(organizationId, brandingPolicyId, _callback);

    }

    /**
     * Return a branding policy
     * Return a branding policy
     * @param organizationId  (required)
     * @param brandingPolicyId  (required)
     * @return GetOrganizationBrandingPolicies200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetOrganizationBrandingPolicies200ResponseInner getOrganizationBrandingPolicy_0(String organizationId, String brandingPolicyId) throws ApiException {
        ApiResponse<GetOrganizationBrandingPolicies200ResponseInner> localVarResp = getOrganizationBrandingPolicy_0WithHttpInfo(organizationId, brandingPolicyId);
        return localVarResp.getData();
    }

    /**
     * Return a branding policy
     * Return a branding policy
     * @param organizationId  (required)
     * @param brandingPolicyId  (required)
     * @return ApiResponse&lt;GetOrganizationBrandingPolicies200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOrganizationBrandingPolicies200ResponseInner> getOrganizationBrandingPolicy_0WithHttpInfo(String organizationId, String brandingPolicyId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationBrandingPolicy_0ValidateBeforeCall(organizationId, brandingPolicyId, null);
        Type localVarReturnType = new TypeToken<GetOrganizationBrandingPolicies200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a branding policy (asynchronously)
     * Return a branding policy
     * @param organizationId  (required)
     * @param brandingPolicyId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationBrandingPolicy_0Async(String organizationId, String brandingPolicyId, final ApiCallback<GetOrganizationBrandingPolicies200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationBrandingPolicy_0ValidateBeforeCall(organizationId, brandingPolicyId, _callback);
        Type localVarReturnType = new TypeToken<GetOrganizationBrandingPolicies200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationCameraCustomAnalyticsArtifact_0
     * @param organizationId  (required)
     * @param artifactId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationCameraCustomAnalyticsArtifact_0Call(String organizationId, String artifactId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/camera/customAnalytics/artifacts/{artifactId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "artifactId" + "}", localVarApiClient.escapeString(artifactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationCameraCustomAnalyticsArtifact_0ValidateBeforeCall(String organizationId, String artifactId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationCameraCustomAnalyticsArtifact_0(Async)");
        }

        // verify the required parameter 'artifactId' is set
        if (artifactId == null) {
            throw new ApiException("Missing the required parameter 'artifactId' when calling getOrganizationCameraCustomAnalyticsArtifact_0(Async)");
        }

        return getOrganizationCameraCustomAnalyticsArtifact_0Call(organizationId, artifactId, _callback);

    }

    /**
     * Get Custom Analytics Artifact
     * Get Custom Analytics Artifact
     * @param organizationId  (required)
     * @param artifactId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getOrganizationCameraCustomAnalyticsArtifact_0(String organizationId, String artifactId) throws ApiException {
        ApiResponse<Object> localVarResp = getOrganizationCameraCustomAnalyticsArtifact_0WithHttpInfo(organizationId, artifactId);
        return localVarResp.getData();
    }

    /**
     * Get Custom Analytics Artifact
     * Get Custom Analytics Artifact
     * @param organizationId  (required)
     * @param artifactId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getOrganizationCameraCustomAnalyticsArtifact_0WithHttpInfo(String organizationId, String artifactId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationCameraCustomAnalyticsArtifact_0ValidateBeforeCall(organizationId, artifactId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Custom Analytics Artifact (asynchronously)
     * Get Custom Analytics Artifact
     * @param organizationId  (required)
     * @param artifactId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationCameraCustomAnalyticsArtifact_0Async(String organizationId, String artifactId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationCameraCustomAnalyticsArtifact_0ValidateBeforeCall(organizationId, artifactId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationCameraCustomAnalyticsArtifacts_0
     * @param organizationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationCameraCustomAnalyticsArtifacts_0Call(String organizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/camera/customAnalytics/artifacts"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationCameraCustomAnalyticsArtifacts_0ValidateBeforeCall(String organizationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationCameraCustomAnalyticsArtifacts_0(Async)");
        }

        return getOrganizationCameraCustomAnalyticsArtifacts_0Call(organizationId, _callback);

    }

    /**
     * List Custom Analytics Artifacts
     * List Custom Analytics Artifacts
     * @param organizationId  (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getOrganizationCameraCustomAnalyticsArtifacts_0(String organizationId) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getOrganizationCameraCustomAnalyticsArtifacts_0WithHttpInfo(organizationId);
        return localVarResp.getData();
    }

    /**
     * List Custom Analytics Artifacts
     * List Custom Analytics Artifacts
     * @param organizationId  (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getOrganizationCameraCustomAnalyticsArtifacts_0WithHttpInfo(String organizationId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationCameraCustomAnalyticsArtifacts_0ValidateBeforeCall(organizationId, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Custom Analytics Artifacts (asynchronously)
     * List Custom Analytics Artifacts
     * @param organizationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationCameraCustomAnalyticsArtifacts_0Async(String organizationId, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationCameraCustomAnalyticsArtifacts_0ValidateBeforeCall(organizationId, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationCameraOnboardingStatuses_0
     * @param organizationId  (required)
     * @param serials A list of serial numbers. The returned cameras will be filtered to only include these serials. (optional)
     * @param networkIds A list of network IDs. The returned cameras will be filtered to only include these networks. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationCameraOnboardingStatuses_0Call(String organizationId, List<String> serials, List<String> networkIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/camera/onboarding/statuses"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (serials != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "serials", serials));
        }

        if (networkIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "networkIds", networkIds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationCameraOnboardingStatuses_0ValidateBeforeCall(String organizationId, List<String> serials, List<String> networkIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationCameraOnboardingStatuses_0(Async)");
        }

        return getOrganizationCameraOnboardingStatuses_0Call(organizationId, serials, networkIds, _callback);

    }

    /**
     * Fetch onboarding status of cameras
     * Fetch onboarding status of cameras
     * @param organizationId  (required)
     * @param serials A list of serial numbers. The returned cameras will be filtered to only include these serials. (optional)
     * @param networkIds A list of network IDs. The returned cameras will be filtered to only include these networks. (optional)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getOrganizationCameraOnboardingStatuses_0(String organizationId, List<String> serials, List<String> networkIds) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getOrganizationCameraOnboardingStatuses_0WithHttpInfo(organizationId, serials, networkIds);
        return localVarResp.getData();
    }

    /**
     * Fetch onboarding status of cameras
     * Fetch onboarding status of cameras
     * @param organizationId  (required)
     * @param serials A list of serial numbers. The returned cameras will be filtered to only include these serials. (optional)
     * @param networkIds A list of network IDs. The returned cameras will be filtered to only include these networks. (optional)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getOrganizationCameraOnboardingStatuses_0WithHttpInfo(String organizationId, List<String> serials, List<String> networkIds) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationCameraOnboardingStatuses_0ValidateBeforeCall(organizationId, serials, networkIds, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch onboarding status of cameras (asynchronously)
     * Fetch onboarding status of cameras
     * @param organizationId  (required)
     * @param serials A list of serial numbers. The returned cameras will be filtered to only include these serials. (optional)
     * @param networkIds A list of network IDs. The returned cameras will be filtered to only include these networks. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationCameraOnboardingStatuses_0Async(String organizationId, List<String> serials, List<String> networkIds, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationCameraOnboardingStatuses_0ValidateBeforeCall(organizationId, serials, networkIds, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationClientsSearch_0
     * @param organizationId  (required)
     * @param mac The MAC address of the client. Required. (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 5. Default is 5. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationClientsSearch_0Call(String organizationId, String mac, Integer perPage, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/clients/search"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (mac != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac", mac));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingAfter", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endingBefore", endingBefore));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationClientsSearch_0ValidateBeforeCall(String organizationId, String mac, Integer perPage, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationClientsSearch_0(Async)");
        }

        // verify the required parameter 'mac' is set
        if (mac == null) {
            throw new ApiException("Missing the required parameter 'mac' when calling getOrganizationClientsSearch_0(Async)");
        }

        return getOrganizationClientsSearch_0Call(organizationId, mac, perPage, startingAfter, endingBefore, _callback);

    }

    /**
     * Return the client details in an organization
     * Return the client details in an organization
     * @param organizationId  (required)
     * @param mac The MAC address of the client. Required. (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 5. Default is 5. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public Object getOrganizationClientsSearch_0(String organizationId, String mac, Integer perPage, String startingAfter, String endingBefore) throws ApiException {
        ApiResponse<Object> localVarResp = getOrganizationClientsSearch_0WithHttpInfo(organizationId, mac, perPage, startingAfter, endingBefore);
        return localVarResp.getData();
    }

    /**
     * Return the client details in an organization
     * Return the client details in an organization
     * @param organizationId  (required)
     * @param mac The MAC address of the client. Required. (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 5. Default is 5. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public ApiResponse<Object> getOrganizationClientsSearch_0WithHttpInfo(String organizationId, String mac, Integer perPage, String startingAfter, String endingBefore) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationClientsSearch_0ValidateBeforeCall(organizationId, mac, perPage, startingAfter, endingBefore, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the client details in an organization (asynchronously)
     * Return the client details in an organization
     * @param organizationId  (required)
     * @param mac The MAC address of the client. Required. (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 5. Default is 5. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationClientsSearch_0Async(String organizationId, String mac, Integer perPage, String startingAfter, String endingBefore, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationClientsSearch_0ValidateBeforeCall(organizationId, mac, perPage, startingAfter, endingBefore, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationConfigTemplateSwitchProfilePort_0
     * @param organizationId  (required)
     * @param configTemplateId  (required)
     * @param profileId  (required)
     * @param portId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationConfigTemplateSwitchProfilePort_0Call(String organizationId, String configTemplateId, String profileId, String portId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/configTemplates/{configTemplateId}/switch/profiles/{profileId}/ports/{portId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "configTemplateId" + "}", localVarApiClient.escapeString(configTemplateId.toString()))
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()))
            .replace("{" + "portId" + "}", localVarApiClient.escapeString(portId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationConfigTemplateSwitchProfilePort_0ValidateBeforeCall(String organizationId, String configTemplateId, String profileId, String portId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationConfigTemplateSwitchProfilePort_0(Async)");
        }

        // verify the required parameter 'configTemplateId' is set
        if (configTemplateId == null) {
            throw new ApiException("Missing the required parameter 'configTemplateId' when calling getOrganizationConfigTemplateSwitchProfilePort_0(Async)");
        }

        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling getOrganizationConfigTemplateSwitchProfilePort_0(Async)");
        }

        // verify the required parameter 'portId' is set
        if (portId == null) {
            throw new ApiException("Missing the required parameter 'portId' when calling getOrganizationConfigTemplateSwitchProfilePort_0(Async)");
        }

        return getOrganizationConfigTemplateSwitchProfilePort_0Call(organizationId, configTemplateId, profileId, portId, _callback);

    }

    /**
     * Return a switch profile port
     * Return a switch profile port
     * @param organizationId  (required)
     * @param configTemplateId  (required)
     * @param profileId  (required)
     * @param portId  (required)
     * @return GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner getOrganizationConfigTemplateSwitchProfilePort_0(String organizationId, String configTemplateId, String profileId, String portId) throws ApiException {
        ApiResponse<GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner> localVarResp = getOrganizationConfigTemplateSwitchProfilePort_0WithHttpInfo(organizationId, configTemplateId, profileId, portId);
        return localVarResp.getData();
    }

    /**
     * Return a switch profile port
     * Return a switch profile port
     * @param organizationId  (required)
     * @param configTemplateId  (required)
     * @param profileId  (required)
     * @param portId  (required)
     * @return ApiResponse&lt;GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner> getOrganizationConfigTemplateSwitchProfilePort_0WithHttpInfo(String organizationId, String configTemplateId, String profileId, String portId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationConfigTemplateSwitchProfilePort_0ValidateBeforeCall(organizationId, configTemplateId, profileId, portId, null);
        Type localVarReturnType = new TypeToken<GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a switch profile port (asynchronously)
     * Return a switch profile port
     * @param organizationId  (required)
     * @param configTemplateId  (required)
     * @param profileId  (required)
     * @param portId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationConfigTemplateSwitchProfilePort_0Async(String organizationId, String configTemplateId, String profileId, String portId, final ApiCallback<GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationConfigTemplateSwitchProfilePort_0ValidateBeforeCall(organizationId, configTemplateId, profileId, portId, _callback);
        Type localVarReturnType = new TypeToken<GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationConfigTemplateSwitchProfilePorts_0
     * @param organizationId  (required)
     * @param configTemplateId  (required)
     * @param profileId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationConfigTemplateSwitchProfilePorts_0Call(String organizationId, String configTemplateId, String profileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/configTemplates/{configTemplateId}/switch/profiles/{profileId}/ports"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "configTemplateId" + "}", localVarApiClient.escapeString(configTemplateId.toString()))
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationConfigTemplateSwitchProfilePorts_0ValidateBeforeCall(String organizationId, String configTemplateId, String profileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationConfigTemplateSwitchProfilePorts_0(Async)");
        }

        // verify the required parameter 'configTemplateId' is set
        if (configTemplateId == null) {
            throw new ApiException("Missing the required parameter 'configTemplateId' when calling getOrganizationConfigTemplateSwitchProfilePorts_0(Async)");
        }

        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling getOrganizationConfigTemplateSwitchProfilePorts_0(Async)");
        }

        return getOrganizationConfigTemplateSwitchProfilePorts_0Call(organizationId, configTemplateId, profileId, _callback);

    }

    /**
     * Return all the ports of a switch profile
     * Return all the ports of a switch profile
     * @param organizationId  (required)
     * @param configTemplateId  (required)
     * @param profileId  (required)
     * @return List&lt;GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner> getOrganizationConfigTemplateSwitchProfilePorts_0(String organizationId, String configTemplateId, String profileId) throws ApiException {
        ApiResponse<List<GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner>> localVarResp = getOrganizationConfigTemplateSwitchProfilePorts_0WithHttpInfo(organizationId, configTemplateId, profileId);
        return localVarResp.getData();
    }

    /**
     * Return all the ports of a switch profile
     * Return all the ports of a switch profile
     * @param organizationId  (required)
     * @param configTemplateId  (required)
     * @param profileId  (required)
     * @return ApiResponse&lt;List&lt;GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner>> getOrganizationConfigTemplateSwitchProfilePorts_0WithHttpInfo(String organizationId, String configTemplateId, String profileId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationConfigTemplateSwitchProfilePorts_0ValidateBeforeCall(organizationId, configTemplateId, profileId, null);
        Type localVarReturnType = new TypeToken<List<GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return all the ports of a switch profile (asynchronously)
     * Return all the ports of a switch profile
     * @param organizationId  (required)
     * @param configTemplateId  (required)
     * @param profileId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationConfigTemplateSwitchProfilePorts_0Async(String organizationId, String configTemplateId, String profileId, final ApiCallback<List<GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationConfigTemplateSwitchProfilePorts_0ValidateBeforeCall(organizationId, configTemplateId, profileId, _callback);
        Type localVarReturnType = new TypeToken<List<GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationConfigTemplateSwitchProfiles_0
     * @param organizationId  (required)
     * @param configTemplateId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationConfigTemplateSwitchProfiles_0Call(String organizationId, String configTemplateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/configTemplates/{configTemplateId}/switch/profiles"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "configTemplateId" + "}", localVarApiClient.escapeString(configTemplateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationConfigTemplateSwitchProfiles_0ValidateBeforeCall(String organizationId, String configTemplateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationConfigTemplateSwitchProfiles_0(Async)");
        }

        // verify the required parameter 'configTemplateId' is set
        if (configTemplateId == null) {
            throw new ApiException("Missing the required parameter 'configTemplateId' when calling getOrganizationConfigTemplateSwitchProfiles_0(Async)");
        }

        return getOrganizationConfigTemplateSwitchProfiles_0Call(organizationId, configTemplateId, _callback);

    }

    /**
     * List the switch profiles for your switch template configuration
     * List the switch profiles for your switch template configuration
     * @param organizationId  (required)
     * @param configTemplateId  (required)
     * @return GetOrganizationConfigTemplateSwitchProfiles200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetOrganizationConfigTemplateSwitchProfiles200Response getOrganizationConfigTemplateSwitchProfiles_0(String organizationId, String configTemplateId) throws ApiException {
        ApiResponse<GetOrganizationConfigTemplateSwitchProfiles200Response> localVarResp = getOrganizationConfigTemplateSwitchProfiles_0WithHttpInfo(organizationId, configTemplateId);
        return localVarResp.getData();
    }

    /**
     * List the switch profiles for your switch template configuration
     * List the switch profiles for your switch template configuration
     * @param organizationId  (required)
     * @param configTemplateId  (required)
     * @return ApiResponse&lt;GetOrganizationConfigTemplateSwitchProfiles200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOrganizationConfigTemplateSwitchProfiles200Response> getOrganizationConfigTemplateSwitchProfiles_0WithHttpInfo(String organizationId, String configTemplateId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationConfigTemplateSwitchProfiles_0ValidateBeforeCall(organizationId, configTemplateId, null);
        Type localVarReturnType = new TypeToken<GetOrganizationConfigTemplateSwitchProfiles200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the switch profiles for your switch template configuration (asynchronously)
     * List the switch profiles for your switch template configuration
     * @param organizationId  (required)
     * @param configTemplateId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationConfigTemplateSwitchProfiles_0Async(String organizationId, String configTemplateId, final ApiCallback<GetOrganizationConfigTemplateSwitchProfiles200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationConfigTemplateSwitchProfiles_0ValidateBeforeCall(organizationId, configTemplateId, _callback);
        Type localVarReturnType = new TypeToken<GetOrganizationConfigTemplateSwitchProfiles200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationConfigTemplate_0
     * @param organizationId  (required)
     * @param configTemplateId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationConfigTemplate_0Call(String organizationId, String configTemplateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/configTemplates/{configTemplateId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "configTemplateId" + "}", localVarApiClient.escapeString(configTemplateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationConfigTemplate_0ValidateBeforeCall(String organizationId, String configTemplateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationConfigTemplate_0(Async)");
        }

        // verify the required parameter 'configTemplateId' is set
        if (configTemplateId == null) {
            throw new ApiException("Missing the required parameter 'configTemplateId' when calling getOrganizationConfigTemplate_0(Async)");
        }

        return getOrganizationConfigTemplate_0Call(organizationId, configTemplateId, _callback);

    }

    /**
     * Return a single configuration template
     * Return a single configuration template
     * @param organizationId  (required)
     * @param configTemplateId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getOrganizationConfigTemplate_0(String organizationId, String configTemplateId) throws ApiException {
        ApiResponse<Object> localVarResp = getOrganizationConfigTemplate_0WithHttpInfo(organizationId, configTemplateId);
        return localVarResp.getData();
    }

    /**
     * Return a single configuration template
     * Return a single configuration template
     * @param organizationId  (required)
     * @param configTemplateId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getOrganizationConfigTemplate_0WithHttpInfo(String organizationId, String configTemplateId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationConfigTemplate_0ValidateBeforeCall(organizationId, configTemplateId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a single configuration template (asynchronously)
     * Return a single configuration template
     * @param organizationId  (required)
     * @param configTemplateId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationConfigTemplate_0Async(String organizationId, String configTemplateId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationConfigTemplate_0ValidateBeforeCall(organizationId, configTemplateId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationConfigTemplates_0
     * @param organizationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationConfigTemplates_0Call(String organizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/configTemplates"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationConfigTemplates_0ValidateBeforeCall(String organizationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationConfigTemplates_0(Async)");
        }

        return getOrganizationConfigTemplates_0Call(organizationId, _callback);

    }

    /**
     * List the configuration templates for this organization
     * List the configuration templates for this organization
     * @param organizationId  (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getOrganizationConfigTemplates_0(String organizationId) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getOrganizationConfigTemplates_0WithHttpInfo(organizationId);
        return localVarResp.getData();
    }

    /**
     * List the configuration templates for this organization
     * List the configuration templates for this organization
     * @param organizationId  (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getOrganizationConfigTemplates_0WithHttpInfo(String organizationId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationConfigTemplates_0ValidateBeforeCall(organizationId, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the configuration templates for this organization (asynchronously)
     * List the configuration templates for this organization
     * @param organizationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationConfigTemplates_0Async(String organizationId, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationConfigTemplates_0ValidateBeforeCall(organizationId, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationDevices_0
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param configurationUpdatedAfter Filter results by whether or not the device&#39;s configuration has been updated after the given timestamp (optional)
     * @param networkIds Optional parameter to filter devices by network. (optional)
     * @param productTypes Optional parameter to filter devices by product type. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, and sensor. (optional)
     * @param tags Optional parameter to filter devices by tags. (optional)
     * @param tagsFilterType Optional parameter of value &#39;withAnyTags&#39; or &#39;withAllTags&#39; to indicate whether to return networks which contain ANY or ALL of the included tags. If no type is included, &#39;withAnyTags&#39; will be selected. (optional)
     * @param name Optional parameter to filter devices by name. All returned devices will have a name that contains the search term or is an exact match. (optional)
     * @param mac Optional parameter to filter devices by MAC address. All returned devices will have a MAC address that contains the search term or is an exact match. (optional)
     * @param serial Optional parameter to filter devices by serial number. All returned devices will have a serial number that contains the search term or is an exact match. (optional)
     * @param model Optional parameter to filter devices by model. All returned devices will have a model that contains the search term or is an exact match. (optional)
     * @param macs Optional parameter to filter devices by one or more MAC addresses. All returned devices will have a MAC address that is an exact match. (optional)
     * @param serials Optional parameter to filter devices by one or more serial numbers. All returned devices will have a serial number that is an exact match. (optional)
     * @param sensorMetrics Optional parameter to filter devices by the metrics that they provide. Only applies to sensor devices. (optional)
     * @param sensorAlertProfileIds Optional parameter to filter devices by the alert profiles that are bound to them. Only applies to sensor devices. (optional)
     * @param models Optional parameter to filter devices by one or more models. All returned devices will have a model that is an exact match. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationDevices_0Call(String organizationId, Integer perPage, String startingAfter, String endingBefore, String configurationUpdatedAfter, List<String> networkIds, List<String> productTypes, List<String> tags, String tagsFilterType, String name, String mac, String serial, String model, List<String> macs, List<String> serials, List<String> sensorMetrics, List<String> sensorAlertProfileIds, List<String> models, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/devices"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingAfter", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endingBefore", endingBefore));
        }

        if (configurationUpdatedAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("configurationUpdatedAfter", configurationUpdatedAfter));
        }

        if (networkIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "networkIds", networkIds));
        }

        if (productTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "productTypes", productTypes));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tags", tags));
        }

        if (tagsFilterType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tagsFilterType", tagsFilterType));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (mac != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac", mac));
        }

        if (serial != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial", serial));
        }

        if (model != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model", model));
        }

        if (macs != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "macs", macs));
        }

        if (serials != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "serials", serials));
        }

        if (sensorMetrics != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "sensorMetrics", sensorMetrics));
        }

        if (sensorAlertProfileIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "sensorAlertProfileIds", sensorAlertProfileIds));
        }

        if (models != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "models", models));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationDevices_0ValidateBeforeCall(String organizationId, Integer perPage, String startingAfter, String endingBefore, String configurationUpdatedAfter, List<String> networkIds, List<String> productTypes, List<String> tags, String tagsFilterType, String name, String mac, String serial, String model, List<String> macs, List<String> serials, List<String> sensorMetrics, List<String> sensorAlertProfileIds, List<String> models, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationDevices_0(Async)");
        }

        return getOrganizationDevices_0Call(organizationId, perPage, startingAfter, endingBefore, configurationUpdatedAfter, networkIds, productTypes, tags, tagsFilterType, name, mac, serial, model, macs, serials, sensorMetrics, sensorAlertProfileIds, models, _callback);

    }

    /**
     * List the devices in an organization
     * List the devices in an organization
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param configurationUpdatedAfter Filter results by whether or not the device&#39;s configuration has been updated after the given timestamp (optional)
     * @param networkIds Optional parameter to filter devices by network. (optional)
     * @param productTypes Optional parameter to filter devices by product type. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, and sensor. (optional)
     * @param tags Optional parameter to filter devices by tags. (optional)
     * @param tagsFilterType Optional parameter of value &#39;withAnyTags&#39; or &#39;withAllTags&#39; to indicate whether to return networks which contain ANY or ALL of the included tags. If no type is included, &#39;withAnyTags&#39; will be selected. (optional)
     * @param name Optional parameter to filter devices by name. All returned devices will have a name that contains the search term or is an exact match. (optional)
     * @param mac Optional parameter to filter devices by MAC address. All returned devices will have a MAC address that contains the search term or is an exact match. (optional)
     * @param serial Optional parameter to filter devices by serial number. All returned devices will have a serial number that contains the search term or is an exact match. (optional)
     * @param model Optional parameter to filter devices by model. All returned devices will have a model that contains the search term or is an exact match. (optional)
     * @param macs Optional parameter to filter devices by one or more MAC addresses. All returned devices will have a MAC address that is an exact match. (optional)
     * @param serials Optional parameter to filter devices by one or more serial numbers. All returned devices will have a serial number that is an exact match. (optional)
     * @param sensorMetrics Optional parameter to filter devices by the metrics that they provide. Only applies to sensor devices. (optional)
     * @param sensorAlertProfileIds Optional parameter to filter devices by the alert profiles that are bound to them. Only applies to sensor devices. (optional)
     * @param models Optional parameter to filter devices by one or more models. All returned devices will have a model that is an exact match. (optional)
     * @return List&lt;GetOrganizationDevices200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public List<GetOrganizationDevices200ResponseInner> getOrganizationDevices_0(String organizationId, Integer perPage, String startingAfter, String endingBefore, String configurationUpdatedAfter, List<String> networkIds, List<String> productTypes, List<String> tags, String tagsFilterType, String name, String mac, String serial, String model, List<String> macs, List<String> serials, List<String> sensorMetrics, List<String> sensorAlertProfileIds, List<String> models) throws ApiException {
        ApiResponse<List<GetOrganizationDevices200ResponseInner>> localVarResp = getOrganizationDevices_0WithHttpInfo(organizationId, perPage, startingAfter, endingBefore, configurationUpdatedAfter, networkIds, productTypes, tags, tagsFilterType, name, mac, serial, model, macs, serials, sensorMetrics, sensorAlertProfileIds, models);
        return localVarResp.getData();
    }

    /**
     * List the devices in an organization
     * List the devices in an organization
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param configurationUpdatedAfter Filter results by whether or not the device&#39;s configuration has been updated after the given timestamp (optional)
     * @param networkIds Optional parameter to filter devices by network. (optional)
     * @param productTypes Optional parameter to filter devices by product type. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, and sensor. (optional)
     * @param tags Optional parameter to filter devices by tags. (optional)
     * @param tagsFilterType Optional parameter of value &#39;withAnyTags&#39; or &#39;withAllTags&#39; to indicate whether to return networks which contain ANY or ALL of the included tags. If no type is included, &#39;withAnyTags&#39; will be selected. (optional)
     * @param name Optional parameter to filter devices by name. All returned devices will have a name that contains the search term or is an exact match. (optional)
     * @param mac Optional parameter to filter devices by MAC address. All returned devices will have a MAC address that contains the search term or is an exact match. (optional)
     * @param serial Optional parameter to filter devices by serial number. All returned devices will have a serial number that contains the search term or is an exact match. (optional)
     * @param model Optional parameter to filter devices by model. All returned devices will have a model that contains the search term or is an exact match. (optional)
     * @param macs Optional parameter to filter devices by one or more MAC addresses. All returned devices will have a MAC address that is an exact match. (optional)
     * @param serials Optional parameter to filter devices by one or more serial numbers. All returned devices will have a serial number that is an exact match. (optional)
     * @param sensorMetrics Optional parameter to filter devices by the metrics that they provide. Only applies to sensor devices. (optional)
     * @param sensorAlertProfileIds Optional parameter to filter devices by the alert profiles that are bound to them. Only applies to sensor devices. (optional)
     * @param models Optional parameter to filter devices by one or more models. All returned devices will have a model that is an exact match. (optional)
     * @return ApiResponse&lt;List&lt;GetOrganizationDevices200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<GetOrganizationDevices200ResponseInner>> getOrganizationDevices_0WithHttpInfo(String organizationId, Integer perPage, String startingAfter, String endingBefore, String configurationUpdatedAfter, List<String> networkIds, List<String> productTypes, List<String> tags, String tagsFilterType, String name, String mac, String serial, String model, List<String> macs, List<String> serials, List<String> sensorMetrics, List<String> sensorAlertProfileIds, List<String> models) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationDevices_0ValidateBeforeCall(organizationId, perPage, startingAfter, endingBefore, configurationUpdatedAfter, networkIds, productTypes, tags, tagsFilterType, name, mac, serial, model, macs, serials, sensorMetrics, sensorAlertProfileIds, models, null);
        Type localVarReturnType = new TypeToken<List<GetOrganizationDevices200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the devices in an organization (asynchronously)
     * List the devices in an organization
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param configurationUpdatedAfter Filter results by whether or not the device&#39;s configuration has been updated after the given timestamp (optional)
     * @param networkIds Optional parameter to filter devices by network. (optional)
     * @param productTypes Optional parameter to filter devices by product type. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, and sensor. (optional)
     * @param tags Optional parameter to filter devices by tags. (optional)
     * @param tagsFilterType Optional parameter of value &#39;withAnyTags&#39; or &#39;withAllTags&#39; to indicate whether to return networks which contain ANY or ALL of the included tags. If no type is included, &#39;withAnyTags&#39; will be selected. (optional)
     * @param name Optional parameter to filter devices by name. All returned devices will have a name that contains the search term or is an exact match. (optional)
     * @param mac Optional parameter to filter devices by MAC address. All returned devices will have a MAC address that contains the search term or is an exact match. (optional)
     * @param serial Optional parameter to filter devices by serial number. All returned devices will have a serial number that contains the search term or is an exact match. (optional)
     * @param model Optional parameter to filter devices by model. All returned devices will have a model that contains the search term or is an exact match. (optional)
     * @param macs Optional parameter to filter devices by one or more MAC addresses. All returned devices will have a MAC address that is an exact match. (optional)
     * @param serials Optional parameter to filter devices by one or more serial numbers. All returned devices will have a serial number that is an exact match. (optional)
     * @param sensorMetrics Optional parameter to filter devices by the metrics that they provide. Only applies to sensor devices. (optional)
     * @param sensorAlertProfileIds Optional parameter to filter devices by the alert profiles that are bound to them. Only applies to sensor devices. (optional)
     * @param models Optional parameter to filter devices by one or more models. All returned devices will have a model that is an exact match. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationDevices_0Async(String organizationId, Integer perPage, String startingAfter, String endingBefore, String configurationUpdatedAfter, List<String> networkIds, List<String> productTypes, List<String> tags, String tagsFilterType, String name, String mac, String serial, String model, List<String> macs, List<String> serials, List<String> sensorMetrics, List<String> sensorAlertProfileIds, List<String> models, final ApiCallback<List<GetOrganizationDevices200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationDevices_0ValidateBeforeCall(organizationId, perPage, startingAfter, endingBefore, configurationUpdatedAfter, networkIds, productTypes, tags, tagsFilterType, name, mac, serial, model, macs, serials, sensorMetrics, sensorAlertProfileIds, models, _callback);
        Type localVarReturnType = new TypeToken<List<GetOrganizationDevices200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationEarlyAccessFeaturesOptIn_0
     * @param organizationId  (required)
     * @param optInId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationEarlyAccessFeaturesOptIn_0Call(String organizationId, String optInId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/earlyAccess/features/optIns/{optInId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "optInId" + "}", localVarApiClient.escapeString(optInId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationEarlyAccessFeaturesOptIn_0ValidateBeforeCall(String organizationId, String optInId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationEarlyAccessFeaturesOptIn_0(Async)");
        }

        // verify the required parameter 'optInId' is set
        if (optInId == null) {
            throw new ApiException("Missing the required parameter 'optInId' when calling getOrganizationEarlyAccessFeaturesOptIn_0(Async)");
        }

        return getOrganizationEarlyAccessFeaturesOptIn_0Call(organizationId, optInId, _callback);

    }

    /**
     * Show an early access feature opt-in for an organization
     * Show an early access feature opt-in for an organization
     * @param organizationId  (required)
     * @param optInId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getOrganizationEarlyAccessFeaturesOptIn_0(String organizationId, String optInId) throws ApiException {
        ApiResponse<Object> localVarResp = getOrganizationEarlyAccessFeaturesOptIn_0WithHttpInfo(organizationId, optInId);
        return localVarResp.getData();
    }

    /**
     * Show an early access feature opt-in for an organization
     * Show an early access feature opt-in for an organization
     * @param organizationId  (required)
     * @param optInId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getOrganizationEarlyAccessFeaturesOptIn_0WithHttpInfo(String organizationId, String optInId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationEarlyAccessFeaturesOptIn_0ValidateBeforeCall(organizationId, optInId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Show an early access feature opt-in for an organization (asynchronously)
     * Show an early access feature opt-in for an organization
     * @param organizationId  (required)
     * @param optInId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationEarlyAccessFeaturesOptIn_0Async(String organizationId, String optInId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationEarlyAccessFeaturesOptIn_0ValidateBeforeCall(organizationId, optInId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationEarlyAccessFeaturesOptIns_0
     * @param organizationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationEarlyAccessFeaturesOptIns_0Call(String organizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/earlyAccess/features/optIns"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationEarlyAccessFeaturesOptIns_0ValidateBeforeCall(String organizationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationEarlyAccessFeaturesOptIns_0(Async)");
        }

        return getOrganizationEarlyAccessFeaturesOptIns_0Call(organizationId, _callback);

    }

    /**
     * List the early access feature opt-ins for an organization
     * List the early access feature opt-ins for an organization
     * @param organizationId  (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getOrganizationEarlyAccessFeaturesOptIns_0(String organizationId) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getOrganizationEarlyAccessFeaturesOptIns_0WithHttpInfo(organizationId);
        return localVarResp.getData();
    }

    /**
     * List the early access feature opt-ins for an organization
     * List the early access feature opt-ins for an organization
     * @param organizationId  (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getOrganizationEarlyAccessFeaturesOptIns_0WithHttpInfo(String organizationId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationEarlyAccessFeaturesOptIns_0ValidateBeforeCall(organizationId, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the early access feature opt-ins for an organization (asynchronously)
     * List the early access feature opt-ins for an organization
     * @param organizationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationEarlyAccessFeaturesOptIns_0Async(String organizationId, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationEarlyAccessFeaturesOptIns_0ValidateBeforeCall(organizationId, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationEarlyAccessFeatures_0
     * @param organizationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationEarlyAccessFeatures_0Call(String organizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/earlyAccess/features"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationEarlyAccessFeatures_0ValidateBeforeCall(String organizationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationEarlyAccessFeatures_0(Async)");
        }

        return getOrganizationEarlyAccessFeatures_0Call(organizationId, _callback);

    }

    /**
     * List the available early access features for organization
     * List the available early access features for organization
     * @param organizationId  (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getOrganizationEarlyAccessFeatures_0(String organizationId) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getOrganizationEarlyAccessFeatures_0WithHttpInfo(organizationId);
        return localVarResp.getData();
    }

    /**
     * List the available early access features for organization
     * List the available early access features for organization
     * @param organizationId  (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getOrganizationEarlyAccessFeatures_0WithHttpInfo(String organizationId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationEarlyAccessFeatures_0ValidateBeforeCall(organizationId, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the available early access features for organization (asynchronously)
     * List the available early access features for organization
     * @param organizationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationEarlyAccessFeatures_0Async(String organizationId, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationEarlyAccessFeatures_0ValidateBeforeCall(organizationId, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationFirmwareUpgradesByDevice_0
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 50. Default is 50. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param networkIds Optional parameter to filter by network (optional)
     * @param serials Optional parameter to filter by serial number.  All returned devices will have a serial number that is an exact match. (optional)
     * @param macs Optional parameter to filter by one or more MAC addresses belonging to devices. All devices returned belong to MAC addresses that are an exact match. (optional)
     * @param firmwareUpgradeIds Optional parameter to filter by firmware upgrade ids. (optional)
     * @param firmwareUpgradeBatchIds Optional parameter to filter by firmware upgrade batch ids. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationFirmwareUpgradesByDevice_0Call(String organizationId, Integer perPage, String startingAfter, String endingBefore, List<String> networkIds, List<String> serials, List<String> macs, List<String> firmwareUpgradeIds, List<String> firmwareUpgradeBatchIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/firmware/upgrades/byDevice"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingAfter", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endingBefore", endingBefore));
        }

        if (networkIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "networkIds", networkIds));
        }

        if (serials != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "serials", serials));
        }

        if (macs != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "macs", macs));
        }

        if (firmwareUpgradeIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "firmwareUpgradeIds", firmwareUpgradeIds));
        }

        if (firmwareUpgradeBatchIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "firmwareUpgradeBatchIds", firmwareUpgradeBatchIds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationFirmwareUpgradesByDevice_0ValidateBeforeCall(String organizationId, Integer perPage, String startingAfter, String endingBefore, List<String> networkIds, List<String> serials, List<String> macs, List<String> firmwareUpgradeIds, List<String> firmwareUpgradeBatchIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationFirmwareUpgradesByDevice_0(Async)");
        }

        return getOrganizationFirmwareUpgradesByDevice_0Call(organizationId, perPage, startingAfter, endingBefore, networkIds, serials, macs, firmwareUpgradeIds, firmwareUpgradeBatchIds, _callback);

    }

    /**
     * Get firmware upgrade status for the filtered devices
     * Get firmware upgrade status for the filtered devices
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 50. Default is 50. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param networkIds Optional parameter to filter by network (optional)
     * @param serials Optional parameter to filter by serial number.  All returned devices will have a serial number that is an exact match. (optional)
     * @param macs Optional parameter to filter by one or more MAC addresses belonging to devices. All devices returned belong to MAC addresses that are an exact match. (optional)
     * @param firmwareUpgradeIds Optional parameter to filter by firmware upgrade ids. (optional)
     * @param firmwareUpgradeBatchIds Optional parameter to filter by firmware upgrade batch ids. (optional)
     * @return List&lt;GetOrganizationFirmwareUpgradesByDevice200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public List<GetOrganizationFirmwareUpgradesByDevice200ResponseInner> getOrganizationFirmwareUpgradesByDevice_0(String organizationId, Integer perPage, String startingAfter, String endingBefore, List<String> networkIds, List<String> serials, List<String> macs, List<String> firmwareUpgradeIds, List<String> firmwareUpgradeBatchIds) throws ApiException {
        ApiResponse<List<GetOrganizationFirmwareUpgradesByDevice200ResponseInner>> localVarResp = getOrganizationFirmwareUpgradesByDevice_0WithHttpInfo(organizationId, perPage, startingAfter, endingBefore, networkIds, serials, macs, firmwareUpgradeIds, firmwareUpgradeBatchIds);
        return localVarResp.getData();
    }

    /**
     * Get firmware upgrade status for the filtered devices
     * Get firmware upgrade status for the filtered devices
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 50. Default is 50. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param networkIds Optional parameter to filter by network (optional)
     * @param serials Optional parameter to filter by serial number.  All returned devices will have a serial number that is an exact match. (optional)
     * @param macs Optional parameter to filter by one or more MAC addresses belonging to devices. All devices returned belong to MAC addresses that are an exact match. (optional)
     * @param firmwareUpgradeIds Optional parameter to filter by firmware upgrade ids. (optional)
     * @param firmwareUpgradeBatchIds Optional parameter to filter by firmware upgrade batch ids. (optional)
     * @return ApiResponse&lt;List&lt;GetOrganizationFirmwareUpgradesByDevice200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<GetOrganizationFirmwareUpgradesByDevice200ResponseInner>> getOrganizationFirmwareUpgradesByDevice_0WithHttpInfo(String organizationId, Integer perPage, String startingAfter, String endingBefore, List<String> networkIds, List<String> serials, List<String> macs, List<String> firmwareUpgradeIds, List<String> firmwareUpgradeBatchIds) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationFirmwareUpgradesByDevice_0ValidateBeforeCall(organizationId, perPage, startingAfter, endingBefore, networkIds, serials, macs, firmwareUpgradeIds, firmwareUpgradeBatchIds, null);
        Type localVarReturnType = new TypeToken<List<GetOrganizationFirmwareUpgradesByDevice200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get firmware upgrade status for the filtered devices (asynchronously)
     * Get firmware upgrade status for the filtered devices
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 50. Default is 50. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param networkIds Optional parameter to filter by network (optional)
     * @param serials Optional parameter to filter by serial number.  All returned devices will have a serial number that is an exact match. (optional)
     * @param macs Optional parameter to filter by one or more MAC addresses belonging to devices. All devices returned belong to MAC addresses that are an exact match. (optional)
     * @param firmwareUpgradeIds Optional parameter to filter by firmware upgrade ids. (optional)
     * @param firmwareUpgradeBatchIds Optional parameter to filter by firmware upgrade batch ids. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationFirmwareUpgradesByDevice_0Async(String organizationId, Integer perPage, String startingAfter, String endingBefore, List<String> networkIds, List<String> serials, List<String> macs, List<String> firmwareUpgradeIds, List<String> firmwareUpgradeBatchIds, final ApiCallback<List<GetOrganizationFirmwareUpgradesByDevice200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationFirmwareUpgradesByDevice_0ValidateBeforeCall(organizationId, perPage, startingAfter, endingBefore, networkIds, serials, macs, firmwareUpgradeIds, firmwareUpgradeBatchIds, _callback);
        Type localVarReturnType = new TypeToken<List<GetOrganizationFirmwareUpgradesByDevice200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationFirmwareUpgrades_0
     * @param organizationId  (required)
     * @param status The status of an upgrade  (optional)
     * @param productType The product type in a given upgrade ID (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationFirmwareUpgrades_0Call(String organizationId, List<String> status, List<String> productType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/firmware/upgrades"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "status", status));
        }

        if (productType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "productType", productType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationFirmwareUpgrades_0ValidateBeforeCall(String organizationId, List<String> status, List<String> productType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationFirmwareUpgrades_0(Async)");
        }

        return getOrganizationFirmwareUpgrades_0Call(organizationId, status, productType, _callback);

    }

    /**
     * Get firmware upgrade information for an organization
     * Get firmware upgrade information for an organization
     * @param organizationId  (required)
     * @param status The status of an upgrade  (optional)
     * @param productType The product type in a given upgrade ID (optional)
     * @return List&lt;GetOrganizationFirmwareUpgrades200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetOrganizationFirmwareUpgrades200ResponseInner> getOrganizationFirmwareUpgrades_0(String organizationId, List<String> status, List<String> productType) throws ApiException {
        ApiResponse<List<GetOrganizationFirmwareUpgrades200ResponseInner>> localVarResp = getOrganizationFirmwareUpgrades_0WithHttpInfo(organizationId, status, productType);
        return localVarResp.getData();
    }

    /**
     * Get firmware upgrade information for an organization
     * Get firmware upgrade information for an organization
     * @param organizationId  (required)
     * @param status The status of an upgrade  (optional)
     * @param productType The product type in a given upgrade ID (optional)
     * @return ApiResponse&lt;List&lt;GetOrganizationFirmwareUpgrades200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetOrganizationFirmwareUpgrades200ResponseInner>> getOrganizationFirmwareUpgrades_0WithHttpInfo(String organizationId, List<String> status, List<String> productType) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationFirmwareUpgrades_0ValidateBeforeCall(organizationId, status, productType, null);
        Type localVarReturnType = new TypeToken<List<GetOrganizationFirmwareUpgrades200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get firmware upgrade information for an organization (asynchronously)
     * Get firmware upgrade information for an organization
     * @param organizationId  (required)
     * @param status The status of an upgrade  (optional)
     * @param productType The product type in a given upgrade ID (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationFirmwareUpgrades_0Async(String organizationId, List<String> status, List<String> productType, final ApiCallback<List<GetOrganizationFirmwareUpgrades200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationFirmwareUpgrades_0ValidateBeforeCall(organizationId, status, productType, _callback);
        Type localVarReturnType = new TypeToken<List<GetOrganizationFirmwareUpgrades200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationInsightApplications_0
     * @param organizationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationInsightApplications_0Call(String organizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/insight/applications"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationInsightApplications_0ValidateBeforeCall(String organizationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationInsightApplications_0(Async)");
        }

        return getOrganizationInsightApplications_0Call(organizationId, _callback);

    }

    /**
     * List all Insight tracked applications
     * List all Insight tracked applications
     * @param organizationId  (required)
     * @return List&lt;GetOrganizationInsightApplications200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetOrganizationInsightApplications200ResponseInner> getOrganizationInsightApplications_0(String organizationId) throws ApiException {
        ApiResponse<List<GetOrganizationInsightApplications200ResponseInner>> localVarResp = getOrganizationInsightApplications_0WithHttpInfo(organizationId);
        return localVarResp.getData();
    }

    /**
     * List all Insight tracked applications
     * List all Insight tracked applications
     * @param organizationId  (required)
     * @return ApiResponse&lt;List&lt;GetOrganizationInsightApplications200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetOrganizationInsightApplications200ResponseInner>> getOrganizationInsightApplications_0WithHttpInfo(String organizationId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationInsightApplications_0ValidateBeforeCall(organizationId, null);
        Type localVarReturnType = new TypeToken<List<GetOrganizationInsightApplications200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all Insight tracked applications (asynchronously)
     * List all Insight tracked applications
     * @param organizationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationInsightApplications_0Async(String organizationId, final ApiCallback<List<GetOrganizationInsightApplications200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationInsightApplications_0ValidateBeforeCall(organizationId, _callback);
        Type localVarReturnType = new TypeToken<List<GetOrganizationInsightApplications200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationInsightMonitoredMediaServer_0
     * @param organizationId  (required)
     * @param monitoredMediaServerId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationInsightMonitoredMediaServer_0Call(String organizationId, String monitoredMediaServerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/insight/monitoredMediaServers/{monitoredMediaServerId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "monitoredMediaServerId" + "}", localVarApiClient.escapeString(monitoredMediaServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationInsightMonitoredMediaServer_0ValidateBeforeCall(String organizationId, String monitoredMediaServerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationInsightMonitoredMediaServer_0(Async)");
        }

        // verify the required parameter 'monitoredMediaServerId' is set
        if (monitoredMediaServerId == null) {
            throw new ApiException("Missing the required parameter 'monitoredMediaServerId' when calling getOrganizationInsightMonitoredMediaServer_0(Async)");
        }

        return getOrganizationInsightMonitoredMediaServer_0Call(organizationId, monitoredMediaServerId, _callback);

    }

    /**
     * Return a monitored media server for this organization
     * Return a monitored media server for this organization. Only valid for organizations with Meraki Insight.
     * @param organizationId  (required)
     * @param monitoredMediaServerId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getOrganizationInsightMonitoredMediaServer_0(String organizationId, String monitoredMediaServerId) throws ApiException {
        ApiResponse<Object> localVarResp = getOrganizationInsightMonitoredMediaServer_0WithHttpInfo(organizationId, monitoredMediaServerId);
        return localVarResp.getData();
    }

    /**
     * Return a monitored media server for this organization
     * Return a monitored media server for this organization. Only valid for organizations with Meraki Insight.
     * @param organizationId  (required)
     * @param monitoredMediaServerId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getOrganizationInsightMonitoredMediaServer_0WithHttpInfo(String organizationId, String monitoredMediaServerId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationInsightMonitoredMediaServer_0ValidateBeforeCall(organizationId, monitoredMediaServerId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a monitored media server for this organization (asynchronously)
     * Return a monitored media server for this organization. Only valid for organizations with Meraki Insight.
     * @param organizationId  (required)
     * @param monitoredMediaServerId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationInsightMonitoredMediaServer_0Async(String organizationId, String monitoredMediaServerId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationInsightMonitoredMediaServer_0ValidateBeforeCall(organizationId, monitoredMediaServerId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationInsightMonitoredMediaServers_0
     * @param organizationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationInsightMonitoredMediaServers_0Call(String organizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/insight/monitoredMediaServers"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationInsightMonitoredMediaServers_0ValidateBeforeCall(String organizationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationInsightMonitoredMediaServers_0(Async)");
        }

        return getOrganizationInsightMonitoredMediaServers_0Call(organizationId, _callback);

    }

    /**
     * List the monitored media servers for this organization
     * List the monitored media servers for this organization. Only valid for organizations with Meraki Insight.
     * @param organizationId  (required)
     * @return List&lt;GetOrganizationInsightMonitoredMediaServers200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetOrganizationInsightMonitoredMediaServers200ResponseInner> getOrganizationInsightMonitoredMediaServers_0(String organizationId) throws ApiException {
        ApiResponse<List<GetOrganizationInsightMonitoredMediaServers200ResponseInner>> localVarResp = getOrganizationInsightMonitoredMediaServers_0WithHttpInfo(organizationId);
        return localVarResp.getData();
    }

    /**
     * List the monitored media servers for this organization
     * List the monitored media servers for this organization. Only valid for organizations with Meraki Insight.
     * @param organizationId  (required)
     * @return ApiResponse&lt;List&lt;GetOrganizationInsightMonitoredMediaServers200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetOrganizationInsightMonitoredMediaServers200ResponseInner>> getOrganizationInsightMonitoredMediaServers_0WithHttpInfo(String organizationId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationInsightMonitoredMediaServers_0ValidateBeforeCall(organizationId, null);
        Type localVarReturnType = new TypeToken<List<GetOrganizationInsightMonitoredMediaServers200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the monitored media servers for this organization (asynchronously)
     * List the monitored media servers for this organization. Only valid for organizations with Meraki Insight.
     * @param organizationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationInsightMonitoredMediaServers_0Async(String organizationId, final ApiCallback<List<GetOrganizationInsightMonitoredMediaServers200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationInsightMonitoredMediaServers_0ValidateBeforeCall(organizationId, _callback);
        Type localVarReturnType = new TypeToken<List<GetOrganizationInsightMonitoredMediaServers200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationInventoryDevice_0
     * @param organizationId  (required)
     * @param serial  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationInventoryDevice_0Call(String organizationId, String serial, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/inventory/devices/{serial}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationInventoryDevice_0ValidateBeforeCall(String organizationId, String serial, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationInventoryDevice_0(Async)");
        }

        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling getOrganizationInventoryDevice_0(Async)");
        }

        return getOrganizationInventoryDevice_0Call(organizationId, serial, _callback);

    }

    /**
     * Return a single device from the inventory of an organization
     * Return a single device from the inventory of an organization
     * @param organizationId  (required)
     * @param serial  (required)
     * @return GetOrganizationInventoryDevices200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetOrganizationInventoryDevices200ResponseInner getOrganizationInventoryDevice_0(String organizationId, String serial) throws ApiException {
        ApiResponse<GetOrganizationInventoryDevices200ResponseInner> localVarResp = getOrganizationInventoryDevice_0WithHttpInfo(organizationId, serial);
        return localVarResp.getData();
    }

    /**
     * Return a single device from the inventory of an organization
     * Return a single device from the inventory of an organization
     * @param organizationId  (required)
     * @param serial  (required)
     * @return ApiResponse&lt;GetOrganizationInventoryDevices200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOrganizationInventoryDevices200ResponseInner> getOrganizationInventoryDevice_0WithHttpInfo(String organizationId, String serial) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationInventoryDevice_0ValidateBeforeCall(organizationId, serial, null);
        Type localVarReturnType = new TypeToken<GetOrganizationInventoryDevices200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a single device from the inventory of an organization (asynchronously)
     * Return a single device from the inventory of an organization
     * @param organizationId  (required)
     * @param serial  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationInventoryDevice_0Async(String organizationId, String serial, final ApiCallback<GetOrganizationInventoryDevices200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationInventoryDevice_0ValidateBeforeCall(organizationId, serial, _callback);
        Type localVarReturnType = new TypeToken<GetOrganizationInventoryDevices200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationInventoryDevices_0
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param usedState Filter results by used or unused inventory. Accepted values are &#39;used&#39; or &#39;unused&#39;. (optional)
     * @param search Search for devices in inventory based on serial number, mac address, or model. (optional)
     * @param macs Search for devices in inventory based on mac addresses. (optional)
     * @param networkIds Search for devices in inventory based on network ids. (optional)
     * @param serials Search for devices in inventory based on serials. (optional)
     * @param models Search for devices in inventory based on model. (optional)
     * @param orderNumbers Search for devices in inventory based on order numbers. (optional)
     * @param tags Filter devices by tags. The filtering is case-sensitive. If tags are included, &#39;tagsFilterType&#39; should also be included (see below). (optional)
     * @param tagsFilterType To use with &#39;tags&#39; parameter, to filter devices which contain ANY or ALL given tags. Accepted values are &#39;withAnyTags&#39; or &#39;withAllTags&#39;, default is &#39;withAnyTags&#39;. (optional)
     * @param productTypes Filter devices by product type. Accepted values are appliance, camera, cellularGateway, sensor, switch, systemsManager, and wireless. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationInventoryDevices_0Call(String organizationId, Integer perPage, String startingAfter, String endingBefore, String usedState, String search, List<String> macs, List<String> networkIds, List<String> serials, List<String> models, List<String> orderNumbers, List<String> tags, String tagsFilterType, List<String> productTypes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/inventory/devices"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingAfter", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endingBefore", endingBefore));
        }

        if (usedState != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("usedState", usedState));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (macs != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "macs", macs));
        }

        if (networkIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "networkIds", networkIds));
        }

        if (serials != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "serials", serials));
        }

        if (models != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "models", models));
        }

        if (orderNumbers != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "orderNumbers", orderNumbers));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tags", tags));
        }

        if (tagsFilterType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tagsFilterType", tagsFilterType));
        }

        if (productTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "productTypes", productTypes));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationInventoryDevices_0ValidateBeforeCall(String organizationId, Integer perPage, String startingAfter, String endingBefore, String usedState, String search, List<String> macs, List<String> networkIds, List<String> serials, List<String> models, List<String> orderNumbers, List<String> tags, String tagsFilterType, List<String> productTypes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationInventoryDevices_0(Async)");
        }

        return getOrganizationInventoryDevices_0Call(organizationId, perPage, startingAfter, endingBefore, usedState, search, macs, networkIds, serials, models, orderNumbers, tags, tagsFilterType, productTypes, _callback);

    }

    /**
     * Return the device inventory for an organization
     * Return the device inventory for an organization
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param usedState Filter results by used or unused inventory. Accepted values are &#39;used&#39; or &#39;unused&#39;. (optional)
     * @param search Search for devices in inventory based on serial number, mac address, or model. (optional)
     * @param macs Search for devices in inventory based on mac addresses. (optional)
     * @param networkIds Search for devices in inventory based on network ids. (optional)
     * @param serials Search for devices in inventory based on serials. (optional)
     * @param models Search for devices in inventory based on model. (optional)
     * @param orderNumbers Search for devices in inventory based on order numbers. (optional)
     * @param tags Filter devices by tags. The filtering is case-sensitive. If tags are included, &#39;tagsFilterType&#39; should also be included (see below). (optional)
     * @param tagsFilterType To use with &#39;tags&#39; parameter, to filter devices which contain ANY or ALL given tags. Accepted values are &#39;withAnyTags&#39; or &#39;withAllTags&#39;, default is &#39;withAnyTags&#39;. (optional)
     * @param productTypes Filter devices by product type. Accepted values are appliance, camera, cellularGateway, sensor, switch, systemsManager, and wireless. (optional)
     * @return List&lt;GetOrganizationInventoryDevices200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public List<GetOrganizationInventoryDevices200ResponseInner> getOrganizationInventoryDevices_0(String organizationId, Integer perPage, String startingAfter, String endingBefore, String usedState, String search, List<String> macs, List<String> networkIds, List<String> serials, List<String> models, List<String> orderNumbers, List<String> tags, String tagsFilterType, List<String> productTypes) throws ApiException {
        ApiResponse<List<GetOrganizationInventoryDevices200ResponseInner>> localVarResp = getOrganizationInventoryDevices_0WithHttpInfo(organizationId, perPage, startingAfter, endingBefore, usedState, search, macs, networkIds, serials, models, orderNumbers, tags, tagsFilterType, productTypes);
        return localVarResp.getData();
    }

    /**
     * Return the device inventory for an organization
     * Return the device inventory for an organization
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param usedState Filter results by used or unused inventory. Accepted values are &#39;used&#39; or &#39;unused&#39;. (optional)
     * @param search Search for devices in inventory based on serial number, mac address, or model. (optional)
     * @param macs Search for devices in inventory based on mac addresses. (optional)
     * @param networkIds Search for devices in inventory based on network ids. (optional)
     * @param serials Search for devices in inventory based on serials. (optional)
     * @param models Search for devices in inventory based on model. (optional)
     * @param orderNumbers Search for devices in inventory based on order numbers. (optional)
     * @param tags Filter devices by tags. The filtering is case-sensitive. If tags are included, &#39;tagsFilterType&#39; should also be included (see below). (optional)
     * @param tagsFilterType To use with &#39;tags&#39; parameter, to filter devices which contain ANY or ALL given tags. Accepted values are &#39;withAnyTags&#39; or &#39;withAllTags&#39;, default is &#39;withAnyTags&#39;. (optional)
     * @param productTypes Filter devices by product type. Accepted values are appliance, camera, cellularGateway, sensor, switch, systemsManager, and wireless. (optional)
     * @return ApiResponse&lt;List&lt;GetOrganizationInventoryDevices200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<GetOrganizationInventoryDevices200ResponseInner>> getOrganizationInventoryDevices_0WithHttpInfo(String organizationId, Integer perPage, String startingAfter, String endingBefore, String usedState, String search, List<String> macs, List<String> networkIds, List<String> serials, List<String> models, List<String> orderNumbers, List<String> tags, String tagsFilterType, List<String> productTypes) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationInventoryDevices_0ValidateBeforeCall(organizationId, perPage, startingAfter, endingBefore, usedState, search, macs, networkIds, serials, models, orderNumbers, tags, tagsFilterType, productTypes, null);
        Type localVarReturnType = new TypeToken<List<GetOrganizationInventoryDevices200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the device inventory for an organization (asynchronously)
     * Return the device inventory for an organization
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param usedState Filter results by used or unused inventory. Accepted values are &#39;used&#39; or &#39;unused&#39;. (optional)
     * @param search Search for devices in inventory based on serial number, mac address, or model. (optional)
     * @param macs Search for devices in inventory based on mac addresses. (optional)
     * @param networkIds Search for devices in inventory based on network ids. (optional)
     * @param serials Search for devices in inventory based on serials. (optional)
     * @param models Search for devices in inventory based on model. (optional)
     * @param orderNumbers Search for devices in inventory based on order numbers. (optional)
     * @param tags Filter devices by tags. The filtering is case-sensitive. If tags are included, &#39;tagsFilterType&#39; should also be included (see below). (optional)
     * @param tagsFilterType To use with &#39;tags&#39; parameter, to filter devices which contain ANY or ALL given tags. Accepted values are &#39;withAnyTags&#39; or &#39;withAllTags&#39;, default is &#39;withAnyTags&#39;. (optional)
     * @param productTypes Filter devices by product type. Accepted values are appliance, camera, cellularGateway, sensor, switch, systemsManager, and wireless. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationInventoryDevices_0Async(String organizationId, Integer perPage, String startingAfter, String endingBefore, String usedState, String search, List<String> macs, List<String> networkIds, List<String> serials, List<String> models, List<String> orderNumbers, List<String> tags, String tagsFilterType, List<String> productTypes, final ApiCallback<List<GetOrganizationInventoryDevices200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationInventoryDevices_0ValidateBeforeCall(organizationId, perPage, startingAfter, endingBefore, usedState, search, macs, networkIds, serials, models, orderNumbers, tags, tagsFilterType, productTypes, _callback);
        Type localVarReturnType = new TypeToken<List<GetOrganizationInventoryDevices200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationInventoryOnboardingCloudMonitoringImports_0
     * @param organizationId  (required)
     * @param importIds import ids from an imports (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationInventoryOnboardingCloudMonitoringImports_0Call(String organizationId, List<String> importIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/imports"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (importIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "importIds", importIds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationInventoryOnboardingCloudMonitoringImports_0ValidateBeforeCall(String organizationId, List<String> importIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationInventoryOnboardingCloudMonitoringImports_0(Async)");
        }

        // verify the required parameter 'importIds' is set
        if (importIds == null) {
            throw new ApiException("Missing the required parameter 'importIds' when calling getOrganizationInventoryOnboardingCloudMonitoringImports_0(Async)");
        }

        return getOrganizationInventoryOnboardingCloudMonitoringImports_0Call(organizationId, importIds, _callback);

    }

    /**
     * Check the status of a committed Import operation
     * Check the status of a committed Import operation
     * @param organizationId  (required)
     * @param importIds import ids from an imports (required)
     * @return List&lt;GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner> getOrganizationInventoryOnboardingCloudMonitoringImports_0(String organizationId, List<String> importIds) throws ApiException {
        ApiResponse<List<GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner>> localVarResp = getOrganizationInventoryOnboardingCloudMonitoringImports_0WithHttpInfo(organizationId, importIds);
        return localVarResp.getData();
    }

    /**
     * Check the status of a committed Import operation
     * Check the status of a committed Import operation
     * @param organizationId  (required)
     * @param importIds import ids from an imports (required)
     * @return ApiResponse&lt;List&lt;GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner>> getOrganizationInventoryOnboardingCloudMonitoringImports_0WithHttpInfo(String organizationId, List<String> importIds) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationInventoryOnboardingCloudMonitoringImports_0ValidateBeforeCall(organizationId, importIds, null);
        Type localVarReturnType = new TypeToken<List<GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check the status of a committed Import operation (asynchronously)
     * Check the status of a committed Import operation
     * @param organizationId  (required)
     * @param importIds import ids from an imports (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationInventoryOnboardingCloudMonitoringImports_0Async(String organizationId, List<String> importIds, final ApiCallback<List<GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationInventoryOnboardingCloudMonitoringImports_0ValidateBeforeCall(organizationId, importIds, _callback);
        Type localVarReturnType = new TypeToken<List<GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationInventoryOnboardingCloudMonitoringNetworks_0
     * @param organizationId  (required)
     * @param deviceType Device Type switch or wireless controller (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 100000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationInventoryOnboardingCloudMonitoringNetworks_0Call(String organizationId, String deviceType, Integer perPage, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/networks"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deviceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deviceType", deviceType));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingAfter", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endingBefore", endingBefore));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationInventoryOnboardingCloudMonitoringNetworks_0ValidateBeforeCall(String organizationId, String deviceType, Integer perPage, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationInventoryOnboardingCloudMonitoringNetworks_0(Async)");
        }

        // verify the required parameter 'deviceType' is set
        if (deviceType == null) {
            throw new ApiException("Missing the required parameter 'deviceType' when calling getOrganizationInventoryOnboardingCloudMonitoringNetworks_0(Async)");
        }

        return getOrganizationInventoryOnboardingCloudMonitoringNetworks_0Call(organizationId, deviceType, perPage, startingAfter, endingBefore, _callback);

    }

    /**
     * Returns list of networks eligible for adding cloud monitored device
     * Returns list of networks eligible for adding cloud monitored device
     * @param organizationId  (required)
     * @param deviceType Device Type switch or wireless controller (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 100000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @return List&lt;GetNetwork200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public List<GetNetwork200Response> getOrganizationInventoryOnboardingCloudMonitoringNetworks_0(String organizationId, String deviceType, Integer perPage, String startingAfter, String endingBefore) throws ApiException {
        ApiResponse<List<GetNetwork200Response>> localVarResp = getOrganizationInventoryOnboardingCloudMonitoringNetworks_0WithHttpInfo(organizationId, deviceType, perPage, startingAfter, endingBefore);
        return localVarResp.getData();
    }

    /**
     * Returns list of networks eligible for adding cloud monitored device
     * Returns list of networks eligible for adding cloud monitored device
     * @param organizationId  (required)
     * @param deviceType Device Type switch or wireless controller (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 100000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @return ApiResponse&lt;List&lt;GetNetwork200Response&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetwork200Response>> getOrganizationInventoryOnboardingCloudMonitoringNetworks_0WithHttpInfo(String organizationId, String deviceType, Integer perPage, String startingAfter, String endingBefore) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationInventoryOnboardingCloudMonitoringNetworks_0ValidateBeforeCall(organizationId, deviceType, perPage, startingAfter, endingBefore, null);
        Type localVarReturnType = new TypeToken<List<GetNetwork200Response>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns list of networks eligible for adding cloud monitored device (asynchronously)
     * Returns list of networks eligible for adding cloud monitored device
     * @param organizationId  (required)
     * @param deviceType Device Type switch or wireless controller (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 100000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationInventoryOnboardingCloudMonitoringNetworks_0Async(String organizationId, String deviceType, Integer perPage, String startingAfter, String endingBefore, final ApiCallback<List<GetNetwork200Response>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationInventoryOnboardingCloudMonitoringNetworks_0ValidateBeforeCall(organizationId, deviceType, perPage, startingAfter, endingBefore, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetwork200Response>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationLicense_0
     * @param organizationId  (required)
     * @param licenseId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationLicense_0Call(String organizationId, String licenseId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/licenses/{licenseId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "licenseId" + "}", localVarApiClient.escapeString(licenseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationLicense_0ValidateBeforeCall(String organizationId, String licenseId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationLicense_0(Async)");
        }

        // verify the required parameter 'licenseId' is set
        if (licenseId == null) {
            throw new ApiException("Missing the required parameter 'licenseId' when calling getOrganizationLicense_0(Async)");
        }

        return getOrganizationLicense_0Call(organizationId, licenseId, _callback);

    }

    /**
     * Display a license
     * Display a license
     * @param organizationId  (required)
     * @param licenseId  (required)
     * @return GetOrganizationLicenses200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetOrganizationLicenses200ResponseInner getOrganizationLicense_0(String organizationId, String licenseId) throws ApiException {
        ApiResponse<GetOrganizationLicenses200ResponseInner> localVarResp = getOrganizationLicense_0WithHttpInfo(organizationId, licenseId);
        return localVarResp.getData();
    }

    /**
     * Display a license
     * Display a license
     * @param organizationId  (required)
     * @param licenseId  (required)
     * @return ApiResponse&lt;GetOrganizationLicenses200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOrganizationLicenses200ResponseInner> getOrganizationLicense_0WithHttpInfo(String organizationId, String licenseId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationLicense_0ValidateBeforeCall(organizationId, licenseId, null);
        Type localVarReturnType = new TypeToken<GetOrganizationLicenses200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Display a license (asynchronously)
     * Display a license
     * @param organizationId  (required)
     * @param licenseId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationLicense_0Async(String organizationId, String licenseId, final ApiCallback<GetOrganizationLicenses200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationLicense_0ValidateBeforeCall(organizationId, licenseId, _callback);
        Type localVarReturnType = new TypeToken<GetOrganizationLicenses200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationLicenses_0
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param deviceSerial Filter the licenses to those assigned to a particular device. Returned in the same order that they are queued to the device. (optional)
     * @param networkId Filter the licenses to those assigned in a particular network (optional)
     * @param state Filter the licenses to those in a particular state. Can be one of &#39;active&#39;, &#39;expired&#39;, &#39;expiring&#39;, &#39;recentlyQueued&#39;, &#39;unused&#39; or &#39;unusedActive&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationLicenses_0Call(String organizationId, Integer perPage, String startingAfter, String endingBefore, String deviceSerial, String networkId, String state, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/licenses"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingAfter", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endingBefore", endingBefore));
        }

        if (deviceSerial != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deviceSerial", deviceSerial));
        }

        if (networkId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("networkId", networkId));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationLicenses_0ValidateBeforeCall(String organizationId, Integer perPage, String startingAfter, String endingBefore, String deviceSerial, String networkId, String state, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationLicenses_0(Async)");
        }

        return getOrganizationLicenses_0Call(organizationId, perPage, startingAfter, endingBefore, deviceSerial, networkId, state, _callback);

    }

    /**
     * List the licenses for an organization
     * List the licenses for an organization
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param deviceSerial Filter the licenses to those assigned to a particular device. Returned in the same order that they are queued to the device. (optional)
     * @param networkId Filter the licenses to those assigned in a particular network (optional)
     * @param state Filter the licenses to those in a particular state. Can be one of &#39;active&#39;, &#39;expired&#39;, &#39;expiring&#39;, &#39;recentlyQueued&#39;, &#39;unused&#39; or &#39;unusedActive&#39; (optional)
     * @return List&lt;GetOrganizationLicenses200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public List<GetOrganizationLicenses200ResponseInner> getOrganizationLicenses_0(String organizationId, Integer perPage, String startingAfter, String endingBefore, String deviceSerial, String networkId, String state) throws ApiException {
        ApiResponse<List<GetOrganizationLicenses200ResponseInner>> localVarResp = getOrganizationLicenses_0WithHttpInfo(organizationId, perPage, startingAfter, endingBefore, deviceSerial, networkId, state);
        return localVarResp.getData();
    }

    /**
     * List the licenses for an organization
     * List the licenses for an organization
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param deviceSerial Filter the licenses to those assigned to a particular device. Returned in the same order that they are queued to the device. (optional)
     * @param networkId Filter the licenses to those assigned in a particular network (optional)
     * @param state Filter the licenses to those in a particular state. Can be one of &#39;active&#39;, &#39;expired&#39;, &#39;expiring&#39;, &#39;recentlyQueued&#39;, &#39;unused&#39; or &#39;unusedActive&#39; (optional)
     * @return ApiResponse&lt;List&lt;GetOrganizationLicenses200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<GetOrganizationLicenses200ResponseInner>> getOrganizationLicenses_0WithHttpInfo(String organizationId, Integer perPage, String startingAfter, String endingBefore, String deviceSerial, String networkId, String state) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationLicenses_0ValidateBeforeCall(organizationId, perPage, startingAfter, endingBefore, deviceSerial, networkId, state, null);
        Type localVarReturnType = new TypeToken<List<GetOrganizationLicenses200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the licenses for an organization (asynchronously)
     * List the licenses for an organization
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param deviceSerial Filter the licenses to those assigned to a particular device. Returned in the same order that they are queued to the device. (optional)
     * @param networkId Filter the licenses to those assigned in a particular network (optional)
     * @param state Filter the licenses to those in a particular state. Can be one of &#39;active&#39;, &#39;expired&#39;, &#39;expiring&#39;, &#39;recentlyQueued&#39;, &#39;unused&#39; or &#39;unusedActive&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationLicenses_0Async(String organizationId, Integer perPage, String startingAfter, String endingBefore, String deviceSerial, String networkId, String state, final ApiCallback<List<GetOrganizationLicenses200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationLicenses_0ValidateBeforeCall(organizationId, perPage, startingAfter, endingBefore, deviceSerial, networkId, state, _callback);
        Type localVarReturnType = new TypeToken<List<GetOrganizationLicenses200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationLicensingCotermLicenses_0
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param invalidated Filter for licenses that are invalidated (optional)
     * @param expired Filter for licenses that are expired (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationLicensingCotermLicenses_0Call(String organizationId, Integer perPage, String startingAfter, String endingBefore, Boolean invalidated, Boolean expired, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/licensing/coterm/licenses"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingAfter", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endingBefore", endingBefore));
        }

        if (invalidated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("invalidated", invalidated));
        }

        if (expired != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expired", expired));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationLicensingCotermLicenses_0ValidateBeforeCall(String organizationId, Integer perPage, String startingAfter, String endingBefore, Boolean invalidated, Boolean expired, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationLicensingCotermLicenses_0(Async)");
        }

        return getOrganizationLicensingCotermLicenses_0Call(organizationId, perPage, startingAfter, endingBefore, invalidated, expired, _callback);

    }

    /**
     * List the licenses in a coterm organization
     * List the licenses in a coterm organization
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param invalidated Filter for licenses that are invalidated (optional)
     * @param expired Filter for licenses that are expired (optional)
     * @return List&lt;GetOrganizationLicensingCotermLicenses200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public List<GetOrganizationLicensingCotermLicenses200ResponseInner> getOrganizationLicensingCotermLicenses_0(String organizationId, Integer perPage, String startingAfter, String endingBefore, Boolean invalidated, Boolean expired) throws ApiException {
        ApiResponse<List<GetOrganizationLicensingCotermLicenses200ResponseInner>> localVarResp = getOrganizationLicensingCotermLicenses_0WithHttpInfo(organizationId, perPage, startingAfter, endingBefore, invalidated, expired);
        return localVarResp.getData();
    }

    /**
     * List the licenses in a coterm organization
     * List the licenses in a coterm organization
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param invalidated Filter for licenses that are invalidated (optional)
     * @param expired Filter for licenses that are expired (optional)
     * @return ApiResponse&lt;List&lt;GetOrganizationLicensingCotermLicenses200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<GetOrganizationLicensingCotermLicenses200ResponseInner>> getOrganizationLicensingCotermLicenses_0WithHttpInfo(String organizationId, Integer perPage, String startingAfter, String endingBefore, Boolean invalidated, Boolean expired) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationLicensingCotermLicenses_0ValidateBeforeCall(organizationId, perPage, startingAfter, endingBefore, invalidated, expired, null);
        Type localVarReturnType = new TypeToken<List<GetOrganizationLicensingCotermLicenses200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the licenses in a coterm organization (asynchronously)
     * List the licenses in a coterm organization
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param invalidated Filter for licenses that are invalidated (optional)
     * @param expired Filter for licenses that are expired (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationLicensingCotermLicenses_0Async(String organizationId, Integer perPage, String startingAfter, String endingBefore, Boolean invalidated, Boolean expired, final ApiCallback<List<GetOrganizationLicensingCotermLicenses200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationLicensingCotermLicenses_0ValidateBeforeCall(organizationId, perPage, startingAfter, endingBefore, invalidated, expired, _callback);
        Type localVarReturnType = new TypeToken<List<GetOrganizationLicensingCotermLicenses200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationLoginSecurity_0
     * @param organizationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationLoginSecurity_0Call(String organizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/loginSecurity"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationLoginSecurity_0ValidateBeforeCall(String organizationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationLoginSecurity_0(Async)");
        }

        return getOrganizationLoginSecurity_0Call(organizationId, _callback);

    }

    /**
     * Returns the login security settings for an organization.
     * Returns the login security settings for an organization.
     * @param organizationId  (required)
     * @return GetOrganizationLoginSecurity200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetOrganizationLoginSecurity200Response getOrganizationLoginSecurity_0(String organizationId) throws ApiException {
        ApiResponse<GetOrganizationLoginSecurity200Response> localVarResp = getOrganizationLoginSecurity_0WithHttpInfo(organizationId);
        return localVarResp.getData();
    }

    /**
     * Returns the login security settings for an organization.
     * Returns the login security settings for an organization.
     * @param organizationId  (required)
     * @return ApiResponse&lt;GetOrganizationLoginSecurity200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOrganizationLoginSecurity200Response> getOrganizationLoginSecurity_0WithHttpInfo(String organizationId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationLoginSecurity_0ValidateBeforeCall(organizationId, null);
        Type localVarReturnType = new TypeToken<GetOrganizationLoginSecurity200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the login security settings for an organization. (asynchronously)
     * Returns the login security settings for an organization.
     * @param organizationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationLoginSecurity_0Async(String organizationId, final ApiCallback<GetOrganizationLoginSecurity200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationLoginSecurity_0ValidateBeforeCall(organizationId, _callback);
        Type localVarReturnType = new TypeToken<GetOrganizationLoginSecurity200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationNetworks_0
     * @param organizationId  (required)
     * @param configTemplateId An optional parameter that is the ID of a config template. Will return all networks bound to that template. (optional)
     * @param isBoundToConfigTemplate An optional parameter to filter config template bound networks. If configTemplateId is set, this cannot be false. (optional)
     * @param tags An optional parameter to filter networks by tags. The filtering is case-sensitive. If tags are included, &#39;tagsFilterType&#39; should also be included (see below). (optional)
     * @param tagsFilterType An optional parameter of value &#39;withAnyTags&#39; or &#39;withAllTags&#39; to indicate whether to return networks which contain ANY or ALL of the included tags. If no type is included, &#39;withAnyTags&#39; will be selected. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 100000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationNetworks_0Call(String organizationId, String configTemplateId, Boolean isBoundToConfigTemplate, List<String> tags, String tagsFilterType, Integer perPage, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/networks"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (configTemplateId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("configTemplateId", configTemplateId));
        }

        if (isBoundToConfigTemplate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isBoundToConfigTemplate", isBoundToConfigTemplate));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tags", tags));
        }

        if (tagsFilterType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tagsFilterType", tagsFilterType));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingAfter", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endingBefore", endingBefore));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationNetworks_0ValidateBeforeCall(String organizationId, String configTemplateId, Boolean isBoundToConfigTemplate, List<String> tags, String tagsFilterType, Integer perPage, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationNetworks_0(Async)");
        }

        return getOrganizationNetworks_0Call(organizationId, configTemplateId, isBoundToConfigTemplate, tags, tagsFilterType, perPage, startingAfter, endingBefore, _callback);

    }

    /**
     * List the networks that the user has privileges on in an organization
     * List the networks that the user has privileges on in an organization
     * @param organizationId  (required)
     * @param configTemplateId An optional parameter that is the ID of a config template. Will return all networks bound to that template. (optional)
     * @param isBoundToConfigTemplate An optional parameter to filter config template bound networks. If configTemplateId is set, this cannot be false. (optional)
     * @param tags An optional parameter to filter networks by tags. The filtering is case-sensitive. If tags are included, &#39;tagsFilterType&#39; should also be included (see below). (optional)
     * @param tagsFilterType An optional parameter of value &#39;withAnyTags&#39; or &#39;withAllTags&#39; to indicate whether to return networks which contain ANY or ALL of the included tags. If no type is included, &#39;withAnyTags&#39; will be selected. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 100000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @return List&lt;GetNetwork200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public List<GetNetwork200Response> getOrganizationNetworks_0(String organizationId, String configTemplateId, Boolean isBoundToConfigTemplate, List<String> tags, String tagsFilterType, Integer perPage, String startingAfter, String endingBefore) throws ApiException {
        ApiResponse<List<GetNetwork200Response>> localVarResp = getOrganizationNetworks_0WithHttpInfo(organizationId, configTemplateId, isBoundToConfigTemplate, tags, tagsFilterType, perPage, startingAfter, endingBefore);
        return localVarResp.getData();
    }

    /**
     * List the networks that the user has privileges on in an organization
     * List the networks that the user has privileges on in an organization
     * @param organizationId  (required)
     * @param configTemplateId An optional parameter that is the ID of a config template. Will return all networks bound to that template. (optional)
     * @param isBoundToConfigTemplate An optional parameter to filter config template bound networks. If configTemplateId is set, this cannot be false. (optional)
     * @param tags An optional parameter to filter networks by tags. The filtering is case-sensitive. If tags are included, &#39;tagsFilterType&#39; should also be included (see below). (optional)
     * @param tagsFilterType An optional parameter of value &#39;withAnyTags&#39; or &#39;withAllTags&#39; to indicate whether to return networks which contain ANY or ALL of the included tags. If no type is included, &#39;withAnyTags&#39; will be selected. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 100000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @return ApiResponse&lt;List&lt;GetNetwork200Response&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetwork200Response>> getOrganizationNetworks_0WithHttpInfo(String organizationId, String configTemplateId, Boolean isBoundToConfigTemplate, List<String> tags, String tagsFilterType, Integer perPage, String startingAfter, String endingBefore) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationNetworks_0ValidateBeforeCall(organizationId, configTemplateId, isBoundToConfigTemplate, tags, tagsFilterType, perPage, startingAfter, endingBefore, null);
        Type localVarReturnType = new TypeToken<List<GetNetwork200Response>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the networks that the user has privileges on in an organization (asynchronously)
     * List the networks that the user has privileges on in an organization
     * @param organizationId  (required)
     * @param configTemplateId An optional parameter that is the ID of a config template. Will return all networks bound to that template. (optional)
     * @param isBoundToConfigTemplate An optional parameter to filter config template bound networks. If configTemplateId is set, this cannot be false. (optional)
     * @param tags An optional parameter to filter networks by tags. The filtering is case-sensitive. If tags are included, &#39;tagsFilterType&#39; should also be included (see below). (optional)
     * @param tagsFilterType An optional parameter of value &#39;withAnyTags&#39; or &#39;withAllTags&#39; to indicate whether to return networks which contain ANY or ALL of the included tags. If no type is included, &#39;withAnyTags&#39; will be selected. (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 100000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationNetworks_0Async(String organizationId, String configTemplateId, Boolean isBoundToConfigTemplate, List<String> tags, String tagsFilterType, Integer perPage, String startingAfter, String endingBefore, final ApiCallback<List<GetNetwork200Response>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationNetworks_0ValidateBeforeCall(organizationId, configTemplateId, isBoundToConfigTemplate, tags, tagsFilterType, perPage, startingAfter, endingBefore, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetwork200Response>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationPolicyObject_0
     * @param organizationId  (required)
     * @param policyObjectId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationPolicyObject_0Call(String organizationId, String policyObjectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/policyObjects/{policyObjectId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "policyObjectId" + "}", localVarApiClient.escapeString(policyObjectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationPolicyObject_0ValidateBeforeCall(String organizationId, String policyObjectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationPolicyObject_0(Async)");
        }

        // verify the required parameter 'policyObjectId' is set
        if (policyObjectId == null) {
            throw new ApiException("Missing the required parameter 'policyObjectId' when calling getOrganizationPolicyObject_0(Async)");
        }

        return getOrganizationPolicyObject_0Call(organizationId, policyObjectId, _callback);

    }

    /**
     * Shows details of a Policy Object.
     * Shows details of a Policy Object.
     * @param organizationId  (required)
     * @param policyObjectId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getOrganizationPolicyObject_0(String organizationId, String policyObjectId) throws ApiException {
        ApiResponse<Object> localVarResp = getOrganizationPolicyObject_0WithHttpInfo(organizationId, policyObjectId);
        return localVarResp.getData();
    }

    /**
     * Shows details of a Policy Object.
     * Shows details of a Policy Object.
     * @param organizationId  (required)
     * @param policyObjectId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getOrganizationPolicyObject_0WithHttpInfo(String organizationId, String policyObjectId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationPolicyObject_0ValidateBeforeCall(organizationId, policyObjectId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Shows details of a Policy Object. (asynchronously)
     * Shows details of a Policy Object.
     * @param organizationId  (required)
     * @param policyObjectId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationPolicyObject_0Async(String organizationId, String policyObjectId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationPolicyObject_0ValidateBeforeCall(organizationId, policyObjectId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationPolicyObjectsGroup_0
     * @param organizationId  (required)
     * @param policyObjectGroupId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationPolicyObjectsGroup_0Call(String organizationId, String policyObjectGroupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/policyObjects/groups/{policyObjectGroupId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "policyObjectGroupId" + "}", localVarApiClient.escapeString(policyObjectGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationPolicyObjectsGroup_0ValidateBeforeCall(String organizationId, String policyObjectGroupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationPolicyObjectsGroup_0(Async)");
        }

        // verify the required parameter 'policyObjectGroupId' is set
        if (policyObjectGroupId == null) {
            throw new ApiException("Missing the required parameter 'policyObjectGroupId' when calling getOrganizationPolicyObjectsGroup_0(Async)");
        }

        return getOrganizationPolicyObjectsGroup_0Call(organizationId, policyObjectGroupId, _callback);

    }

    /**
     * Shows details of a Policy Object Group.
     * Shows details of a Policy Object Group.
     * @param organizationId  (required)
     * @param policyObjectGroupId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getOrganizationPolicyObjectsGroup_0(String organizationId, String policyObjectGroupId) throws ApiException {
        ApiResponse<Object> localVarResp = getOrganizationPolicyObjectsGroup_0WithHttpInfo(organizationId, policyObjectGroupId);
        return localVarResp.getData();
    }

    /**
     * Shows details of a Policy Object Group.
     * Shows details of a Policy Object Group.
     * @param organizationId  (required)
     * @param policyObjectGroupId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getOrganizationPolicyObjectsGroup_0WithHttpInfo(String organizationId, String policyObjectGroupId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationPolicyObjectsGroup_0ValidateBeforeCall(organizationId, policyObjectGroupId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Shows details of a Policy Object Group. (asynchronously)
     * Shows details of a Policy Object Group.
     * @param organizationId  (required)
     * @param policyObjectGroupId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationPolicyObjectsGroup_0Async(String organizationId, String policyObjectGroupId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationPolicyObjectsGroup_0ValidateBeforeCall(organizationId, policyObjectGroupId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationPolicyObjectsGroups_0
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 10 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationPolicyObjectsGroups_0Call(String organizationId, Integer perPage, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/policyObjects/groups"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingAfter", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endingBefore", endingBefore));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationPolicyObjectsGroups_0ValidateBeforeCall(String organizationId, Integer perPage, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationPolicyObjectsGroups_0(Async)");
        }

        return getOrganizationPolicyObjectsGroups_0Call(organizationId, perPage, startingAfter, endingBefore, _callback);

    }

    /**
     * Lists Policy Object Groups belonging to the organization.
     * Lists Policy Object Groups belonging to the organization.
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 10 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public List<Object> getOrganizationPolicyObjectsGroups_0(String organizationId, Integer perPage, String startingAfter, String endingBefore) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getOrganizationPolicyObjectsGroups_0WithHttpInfo(organizationId, perPage, startingAfter, endingBefore);
        return localVarResp.getData();
    }

    /**
     * Lists Policy Object Groups belonging to the organization.
     * Lists Policy Object Groups belonging to the organization.
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 10 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getOrganizationPolicyObjectsGroups_0WithHttpInfo(String organizationId, Integer perPage, String startingAfter, String endingBefore) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationPolicyObjectsGroups_0ValidateBeforeCall(organizationId, perPage, startingAfter, endingBefore, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists Policy Object Groups belonging to the organization. (asynchronously)
     * Lists Policy Object Groups belonging to the organization.
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 10 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationPolicyObjectsGroups_0Async(String organizationId, Integer perPage, String startingAfter, String endingBefore, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationPolicyObjectsGroups_0ValidateBeforeCall(organizationId, perPage, startingAfter, endingBefore, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationPolicyObjects_0
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 10 - 5000. Default is 5000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationPolicyObjects_0Call(String organizationId, Integer perPage, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/policyObjects"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingAfter", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endingBefore", endingBefore));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationPolicyObjects_0ValidateBeforeCall(String organizationId, Integer perPage, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationPolicyObjects_0(Async)");
        }

        return getOrganizationPolicyObjects_0Call(organizationId, perPage, startingAfter, endingBefore, _callback);

    }

    /**
     * Lists Policy Objects belonging to the organization.
     * Lists Policy Objects belonging to the organization.
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 10 - 5000. Default is 5000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public List<Object> getOrganizationPolicyObjects_0(String organizationId, Integer perPage, String startingAfter, String endingBefore) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getOrganizationPolicyObjects_0WithHttpInfo(organizationId, perPage, startingAfter, endingBefore);
        return localVarResp.getData();
    }

    /**
     * Lists Policy Objects belonging to the organization.
     * Lists Policy Objects belonging to the organization.
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 10 - 5000. Default is 5000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getOrganizationPolicyObjects_0WithHttpInfo(String organizationId, Integer perPage, String startingAfter, String endingBefore) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationPolicyObjects_0ValidateBeforeCall(organizationId, perPage, startingAfter, endingBefore, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists Policy Objects belonging to the organization. (asynchronously)
     * Lists Policy Objects belonging to the organization.
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 10 - 5000. Default is 5000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationPolicyObjects_0Async(String organizationId, Integer perPage, String startingAfter, String endingBefore, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationPolicyObjects_0ValidateBeforeCall(organizationId, perPage, startingAfter, endingBefore, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationSamlIdp_0
     * @param organizationId  (required)
     * @param idpId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationSamlIdp_0Call(String organizationId, String idpId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/saml/idps/{idpId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "idpId" + "}", localVarApiClient.escapeString(idpId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationSamlIdp_0ValidateBeforeCall(String organizationId, String idpId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationSamlIdp_0(Async)");
        }

        // verify the required parameter 'idpId' is set
        if (idpId == null) {
            throw new ApiException("Missing the required parameter 'idpId' when calling getOrganizationSamlIdp_0(Async)");
        }

        return getOrganizationSamlIdp_0Call(organizationId, idpId, _callback);

    }

    /**
     * Get a SAML IdP from your organization.
     * Get a SAML IdP from your organization.
     * @param organizationId  (required)
     * @param idpId  (required)
     * @return GetOrganizationSamlIdps200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetOrganizationSamlIdps200ResponseInner getOrganizationSamlIdp_0(String organizationId, String idpId) throws ApiException {
        ApiResponse<GetOrganizationSamlIdps200ResponseInner> localVarResp = getOrganizationSamlIdp_0WithHttpInfo(organizationId, idpId);
        return localVarResp.getData();
    }

    /**
     * Get a SAML IdP from your organization.
     * Get a SAML IdP from your organization.
     * @param organizationId  (required)
     * @param idpId  (required)
     * @return ApiResponse&lt;GetOrganizationSamlIdps200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOrganizationSamlIdps200ResponseInner> getOrganizationSamlIdp_0WithHttpInfo(String organizationId, String idpId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationSamlIdp_0ValidateBeforeCall(organizationId, idpId, null);
        Type localVarReturnType = new TypeToken<GetOrganizationSamlIdps200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a SAML IdP from your organization. (asynchronously)
     * Get a SAML IdP from your organization.
     * @param organizationId  (required)
     * @param idpId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationSamlIdp_0Async(String organizationId, String idpId, final ApiCallback<GetOrganizationSamlIdps200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationSamlIdp_0ValidateBeforeCall(organizationId, idpId, _callback);
        Type localVarReturnType = new TypeToken<GetOrganizationSamlIdps200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationSamlIdps_0
     * @param organizationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationSamlIdps_0Call(String organizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/saml/idps"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationSamlIdps_0ValidateBeforeCall(String organizationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationSamlIdps_0(Async)");
        }

        return getOrganizationSamlIdps_0Call(organizationId, _callback);

    }

    /**
     * List the SAML IdPs in your organization.
     * List the SAML IdPs in your organization.
     * @param organizationId  (required)
     * @return List&lt;GetOrganizationSamlIdps200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetOrganizationSamlIdps200ResponseInner> getOrganizationSamlIdps_0(String organizationId) throws ApiException {
        ApiResponse<List<GetOrganizationSamlIdps200ResponseInner>> localVarResp = getOrganizationSamlIdps_0WithHttpInfo(organizationId);
        return localVarResp.getData();
    }

    /**
     * List the SAML IdPs in your organization.
     * List the SAML IdPs in your organization.
     * @param organizationId  (required)
     * @return ApiResponse&lt;List&lt;GetOrganizationSamlIdps200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetOrganizationSamlIdps200ResponseInner>> getOrganizationSamlIdps_0WithHttpInfo(String organizationId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationSamlIdps_0ValidateBeforeCall(organizationId, null);
        Type localVarReturnType = new TypeToken<List<GetOrganizationSamlIdps200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the SAML IdPs in your organization. (asynchronously)
     * List the SAML IdPs in your organization.
     * @param organizationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationSamlIdps_0Async(String organizationId, final ApiCallback<List<GetOrganizationSamlIdps200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationSamlIdps_0ValidateBeforeCall(organizationId, _callback);
        Type localVarReturnType = new TypeToken<List<GetOrganizationSamlIdps200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationSamlRole_0
     * @param organizationId  (required)
     * @param samlRoleId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationSamlRole_0Call(String organizationId, String samlRoleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/samlRoles/{samlRoleId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "samlRoleId" + "}", localVarApiClient.escapeString(samlRoleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationSamlRole_0ValidateBeforeCall(String organizationId, String samlRoleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationSamlRole_0(Async)");
        }

        // verify the required parameter 'samlRoleId' is set
        if (samlRoleId == null) {
            throw new ApiException("Missing the required parameter 'samlRoleId' when calling getOrganizationSamlRole_0(Async)");
        }

        return getOrganizationSamlRole_0Call(organizationId, samlRoleId, _callback);

    }

    /**
     * Return a SAML role
     * Return a SAML role
     * @param organizationId  (required)
     * @param samlRoleId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getOrganizationSamlRole_0(String organizationId, String samlRoleId) throws ApiException {
        ApiResponse<Object> localVarResp = getOrganizationSamlRole_0WithHttpInfo(organizationId, samlRoleId);
        return localVarResp.getData();
    }

    /**
     * Return a SAML role
     * Return a SAML role
     * @param organizationId  (required)
     * @param samlRoleId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getOrganizationSamlRole_0WithHttpInfo(String organizationId, String samlRoleId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationSamlRole_0ValidateBeforeCall(organizationId, samlRoleId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a SAML role (asynchronously)
     * Return a SAML role
     * @param organizationId  (required)
     * @param samlRoleId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationSamlRole_0Async(String organizationId, String samlRoleId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationSamlRole_0ValidateBeforeCall(organizationId, samlRoleId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationSamlRoles_0
     * @param organizationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationSamlRoles_0Call(String organizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/samlRoles"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationSamlRoles_0ValidateBeforeCall(String organizationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationSamlRoles_0(Async)");
        }

        return getOrganizationSamlRoles_0Call(organizationId, _callback);

    }

    /**
     * List the SAML roles for this organization
     * List the SAML roles for this organization
     * @param organizationId  (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getOrganizationSamlRoles_0(String organizationId) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getOrganizationSamlRoles_0WithHttpInfo(organizationId);
        return localVarResp.getData();
    }

    /**
     * List the SAML roles for this organization
     * List the SAML roles for this organization
     * @param organizationId  (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getOrganizationSamlRoles_0WithHttpInfo(String organizationId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationSamlRoles_0ValidateBeforeCall(organizationId, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the SAML roles for this organization (asynchronously)
     * List the SAML roles for this organization
     * @param organizationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationSamlRoles_0Async(String organizationId, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationSamlRoles_0ValidateBeforeCall(organizationId, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationSaml_0
     * @param organizationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationSaml_0Call(String organizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/saml"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationSaml_0ValidateBeforeCall(String organizationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationSaml_0(Async)");
        }

        return getOrganizationSaml_0Call(organizationId, _callback);

    }

    /**
     * Returns the SAML SSO enabled settings for an organization.
     * Returns the SAML SSO enabled settings for an organization.
     * @param organizationId  (required)
     * @return GetOrganizationSaml200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetOrganizationSaml200Response getOrganizationSaml_0(String organizationId) throws ApiException {
        ApiResponse<GetOrganizationSaml200Response> localVarResp = getOrganizationSaml_0WithHttpInfo(organizationId);
        return localVarResp.getData();
    }

    /**
     * Returns the SAML SSO enabled settings for an organization.
     * Returns the SAML SSO enabled settings for an organization.
     * @param organizationId  (required)
     * @return ApiResponse&lt;GetOrganizationSaml200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOrganizationSaml200Response> getOrganizationSaml_0WithHttpInfo(String organizationId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationSaml_0ValidateBeforeCall(organizationId, null);
        Type localVarReturnType = new TypeToken<GetOrganizationSaml200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the SAML SSO enabled settings for an organization. (asynchronously)
     * Returns the SAML SSO enabled settings for an organization.
     * @param organizationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationSaml_0Async(String organizationId, final ApiCallback<GetOrganizationSaml200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationSaml_0ValidateBeforeCall(organizationId, _callback);
        Type localVarReturnType = new TypeToken<GetOrganizationSaml200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationSmApnsCert_0
     * @param organizationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationSmApnsCert_0Call(String organizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/sm/apnsCert"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationSmApnsCert_0ValidateBeforeCall(String organizationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationSmApnsCert_0(Async)");
        }

        return getOrganizationSmApnsCert_0Call(organizationId, _callback);

    }

    /**
     * Get the organization&#39;s APNS certificate
     * Get the organization&#39;s APNS certificate
     * @param organizationId  (required)
     * @return GetOrganizationSmApnsCert200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetOrganizationSmApnsCert200Response getOrganizationSmApnsCert_0(String organizationId) throws ApiException {
        ApiResponse<GetOrganizationSmApnsCert200Response> localVarResp = getOrganizationSmApnsCert_0WithHttpInfo(organizationId);
        return localVarResp.getData();
    }

    /**
     * Get the organization&#39;s APNS certificate
     * Get the organization&#39;s APNS certificate
     * @param organizationId  (required)
     * @return ApiResponse&lt;GetOrganizationSmApnsCert200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOrganizationSmApnsCert200Response> getOrganizationSmApnsCert_0WithHttpInfo(String organizationId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationSmApnsCert_0ValidateBeforeCall(organizationId, null);
        Type localVarReturnType = new TypeToken<GetOrganizationSmApnsCert200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the organization&#39;s APNS certificate (asynchronously)
     * Get the organization&#39;s APNS certificate
     * @param organizationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationSmApnsCert_0Async(String organizationId, final ApiCallback<GetOrganizationSmApnsCert200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationSmApnsCert_0ValidateBeforeCall(organizationId, _callback);
        Type localVarReturnType = new TypeToken<GetOrganizationSmApnsCert200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationSmVppAccount_0
     * @param organizationId  (required)
     * @param vppAccountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationSmVppAccount_0Call(String organizationId, String vppAccountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/sm/vppAccounts/{vppAccountId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "vppAccountId" + "}", localVarApiClient.escapeString(vppAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationSmVppAccount_0ValidateBeforeCall(String organizationId, String vppAccountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationSmVppAccount_0(Async)");
        }

        // verify the required parameter 'vppAccountId' is set
        if (vppAccountId == null) {
            throw new ApiException("Missing the required parameter 'vppAccountId' when calling getOrganizationSmVppAccount_0(Async)");
        }

        return getOrganizationSmVppAccount_0Call(organizationId, vppAccountId, _callback);

    }

    /**
     * Get a hash containing the unparsed token of the VPP account with the given ID
     * Get a hash containing the unparsed token of the VPP account with the given ID
     * @param organizationId  (required)
     * @param vppAccountId  (required)
     * @return GetOrganizationSmVppAccounts200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetOrganizationSmVppAccounts200ResponseInner getOrganizationSmVppAccount_0(String organizationId, String vppAccountId) throws ApiException {
        ApiResponse<GetOrganizationSmVppAccounts200ResponseInner> localVarResp = getOrganizationSmVppAccount_0WithHttpInfo(organizationId, vppAccountId);
        return localVarResp.getData();
    }

    /**
     * Get a hash containing the unparsed token of the VPP account with the given ID
     * Get a hash containing the unparsed token of the VPP account with the given ID
     * @param organizationId  (required)
     * @param vppAccountId  (required)
     * @return ApiResponse&lt;GetOrganizationSmVppAccounts200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOrganizationSmVppAccounts200ResponseInner> getOrganizationSmVppAccount_0WithHttpInfo(String organizationId, String vppAccountId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationSmVppAccount_0ValidateBeforeCall(organizationId, vppAccountId, null);
        Type localVarReturnType = new TypeToken<GetOrganizationSmVppAccounts200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a hash containing the unparsed token of the VPP account with the given ID (asynchronously)
     * Get a hash containing the unparsed token of the VPP account with the given ID
     * @param organizationId  (required)
     * @param vppAccountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationSmVppAccount_0Async(String organizationId, String vppAccountId, final ApiCallback<GetOrganizationSmVppAccounts200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationSmVppAccount_0ValidateBeforeCall(organizationId, vppAccountId, _callback);
        Type localVarReturnType = new TypeToken<GetOrganizationSmVppAccounts200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationSmVppAccounts_0
     * @param organizationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationSmVppAccounts_0Call(String organizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/sm/vppAccounts"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationSmVppAccounts_0ValidateBeforeCall(String organizationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationSmVppAccounts_0(Async)");
        }

        return getOrganizationSmVppAccounts_0Call(organizationId, _callback);

    }

    /**
     * List the VPP accounts in the organization
     * List the VPP accounts in the organization
     * @param organizationId  (required)
     * @return List&lt;GetOrganizationSmVppAccounts200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetOrganizationSmVppAccounts200ResponseInner> getOrganizationSmVppAccounts_0(String organizationId) throws ApiException {
        ApiResponse<List<GetOrganizationSmVppAccounts200ResponseInner>> localVarResp = getOrganizationSmVppAccounts_0WithHttpInfo(organizationId);
        return localVarResp.getData();
    }

    /**
     * List the VPP accounts in the organization
     * List the VPP accounts in the organization
     * @param organizationId  (required)
     * @return ApiResponse&lt;List&lt;GetOrganizationSmVppAccounts200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetOrganizationSmVppAccounts200ResponseInner>> getOrganizationSmVppAccounts_0WithHttpInfo(String organizationId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationSmVppAccounts_0ValidateBeforeCall(organizationId, null);
        Type localVarReturnType = new TypeToken<List<GetOrganizationSmVppAccounts200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the VPP accounts in the organization (asynchronously)
     * List the VPP accounts in the organization
     * @param organizationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationSmVppAccounts_0Async(String organizationId, final ApiCallback<List<GetOrganizationSmVppAccounts200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationSmVppAccounts_0ValidateBeforeCall(organizationId, _callback);
        Type localVarReturnType = new TypeToken<List<GetOrganizationSmVppAccounts200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationSnmp_0
     * @param organizationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationSnmp_0Call(String organizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/snmp"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationSnmp_0ValidateBeforeCall(String organizationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationSnmp_0(Async)");
        }

        return getOrganizationSnmp_0Call(organizationId, _callback);

    }

    /**
     * Return the SNMP settings for an organization
     * Return the SNMP settings for an organization
     * @param organizationId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getOrganizationSnmp_0(String organizationId) throws ApiException {
        ApiResponse<Object> localVarResp = getOrganizationSnmp_0WithHttpInfo(organizationId);
        return localVarResp.getData();
    }

    /**
     * Return the SNMP settings for an organization
     * Return the SNMP settings for an organization
     * @param organizationId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getOrganizationSnmp_0WithHttpInfo(String organizationId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationSnmp_0ValidateBeforeCall(organizationId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the SNMP settings for an organization (asynchronously)
     * Return the SNMP settings for an organization
     * @param organizationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationSnmp_0Async(String organizationId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationSnmp_0ValidateBeforeCall(organizationId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationSwitchPortsBySwitch_0
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 50. Default is 50. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param networkIds Optional parameter to filter switchports by network. (optional)
     * @param portProfileIds Optional parameter to filter switchports belonging to the specified switchport profiles. (optional)
     * @param name Optional parameter to filter switchports belonging to switches by name. All returned switches will have a name that contains the search term or is an exact match. (optional)
     * @param mac Optional parameter to filter switchports belonging to switches by MAC address. All returned switches will have a MAC address that contains the search term or is an exact match. (optional)
     * @param macs Optional parameter to filter switchports by one or more MAC addresses belonging to devices. All switchports returned belong to MAC addresses of switches that are an exact match. (optional)
     * @param serial Optional parameter to filter switchports belonging to switches by serial number. All returned switches will have a serial number that contains the search term or is an exact match. (optional)
     * @param serials Optional parameter to filter switchports belonging to switches with one or more serial numbers. All switchports returned belong to serial numbers of switches that are an exact match. (optional)
     * @param configurationUpdatedAfter Optional parameter to filter results by switches where the configuration has been updated after the given timestamp. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationSwitchPortsBySwitch_0Call(String organizationId, Integer perPage, String startingAfter, String endingBefore, List<String> networkIds, List<String> portProfileIds, String name, String mac, List<String> macs, String serial, List<String> serials, String configurationUpdatedAfter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/switch/ports/bySwitch"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingAfter", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endingBefore", endingBefore));
        }

        if (networkIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "networkIds", networkIds));
        }

        if (portProfileIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "portProfileIds", portProfileIds));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (mac != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac", mac));
        }

        if (macs != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "macs", macs));
        }

        if (serial != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial", serial));
        }

        if (serials != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "serials", serials));
        }

        if (configurationUpdatedAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("configurationUpdatedAfter", configurationUpdatedAfter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationSwitchPortsBySwitch_0ValidateBeforeCall(String organizationId, Integer perPage, String startingAfter, String endingBefore, List<String> networkIds, List<String> portProfileIds, String name, String mac, List<String> macs, String serial, List<String> serials, String configurationUpdatedAfter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationSwitchPortsBySwitch_0(Async)");
        }

        return getOrganizationSwitchPortsBySwitch_0Call(organizationId, perPage, startingAfter, endingBefore, networkIds, portProfileIds, name, mac, macs, serial, serials, configurationUpdatedAfter, _callback);

    }

    /**
     * List the switchports in an organization by switch
     * List the switchports in an organization by switch
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 50. Default is 50. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param networkIds Optional parameter to filter switchports by network. (optional)
     * @param portProfileIds Optional parameter to filter switchports belonging to the specified switchport profiles. (optional)
     * @param name Optional parameter to filter switchports belonging to switches by name. All returned switches will have a name that contains the search term or is an exact match. (optional)
     * @param mac Optional parameter to filter switchports belonging to switches by MAC address. All returned switches will have a MAC address that contains the search term or is an exact match. (optional)
     * @param macs Optional parameter to filter switchports by one or more MAC addresses belonging to devices. All switchports returned belong to MAC addresses of switches that are an exact match. (optional)
     * @param serial Optional parameter to filter switchports belonging to switches by serial number. All returned switches will have a serial number that contains the search term or is an exact match. (optional)
     * @param serials Optional parameter to filter switchports belonging to switches with one or more serial numbers. All switchports returned belong to serial numbers of switches that are an exact match. (optional)
     * @param configurationUpdatedAfter Optional parameter to filter results by switches where the configuration has been updated after the given timestamp. (optional)
     * @return List&lt;GetOrganizationSwitchPortsBySwitch200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public List<GetOrganizationSwitchPortsBySwitch200ResponseInner> getOrganizationSwitchPortsBySwitch_0(String organizationId, Integer perPage, String startingAfter, String endingBefore, List<String> networkIds, List<String> portProfileIds, String name, String mac, List<String> macs, String serial, List<String> serials, String configurationUpdatedAfter) throws ApiException {
        ApiResponse<List<GetOrganizationSwitchPortsBySwitch200ResponseInner>> localVarResp = getOrganizationSwitchPortsBySwitch_0WithHttpInfo(organizationId, perPage, startingAfter, endingBefore, networkIds, portProfileIds, name, mac, macs, serial, serials, configurationUpdatedAfter);
        return localVarResp.getData();
    }

    /**
     * List the switchports in an organization by switch
     * List the switchports in an organization by switch
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 50. Default is 50. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param networkIds Optional parameter to filter switchports by network. (optional)
     * @param portProfileIds Optional parameter to filter switchports belonging to the specified switchport profiles. (optional)
     * @param name Optional parameter to filter switchports belonging to switches by name. All returned switches will have a name that contains the search term or is an exact match. (optional)
     * @param mac Optional parameter to filter switchports belonging to switches by MAC address. All returned switches will have a MAC address that contains the search term or is an exact match. (optional)
     * @param macs Optional parameter to filter switchports by one or more MAC addresses belonging to devices. All switchports returned belong to MAC addresses of switches that are an exact match. (optional)
     * @param serial Optional parameter to filter switchports belonging to switches by serial number. All returned switches will have a serial number that contains the search term or is an exact match. (optional)
     * @param serials Optional parameter to filter switchports belonging to switches with one or more serial numbers. All switchports returned belong to serial numbers of switches that are an exact match. (optional)
     * @param configurationUpdatedAfter Optional parameter to filter results by switches where the configuration has been updated after the given timestamp. (optional)
     * @return ApiResponse&lt;List&lt;GetOrganizationSwitchPortsBySwitch200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<GetOrganizationSwitchPortsBySwitch200ResponseInner>> getOrganizationSwitchPortsBySwitch_0WithHttpInfo(String organizationId, Integer perPage, String startingAfter, String endingBefore, List<String> networkIds, List<String> portProfileIds, String name, String mac, List<String> macs, String serial, List<String> serials, String configurationUpdatedAfter) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationSwitchPortsBySwitch_0ValidateBeforeCall(organizationId, perPage, startingAfter, endingBefore, networkIds, portProfileIds, name, mac, macs, serial, serials, configurationUpdatedAfter, null);
        Type localVarReturnType = new TypeToken<List<GetOrganizationSwitchPortsBySwitch200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the switchports in an organization by switch (asynchronously)
     * List the switchports in an organization by switch
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 50. Default is 50. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param networkIds Optional parameter to filter switchports by network. (optional)
     * @param portProfileIds Optional parameter to filter switchports belonging to the specified switchport profiles. (optional)
     * @param name Optional parameter to filter switchports belonging to switches by name. All returned switches will have a name that contains the search term or is an exact match. (optional)
     * @param mac Optional parameter to filter switchports belonging to switches by MAC address. All returned switches will have a MAC address that contains the search term or is an exact match. (optional)
     * @param macs Optional parameter to filter switchports by one or more MAC addresses belonging to devices. All switchports returned belong to MAC addresses of switches that are an exact match. (optional)
     * @param serial Optional parameter to filter switchports belonging to switches by serial number. All returned switches will have a serial number that contains the search term or is an exact match. (optional)
     * @param serials Optional parameter to filter switchports belonging to switches with one or more serial numbers. All switchports returned belong to serial numbers of switches that are an exact match. (optional)
     * @param configurationUpdatedAfter Optional parameter to filter results by switches where the configuration has been updated after the given timestamp. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationSwitchPortsBySwitch_0Async(String organizationId, Integer perPage, String startingAfter, String endingBefore, List<String> networkIds, List<String> portProfileIds, String name, String mac, List<String> macs, String serial, List<String> serials, String configurationUpdatedAfter, final ApiCallback<List<GetOrganizationSwitchPortsBySwitch200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationSwitchPortsBySwitch_0ValidateBeforeCall(organizationId, perPage, startingAfter, endingBefore, networkIds, portProfileIds, name, mac, macs, serial, serials, configurationUpdatedAfter, _callback);
        Type localVarReturnType = new TypeToken<List<GetOrganizationSwitchPortsBySwitch200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationWirelessDevicesEthernetStatuses_0
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param networkIds A list of Meraki network IDs to filter results to contain only specified networks. E.g.: networkIds[]&#x3D;N_12345678&amp;networkIds[]&#x3D;L_3456 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationWirelessDevicesEthernetStatuses_0Call(String organizationId, Integer perPage, String startingAfter, String endingBefore, List<String> networkIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/wireless/devices/ethernet/statuses"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingAfter", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endingBefore", endingBefore));
        }

        if (networkIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "networkIds", networkIds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationWirelessDevicesEthernetStatuses_0ValidateBeforeCall(String organizationId, Integer perPage, String startingAfter, String endingBefore, List<String> networkIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationWirelessDevicesEthernetStatuses_0(Async)");
        }

        return getOrganizationWirelessDevicesEthernetStatuses_0Call(organizationId, perPage, startingAfter, endingBefore, networkIds, _callback);

    }

    /**
     * Endpoint to see power status for wireless devices
     * Endpoint to see power status for wireless devices
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param networkIds A list of Meraki network IDs to filter results to contain only specified networks. E.g.: networkIds[]&#x3D;N_12345678&amp;networkIds[]&#x3D;L_3456 (optional)
     * @return List&lt;GetOrganizationWirelessDevicesEthernetStatuses200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public List<GetOrganizationWirelessDevicesEthernetStatuses200ResponseInner> getOrganizationWirelessDevicesEthernetStatuses_0(String organizationId, Integer perPage, String startingAfter, String endingBefore, List<String> networkIds) throws ApiException {
        ApiResponse<List<GetOrganizationWirelessDevicesEthernetStatuses200ResponseInner>> localVarResp = getOrganizationWirelessDevicesEthernetStatuses_0WithHttpInfo(organizationId, perPage, startingAfter, endingBefore, networkIds);
        return localVarResp.getData();
    }

    /**
     * Endpoint to see power status for wireless devices
     * Endpoint to see power status for wireless devices
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param networkIds A list of Meraki network IDs to filter results to contain only specified networks. E.g.: networkIds[]&#x3D;N_12345678&amp;networkIds[]&#x3D;L_3456 (optional)
     * @return ApiResponse&lt;List&lt;GetOrganizationWirelessDevicesEthernetStatuses200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<GetOrganizationWirelessDevicesEthernetStatuses200ResponseInner>> getOrganizationWirelessDevicesEthernetStatuses_0WithHttpInfo(String organizationId, Integer perPage, String startingAfter, String endingBefore, List<String> networkIds) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationWirelessDevicesEthernetStatuses_0ValidateBeforeCall(organizationId, perPage, startingAfter, endingBefore, networkIds, null);
        Type localVarReturnType = new TypeToken<List<GetOrganizationWirelessDevicesEthernetStatuses200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Endpoint to see power status for wireless devices (asynchronously)
     * Endpoint to see power status for wireless devices
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param networkIds A list of Meraki network IDs to filter results to contain only specified networks. E.g.: networkIds[]&#x3D;N_12345678&amp;networkIds[]&#x3D;L_3456 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationWirelessDevicesEthernetStatuses_0Async(String organizationId, Integer perPage, String startingAfter, String endingBefore, List<String> networkIds, final ApiCallback<List<GetOrganizationWirelessDevicesEthernetStatuses200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationWirelessDevicesEthernetStatuses_0ValidateBeforeCall(organizationId, perPage, startingAfter, endingBefore, networkIds, _callback);
        Type localVarReturnType = new TypeToken<List<GetOrganizationWirelessDevicesEthernetStatuses200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganization_0
     * @param organizationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganization_0Call(String organizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganization_0ValidateBeforeCall(String organizationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganization_0(Async)");
        }

        return getOrganization_0Call(organizationId, _callback);

    }

    /**
     * Return an organization
     * Return an organization
     * @param organizationId  (required)
     * @return GetOrganizations200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetOrganizations200ResponseInner getOrganization_0(String organizationId) throws ApiException {
        ApiResponse<GetOrganizations200ResponseInner> localVarResp = getOrganization_0WithHttpInfo(organizationId);
        return localVarResp.getData();
    }

    /**
     * Return an organization
     * Return an organization
     * @param organizationId  (required)
     * @return ApiResponse&lt;GetOrganizations200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOrganizations200ResponseInner> getOrganization_0WithHttpInfo(String organizationId) throws ApiException {
        okhttp3.Call localVarCall = getOrganization_0ValidateBeforeCall(organizationId, null);
        Type localVarReturnType = new TypeToken<GetOrganizations200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return an organization (asynchronously)
     * Return an organization
     * @param organizationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganization_0Async(String organizationId, final ApiCallback<GetOrganizations200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganization_0ValidateBeforeCall(organizationId, _callback);
        Type localVarReturnType = new TypeToken<GetOrganizations200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizations_0
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizations_0Call(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizations_0ValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getOrganizations_0Call(_callback);

    }

    /**
     * List the organizations that the user has privileges on
     * List the organizations that the user has privileges on
     * @return List&lt;GetOrganizations200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetOrganizations200ResponseInner> getOrganizations_0() throws ApiException {
        ApiResponse<List<GetOrganizations200ResponseInner>> localVarResp = getOrganizations_0WithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List the organizations that the user has privileges on
     * List the organizations that the user has privileges on
     * @return ApiResponse&lt;List&lt;GetOrganizations200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetOrganizations200ResponseInner>> getOrganizations_0WithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getOrganizations_0ValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<GetOrganizations200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the organizations that the user has privileges on (asynchronously)
     * List the organizations that the user has privileges on
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizations_0Async(final ApiCallback<List<GetOrganizations200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizations_0ValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<GetOrganizations200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lockNetworkSmDevices_0
     * @param networkId  (required)
     * @param lockNetworkSmDevicesRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lockNetworkSmDevices_0Call(String networkId, LockNetworkSmDevicesRequest lockNetworkSmDevicesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = lockNetworkSmDevicesRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/sm/devices/lock"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lockNetworkSmDevices_0ValidateBeforeCall(String networkId, LockNetworkSmDevicesRequest lockNetworkSmDevicesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling lockNetworkSmDevices_0(Async)");
        }

        return lockNetworkSmDevices_0Call(networkId, lockNetworkSmDevicesRequest, _callback);

    }

    /**
     * Lock a set of devices
     * Lock a set of devices
     * @param networkId  (required)
     * @param lockNetworkSmDevicesRequest  (optional)
     * @return CheckinNetworkSmDevices200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CheckinNetworkSmDevices200Response lockNetworkSmDevices_0(String networkId, LockNetworkSmDevicesRequest lockNetworkSmDevicesRequest) throws ApiException {
        ApiResponse<CheckinNetworkSmDevices200Response> localVarResp = lockNetworkSmDevices_0WithHttpInfo(networkId, lockNetworkSmDevicesRequest);
        return localVarResp.getData();
    }

    /**
     * Lock a set of devices
     * Lock a set of devices
     * @param networkId  (required)
     * @param lockNetworkSmDevicesRequest  (optional)
     * @return ApiResponse&lt;CheckinNetworkSmDevices200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CheckinNetworkSmDevices200Response> lockNetworkSmDevices_0WithHttpInfo(String networkId, LockNetworkSmDevicesRequest lockNetworkSmDevicesRequest) throws ApiException {
        okhttp3.Call localVarCall = lockNetworkSmDevices_0ValidateBeforeCall(networkId, lockNetworkSmDevicesRequest, null);
        Type localVarReturnType = new TypeToken<CheckinNetworkSmDevices200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lock a set of devices (asynchronously)
     * Lock a set of devices
     * @param networkId  (required)
     * @param lockNetworkSmDevicesRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lockNetworkSmDevices_0Async(String networkId, LockNetworkSmDevicesRequest lockNetworkSmDevicesRequest, final ApiCallback<CheckinNetworkSmDevices200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = lockNetworkSmDevices_0ValidateBeforeCall(networkId, lockNetworkSmDevicesRequest, _callback);
        Type localVarReturnType = new TypeToken<CheckinNetworkSmDevices200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modifyNetworkSmDevicesTags_0
     * @param networkId  (required)
     * @param modifyNetworkSmDevicesTagsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modifyNetworkSmDevicesTags_0Call(String networkId, ModifyNetworkSmDevicesTagsRequest modifyNetworkSmDevicesTagsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modifyNetworkSmDevicesTagsRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/sm/devices/modifyTags"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modifyNetworkSmDevicesTags_0ValidateBeforeCall(String networkId, ModifyNetworkSmDevicesTagsRequest modifyNetworkSmDevicesTagsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling modifyNetworkSmDevicesTags_0(Async)");
        }

        // verify the required parameter 'modifyNetworkSmDevicesTagsRequest' is set
        if (modifyNetworkSmDevicesTagsRequest == null) {
            throw new ApiException("Missing the required parameter 'modifyNetworkSmDevicesTagsRequest' when calling modifyNetworkSmDevicesTags_0(Async)");
        }

        return modifyNetworkSmDevicesTags_0Call(networkId, modifyNetworkSmDevicesTagsRequest, _callback);

    }

    /**
     * Add, delete, or update the tags of a set of devices
     * Add, delete, or update the tags of a set of devices
     * @param networkId  (required)
     * @param modifyNetworkSmDevicesTagsRequest  (required)
     * @return List&lt;ModifyNetworkSmDevicesTags200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<ModifyNetworkSmDevicesTags200ResponseInner> modifyNetworkSmDevicesTags_0(String networkId, ModifyNetworkSmDevicesTagsRequest modifyNetworkSmDevicesTagsRequest) throws ApiException {
        ApiResponse<List<ModifyNetworkSmDevicesTags200ResponseInner>> localVarResp = modifyNetworkSmDevicesTags_0WithHttpInfo(networkId, modifyNetworkSmDevicesTagsRequest);
        return localVarResp.getData();
    }

    /**
     * Add, delete, or update the tags of a set of devices
     * Add, delete, or update the tags of a set of devices
     * @param networkId  (required)
     * @param modifyNetworkSmDevicesTagsRequest  (required)
     * @return ApiResponse&lt;List&lt;ModifyNetworkSmDevicesTags200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ModifyNetworkSmDevicesTags200ResponseInner>> modifyNetworkSmDevicesTags_0WithHttpInfo(String networkId, ModifyNetworkSmDevicesTagsRequest modifyNetworkSmDevicesTagsRequest) throws ApiException {
        okhttp3.Call localVarCall = modifyNetworkSmDevicesTags_0ValidateBeforeCall(networkId, modifyNetworkSmDevicesTagsRequest, null);
        Type localVarReturnType = new TypeToken<List<ModifyNetworkSmDevicesTags200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add, delete, or update the tags of a set of devices (asynchronously)
     * Add, delete, or update the tags of a set of devices
     * @param networkId  (required)
     * @param modifyNetworkSmDevicesTagsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modifyNetworkSmDevicesTags_0Async(String networkId, ModifyNetworkSmDevicesTagsRequest modifyNetworkSmDevicesTagsRequest, final ApiCallback<List<ModifyNetworkSmDevicesTags200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = modifyNetworkSmDevicesTags_0ValidateBeforeCall(networkId, modifyNetworkSmDevicesTagsRequest, _callback);
        Type localVarReturnType = new TypeToken<List<ModifyNetworkSmDevicesTags200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for moveNetworkSmDevices_0
     * @param networkId  (required)
     * @param moveNetworkSmDevicesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call moveNetworkSmDevices_0Call(String networkId, MoveNetworkSmDevicesRequest moveNetworkSmDevicesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = moveNetworkSmDevicesRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/sm/devices/move"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call moveNetworkSmDevices_0ValidateBeforeCall(String networkId, MoveNetworkSmDevicesRequest moveNetworkSmDevicesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling moveNetworkSmDevices_0(Async)");
        }

        // verify the required parameter 'moveNetworkSmDevicesRequest' is set
        if (moveNetworkSmDevicesRequest == null) {
            throw new ApiException("Missing the required parameter 'moveNetworkSmDevicesRequest' when calling moveNetworkSmDevices_0(Async)");
        }

        return moveNetworkSmDevices_0Call(networkId, moveNetworkSmDevicesRequest, _callback);

    }

    /**
     * Move a set of devices to a new network
     * Move a set of devices to a new network
     * @param networkId  (required)
     * @param moveNetworkSmDevicesRequest  (required)
     * @return MoveNetworkSmDevices200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public MoveNetworkSmDevices200Response moveNetworkSmDevices_0(String networkId, MoveNetworkSmDevicesRequest moveNetworkSmDevicesRequest) throws ApiException {
        ApiResponse<MoveNetworkSmDevices200Response> localVarResp = moveNetworkSmDevices_0WithHttpInfo(networkId, moveNetworkSmDevicesRequest);
        return localVarResp.getData();
    }

    /**
     * Move a set of devices to a new network
     * Move a set of devices to a new network
     * @param networkId  (required)
     * @param moveNetworkSmDevicesRequest  (required)
     * @return ApiResponse&lt;MoveNetworkSmDevices200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MoveNetworkSmDevices200Response> moveNetworkSmDevices_0WithHttpInfo(String networkId, MoveNetworkSmDevicesRequest moveNetworkSmDevicesRequest) throws ApiException {
        okhttp3.Call localVarCall = moveNetworkSmDevices_0ValidateBeforeCall(networkId, moveNetworkSmDevicesRequest, null);
        Type localVarReturnType = new TypeToken<MoveNetworkSmDevices200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Move a set of devices to a new network (asynchronously)
     * Move a set of devices to a new network
     * @param networkId  (required)
     * @param moveNetworkSmDevicesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call moveNetworkSmDevices_0Async(String networkId, MoveNetworkSmDevicesRequest moveNetworkSmDevicesRequest, final ApiCallback<MoveNetworkSmDevices200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = moveNetworkSmDevices_0ValidateBeforeCall(networkId, moveNetworkSmDevicesRequest, _callback);
        Type localVarReturnType = new TypeToken<MoveNetworkSmDevices200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for moveOrganizationLicensesSeats_0
     * @param organizationId  (required)
     * @param moveOrganizationLicensesSeatsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call moveOrganizationLicensesSeats_0Call(String organizationId, MoveOrganizationLicensesSeatsRequest moveOrganizationLicensesSeatsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = moveOrganizationLicensesSeatsRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/licenses/moveSeats"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call moveOrganizationLicensesSeats_0ValidateBeforeCall(String organizationId, MoveOrganizationLicensesSeatsRequest moveOrganizationLicensesSeatsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling moveOrganizationLicensesSeats_0(Async)");
        }

        // verify the required parameter 'moveOrganizationLicensesSeatsRequest' is set
        if (moveOrganizationLicensesSeatsRequest == null) {
            throw new ApiException("Missing the required parameter 'moveOrganizationLicensesSeatsRequest' when calling moveOrganizationLicensesSeats_0(Async)");
        }

        return moveOrganizationLicensesSeats_0Call(organizationId, moveOrganizationLicensesSeatsRequest, _callback);

    }

    /**
     * Move SM seats to another organization
     * Move SM seats to another organization
     * @param organizationId  (required)
     * @param moveOrganizationLicensesSeatsRequest  (required)
     * @return MoveOrganizationLicensesSeats200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public MoveOrganizationLicensesSeats200Response moveOrganizationLicensesSeats_0(String organizationId, MoveOrganizationLicensesSeatsRequest moveOrganizationLicensesSeatsRequest) throws ApiException {
        ApiResponse<MoveOrganizationLicensesSeats200Response> localVarResp = moveOrganizationLicensesSeats_0WithHttpInfo(organizationId, moveOrganizationLicensesSeatsRequest);
        return localVarResp.getData();
    }

    /**
     * Move SM seats to another organization
     * Move SM seats to another organization
     * @param organizationId  (required)
     * @param moveOrganizationLicensesSeatsRequest  (required)
     * @return ApiResponse&lt;MoveOrganizationLicensesSeats200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MoveOrganizationLicensesSeats200Response> moveOrganizationLicensesSeats_0WithHttpInfo(String organizationId, MoveOrganizationLicensesSeatsRequest moveOrganizationLicensesSeatsRequest) throws ApiException {
        okhttp3.Call localVarCall = moveOrganizationLicensesSeats_0ValidateBeforeCall(organizationId, moveOrganizationLicensesSeatsRequest, null);
        Type localVarReturnType = new TypeToken<MoveOrganizationLicensesSeats200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Move SM seats to another organization (asynchronously)
     * Move SM seats to another organization
     * @param organizationId  (required)
     * @param moveOrganizationLicensesSeatsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call moveOrganizationLicensesSeats_0Async(String organizationId, MoveOrganizationLicensesSeatsRequest moveOrganizationLicensesSeatsRequest, final ApiCallback<MoveOrganizationLicensesSeats200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = moveOrganizationLicensesSeats_0ValidateBeforeCall(organizationId, moveOrganizationLicensesSeatsRequest, _callback);
        Type localVarReturnType = new TypeToken<MoveOrganizationLicensesSeats200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for moveOrganizationLicenses_0
     * @param organizationId  (required)
     * @param moveOrganizationLicensesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call moveOrganizationLicenses_0Call(String organizationId, MoveOrganizationLicensesRequest moveOrganizationLicensesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = moveOrganizationLicensesRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/licenses/move"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call moveOrganizationLicenses_0ValidateBeforeCall(String organizationId, MoveOrganizationLicensesRequest moveOrganizationLicensesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling moveOrganizationLicenses_0(Async)");
        }

        // verify the required parameter 'moveOrganizationLicensesRequest' is set
        if (moveOrganizationLicensesRequest == null) {
            throw new ApiException("Missing the required parameter 'moveOrganizationLicensesRequest' when calling moveOrganizationLicenses_0(Async)");
        }

        return moveOrganizationLicenses_0Call(organizationId, moveOrganizationLicensesRequest, _callback);

    }

    /**
     * Move licenses to another organization
     * Move licenses to another organization. This will also move any devices that the licenses are assigned to
     * @param organizationId  (required)
     * @param moveOrganizationLicensesRequest  (required)
     * @return MoveOrganizationLicenses200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public MoveOrganizationLicenses200Response moveOrganizationLicenses_0(String organizationId, MoveOrganizationLicensesRequest moveOrganizationLicensesRequest) throws ApiException {
        ApiResponse<MoveOrganizationLicenses200Response> localVarResp = moveOrganizationLicenses_0WithHttpInfo(organizationId, moveOrganizationLicensesRequest);
        return localVarResp.getData();
    }

    /**
     * Move licenses to another organization
     * Move licenses to another organization. This will also move any devices that the licenses are assigned to
     * @param organizationId  (required)
     * @param moveOrganizationLicensesRequest  (required)
     * @return ApiResponse&lt;MoveOrganizationLicenses200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MoveOrganizationLicenses200Response> moveOrganizationLicenses_0WithHttpInfo(String organizationId, MoveOrganizationLicensesRequest moveOrganizationLicensesRequest) throws ApiException {
        okhttp3.Call localVarCall = moveOrganizationLicenses_0ValidateBeforeCall(organizationId, moveOrganizationLicensesRequest, null);
        Type localVarReturnType = new TypeToken<MoveOrganizationLicenses200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Move licenses to another organization (asynchronously)
     * Move licenses to another organization. This will also move any devices that the licenses are assigned to
     * @param organizationId  (required)
     * @param moveOrganizationLicensesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call moveOrganizationLicenses_0Async(String organizationId, MoveOrganizationLicensesRequest moveOrganizationLicensesRequest, final ApiCallback<MoveOrganizationLicenses200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = moveOrganizationLicenses_0ValidateBeforeCall(organizationId, moveOrganizationLicensesRequest, _callback);
        Type localVarReturnType = new TypeToken<MoveOrganizationLicenses200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for moveOrganizationLicensingCotermLicenses_0
     * @param organizationId  (required)
     * @param moveOrganizationLicensingCotermLicensesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call moveOrganizationLicensingCotermLicenses_0Call(String organizationId, MoveOrganizationLicensingCotermLicensesRequest moveOrganizationLicensingCotermLicensesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = moveOrganizationLicensingCotermLicensesRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/licensing/coterm/licenses/move"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call moveOrganizationLicensingCotermLicenses_0ValidateBeforeCall(String organizationId, MoveOrganizationLicensingCotermLicensesRequest moveOrganizationLicensingCotermLicensesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling moveOrganizationLicensingCotermLicenses_0(Async)");
        }

        // verify the required parameter 'moveOrganizationLicensingCotermLicensesRequest' is set
        if (moveOrganizationLicensingCotermLicensesRequest == null) {
            throw new ApiException("Missing the required parameter 'moveOrganizationLicensingCotermLicensesRequest' when calling moveOrganizationLicensingCotermLicenses_0(Async)");
        }

        return moveOrganizationLicensingCotermLicenses_0Call(organizationId, moveOrganizationLicensingCotermLicensesRequest, _callback);

    }

    /**
     * Moves a license to a different organization (coterm only)
     * Moves a license to a different organization (coterm only)
     * @param organizationId  (required)
     * @param moveOrganizationLicensingCotermLicensesRequest  (required)
     * @return MoveOrganizationLicensingCotermLicenses200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public MoveOrganizationLicensingCotermLicenses200Response moveOrganizationLicensingCotermLicenses_0(String organizationId, MoveOrganizationLicensingCotermLicensesRequest moveOrganizationLicensingCotermLicensesRequest) throws ApiException {
        ApiResponse<MoveOrganizationLicensingCotermLicenses200Response> localVarResp = moveOrganizationLicensingCotermLicenses_0WithHttpInfo(organizationId, moveOrganizationLicensingCotermLicensesRequest);
        return localVarResp.getData();
    }

    /**
     * Moves a license to a different organization (coterm only)
     * Moves a license to a different organization (coterm only)
     * @param organizationId  (required)
     * @param moveOrganizationLicensingCotermLicensesRequest  (required)
     * @return ApiResponse&lt;MoveOrganizationLicensingCotermLicenses200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MoveOrganizationLicensingCotermLicenses200Response> moveOrganizationLicensingCotermLicenses_0WithHttpInfo(String organizationId, MoveOrganizationLicensingCotermLicensesRequest moveOrganizationLicensingCotermLicensesRequest) throws ApiException {
        okhttp3.Call localVarCall = moveOrganizationLicensingCotermLicenses_0ValidateBeforeCall(organizationId, moveOrganizationLicensingCotermLicensesRequest, null);
        Type localVarReturnType = new TypeToken<MoveOrganizationLicensingCotermLicenses200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Moves a license to a different organization (coterm only) (asynchronously)
     * Moves a license to a different organization (coterm only)
     * @param organizationId  (required)
     * @param moveOrganizationLicensingCotermLicensesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call moveOrganizationLicensingCotermLicenses_0Async(String organizationId, MoveOrganizationLicensingCotermLicensesRequest moveOrganizationLicensingCotermLicensesRequest, final ApiCallback<MoveOrganizationLicensingCotermLicenses200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = moveOrganizationLicensingCotermLicenses_0ValidateBeforeCall(organizationId, moveOrganizationLicensingCotermLicensesRequest, _callback);
        Type localVarReturnType = new TypeToken<MoveOrganizationLicensingCotermLicenses200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for provisionNetworkClients_0
     * @param networkId  (required)
     * @param provisionNetworkClientsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call provisionNetworkClients_0Call(String networkId, ProvisionNetworkClientsRequest provisionNetworkClientsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = provisionNetworkClientsRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/clients/provision"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call provisionNetworkClients_0ValidateBeforeCall(String networkId, ProvisionNetworkClientsRequest provisionNetworkClientsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling provisionNetworkClients_0(Async)");
        }

        // verify the required parameter 'provisionNetworkClientsRequest' is set
        if (provisionNetworkClientsRequest == null) {
            throw new ApiException("Missing the required parameter 'provisionNetworkClientsRequest' when calling provisionNetworkClients_0(Async)");
        }

        return provisionNetworkClients_0Call(networkId, provisionNetworkClientsRequest, _callback);

    }

    /**
     * Provisions a client with a name and policy
     * Provisions a client with a name and policy. Clients can be provisioned before they associate to the network.
     * @param networkId  (required)
     * @param provisionNetworkClientsRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object provisionNetworkClients_0(String networkId, ProvisionNetworkClientsRequest provisionNetworkClientsRequest) throws ApiException {
        ApiResponse<Object> localVarResp = provisionNetworkClients_0WithHttpInfo(networkId, provisionNetworkClientsRequest);
        return localVarResp.getData();
    }

    /**
     * Provisions a client with a name and policy
     * Provisions a client with a name and policy. Clients can be provisioned before they associate to the network.
     * @param networkId  (required)
     * @param provisionNetworkClientsRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> provisionNetworkClients_0WithHttpInfo(String networkId, ProvisionNetworkClientsRequest provisionNetworkClientsRequest) throws ApiException {
        okhttp3.Call localVarCall = provisionNetworkClients_0ValidateBeforeCall(networkId, provisionNetworkClientsRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Provisions a client with a name and policy (asynchronously)
     * Provisions a client with a name and policy. Clients can be provisioned before they associate to the network.
     * @param networkId  (required)
     * @param provisionNetworkClientsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call provisionNetworkClients_0Async(String networkId, ProvisionNetworkClientsRequest provisionNetworkClientsRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = provisionNetworkClients_0ValidateBeforeCall(networkId, provisionNetworkClientsRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for refreshNetworkSmDeviceDetails_0
     * @param networkId  (required)
     * @param deviceId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call refreshNetworkSmDeviceDetails_0Call(String networkId, String deviceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/sm/devices/{deviceId}/refreshDetails"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "deviceId" + "}", localVarApiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call refreshNetworkSmDeviceDetails_0ValidateBeforeCall(String networkId, String deviceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling refreshNetworkSmDeviceDetails_0(Async)");
        }

        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling refreshNetworkSmDeviceDetails_0(Async)");
        }

        return refreshNetworkSmDeviceDetails_0Call(networkId, deviceId, _callback);

    }

    /**
     * Refresh the details of a device
     * Refresh the details of a device
     * @param networkId  (required)
     * @param deviceId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void refreshNetworkSmDeviceDetails_0(String networkId, String deviceId) throws ApiException {
        refreshNetworkSmDeviceDetails_0WithHttpInfo(networkId, deviceId);
    }

    /**
     * Refresh the details of a device
     * Refresh the details of a device
     * @param networkId  (required)
     * @param deviceId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> refreshNetworkSmDeviceDetails_0WithHttpInfo(String networkId, String deviceId) throws ApiException {
        okhttp3.Call localVarCall = refreshNetworkSmDeviceDetails_0ValidateBeforeCall(networkId, deviceId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Refresh the details of a device (asynchronously)
     * Refresh the details of a device
     * @param networkId  (required)
     * @param deviceId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call refreshNetworkSmDeviceDetails_0Async(String networkId, String deviceId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = refreshNetworkSmDeviceDetails_0ValidateBeforeCall(networkId, deviceId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for releaseFromOrganizationInventory_0
     * @param organizationId  (required)
     * @param releaseFromOrganizationInventoryRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releaseFromOrganizationInventory_0Call(String organizationId, ReleaseFromOrganizationInventoryRequest releaseFromOrganizationInventoryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = releaseFromOrganizationInventoryRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/inventory/release"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call releaseFromOrganizationInventory_0ValidateBeforeCall(String organizationId, ReleaseFromOrganizationInventoryRequest releaseFromOrganizationInventoryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling releaseFromOrganizationInventory_0(Async)");
        }

        return releaseFromOrganizationInventory_0Call(organizationId, releaseFromOrganizationInventoryRequest, _callback);

    }

    /**
     * Release a list of claimed devices from an organization.
     * Release a list of claimed devices from an organization.
     * @param organizationId  (required)
     * @param releaseFromOrganizationInventoryRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object releaseFromOrganizationInventory_0(String organizationId, ReleaseFromOrganizationInventoryRequest releaseFromOrganizationInventoryRequest) throws ApiException {
        ApiResponse<Object> localVarResp = releaseFromOrganizationInventory_0WithHttpInfo(organizationId, releaseFromOrganizationInventoryRequest);
        return localVarResp.getData();
    }

    /**
     * Release a list of claimed devices from an organization.
     * Release a list of claimed devices from an organization.
     * @param organizationId  (required)
     * @param releaseFromOrganizationInventoryRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> releaseFromOrganizationInventory_0WithHttpInfo(String organizationId, ReleaseFromOrganizationInventoryRequest releaseFromOrganizationInventoryRequest) throws ApiException {
        okhttp3.Call localVarCall = releaseFromOrganizationInventory_0ValidateBeforeCall(organizationId, releaseFromOrganizationInventoryRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Release a list of claimed devices from an organization. (asynchronously)
     * Release a list of claimed devices from an organization.
     * @param organizationId  (required)
     * @param releaseFromOrganizationInventoryRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releaseFromOrganizationInventory_0Async(String organizationId, ReleaseFromOrganizationInventoryRequest releaseFromOrganizationInventoryRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = releaseFromOrganizationInventory_0ValidateBeforeCall(organizationId, releaseFromOrganizationInventoryRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeNetworkDevices_0
     * @param networkId  (required)
     * @param removeNetworkDevicesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeNetworkDevices_0Call(String networkId, RemoveNetworkDevicesRequest removeNetworkDevicesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = removeNetworkDevicesRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/devices/remove"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeNetworkDevices_0ValidateBeforeCall(String networkId, RemoveNetworkDevicesRequest removeNetworkDevicesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling removeNetworkDevices_0(Async)");
        }

        // verify the required parameter 'removeNetworkDevicesRequest' is set
        if (removeNetworkDevicesRequest == null) {
            throw new ApiException("Missing the required parameter 'removeNetworkDevicesRequest' when calling removeNetworkDevices_0(Async)");
        }

        return removeNetworkDevices_0Call(networkId, removeNetworkDevicesRequest, _callback);

    }

    /**
     * Remove a single device
     * Remove a single device
     * @param networkId  (required)
     * @param removeNetworkDevicesRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void removeNetworkDevices_0(String networkId, RemoveNetworkDevicesRequest removeNetworkDevicesRequest) throws ApiException {
        removeNetworkDevices_0WithHttpInfo(networkId, removeNetworkDevicesRequest);
    }

    /**
     * Remove a single device
     * Remove a single device
     * @param networkId  (required)
     * @param removeNetworkDevicesRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeNetworkDevices_0WithHttpInfo(String networkId, RemoveNetworkDevicesRequest removeNetworkDevicesRequest) throws ApiException {
        okhttp3.Call localVarCall = removeNetworkDevices_0ValidateBeforeCall(networkId, removeNetworkDevicesRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a single device (asynchronously)
     * Remove a single device
     * @param networkId  (required)
     * @param removeNetworkDevicesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeNetworkDevices_0Async(String networkId, RemoveNetworkDevicesRequest removeNetworkDevicesRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeNetworkDevices_0ValidateBeforeCall(networkId, removeNetworkDevicesRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeNetworkSwitchStack_0
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param removeNetworkSwitchStackRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeNetworkSwitchStack_0Call(String networkId, String switchStackId, RemoveNetworkSwitchStackRequest removeNetworkSwitchStackRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = removeNetworkSwitchStackRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/stacks/{switchStackId}/remove"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "switchStackId" + "}", localVarApiClient.escapeString(switchStackId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeNetworkSwitchStack_0ValidateBeforeCall(String networkId, String switchStackId, RemoveNetworkSwitchStackRequest removeNetworkSwitchStackRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling removeNetworkSwitchStack_0(Async)");
        }

        // verify the required parameter 'switchStackId' is set
        if (switchStackId == null) {
            throw new ApiException("Missing the required parameter 'switchStackId' when calling removeNetworkSwitchStack_0(Async)");
        }

        // verify the required parameter 'removeNetworkSwitchStackRequest' is set
        if (removeNetworkSwitchStackRequest == null) {
            throw new ApiException("Missing the required parameter 'removeNetworkSwitchStackRequest' when calling removeNetworkSwitchStack_0(Async)");
        }

        return removeNetworkSwitchStack_0Call(networkId, switchStackId, removeNetworkSwitchStackRequest, _callback);

    }

    /**
     * Remove a switch from a stack
     * Remove a switch from a stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param removeNetworkSwitchStackRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object removeNetworkSwitchStack_0(String networkId, String switchStackId, RemoveNetworkSwitchStackRequest removeNetworkSwitchStackRequest) throws ApiException {
        ApiResponse<Object> localVarResp = removeNetworkSwitchStack_0WithHttpInfo(networkId, switchStackId, removeNetworkSwitchStackRequest);
        return localVarResp.getData();
    }

    /**
     * Remove a switch from a stack
     * Remove a switch from a stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param removeNetworkSwitchStackRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> removeNetworkSwitchStack_0WithHttpInfo(String networkId, String switchStackId, RemoveNetworkSwitchStackRequest removeNetworkSwitchStackRequest) throws ApiException {
        okhttp3.Call localVarCall = removeNetworkSwitchStack_0ValidateBeforeCall(networkId, switchStackId, removeNetworkSwitchStackRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove a switch from a stack (asynchronously)
     * Remove a switch from a stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param removeNetworkSwitchStackRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeNetworkSwitchStack_0Async(String networkId, String switchStackId, RemoveNetworkSwitchStackRequest removeNetworkSwitchStackRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeNetworkSwitchStack_0ValidateBeforeCall(networkId, switchStackId, removeNetworkSwitchStackRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for renewOrganizationLicensesSeats_0
     * @param organizationId  (required)
     * @param renewOrganizationLicensesSeatsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call renewOrganizationLicensesSeats_0Call(String organizationId, RenewOrganizationLicensesSeatsRequest renewOrganizationLicensesSeatsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = renewOrganizationLicensesSeatsRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/licenses/renewSeats"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call renewOrganizationLicensesSeats_0ValidateBeforeCall(String organizationId, RenewOrganizationLicensesSeatsRequest renewOrganizationLicensesSeatsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling renewOrganizationLicensesSeats_0(Async)");
        }

        // verify the required parameter 'renewOrganizationLicensesSeatsRequest' is set
        if (renewOrganizationLicensesSeatsRequest == null) {
            throw new ApiException("Missing the required parameter 'renewOrganizationLicensesSeatsRequest' when calling renewOrganizationLicensesSeats_0(Async)");
        }

        return renewOrganizationLicensesSeats_0Call(organizationId, renewOrganizationLicensesSeatsRequest, _callback);

    }

    /**
     * Renew SM seats of a license
     * Renew SM seats of a license. This will extend the license expiration date of managed SM devices covered by this license
     * @param organizationId  (required)
     * @param renewOrganizationLicensesSeatsRequest  (required)
     * @return AssignOrganizationLicensesSeats200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public AssignOrganizationLicensesSeats200Response renewOrganizationLicensesSeats_0(String organizationId, RenewOrganizationLicensesSeatsRequest renewOrganizationLicensesSeatsRequest) throws ApiException {
        ApiResponse<AssignOrganizationLicensesSeats200Response> localVarResp = renewOrganizationLicensesSeats_0WithHttpInfo(organizationId, renewOrganizationLicensesSeatsRequest);
        return localVarResp.getData();
    }

    /**
     * Renew SM seats of a license
     * Renew SM seats of a license. This will extend the license expiration date of managed SM devices covered by this license
     * @param organizationId  (required)
     * @param renewOrganizationLicensesSeatsRequest  (required)
     * @return ApiResponse&lt;AssignOrganizationLicensesSeats200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssignOrganizationLicensesSeats200Response> renewOrganizationLicensesSeats_0WithHttpInfo(String organizationId, RenewOrganizationLicensesSeatsRequest renewOrganizationLicensesSeatsRequest) throws ApiException {
        okhttp3.Call localVarCall = renewOrganizationLicensesSeats_0ValidateBeforeCall(organizationId, renewOrganizationLicensesSeatsRequest, null);
        Type localVarReturnType = new TypeToken<AssignOrganizationLicensesSeats200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Renew SM seats of a license (asynchronously)
     * Renew SM seats of a license. This will extend the license expiration date of managed SM devices covered by this license
     * @param organizationId  (required)
     * @param renewOrganizationLicensesSeatsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call renewOrganizationLicensesSeats_0Async(String organizationId, RenewOrganizationLicensesSeatsRequest renewOrganizationLicensesSeatsRequest, final ApiCallback<AssignOrganizationLicensesSeats200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = renewOrganizationLicensesSeats_0ValidateBeforeCall(organizationId, renewOrganizationLicensesSeatsRequest, _callback);
        Type localVarReturnType = new TypeToken<AssignOrganizationLicensesSeats200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rollbacksNetworkFirmwareUpgradesStagedEvents_0
     * @param networkId  (required)
     * @param rollbacksNetworkFirmwareUpgradesStagedEventsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rollbacksNetworkFirmwareUpgradesStagedEvents_0Call(String networkId, RollbacksNetworkFirmwareUpgradesStagedEventsRequest rollbacksNetworkFirmwareUpgradesStagedEventsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rollbacksNetworkFirmwareUpgradesStagedEventsRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/firmwareUpgrades/staged/events/rollbacks"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rollbacksNetworkFirmwareUpgradesStagedEvents_0ValidateBeforeCall(String networkId, RollbacksNetworkFirmwareUpgradesStagedEventsRequest rollbacksNetworkFirmwareUpgradesStagedEventsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling rollbacksNetworkFirmwareUpgradesStagedEvents_0(Async)");
        }

        // verify the required parameter 'rollbacksNetworkFirmwareUpgradesStagedEventsRequest' is set
        if (rollbacksNetworkFirmwareUpgradesStagedEventsRequest == null) {
            throw new ApiException("Missing the required parameter 'rollbacksNetworkFirmwareUpgradesStagedEventsRequest' when calling rollbacksNetworkFirmwareUpgradesStagedEvents_0(Async)");
        }

        return rollbacksNetworkFirmwareUpgradesStagedEvents_0Call(networkId, rollbacksNetworkFirmwareUpgradesStagedEventsRequest, _callback);

    }

    /**
     * Rollback a Staged Upgrade Event for a network
     * Rollback a Staged Upgrade Event for a network
     * @param networkId  (required)
     * @param rollbacksNetworkFirmwareUpgradesStagedEventsRequest  (required)
     * @return GetNetworkFirmwareUpgradesStagedEvents200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkFirmwareUpgradesStagedEvents200Response rollbacksNetworkFirmwareUpgradesStagedEvents_0(String networkId, RollbacksNetworkFirmwareUpgradesStagedEventsRequest rollbacksNetworkFirmwareUpgradesStagedEventsRequest) throws ApiException {
        ApiResponse<GetNetworkFirmwareUpgradesStagedEvents200Response> localVarResp = rollbacksNetworkFirmwareUpgradesStagedEvents_0WithHttpInfo(networkId, rollbacksNetworkFirmwareUpgradesStagedEventsRequest);
        return localVarResp.getData();
    }

    /**
     * Rollback a Staged Upgrade Event for a network
     * Rollback a Staged Upgrade Event for a network
     * @param networkId  (required)
     * @param rollbacksNetworkFirmwareUpgradesStagedEventsRequest  (required)
     * @return ApiResponse&lt;GetNetworkFirmwareUpgradesStagedEvents200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkFirmwareUpgradesStagedEvents200Response> rollbacksNetworkFirmwareUpgradesStagedEvents_0WithHttpInfo(String networkId, RollbacksNetworkFirmwareUpgradesStagedEventsRequest rollbacksNetworkFirmwareUpgradesStagedEventsRequest) throws ApiException {
        okhttp3.Call localVarCall = rollbacksNetworkFirmwareUpgradesStagedEvents_0ValidateBeforeCall(networkId, rollbacksNetworkFirmwareUpgradesStagedEventsRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkFirmwareUpgradesStagedEvents200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Rollback a Staged Upgrade Event for a network (asynchronously)
     * Rollback a Staged Upgrade Event for a network
     * @param networkId  (required)
     * @param rollbacksNetworkFirmwareUpgradesStagedEventsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rollbacksNetworkFirmwareUpgradesStagedEvents_0Async(String networkId, RollbacksNetworkFirmwareUpgradesStagedEventsRequest rollbacksNetworkFirmwareUpgradesStagedEventsRequest, final ApiCallback<GetNetworkFirmwareUpgradesStagedEvents200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = rollbacksNetworkFirmwareUpgradesStagedEvents_0ValidateBeforeCall(networkId, rollbacksNetworkFirmwareUpgradesStagedEventsRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkFirmwareUpgradesStagedEvents200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for splitNetwork_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call splitNetwork_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/split"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call splitNetwork_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling splitNetwork_0(Async)");
        }

        return splitNetwork_0Call(networkId, _callback);

    }

    /**
     * Split a combined network into individual networks for each type of device
     * Split a combined network into individual networks for each type of device
     * @param networkId  (required)
     * @return SplitNetwork200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SplitNetwork200Response splitNetwork_0(String networkId) throws ApiException {
        ApiResponse<SplitNetwork200Response> localVarResp = splitNetwork_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Split a combined network into individual networks for each type of device
     * Split a combined network into individual networks for each type of device
     * @param networkId  (required)
     * @return ApiResponse&lt;SplitNetwork200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SplitNetwork200Response> splitNetwork_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = splitNetwork_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<SplitNetwork200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Split a combined network into individual networks for each type of device (asynchronously)
     * Split a combined network into individual networks for each type of device
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call splitNetwork_0Async(String networkId, final ApiCallback<SplitNetwork200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = splitNetwork_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<SplitNetwork200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for swapNetworkApplianceWarmSpare_0
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call swapNetworkApplianceWarmSpare_0Call(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/warmSpare/swap"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call swapNetworkApplianceWarmSpare_0ValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling swapNetworkApplianceWarmSpare_0(Async)");
        }

        return swapNetworkApplianceWarmSpare_0Call(networkId, _callback);

    }

    /**
     * Swap MX primary and warm spare appliances
     * Swap MX primary and warm spare appliances
     * @param networkId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object swapNetworkApplianceWarmSpare_0(String networkId) throws ApiException {
        ApiResponse<Object> localVarResp = swapNetworkApplianceWarmSpare_0WithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * Swap MX primary and warm spare appliances
     * Swap MX primary and warm spare appliances
     * @param networkId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> swapNetworkApplianceWarmSpare_0WithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = swapNetworkApplianceWarmSpare_0ValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Swap MX primary and warm spare appliances (asynchronously)
     * Swap MX primary and warm spare appliances
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call swapNetworkApplianceWarmSpare_0Async(String networkId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = swapNetworkApplianceWarmSpare_0ValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unbindNetwork_0
     * @param networkId  (required)
     * @param unbindNetworkRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unbindNetwork_0Call(String networkId, UnbindNetworkRequest unbindNetworkRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = unbindNetworkRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/unbind"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unbindNetwork_0ValidateBeforeCall(String networkId, UnbindNetworkRequest unbindNetworkRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling unbindNetwork_0(Async)");
        }

        return unbindNetwork_0Call(networkId, unbindNetworkRequest, _callback);

    }

    /**
     * Unbind a network from a template.
     * Unbind a network from a template.
     * @param networkId  (required)
     * @param unbindNetworkRequest  (optional)
     * @return GetNetwork200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetwork200Response unbindNetwork_0(String networkId, UnbindNetworkRequest unbindNetworkRequest) throws ApiException {
        ApiResponse<GetNetwork200Response> localVarResp = unbindNetwork_0WithHttpInfo(networkId, unbindNetworkRequest);
        return localVarResp.getData();
    }

    /**
     * Unbind a network from a template.
     * Unbind a network from a template.
     * @param networkId  (required)
     * @param unbindNetworkRequest  (optional)
     * @return ApiResponse&lt;GetNetwork200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetwork200Response> unbindNetwork_0WithHttpInfo(String networkId, UnbindNetworkRequest unbindNetworkRequest) throws ApiException {
        okhttp3.Call localVarCall = unbindNetwork_0ValidateBeforeCall(networkId, unbindNetworkRequest, null);
        Type localVarReturnType = new TypeToken<GetNetwork200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Unbind a network from a template. (asynchronously)
     * Unbind a network from a template.
     * @param networkId  (required)
     * @param unbindNetworkRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unbindNetwork_0Async(String networkId, UnbindNetworkRequest unbindNetworkRequest, final ApiCallback<GetNetwork200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = unbindNetwork_0ValidateBeforeCall(networkId, unbindNetworkRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetwork200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unenrollNetworkSmDevice_0
     * @param networkId  (required)
     * @param deviceId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unenrollNetworkSmDevice_0Call(String networkId, String deviceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/sm/devices/{deviceId}/unenroll"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "deviceId" + "}", localVarApiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unenrollNetworkSmDevice_0ValidateBeforeCall(String networkId, String deviceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling unenrollNetworkSmDevice_0(Async)");
        }

        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling unenrollNetworkSmDevice_0(Async)");
        }

        return unenrollNetworkSmDevice_0Call(networkId, deviceId, _callback);

    }

    /**
     * Unenroll a device
     * Unenroll a device
     * @param networkId  (required)
     * @param deviceId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object unenrollNetworkSmDevice_0(String networkId, String deviceId) throws ApiException {
        ApiResponse<Object> localVarResp = unenrollNetworkSmDevice_0WithHttpInfo(networkId, deviceId);
        return localVarResp.getData();
    }

    /**
     * Unenroll a device
     * Unenroll a device
     * @param networkId  (required)
     * @param deviceId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> unenrollNetworkSmDevice_0WithHttpInfo(String networkId, String deviceId) throws ApiException {
        okhttp3.Call localVarCall = unenrollNetworkSmDevice_0ValidateBeforeCall(networkId, deviceId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Unenroll a device (asynchronously)
     * Unenroll a device
     * @param networkId  (required)
     * @param deviceId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unenrollNetworkSmDevice_0Async(String networkId, String deviceId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = unenrollNetworkSmDevice_0ValidateBeforeCall(networkId, deviceId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDeviceApplianceUplinksSettings_0
     * @param serial  (required)
     * @param updateDeviceApplianceUplinksSettingsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDeviceApplianceUplinksSettings_0Call(String serial, UpdateDeviceApplianceUplinksSettingsRequest updateDeviceApplianceUplinksSettingsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateDeviceApplianceUplinksSettingsRequest;

        // create path and map variables
        String localVarPath = "/devices/{serial}/appliance/uplinks/settings"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDeviceApplianceUplinksSettings_0ValidateBeforeCall(String serial, UpdateDeviceApplianceUplinksSettingsRequest updateDeviceApplianceUplinksSettingsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling updateDeviceApplianceUplinksSettings_0(Async)");
        }

        // verify the required parameter 'updateDeviceApplianceUplinksSettingsRequest' is set
        if (updateDeviceApplianceUplinksSettingsRequest == null) {
            throw new ApiException("Missing the required parameter 'updateDeviceApplianceUplinksSettingsRequest' when calling updateDeviceApplianceUplinksSettings_0(Async)");
        }

        return updateDeviceApplianceUplinksSettings_0Call(serial, updateDeviceApplianceUplinksSettingsRequest, _callback);

    }

    /**
     * Update the uplink settings for an MX appliance
     * Update the uplink settings for an MX appliance
     * @param serial  (required)
     * @param updateDeviceApplianceUplinksSettingsRequest  (required)
     * @return GetDeviceApplianceUplinksSettings200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetDeviceApplianceUplinksSettings200Response updateDeviceApplianceUplinksSettings_0(String serial, UpdateDeviceApplianceUplinksSettingsRequest updateDeviceApplianceUplinksSettingsRequest) throws ApiException {
        ApiResponse<GetDeviceApplianceUplinksSettings200Response> localVarResp = updateDeviceApplianceUplinksSettings_0WithHttpInfo(serial, updateDeviceApplianceUplinksSettingsRequest);
        return localVarResp.getData();
    }

    /**
     * Update the uplink settings for an MX appliance
     * Update the uplink settings for an MX appliance
     * @param serial  (required)
     * @param updateDeviceApplianceUplinksSettingsRequest  (required)
     * @return ApiResponse&lt;GetDeviceApplianceUplinksSettings200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDeviceApplianceUplinksSettings200Response> updateDeviceApplianceUplinksSettings_0WithHttpInfo(String serial, UpdateDeviceApplianceUplinksSettingsRequest updateDeviceApplianceUplinksSettingsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDeviceApplianceUplinksSettings_0ValidateBeforeCall(serial, updateDeviceApplianceUplinksSettingsRequest, null);
        Type localVarReturnType = new TypeToken<GetDeviceApplianceUplinksSettings200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the uplink settings for an MX appliance (asynchronously)
     * Update the uplink settings for an MX appliance
     * @param serial  (required)
     * @param updateDeviceApplianceUplinksSettingsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDeviceApplianceUplinksSettings_0Async(String serial, UpdateDeviceApplianceUplinksSettingsRequest updateDeviceApplianceUplinksSettingsRequest, final ApiCallback<GetDeviceApplianceUplinksSettings200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDeviceApplianceUplinksSettings_0ValidateBeforeCall(serial, updateDeviceApplianceUplinksSettingsRequest, _callback);
        Type localVarReturnType = new TypeToken<GetDeviceApplianceUplinksSettings200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDeviceCameraCustomAnalytics_0
     * @param serial  (required)
     * @param updateDeviceCameraCustomAnalyticsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDeviceCameraCustomAnalytics_0Call(String serial, UpdateDeviceCameraCustomAnalyticsRequest updateDeviceCameraCustomAnalyticsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateDeviceCameraCustomAnalyticsRequest;

        // create path and map variables
        String localVarPath = "/devices/{serial}/camera/customAnalytics"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDeviceCameraCustomAnalytics_0ValidateBeforeCall(String serial, UpdateDeviceCameraCustomAnalyticsRequest updateDeviceCameraCustomAnalyticsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling updateDeviceCameraCustomAnalytics_0(Async)");
        }

        return updateDeviceCameraCustomAnalytics_0Call(serial, updateDeviceCameraCustomAnalyticsRequest, _callback);

    }

    /**
     * Update custom analytics settings for a camera
     * Update custom analytics settings for a camera
     * @param serial  (required)
     * @param updateDeviceCameraCustomAnalyticsRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateDeviceCameraCustomAnalytics_0(String serial, UpdateDeviceCameraCustomAnalyticsRequest updateDeviceCameraCustomAnalyticsRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateDeviceCameraCustomAnalytics_0WithHttpInfo(serial, updateDeviceCameraCustomAnalyticsRequest);
        return localVarResp.getData();
    }

    /**
     * Update custom analytics settings for a camera
     * Update custom analytics settings for a camera
     * @param serial  (required)
     * @param updateDeviceCameraCustomAnalyticsRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateDeviceCameraCustomAnalytics_0WithHttpInfo(String serial, UpdateDeviceCameraCustomAnalyticsRequest updateDeviceCameraCustomAnalyticsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDeviceCameraCustomAnalytics_0ValidateBeforeCall(serial, updateDeviceCameraCustomAnalyticsRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update custom analytics settings for a camera (asynchronously)
     * Update custom analytics settings for a camera
     * @param serial  (required)
     * @param updateDeviceCameraCustomAnalyticsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDeviceCameraCustomAnalytics_0Async(String serial, UpdateDeviceCameraCustomAnalyticsRequest updateDeviceCameraCustomAnalyticsRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDeviceCameraCustomAnalytics_0ValidateBeforeCall(serial, updateDeviceCameraCustomAnalyticsRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDeviceCameraQualityAndRetention_0
     * @param serial  (required)
     * @param updateDeviceCameraQualityAndRetentionRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDeviceCameraQualityAndRetention_0Call(String serial, UpdateDeviceCameraQualityAndRetentionRequest updateDeviceCameraQualityAndRetentionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateDeviceCameraQualityAndRetentionRequest;

        // create path and map variables
        String localVarPath = "/devices/{serial}/camera/qualityAndRetention"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDeviceCameraQualityAndRetention_0ValidateBeforeCall(String serial, UpdateDeviceCameraQualityAndRetentionRequest updateDeviceCameraQualityAndRetentionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling updateDeviceCameraQualityAndRetention_0(Async)");
        }

        return updateDeviceCameraQualityAndRetention_0Call(serial, updateDeviceCameraQualityAndRetentionRequest, _callback);

    }

    /**
     * Update quality and retention settings for the given camera
     * Update quality and retention settings for the given camera
     * @param serial  (required)
     * @param updateDeviceCameraQualityAndRetentionRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateDeviceCameraQualityAndRetention_0(String serial, UpdateDeviceCameraQualityAndRetentionRequest updateDeviceCameraQualityAndRetentionRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateDeviceCameraQualityAndRetention_0WithHttpInfo(serial, updateDeviceCameraQualityAndRetentionRequest);
        return localVarResp.getData();
    }

    /**
     * Update quality and retention settings for the given camera
     * Update quality and retention settings for the given camera
     * @param serial  (required)
     * @param updateDeviceCameraQualityAndRetentionRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateDeviceCameraQualityAndRetention_0WithHttpInfo(String serial, UpdateDeviceCameraQualityAndRetentionRequest updateDeviceCameraQualityAndRetentionRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDeviceCameraQualityAndRetention_0ValidateBeforeCall(serial, updateDeviceCameraQualityAndRetentionRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update quality and retention settings for the given camera (asynchronously)
     * Update quality and retention settings for the given camera
     * @param serial  (required)
     * @param updateDeviceCameraQualityAndRetentionRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDeviceCameraQualityAndRetention_0Async(String serial, UpdateDeviceCameraQualityAndRetentionRequest updateDeviceCameraQualityAndRetentionRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDeviceCameraQualityAndRetention_0ValidateBeforeCall(serial, updateDeviceCameraQualityAndRetentionRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDeviceCameraSense_0
     * @param serial  (required)
     * @param updateDeviceCameraSenseRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDeviceCameraSense_0Call(String serial, UpdateDeviceCameraSenseRequest updateDeviceCameraSenseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateDeviceCameraSenseRequest;

        // create path and map variables
        String localVarPath = "/devices/{serial}/camera/sense"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDeviceCameraSense_0ValidateBeforeCall(String serial, UpdateDeviceCameraSenseRequest updateDeviceCameraSenseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling updateDeviceCameraSense_0(Async)");
        }

        return updateDeviceCameraSense_0Call(serial, updateDeviceCameraSenseRequest, _callback);

    }

    /**
     * Update sense settings for the given camera
     * Update sense settings for the given camera
     * @param serial  (required)
     * @param updateDeviceCameraSenseRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateDeviceCameraSense_0(String serial, UpdateDeviceCameraSenseRequest updateDeviceCameraSenseRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateDeviceCameraSense_0WithHttpInfo(serial, updateDeviceCameraSenseRequest);
        return localVarResp.getData();
    }

    /**
     * Update sense settings for the given camera
     * Update sense settings for the given camera
     * @param serial  (required)
     * @param updateDeviceCameraSenseRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateDeviceCameraSense_0WithHttpInfo(String serial, UpdateDeviceCameraSenseRequest updateDeviceCameraSenseRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDeviceCameraSense_0ValidateBeforeCall(serial, updateDeviceCameraSenseRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update sense settings for the given camera (asynchronously)
     * Update sense settings for the given camera
     * @param serial  (required)
     * @param updateDeviceCameraSenseRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDeviceCameraSense_0Async(String serial, UpdateDeviceCameraSenseRequest updateDeviceCameraSenseRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDeviceCameraSense_0ValidateBeforeCall(serial, updateDeviceCameraSenseRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDeviceCameraVideoSettings_0
     * @param serial  (required)
     * @param updateDeviceCameraVideoSettingsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDeviceCameraVideoSettings_0Call(String serial, UpdateDeviceCameraVideoSettingsRequest updateDeviceCameraVideoSettingsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateDeviceCameraVideoSettingsRequest;

        // create path and map variables
        String localVarPath = "/devices/{serial}/camera/video/settings"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDeviceCameraVideoSettings_0ValidateBeforeCall(String serial, UpdateDeviceCameraVideoSettingsRequest updateDeviceCameraVideoSettingsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling updateDeviceCameraVideoSettings_0(Async)");
        }

        return updateDeviceCameraVideoSettings_0Call(serial, updateDeviceCameraVideoSettingsRequest, _callback);

    }

    /**
     * Update video settings for the given camera
     * Update video settings for the given camera
     * @param serial  (required)
     * @param updateDeviceCameraVideoSettingsRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateDeviceCameraVideoSettings_0(String serial, UpdateDeviceCameraVideoSettingsRequest updateDeviceCameraVideoSettingsRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateDeviceCameraVideoSettings_0WithHttpInfo(serial, updateDeviceCameraVideoSettingsRequest);
        return localVarResp.getData();
    }

    /**
     * Update video settings for the given camera
     * Update video settings for the given camera
     * @param serial  (required)
     * @param updateDeviceCameraVideoSettingsRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateDeviceCameraVideoSettings_0WithHttpInfo(String serial, UpdateDeviceCameraVideoSettingsRequest updateDeviceCameraVideoSettingsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDeviceCameraVideoSettings_0ValidateBeforeCall(serial, updateDeviceCameraVideoSettingsRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update video settings for the given camera (asynchronously)
     * Update video settings for the given camera
     * @param serial  (required)
     * @param updateDeviceCameraVideoSettingsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDeviceCameraVideoSettings_0Async(String serial, UpdateDeviceCameraVideoSettingsRequest updateDeviceCameraVideoSettingsRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDeviceCameraVideoSettings_0ValidateBeforeCall(serial, updateDeviceCameraVideoSettingsRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDeviceCameraWirelessProfiles_0
     * @param serial  (required)
     * @param updateDeviceCameraWirelessProfilesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDeviceCameraWirelessProfiles_0Call(String serial, UpdateDeviceCameraWirelessProfilesRequest updateDeviceCameraWirelessProfilesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateDeviceCameraWirelessProfilesRequest;

        // create path and map variables
        String localVarPath = "/devices/{serial}/camera/wirelessProfiles"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDeviceCameraWirelessProfiles_0ValidateBeforeCall(String serial, UpdateDeviceCameraWirelessProfilesRequest updateDeviceCameraWirelessProfilesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling updateDeviceCameraWirelessProfiles_0(Async)");
        }

        // verify the required parameter 'updateDeviceCameraWirelessProfilesRequest' is set
        if (updateDeviceCameraWirelessProfilesRequest == null) {
            throw new ApiException("Missing the required parameter 'updateDeviceCameraWirelessProfilesRequest' when calling updateDeviceCameraWirelessProfiles_0(Async)");
        }

        return updateDeviceCameraWirelessProfiles_0Call(serial, updateDeviceCameraWirelessProfilesRequest, _callback);

    }

    /**
     * Assign wireless profiles to the given camera
     * Assign wireless profiles to the given camera. Incremental updates are not supported, all profile assignment need to be supplied at once.
     * @param serial  (required)
     * @param updateDeviceCameraWirelessProfilesRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateDeviceCameraWirelessProfiles_0(String serial, UpdateDeviceCameraWirelessProfilesRequest updateDeviceCameraWirelessProfilesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateDeviceCameraWirelessProfiles_0WithHttpInfo(serial, updateDeviceCameraWirelessProfilesRequest);
        return localVarResp.getData();
    }

    /**
     * Assign wireless profiles to the given camera
     * Assign wireless profiles to the given camera. Incremental updates are not supported, all profile assignment need to be supplied at once.
     * @param serial  (required)
     * @param updateDeviceCameraWirelessProfilesRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateDeviceCameraWirelessProfiles_0WithHttpInfo(String serial, UpdateDeviceCameraWirelessProfilesRequest updateDeviceCameraWirelessProfilesRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDeviceCameraWirelessProfiles_0ValidateBeforeCall(serial, updateDeviceCameraWirelessProfilesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Assign wireless profiles to the given camera (asynchronously)
     * Assign wireless profiles to the given camera. Incremental updates are not supported, all profile assignment need to be supplied at once.
     * @param serial  (required)
     * @param updateDeviceCameraWirelessProfilesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDeviceCameraWirelessProfiles_0Async(String serial, UpdateDeviceCameraWirelessProfilesRequest updateDeviceCameraWirelessProfilesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDeviceCameraWirelessProfiles_0ValidateBeforeCall(serial, updateDeviceCameraWirelessProfilesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDeviceCellularGatewayLan_0
     * @param serial  (required)
     * @param updateDeviceCellularGatewayLanRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDeviceCellularGatewayLan_0Call(String serial, UpdateDeviceCellularGatewayLanRequest updateDeviceCellularGatewayLanRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateDeviceCellularGatewayLanRequest;

        // create path and map variables
        String localVarPath = "/devices/{serial}/cellularGateway/lan"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDeviceCellularGatewayLan_0ValidateBeforeCall(String serial, UpdateDeviceCellularGatewayLanRequest updateDeviceCellularGatewayLanRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling updateDeviceCellularGatewayLan_0(Async)");
        }

        return updateDeviceCellularGatewayLan_0Call(serial, updateDeviceCellularGatewayLanRequest, _callback);

    }

    /**
     * Update the LAN Settings for a single MG.
     * Update the LAN Settings for a single MG.
     * @param serial  (required)
     * @param updateDeviceCellularGatewayLanRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateDeviceCellularGatewayLan_0(String serial, UpdateDeviceCellularGatewayLanRequest updateDeviceCellularGatewayLanRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateDeviceCellularGatewayLan_0WithHttpInfo(serial, updateDeviceCellularGatewayLanRequest);
        return localVarResp.getData();
    }

    /**
     * Update the LAN Settings for a single MG.
     * Update the LAN Settings for a single MG.
     * @param serial  (required)
     * @param updateDeviceCellularGatewayLanRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateDeviceCellularGatewayLan_0WithHttpInfo(String serial, UpdateDeviceCellularGatewayLanRequest updateDeviceCellularGatewayLanRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDeviceCellularGatewayLan_0ValidateBeforeCall(serial, updateDeviceCellularGatewayLanRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the LAN Settings for a single MG. (asynchronously)
     * Update the LAN Settings for a single MG.
     * @param serial  (required)
     * @param updateDeviceCellularGatewayLanRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDeviceCellularGatewayLan_0Async(String serial, UpdateDeviceCellularGatewayLanRequest updateDeviceCellularGatewayLanRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDeviceCellularGatewayLan_0ValidateBeforeCall(serial, updateDeviceCellularGatewayLanRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDeviceCellularGatewayPortForwardingRules_0
     * @param serial  (required)
     * @param updateDeviceCellularGatewayPortForwardingRulesRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDeviceCellularGatewayPortForwardingRules_0Call(String serial, UpdateDeviceCellularGatewayPortForwardingRulesRequest updateDeviceCellularGatewayPortForwardingRulesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateDeviceCellularGatewayPortForwardingRulesRequest;

        // create path and map variables
        String localVarPath = "/devices/{serial}/cellularGateway/portForwardingRules"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDeviceCellularGatewayPortForwardingRules_0ValidateBeforeCall(String serial, UpdateDeviceCellularGatewayPortForwardingRulesRequest updateDeviceCellularGatewayPortForwardingRulesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling updateDeviceCellularGatewayPortForwardingRules_0(Async)");
        }

        return updateDeviceCellularGatewayPortForwardingRules_0Call(serial, updateDeviceCellularGatewayPortForwardingRulesRequest, _callback);

    }

    /**
     * Updates the port forwarding rules for a single MG.
     * Updates the port forwarding rules for a single MG.
     * @param serial  (required)
     * @param updateDeviceCellularGatewayPortForwardingRulesRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateDeviceCellularGatewayPortForwardingRules_0(String serial, UpdateDeviceCellularGatewayPortForwardingRulesRequest updateDeviceCellularGatewayPortForwardingRulesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateDeviceCellularGatewayPortForwardingRules_0WithHttpInfo(serial, updateDeviceCellularGatewayPortForwardingRulesRequest);
        return localVarResp.getData();
    }

    /**
     * Updates the port forwarding rules for a single MG.
     * Updates the port forwarding rules for a single MG.
     * @param serial  (required)
     * @param updateDeviceCellularGatewayPortForwardingRulesRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateDeviceCellularGatewayPortForwardingRules_0WithHttpInfo(String serial, UpdateDeviceCellularGatewayPortForwardingRulesRequest updateDeviceCellularGatewayPortForwardingRulesRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDeviceCellularGatewayPortForwardingRules_0ValidateBeforeCall(serial, updateDeviceCellularGatewayPortForwardingRulesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the port forwarding rules for a single MG. (asynchronously)
     * Updates the port forwarding rules for a single MG.
     * @param serial  (required)
     * @param updateDeviceCellularGatewayPortForwardingRulesRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDeviceCellularGatewayPortForwardingRules_0Async(String serial, UpdateDeviceCellularGatewayPortForwardingRulesRequest updateDeviceCellularGatewayPortForwardingRulesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDeviceCellularGatewayPortForwardingRules_0ValidateBeforeCall(serial, updateDeviceCellularGatewayPortForwardingRulesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDeviceCellularSims_0
     * @param serial  (required)
     * @param updateDeviceCellularSimsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDeviceCellularSims_0Call(String serial, UpdateDeviceCellularSimsRequest updateDeviceCellularSimsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateDeviceCellularSimsRequest;

        // create path and map variables
        String localVarPath = "/devices/{serial}/cellular/sims"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDeviceCellularSims_0ValidateBeforeCall(String serial, UpdateDeviceCellularSimsRequest updateDeviceCellularSimsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling updateDeviceCellularSims_0(Async)");
        }

        return updateDeviceCellularSims_0Call(serial, updateDeviceCellularSimsRequest, _callback);

    }

    /**
     * Updates the SIM and APN configurations for a cellular device.
     * Updates the SIM and APN configurations for a cellular device.
     * @param serial  (required)
     * @param updateDeviceCellularSimsRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateDeviceCellularSims_0(String serial, UpdateDeviceCellularSimsRequest updateDeviceCellularSimsRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateDeviceCellularSims_0WithHttpInfo(serial, updateDeviceCellularSimsRequest);
        return localVarResp.getData();
    }

    /**
     * Updates the SIM and APN configurations for a cellular device.
     * Updates the SIM and APN configurations for a cellular device.
     * @param serial  (required)
     * @param updateDeviceCellularSimsRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateDeviceCellularSims_0WithHttpInfo(String serial, UpdateDeviceCellularSimsRequest updateDeviceCellularSimsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDeviceCellularSims_0ValidateBeforeCall(serial, updateDeviceCellularSimsRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the SIM and APN configurations for a cellular device. (asynchronously)
     * Updates the SIM and APN configurations for a cellular device.
     * @param serial  (required)
     * @param updateDeviceCellularSimsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDeviceCellularSims_0Async(String serial, UpdateDeviceCellularSimsRequest updateDeviceCellularSimsRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDeviceCellularSims_0ValidateBeforeCall(serial, updateDeviceCellularSimsRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDeviceManagementInterface_0
     * @param serial  (required)
     * @param updateDeviceManagementInterfaceRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDeviceManagementInterface_0Call(String serial, UpdateDeviceManagementInterfaceRequest updateDeviceManagementInterfaceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateDeviceManagementInterfaceRequest;

        // create path and map variables
        String localVarPath = "/devices/{serial}/managementInterface"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDeviceManagementInterface_0ValidateBeforeCall(String serial, UpdateDeviceManagementInterfaceRequest updateDeviceManagementInterfaceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling updateDeviceManagementInterface_0(Async)");
        }

        return updateDeviceManagementInterface_0Call(serial, updateDeviceManagementInterfaceRequest, _callback);

    }

    /**
     * Update the management interface settings for a device
     * Update the management interface settings for a device
     * @param serial  (required)
     * @param updateDeviceManagementInterfaceRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateDeviceManagementInterface_0(String serial, UpdateDeviceManagementInterfaceRequest updateDeviceManagementInterfaceRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateDeviceManagementInterface_0WithHttpInfo(serial, updateDeviceManagementInterfaceRequest);
        return localVarResp.getData();
    }

    /**
     * Update the management interface settings for a device
     * Update the management interface settings for a device
     * @param serial  (required)
     * @param updateDeviceManagementInterfaceRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateDeviceManagementInterface_0WithHttpInfo(String serial, UpdateDeviceManagementInterfaceRequest updateDeviceManagementInterfaceRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDeviceManagementInterface_0ValidateBeforeCall(serial, updateDeviceManagementInterfaceRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the management interface settings for a device (asynchronously)
     * Update the management interface settings for a device
     * @param serial  (required)
     * @param updateDeviceManagementInterfaceRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDeviceManagementInterface_0Async(String serial, UpdateDeviceManagementInterfaceRequest updateDeviceManagementInterfaceRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDeviceManagementInterface_0ValidateBeforeCall(serial, updateDeviceManagementInterfaceRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDeviceSensorRelationships_0
     * @param serial  (required)
     * @param updateDeviceSensorRelationshipsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDeviceSensorRelationships_0Call(String serial, UpdateDeviceSensorRelationshipsRequest updateDeviceSensorRelationshipsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateDeviceSensorRelationshipsRequest;

        // create path and map variables
        String localVarPath = "/devices/{serial}/sensor/relationships"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDeviceSensorRelationships_0ValidateBeforeCall(String serial, UpdateDeviceSensorRelationshipsRequest updateDeviceSensorRelationshipsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling updateDeviceSensorRelationships_0(Async)");
        }

        return updateDeviceSensorRelationships_0Call(serial, updateDeviceSensorRelationshipsRequest, _callback);

    }

    /**
     * Assign one or more sensor roles to a given sensor or camera device.
     * Assign one or more sensor roles to a given sensor or camera device.
     * @param serial  (required)
     * @param updateDeviceSensorRelationshipsRequest  (optional)
     * @return GetDeviceSensorRelationships200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetDeviceSensorRelationships200ResponseInner updateDeviceSensorRelationships_0(String serial, UpdateDeviceSensorRelationshipsRequest updateDeviceSensorRelationshipsRequest) throws ApiException {
        ApiResponse<GetDeviceSensorRelationships200ResponseInner> localVarResp = updateDeviceSensorRelationships_0WithHttpInfo(serial, updateDeviceSensorRelationshipsRequest);
        return localVarResp.getData();
    }

    /**
     * Assign one or more sensor roles to a given sensor or camera device.
     * Assign one or more sensor roles to a given sensor or camera device.
     * @param serial  (required)
     * @param updateDeviceSensorRelationshipsRequest  (optional)
     * @return ApiResponse&lt;GetDeviceSensorRelationships200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDeviceSensorRelationships200ResponseInner> updateDeviceSensorRelationships_0WithHttpInfo(String serial, UpdateDeviceSensorRelationshipsRequest updateDeviceSensorRelationshipsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDeviceSensorRelationships_0ValidateBeforeCall(serial, updateDeviceSensorRelationshipsRequest, null);
        Type localVarReturnType = new TypeToken<GetDeviceSensorRelationships200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Assign one or more sensor roles to a given sensor or camera device. (asynchronously)
     * Assign one or more sensor roles to a given sensor or camera device.
     * @param serial  (required)
     * @param updateDeviceSensorRelationshipsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDeviceSensorRelationships_0Async(String serial, UpdateDeviceSensorRelationshipsRequest updateDeviceSensorRelationshipsRequest, final ApiCallback<GetDeviceSensorRelationships200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDeviceSensorRelationships_0ValidateBeforeCall(serial, updateDeviceSensorRelationshipsRequest, _callback);
        Type localVarReturnType = new TypeToken<GetDeviceSensorRelationships200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDeviceSwitchPort_0
     * @param serial  (required)
     * @param portId  (required)
     * @param updateDeviceSwitchPortRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDeviceSwitchPort_0Call(String serial, String portId, UpdateDeviceSwitchPortRequest updateDeviceSwitchPortRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateDeviceSwitchPortRequest;

        // create path and map variables
        String localVarPath = "/devices/{serial}/switch/ports/{portId}"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()))
            .replace("{" + "portId" + "}", localVarApiClient.escapeString(portId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDeviceSwitchPort_0ValidateBeforeCall(String serial, String portId, UpdateDeviceSwitchPortRequest updateDeviceSwitchPortRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling updateDeviceSwitchPort_0(Async)");
        }

        // verify the required parameter 'portId' is set
        if (portId == null) {
            throw new ApiException("Missing the required parameter 'portId' when calling updateDeviceSwitchPort_0(Async)");
        }

        return updateDeviceSwitchPort_0Call(serial, portId, updateDeviceSwitchPortRequest, _callback);

    }

    /**
     * Update a switch port
     * Update a switch port
     * @param serial  (required)
     * @param portId  (required)
     * @param updateDeviceSwitchPortRequest  (optional)
     * @return GetDeviceSwitchPorts200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetDeviceSwitchPorts200ResponseInner updateDeviceSwitchPort_0(String serial, String portId, UpdateDeviceSwitchPortRequest updateDeviceSwitchPortRequest) throws ApiException {
        ApiResponse<GetDeviceSwitchPorts200ResponseInner> localVarResp = updateDeviceSwitchPort_0WithHttpInfo(serial, portId, updateDeviceSwitchPortRequest);
        return localVarResp.getData();
    }

    /**
     * Update a switch port
     * Update a switch port
     * @param serial  (required)
     * @param portId  (required)
     * @param updateDeviceSwitchPortRequest  (optional)
     * @return ApiResponse&lt;GetDeviceSwitchPorts200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDeviceSwitchPorts200ResponseInner> updateDeviceSwitchPort_0WithHttpInfo(String serial, String portId, UpdateDeviceSwitchPortRequest updateDeviceSwitchPortRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDeviceSwitchPort_0ValidateBeforeCall(serial, portId, updateDeviceSwitchPortRequest, null);
        Type localVarReturnType = new TypeToken<GetDeviceSwitchPorts200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a switch port (asynchronously)
     * Update a switch port
     * @param serial  (required)
     * @param portId  (required)
     * @param updateDeviceSwitchPortRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDeviceSwitchPort_0Async(String serial, String portId, UpdateDeviceSwitchPortRequest updateDeviceSwitchPortRequest, final ApiCallback<GetDeviceSwitchPorts200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDeviceSwitchPort_0ValidateBeforeCall(serial, portId, updateDeviceSwitchPortRequest, _callback);
        Type localVarReturnType = new TypeToken<GetDeviceSwitchPorts200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDeviceSwitchRoutingInterfaceDhcp_0
     * @param serial  (required)
     * @param interfaceId  (required)
     * @param updateDeviceSwitchRoutingInterfaceDhcpRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDeviceSwitchRoutingInterfaceDhcp_0Call(String serial, String interfaceId, UpdateDeviceSwitchRoutingInterfaceDhcpRequest updateDeviceSwitchRoutingInterfaceDhcpRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateDeviceSwitchRoutingInterfaceDhcpRequest;

        // create path and map variables
        String localVarPath = "/devices/{serial}/switch/routing/interfaces/{interfaceId}/dhcp"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()))
            .replace("{" + "interfaceId" + "}", localVarApiClient.escapeString(interfaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDeviceSwitchRoutingInterfaceDhcp_0ValidateBeforeCall(String serial, String interfaceId, UpdateDeviceSwitchRoutingInterfaceDhcpRequest updateDeviceSwitchRoutingInterfaceDhcpRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling updateDeviceSwitchRoutingInterfaceDhcp_0(Async)");
        }

        // verify the required parameter 'interfaceId' is set
        if (interfaceId == null) {
            throw new ApiException("Missing the required parameter 'interfaceId' when calling updateDeviceSwitchRoutingInterfaceDhcp_0(Async)");
        }

        return updateDeviceSwitchRoutingInterfaceDhcp_0Call(serial, interfaceId, updateDeviceSwitchRoutingInterfaceDhcpRequest, _callback);

    }

    /**
     * Update a layer 3 interface DHCP configuration for a switch
     * Update a layer 3 interface DHCP configuration for a switch
     * @param serial  (required)
     * @param interfaceId  (required)
     * @param updateDeviceSwitchRoutingInterfaceDhcpRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateDeviceSwitchRoutingInterfaceDhcp_0(String serial, String interfaceId, UpdateDeviceSwitchRoutingInterfaceDhcpRequest updateDeviceSwitchRoutingInterfaceDhcpRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateDeviceSwitchRoutingInterfaceDhcp_0WithHttpInfo(serial, interfaceId, updateDeviceSwitchRoutingInterfaceDhcpRequest);
        return localVarResp.getData();
    }

    /**
     * Update a layer 3 interface DHCP configuration for a switch
     * Update a layer 3 interface DHCP configuration for a switch
     * @param serial  (required)
     * @param interfaceId  (required)
     * @param updateDeviceSwitchRoutingInterfaceDhcpRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateDeviceSwitchRoutingInterfaceDhcp_0WithHttpInfo(String serial, String interfaceId, UpdateDeviceSwitchRoutingInterfaceDhcpRequest updateDeviceSwitchRoutingInterfaceDhcpRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDeviceSwitchRoutingInterfaceDhcp_0ValidateBeforeCall(serial, interfaceId, updateDeviceSwitchRoutingInterfaceDhcpRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a layer 3 interface DHCP configuration for a switch (asynchronously)
     * Update a layer 3 interface DHCP configuration for a switch
     * @param serial  (required)
     * @param interfaceId  (required)
     * @param updateDeviceSwitchRoutingInterfaceDhcpRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDeviceSwitchRoutingInterfaceDhcp_0Async(String serial, String interfaceId, UpdateDeviceSwitchRoutingInterfaceDhcpRequest updateDeviceSwitchRoutingInterfaceDhcpRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDeviceSwitchRoutingInterfaceDhcp_0ValidateBeforeCall(serial, interfaceId, updateDeviceSwitchRoutingInterfaceDhcpRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDeviceSwitchRoutingInterface_0
     * @param serial  (required)
     * @param interfaceId  (required)
     * @param createDeviceSwitchRoutingInterfaceRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDeviceSwitchRoutingInterface_0Call(String serial, String interfaceId, CreateDeviceSwitchRoutingInterfaceRequest createDeviceSwitchRoutingInterfaceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDeviceSwitchRoutingInterfaceRequest;

        // create path and map variables
        String localVarPath = "/devices/{serial}/switch/routing/interfaces/{interfaceId}"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()))
            .replace("{" + "interfaceId" + "}", localVarApiClient.escapeString(interfaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDeviceSwitchRoutingInterface_0ValidateBeforeCall(String serial, String interfaceId, CreateDeviceSwitchRoutingInterfaceRequest createDeviceSwitchRoutingInterfaceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling updateDeviceSwitchRoutingInterface_0(Async)");
        }

        // verify the required parameter 'interfaceId' is set
        if (interfaceId == null) {
            throw new ApiException("Missing the required parameter 'interfaceId' when calling updateDeviceSwitchRoutingInterface_0(Async)");
        }

        return updateDeviceSwitchRoutingInterface_0Call(serial, interfaceId, createDeviceSwitchRoutingInterfaceRequest, _callback);

    }

    /**
     * Update a layer 3 interface for a switch
     * Update a layer 3 interface for a switch
     * @param serial  (required)
     * @param interfaceId  (required)
     * @param createDeviceSwitchRoutingInterfaceRequest  (optional)
     * @return GetDeviceSwitchRoutingInterfaces200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetDeviceSwitchRoutingInterfaces200ResponseInner updateDeviceSwitchRoutingInterface_0(String serial, String interfaceId, CreateDeviceSwitchRoutingInterfaceRequest createDeviceSwitchRoutingInterfaceRequest) throws ApiException {
        ApiResponse<GetDeviceSwitchRoutingInterfaces200ResponseInner> localVarResp = updateDeviceSwitchRoutingInterface_0WithHttpInfo(serial, interfaceId, createDeviceSwitchRoutingInterfaceRequest);
        return localVarResp.getData();
    }

    /**
     * Update a layer 3 interface for a switch
     * Update a layer 3 interface for a switch
     * @param serial  (required)
     * @param interfaceId  (required)
     * @param createDeviceSwitchRoutingInterfaceRequest  (optional)
     * @return ApiResponse&lt;GetDeviceSwitchRoutingInterfaces200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDeviceSwitchRoutingInterfaces200ResponseInner> updateDeviceSwitchRoutingInterface_0WithHttpInfo(String serial, String interfaceId, CreateDeviceSwitchRoutingInterfaceRequest createDeviceSwitchRoutingInterfaceRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDeviceSwitchRoutingInterface_0ValidateBeforeCall(serial, interfaceId, createDeviceSwitchRoutingInterfaceRequest, null);
        Type localVarReturnType = new TypeToken<GetDeviceSwitchRoutingInterfaces200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a layer 3 interface for a switch (asynchronously)
     * Update a layer 3 interface for a switch
     * @param serial  (required)
     * @param interfaceId  (required)
     * @param createDeviceSwitchRoutingInterfaceRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDeviceSwitchRoutingInterface_0Async(String serial, String interfaceId, CreateDeviceSwitchRoutingInterfaceRequest createDeviceSwitchRoutingInterfaceRequest, final ApiCallback<GetDeviceSwitchRoutingInterfaces200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDeviceSwitchRoutingInterface_0ValidateBeforeCall(serial, interfaceId, createDeviceSwitchRoutingInterfaceRequest, _callback);
        Type localVarReturnType = new TypeToken<GetDeviceSwitchRoutingInterfaces200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDeviceSwitchRoutingStaticRoute_0
     * @param serial  (required)
     * @param staticRouteId  (required)
     * @param updateDeviceSwitchRoutingStaticRouteRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDeviceSwitchRoutingStaticRoute_0Call(String serial, String staticRouteId, UpdateDeviceSwitchRoutingStaticRouteRequest updateDeviceSwitchRoutingStaticRouteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateDeviceSwitchRoutingStaticRouteRequest;

        // create path and map variables
        String localVarPath = "/devices/{serial}/switch/routing/staticRoutes/{staticRouteId}"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()))
            .replace("{" + "staticRouteId" + "}", localVarApiClient.escapeString(staticRouteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDeviceSwitchRoutingStaticRoute_0ValidateBeforeCall(String serial, String staticRouteId, UpdateDeviceSwitchRoutingStaticRouteRequest updateDeviceSwitchRoutingStaticRouteRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling updateDeviceSwitchRoutingStaticRoute_0(Async)");
        }

        // verify the required parameter 'staticRouteId' is set
        if (staticRouteId == null) {
            throw new ApiException("Missing the required parameter 'staticRouteId' when calling updateDeviceSwitchRoutingStaticRoute_0(Async)");
        }

        return updateDeviceSwitchRoutingStaticRoute_0Call(serial, staticRouteId, updateDeviceSwitchRoutingStaticRouteRequest, _callback);

    }

    /**
     * Update a layer 3 static route for a switch
     * Update a layer 3 static route for a switch
     * @param serial  (required)
     * @param staticRouteId  (required)
     * @param updateDeviceSwitchRoutingStaticRouteRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateDeviceSwitchRoutingStaticRoute_0(String serial, String staticRouteId, UpdateDeviceSwitchRoutingStaticRouteRequest updateDeviceSwitchRoutingStaticRouteRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateDeviceSwitchRoutingStaticRoute_0WithHttpInfo(serial, staticRouteId, updateDeviceSwitchRoutingStaticRouteRequest);
        return localVarResp.getData();
    }

    /**
     * Update a layer 3 static route for a switch
     * Update a layer 3 static route for a switch
     * @param serial  (required)
     * @param staticRouteId  (required)
     * @param updateDeviceSwitchRoutingStaticRouteRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateDeviceSwitchRoutingStaticRoute_0WithHttpInfo(String serial, String staticRouteId, UpdateDeviceSwitchRoutingStaticRouteRequest updateDeviceSwitchRoutingStaticRouteRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDeviceSwitchRoutingStaticRoute_0ValidateBeforeCall(serial, staticRouteId, updateDeviceSwitchRoutingStaticRouteRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a layer 3 static route for a switch (asynchronously)
     * Update a layer 3 static route for a switch
     * @param serial  (required)
     * @param staticRouteId  (required)
     * @param updateDeviceSwitchRoutingStaticRouteRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDeviceSwitchRoutingStaticRoute_0Async(String serial, String staticRouteId, UpdateDeviceSwitchRoutingStaticRouteRequest updateDeviceSwitchRoutingStaticRouteRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDeviceSwitchRoutingStaticRoute_0ValidateBeforeCall(serial, staticRouteId, updateDeviceSwitchRoutingStaticRouteRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDeviceSwitchWarmSpare_0
     * @param serial  (required)
     * @param updateDeviceSwitchWarmSpareRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDeviceSwitchWarmSpare_0Call(String serial, UpdateDeviceSwitchWarmSpareRequest updateDeviceSwitchWarmSpareRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateDeviceSwitchWarmSpareRequest;

        // create path and map variables
        String localVarPath = "/devices/{serial}/switch/warmSpare"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDeviceSwitchWarmSpare_0ValidateBeforeCall(String serial, UpdateDeviceSwitchWarmSpareRequest updateDeviceSwitchWarmSpareRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling updateDeviceSwitchWarmSpare_0(Async)");
        }

        // verify the required parameter 'updateDeviceSwitchWarmSpareRequest' is set
        if (updateDeviceSwitchWarmSpareRequest == null) {
            throw new ApiException("Missing the required parameter 'updateDeviceSwitchWarmSpareRequest' when calling updateDeviceSwitchWarmSpare_0(Async)");
        }

        return updateDeviceSwitchWarmSpare_0Call(serial, updateDeviceSwitchWarmSpareRequest, _callback);

    }

    /**
     * Update warm spare configuration for a switch
     * Update warm spare configuration for a switch. The spare will use the same L3 configuration as the primary. Note that this will irreversibly destroy any existing L3 configuration on the spare.
     * @param serial  (required)
     * @param updateDeviceSwitchWarmSpareRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateDeviceSwitchWarmSpare_0(String serial, UpdateDeviceSwitchWarmSpareRequest updateDeviceSwitchWarmSpareRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateDeviceSwitchWarmSpare_0WithHttpInfo(serial, updateDeviceSwitchWarmSpareRequest);
        return localVarResp.getData();
    }

    /**
     * Update warm spare configuration for a switch
     * Update warm spare configuration for a switch. The spare will use the same L3 configuration as the primary. Note that this will irreversibly destroy any existing L3 configuration on the spare.
     * @param serial  (required)
     * @param updateDeviceSwitchWarmSpareRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateDeviceSwitchWarmSpare_0WithHttpInfo(String serial, UpdateDeviceSwitchWarmSpareRequest updateDeviceSwitchWarmSpareRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDeviceSwitchWarmSpare_0ValidateBeforeCall(serial, updateDeviceSwitchWarmSpareRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update warm spare configuration for a switch (asynchronously)
     * Update warm spare configuration for a switch. The spare will use the same L3 configuration as the primary. Note that this will irreversibly destroy any existing L3 configuration on the spare.
     * @param serial  (required)
     * @param updateDeviceSwitchWarmSpareRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDeviceSwitchWarmSpare_0Async(String serial, UpdateDeviceSwitchWarmSpareRequest updateDeviceSwitchWarmSpareRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDeviceSwitchWarmSpare_0ValidateBeforeCall(serial, updateDeviceSwitchWarmSpareRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDeviceWirelessBluetoothSettings_0
     * @param serial  (required)
     * @param updateDeviceWirelessBluetoothSettingsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDeviceWirelessBluetoothSettings_0Call(String serial, UpdateDeviceWirelessBluetoothSettingsRequest updateDeviceWirelessBluetoothSettingsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateDeviceWirelessBluetoothSettingsRequest;

        // create path and map variables
        String localVarPath = "/devices/{serial}/wireless/bluetooth/settings"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDeviceWirelessBluetoothSettings_0ValidateBeforeCall(String serial, UpdateDeviceWirelessBluetoothSettingsRequest updateDeviceWirelessBluetoothSettingsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling updateDeviceWirelessBluetoothSettings_0(Async)");
        }

        return updateDeviceWirelessBluetoothSettings_0Call(serial, updateDeviceWirelessBluetoothSettingsRequest, _callback);

    }

    /**
     * Update the bluetooth settings for a wireless device
     * Update the bluetooth settings for a wireless device
     * @param serial  (required)
     * @param updateDeviceWirelessBluetoothSettingsRequest  (optional)
     * @return GetDeviceWirelessBluetoothSettings200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetDeviceWirelessBluetoothSettings200Response updateDeviceWirelessBluetoothSettings_0(String serial, UpdateDeviceWirelessBluetoothSettingsRequest updateDeviceWirelessBluetoothSettingsRequest) throws ApiException {
        ApiResponse<GetDeviceWirelessBluetoothSettings200Response> localVarResp = updateDeviceWirelessBluetoothSettings_0WithHttpInfo(serial, updateDeviceWirelessBluetoothSettingsRequest);
        return localVarResp.getData();
    }

    /**
     * Update the bluetooth settings for a wireless device
     * Update the bluetooth settings for a wireless device
     * @param serial  (required)
     * @param updateDeviceWirelessBluetoothSettingsRequest  (optional)
     * @return ApiResponse&lt;GetDeviceWirelessBluetoothSettings200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDeviceWirelessBluetoothSettings200Response> updateDeviceWirelessBluetoothSettings_0WithHttpInfo(String serial, UpdateDeviceWirelessBluetoothSettingsRequest updateDeviceWirelessBluetoothSettingsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDeviceWirelessBluetoothSettings_0ValidateBeforeCall(serial, updateDeviceWirelessBluetoothSettingsRequest, null);
        Type localVarReturnType = new TypeToken<GetDeviceWirelessBluetoothSettings200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the bluetooth settings for a wireless device (asynchronously)
     * Update the bluetooth settings for a wireless device
     * @param serial  (required)
     * @param updateDeviceWirelessBluetoothSettingsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDeviceWirelessBluetoothSettings_0Async(String serial, UpdateDeviceWirelessBluetoothSettingsRequest updateDeviceWirelessBluetoothSettingsRequest, final ApiCallback<GetDeviceWirelessBluetoothSettings200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDeviceWirelessBluetoothSettings_0ValidateBeforeCall(serial, updateDeviceWirelessBluetoothSettingsRequest, _callback);
        Type localVarReturnType = new TypeToken<GetDeviceWirelessBluetoothSettings200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDeviceWirelessRadioSettings_0
     * @param serial  (required)
     * @param updateDeviceWirelessRadioSettingsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDeviceWirelessRadioSettings_0Call(String serial, UpdateDeviceWirelessRadioSettingsRequest updateDeviceWirelessRadioSettingsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateDeviceWirelessRadioSettingsRequest;

        // create path and map variables
        String localVarPath = "/devices/{serial}/wireless/radio/settings"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDeviceWirelessRadioSettings_0ValidateBeforeCall(String serial, UpdateDeviceWirelessRadioSettingsRequest updateDeviceWirelessRadioSettingsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling updateDeviceWirelessRadioSettings_0(Async)");
        }

        return updateDeviceWirelessRadioSettings_0Call(serial, updateDeviceWirelessRadioSettingsRequest, _callback);

    }

    /**
     * Update the radio settings of a device
     * Update the radio settings of a device
     * @param serial  (required)
     * @param updateDeviceWirelessRadioSettingsRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateDeviceWirelessRadioSettings_0(String serial, UpdateDeviceWirelessRadioSettingsRequest updateDeviceWirelessRadioSettingsRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateDeviceWirelessRadioSettings_0WithHttpInfo(serial, updateDeviceWirelessRadioSettingsRequest);
        return localVarResp.getData();
    }

    /**
     * Update the radio settings of a device
     * Update the radio settings of a device
     * @param serial  (required)
     * @param updateDeviceWirelessRadioSettingsRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateDeviceWirelessRadioSettings_0WithHttpInfo(String serial, UpdateDeviceWirelessRadioSettingsRequest updateDeviceWirelessRadioSettingsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDeviceWirelessRadioSettings_0ValidateBeforeCall(serial, updateDeviceWirelessRadioSettingsRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the radio settings of a device (asynchronously)
     * Update the radio settings of a device
     * @param serial  (required)
     * @param updateDeviceWirelessRadioSettingsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDeviceWirelessRadioSettings_0Async(String serial, UpdateDeviceWirelessRadioSettingsRequest updateDeviceWirelessRadioSettingsRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDeviceWirelessRadioSettings_0ValidateBeforeCall(serial, updateDeviceWirelessRadioSettingsRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDevice_0
     * @param serial  (required)
     * @param updateDeviceRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDevice_0Call(String serial, UpdateDeviceRequest updateDeviceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateDeviceRequest;

        // create path and map variables
        String localVarPath = "/devices/{serial}"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDevice_0ValidateBeforeCall(String serial, UpdateDeviceRequest updateDeviceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling updateDevice_0(Async)");
        }

        return updateDevice_0Call(serial, updateDeviceRequest, _callback);

    }

    /**
     * Update the attributes of a device
     * Update the attributes of a device
     * @param serial  (required)
     * @param updateDeviceRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateDevice_0(String serial, UpdateDeviceRequest updateDeviceRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateDevice_0WithHttpInfo(serial, updateDeviceRequest);
        return localVarResp.getData();
    }

    /**
     * Update the attributes of a device
     * Update the attributes of a device
     * @param serial  (required)
     * @param updateDeviceRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateDevice_0WithHttpInfo(String serial, UpdateDeviceRequest updateDeviceRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDevice_0ValidateBeforeCall(serial, updateDeviceRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the attributes of a device (asynchronously)
     * Update the attributes of a device
     * @param serial  (required)
     * @param updateDeviceRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDevice_0Async(String serial, UpdateDeviceRequest updateDeviceRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDevice_0ValidateBeforeCall(serial, updateDeviceRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkAlertsSettings_0
     * @param networkId  (required)
     * @param updateNetworkAlertsSettingsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkAlertsSettings_0Call(String networkId, UpdateNetworkAlertsSettingsRequest updateNetworkAlertsSettingsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkAlertsSettingsRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/alerts/settings"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkAlertsSettings_0ValidateBeforeCall(String networkId, UpdateNetworkAlertsSettingsRequest updateNetworkAlertsSettingsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkAlertsSettings_0(Async)");
        }

        return updateNetworkAlertsSettings_0Call(networkId, updateNetworkAlertsSettingsRequest, _callback);

    }

    /**
     * Update the alert configuration for this network
     * Update the alert configuration for this network
     * @param networkId  (required)
     * @param updateNetworkAlertsSettingsRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkAlertsSettings_0(String networkId, UpdateNetworkAlertsSettingsRequest updateNetworkAlertsSettingsRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkAlertsSettings_0WithHttpInfo(networkId, updateNetworkAlertsSettingsRequest);
        return localVarResp.getData();
    }

    /**
     * Update the alert configuration for this network
     * Update the alert configuration for this network
     * @param networkId  (required)
     * @param updateNetworkAlertsSettingsRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkAlertsSettings_0WithHttpInfo(String networkId, UpdateNetworkAlertsSettingsRequest updateNetworkAlertsSettingsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkAlertsSettings_0ValidateBeforeCall(networkId, updateNetworkAlertsSettingsRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the alert configuration for this network (asynchronously)
     * Update the alert configuration for this network
     * @param networkId  (required)
     * @param updateNetworkAlertsSettingsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkAlertsSettings_0Async(String networkId, UpdateNetworkAlertsSettingsRequest updateNetworkAlertsSettingsRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkAlertsSettings_0ValidateBeforeCall(networkId, updateNetworkAlertsSettingsRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkApplianceConnectivityMonitoringDestinations_0
     * @param networkId  (required)
     * @param updateNetworkApplianceConnectivityMonitoringDestinationsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkApplianceConnectivityMonitoringDestinations_0Call(String networkId, UpdateNetworkApplianceConnectivityMonitoringDestinationsRequest updateNetworkApplianceConnectivityMonitoringDestinationsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkApplianceConnectivityMonitoringDestinationsRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/connectivityMonitoringDestinations"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkApplianceConnectivityMonitoringDestinations_0ValidateBeforeCall(String networkId, UpdateNetworkApplianceConnectivityMonitoringDestinationsRequest updateNetworkApplianceConnectivityMonitoringDestinationsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkApplianceConnectivityMonitoringDestinations_0(Async)");
        }

        return updateNetworkApplianceConnectivityMonitoringDestinations_0Call(networkId, updateNetworkApplianceConnectivityMonitoringDestinationsRequest, _callback);

    }

    /**
     * Update the connectivity testing destinations for an MX network
     * Update the connectivity testing destinations for an MX network
     * @param networkId  (required)
     * @param updateNetworkApplianceConnectivityMonitoringDestinationsRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkApplianceConnectivityMonitoringDestinations_0(String networkId, UpdateNetworkApplianceConnectivityMonitoringDestinationsRequest updateNetworkApplianceConnectivityMonitoringDestinationsRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkApplianceConnectivityMonitoringDestinations_0WithHttpInfo(networkId, updateNetworkApplianceConnectivityMonitoringDestinationsRequest);
        return localVarResp.getData();
    }

    /**
     * Update the connectivity testing destinations for an MX network
     * Update the connectivity testing destinations for an MX network
     * @param networkId  (required)
     * @param updateNetworkApplianceConnectivityMonitoringDestinationsRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkApplianceConnectivityMonitoringDestinations_0WithHttpInfo(String networkId, UpdateNetworkApplianceConnectivityMonitoringDestinationsRequest updateNetworkApplianceConnectivityMonitoringDestinationsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkApplianceConnectivityMonitoringDestinations_0ValidateBeforeCall(networkId, updateNetworkApplianceConnectivityMonitoringDestinationsRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the connectivity testing destinations for an MX network (asynchronously)
     * Update the connectivity testing destinations for an MX network
     * @param networkId  (required)
     * @param updateNetworkApplianceConnectivityMonitoringDestinationsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkApplianceConnectivityMonitoringDestinations_0Async(String networkId, UpdateNetworkApplianceConnectivityMonitoringDestinationsRequest updateNetworkApplianceConnectivityMonitoringDestinationsRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkApplianceConnectivityMonitoringDestinations_0ValidateBeforeCall(networkId, updateNetworkApplianceConnectivityMonitoringDestinationsRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkApplianceContentFiltering_0
     * @param networkId  (required)
     * @param updateNetworkApplianceContentFilteringRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkApplianceContentFiltering_0Call(String networkId, UpdateNetworkApplianceContentFilteringRequest updateNetworkApplianceContentFilteringRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkApplianceContentFilteringRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/contentFiltering"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkApplianceContentFiltering_0ValidateBeforeCall(String networkId, UpdateNetworkApplianceContentFilteringRequest updateNetworkApplianceContentFilteringRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkApplianceContentFiltering_0(Async)");
        }

        return updateNetworkApplianceContentFiltering_0Call(networkId, updateNetworkApplianceContentFilteringRequest, _callback);

    }

    /**
     * Update the content filtering settings for an MX network
     * Update the content filtering settings for an MX network
     * @param networkId  (required)
     * @param updateNetworkApplianceContentFilteringRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkApplianceContentFiltering_0(String networkId, UpdateNetworkApplianceContentFilteringRequest updateNetworkApplianceContentFilteringRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkApplianceContentFiltering_0WithHttpInfo(networkId, updateNetworkApplianceContentFilteringRequest);
        return localVarResp.getData();
    }

    /**
     * Update the content filtering settings for an MX network
     * Update the content filtering settings for an MX network
     * @param networkId  (required)
     * @param updateNetworkApplianceContentFilteringRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkApplianceContentFiltering_0WithHttpInfo(String networkId, UpdateNetworkApplianceContentFilteringRequest updateNetworkApplianceContentFilteringRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkApplianceContentFiltering_0ValidateBeforeCall(networkId, updateNetworkApplianceContentFilteringRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the content filtering settings for an MX network (asynchronously)
     * Update the content filtering settings for an MX network
     * @param networkId  (required)
     * @param updateNetworkApplianceContentFilteringRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkApplianceContentFiltering_0Async(String networkId, UpdateNetworkApplianceContentFilteringRequest updateNetworkApplianceContentFilteringRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkApplianceContentFiltering_0ValidateBeforeCall(networkId, updateNetworkApplianceContentFilteringRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkApplianceFirewallCellularFirewallRules_0
     * @param networkId  (required)
     * @param updateNetworkApplianceFirewallCellularFirewallRulesRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkApplianceFirewallCellularFirewallRules_0Call(String networkId, UpdateNetworkApplianceFirewallCellularFirewallRulesRequest updateNetworkApplianceFirewallCellularFirewallRulesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkApplianceFirewallCellularFirewallRulesRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/firewall/cellularFirewallRules"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkApplianceFirewallCellularFirewallRules_0ValidateBeforeCall(String networkId, UpdateNetworkApplianceFirewallCellularFirewallRulesRequest updateNetworkApplianceFirewallCellularFirewallRulesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkApplianceFirewallCellularFirewallRules_0(Async)");
        }

        return updateNetworkApplianceFirewallCellularFirewallRules_0Call(networkId, updateNetworkApplianceFirewallCellularFirewallRulesRequest, _callback);

    }

    /**
     * Update the cellular firewall rules of an MX network
     * Update the cellular firewall rules of an MX network
     * @param networkId  (required)
     * @param updateNetworkApplianceFirewallCellularFirewallRulesRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkApplianceFirewallCellularFirewallRules_0(String networkId, UpdateNetworkApplianceFirewallCellularFirewallRulesRequest updateNetworkApplianceFirewallCellularFirewallRulesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkApplianceFirewallCellularFirewallRules_0WithHttpInfo(networkId, updateNetworkApplianceFirewallCellularFirewallRulesRequest);
        return localVarResp.getData();
    }

    /**
     * Update the cellular firewall rules of an MX network
     * Update the cellular firewall rules of an MX network
     * @param networkId  (required)
     * @param updateNetworkApplianceFirewallCellularFirewallRulesRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkApplianceFirewallCellularFirewallRules_0WithHttpInfo(String networkId, UpdateNetworkApplianceFirewallCellularFirewallRulesRequest updateNetworkApplianceFirewallCellularFirewallRulesRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkApplianceFirewallCellularFirewallRules_0ValidateBeforeCall(networkId, updateNetworkApplianceFirewallCellularFirewallRulesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the cellular firewall rules of an MX network (asynchronously)
     * Update the cellular firewall rules of an MX network
     * @param networkId  (required)
     * @param updateNetworkApplianceFirewallCellularFirewallRulesRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkApplianceFirewallCellularFirewallRules_0Async(String networkId, UpdateNetworkApplianceFirewallCellularFirewallRulesRequest updateNetworkApplianceFirewallCellularFirewallRulesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkApplianceFirewallCellularFirewallRules_0ValidateBeforeCall(networkId, updateNetworkApplianceFirewallCellularFirewallRulesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkApplianceFirewallFirewalledService_0
     * @param networkId  (required)
     * @param service  (required)
     * @param updateNetworkApplianceFirewallFirewalledServiceRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkApplianceFirewallFirewalledService_0Call(String networkId, String service, UpdateNetworkApplianceFirewallFirewalledServiceRequest updateNetworkApplianceFirewallFirewalledServiceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkApplianceFirewallFirewalledServiceRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/firewall/firewalledServices/{service}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "service" + "}", localVarApiClient.escapeString(service.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkApplianceFirewallFirewalledService_0ValidateBeforeCall(String networkId, String service, UpdateNetworkApplianceFirewallFirewalledServiceRequest updateNetworkApplianceFirewallFirewalledServiceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkApplianceFirewallFirewalledService_0(Async)");
        }

        // verify the required parameter 'service' is set
        if (service == null) {
            throw new ApiException("Missing the required parameter 'service' when calling updateNetworkApplianceFirewallFirewalledService_0(Async)");
        }

        // verify the required parameter 'updateNetworkApplianceFirewallFirewalledServiceRequest' is set
        if (updateNetworkApplianceFirewallFirewalledServiceRequest == null) {
            throw new ApiException("Missing the required parameter 'updateNetworkApplianceFirewallFirewalledServiceRequest' when calling updateNetworkApplianceFirewallFirewalledService_0(Async)");
        }

        return updateNetworkApplianceFirewallFirewalledService_0Call(networkId, service, updateNetworkApplianceFirewallFirewalledServiceRequest, _callback);

    }

    /**
     * Updates the accessibility settings for the given service (&#39;ICMP&#39;, &#39;web&#39;, or &#39;SNMP&#39;)
     * Updates the accessibility settings for the given service (&#39;ICMP&#39;, &#39;web&#39;, or &#39;SNMP&#39;)
     * @param networkId  (required)
     * @param service  (required)
     * @param updateNetworkApplianceFirewallFirewalledServiceRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkApplianceFirewallFirewalledService_0(String networkId, String service, UpdateNetworkApplianceFirewallFirewalledServiceRequest updateNetworkApplianceFirewallFirewalledServiceRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkApplianceFirewallFirewalledService_0WithHttpInfo(networkId, service, updateNetworkApplianceFirewallFirewalledServiceRequest);
        return localVarResp.getData();
    }

    /**
     * Updates the accessibility settings for the given service (&#39;ICMP&#39;, &#39;web&#39;, or &#39;SNMP&#39;)
     * Updates the accessibility settings for the given service (&#39;ICMP&#39;, &#39;web&#39;, or &#39;SNMP&#39;)
     * @param networkId  (required)
     * @param service  (required)
     * @param updateNetworkApplianceFirewallFirewalledServiceRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkApplianceFirewallFirewalledService_0WithHttpInfo(String networkId, String service, UpdateNetworkApplianceFirewallFirewalledServiceRequest updateNetworkApplianceFirewallFirewalledServiceRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkApplianceFirewallFirewalledService_0ValidateBeforeCall(networkId, service, updateNetworkApplianceFirewallFirewalledServiceRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the accessibility settings for the given service (&#39;ICMP&#39;, &#39;web&#39;, or &#39;SNMP&#39;) (asynchronously)
     * Updates the accessibility settings for the given service (&#39;ICMP&#39;, &#39;web&#39;, or &#39;SNMP&#39;)
     * @param networkId  (required)
     * @param service  (required)
     * @param updateNetworkApplianceFirewallFirewalledServiceRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkApplianceFirewallFirewalledService_0Async(String networkId, String service, UpdateNetworkApplianceFirewallFirewalledServiceRequest updateNetworkApplianceFirewallFirewalledServiceRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkApplianceFirewallFirewalledService_0ValidateBeforeCall(networkId, service, updateNetworkApplianceFirewallFirewalledServiceRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkApplianceFirewallInboundCellularFirewallRules_0
     * @param networkId  (required)
     * @param updateNetworkApplianceFirewallCellularFirewallRulesRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkApplianceFirewallInboundCellularFirewallRules_0Call(String networkId, UpdateNetworkApplianceFirewallCellularFirewallRulesRequest updateNetworkApplianceFirewallCellularFirewallRulesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkApplianceFirewallCellularFirewallRulesRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/firewall/inboundCellularFirewallRules"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkApplianceFirewallInboundCellularFirewallRules_0ValidateBeforeCall(String networkId, UpdateNetworkApplianceFirewallCellularFirewallRulesRequest updateNetworkApplianceFirewallCellularFirewallRulesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkApplianceFirewallInboundCellularFirewallRules_0(Async)");
        }

        return updateNetworkApplianceFirewallInboundCellularFirewallRules_0Call(networkId, updateNetworkApplianceFirewallCellularFirewallRulesRequest, _callback);

    }

    /**
     * Update the inbound cellular firewall rules of an MX network
     * Update the inbound cellular firewall rules of an MX network
     * @param networkId  (required)
     * @param updateNetworkApplianceFirewallCellularFirewallRulesRequest  (optional)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> updateNetworkApplianceFirewallInboundCellularFirewallRules_0(String networkId, UpdateNetworkApplianceFirewallCellularFirewallRulesRequest updateNetworkApplianceFirewallCellularFirewallRulesRequest) throws ApiException {
        ApiResponse<List<Object>> localVarResp = updateNetworkApplianceFirewallInboundCellularFirewallRules_0WithHttpInfo(networkId, updateNetworkApplianceFirewallCellularFirewallRulesRequest);
        return localVarResp.getData();
    }

    /**
     * Update the inbound cellular firewall rules of an MX network
     * Update the inbound cellular firewall rules of an MX network
     * @param networkId  (required)
     * @param updateNetworkApplianceFirewallCellularFirewallRulesRequest  (optional)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> updateNetworkApplianceFirewallInboundCellularFirewallRules_0WithHttpInfo(String networkId, UpdateNetworkApplianceFirewallCellularFirewallRulesRequest updateNetworkApplianceFirewallCellularFirewallRulesRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkApplianceFirewallInboundCellularFirewallRules_0ValidateBeforeCall(networkId, updateNetworkApplianceFirewallCellularFirewallRulesRequest, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the inbound cellular firewall rules of an MX network (asynchronously)
     * Update the inbound cellular firewall rules of an MX network
     * @param networkId  (required)
     * @param updateNetworkApplianceFirewallCellularFirewallRulesRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkApplianceFirewallInboundCellularFirewallRules_0Async(String networkId, UpdateNetworkApplianceFirewallCellularFirewallRulesRequest updateNetworkApplianceFirewallCellularFirewallRulesRequest, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkApplianceFirewallInboundCellularFirewallRules_0ValidateBeforeCall(networkId, updateNetworkApplianceFirewallCellularFirewallRulesRequest, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkApplianceFirewallInboundFirewallRules_0
     * @param networkId  (required)
     * @param updateNetworkApplianceFirewallInboundFirewallRulesRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkApplianceFirewallInboundFirewallRules_0Call(String networkId, UpdateNetworkApplianceFirewallInboundFirewallRulesRequest updateNetworkApplianceFirewallInboundFirewallRulesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkApplianceFirewallInboundFirewallRulesRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/firewall/inboundFirewallRules"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkApplianceFirewallInboundFirewallRules_0ValidateBeforeCall(String networkId, UpdateNetworkApplianceFirewallInboundFirewallRulesRequest updateNetworkApplianceFirewallInboundFirewallRulesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkApplianceFirewallInboundFirewallRules_0(Async)");
        }

        return updateNetworkApplianceFirewallInboundFirewallRules_0Call(networkId, updateNetworkApplianceFirewallInboundFirewallRulesRequest, _callback);

    }

    /**
     * Update the inbound firewall rules of an MX network
     * Update the inbound firewall rules of an MX network
     * @param networkId  (required)
     * @param updateNetworkApplianceFirewallInboundFirewallRulesRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkApplianceFirewallInboundFirewallRules_0(String networkId, UpdateNetworkApplianceFirewallInboundFirewallRulesRequest updateNetworkApplianceFirewallInboundFirewallRulesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkApplianceFirewallInboundFirewallRules_0WithHttpInfo(networkId, updateNetworkApplianceFirewallInboundFirewallRulesRequest);
        return localVarResp.getData();
    }

    /**
     * Update the inbound firewall rules of an MX network
     * Update the inbound firewall rules of an MX network
     * @param networkId  (required)
     * @param updateNetworkApplianceFirewallInboundFirewallRulesRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkApplianceFirewallInboundFirewallRules_0WithHttpInfo(String networkId, UpdateNetworkApplianceFirewallInboundFirewallRulesRequest updateNetworkApplianceFirewallInboundFirewallRulesRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkApplianceFirewallInboundFirewallRules_0ValidateBeforeCall(networkId, updateNetworkApplianceFirewallInboundFirewallRulesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the inbound firewall rules of an MX network (asynchronously)
     * Update the inbound firewall rules of an MX network
     * @param networkId  (required)
     * @param updateNetworkApplianceFirewallInboundFirewallRulesRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkApplianceFirewallInboundFirewallRules_0Async(String networkId, UpdateNetworkApplianceFirewallInboundFirewallRulesRequest updateNetworkApplianceFirewallInboundFirewallRulesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkApplianceFirewallInboundFirewallRules_0ValidateBeforeCall(networkId, updateNetworkApplianceFirewallInboundFirewallRulesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkApplianceFirewallL3FirewallRules_0
     * @param networkId  (required)
     * @param updateNetworkApplianceFirewallInboundFirewallRulesRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkApplianceFirewallL3FirewallRules_0Call(String networkId, UpdateNetworkApplianceFirewallInboundFirewallRulesRequest updateNetworkApplianceFirewallInboundFirewallRulesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkApplianceFirewallInboundFirewallRulesRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/firewall/l3FirewallRules"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkApplianceFirewallL3FirewallRules_0ValidateBeforeCall(String networkId, UpdateNetworkApplianceFirewallInboundFirewallRulesRequest updateNetworkApplianceFirewallInboundFirewallRulesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkApplianceFirewallL3FirewallRules_0(Async)");
        }

        return updateNetworkApplianceFirewallL3FirewallRules_0Call(networkId, updateNetworkApplianceFirewallInboundFirewallRulesRequest, _callback);

    }

    /**
     * Update the L3 firewall rules of an MX network
     * Update the L3 firewall rules of an MX network
     * @param networkId  (required)
     * @param updateNetworkApplianceFirewallInboundFirewallRulesRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkApplianceFirewallL3FirewallRules_0(String networkId, UpdateNetworkApplianceFirewallInboundFirewallRulesRequest updateNetworkApplianceFirewallInboundFirewallRulesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkApplianceFirewallL3FirewallRules_0WithHttpInfo(networkId, updateNetworkApplianceFirewallInboundFirewallRulesRequest);
        return localVarResp.getData();
    }

    /**
     * Update the L3 firewall rules of an MX network
     * Update the L3 firewall rules of an MX network
     * @param networkId  (required)
     * @param updateNetworkApplianceFirewallInboundFirewallRulesRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkApplianceFirewallL3FirewallRules_0WithHttpInfo(String networkId, UpdateNetworkApplianceFirewallInboundFirewallRulesRequest updateNetworkApplianceFirewallInboundFirewallRulesRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkApplianceFirewallL3FirewallRules_0ValidateBeforeCall(networkId, updateNetworkApplianceFirewallInboundFirewallRulesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the L3 firewall rules of an MX network (asynchronously)
     * Update the L3 firewall rules of an MX network
     * @param networkId  (required)
     * @param updateNetworkApplianceFirewallInboundFirewallRulesRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkApplianceFirewallL3FirewallRules_0Async(String networkId, UpdateNetworkApplianceFirewallInboundFirewallRulesRequest updateNetworkApplianceFirewallInboundFirewallRulesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkApplianceFirewallL3FirewallRules_0ValidateBeforeCall(networkId, updateNetworkApplianceFirewallInboundFirewallRulesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkApplianceFirewallL7FirewallRules_0
     * @param networkId  (required)
     * @param updateNetworkApplianceFirewallL7FirewallRulesRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkApplianceFirewallL7FirewallRules_0Call(String networkId, UpdateNetworkApplianceFirewallL7FirewallRulesRequest updateNetworkApplianceFirewallL7FirewallRulesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkApplianceFirewallL7FirewallRulesRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/firewall/l7FirewallRules"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkApplianceFirewallL7FirewallRules_0ValidateBeforeCall(String networkId, UpdateNetworkApplianceFirewallL7FirewallRulesRequest updateNetworkApplianceFirewallL7FirewallRulesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkApplianceFirewallL7FirewallRules_0(Async)");
        }

        return updateNetworkApplianceFirewallL7FirewallRules_0Call(networkId, updateNetworkApplianceFirewallL7FirewallRulesRequest, _callback);

    }

    /**
     * Update the MX L7 firewall rules for an MX network
     * Update the MX L7 firewall rules for an MX network
     * @param networkId  (required)
     * @param updateNetworkApplianceFirewallL7FirewallRulesRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkApplianceFirewallL7FirewallRules_0(String networkId, UpdateNetworkApplianceFirewallL7FirewallRulesRequest updateNetworkApplianceFirewallL7FirewallRulesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkApplianceFirewallL7FirewallRules_0WithHttpInfo(networkId, updateNetworkApplianceFirewallL7FirewallRulesRequest);
        return localVarResp.getData();
    }

    /**
     * Update the MX L7 firewall rules for an MX network
     * Update the MX L7 firewall rules for an MX network
     * @param networkId  (required)
     * @param updateNetworkApplianceFirewallL7FirewallRulesRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkApplianceFirewallL7FirewallRules_0WithHttpInfo(String networkId, UpdateNetworkApplianceFirewallL7FirewallRulesRequest updateNetworkApplianceFirewallL7FirewallRulesRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkApplianceFirewallL7FirewallRules_0ValidateBeforeCall(networkId, updateNetworkApplianceFirewallL7FirewallRulesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the MX L7 firewall rules for an MX network (asynchronously)
     * Update the MX L7 firewall rules for an MX network
     * @param networkId  (required)
     * @param updateNetworkApplianceFirewallL7FirewallRulesRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkApplianceFirewallL7FirewallRules_0Async(String networkId, UpdateNetworkApplianceFirewallL7FirewallRulesRequest updateNetworkApplianceFirewallL7FirewallRulesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkApplianceFirewallL7FirewallRules_0ValidateBeforeCall(networkId, updateNetworkApplianceFirewallL7FirewallRulesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkApplianceFirewallOneToManyNatRules_0
     * @param networkId  (required)
     * @param updateNetworkApplianceFirewallOneToManyNatRulesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkApplianceFirewallOneToManyNatRules_0Call(String networkId, UpdateNetworkApplianceFirewallOneToManyNatRulesRequest updateNetworkApplianceFirewallOneToManyNatRulesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkApplianceFirewallOneToManyNatRulesRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/firewall/oneToManyNatRules"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkApplianceFirewallOneToManyNatRules_0ValidateBeforeCall(String networkId, UpdateNetworkApplianceFirewallOneToManyNatRulesRequest updateNetworkApplianceFirewallOneToManyNatRulesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkApplianceFirewallOneToManyNatRules_0(Async)");
        }

        // verify the required parameter 'updateNetworkApplianceFirewallOneToManyNatRulesRequest' is set
        if (updateNetworkApplianceFirewallOneToManyNatRulesRequest == null) {
            throw new ApiException("Missing the required parameter 'updateNetworkApplianceFirewallOneToManyNatRulesRequest' when calling updateNetworkApplianceFirewallOneToManyNatRules_0(Async)");
        }

        return updateNetworkApplianceFirewallOneToManyNatRules_0Call(networkId, updateNetworkApplianceFirewallOneToManyNatRulesRequest, _callback);

    }

    /**
     * Set the 1:Many NAT mapping rules for an MX network
     * Set the 1:Many NAT mapping rules for an MX network
     * @param networkId  (required)
     * @param updateNetworkApplianceFirewallOneToManyNatRulesRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkApplianceFirewallOneToManyNatRules_0(String networkId, UpdateNetworkApplianceFirewallOneToManyNatRulesRequest updateNetworkApplianceFirewallOneToManyNatRulesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkApplianceFirewallOneToManyNatRules_0WithHttpInfo(networkId, updateNetworkApplianceFirewallOneToManyNatRulesRequest);
        return localVarResp.getData();
    }

    /**
     * Set the 1:Many NAT mapping rules for an MX network
     * Set the 1:Many NAT mapping rules for an MX network
     * @param networkId  (required)
     * @param updateNetworkApplianceFirewallOneToManyNatRulesRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkApplianceFirewallOneToManyNatRules_0WithHttpInfo(String networkId, UpdateNetworkApplianceFirewallOneToManyNatRulesRequest updateNetworkApplianceFirewallOneToManyNatRulesRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkApplianceFirewallOneToManyNatRules_0ValidateBeforeCall(networkId, updateNetworkApplianceFirewallOneToManyNatRulesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set the 1:Many NAT mapping rules for an MX network (asynchronously)
     * Set the 1:Many NAT mapping rules for an MX network
     * @param networkId  (required)
     * @param updateNetworkApplianceFirewallOneToManyNatRulesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkApplianceFirewallOneToManyNatRules_0Async(String networkId, UpdateNetworkApplianceFirewallOneToManyNatRulesRequest updateNetworkApplianceFirewallOneToManyNatRulesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkApplianceFirewallOneToManyNatRules_0ValidateBeforeCall(networkId, updateNetworkApplianceFirewallOneToManyNatRulesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkApplianceFirewallOneToOneNatRules_0
     * @param networkId  (required)
     * @param updateNetworkApplianceFirewallOneToOneNatRulesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkApplianceFirewallOneToOneNatRules_0Call(String networkId, UpdateNetworkApplianceFirewallOneToOneNatRulesRequest updateNetworkApplianceFirewallOneToOneNatRulesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkApplianceFirewallOneToOneNatRulesRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/firewall/oneToOneNatRules"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkApplianceFirewallOneToOneNatRules_0ValidateBeforeCall(String networkId, UpdateNetworkApplianceFirewallOneToOneNatRulesRequest updateNetworkApplianceFirewallOneToOneNatRulesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkApplianceFirewallOneToOneNatRules_0(Async)");
        }

        // verify the required parameter 'updateNetworkApplianceFirewallOneToOneNatRulesRequest' is set
        if (updateNetworkApplianceFirewallOneToOneNatRulesRequest == null) {
            throw new ApiException("Missing the required parameter 'updateNetworkApplianceFirewallOneToOneNatRulesRequest' when calling updateNetworkApplianceFirewallOneToOneNatRules_0(Async)");
        }

        return updateNetworkApplianceFirewallOneToOneNatRules_0Call(networkId, updateNetworkApplianceFirewallOneToOneNatRulesRequest, _callback);

    }

    /**
     * Set the 1:1 NAT mapping rules for an MX network
     * Set the 1:1 NAT mapping rules for an MX network
     * @param networkId  (required)
     * @param updateNetworkApplianceFirewallOneToOneNatRulesRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkApplianceFirewallOneToOneNatRules_0(String networkId, UpdateNetworkApplianceFirewallOneToOneNatRulesRequest updateNetworkApplianceFirewallOneToOneNatRulesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkApplianceFirewallOneToOneNatRules_0WithHttpInfo(networkId, updateNetworkApplianceFirewallOneToOneNatRulesRequest);
        return localVarResp.getData();
    }

    /**
     * Set the 1:1 NAT mapping rules for an MX network
     * Set the 1:1 NAT mapping rules for an MX network
     * @param networkId  (required)
     * @param updateNetworkApplianceFirewallOneToOneNatRulesRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkApplianceFirewallOneToOneNatRules_0WithHttpInfo(String networkId, UpdateNetworkApplianceFirewallOneToOneNatRulesRequest updateNetworkApplianceFirewallOneToOneNatRulesRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkApplianceFirewallOneToOneNatRules_0ValidateBeforeCall(networkId, updateNetworkApplianceFirewallOneToOneNatRulesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set the 1:1 NAT mapping rules for an MX network (asynchronously)
     * Set the 1:1 NAT mapping rules for an MX network
     * @param networkId  (required)
     * @param updateNetworkApplianceFirewallOneToOneNatRulesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkApplianceFirewallOneToOneNatRules_0Async(String networkId, UpdateNetworkApplianceFirewallOneToOneNatRulesRequest updateNetworkApplianceFirewallOneToOneNatRulesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkApplianceFirewallOneToOneNatRules_0ValidateBeforeCall(networkId, updateNetworkApplianceFirewallOneToOneNatRulesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkApplianceFirewallPortForwardingRules_0
     * @param networkId  (required)
     * @param updateNetworkApplianceFirewallPortForwardingRulesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkApplianceFirewallPortForwardingRules_0Call(String networkId, UpdateNetworkApplianceFirewallPortForwardingRulesRequest updateNetworkApplianceFirewallPortForwardingRulesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkApplianceFirewallPortForwardingRulesRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/firewall/portForwardingRules"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkApplianceFirewallPortForwardingRules_0ValidateBeforeCall(String networkId, UpdateNetworkApplianceFirewallPortForwardingRulesRequest updateNetworkApplianceFirewallPortForwardingRulesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkApplianceFirewallPortForwardingRules_0(Async)");
        }

        // verify the required parameter 'updateNetworkApplianceFirewallPortForwardingRulesRequest' is set
        if (updateNetworkApplianceFirewallPortForwardingRulesRequest == null) {
            throw new ApiException("Missing the required parameter 'updateNetworkApplianceFirewallPortForwardingRulesRequest' when calling updateNetworkApplianceFirewallPortForwardingRules_0(Async)");
        }

        return updateNetworkApplianceFirewallPortForwardingRules_0Call(networkId, updateNetworkApplianceFirewallPortForwardingRulesRequest, _callback);

    }

    /**
     * Update the port forwarding rules for an MX network
     * Update the port forwarding rules for an MX network
     * @param networkId  (required)
     * @param updateNetworkApplianceFirewallPortForwardingRulesRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkApplianceFirewallPortForwardingRules_0(String networkId, UpdateNetworkApplianceFirewallPortForwardingRulesRequest updateNetworkApplianceFirewallPortForwardingRulesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkApplianceFirewallPortForwardingRules_0WithHttpInfo(networkId, updateNetworkApplianceFirewallPortForwardingRulesRequest);
        return localVarResp.getData();
    }

    /**
     * Update the port forwarding rules for an MX network
     * Update the port forwarding rules for an MX network
     * @param networkId  (required)
     * @param updateNetworkApplianceFirewallPortForwardingRulesRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkApplianceFirewallPortForwardingRules_0WithHttpInfo(String networkId, UpdateNetworkApplianceFirewallPortForwardingRulesRequest updateNetworkApplianceFirewallPortForwardingRulesRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkApplianceFirewallPortForwardingRules_0ValidateBeforeCall(networkId, updateNetworkApplianceFirewallPortForwardingRulesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the port forwarding rules for an MX network (asynchronously)
     * Update the port forwarding rules for an MX network
     * @param networkId  (required)
     * @param updateNetworkApplianceFirewallPortForwardingRulesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkApplianceFirewallPortForwardingRules_0Async(String networkId, UpdateNetworkApplianceFirewallPortForwardingRulesRequest updateNetworkApplianceFirewallPortForwardingRulesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkApplianceFirewallPortForwardingRules_0ValidateBeforeCall(networkId, updateNetworkApplianceFirewallPortForwardingRulesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkApplianceFirewallSettings_0
     * @param networkId  (required)
     * @param updateNetworkApplianceFirewallSettingsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkApplianceFirewallSettings_0Call(String networkId, UpdateNetworkApplianceFirewallSettingsRequest updateNetworkApplianceFirewallSettingsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkApplianceFirewallSettingsRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/firewall/settings"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkApplianceFirewallSettings_0ValidateBeforeCall(String networkId, UpdateNetworkApplianceFirewallSettingsRequest updateNetworkApplianceFirewallSettingsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkApplianceFirewallSettings_0(Async)");
        }

        return updateNetworkApplianceFirewallSettings_0Call(networkId, updateNetworkApplianceFirewallSettingsRequest, _callback);

    }

    /**
     * Update the firewall settings for this network
     * Update the firewall settings for this network
     * @param networkId  (required)
     * @param updateNetworkApplianceFirewallSettingsRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkApplianceFirewallSettings_0(String networkId, UpdateNetworkApplianceFirewallSettingsRequest updateNetworkApplianceFirewallSettingsRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkApplianceFirewallSettings_0WithHttpInfo(networkId, updateNetworkApplianceFirewallSettingsRequest);
        return localVarResp.getData();
    }

    /**
     * Update the firewall settings for this network
     * Update the firewall settings for this network
     * @param networkId  (required)
     * @param updateNetworkApplianceFirewallSettingsRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkApplianceFirewallSettings_0WithHttpInfo(String networkId, UpdateNetworkApplianceFirewallSettingsRequest updateNetworkApplianceFirewallSettingsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkApplianceFirewallSettings_0ValidateBeforeCall(networkId, updateNetworkApplianceFirewallSettingsRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the firewall settings for this network (asynchronously)
     * Update the firewall settings for this network
     * @param networkId  (required)
     * @param updateNetworkApplianceFirewallSettingsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkApplianceFirewallSettings_0Async(String networkId, UpdateNetworkApplianceFirewallSettingsRequest updateNetworkApplianceFirewallSettingsRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkApplianceFirewallSettings_0ValidateBeforeCall(networkId, updateNetworkApplianceFirewallSettingsRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkAppliancePort_0
     * @param networkId  (required)
     * @param portId  (required)
     * @param updateNetworkAppliancePortRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkAppliancePort_0Call(String networkId, String portId, UpdateNetworkAppliancePortRequest updateNetworkAppliancePortRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkAppliancePortRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/ports/{portId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "portId" + "}", localVarApiClient.escapeString(portId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkAppliancePort_0ValidateBeforeCall(String networkId, String portId, UpdateNetworkAppliancePortRequest updateNetworkAppliancePortRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkAppliancePort_0(Async)");
        }

        // verify the required parameter 'portId' is set
        if (portId == null) {
            throw new ApiException("Missing the required parameter 'portId' when calling updateNetworkAppliancePort_0(Async)");
        }

        return updateNetworkAppliancePort_0Call(networkId, portId, updateNetworkAppliancePortRequest, _callback);

    }

    /**
     * Update the per-port VLAN settings for a single MX port.
     * Update the per-port VLAN settings for a single MX port.
     * @param networkId  (required)
     * @param portId  (required)
     * @param updateNetworkAppliancePortRequest  (optional)
     * @return GetNetworkAppliancePorts200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkAppliancePorts200ResponseInner updateNetworkAppliancePort_0(String networkId, String portId, UpdateNetworkAppliancePortRequest updateNetworkAppliancePortRequest) throws ApiException {
        ApiResponse<GetNetworkAppliancePorts200ResponseInner> localVarResp = updateNetworkAppliancePort_0WithHttpInfo(networkId, portId, updateNetworkAppliancePortRequest);
        return localVarResp.getData();
    }

    /**
     * Update the per-port VLAN settings for a single MX port.
     * Update the per-port VLAN settings for a single MX port.
     * @param networkId  (required)
     * @param portId  (required)
     * @param updateNetworkAppliancePortRequest  (optional)
     * @return ApiResponse&lt;GetNetworkAppliancePorts200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkAppliancePorts200ResponseInner> updateNetworkAppliancePort_0WithHttpInfo(String networkId, String portId, UpdateNetworkAppliancePortRequest updateNetworkAppliancePortRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkAppliancePort_0ValidateBeforeCall(networkId, portId, updateNetworkAppliancePortRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkAppliancePorts200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the per-port VLAN settings for a single MX port. (asynchronously)
     * Update the per-port VLAN settings for a single MX port.
     * @param networkId  (required)
     * @param portId  (required)
     * @param updateNetworkAppliancePortRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkAppliancePort_0Async(String networkId, String portId, UpdateNetworkAppliancePortRequest updateNetworkAppliancePortRequest, final ApiCallback<GetNetworkAppliancePorts200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkAppliancePort_0ValidateBeforeCall(networkId, portId, updateNetworkAppliancePortRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkAppliancePorts200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkAppliancePrefixesDelegatedStatic_0
     * @param networkId  (required)
     * @param staticDelegatedPrefixId  (required)
     * @param updateNetworkAppliancePrefixesDelegatedStaticRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkAppliancePrefixesDelegatedStatic_0Call(String networkId, String staticDelegatedPrefixId, UpdateNetworkAppliancePrefixesDelegatedStaticRequest updateNetworkAppliancePrefixesDelegatedStaticRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkAppliancePrefixesDelegatedStaticRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/prefixes/delegated/statics/{staticDelegatedPrefixId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "staticDelegatedPrefixId" + "}", localVarApiClient.escapeString(staticDelegatedPrefixId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkAppliancePrefixesDelegatedStatic_0ValidateBeforeCall(String networkId, String staticDelegatedPrefixId, UpdateNetworkAppliancePrefixesDelegatedStaticRequest updateNetworkAppliancePrefixesDelegatedStaticRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkAppliancePrefixesDelegatedStatic_0(Async)");
        }

        // verify the required parameter 'staticDelegatedPrefixId' is set
        if (staticDelegatedPrefixId == null) {
            throw new ApiException("Missing the required parameter 'staticDelegatedPrefixId' when calling updateNetworkAppliancePrefixesDelegatedStatic_0(Async)");
        }

        return updateNetworkAppliancePrefixesDelegatedStatic_0Call(networkId, staticDelegatedPrefixId, updateNetworkAppliancePrefixesDelegatedStaticRequest, _callback);

    }

    /**
     * Update a static delegated prefix from a network
     * Update a static delegated prefix from a network
     * @param networkId  (required)
     * @param staticDelegatedPrefixId  (required)
     * @param updateNetworkAppliancePrefixesDelegatedStaticRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkAppliancePrefixesDelegatedStatic_0(String networkId, String staticDelegatedPrefixId, UpdateNetworkAppliancePrefixesDelegatedStaticRequest updateNetworkAppliancePrefixesDelegatedStaticRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkAppliancePrefixesDelegatedStatic_0WithHttpInfo(networkId, staticDelegatedPrefixId, updateNetworkAppliancePrefixesDelegatedStaticRequest);
        return localVarResp.getData();
    }

    /**
     * Update a static delegated prefix from a network
     * Update a static delegated prefix from a network
     * @param networkId  (required)
     * @param staticDelegatedPrefixId  (required)
     * @param updateNetworkAppliancePrefixesDelegatedStaticRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkAppliancePrefixesDelegatedStatic_0WithHttpInfo(String networkId, String staticDelegatedPrefixId, UpdateNetworkAppliancePrefixesDelegatedStaticRequest updateNetworkAppliancePrefixesDelegatedStaticRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkAppliancePrefixesDelegatedStatic_0ValidateBeforeCall(networkId, staticDelegatedPrefixId, updateNetworkAppliancePrefixesDelegatedStaticRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a static delegated prefix from a network (asynchronously)
     * Update a static delegated prefix from a network
     * @param networkId  (required)
     * @param staticDelegatedPrefixId  (required)
     * @param updateNetworkAppliancePrefixesDelegatedStaticRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkAppliancePrefixesDelegatedStatic_0Async(String networkId, String staticDelegatedPrefixId, UpdateNetworkAppliancePrefixesDelegatedStaticRequest updateNetworkAppliancePrefixesDelegatedStaticRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkAppliancePrefixesDelegatedStatic_0ValidateBeforeCall(networkId, staticDelegatedPrefixId, updateNetworkAppliancePrefixesDelegatedStaticRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkApplianceSecurityIntrusion_0
     * @param networkId  (required)
     * @param updateNetworkApplianceSecurityIntrusionRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkApplianceSecurityIntrusion_0Call(String networkId, UpdateNetworkApplianceSecurityIntrusionRequest updateNetworkApplianceSecurityIntrusionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkApplianceSecurityIntrusionRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/security/intrusion"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkApplianceSecurityIntrusion_0ValidateBeforeCall(String networkId, UpdateNetworkApplianceSecurityIntrusionRequest updateNetworkApplianceSecurityIntrusionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkApplianceSecurityIntrusion_0(Async)");
        }

        return updateNetworkApplianceSecurityIntrusion_0Call(networkId, updateNetworkApplianceSecurityIntrusionRequest, _callback);

    }

    /**
     * Set the supported intrusion settings for an MX network
     * Set the supported intrusion settings for an MX network
     * @param networkId  (required)
     * @param updateNetworkApplianceSecurityIntrusionRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkApplianceSecurityIntrusion_0(String networkId, UpdateNetworkApplianceSecurityIntrusionRequest updateNetworkApplianceSecurityIntrusionRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkApplianceSecurityIntrusion_0WithHttpInfo(networkId, updateNetworkApplianceSecurityIntrusionRequest);
        return localVarResp.getData();
    }

    /**
     * Set the supported intrusion settings for an MX network
     * Set the supported intrusion settings for an MX network
     * @param networkId  (required)
     * @param updateNetworkApplianceSecurityIntrusionRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkApplianceSecurityIntrusion_0WithHttpInfo(String networkId, UpdateNetworkApplianceSecurityIntrusionRequest updateNetworkApplianceSecurityIntrusionRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkApplianceSecurityIntrusion_0ValidateBeforeCall(networkId, updateNetworkApplianceSecurityIntrusionRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set the supported intrusion settings for an MX network (asynchronously)
     * Set the supported intrusion settings for an MX network
     * @param networkId  (required)
     * @param updateNetworkApplianceSecurityIntrusionRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkApplianceSecurityIntrusion_0Async(String networkId, UpdateNetworkApplianceSecurityIntrusionRequest updateNetworkApplianceSecurityIntrusionRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkApplianceSecurityIntrusion_0ValidateBeforeCall(networkId, updateNetworkApplianceSecurityIntrusionRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkApplianceSecurityMalware_0
     * @param networkId  (required)
     * @param updateNetworkApplianceSecurityMalwareRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkApplianceSecurityMalware_0Call(String networkId, UpdateNetworkApplianceSecurityMalwareRequest updateNetworkApplianceSecurityMalwareRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkApplianceSecurityMalwareRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/security/malware"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkApplianceSecurityMalware_0ValidateBeforeCall(String networkId, UpdateNetworkApplianceSecurityMalwareRequest updateNetworkApplianceSecurityMalwareRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkApplianceSecurityMalware_0(Async)");
        }

        // verify the required parameter 'updateNetworkApplianceSecurityMalwareRequest' is set
        if (updateNetworkApplianceSecurityMalwareRequest == null) {
            throw new ApiException("Missing the required parameter 'updateNetworkApplianceSecurityMalwareRequest' when calling updateNetworkApplianceSecurityMalware_0(Async)");
        }

        return updateNetworkApplianceSecurityMalware_0Call(networkId, updateNetworkApplianceSecurityMalwareRequest, _callback);

    }

    /**
     * Set the supported malware settings for an MX network
     * Set the supported malware settings for an MX network
     * @param networkId  (required)
     * @param updateNetworkApplianceSecurityMalwareRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkApplianceSecurityMalware_0(String networkId, UpdateNetworkApplianceSecurityMalwareRequest updateNetworkApplianceSecurityMalwareRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkApplianceSecurityMalware_0WithHttpInfo(networkId, updateNetworkApplianceSecurityMalwareRequest);
        return localVarResp.getData();
    }

    /**
     * Set the supported malware settings for an MX network
     * Set the supported malware settings for an MX network
     * @param networkId  (required)
     * @param updateNetworkApplianceSecurityMalwareRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkApplianceSecurityMalware_0WithHttpInfo(String networkId, UpdateNetworkApplianceSecurityMalwareRequest updateNetworkApplianceSecurityMalwareRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkApplianceSecurityMalware_0ValidateBeforeCall(networkId, updateNetworkApplianceSecurityMalwareRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set the supported malware settings for an MX network (asynchronously)
     * Set the supported malware settings for an MX network
     * @param networkId  (required)
     * @param updateNetworkApplianceSecurityMalwareRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkApplianceSecurityMalware_0Async(String networkId, UpdateNetworkApplianceSecurityMalwareRequest updateNetworkApplianceSecurityMalwareRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkApplianceSecurityMalware_0ValidateBeforeCall(networkId, updateNetworkApplianceSecurityMalwareRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkApplianceSettings_0
     * @param networkId  (required)
     * @param updateNetworkApplianceSettingsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkApplianceSettings_0Call(String networkId, UpdateNetworkApplianceSettingsRequest updateNetworkApplianceSettingsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkApplianceSettingsRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/settings"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkApplianceSettings_0ValidateBeforeCall(String networkId, UpdateNetworkApplianceSettingsRequest updateNetworkApplianceSettingsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkApplianceSettings_0(Async)");
        }

        return updateNetworkApplianceSettings_0Call(networkId, updateNetworkApplianceSettingsRequest, _callback);

    }

    /**
     * Update the appliance settings for a network
     * Update the appliance settings for a network
     * @param networkId  (required)
     * @param updateNetworkApplianceSettingsRequest  (optional)
     * @return GetNetworkApplianceSettings200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkApplianceSettings200Response updateNetworkApplianceSettings_0(String networkId, UpdateNetworkApplianceSettingsRequest updateNetworkApplianceSettingsRequest) throws ApiException {
        ApiResponse<GetNetworkApplianceSettings200Response> localVarResp = updateNetworkApplianceSettings_0WithHttpInfo(networkId, updateNetworkApplianceSettingsRequest);
        return localVarResp.getData();
    }

    /**
     * Update the appliance settings for a network
     * Update the appliance settings for a network
     * @param networkId  (required)
     * @param updateNetworkApplianceSettingsRequest  (optional)
     * @return ApiResponse&lt;GetNetworkApplianceSettings200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkApplianceSettings200Response> updateNetworkApplianceSettings_0WithHttpInfo(String networkId, UpdateNetworkApplianceSettingsRequest updateNetworkApplianceSettingsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkApplianceSettings_0ValidateBeforeCall(networkId, updateNetworkApplianceSettingsRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkApplianceSettings200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the appliance settings for a network (asynchronously)
     * Update the appliance settings for a network
     * @param networkId  (required)
     * @param updateNetworkApplianceSettingsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkApplianceSettings_0Async(String networkId, UpdateNetworkApplianceSettingsRequest updateNetworkApplianceSettingsRequest, final ApiCallback<GetNetworkApplianceSettings200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkApplianceSettings_0ValidateBeforeCall(networkId, updateNetworkApplianceSettingsRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkApplianceSettings200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkApplianceSingleLan_0
     * @param networkId  (required)
     * @param updateNetworkApplianceSingleLanRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkApplianceSingleLan_0Call(String networkId, UpdateNetworkApplianceSingleLanRequest updateNetworkApplianceSingleLanRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkApplianceSingleLanRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/singleLan"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkApplianceSingleLan_0ValidateBeforeCall(String networkId, UpdateNetworkApplianceSingleLanRequest updateNetworkApplianceSingleLanRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkApplianceSingleLan_0(Async)");
        }

        return updateNetworkApplianceSingleLan_0Call(networkId, updateNetworkApplianceSingleLanRequest, _callback);

    }

    /**
     * Update single LAN configuration
     * Update single LAN configuration
     * @param networkId  (required)
     * @param updateNetworkApplianceSingleLanRequest  (optional)
     * @return GetNetworkApplianceSingleLan200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkApplianceSingleLan200Response updateNetworkApplianceSingleLan_0(String networkId, UpdateNetworkApplianceSingleLanRequest updateNetworkApplianceSingleLanRequest) throws ApiException {
        ApiResponse<GetNetworkApplianceSingleLan200Response> localVarResp = updateNetworkApplianceSingleLan_0WithHttpInfo(networkId, updateNetworkApplianceSingleLanRequest);
        return localVarResp.getData();
    }

    /**
     * Update single LAN configuration
     * Update single LAN configuration
     * @param networkId  (required)
     * @param updateNetworkApplianceSingleLanRequest  (optional)
     * @return ApiResponse&lt;GetNetworkApplianceSingleLan200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkApplianceSingleLan200Response> updateNetworkApplianceSingleLan_0WithHttpInfo(String networkId, UpdateNetworkApplianceSingleLanRequest updateNetworkApplianceSingleLanRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkApplianceSingleLan_0ValidateBeforeCall(networkId, updateNetworkApplianceSingleLanRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkApplianceSingleLan200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update single LAN configuration (asynchronously)
     * Update single LAN configuration
     * @param networkId  (required)
     * @param updateNetworkApplianceSingleLanRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkApplianceSingleLan_0Async(String networkId, UpdateNetworkApplianceSingleLanRequest updateNetworkApplianceSingleLanRequest, final ApiCallback<GetNetworkApplianceSingleLan200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkApplianceSingleLan_0ValidateBeforeCall(networkId, updateNetworkApplianceSingleLanRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkApplianceSingleLan200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkApplianceSsid_0
     * @param networkId  (required)
     * @param number  (required)
     * @param updateNetworkApplianceSsidRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkApplianceSsid_0Call(String networkId, String number, UpdateNetworkApplianceSsidRequest updateNetworkApplianceSsidRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkApplianceSsidRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/ssids/{number}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "number" + "}", localVarApiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkApplianceSsid_0ValidateBeforeCall(String networkId, String number, UpdateNetworkApplianceSsidRequest updateNetworkApplianceSsidRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkApplianceSsid_0(Async)");
        }

        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling updateNetworkApplianceSsid_0(Async)");
        }

        return updateNetworkApplianceSsid_0Call(networkId, number, updateNetworkApplianceSsidRequest, _callback);

    }

    /**
     * Update the attributes of an MX SSID
     * Update the attributes of an MX SSID
     * @param networkId  (required)
     * @param number  (required)
     * @param updateNetworkApplianceSsidRequest  (optional)
     * @return GetNetworkApplianceSsids200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkApplianceSsids200ResponseInner updateNetworkApplianceSsid_0(String networkId, String number, UpdateNetworkApplianceSsidRequest updateNetworkApplianceSsidRequest) throws ApiException {
        ApiResponse<GetNetworkApplianceSsids200ResponseInner> localVarResp = updateNetworkApplianceSsid_0WithHttpInfo(networkId, number, updateNetworkApplianceSsidRequest);
        return localVarResp.getData();
    }

    /**
     * Update the attributes of an MX SSID
     * Update the attributes of an MX SSID
     * @param networkId  (required)
     * @param number  (required)
     * @param updateNetworkApplianceSsidRequest  (optional)
     * @return ApiResponse&lt;GetNetworkApplianceSsids200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkApplianceSsids200ResponseInner> updateNetworkApplianceSsid_0WithHttpInfo(String networkId, String number, UpdateNetworkApplianceSsidRequest updateNetworkApplianceSsidRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkApplianceSsid_0ValidateBeforeCall(networkId, number, updateNetworkApplianceSsidRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkApplianceSsids200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the attributes of an MX SSID (asynchronously)
     * Update the attributes of an MX SSID
     * @param networkId  (required)
     * @param number  (required)
     * @param updateNetworkApplianceSsidRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkApplianceSsid_0Async(String networkId, String number, UpdateNetworkApplianceSsidRequest updateNetworkApplianceSsidRequest, final ApiCallback<GetNetworkApplianceSsids200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkApplianceSsid_0ValidateBeforeCall(networkId, number, updateNetworkApplianceSsidRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkApplianceSsids200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkApplianceStaticRoute_0
     * @param networkId  (required)
     * @param staticRouteId  (required)
     * @param updateNetworkApplianceStaticRouteRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkApplianceStaticRoute_0Call(String networkId, String staticRouteId, UpdateNetworkApplianceStaticRouteRequest updateNetworkApplianceStaticRouteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkApplianceStaticRouteRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/staticRoutes/{staticRouteId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "staticRouteId" + "}", localVarApiClient.escapeString(staticRouteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkApplianceStaticRoute_0ValidateBeforeCall(String networkId, String staticRouteId, UpdateNetworkApplianceStaticRouteRequest updateNetworkApplianceStaticRouteRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkApplianceStaticRoute_0(Async)");
        }

        // verify the required parameter 'staticRouteId' is set
        if (staticRouteId == null) {
            throw new ApiException("Missing the required parameter 'staticRouteId' when calling updateNetworkApplianceStaticRoute_0(Async)");
        }

        return updateNetworkApplianceStaticRoute_0Call(networkId, staticRouteId, updateNetworkApplianceStaticRouteRequest, _callback);

    }

    /**
     * Update a static route for an MX or teleworker network
     * Update a static route for an MX or teleworker network
     * @param networkId  (required)
     * @param staticRouteId  (required)
     * @param updateNetworkApplianceStaticRouteRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkApplianceStaticRoute_0(String networkId, String staticRouteId, UpdateNetworkApplianceStaticRouteRequest updateNetworkApplianceStaticRouteRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkApplianceStaticRoute_0WithHttpInfo(networkId, staticRouteId, updateNetworkApplianceStaticRouteRequest);
        return localVarResp.getData();
    }

    /**
     * Update a static route for an MX or teleworker network
     * Update a static route for an MX or teleworker network
     * @param networkId  (required)
     * @param staticRouteId  (required)
     * @param updateNetworkApplianceStaticRouteRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkApplianceStaticRoute_0WithHttpInfo(String networkId, String staticRouteId, UpdateNetworkApplianceStaticRouteRequest updateNetworkApplianceStaticRouteRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkApplianceStaticRoute_0ValidateBeforeCall(networkId, staticRouteId, updateNetworkApplianceStaticRouteRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a static route for an MX or teleworker network (asynchronously)
     * Update a static route for an MX or teleworker network
     * @param networkId  (required)
     * @param staticRouteId  (required)
     * @param updateNetworkApplianceStaticRouteRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkApplianceStaticRoute_0Async(String networkId, String staticRouteId, UpdateNetworkApplianceStaticRouteRequest updateNetworkApplianceStaticRouteRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkApplianceStaticRoute_0ValidateBeforeCall(networkId, staticRouteId, updateNetworkApplianceStaticRouteRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkApplianceTrafficShapingCustomPerformanceClass_0
     * @param networkId  (required)
     * @param customPerformanceClassId  (required)
     * @param updateNetworkApplianceTrafficShapingCustomPerformanceClassRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkApplianceTrafficShapingCustomPerformanceClass_0Call(String networkId, String customPerformanceClassId, UpdateNetworkApplianceTrafficShapingCustomPerformanceClassRequest updateNetworkApplianceTrafficShapingCustomPerformanceClassRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkApplianceTrafficShapingCustomPerformanceClassRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/trafficShaping/customPerformanceClasses/{customPerformanceClassId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "customPerformanceClassId" + "}", localVarApiClient.escapeString(customPerformanceClassId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkApplianceTrafficShapingCustomPerformanceClass_0ValidateBeforeCall(String networkId, String customPerformanceClassId, UpdateNetworkApplianceTrafficShapingCustomPerformanceClassRequest updateNetworkApplianceTrafficShapingCustomPerformanceClassRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkApplianceTrafficShapingCustomPerformanceClass_0(Async)");
        }

        // verify the required parameter 'customPerformanceClassId' is set
        if (customPerformanceClassId == null) {
            throw new ApiException("Missing the required parameter 'customPerformanceClassId' when calling updateNetworkApplianceTrafficShapingCustomPerformanceClass_0(Async)");
        }

        return updateNetworkApplianceTrafficShapingCustomPerformanceClass_0Call(networkId, customPerformanceClassId, updateNetworkApplianceTrafficShapingCustomPerformanceClassRequest, _callback);

    }

    /**
     * Update a custom performance class for an MX network
     * Update a custom performance class for an MX network
     * @param networkId  (required)
     * @param customPerformanceClassId  (required)
     * @param updateNetworkApplianceTrafficShapingCustomPerformanceClassRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkApplianceTrafficShapingCustomPerformanceClass_0(String networkId, String customPerformanceClassId, UpdateNetworkApplianceTrafficShapingCustomPerformanceClassRequest updateNetworkApplianceTrafficShapingCustomPerformanceClassRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkApplianceTrafficShapingCustomPerformanceClass_0WithHttpInfo(networkId, customPerformanceClassId, updateNetworkApplianceTrafficShapingCustomPerformanceClassRequest);
        return localVarResp.getData();
    }

    /**
     * Update a custom performance class for an MX network
     * Update a custom performance class for an MX network
     * @param networkId  (required)
     * @param customPerformanceClassId  (required)
     * @param updateNetworkApplianceTrafficShapingCustomPerformanceClassRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkApplianceTrafficShapingCustomPerformanceClass_0WithHttpInfo(String networkId, String customPerformanceClassId, UpdateNetworkApplianceTrafficShapingCustomPerformanceClassRequest updateNetworkApplianceTrafficShapingCustomPerformanceClassRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkApplianceTrafficShapingCustomPerformanceClass_0ValidateBeforeCall(networkId, customPerformanceClassId, updateNetworkApplianceTrafficShapingCustomPerformanceClassRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a custom performance class for an MX network (asynchronously)
     * Update a custom performance class for an MX network
     * @param networkId  (required)
     * @param customPerformanceClassId  (required)
     * @param updateNetworkApplianceTrafficShapingCustomPerformanceClassRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkApplianceTrafficShapingCustomPerformanceClass_0Async(String networkId, String customPerformanceClassId, UpdateNetworkApplianceTrafficShapingCustomPerformanceClassRequest updateNetworkApplianceTrafficShapingCustomPerformanceClassRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkApplianceTrafficShapingCustomPerformanceClass_0ValidateBeforeCall(networkId, customPerformanceClassId, updateNetworkApplianceTrafficShapingCustomPerformanceClassRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkApplianceTrafficShapingRules_0
     * @param networkId  (required)
     * @param updateNetworkApplianceTrafficShapingRulesRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkApplianceTrafficShapingRules_0Call(String networkId, UpdateNetworkApplianceTrafficShapingRulesRequest updateNetworkApplianceTrafficShapingRulesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkApplianceTrafficShapingRulesRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/trafficShaping/rules"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkApplianceTrafficShapingRules_0ValidateBeforeCall(String networkId, UpdateNetworkApplianceTrafficShapingRulesRequest updateNetworkApplianceTrafficShapingRulesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkApplianceTrafficShapingRules_0(Async)");
        }

        return updateNetworkApplianceTrafficShapingRules_0Call(networkId, updateNetworkApplianceTrafficShapingRulesRequest, _callback);

    }

    /**
     * Update the traffic shaping settings rules for an MX network
     * Update the traffic shaping settings rules for an MX network
     * @param networkId  (required)
     * @param updateNetworkApplianceTrafficShapingRulesRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkApplianceTrafficShapingRules_0(String networkId, UpdateNetworkApplianceTrafficShapingRulesRequest updateNetworkApplianceTrafficShapingRulesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkApplianceTrafficShapingRules_0WithHttpInfo(networkId, updateNetworkApplianceTrafficShapingRulesRequest);
        return localVarResp.getData();
    }

    /**
     * Update the traffic shaping settings rules for an MX network
     * Update the traffic shaping settings rules for an MX network
     * @param networkId  (required)
     * @param updateNetworkApplianceTrafficShapingRulesRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkApplianceTrafficShapingRules_0WithHttpInfo(String networkId, UpdateNetworkApplianceTrafficShapingRulesRequest updateNetworkApplianceTrafficShapingRulesRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkApplianceTrafficShapingRules_0ValidateBeforeCall(networkId, updateNetworkApplianceTrafficShapingRulesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the traffic shaping settings rules for an MX network (asynchronously)
     * Update the traffic shaping settings rules for an MX network
     * @param networkId  (required)
     * @param updateNetworkApplianceTrafficShapingRulesRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkApplianceTrafficShapingRules_0Async(String networkId, UpdateNetworkApplianceTrafficShapingRulesRequest updateNetworkApplianceTrafficShapingRulesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkApplianceTrafficShapingRules_0ValidateBeforeCall(networkId, updateNetworkApplianceTrafficShapingRulesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkApplianceTrafficShapingUplinkBandwidth_0
     * @param networkId  (required)
     * @param updateNetworkApplianceTrafficShapingUplinkBandwidthRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkApplianceTrafficShapingUplinkBandwidth_0Call(String networkId, UpdateNetworkApplianceTrafficShapingUplinkBandwidthRequest updateNetworkApplianceTrafficShapingUplinkBandwidthRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkApplianceTrafficShapingUplinkBandwidthRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/trafficShaping/uplinkBandwidth"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkApplianceTrafficShapingUplinkBandwidth_0ValidateBeforeCall(String networkId, UpdateNetworkApplianceTrafficShapingUplinkBandwidthRequest updateNetworkApplianceTrafficShapingUplinkBandwidthRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkApplianceTrafficShapingUplinkBandwidth_0(Async)");
        }

        return updateNetworkApplianceTrafficShapingUplinkBandwidth_0Call(networkId, updateNetworkApplianceTrafficShapingUplinkBandwidthRequest, _callback);

    }

    /**
     * Updates the uplink bandwidth settings for your MX network.
     * Updates the uplink bandwidth settings for your MX network.
     * @param networkId  (required)
     * @param updateNetworkApplianceTrafficShapingUplinkBandwidthRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkApplianceTrafficShapingUplinkBandwidth_0(String networkId, UpdateNetworkApplianceTrafficShapingUplinkBandwidthRequest updateNetworkApplianceTrafficShapingUplinkBandwidthRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkApplianceTrafficShapingUplinkBandwidth_0WithHttpInfo(networkId, updateNetworkApplianceTrafficShapingUplinkBandwidthRequest);
        return localVarResp.getData();
    }

    /**
     * Updates the uplink bandwidth settings for your MX network.
     * Updates the uplink bandwidth settings for your MX network.
     * @param networkId  (required)
     * @param updateNetworkApplianceTrafficShapingUplinkBandwidthRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkApplianceTrafficShapingUplinkBandwidth_0WithHttpInfo(String networkId, UpdateNetworkApplianceTrafficShapingUplinkBandwidthRequest updateNetworkApplianceTrafficShapingUplinkBandwidthRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkApplianceTrafficShapingUplinkBandwidth_0ValidateBeforeCall(networkId, updateNetworkApplianceTrafficShapingUplinkBandwidthRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the uplink bandwidth settings for your MX network. (asynchronously)
     * Updates the uplink bandwidth settings for your MX network.
     * @param networkId  (required)
     * @param updateNetworkApplianceTrafficShapingUplinkBandwidthRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkApplianceTrafficShapingUplinkBandwidth_0Async(String networkId, UpdateNetworkApplianceTrafficShapingUplinkBandwidthRequest updateNetworkApplianceTrafficShapingUplinkBandwidthRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkApplianceTrafficShapingUplinkBandwidth_0ValidateBeforeCall(networkId, updateNetworkApplianceTrafficShapingUplinkBandwidthRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkApplianceTrafficShapingUplinkSelection_0
     * @param networkId  (required)
     * @param updateNetworkApplianceTrafficShapingUplinkSelectionRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkApplianceTrafficShapingUplinkSelection_0Call(String networkId, UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest updateNetworkApplianceTrafficShapingUplinkSelectionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkApplianceTrafficShapingUplinkSelectionRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/trafficShaping/uplinkSelection"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkApplianceTrafficShapingUplinkSelection_0ValidateBeforeCall(String networkId, UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest updateNetworkApplianceTrafficShapingUplinkSelectionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkApplianceTrafficShapingUplinkSelection_0(Async)");
        }

        return updateNetworkApplianceTrafficShapingUplinkSelection_0Call(networkId, updateNetworkApplianceTrafficShapingUplinkSelectionRequest, _callback);

    }

    /**
     * Update uplink selection settings for an MX network
     * Update uplink selection settings for an MX network
     * @param networkId  (required)
     * @param updateNetworkApplianceTrafficShapingUplinkSelectionRequest  (optional)
     * @return GetNetworkApplianceTrafficShapingUplinkSelection200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkApplianceTrafficShapingUplinkSelection200Response updateNetworkApplianceTrafficShapingUplinkSelection_0(String networkId, UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest updateNetworkApplianceTrafficShapingUplinkSelectionRequest) throws ApiException {
        ApiResponse<GetNetworkApplianceTrafficShapingUplinkSelection200Response> localVarResp = updateNetworkApplianceTrafficShapingUplinkSelection_0WithHttpInfo(networkId, updateNetworkApplianceTrafficShapingUplinkSelectionRequest);
        return localVarResp.getData();
    }

    /**
     * Update uplink selection settings for an MX network
     * Update uplink selection settings for an MX network
     * @param networkId  (required)
     * @param updateNetworkApplianceTrafficShapingUplinkSelectionRequest  (optional)
     * @return ApiResponse&lt;GetNetworkApplianceTrafficShapingUplinkSelection200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkApplianceTrafficShapingUplinkSelection200Response> updateNetworkApplianceTrafficShapingUplinkSelection_0WithHttpInfo(String networkId, UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest updateNetworkApplianceTrafficShapingUplinkSelectionRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkApplianceTrafficShapingUplinkSelection_0ValidateBeforeCall(networkId, updateNetworkApplianceTrafficShapingUplinkSelectionRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkApplianceTrafficShapingUplinkSelection200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update uplink selection settings for an MX network (asynchronously)
     * Update uplink selection settings for an MX network
     * @param networkId  (required)
     * @param updateNetworkApplianceTrafficShapingUplinkSelectionRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkApplianceTrafficShapingUplinkSelection_0Async(String networkId, UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest updateNetworkApplianceTrafficShapingUplinkSelectionRequest, final ApiCallback<GetNetworkApplianceTrafficShapingUplinkSelection200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkApplianceTrafficShapingUplinkSelection_0ValidateBeforeCall(networkId, updateNetworkApplianceTrafficShapingUplinkSelectionRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkApplianceTrafficShapingUplinkSelection200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkApplianceTrafficShaping_0
     * @param networkId  (required)
     * @param updateNetworkApplianceTrafficShapingRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkApplianceTrafficShaping_0Call(String networkId, UpdateNetworkApplianceTrafficShapingRequest updateNetworkApplianceTrafficShapingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkApplianceTrafficShapingRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/trafficShaping"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkApplianceTrafficShaping_0ValidateBeforeCall(String networkId, UpdateNetworkApplianceTrafficShapingRequest updateNetworkApplianceTrafficShapingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkApplianceTrafficShaping_0(Async)");
        }

        return updateNetworkApplianceTrafficShaping_0Call(networkId, updateNetworkApplianceTrafficShapingRequest, _callback);

    }

    /**
     * Update the traffic shaping settings for an MX network
     * Update the traffic shaping settings for an MX network
     * @param networkId  (required)
     * @param updateNetworkApplianceTrafficShapingRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkApplianceTrafficShaping_0(String networkId, UpdateNetworkApplianceTrafficShapingRequest updateNetworkApplianceTrafficShapingRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkApplianceTrafficShaping_0WithHttpInfo(networkId, updateNetworkApplianceTrafficShapingRequest);
        return localVarResp.getData();
    }

    /**
     * Update the traffic shaping settings for an MX network
     * Update the traffic shaping settings for an MX network
     * @param networkId  (required)
     * @param updateNetworkApplianceTrafficShapingRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkApplianceTrafficShaping_0WithHttpInfo(String networkId, UpdateNetworkApplianceTrafficShapingRequest updateNetworkApplianceTrafficShapingRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkApplianceTrafficShaping_0ValidateBeforeCall(networkId, updateNetworkApplianceTrafficShapingRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the traffic shaping settings for an MX network (asynchronously)
     * Update the traffic shaping settings for an MX network
     * @param networkId  (required)
     * @param updateNetworkApplianceTrafficShapingRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkApplianceTrafficShaping_0Async(String networkId, UpdateNetworkApplianceTrafficShapingRequest updateNetworkApplianceTrafficShapingRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkApplianceTrafficShaping_0ValidateBeforeCall(networkId, updateNetworkApplianceTrafficShapingRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkApplianceVlan_0
     * @param networkId  (required)
     * @param vlanId  (required)
     * @param updateNetworkApplianceVlanRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkApplianceVlan_0Call(String networkId, String vlanId, UpdateNetworkApplianceVlanRequest updateNetworkApplianceVlanRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkApplianceVlanRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/vlans/{vlanId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "vlanId" + "}", localVarApiClient.escapeString(vlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkApplianceVlan_0ValidateBeforeCall(String networkId, String vlanId, UpdateNetworkApplianceVlanRequest updateNetworkApplianceVlanRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkApplianceVlan_0(Async)");
        }

        // verify the required parameter 'vlanId' is set
        if (vlanId == null) {
            throw new ApiException("Missing the required parameter 'vlanId' when calling updateNetworkApplianceVlan_0(Async)");
        }

        return updateNetworkApplianceVlan_0Call(networkId, vlanId, updateNetworkApplianceVlanRequest, _callback);

    }

    /**
     * Update a VLAN
     * Update a VLAN
     * @param networkId  (required)
     * @param vlanId  (required)
     * @param updateNetworkApplianceVlanRequest  (optional)
     * @return GetNetworkApplianceVlans200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkApplianceVlans200ResponseInner updateNetworkApplianceVlan_0(String networkId, String vlanId, UpdateNetworkApplianceVlanRequest updateNetworkApplianceVlanRequest) throws ApiException {
        ApiResponse<GetNetworkApplianceVlans200ResponseInner> localVarResp = updateNetworkApplianceVlan_0WithHttpInfo(networkId, vlanId, updateNetworkApplianceVlanRequest);
        return localVarResp.getData();
    }

    /**
     * Update a VLAN
     * Update a VLAN
     * @param networkId  (required)
     * @param vlanId  (required)
     * @param updateNetworkApplianceVlanRequest  (optional)
     * @return ApiResponse&lt;GetNetworkApplianceVlans200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkApplianceVlans200ResponseInner> updateNetworkApplianceVlan_0WithHttpInfo(String networkId, String vlanId, UpdateNetworkApplianceVlanRequest updateNetworkApplianceVlanRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkApplianceVlan_0ValidateBeforeCall(networkId, vlanId, updateNetworkApplianceVlanRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkApplianceVlans200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a VLAN (asynchronously)
     * Update a VLAN
     * @param networkId  (required)
     * @param vlanId  (required)
     * @param updateNetworkApplianceVlanRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkApplianceVlan_0Async(String networkId, String vlanId, UpdateNetworkApplianceVlanRequest updateNetworkApplianceVlanRequest, final ApiCallback<GetNetworkApplianceVlans200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkApplianceVlan_0ValidateBeforeCall(networkId, vlanId, updateNetworkApplianceVlanRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkApplianceVlans200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkApplianceVlansSettings_0
     * @param networkId  (required)
     * @param updateNetworkApplianceVlansSettingsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkApplianceVlansSettings_0Call(String networkId, UpdateNetworkApplianceVlansSettingsRequest updateNetworkApplianceVlansSettingsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkApplianceVlansSettingsRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/vlans/settings"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkApplianceVlansSettings_0ValidateBeforeCall(String networkId, UpdateNetworkApplianceVlansSettingsRequest updateNetworkApplianceVlansSettingsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkApplianceVlansSettings_0(Async)");
        }

        return updateNetworkApplianceVlansSettings_0Call(networkId, updateNetworkApplianceVlansSettingsRequest, _callback);

    }

    /**
     * Enable/Disable VLANs for the given network
     * Enable/Disable VLANs for the given network
     * @param networkId  (required)
     * @param updateNetworkApplianceVlansSettingsRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkApplianceVlansSettings_0(String networkId, UpdateNetworkApplianceVlansSettingsRequest updateNetworkApplianceVlansSettingsRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkApplianceVlansSettings_0WithHttpInfo(networkId, updateNetworkApplianceVlansSettingsRequest);
        return localVarResp.getData();
    }

    /**
     * Enable/Disable VLANs for the given network
     * Enable/Disable VLANs for the given network
     * @param networkId  (required)
     * @param updateNetworkApplianceVlansSettingsRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkApplianceVlansSettings_0WithHttpInfo(String networkId, UpdateNetworkApplianceVlansSettingsRequest updateNetworkApplianceVlansSettingsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkApplianceVlansSettings_0ValidateBeforeCall(networkId, updateNetworkApplianceVlansSettingsRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Enable/Disable VLANs for the given network (asynchronously)
     * Enable/Disable VLANs for the given network
     * @param networkId  (required)
     * @param updateNetworkApplianceVlansSettingsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkApplianceVlansSettings_0Async(String networkId, UpdateNetworkApplianceVlansSettingsRequest updateNetworkApplianceVlansSettingsRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkApplianceVlansSettings_0ValidateBeforeCall(networkId, updateNetworkApplianceVlansSettingsRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkApplianceVpnBgp_0
     * @param networkId  (required)
     * @param updateNetworkApplianceVpnBgpRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkApplianceVpnBgp_0Call(String networkId, UpdateNetworkApplianceVpnBgpRequest updateNetworkApplianceVpnBgpRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkApplianceVpnBgpRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/vpn/bgp"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkApplianceVpnBgp_0ValidateBeforeCall(String networkId, UpdateNetworkApplianceVpnBgpRequest updateNetworkApplianceVpnBgpRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkApplianceVpnBgp_0(Async)");
        }

        // verify the required parameter 'updateNetworkApplianceVpnBgpRequest' is set
        if (updateNetworkApplianceVpnBgpRequest == null) {
            throw new ApiException("Missing the required parameter 'updateNetworkApplianceVpnBgpRequest' when calling updateNetworkApplianceVpnBgp_0(Async)");
        }

        return updateNetworkApplianceVpnBgp_0Call(networkId, updateNetworkApplianceVpnBgpRequest, _callback);

    }

    /**
     * Update a Hub BGP Configuration
     * Update a Hub BGP Configuration
     * @param networkId  (required)
     * @param updateNetworkApplianceVpnBgpRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkApplianceVpnBgp_0(String networkId, UpdateNetworkApplianceVpnBgpRequest updateNetworkApplianceVpnBgpRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkApplianceVpnBgp_0WithHttpInfo(networkId, updateNetworkApplianceVpnBgpRequest);
        return localVarResp.getData();
    }

    /**
     * Update a Hub BGP Configuration
     * Update a Hub BGP Configuration
     * @param networkId  (required)
     * @param updateNetworkApplianceVpnBgpRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkApplianceVpnBgp_0WithHttpInfo(String networkId, UpdateNetworkApplianceVpnBgpRequest updateNetworkApplianceVpnBgpRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkApplianceVpnBgp_0ValidateBeforeCall(networkId, updateNetworkApplianceVpnBgpRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a Hub BGP Configuration (asynchronously)
     * Update a Hub BGP Configuration
     * @param networkId  (required)
     * @param updateNetworkApplianceVpnBgpRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkApplianceVpnBgp_0Async(String networkId, UpdateNetworkApplianceVpnBgpRequest updateNetworkApplianceVpnBgpRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkApplianceVpnBgp_0ValidateBeforeCall(networkId, updateNetworkApplianceVpnBgpRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkApplianceVpnSiteToSiteVpn_0
     * @param networkId  (required)
     * @param updateNetworkApplianceVpnSiteToSiteVpnRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkApplianceVpnSiteToSiteVpn_0Call(String networkId, UpdateNetworkApplianceVpnSiteToSiteVpnRequest updateNetworkApplianceVpnSiteToSiteVpnRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkApplianceVpnSiteToSiteVpnRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/vpn/siteToSiteVpn"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkApplianceVpnSiteToSiteVpn_0ValidateBeforeCall(String networkId, UpdateNetworkApplianceVpnSiteToSiteVpnRequest updateNetworkApplianceVpnSiteToSiteVpnRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkApplianceVpnSiteToSiteVpn_0(Async)");
        }

        // verify the required parameter 'updateNetworkApplianceVpnSiteToSiteVpnRequest' is set
        if (updateNetworkApplianceVpnSiteToSiteVpnRequest == null) {
            throw new ApiException("Missing the required parameter 'updateNetworkApplianceVpnSiteToSiteVpnRequest' when calling updateNetworkApplianceVpnSiteToSiteVpn_0(Async)");
        }

        return updateNetworkApplianceVpnSiteToSiteVpn_0Call(networkId, updateNetworkApplianceVpnSiteToSiteVpnRequest, _callback);

    }

    /**
     * Update the site-to-site VPN settings of a network
     * Update the site-to-site VPN settings of a network. Only valid for MX networks in NAT mode.
     * @param networkId  (required)
     * @param updateNetworkApplianceVpnSiteToSiteVpnRequest  (required)
     * @return GetNetworkApplianceVpnSiteToSiteVpn200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkApplianceVpnSiteToSiteVpn200Response updateNetworkApplianceVpnSiteToSiteVpn_0(String networkId, UpdateNetworkApplianceVpnSiteToSiteVpnRequest updateNetworkApplianceVpnSiteToSiteVpnRequest) throws ApiException {
        ApiResponse<GetNetworkApplianceVpnSiteToSiteVpn200Response> localVarResp = updateNetworkApplianceVpnSiteToSiteVpn_0WithHttpInfo(networkId, updateNetworkApplianceVpnSiteToSiteVpnRequest);
        return localVarResp.getData();
    }

    /**
     * Update the site-to-site VPN settings of a network
     * Update the site-to-site VPN settings of a network. Only valid for MX networks in NAT mode.
     * @param networkId  (required)
     * @param updateNetworkApplianceVpnSiteToSiteVpnRequest  (required)
     * @return ApiResponse&lt;GetNetworkApplianceVpnSiteToSiteVpn200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkApplianceVpnSiteToSiteVpn200Response> updateNetworkApplianceVpnSiteToSiteVpn_0WithHttpInfo(String networkId, UpdateNetworkApplianceVpnSiteToSiteVpnRequest updateNetworkApplianceVpnSiteToSiteVpnRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkApplianceVpnSiteToSiteVpn_0ValidateBeforeCall(networkId, updateNetworkApplianceVpnSiteToSiteVpnRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkApplianceVpnSiteToSiteVpn200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the site-to-site VPN settings of a network (asynchronously)
     * Update the site-to-site VPN settings of a network. Only valid for MX networks in NAT mode.
     * @param networkId  (required)
     * @param updateNetworkApplianceVpnSiteToSiteVpnRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkApplianceVpnSiteToSiteVpn_0Async(String networkId, UpdateNetworkApplianceVpnSiteToSiteVpnRequest updateNetworkApplianceVpnSiteToSiteVpnRequest, final ApiCallback<GetNetworkApplianceVpnSiteToSiteVpn200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkApplianceVpnSiteToSiteVpn_0ValidateBeforeCall(networkId, updateNetworkApplianceVpnSiteToSiteVpnRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkApplianceVpnSiteToSiteVpn200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkApplianceWarmSpare_0
     * @param networkId  (required)
     * @param updateNetworkApplianceWarmSpareRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkApplianceWarmSpare_0Call(String networkId, UpdateNetworkApplianceWarmSpareRequest updateNetworkApplianceWarmSpareRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkApplianceWarmSpareRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/appliance/warmSpare"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkApplianceWarmSpare_0ValidateBeforeCall(String networkId, UpdateNetworkApplianceWarmSpareRequest updateNetworkApplianceWarmSpareRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkApplianceWarmSpare_0(Async)");
        }

        // verify the required parameter 'updateNetworkApplianceWarmSpareRequest' is set
        if (updateNetworkApplianceWarmSpareRequest == null) {
            throw new ApiException("Missing the required parameter 'updateNetworkApplianceWarmSpareRequest' when calling updateNetworkApplianceWarmSpare_0(Async)");
        }

        return updateNetworkApplianceWarmSpare_0Call(networkId, updateNetworkApplianceWarmSpareRequest, _callback);

    }

    /**
     * Update MX warm spare settings
     * Update MX warm spare settings
     * @param networkId  (required)
     * @param updateNetworkApplianceWarmSpareRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkApplianceWarmSpare_0(String networkId, UpdateNetworkApplianceWarmSpareRequest updateNetworkApplianceWarmSpareRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkApplianceWarmSpare_0WithHttpInfo(networkId, updateNetworkApplianceWarmSpareRequest);
        return localVarResp.getData();
    }

    /**
     * Update MX warm spare settings
     * Update MX warm spare settings
     * @param networkId  (required)
     * @param updateNetworkApplianceWarmSpareRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkApplianceWarmSpare_0WithHttpInfo(String networkId, UpdateNetworkApplianceWarmSpareRequest updateNetworkApplianceWarmSpareRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkApplianceWarmSpare_0ValidateBeforeCall(networkId, updateNetworkApplianceWarmSpareRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update MX warm spare settings (asynchronously)
     * Update MX warm spare settings
     * @param networkId  (required)
     * @param updateNetworkApplianceWarmSpareRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkApplianceWarmSpare_0Async(String networkId, UpdateNetworkApplianceWarmSpareRequest updateNetworkApplianceWarmSpareRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkApplianceWarmSpare_0ValidateBeforeCall(networkId, updateNetworkApplianceWarmSpareRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkCameraQualityRetentionProfile_0
     * @param networkId  (required)
     * @param qualityRetentionProfileId  (required)
     * @param updateNetworkCameraQualityRetentionProfileRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkCameraQualityRetentionProfile_0Call(String networkId, String qualityRetentionProfileId, UpdateNetworkCameraQualityRetentionProfileRequest updateNetworkCameraQualityRetentionProfileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkCameraQualityRetentionProfileRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/camera/qualityRetentionProfiles/{qualityRetentionProfileId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "qualityRetentionProfileId" + "}", localVarApiClient.escapeString(qualityRetentionProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkCameraQualityRetentionProfile_0ValidateBeforeCall(String networkId, String qualityRetentionProfileId, UpdateNetworkCameraQualityRetentionProfileRequest updateNetworkCameraQualityRetentionProfileRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkCameraQualityRetentionProfile_0(Async)");
        }

        // verify the required parameter 'qualityRetentionProfileId' is set
        if (qualityRetentionProfileId == null) {
            throw new ApiException("Missing the required parameter 'qualityRetentionProfileId' when calling updateNetworkCameraQualityRetentionProfile_0(Async)");
        }

        return updateNetworkCameraQualityRetentionProfile_0Call(networkId, qualityRetentionProfileId, updateNetworkCameraQualityRetentionProfileRequest, _callback);

    }

    /**
     * Update an existing quality retention profile for this network.
     * Update an existing quality retention profile for this network.
     * @param networkId  (required)
     * @param qualityRetentionProfileId  (required)
     * @param updateNetworkCameraQualityRetentionProfileRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkCameraQualityRetentionProfile_0(String networkId, String qualityRetentionProfileId, UpdateNetworkCameraQualityRetentionProfileRequest updateNetworkCameraQualityRetentionProfileRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkCameraQualityRetentionProfile_0WithHttpInfo(networkId, qualityRetentionProfileId, updateNetworkCameraQualityRetentionProfileRequest);
        return localVarResp.getData();
    }

    /**
     * Update an existing quality retention profile for this network.
     * Update an existing quality retention profile for this network.
     * @param networkId  (required)
     * @param qualityRetentionProfileId  (required)
     * @param updateNetworkCameraQualityRetentionProfileRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkCameraQualityRetentionProfile_0WithHttpInfo(String networkId, String qualityRetentionProfileId, UpdateNetworkCameraQualityRetentionProfileRequest updateNetworkCameraQualityRetentionProfileRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkCameraQualityRetentionProfile_0ValidateBeforeCall(networkId, qualityRetentionProfileId, updateNetworkCameraQualityRetentionProfileRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an existing quality retention profile for this network. (asynchronously)
     * Update an existing quality retention profile for this network.
     * @param networkId  (required)
     * @param qualityRetentionProfileId  (required)
     * @param updateNetworkCameraQualityRetentionProfileRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkCameraQualityRetentionProfile_0Async(String networkId, String qualityRetentionProfileId, UpdateNetworkCameraQualityRetentionProfileRequest updateNetworkCameraQualityRetentionProfileRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkCameraQualityRetentionProfile_0ValidateBeforeCall(networkId, qualityRetentionProfileId, updateNetworkCameraQualityRetentionProfileRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkCameraWirelessProfile_0
     * @param networkId  (required)
     * @param wirelessProfileId  (required)
     * @param updateNetworkCameraWirelessProfileRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkCameraWirelessProfile_0Call(String networkId, String wirelessProfileId, UpdateNetworkCameraWirelessProfileRequest updateNetworkCameraWirelessProfileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkCameraWirelessProfileRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/camera/wirelessProfiles/{wirelessProfileId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "wirelessProfileId" + "}", localVarApiClient.escapeString(wirelessProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkCameraWirelessProfile_0ValidateBeforeCall(String networkId, String wirelessProfileId, UpdateNetworkCameraWirelessProfileRequest updateNetworkCameraWirelessProfileRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkCameraWirelessProfile_0(Async)");
        }

        // verify the required parameter 'wirelessProfileId' is set
        if (wirelessProfileId == null) {
            throw new ApiException("Missing the required parameter 'wirelessProfileId' when calling updateNetworkCameraWirelessProfile_0(Async)");
        }

        return updateNetworkCameraWirelessProfile_0Call(networkId, wirelessProfileId, updateNetworkCameraWirelessProfileRequest, _callback);

    }

    /**
     * Update an existing camera wireless profile in this network.
     * Update an existing camera wireless profile in this network.
     * @param networkId  (required)
     * @param wirelessProfileId  (required)
     * @param updateNetworkCameraWirelessProfileRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkCameraWirelessProfile_0(String networkId, String wirelessProfileId, UpdateNetworkCameraWirelessProfileRequest updateNetworkCameraWirelessProfileRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkCameraWirelessProfile_0WithHttpInfo(networkId, wirelessProfileId, updateNetworkCameraWirelessProfileRequest);
        return localVarResp.getData();
    }

    /**
     * Update an existing camera wireless profile in this network.
     * Update an existing camera wireless profile in this network.
     * @param networkId  (required)
     * @param wirelessProfileId  (required)
     * @param updateNetworkCameraWirelessProfileRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkCameraWirelessProfile_0WithHttpInfo(String networkId, String wirelessProfileId, UpdateNetworkCameraWirelessProfileRequest updateNetworkCameraWirelessProfileRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkCameraWirelessProfile_0ValidateBeforeCall(networkId, wirelessProfileId, updateNetworkCameraWirelessProfileRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an existing camera wireless profile in this network. (asynchronously)
     * Update an existing camera wireless profile in this network.
     * @param networkId  (required)
     * @param wirelessProfileId  (required)
     * @param updateNetworkCameraWirelessProfileRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkCameraWirelessProfile_0Async(String networkId, String wirelessProfileId, UpdateNetworkCameraWirelessProfileRequest updateNetworkCameraWirelessProfileRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkCameraWirelessProfile_0ValidateBeforeCall(networkId, wirelessProfileId, updateNetworkCameraWirelessProfileRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkCellularGatewayConnectivityMonitoringDestinations_0
     * @param networkId  (required)
     * @param updateNetworkCellularGatewayConnectivityMonitoringDestinationsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkCellularGatewayConnectivityMonitoringDestinations_0Call(String networkId, UpdateNetworkCellularGatewayConnectivityMonitoringDestinationsRequest updateNetworkCellularGatewayConnectivityMonitoringDestinationsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkCellularGatewayConnectivityMonitoringDestinationsRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/cellularGateway/connectivityMonitoringDestinations"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkCellularGatewayConnectivityMonitoringDestinations_0ValidateBeforeCall(String networkId, UpdateNetworkCellularGatewayConnectivityMonitoringDestinationsRequest updateNetworkCellularGatewayConnectivityMonitoringDestinationsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkCellularGatewayConnectivityMonitoringDestinations_0(Async)");
        }

        return updateNetworkCellularGatewayConnectivityMonitoringDestinations_0Call(networkId, updateNetworkCellularGatewayConnectivityMonitoringDestinationsRequest, _callback);

    }

    /**
     * Update the connectivity testing destinations for an MG network
     * Update the connectivity testing destinations for an MG network
     * @param networkId  (required)
     * @param updateNetworkCellularGatewayConnectivityMonitoringDestinationsRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkCellularGatewayConnectivityMonitoringDestinations_0(String networkId, UpdateNetworkCellularGatewayConnectivityMonitoringDestinationsRequest updateNetworkCellularGatewayConnectivityMonitoringDestinationsRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkCellularGatewayConnectivityMonitoringDestinations_0WithHttpInfo(networkId, updateNetworkCellularGatewayConnectivityMonitoringDestinationsRequest);
        return localVarResp.getData();
    }

    /**
     * Update the connectivity testing destinations for an MG network
     * Update the connectivity testing destinations for an MG network
     * @param networkId  (required)
     * @param updateNetworkCellularGatewayConnectivityMonitoringDestinationsRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkCellularGatewayConnectivityMonitoringDestinations_0WithHttpInfo(String networkId, UpdateNetworkCellularGatewayConnectivityMonitoringDestinationsRequest updateNetworkCellularGatewayConnectivityMonitoringDestinationsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkCellularGatewayConnectivityMonitoringDestinations_0ValidateBeforeCall(networkId, updateNetworkCellularGatewayConnectivityMonitoringDestinationsRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the connectivity testing destinations for an MG network (asynchronously)
     * Update the connectivity testing destinations for an MG network
     * @param networkId  (required)
     * @param updateNetworkCellularGatewayConnectivityMonitoringDestinationsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkCellularGatewayConnectivityMonitoringDestinations_0Async(String networkId, UpdateNetworkCellularGatewayConnectivityMonitoringDestinationsRequest updateNetworkCellularGatewayConnectivityMonitoringDestinationsRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkCellularGatewayConnectivityMonitoringDestinations_0ValidateBeforeCall(networkId, updateNetworkCellularGatewayConnectivityMonitoringDestinationsRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkCellularGatewayDhcp_0
     * @param networkId  (required)
     * @param updateNetworkCellularGatewayDhcpRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkCellularGatewayDhcp_0Call(String networkId, UpdateNetworkCellularGatewayDhcpRequest updateNetworkCellularGatewayDhcpRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkCellularGatewayDhcpRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/cellularGateway/dhcp"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkCellularGatewayDhcp_0ValidateBeforeCall(String networkId, UpdateNetworkCellularGatewayDhcpRequest updateNetworkCellularGatewayDhcpRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkCellularGatewayDhcp_0(Async)");
        }

        return updateNetworkCellularGatewayDhcp_0Call(networkId, updateNetworkCellularGatewayDhcpRequest, _callback);

    }

    /**
     * Update common DHCP settings of MGs
     * Update common DHCP settings of MGs
     * @param networkId  (required)
     * @param updateNetworkCellularGatewayDhcpRequest  (optional)
     * @return GetNetworkCellularGatewayDhcp200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkCellularGatewayDhcp200Response updateNetworkCellularGatewayDhcp_0(String networkId, UpdateNetworkCellularGatewayDhcpRequest updateNetworkCellularGatewayDhcpRequest) throws ApiException {
        ApiResponse<GetNetworkCellularGatewayDhcp200Response> localVarResp = updateNetworkCellularGatewayDhcp_0WithHttpInfo(networkId, updateNetworkCellularGatewayDhcpRequest);
        return localVarResp.getData();
    }

    /**
     * Update common DHCP settings of MGs
     * Update common DHCP settings of MGs
     * @param networkId  (required)
     * @param updateNetworkCellularGatewayDhcpRequest  (optional)
     * @return ApiResponse&lt;GetNetworkCellularGatewayDhcp200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkCellularGatewayDhcp200Response> updateNetworkCellularGatewayDhcp_0WithHttpInfo(String networkId, UpdateNetworkCellularGatewayDhcpRequest updateNetworkCellularGatewayDhcpRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkCellularGatewayDhcp_0ValidateBeforeCall(networkId, updateNetworkCellularGatewayDhcpRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkCellularGatewayDhcp200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update common DHCP settings of MGs (asynchronously)
     * Update common DHCP settings of MGs
     * @param networkId  (required)
     * @param updateNetworkCellularGatewayDhcpRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkCellularGatewayDhcp_0Async(String networkId, UpdateNetworkCellularGatewayDhcpRequest updateNetworkCellularGatewayDhcpRequest, final ApiCallback<GetNetworkCellularGatewayDhcp200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkCellularGatewayDhcp_0ValidateBeforeCall(networkId, updateNetworkCellularGatewayDhcpRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkCellularGatewayDhcp200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkCellularGatewaySubnetPool_0
     * @param networkId  (required)
     * @param updateNetworkCellularGatewaySubnetPoolRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkCellularGatewaySubnetPool_0Call(String networkId, UpdateNetworkCellularGatewaySubnetPoolRequest updateNetworkCellularGatewaySubnetPoolRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkCellularGatewaySubnetPoolRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/cellularGateway/subnetPool"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkCellularGatewaySubnetPool_0ValidateBeforeCall(String networkId, UpdateNetworkCellularGatewaySubnetPoolRequest updateNetworkCellularGatewaySubnetPoolRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkCellularGatewaySubnetPool_0(Async)");
        }

        return updateNetworkCellularGatewaySubnetPool_0Call(networkId, updateNetworkCellularGatewaySubnetPoolRequest, _callback);

    }

    /**
     * Update the subnet pool and mask configuration for MGs in the network.
     * Update the subnet pool and mask configuration for MGs in the network.
     * @param networkId  (required)
     * @param updateNetworkCellularGatewaySubnetPoolRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkCellularGatewaySubnetPool_0(String networkId, UpdateNetworkCellularGatewaySubnetPoolRequest updateNetworkCellularGatewaySubnetPoolRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkCellularGatewaySubnetPool_0WithHttpInfo(networkId, updateNetworkCellularGatewaySubnetPoolRequest);
        return localVarResp.getData();
    }

    /**
     * Update the subnet pool and mask configuration for MGs in the network.
     * Update the subnet pool and mask configuration for MGs in the network.
     * @param networkId  (required)
     * @param updateNetworkCellularGatewaySubnetPoolRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkCellularGatewaySubnetPool_0WithHttpInfo(String networkId, UpdateNetworkCellularGatewaySubnetPoolRequest updateNetworkCellularGatewaySubnetPoolRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkCellularGatewaySubnetPool_0ValidateBeforeCall(networkId, updateNetworkCellularGatewaySubnetPoolRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the subnet pool and mask configuration for MGs in the network. (asynchronously)
     * Update the subnet pool and mask configuration for MGs in the network.
     * @param networkId  (required)
     * @param updateNetworkCellularGatewaySubnetPoolRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkCellularGatewaySubnetPool_0Async(String networkId, UpdateNetworkCellularGatewaySubnetPoolRequest updateNetworkCellularGatewaySubnetPoolRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkCellularGatewaySubnetPool_0ValidateBeforeCall(networkId, updateNetworkCellularGatewaySubnetPoolRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkCellularGatewayUplink_0
     * @param networkId  (required)
     * @param updateNetworkCellularGatewayUplinkRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkCellularGatewayUplink_0Call(String networkId, UpdateNetworkCellularGatewayUplinkRequest updateNetworkCellularGatewayUplinkRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkCellularGatewayUplinkRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/cellularGateway/uplink"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkCellularGatewayUplink_0ValidateBeforeCall(String networkId, UpdateNetworkCellularGatewayUplinkRequest updateNetworkCellularGatewayUplinkRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkCellularGatewayUplink_0(Async)");
        }

        return updateNetworkCellularGatewayUplink_0Call(networkId, updateNetworkCellularGatewayUplinkRequest, _callback);

    }

    /**
     * Updates the uplink settings for your MG network.
     * Updates the uplink settings for your MG network.
     * @param networkId  (required)
     * @param updateNetworkCellularGatewayUplinkRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkCellularGatewayUplink_0(String networkId, UpdateNetworkCellularGatewayUplinkRequest updateNetworkCellularGatewayUplinkRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkCellularGatewayUplink_0WithHttpInfo(networkId, updateNetworkCellularGatewayUplinkRequest);
        return localVarResp.getData();
    }

    /**
     * Updates the uplink settings for your MG network.
     * Updates the uplink settings for your MG network.
     * @param networkId  (required)
     * @param updateNetworkCellularGatewayUplinkRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkCellularGatewayUplink_0WithHttpInfo(String networkId, UpdateNetworkCellularGatewayUplinkRequest updateNetworkCellularGatewayUplinkRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkCellularGatewayUplink_0ValidateBeforeCall(networkId, updateNetworkCellularGatewayUplinkRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the uplink settings for your MG network. (asynchronously)
     * Updates the uplink settings for your MG network.
     * @param networkId  (required)
     * @param updateNetworkCellularGatewayUplinkRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkCellularGatewayUplink_0Async(String networkId, UpdateNetworkCellularGatewayUplinkRequest updateNetworkCellularGatewayUplinkRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkCellularGatewayUplink_0ValidateBeforeCall(networkId, updateNetworkCellularGatewayUplinkRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkClientPolicy_0
     * @param networkId  (required)
     * @param clientId  (required)
     * @param updateNetworkClientPolicyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkClientPolicy_0Call(String networkId, String clientId, UpdateNetworkClientPolicyRequest updateNetworkClientPolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkClientPolicyRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/clients/{clientId}/policy"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "clientId" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkClientPolicy_0ValidateBeforeCall(String networkId, String clientId, UpdateNetworkClientPolicyRequest updateNetworkClientPolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkClientPolicy_0(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling updateNetworkClientPolicy_0(Async)");
        }

        // verify the required parameter 'updateNetworkClientPolicyRequest' is set
        if (updateNetworkClientPolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'updateNetworkClientPolicyRequest' when calling updateNetworkClientPolicy_0(Async)");
        }

        return updateNetworkClientPolicy_0Call(networkId, clientId, updateNetworkClientPolicyRequest, _callback);

    }

    /**
     * Update the policy assigned to a client on the network
     * Update the policy assigned to a client on the network. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clientId  (required)
     * @param updateNetworkClientPolicyRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkClientPolicy_0(String networkId, String clientId, UpdateNetworkClientPolicyRequest updateNetworkClientPolicyRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkClientPolicy_0WithHttpInfo(networkId, clientId, updateNetworkClientPolicyRequest);
        return localVarResp.getData();
    }

    /**
     * Update the policy assigned to a client on the network
     * Update the policy assigned to a client on the network. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clientId  (required)
     * @param updateNetworkClientPolicyRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkClientPolicy_0WithHttpInfo(String networkId, String clientId, UpdateNetworkClientPolicyRequest updateNetworkClientPolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkClientPolicy_0ValidateBeforeCall(networkId, clientId, updateNetworkClientPolicyRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the policy assigned to a client on the network (asynchronously)
     * Update the policy assigned to a client on the network. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clientId  (required)
     * @param updateNetworkClientPolicyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkClientPolicy_0Async(String networkId, String clientId, UpdateNetworkClientPolicyRequest updateNetworkClientPolicyRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkClientPolicy_0ValidateBeforeCall(networkId, clientId, updateNetworkClientPolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkClientSplashAuthorizationStatus_0
     * @param networkId  (required)
     * @param clientId  (required)
     * @param updateNetworkClientSplashAuthorizationStatusRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkClientSplashAuthorizationStatus_0Call(String networkId, String clientId, UpdateNetworkClientSplashAuthorizationStatusRequest updateNetworkClientSplashAuthorizationStatusRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkClientSplashAuthorizationStatusRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/clients/{clientId}/splashAuthorizationStatus"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "clientId" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkClientSplashAuthorizationStatus_0ValidateBeforeCall(String networkId, String clientId, UpdateNetworkClientSplashAuthorizationStatusRequest updateNetworkClientSplashAuthorizationStatusRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkClientSplashAuthorizationStatus_0(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling updateNetworkClientSplashAuthorizationStatus_0(Async)");
        }

        // verify the required parameter 'updateNetworkClientSplashAuthorizationStatusRequest' is set
        if (updateNetworkClientSplashAuthorizationStatusRequest == null) {
            throw new ApiException("Missing the required parameter 'updateNetworkClientSplashAuthorizationStatusRequest' when calling updateNetworkClientSplashAuthorizationStatus_0(Async)");
        }

        return updateNetworkClientSplashAuthorizationStatus_0Call(networkId, clientId, updateNetworkClientSplashAuthorizationStatusRequest, _callback);

    }

    /**
     * Update a client&#39;s splash authorization
     * Update a client&#39;s splash authorization. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clientId  (required)
     * @param updateNetworkClientSplashAuthorizationStatusRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkClientSplashAuthorizationStatus_0(String networkId, String clientId, UpdateNetworkClientSplashAuthorizationStatusRequest updateNetworkClientSplashAuthorizationStatusRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkClientSplashAuthorizationStatus_0WithHttpInfo(networkId, clientId, updateNetworkClientSplashAuthorizationStatusRequest);
        return localVarResp.getData();
    }

    /**
     * Update a client&#39;s splash authorization
     * Update a client&#39;s splash authorization. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clientId  (required)
     * @param updateNetworkClientSplashAuthorizationStatusRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkClientSplashAuthorizationStatus_0WithHttpInfo(String networkId, String clientId, UpdateNetworkClientSplashAuthorizationStatusRequest updateNetworkClientSplashAuthorizationStatusRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkClientSplashAuthorizationStatus_0ValidateBeforeCall(networkId, clientId, updateNetworkClientSplashAuthorizationStatusRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a client&#39;s splash authorization (asynchronously)
     * Update a client&#39;s splash authorization. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param networkId  (required)
     * @param clientId  (required)
     * @param updateNetworkClientSplashAuthorizationStatusRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkClientSplashAuthorizationStatus_0Async(String networkId, String clientId, UpdateNetworkClientSplashAuthorizationStatusRequest updateNetworkClientSplashAuthorizationStatusRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkClientSplashAuthorizationStatus_0ValidateBeforeCall(networkId, clientId, updateNetworkClientSplashAuthorizationStatusRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkFirmwareUpgradesStagedEvents_0
     * @param networkId  (required)
     * @param updateNetworkFirmwareUpgradesStagedEventsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkFirmwareUpgradesStagedEvents_0Call(String networkId, UpdateNetworkFirmwareUpgradesStagedEventsRequest updateNetworkFirmwareUpgradesStagedEventsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkFirmwareUpgradesStagedEventsRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/firmwareUpgrades/staged/events"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkFirmwareUpgradesStagedEvents_0ValidateBeforeCall(String networkId, UpdateNetworkFirmwareUpgradesStagedEventsRequest updateNetworkFirmwareUpgradesStagedEventsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkFirmwareUpgradesStagedEvents_0(Async)");
        }

        // verify the required parameter 'updateNetworkFirmwareUpgradesStagedEventsRequest' is set
        if (updateNetworkFirmwareUpgradesStagedEventsRequest == null) {
            throw new ApiException("Missing the required parameter 'updateNetworkFirmwareUpgradesStagedEventsRequest' when calling updateNetworkFirmwareUpgradesStagedEvents_0(Async)");
        }

        return updateNetworkFirmwareUpgradesStagedEvents_0Call(networkId, updateNetworkFirmwareUpgradesStagedEventsRequest, _callback);

    }

    /**
     * Update the Staged Upgrade Event for a network
     * Update the Staged Upgrade Event for a network
     * @param networkId  (required)
     * @param updateNetworkFirmwareUpgradesStagedEventsRequest  (required)
     * @return GetNetworkFirmwareUpgradesStagedEvents200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkFirmwareUpgradesStagedEvents200Response updateNetworkFirmwareUpgradesStagedEvents_0(String networkId, UpdateNetworkFirmwareUpgradesStagedEventsRequest updateNetworkFirmwareUpgradesStagedEventsRequest) throws ApiException {
        ApiResponse<GetNetworkFirmwareUpgradesStagedEvents200Response> localVarResp = updateNetworkFirmwareUpgradesStagedEvents_0WithHttpInfo(networkId, updateNetworkFirmwareUpgradesStagedEventsRequest);
        return localVarResp.getData();
    }

    /**
     * Update the Staged Upgrade Event for a network
     * Update the Staged Upgrade Event for a network
     * @param networkId  (required)
     * @param updateNetworkFirmwareUpgradesStagedEventsRequest  (required)
     * @return ApiResponse&lt;GetNetworkFirmwareUpgradesStagedEvents200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkFirmwareUpgradesStagedEvents200Response> updateNetworkFirmwareUpgradesStagedEvents_0WithHttpInfo(String networkId, UpdateNetworkFirmwareUpgradesStagedEventsRequest updateNetworkFirmwareUpgradesStagedEventsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkFirmwareUpgradesStagedEvents_0ValidateBeforeCall(networkId, updateNetworkFirmwareUpgradesStagedEventsRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkFirmwareUpgradesStagedEvents200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the Staged Upgrade Event for a network (asynchronously)
     * Update the Staged Upgrade Event for a network
     * @param networkId  (required)
     * @param updateNetworkFirmwareUpgradesStagedEventsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkFirmwareUpgradesStagedEvents_0Async(String networkId, UpdateNetworkFirmwareUpgradesStagedEventsRequest updateNetworkFirmwareUpgradesStagedEventsRequest, final ApiCallback<GetNetworkFirmwareUpgradesStagedEvents200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkFirmwareUpgradesStagedEvents_0ValidateBeforeCall(networkId, updateNetworkFirmwareUpgradesStagedEventsRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkFirmwareUpgradesStagedEvents200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkFirmwareUpgradesStagedGroup_0
     * @param networkId  (required)
     * @param groupId  (required)
     * @param createNetworkFirmwareUpgradesStagedGroupRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkFirmwareUpgradesStagedGroup_0Call(String networkId, String groupId, CreateNetworkFirmwareUpgradesStagedGroupRequest createNetworkFirmwareUpgradesStagedGroupRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNetworkFirmwareUpgradesStagedGroupRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/firmwareUpgrades/staged/groups/{groupId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkFirmwareUpgradesStagedGroup_0ValidateBeforeCall(String networkId, String groupId, CreateNetworkFirmwareUpgradesStagedGroupRequest createNetworkFirmwareUpgradesStagedGroupRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkFirmwareUpgradesStagedGroup_0(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling updateNetworkFirmwareUpgradesStagedGroup_0(Async)");
        }

        // verify the required parameter 'createNetworkFirmwareUpgradesStagedGroupRequest' is set
        if (createNetworkFirmwareUpgradesStagedGroupRequest == null) {
            throw new ApiException("Missing the required parameter 'createNetworkFirmwareUpgradesStagedGroupRequest' when calling updateNetworkFirmwareUpgradesStagedGroup_0(Async)");
        }

        return updateNetworkFirmwareUpgradesStagedGroup_0Call(networkId, groupId, createNetworkFirmwareUpgradesStagedGroupRequest, _callback);

    }

    /**
     * Update a Staged Upgrade Group for a network
     * Update a Staged Upgrade Group for a network
     * @param networkId  (required)
     * @param groupId  (required)
     * @param createNetworkFirmwareUpgradesStagedGroupRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkFirmwareUpgradesStagedGroup_0(String networkId, String groupId, CreateNetworkFirmwareUpgradesStagedGroupRequest createNetworkFirmwareUpgradesStagedGroupRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkFirmwareUpgradesStagedGroup_0WithHttpInfo(networkId, groupId, createNetworkFirmwareUpgradesStagedGroupRequest);
        return localVarResp.getData();
    }

    /**
     * Update a Staged Upgrade Group for a network
     * Update a Staged Upgrade Group for a network
     * @param networkId  (required)
     * @param groupId  (required)
     * @param createNetworkFirmwareUpgradesStagedGroupRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkFirmwareUpgradesStagedGroup_0WithHttpInfo(String networkId, String groupId, CreateNetworkFirmwareUpgradesStagedGroupRequest createNetworkFirmwareUpgradesStagedGroupRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkFirmwareUpgradesStagedGroup_0ValidateBeforeCall(networkId, groupId, createNetworkFirmwareUpgradesStagedGroupRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a Staged Upgrade Group for a network (asynchronously)
     * Update a Staged Upgrade Group for a network
     * @param networkId  (required)
     * @param groupId  (required)
     * @param createNetworkFirmwareUpgradesStagedGroupRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkFirmwareUpgradesStagedGroup_0Async(String networkId, String groupId, CreateNetworkFirmwareUpgradesStagedGroupRequest createNetworkFirmwareUpgradesStagedGroupRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkFirmwareUpgradesStagedGroup_0ValidateBeforeCall(networkId, groupId, createNetworkFirmwareUpgradesStagedGroupRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkFirmwareUpgradesStagedStages_0
     * @param networkId  (required)
     * @param updateNetworkFirmwareUpgradesStagedStagesRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkFirmwareUpgradesStagedStages_0Call(String networkId, UpdateNetworkFirmwareUpgradesStagedStagesRequest updateNetworkFirmwareUpgradesStagedStagesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkFirmwareUpgradesStagedStagesRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/firmwareUpgrades/staged/stages"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkFirmwareUpgradesStagedStages_0ValidateBeforeCall(String networkId, UpdateNetworkFirmwareUpgradesStagedStagesRequest updateNetworkFirmwareUpgradesStagedStagesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkFirmwareUpgradesStagedStages_0(Async)");
        }

        return updateNetworkFirmwareUpgradesStagedStages_0Call(networkId, updateNetworkFirmwareUpgradesStagedStagesRequest, _callback);

    }

    /**
     * Assign Staged Upgrade Group order in the sequence.
     * Assign Staged Upgrade Group order in the sequence.
     * @param networkId  (required)
     * @param updateNetworkFirmwareUpgradesStagedStagesRequest  (optional)
     * @return List&lt;GetNetworkFirmwareUpgradesStagedStages200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetNetworkFirmwareUpgradesStagedStages200ResponseInner> updateNetworkFirmwareUpgradesStagedStages_0(String networkId, UpdateNetworkFirmwareUpgradesStagedStagesRequest updateNetworkFirmwareUpgradesStagedStagesRequest) throws ApiException {
        ApiResponse<List<GetNetworkFirmwareUpgradesStagedStages200ResponseInner>> localVarResp = updateNetworkFirmwareUpgradesStagedStages_0WithHttpInfo(networkId, updateNetworkFirmwareUpgradesStagedStagesRequest);
        return localVarResp.getData();
    }

    /**
     * Assign Staged Upgrade Group order in the sequence.
     * Assign Staged Upgrade Group order in the sequence.
     * @param networkId  (required)
     * @param updateNetworkFirmwareUpgradesStagedStagesRequest  (optional)
     * @return ApiResponse&lt;List&lt;GetNetworkFirmwareUpgradesStagedStages200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetNetworkFirmwareUpgradesStagedStages200ResponseInner>> updateNetworkFirmwareUpgradesStagedStages_0WithHttpInfo(String networkId, UpdateNetworkFirmwareUpgradesStagedStagesRequest updateNetworkFirmwareUpgradesStagedStagesRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkFirmwareUpgradesStagedStages_0ValidateBeforeCall(networkId, updateNetworkFirmwareUpgradesStagedStagesRequest, null);
        Type localVarReturnType = new TypeToken<List<GetNetworkFirmwareUpgradesStagedStages200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Assign Staged Upgrade Group order in the sequence. (asynchronously)
     * Assign Staged Upgrade Group order in the sequence.
     * @param networkId  (required)
     * @param updateNetworkFirmwareUpgradesStagedStagesRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkFirmwareUpgradesStagedStages_0Async(String networkId, UpdateNetworkFirmwareUpgradesStagedStagesRequest updateNetworkFirmwareUpgradesStagedStagesRequest, final ApiCallback<List<GetNetworkFirmwareUpgradesStagedStages200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkFirmwareUpgradesStagedStages_0ValidateBeforeCall(networkId, updateNetworkFirmwareUpgradesStagedStagesRequest, _callback);
        Type localVarReturnType = new TypeToken<List<GetNetworkFirmwareUpgradesStagedStages200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkFirmwareUpgrades_0
     * @param networkId  (required)
     * @param updateNetworkFirmwareUpgradesRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkFirmwareUpgrades_0Call(String networkId, UpdateNetworkFirmwareUpgradesRequest updateNetworkFirmwareUpgradesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkFirmwareUpgradesRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/firmwareUpgrades"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkFirmwareUpgrades_0ValidateBeforeCall(String networkId, UpdateNetworkFirmwareUpgradesRequest updateNetworkFirmwareUpgradesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkFirmwareUpgrades_0(Async)");
        }

        return updateNetworkFirmwareUpgrades_0Call(networkId, updateNetworkFirmwareUpgradesRequest, _callback);

    }

    /**
     * Update firmware upgrade information for a network
     * Update firmware upgrade information for a network
     * @param networkId  (required)
     * @param updateNetworkFirmwareUpgradesRequest  (optional)
     * @return GetNetworkFirmwareUpgrades200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkFirmwareUpgrades200Response updateNetworkFirmwareUpgrades_0(String networkId, UpdateNetworkFirmwareUpgradesRequest updateNetworkFirmwareUpgradesRequest) throws ApiException {
        ApiResponse<GetNetworkFirmwareUpgrades200Response> localVarResp = updateNetworkFirmwareUpgrades_0WithHttpInfo(networkId, updateNetworkFirmwareUpgradesRequest);
        return localVarResp.getData();
    }

    /**
     * Update firmware upgrade information for a network
     * Update firmware upgrade information for a network
     * @param networkId  (required)
     * @param updateNetworkFirmwareUpgradesRequest  (optional)
     * @return ApiResponse&lt;GetNetworkFirmwareUpgrades200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkFirmwareUpgrades200Response> updateNetworkFirmwareUpgrades_0WithHttpInfo(String networkId, UpdateNetworkFirmwareUpgradesRequest updateNetworkFirmwareUpgradesRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkFirmwareUpgrades_0ValidateBeforeCall(networkId, updateNetworkFirmwareUpgradesRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkFirmwareUpgrades200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update firmware upgrade information for a network (asynchronously)
     * Update firmware upgrade information for a network
     * @param networkId  (required)
     * @param updateNetworkFirmwareUpgradesRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkFirmwareUpgrades_0Async(String networkId, UpdateNetworkFirmwareUpgradesRequest updateNetworkFirmwareUpgradesRequest, final ApiCallback<GetNetworkFirmwareUpgrades200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkFirmwareUpgrades_0ValidateBeforeCall(networkId, updateNetworkFirmwareUpgradesRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkFirmwareUpgrades200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkFloorPlan_0
     * @param networkId  (required)
     * @param floorPlanId  (required)
     * @param updateNetworkFloorPlanRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkFloorPlan_0Call(String networkId, String floorPlanId, UpdateNetworkFloorPlanRequest updateNetworkFloorPlanRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkFloorPlanRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/floorPlans/{floorPlanId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "floorPlanId" + "}", localVarApiClient.escapeString(floorPlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkFloorPlan_0ValidateBeforeCall(String networkId, String floorPlanId, UpdateNetworkFloorPlanRequest updateNetworkFloorPlanRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkFloorPlan_0(Async)");
        }

        // verify the required parameter 'floorPlanId' is set
        if (floorPlanId == null) {
            throw new ApiException("Missing the required parameter 'floorPlanId' when calling updateNetworkFloorPlan_0(Async)");
        }

        return updateNetworkFloorPlan_0Call(networkId, floorPlanId, updateNetworkFloorPlanRequest, _callback);

    }

    /**
     * Update a floor plan&#39;s geolocation and other meta data
     * Update a floor plan&#39;s geolocation and other meta data
     * @param networkId  (required)
     * @param floorPlanId  (required)
     * @param updateNetworkFloorPlanRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkFloorPlan_0(String networkId, String floorPlanId, UpdateNetworkFloorPlanRequest updateNetworkFloorPlanRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkFloorPlan_0WithHttpInfo(networkId, floorPlanId, updateNetworkFloorPlanRequest);
        return localVarResp.getData();
    }

    /**
     * Update a floor plan&#39;s geolocation and other meta data
     * Update a floor plan&#39;s geolocation and other meta data
     * @param networkId  (required)
     * @param floorPlanId  (required)
     * @param updateNetworkFloorPlanRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkFloorPlan_0WithHttpInfo(String networkId, String floorPlanId, UpdateNetworkFloorPlanRequest updateNetworkFloorPlanRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkFloorPlan_0ValidateBeforeCall(networkId, floorPlanId, updateNetworkFloorPlanRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a floor plan&#39;s geolocation and other meta data (asynchronously)
     * Update a floor plan&#39;s geolocation and other meta data
     * @param networkId  (required)
     * @param floorPlanId  (required)
     * @param updateNetworkFloorPlanRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkFloorPlan_0Async(String networkId, String floorPlanId, UpdateNetworkFloorPlanRequest updateNetworkFloorPlanRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkFloorPlan_0ValidateBeforeCall(networkId, floorPlanId, updateNetworkFloorPlanRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkGroupPolicy_0
     * @param networkId  (required)
     * @param groupPolicyId  (required)
     * @param updateNetworkGroupPolicyRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkGroupPolicy_0Call(String networkId, String groupPolicyId, UpdateNetworkGroupPolicyRequest updateNetworkGroupPolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkGroupPolicyRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/groupPolicies/{groupPolicyId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "groupPolicyId" + "}", localVarApiClient.escapeString(groupPolicyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkGroupPolicy_0ValidateBeforeCall(String networkId, String groupPolicyId, UpdateNetworkGroupPolicyRequest updateNetworkGroupPolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkGroupPolicy_0(Async)");
        }

        // verify the required parameter 'groupPolicyId' is set
        if (groupPolicyId == null) {
            throw new ApiException("Missing the required parameter 'groupPolicyId' when calling updateNetworkGroupPolicy_0(Async)");
        }

        return updateNetworkGroupPolicy_0Call(networkId, groupPolicyId, updateNetworkGroupPolicyRequest, _callback);

    }

    /**
     * Update a group policy
     * Update a group policy
     * @param networkId  (required)
     * @param groupPolicyId  (required)
     * @param updateNetworkGroupPolicyRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkGroupPolicy_0(String networkId, String groupPolicyId, UpdateNetworkGroupPolicyRequest updateNetworkGroupPolicyRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkGroupPolicy_0WithHttpInfo(networkId, groupPolicyId, updateNetworkGroupPolicyRequest);
        return localVarResp.getData();
    }

    /**
     * Update a group policy
     * Update a group policy
     * @param networkId  (required)
     * @param groupPolicyId  (required)
     * @param updateNetworkGroupPolicyRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkGroupPolicy_0WithHttpInfo(String networkId, String groupPolicyId, UpdateNetworkGroupPolicyRequest updateNetworkGroupPolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkGroupPolicy_0ValidateBeforeCall(networkId, groupPolicyId, updateNetworkGroupPolicyRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a group policy (asynchronously)
     * Update a group policy
     * @param networkId  (required)
     * @param groupPolicyId  (required)
     * @param updateNetworkGroupPolicyRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkGroupPolicy_0Async(String networkId, String groupPolicyId, UpdateNetworkGroupPolicyRequest updateNetworkGroupPolicyRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkGroupPolicy_0ValidateBeforeCall(networkId, groupPolicyId, updateNetworkGroupPolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkMerakiAuthUser_0
     * @param networkId  (required)
     * @param merakiAuthUserId  (required)
     * @param updateNetworkMerakiAuthUserRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkMerakiAuthUser_0Call(String networkId, String merakiAuthUserId, UpdateNetworkMerakiAuthUserRequest updateNetworkMerakiAuthUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkMerakiAuthUserRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/merakiAuthUsers/{merakiAuthUserId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "merakiAuthUserId" + "}", localVarApiClient.escapeString(merakiAuthUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkMerakiAuthUser_0ValidateBeforeCall(String networkId, String merakiAuthUserId, UpdateNetworkMerakiAuthUserRequest updateNetworkMerakiAuthUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkMerakiAuthUser_0(Async)");
        }

        // verify the required parameter 'merakiAuthUserId' is set
        if (merakiAuthUserId == null) {
            throw new ApiException("Missing the required parameter 'merakiAuthUserId' when calling updateNetworkMerakiAuthUser_0(Async)");
        }

        return updateNetworkMerakiAuthUser_0Call(networkId, merakiAuthUserId, updateNetworkMerakiAuthUserRequest, _callback);

    }

    /**
     * Update a user configured with Meraki Authentication (currently, 802.1X RADIUS, splash guest, and client VPN users can be updated)
     * Update a user configured with Meraki Authentication (currently, 802.1X RADIUS, splash guest, and client VPN users can be updated)
     * @param networkId  (required)
     * @param merakiAuthUserId  (required)
     * @param updateNetworkMerakiAuthUserRequest  (optional)
     * @return GetNetworkMerakiAuthUsers200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkMerakiAuthUsers200ResponseInner updateNetworkMerakiAuthUser_0(String networkId, String merakiAuthUserId, UpdateNetworkMerakiAuthUserRequest updateNetworkMerakiAuthUserRequest) throws ApiException {
        ApiResponse<GetNetworkMerakiAuthUsers200ResponseInner> localVarResp = updateNetworkMerakiAuthUser_0WithHttpInfo(networkId, merakiAuthUserId, updateNetworkMerakiAuthUserRequest);
        return localVarResp.getData();
    }

    /**
     * Update a user configured with Meraki Authentication (currently, 802.1X RADIUS, splash guest, and client VPN users can be updated)
     * Update a user configured with Meraki Authentication (currently, 802.1X RADIUS, splash guest, and client VPN users can be updated)
     * @param networkId  (required)
     * @param merakiAuthUserId  (required)
     * @param updateNetworkMerakiAuthUserRequest  (optional)
     * @return ApiResponse&lt;GetNetworkMerakiAuthUsers200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkMerakiAuthUsers200ResponseInner> updateNetworkMerakiAuthUser_0WithHttpInfo(String networkId, String merakiAuthUserId, UpdateNetworkMerakiAuthUserRequest updateNetworkMerakiAuthUserRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkMerakiAuthUser_0ValidateBeforeCall(networkId, merakiAuthUserId, updateNetworkMerakiAuthUserRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkMerakiAuthUsers200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a user configured with Meraki Authentication (currently, 802.1X RADIUS, splash guest, and client VPN users can be updated) (asynchronously)
     * Update a user configured with Meraki Authentication (currently, 802.1X RADIUS, splash guest, and client VPN users can be updated)
     * @param networkId  (required)
     * @param merakiAuthUserId  (required)
     * @param updateNetworkMerakiAuthUserRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkMerakiAuthUser_0Async(String networkId, String merakiAuthUserId, UpdateNetworkMerakiAuthUserRequest updateNetworkMerakiAuthUserRequest, final ApiCallback<GetNetworkMerakiAuthUsers200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkMerakiAuthUser_0ValidateBeforeCall(networkId, merakiAuthUserId, updateNetworkMerakiAuthUserRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkMerakiAuthUsers200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkMqttBroker_0
     * @param networkId  (required)
     * @param mqttBrokerId  (required)
     * @param updateNetworkMqttBrokerRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkMqttBroker_0Call(String networkId, String mqttBrokerId, UpdateNetworkMqttBrokerRequest updateNetworkMqttBrokerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkMqttBrokerRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/mqttBrokers/{mqttBrokerId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "mqttBrokerId" + "}", localVarApiClient.escapeString(mqttBrokerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkMqttBroker_0ValidateBeforeCall(String networkId, String mqttBrokerId, UpdateNetworkMqttBrokerRequest updateNetworkMqttBrokerRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkMqttBroker_0(Async)");
        }

        // verify the required parameter 'mqttBrokerId' is set
        if (mqttBrokerId == null) {
            throw new ApiException("Missing the required parameter 'mqttBrokerId' when calling updateNetworkMqttBroker_0(Async)");
        }

        return updateNetworkMqttBroker_0Call(networkId, mqttBrokerId, updateNetworkMqttBrokerRequest, _callback);

    }

    /**
     * Update an MQTT broker
     * Update an MQTT broker
     * @param networkId  (required)
     * @param mqttBrokerId  (required)
     * @param updateNetworkMqttBrokerRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkMqttBroker_0(String networkId, String mqttBrokerId, UpdateNetworkMqttBrokerRequest updateNetworkMqttBrokerRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkMqttBroker_0WithHttpInfo(networkId, mqttBrokerId, updateNetworkMqttBrokerRequest);
        return localVarResp.getData();
    }

    /**
     * Update an MQTT broker
     * Update an MQTT broker
     * @param networkId  (required)
     * @param mqttBrokerId  (required)
     * @param updateNetworkMqttBrokerRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkMqttBroker_0WithHttpInfo(String networkId, String mqttBrokerId, UpdateNetworkMqttBrokerRequest updateNetworkMqttBrokerRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkMqttBroker_0ValidateBeforeCall(networkId, mqttBrokerId, updateNetworkMqttBrokerRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an MQTT broker (asynchronously)
     * Update an MQTT broker
     * @param networkId  (required)
     * @param mqttBrokerId  (required)
     * @param updateNetworkMqttBrokerRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkMqttBroker_0Async(String networkId, String mqttBrokerId, UpdateNetworkMqttBrokerRequest updateNetworkMqttBrokerRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkMqttBroker_0ValidateBeforeCall(networkId, mqttBrokerId, updateNetworkMqttBrokerRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkNetflow_0
     * @param networkId  (required)
     * @param updateNetworkNetflowRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkNetflow_0Call(String networkId, UpdateNetworkNetflowRequest updateNetworkNetflowRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkNetflowRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/netflow"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkNetflow_0ValidateBeforeCall(String networkId, UpdateNetworkNetflowRequest updateNetworkNetflowRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkNetflow_0(Async)");
        }

        return updateNetworkNetflow_0Call(networkId, updateNetworkNetflowRequest, _callback);

    }

    /**
     * Update the NetFlow traffic reporting settings for a network
     * Update the NetFlow traffic reporting settings for a network
     * @param networkId  (required)
     * @param updateNetworkNetflowRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkNetflow_0(String networkId, UpdateNetworkNetflowRequest updateNetworkNetflowRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkNetflow_0WithHttpInfo(networkId, updateNetworkNetflowRequest);
        return localVarResp.getData();
    }

    /**
     * Update the NetFlow traffic reporting settings for a network
     * Update the NetFlow traffic reporting settings for a network
     * @param networkId  (required)
     * @param updateNetworkNetflowRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkNetflow_0WithHttpInfo(String networkId, UpdateNetworkNetflowRequest updateNetworkNetflowRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkNetflow_0ValidateBeforeCall(networkId, updateNetworkNetflowRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the NetFlow traffic reporting settings for a network (asynchronously)
     * Update the NetFlow traffic reporting settings for a network
     * @param networkId  (required)
     * @param updateNetworkNetflowRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkNetflow_0Async(String networkId, UpdateNetworkNetflowRequest updateNetworkNetflowRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkNetflow_0ValidateBeforeCall(networkId, updateNetworkNetflowRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkSensorAlertsProfile_0
     * @param networkId  (required)
     * @param id  (required)
     * @param updateNetworkSensorAlertsProfileRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSensorAlertsProfile_0Call(String networkId, String id, UpdateNetworkSensorAlertsProfileRequest updateNetworkSensorAlertsProfileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkSensorAlertsProfileRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/sensor/alerts/profiles/{id}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkSensorAlertsProfile_0ValidateBeforeCall(String networkId, String id, UpdateNetworkSensorAlertsProfileRequest updateNetworkSensorAlertsProfileRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkSensorAlertsProfile_0(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateNetworkSensorAlertsProfile_0(Async)");
        }

        return updateNetworkSensorAlertsProfile_0Call(networkId, id, updateNetworkSensorAlertsProfileRequest, _callback);

    }

    /**
     * Updates a sensor alert profile for a network.
     * Updates a sensor alert profile for a network.
     * @param networkId  (required)
     * @param id  (required)
     * @param updateNetworkSensorAlertsProfileRequest  (optional)
     * @return GetNetworkSensorAlertsProfiles200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkSensorAlertsProfiles200ResponseInner updateNetworkSensorAlertsProfile_0(String networkId, String id, UpdateNetworkSensorAlertsProfileRequest updateNetworkSensorAlertsProfileRequest) throws ApiException {
        ApiResponse<GetNetworkSensorAlertsProfiles200ResponseInner> localVarResp = updateNetworkSensorAlertsProfile_0WithHttpInfo(networkId, id, updateNetworkSensorAlertsProfileRequest);
        return localVarResp.getData();
    }

    /**
     * Updates a sensor alert profile for a network.
     * Updates a sensor alert profile for a network.
     * @param networkId  (required)
     * @param id  (required)
     * @param updateNetworkSensorAlertsProfileRequest  (optional)
     * @return ApiResponse&lt;GetNetworkSensorAlertsProfiles200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkSensorAlertsProfiles200ResponseInner> updateNetworkSensorAlertsProfile_0WithHttpInfo(String networkId, String id, UpdateNetworkSensorAlertsProfileRequest updateNetworkSensorAlertsProfileRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkSensorAlertsProfile_0ValidateBeforeCall(networkId, id, updateNetworkSensorAlertsProfileRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkSensorAlertsProfiles200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a sensor alert profile for a network. (asynchronously)
     * Updates a sensor alert profile for a network.
     * @param networkId  (required)
     * @param id  (required)
     * @param updateNetworkSensorAlertsProfileRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSensorAlertsProfile_0Async(String networkId, String id, UpdateNetworkSensorAlertsProfileRequest updateNetworkSensorAlertsProfileRequest, final ApiCallback<GetNetworkSensorAlertsProfiles200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkSensorAlertsProfile_0ValidateBeforeCall(networkId, id, updateNetworkSensorAlertsProfileRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkSensorAlertsProfiles200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkSettings_0
     * @param networkId  (required)
     * @param updateNetworkSettingsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSettings_0Call(String networkId, UpdateNetworkSettingsRequest updateNetworkSettingsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkSettingsRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/settings"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkSettings_0ValidateBeforeCall(String networkId, UpdateNetworkSettingsRequest updateNetworkSettingsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkSettings_0(Async)");
        }

        return updateNetworkSettings_0Call(networkId, updateNetworkSettingsRequest, _callback);

    }

    /**
     * Update the settings for a network
     * Update the settings for a network
     * @param networkId  (required)
     * @param updateNetworkSettingsRequest  (optional)
     * @return GetNetworkSettings200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkSettings200Response updateNetworkSettings_0(String networkId, UpdateNetworkSettingsRequest updateNetworkSettingsRequest) throws ApiException {
        ApiResponse<GetNetworkSettings200Response> localVarResp = updateNetworkSettings_0WithHttpInfo(networkId, updateNetworkSettingsRequest);
        return localVarResp.getData();
    }

    /**
     * Update the settings for a network
     * Update the settings for a network
     * @param networkId  (required)
     * @param updateNetworkSettingsRequest  (optional)
     * @return ApiResponse&lt;GetNetworkSettings200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkSettings200Response> updateNetworkSettings_0WithHttpInfo(String networkId, UpdateNetworkSettingsRequest updateNetworkSettingsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkSettings_0ValidateBeforeCall(networkId, updateNetworkSettingsRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkSettings200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the settings for a network (asynchronously)
     * Update the settings for a network
     * @param networkId  (required)
     * @param updateNetworkSettingsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSettings_0Async(String networkId, UpdateNetworkSettingsRequest updateNetworkSettingsRequest, final ApiCallback<GetNetworkSettings200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkSettings_0ValidateBeforeCall(networkId, updateNetworkSettingsRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkSettings200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkSmDevicesFields_0
     * @param networkId  (required)
     * @param updateNetworkSmDevicesFieldsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSmDevicesFields_0Call(String networkId, UpdateNetworkSmDevicesFieldsRequest updateNetworkSmDevicesFieldsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkSmDevicesFieldsRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/sm/devices/fields"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkSmDevicesFields_0ValidateBeforeCall(String networkId, UpdateNetworkSmDevicesFieldsRequest updateNetworkSmDevicesFieldsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkSmDevicesFields_0(Async)");
        }

        // verify the required parameter 'updateNetworkSmDevicesFieldsRequest' is set
        if (updateNetworkSmDevicesFieldsRequest == null) {
            throw new ApiException("Missing the required parameter 'updateNetworkSmDevicesFieldsRequest' when calling updateNetworkSmDevicesFields_0(Async)");
        }

        return updateNetworkSmDevicesFields_0Call(networkId, updateNetworkSmDevicesFieldsRequest, _callback);

    }

    /**
     * Modify the fields of a device
     * Modify the fields of a device
     * @param networkId  (required)
     * @param updateNetworkSmDevicesFieldsRequest  (required)
     * @return List&lt;UpdateNetworkSmDevicesFields200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<UpdateNetworkSmDevicesFields200ResponseInner> updateNetworkSmDevicesFields_0(String networkId, UpdateNetworkSmDevicesFieldsRequest updateNetworkSmDevicesFieldsRequest) throws ApiException {
        ApiResponse<List<UpdateNetworkSmDevicesFields200ResponseInner>> localVarResp = updateNetworkSmDevicesFields_0WithHttpInfo(networkId, updateNetworkSmDevicesFieldsRequest);
        return localVarResp.getData();
    }

    /**
     * Modify the fields of a device
     * Modify the fields of a device
     * @param networkId  (required)
     * @param updateNetworkSmDevicesFieldsRequest  (required)
     * @return ApiResponse&lt;List&lt;UpdateNetworkSmDevicesFields200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UpdateNetworkSmDevicesFields200ResponseInner>> updateNetworkSmDevicesFields_0WithHttpInfo(String networkId, UpdateNetworkSmDevicesFieldsRequest updateNetworkSmDevicesFieldsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkSmDevicesFields_0ValidateBeforeCall(networkId, updateNetworkSmDevicesFieldsRequest, null);
        Type localVarReturnType = new TypeToken<List<UpdateNetworkSmDevicesFields200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Modify the fields of a device (asynchronously)
     * Modify the fields of a device
     * @param networkId  (required)
     * @param updateNetworkSmDevicesFieldsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSmDevicesFields_0Async(String networkId, UpdateNetworkSmDevicesFieldsRequest updateNetworkSmDevicesFieldsRequest, final ApiCallback<List<UpdateNetworkSmDevicesFields200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkSmDevicesFields_0ValidateBeforeCall(networkId, updateNetworkSmDevicesFieldsRequest, _callback);
        Type localVarReturnType = new TypeToken<List<UpdateNetworkSmDevicesFields200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkSmTargetGroup_0
     * @param networkId  (required)
     * @param targetGroupId  (required)
     * @param createNetworkSmTargetGroupRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSmTargetGroup_0Call(String networkId, String targetGroupId, CreateNetworkSmTargetGroupRequest createNetworkSmTargetGroupRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNetworkSmTargetGroupRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/sm/targetGroups/{targetGroupId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "targetGroupId" + "}", localVarApiClient.escapeString(targetGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkSmTargetGroup_0ValidateBeforeCall(String networkId, String targetGroupId, CreateNetworkSmTargetGroupRequest createNetworkSmTargetGroupRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkSmTargetGroup_0(Async)");
        }

        // verify the required parameter 'targetGroupId' is set
        if (targetGroupId == null) {
            throw new ApiException("Missing the required parameter 'targetGroupId' when calling updateNetworkSmTargetGroup_0(Async)");
        }

        return updateNetworkSmTargetGroup_0Call(networkId, targetGroupId, createNetworkSmTargetGroupRequest, _callback);

    }

    /**
     * Update a target group
     * Update a target group
     * @param networkId  (required)
     * @param targetGroupId  (required)
     * @param createNetworkSmTargetGroupRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkSmTargetGroup_0(String networkId, String targetGroupId, CreateNetworkSmTargetGroupRequest createNetworkSmTargetGroupRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkSmTargetGroup_0WithHttpInfo(networkId, targetGroupId, createNetworkSmTargetGroupRequest);
        return localVarResp.getData();
    }

    /**
     * Update a target group
     * Update a target group
     * @param networkId  (required)
     * @param targetGroupId  (required)
     * @param createNetworkSmTargetGroupRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkSmTargetGroup_0WithHttpInfo(String networkId, String targetGroupId, CreateNetworkSmTargetGroupRequest createNetworkSmTargetGroupRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkSmTargetGroup_0ValidateBeforeCall(networkId, targetGroupId, createNetworkSmTargetGroupRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a target group (asynchronously)
     * Update a target group
     * @param networkId  (required)
     * @param targetGroupId  (required)
     * @param createNetworkSmTargetGroupRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSmTargetGroup_0Async(String networkId, String targetGroupId, CreateNetworkSmTargetGroupRequest createNetworkSmTargetGroupRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkSmTargetGroup_0ValidateBeforeCall(networkId, targetGroupId, createNetworkSmTargetGroupRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkSnmp_0
     * @param networkId  (required)
     * @param updateNetworkSnmpRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSnmp_0Call(String networkId, UpdateNetworkSnmpRequest updateNetworkSnmpRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkSnmpRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/snmp"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkSnmp_0ValidateBeforeCall(String networkId, UpdateNetworkSnmpRequest updateNetworkSnmpRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkSnmp_0(Async)");
        }

        return updateNetworkSnmp_0Call(networkId, updateNetworkSnmpRequest, _callback);

    }

    /**
     * Update the SNMP settings for a network
     * Update the SNMP settings for a network
     * @param networkId  (required)
     * @param updateNetworkSnmpRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkSnmp_0(String networkId, UpdateNetworkSnmpRequest updateNetworkSnmpRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkSnmp_0WithHttpInfo(networkId, updateNetworkSnmpRequest);
        return localVarResp.getData();
    }

    /**
     * Update the SNMP settings for a network
     * Update the SNMP settings for a network
     * @param networkId  (required)
     * @param updateNetworkSnmpRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkSnmp_0WithHttpInfo(String networkId, UpdateNetworkSnmpRequest updateNetworkSnmpRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkSnmp_0ValidateBeforeCall(networkId, updateNetworkSnmpRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the SNMP settings for a network (asynchronously)
     * Update the SNMP settings for a network
     * @param networkId  (required)
     * @param updateNetworkSnmpRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSnmp_0Async(String networkId, UpdateNetworkSnmpRequest updateNetworkSnmpRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkSnmp_0ValidateBeforeCall(networkId, updateNetworkSnmpRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkSwitchAccessControlLists_0
     * @param networkId  (required)
     * @param updateNetworkSwitchAccessControlListsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSwitchAccessControlLists_0Call(String networkId, UpdateNetworkSwitchAccessControlListsRequest updateNetworkSwitchAccessControlListsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkSwitchAccessControlListsRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/accessControlLists"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkSwitchAccessControlLists_0ValidateBeforeCall(String networkId, UpdateNetworkSwitchAccessControlListsRequest updateNetworkSwitchAccessControlListsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkSwitchAccessControlLists_0(Async)");
        }

        // verify the required parameter 'updateNetworkSwitchAccessControlListsRequest' is set
        if (updateNetworkSwitchAccessControlListsRequest == null) {
            throw new ApiException("Missing the required parameter 'updateNetworkSwitchAccessControlListsRequest' when calling updateNetworkSwitchAccessControlLists_0(Async)");
        }

        return updateNetworkSwitchAccessControlLists_0Call(networkId, updateNetworkSwitchAccessControlListsRequest, _callback);

    }

    /**
     * Update the access control lists for a MS network
     * Update the access control lists for a MS network
     * @param networkId  (required)
     * @param updateNetworkSwitchAccessControlListsRequest  (required)
     * @return GetNetworkSwitchAccessControlLists200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkSwitchAccessControlLists200Response updateNetworkSwitchAccessControlLists_0(String networkId, UpdateNetworkSwitchAccessControlListsRequest updateNetworkSwitchAccessControlListsRequest) throws ApiException {
        ApiResponse<GetNetworkSwitchAccessControlLists200Response> localVarResp = updateNetworkSwitchAccessControlLists_0WithHttpInfo(networkId, updateNetworkSwitchAccessControlListsRequest);
        return localVarResp.getData();
    }

    /**
     * Update the access control lists for a MS network
     * Update the access control lists for a MS network
     * @param networkId  (required)
     * @param updateNetworkSwitchAccessControlListsRequest  (required)
     * @return ApiResponse&lt;GetNetworkSwitchAccessControlLists200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkSwitchAccessControlLists200Response> updateNetworkSwitchAccessControlLists_0WithHttpInfo(String networkId, UpdateNetworkSwitchAccessControlListsRequest updateNetworkSwitchAccessControlListsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkSwitchAccessControlLists_0ValidateBeforeCall(networkId, updateNetworkSwitchAccessControlListsRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkSwitchAccessControlLists200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the access control lists for a MS network (asynchronously)
     * Update the access control lists for a MS network
     * @param networkId  (required)
     * @param updateNetworkSwitchAccessControlListsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSwitchAccessControlLists_0Async(String networkId, UpdateNetworkSwitchAccessControlListsRequest updateNetworkSwitchAccessControlListsRequest, final ApiCallback<GetNetworkSwitchAccessControlLists200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkSwitchAccessControlLists_0ValidateBeforeCall(networkId, updateNetworkSwitchAccessControlListsRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkSwitchAccessControlLists200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkSwitchAccessPolicy_0
     * @param networkId  (required)
     * @param accessPolicyNumber  (required)
     * @param updateNetworkSwitchAccessPolicyRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSwitchAccessPolicy_0Call(String networkId, String accessPolicyNumber, UpdateNetworkSwitchAccessPolicyRequest updateNetworkSwitchAccessPolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkSwitchAccessPolicyRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/accessPolicies/{accessPolicyNumber}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "accessPolicyNumber" + "}", localVarApiClient.escapeString(accessPolicyNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkSwitchAccessPolicy_0ValidateBeforeCall(String networkId, String accessPolicyNumber, UpdateNetworkSwitchAccessPolicyRequest updateNetworkSwitchAccessPolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkSwitchAccessPolicy_0(Async)");
        }

        // verify the required parameter 'accessPolicyNumber' is set
        if (accessPolicyNumber == null) {
            throw new ApiException("Missing the required parameter 'accessPolicyNumber' when calling updateNetworkSwitchAccessPolicy_0(Async)");
        }

        return updateNetworkSwitchAccessPolicy_0Call(networkId, accessPolicyNumber, updateNetworkSwitchAccessPolicyRequest, _callback);

    }

    /**
     * Update an access policy for a switch network
     * Update an access policy for a switch network. If you would like to enable Meraki Authentication, set radiusServers to empty array.
     * @param networkId  (required)
     * @param accessPolicyNumber  (required)
     * @param updateNetworkSwitchAccessPolicyRequest  (optional)
     * @return GetNetworkSwitchAccessPolicies200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkSwitchAccessPolicies200ResponseInner updateNetworkSwitchAccessPolicy_0(String networkId, String accessPolicyNumber, UpdateNetworkSwitchAccessPolicyRequest updateNetworkSwitchAccessPolicyRequest) throws ApiException {
        ApiResponse<GetNetworkSwitchAccessPolicies200ResponseInner> localVarResp = updateNetworkSwitchAccessPolicy_0WithHttpInfo(networkId, accessPolicyNumber, updateNetworkSwitchAccessPolicyRequest);
        return localVarResp.getData();
    }

    /**
     * Update an access policy for a switch network
     * Update an access policy for a switch network. If you would like to enable Meraki Authentication, set radiusServers to empty array.
     * @param networkId  (required)
     * @param accessPolicyNumber  (required)
     * @param updateNetworkSwitchAccessPolicyRequest  (optional)
     * @return ApiResponse&lt;GetNetworkSwitchAccessPolicies200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkSwitchAccessPolicies200ResponseInner> updateNetworkSwitchAccessPolicy_0WithHttpInfo(String networkId, String accessPolicyNumber, UpdateNetworkSwitchAccessPolicyRequest updateNetworkSwitchAccessPolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkSwitchAccessPolicy_0ValidateBeforeCall(networkId, accessPolicyNumber, updateNetworkSwitchAccessPolicyRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkSwitchAccessPolicies200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an access policy for a switch network (asynchronously)
     * Update an access policy for a switch network. If you would like to enable Meraki Authentication, set radiusServers to empty array.
     * @param networkId  (required)
     * @param accessPolicyNumber  (required)
     * @param updateNetworkSwitchAccessPolicyRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSwitchAccessPolicy_0Async(String networkId, String accessPolicyNumber, UpdateNetworkSwitchAccessPolicyRequest updateNetworkSwitchAccessPolicyRequest, final ApiCallback<GetNetworkSwitchAccessPolicies200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkSwitchAccessPolicy_0ValidateBeforeCall(networkId, accessPolicyNumber, updateNetworkSwitchAccessPolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkSwitchAccessPolicies200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkSwitchAlternateManagementInterface_0
     * @param networkId  (required)
     * @param updateNetworkSwitchAlternateManagementInterfaceRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSwitchAlternateManagementInterface_0Call(String networkId, UpdateNetworkSwitchAlternateManagementInterfaceRequest updateNetworkSwitchAlternateManagementInterfaceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkSwitchAlternateManagementInterfaceRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/alternateManagementInterface"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkSwitchAlternateManagementInterface_0ValidateBeforeCall(String networkId, UpdateNetworkSwitchAlternateManagementInterfaceRequest updateNetworkSwitchAlternateManagementInterfaceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkSwitchAlternateManagementInterface_0(Async)");
        }

        return updateNetworkSwitchAlternateManagementInterface_0Call(networkId, updateNetworkSwitchAlternateManagementInterfaceRequest, _callback);

    }

    /**
     * Update the switch alternate management interface for the network
     * Update the switch alternate management interface for the network
     * @param networkId  (required)
     * @param updateNetworkSwitchAlternateManagementInterfaceRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkSwitchAlternateManagementInterface_0(String networkId, UpdateNetworkSwitchAlternateManagementInterfaceRequest updateNetworkSwitchAlternateManagementInterfaceRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkSwitchAlternateManagementInterface_0WithHttpInfo(networkId, updateNetworkSwitchAlternateManagementInterfaceRequest);
        return localVarResp.getData();
    }

    /**
     * Update the switch alternate management interface for the network
     * Update the switch alternate management interface for the network
     * @param networkId  (required)
     * @param updateNetworkSwitchAlternateManagementInterfaceRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkSwitchAlternateManagementInterface_0WithHttpInfo(String networkId, UpdateNetworkSwitchAlternateManagementInterfaceRequest updateNetworkSwitchAlternateManagementInterfaceRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkSwitchAlternateManagementInterface_0ValidateBeforeCall(networkId, updateNetworkSwitchAlternateManagementInterfaceRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the switch alternate management interface for the network (asynchronously)
     * Update the switch alternate management interface for the network
     * @param networkId  (required)
     * @param updateNetworkSwitchAlternateManagementInterfaceRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSwitchAlternateManagementInterface_0Async(String networkId, UpdateNetworkSwitchAlternateManagementInterfaceRequest updateNetworkSwitchAlternateManagementInterfaceRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkSwitchAlternateManagementInterface_0ValidateBeforeCall(networkId, updateNetworkSwitchAlternateManagementInterfaceRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_0
     * @param networkId  (required)
     * @param trustedServerId  (required)
     * @param updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_0Call(String networkId, String trustedServerId, UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/dhcpServerPolicy/arpInspection/trustedServers/{trustedServerId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "trustedServerId" + "}", localVarApiClient.escapeString(trustedServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_0ValidateBeforeCall(String networkId, String trustedServerId, UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_0(Async)");
        }

        // verify the required parameter 'trustedServerId' is set
        if (trustedServerId == null) {
            throw new ApiException("Missing the required parameter 'trustedServerId' when calling updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_0(Async)");
        }

        return updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_0Call(networkId, trustedServerId, updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest, _callback);

    }

    /**
     * Update a server that is trusted by Dynamic ARP Inspection on this network
     * Update a server that is trusted by Dynamic ARP Inspection on this network
     * @param networkId  (required)
     * @param trustedServerId  (required)
     * @param updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest  (optional)
     * @return GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_0(String networkId, String trustedServerId, UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest) throws ApiException {
        ApiResponse<GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner> localVarResp = updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_0WithHttpInfo(networkId, trustedServerId, updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest);
        return localVarResp.getData();
    }

    /**
     * Update a server that is trusted by Dynamic ARP Inspection on this network
     * Update a server that is trusted by Dynamic ARP Inspection on this network
     * @param networkId  (required)
     * @param trustedServerId  (required)
     * @param updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest  (optional)
     * @return ApiResponse&lt;GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner> updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_0WithHttpInfo(String networkId, String trustedServerId, UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_0ValidateBeforeCall(networkId, trustedServerId, updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a server that is trusted by Dynamic ARP Inspection on this network (asynchronously)
     * Update a server that is trusted by Dynamic ARP Inspection on this network
     * @param networkId  (required)
     * @param trustedServerId  (required)
     * @param updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_0Async(String networkId, String trustedServerId, UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest, final ApiCallback<GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_0ValidateBeforeCall(networkId, trustedServerId, updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkSwitchDhcpServerPolicy_0
     * @param networkId  (required)
     * @param updateNetworkSwitchDhcpServerPolicyRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSwitchDhcpServerPolicy_0Call(String networkId, UpdateNetworkSwitchDhcpServerPolicyRequest updateNetworkSwitchDhcpServerPolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkSwitchDhcpServerPolicyRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/dhcpServerPolicy"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkSwitchDhcpServerPolicy_0ValidateBeforeCall(String networkId, UpdateNetworkSwitchDhcpServerPolicyRequest updateNetworkSwitchDhcpServerPolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkSwitchDhcpServerPolicy_0(Async)");
        }

        return updateNetworkSwitchDhcpServerPolicy_0Call(networkId, updateNetworkSwitchDhcpServerPolicyRequest, _callback);

    }

    /**
     * Update the DHCP server settings
     * Update the DHCP server settings. Blocked/allowed servers are only applied when default policy is allow/block, respectively
     * @param networkId  (required)
     * @param updateNetworkSwitchDhcpServerPolicyRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkSwitchDhcpServerPolicy_0(String networkId, UpdateNetworkSwitchDhcpServerPolicyRequest updateNetworkSwitchDhcpServerPolicyRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkSwitchDhcpServerPolicy_0WithHttpInfo(networkId, updateNetworkSwitchDhcpServerPolicyRequest);
        return localVarResp.getData();
    }

    /**
     * Update the DHCP server settings
     * Update the DHCP server settings. Blocked/allowed servers are only applied when default policy is allow/block, respectively
     * @param networkId  (required)
     * @param updateNetworkSwitchDhcpServerPolicyRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkSwitchDhcpServerPolicy_0WithHttpInfo(String networkId, UpdateNetworkSwitchDhcpServerPolicyRequest updateNetworkSwitchDhcpServerPolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkSwitchDhcpServerPolicy_0ValidateBeforeCall(networkId, updateNetworkSwitchDhcpServerPolicyRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the DHCP server settings (asynchronously)
     * Update the DHCP server settings. Blocked/allowed servers are only applied when default policy is allow/block, respectively
     * @param networkId  (required)
     * @param updateNetworkSwitchDhcpServerPolicyRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSwitchDhcpServerPolicy_0Async(String networkId, UpdateNetworkSwitchDhcpServerPolicyRequest updateNetworkSwitchDhcpServerPolicyRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkSwitchDhcpServerPolicy_0ValidateBeforeCall(networkId, updateNetworkSwitchDhcpServerPolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkSwitchDscpToCosMappings_0
     * @param networkId  (required)
     * @param updateNetworkSwitchDscpToCosMappingsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSwitchDscpToCosMappings_0Call(String networkId, UpdateNetworkSwitchDscpToCosMappingsRequest updateNetworkSwitchDscpToCosMappingsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkSwitchDscpToCosMappingsRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/dscpToCosMappings"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkSwitchDscpToCosMappings_0ValidateBeforeCall(String networkId, UpdateNetworkSwitchDscpToCosMappingsRequest updateNetworkSwitchDscpToCosMappingsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkSwitchDscpToCosMappings_0(Async)");
        }

        // verify the required parameter 'updateNetworkSwitchDscpToCosMappingsRequest' is set
        if (updateNetworkSwitchDscpToCosMappingsRequest == null) {
            throw new ApiException("Missing the required parameter 'updateNetworkSwitchDscpToCosMappingsRequest' when calling updateNetworkSwitchDscpToCosMappings_0(Async)");
        }

        return updateNetworkSwitchDscpToCosMappings_0Call(networkId, updateNetworkSwitchDscpToCosMappingsRequest, _callback);

    }

    /**
     * Update the DSCP to CoS mappings
     * Update the DSCP to CoS mappings
     * @param networkId  (required)
     * @param updateNetworkSwitchDscpToCosMappingsRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkSwitchDscpToCosMappings_0(String networkId, UpdateNetworkSwitchDscpToCosMappingsRequest updateNetworkSwitchDscpToCosMappingsRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkSwitchDscpToCosMappings_0WithHttpInfo(networkId, updateNetworkSwitchDscpToCosMappingsRequest);
        return localVarResp.getData();
    }

    /**
     * Update the DSCP to CoS mappings
     * Update the DSCP to CoS mappings
     * @param networkId  (required)
     * @param updateNetworkSwitchDscpToCosMappingsRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkSwitchDscpToCosMappings_0WithHttpInfo(String networkId, UpdateNetworkSwitchDscpToCosMappingsRequest updateNetworkSwitchDscpToCosMappingsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkSwitchDscpToCosMappings_0ValidateBeforeCall(networkId, updateNetworkSwitchDscpToCosMappingsRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the DSCP to CoS mappings (asynchronously)
     * Update the DSCP to CoS mappings
     * @param networkId  (required)
     * @param updateNetworkSwitchDscpToCosMappingsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSwitchDscpToCosMappings_0Async(String networkId, UpdateNetworkSwitchDscpToCosMappingsRequest updateNetworkSwitchDscpToCosMappingsRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkSwitchDscpToCosMappings_0ValidateBeforeCall(networkId, updateNetworkSwitchDscpToCosMappingsRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkSwitchLinkAggregation_0
     * @param networkId  (required)
     * @param linkAggregationId  (required)
     * @param updateNetworkSwitchLinkAggregationRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSwitchLinkAggregation_0Call(String networkId, String linkAggregationId, UpdateNetworkSwitchLinkAggregationRequest updateNetworkSwitchLinkAggregationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkSwitchLinkAggregationRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/linkAggregations/{linkAggregationId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "linkAggregationId" + "}", localVarApiClient.escapeString(linkAggregationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkSwitchLinkAggregation_0ValidateBeforeCall(String networkId, String linkAggregationId, UpdateNetworkSwitchLinkAggregationRequest updateNetworkSwitchLinkAggregationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkSwitchLinkAggregation_0(Async)");
        }

        // verify the required parameter 'linkAggregationId' is set
        if (linkAggregationId == null) {
            throw new ApiException("Missing the required parameter 'linkAggregationId' when calling updateNetworkSwitchLinkAggregation_0(Async)");
        }

        return updateNetworkSwitchLinkAggregation_0Call(networkId, linkAggregationId, updateNetworkSwitchLinkAggregationRequest, _callback);

    }

    /**
     * Update a link aggregation group
     * Update a link aggregation group
     * @param networkId  (required)
     * @param linkAggregationId  (required)
     * @param updateNetworkSwitchLinkAggregationRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkSwitchLinkAggregation_0(String networkId, String linkAggregationId, UpdateNetworkSwitchLinkAggregationRequest updateNetworkSwitchLinkAggregationRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkSwitchLinkAggregation_0WithHttpInfo(networkId, linkAggregationId, updateNetworkSwitchLinkAggregationRequest);
        return localVarResp.getData();
    }

    /**
     * Update a link aggregation group
     * Update a link aggregation group
     * @param networkId  (required)
     * @param linkAggregationId  (required)
     * @param updateNetworkSwitchLinkAggregationRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkSwitchLinkAggregation_0WithHttpInfo(String networkId, String linkAggregationId, UpdateNetworkSwitchLinkAggregationRequest updateNetworkSwitchLinkAggregationRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkSwitchLinkAggregation_0ValidateBeforeCall(networkId, linkAggregationId, updateNetworkSwitchLinkAggregationRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a link aggregation group (asynchronously)
     * Update a link aggregation group
     * @param networkId  (required)
     * @param linkAggregationId  (required)
     * @param updateNetworkSwitchLinkAggregationRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSwitchLinkAggregation_0Async(String networkId, String linkAggregationId, UpdateNetworkSwitchLinkAggregationRequest updateNetworkSwitchLinkAggregationRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkSwitchLinkAggregation_0ValidateBeforeCall(networkId, linkAggregationId, updateNetworkSwitchLinkAggregationRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkSwitchMtu_0
     * @param networkId  (required)
     * @param updateNetworkSwitchMtuRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSwitchMtu_0Call(String networkId, UpdateNetworkSwitchMtuRequest updateNetworkSwitchMtuRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkSwitchMtuRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/mtu"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkSwitchMtu_0ValidateBeforeCall(String networkId, UpdateNetworkSwitchMtuRequest updateNetworkSwitchMtuRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkSwitchMtu_0(Async)");
        }

        return updateNetworkSwitchMtu_0Call(networkId, updateNetworkSwitchMtuRequest, _callback);

    }

    /**
     * Update the MTU configuration
     * Update the MTU configuration
     * @param networkId  (required)
     * @param updateNetworkSwitchMtuRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkSwitchMtu_0(String networkId, UpdateNetworkSwitchMtuRequest updateNetworkSwitchMtuRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkSwitchMtu_0WithHttpInfo(networkId, updateNetworkSwitchMtuRequest);
        return localVarResp.getData();
    }

    /**
     * Update the MTU configuration
     * Update the MTU configuration
     * @param networkId  (required)
     * @param updateNetworkSwitchMtuRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkSwitchMtu_0WithHttpInfo(String networkId, UpdateNetworkSwitchMtuRequest updateNetworkSwitchMtuRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkSwitchMtu_0ValidateBeforeCall(networkId, updateNetworkSwitchMtuRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the MTU configuration (asynchronously)
     * Update the MTU configuration
     * @param networkId  (required)
     * @param updateNetworkSwitchMtuRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSwitchMtu_0Async(String networkId, UpdateNetworkSwitchMtuRequest updateNetworkSwitchMtuRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkSwitchMtu_0ValidateBeforeCall(networkId, updateNetworkSwitchMtuRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkSwitchPortSchedule_0
     * @param networkId  (required)
     * @param portScheduleId  (required)
     * @param updateNetworkSwitchPortScheduleRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSwitchPortSchedule_0Call(String networkId, String portScheduleId, UpdateNetworkSwitchPortScheduleRequest updateNetworkSwitchPortScheduleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkSwitchPortScheduleRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/portSchedules/{portScheduleId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "portScheduleId" + "}", localVarApiClient.escapeString(portScheduleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkSwitchPortSchedule_0ValidateBeforeCall(String networkId, String portScheduleId, UpdateNetworkSwitchPortScheduleRequest updateNetworkSwitchPortScheduleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkSwitchPortSchedule_0(Async)");
        }

        // verify the required parameter 'portScheduleId' is set
        if (portScheduleId == null) {
            throw new ApiException("Missing the required parameter 'portScheduleId' when calling updateNetworkSwitchPortSchedule_0(Async)");
        }

        return updateNetworkSwitchPortSchedule_0Call(networkId, portScheduleId, updateNetworkSwitchPortScheduleRequest, _callback);

    }

    /**
     * Update a switch port schedule
     * Update a switch port schedule
     * @param networkId  (required)
     * @param portScheduleId  (required)
     * @param updateNetworkSwitchPortScheduleRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkSwitchPortSchedule_0(String networkId, String portScheduleId, UpdateNetworkSwitchPortScheduleRequest updateNetworkSwitchPortScheduleRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkSwitchPortSchedule_0WithHttpInfo(networkId, portScheduleId, updateNetworkSwitchPortScheduleRequest);
        return localVarResp.getData();
    }

    /**
     * Update a switch port schedule
     * Update a switch port schedule
     * @param networkId  (required)
     * @param portScheduleId  (required)
     * @param updateNetworkSwitchPortScheduleRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkSwitchPortSchedule_0WithHttpInfo(String networkId, String portScheduleId, UpdateNetworkSwitchPortScheduleRequest updateNetworkSwitchPortScheduleRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkSwitchPortSchedule_0ValidateBeforeCall(networkId, portScheduleId, updateNetworkSwitchPortScheduleRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a switch port schedule (asynchronously)
     * Update a switch port schedule
     * @param networkId  (required)
     * @param portScheduleId  (required)
     * @param updateNetworkSwitchPortScheduleRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSwitchPortSchedule_0Async(String networkId, String portScheduleId, UpdateNetworkSwitchPortScheduleRequest updateNetworkSwitchPortScheduleRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkSwitchPortSchedule_0ValidateBeforeCall(networkId, portScheduleId, updateNetworkSwitchPortScheduleRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkSwitchQosRule_0
     * @param networkId  (required)
     * @param qosRuleId  (required)
     * @param updateNetworkSwitchQosRuleRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSwitchQosRule_0Call(String networkId, String qosRuleId, UpdateNetworkSwitchQosRuleRequest updateNetworkSwitchQosRuleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkSwitchQosRuleRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/qosRules/{qosRuleId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "qosRuleId" + "}", localVarApiClient.escapeString(qosRuleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkSwitchQosRule_0ValidateBeforeCall(String networkId, String qosRuleId, UpdateNetworkSwitchQosRuleRequest updateNetworkSwitchQosRuleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkSwitchQosRule_0(Async)");
        }

        // verify the required parameter 'qosRuleId' is set
        if (qosRuleId == null) {
            throw new ApiException("Missing the required parameter 'qosRuleId' when calling updateNetworkSwitchQosRule_0(Async)");
        }

        return updateNetworkSwitchQosRule_0Call(networkId, qosRuleId, updateNetworkSwitchQosRuleRequest, _callback);

    }

    /**
     * Update a quality of service rule
     * Update a quality of service rule
     * @param networkId  (required)
     * @param qosRuleId  (required)
     * @param updateNetworkSwitchQosRuleRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkSwitchQosRule_0(String networkId, String qosRuleId, UpdateNetworkSwitchQosRuleRequest updateNetworkSwitchQosRuleRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkSwitchQosRule_0WithHttpInfo(networkId, qosRuleId, updateNetworkSwitchQosRuleRequest);
        return localVarResp.getData();
    }

    /**
     * Update a quality of service rule
     * Update a quality of service rule
     * @param networkId  (required)
     * @param qosRuleId  (required)
     * @param updateNetworkSwitchQosRuleRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkSwitchQosRule_0WithHttpInfo(String networkId, String qosRuleId, UpdateNetworkSwitchQosRuleRequest updateNetworkSwitchQosRuleRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkSwitchQosRule_0ValidateBeforeCall(networkId, qosRuleId, updateNetworkSwitchQosRuleRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a quality of service rule (asynchronously)
     * Update a quality of service rule
     * @param networkId  (required)
     * @param qosRuleId  (required)
     * @param updateNetworkSwitchQosRuleRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSwitchQosRule_0Async(String networkId, String qosRuleId, UpdateNetworkSwitchQosRuleRequest updateNetworkSwitchQosRuleRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkSwitchQosRule_0ValidateBeforeCall(networkId, qosRuleId, updateNetworkSwitchQosRuleRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkSwitchQosRulesOrder_0
     * @param networkId  (required)
     * @param updateNetworkSwitchQosRulesOrderRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSwitchQosRulesOrder_0Call(String networkId, UpdateNetworkSwitchQosRulesOrderRequest updateNetworkSwitchQosRulesOrderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkSwitchQosRulesOrderRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/qosRules/order"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkSwitchQosRulesOrder_0ValidateBeforeCall(String networkId, UpdateNetworkSwitchQosRulesOrderRequest updateNetworkSwitchQosRulesOrderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkSwitchQosRulesOrder_0(Async)");
        }

        // verify the required parameter 'updateNetworkSwitchQosRulesOrderRequest' is set
        if (updateNetworkSwitchQosRulesOrderRequest == null) {
            throw new ApiException("Missing the required parameter 'updateNetworkSwitchQosRulesOrderRequest' when calling updateNetworkSwitchQosRulesOrder_0(Async)");
        }

        return updateNetworkSwitchQosRulesOrder_0Call(networkId, updateNetworkSwitchQosRulesOrderRequest, _callback);

    }

    /**
     * Update the order in which the rules should be processed by the switch
     * Update the order in which the rules should be processed by the switch
     * @param networkId  (required)
     * @param updateNetworkSwitchQosRulesOrderRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkSwitchQosRulesOrder_0(String networkId, UpdateNetworkSwitchQosRulesOrderRequest updateNetworkSwitchQosRulesOrderRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkSwitchQosRulesOrder_0WithHttpInfo(networkId, updateNetworkSwitchQosRulesOrderRequest);
        return localVarResp.getData();
    }

    /**
     * Update the order in which the rules should be processed by the switch
     * Update the order in which the rules should be processed by the switch
     * @param networkId  (required)
     * @param updateNetworkSwitchQosRulesOrderRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkSwitchQosRulesOrder_0WithHttpInfo(String networkId, UpdateNetworkSwitchQosRulesOrderRequest updateNetworkSwitchQosRulesOrderRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkSwitchQosRulesOrder_0ValidateBeforeCall(networkId, updateNetworkSwitchQosRulesOrderRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the order in which the rules should be processed by the switch (asynchronously)
     * Update the order in which the rules should be processed by the switch
     * @param networkId  (required)
     * @param updateNetworkSwitchQosRulesOrderRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSwitchQosRulesOrder_0Async(String networkId, UpdateNetworkSwitchQosRulesOrderRequest updateNetworkSwitchQosRulesOrderRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkSwitchQosRulesOrder_0ValidateBeforeCall(networkId, updateNetworkSwitchQosRulesOrderRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkSwitchRoutingMulticastRendezvousPoint_0
     * @param networkId  (required)
     * @param rendezvousPointId  (required)
     * @param updateNetworkSwitchRoutingMulticastRendezvousPointRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSwitchRoutingMulticastRendezvousPoint_0Call(String networkId, String rendezvousPointId, UpdateNetworkSwitchRoutingMulticastRendezvousPointRequest updateNetworkSwitchRoutingMulticastRendezvousPointRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkSwitchRoutingMulticastRendezvousPointRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/routing/multicast/rendezvousPoints/{rendezvousPointId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "rendezvousPointId" + "}", localVarApiClient.escapeString(rendezvousPointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkSwitchRoutingMulticastRendezvousPoint_0ValidateBeforeCall(String networkId, String rendezvousPointId, UpdateNetworkSwitchRoutingMulticastRendezvousPointRequest updateNetworkSwitchRoutingMulticastRendezvousPointRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkSwitchRoutingMulticastRendezvousPoint_0(Async)");
        }

        // verify the required parameter 'rendezvousPointId' is set
        if (rendezvousPointId == null) {
            throw new ApiException("Missing the required parameter 'rendezvousPointId' when calling updateNetworkSwitchRoutingMulticastRendezvousPoint_0(Async)");
        }

        // verify the required parameter 'updateNetworkSwitchRoutingMulticastRendezvousPointRequest' is set
        if (updateNetworkSwitchRoutingMulticastRendezvousPointRequest == null) {
            throw new ApiException("Missing the required parameter 'updateNetworkSwitchRoutingMulticastRendezvousPointRequest' when calling updateNetworkSwitchRoutingMulticastRendezvousPoint_0(Async)");
        }

        return updateNetworkSwitchRoutingMulticastRendezvousPoint_0Call(networkId, rendezvousPointId, updateNetworkSwitchRoutingMulticastRendezvousPointRequest, _callback);

    }

    /**
     * Update a multicast rendezvous point
     * Update a multicast rendezvous point
     * @param networkId  (required)
     * @param rendezvousPointId  (required)
     * @param updateNetworkSwitchRoutingMulticastRendezvousPointRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkSwitchRoutingMulticastRendezvousPoint_0(String networkId, String rendezvousPointId, UpdateNetworkSwitchRoutingMulticastRendezvousPointRequest updateNetworkSwitchRoutingMulticastRendezvousPointRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkSwitchRoutingMulticastRendezvousPoint_0WithHttpInfo(networkId, rendezvousPointId, updateNetworkSwitchRoutingMulticastRendezvousPointRequest);
        return localVarResp.getData();
    }

    /**
     * Update a multicast rendezvous point
     * Update a multicast rendezvous point
     * @param networkId  (required)
     * @param rendezvousPointId  (required)
     * @param updateNetworkSwitchRoutingMulticastRendezvousPointRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkSwitchRoutingMulticastRendezvousPoint_0WithHttpInfo(String networkId, String rendezvousPointId, UpdateNetworkSwitchRoutingMulticastRendezvousPointRequest updateNetworkSwitchRoutingMulticastRendezvousPointRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkSwitchRoutingMulticastRendezvousPoint_0ValidateBeforeCall(networkId, rendezvousPointId, updateNetworkSwitchRoutingMulticastRendezvousPointRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a multicast rendezvous point (asynchronously)
     * Update a multicast rendezvous point
     * @param networkId  (required)
     * @param rendezvousPointId  (required)
     * @param updateNetworkSwitchRoutingMulticastRendezvousPointRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSwitchRoutingMulticastRendezvousPoint_0Async(String networkId, String rendezvousPointId, UpdateNetworkSwitchRoutingMulticastRendezvousPointRequest updateNetworkSwitchRoutingMulticastRendezvousPointRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkSwitchRoutingMulticastRendezvousPoint_0ValidateBeforeCall(networkId, rendezvousPointId, updateNetworkSwitchRoutingMulticastRendezvousPointRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkSwitchRoutingMulticast_0
     * @param networkId  (required)
     * @param updateNetworkSwitchRoutingMulticastRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSwitchRoutingMulticast_0Call(String networkId, UpdateNetworkSwitchRoutingMulticastRequest updateNetworkSwitchRoutingMulticastRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkSwitchRoutingMulticastRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/routing/multicast"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkSwitchRoutingMulticast_0ValidateBeforeCall(String networkId, UpdateNetworkSwitchRoutingMulticastRequest updateNetworkSwitchRoutingMulticastRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkSwitchRoutingMulticast_0(Async)");
        }

        return updateNetworkSwitchRoutingMulticast_0Call(networkId, updateNetworkSwitchRoutingMulticastRequest, _callback);

    }

    /**
     * Update multicast settings for a network
     * Update multicast settings for a network
     * @param networkId  (required)
     * @param updateNetworkSwitchRoutingMulticastRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkSwitchRoutingMulticast_0(String networkId, UpdateNetworkSwitchRoutingMulticastRequest updateNetworkSwitchRoutingMulticastRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkSwitchRoutingMulticast_0WithHttpInfo(networkId, updateNetworkSwitchRoutingMulticastRequest);
        return localVarResp.getData();
    }

    /**
     * Update multicast settings for a network
     * Update multicast settings for a network
     * @param networkId  (required)
     * @param updateNetworkSwitchRoutingMulticastRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkSwitchRoutingMulticast_0WithHttpInfo(String networkId, UpdateNetworkSwitchRoutingMulticastRequest updateNetworkSwitchRoutingMulticastRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkSwitchRoutingMulticast_0ValidateBeforeCall(networkId, updateNetworkSwitchRoutingMulticastRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update multicast settings for a network (asynchronously)
     * Update multicast settings for a network
     * @param networkId  (required)
     * @param updateNetworkSwitchRoutingMulticastRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSwitchRoutingMulticast_0Async(String networkId, UpdateNetworkSwitchRoutingMulticastRequest updateNetworkSwitchRoutingMulticastRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkSwitchRoutingMulticast_0ValidateBeforeCall(networkId, updateNetworkSwitchRoutingMulticastRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkSwitchRoutingOspf_0
     * @param networkId  (required)
     * @param updateNetworkSwitchRoutingOspfRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSwitchRoutingOspf_0Call(String networkId, UpdateNetworkSwitchRoutingOspfRequest updateNetworkSwitchRoutingOspfRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkSwitchRoutingOspfRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/routing/ospf"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkSwitchRoutingOspf_0ValidateBeforeCall(String networkId, UpdateNetworkSwitchRoutingOspfRequest updateNetworkSwitchRoutingOspfRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkSwitchRoutingOspf_0(Async)");
        }

        return updateNetworkSwitchRoutingOspf_0Call(networkId, updateNetworkSwitchRoutingOspfRequest, _callback);

    }

    /**
     * Update layer 3 OSPF routing configuration
     * Update layer 3 OSPF routing configuration
     * @param networkId  (required)
     * @param updateNetworkSwitchRoutingOspfRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkSwitchRoutingOspf_0(String networkId, UpdateNetworkSwitchRoutingOspfRequest updateNetworkSwitchRoutingOspfRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkSwitchRoutingOspf_0WithHttpInfo(networkId, updateNetworkSwitchRoutingOspfRequest);
        return localVarResp.getData();
    }

    /**
     * Update layer 3 OSPF routing configuration
     * Update layer 3 OSPF routing configuration
     * @param networkId  (required)
     * @param updateNetworkSwitchRoutingOspfRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkSwitchRoutingOspf_0WithHttpInfo(String networkId, UpdateNetworkSwitchRoutingOspfRequest updateNetworkSwitchRoutingOspfRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkSwitchRoutingOspf_0ValidateBeforeCall(networkId, updateNetworkSwitchRoutingOspfRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update layer 3 OSPF routing configuration (asynchronously)
     * Update layer 3 OSPF routing configuration
     * @param networkId  (required)
     * @param updateNetworkSwitchRoutingOspfRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSwitchRoutingOspf_0Async(String networkId, UpdateNetworkSwitchRoutingOspfRequest updateNetworkSwitchRoutingOspfRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkSwitchRoutingOspf_0ValidateBeforeCall(networkId, updateNetworkSwitchRoutingOspfRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkSwitchSettings_0
     * @param networkId  (required)
     * @param updateNetworkSwitchSettingsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSwitchSettings_0Call(String networkId, UpdateNetworkSwitchSettingsRequest updateNetworkSwitchSettingsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkSwitchSettingsRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/settings"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkSwitchSettings_0ValidateBeforeCall(String networkId, UpdateNetworkSwitchSettingsRequest updateNetworkSwitchSettingsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkSwitchSettings_0(Async)");
        }

        return updateNetworkSwitchSettings_0Call(networkId, updateNetworkSwitchSettingsRequest, _callback);

    }

    /**
     * Update switch network settings
     * Update switch network settings
     * @param networkId  (required)
     * @param updateNetworkSwitchSettingsRequest  (optional)
     * @return GetNetworkSwitchSettings200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkSwitchSettings200Response updateNetworkSwitchSettings_0(String networkId, UpdateNetworkSwitchSettingsRequest updateNetworkSwitchSettingsRequest) throws ApiException {
        ApiResponse<GetNetworkSwitchSettings200Response> localVarResp = updateNetworkSwitchSettings_0WithHttpInfo(networkId, updateNetworkSwitchSettingsRequest);
        return localVarResp.getData();
    }

    /**
     * Update switch network settings
     * Update switch network settings
     * @param networkId  (required)
     * @param updateNetworkSwitchSettingsRequest  (optional)
     * @return ApiResponse&lt;GetNetworkSwitchSettings200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkSwitchSettings200Response> updateNetworkSwitchSettings_0WithHttpInfo(String networkId, UpdateNetworkSwitchSettingsRequest updateNetworkSwitchSettingsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkSwitchSettings_0ValidateBeforeCall(networkId, updateNetworkSwitchSettingsRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkSwitchSettings200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update switch network settings (asynchronously)
     * Update switch network settings
     * @param networkId  (required)
     * @param updateNetworkSwitchSettingsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSwitchSettings_0Async(String networkId, UpdateNetworkSwitchSettingsRequest updateNetworkSwitchSettingsRequest, final ApiCallback<GetNetworkSwitchSettings200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkSwitchSettings_0ValidateBeforeCall(networkId, updateNetworkSwitchSettingsRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkSwitchSettings200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkSwitchStackRoutingInterfaceDhcp_0
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param interfaceId  (required)
     * @param updateNetworkSwitchStackRoutingInterfaceDhcpRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSwitchStackRoutingInterfaceDhcp_0Call(String networkId, String switchStackId, String interfaceId, UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest updateNetworkSwitchStackRoutingInterfaceDhcpRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkSwitchStackRoutingInterfaceDhcpRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}/dhcp"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "switchStackId" + "}", localVarApiClient.escapeString(switchStackId.toString()))
            .replace("{" + "interfaceId" + "}", localVarApiClient.escapeString(interfaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkSwitchStackRoutingInterfaceDhcp_0ValidateBeforeCall(String networkId, String switchStackId, String interfaceId, UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest updateNetworkSwitchStackRoutingInterfaceDhcpRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkSwitchStackRoutingInterfaceDhcp_0(Async)");
        }

        // verify the required parameter 'switchStackId' is set
        if (switchStackId == null) {
            throw new ApiException("Missing the required parameter 'switchStackId' when calling updateNetworkSwitchStackRoutingInterfaceDhcp_0(Async)");
        }

        // verify the required parameter 'interfaceId' is set
        if (interfaceId == null) {
            throw new ApiException("Missing the required parameter 'interfaceId' when calling updateNetworkSwitchStackRoutingInterfaceDhcp_0(Async)");
        }

        return updateNetworkSwitchStackRoutingInterfaceDhcp_0Call(networkId, switchStackId, interfaceId, updateNetworkSwitchStackRoutingInterfaceDhcpRequest, _callback);

    }

    /**
     * Update a layer 3 interface DHCP configuration for a switch stack
     * Update a layer 3 interface DHCP configuration for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param interfaceId  (required)
     * @param updateNetworkSwitchStackRoutingInterfaceDhcpRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkSwitchStackRoutingInterfaceDhcp_0(String networkId, String switchStackId, String interfaceId, UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest updateNetworkSwitchStackRoutingInterfaceDhcpRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkSwitchStackRoutingInterfaceDhcp_0WithHttpInfo(networkId, switchStackId, interfaceId, updateNetworkSwitchStackRoutingInterfaceDhcpRequest);
        return localVarResp.getData();
    }

    /**
     * Update a layer 3 interface DHCP configuration for a switch stack
     * Update a layer 3 interface DHCP configuration for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param interfaceId  (required)
     * @param updateNetworkSwitchStackRoutingInterfaceDhcpRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkSwitchStackRoutingInterfaceDhcp_0WithHttpInfo(String networkId, String switchStackId, String interfaceId, UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest updateNetworkSwitchStackRoutingInterfaceDhcpRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkSwitchStackRoutingInterfaceDhcp_0ValidateBeforeCall(networkId, switchStackId, interfaceId, updateNetworkSwitchStackRoutingInterfaceDhcpRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a layer 3 interface DHCP configuration for a switch stack (asynchronously)
     * Update a layer 3 interface DHCP configuration for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param interfaceId  (required)
     * @param updateNetworkSwitchStackRoutingInterfaceDhcpRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSwitchStackRoutingInterfaceDhcp_0Async(String networkId, String switchStackId, String interfaceId, UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest updateNetworkSwitchStackRoutingInterfaceDhcpRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkSwitchStackRoutingInterfaceDhcp_0ValidateBeforeCall(networkId, switchStackId, interfaceId, updateNetworkSwitchStackRoutingInterfaceDhcpRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkSwitchStackRoutingInterface_0
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param interfaceId  (required)
     * @param updateNetworkSwitchStackRoutingInterfaceRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSwitchStackRoutingInterface_0Call(String networkId, String switchStackId, String interfaceId, UpdateNetworkSwitchStackRoutingInterfaceRequest updateNetworkSwitchStackRoutingInterfaceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkSwitchStackRoutingInterfaceRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "switchStackId" + "}", localVarApiClient.escapeString(switchStackId.toString()))
            .replace("{" + "interfaceId" + "}", localVarApiClient.escapeString(interfaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkSwitchStackRoutingInterface_0ValidateBeforeCall(String networkId, String switchStackId, String interfaceId, UpdateNetworkSwitchStackRoutingInterfaceRequest updateNetworkSwitchStackRoutingInterfaceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkSwitchStackRoutingInterface_0(Async)");
        }

        // verify the required parameter 'switchStackId' is set
        if (switchStackId == null) {
            throw new ApiException("Missing the required parameter 'switchStackId' when calling updateNetworkSwitchStackRoutingInterface_0(Async)");
        }

        // verify the required parameter 'interfaceId' is set
        if (interfaceId == null) {
            throw new ApiException("Missing the required parameter 'interfaceId' when calling updateNetworkSwitchStackRoutingInterface_0(Async)");
        }

        return updateNetworkSwitchStackRoutingInterface_0Call(networkId, switchStackId, interfaceId, updateNetworkSwitchStackRoutingInterfaceRequest, _callback);

    }

    /**
     * Update a layer 3 interface for a switch stack
     * Update a layer 3 interface for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param interfaceId  (required)
     * @param updateNetworkSwitchStackRoutingInterfaceRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkSwitchStackRoutingInterface_0(String networkId, String switchStackId, String interfaceId, UpdateNetworkSwitchStackRoutingInterfaceRequest updateNetworkSwitchStackRoutingInterfaceRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkSwitchStackRoutingInterface_0WithHttpInfo(networkId, switchStackId, interfaceId, updateNetworkSwitchStackRoutingInterfaceRequest);
        return localVarResp.getData();
    }

    /**
     * Update a layer 3 interface for a switch stack
     * Update a layer 3 interface for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param interfaceId  (required)
     * @param updateNetworkSwitchStackRoutingInterfaceRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkSwitchStackRoutingInterface_0WithHttpInfo(String networkId, String switchStackId, String interfaceId, UpdateNetworkSwitchStackRoutingInterfaceRequest updateNetworkSwitchStackRoutingInterfaceRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkSwitchStackRoutingInterface_0ValidateBeforeCall(networkId, switchStackId, interfaceId, updateNetworkSwitchStackRoutingInterfaceRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a layer 3 interface for a switch stack (asynchronously)
     * Update a layer 3 interface for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param interfaceId  (required)
     * @param updateNetworkSwitchStackRoutingInterfaceRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSwitchStackRoutingInterface_0Async(String networkId, String switchStackId, String interfaceId, UpdateNetworkSwitchStackRoutingInterfaceRequest updateNetworkSwitchStackRoutingInterfaceRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkSwitchStackRoutingInterface_0ValidateBeforeCall(networkId, switchStackId, interfaceId, updateNetworkSwitchStackRoutingInterfaceRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkSwitchStackRoutingStaticRoute_0
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param staticRouteId  (required)
     * @param updateDeviceSwitchRoutingStaticRouteRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSwitchStackRoutingStaticRoute_0Call(String networkId, String switchStackId, String staticRouteId, UpdateDeviceSwitchRoutingStaticRouteRequest updateDeviceSwitchRoutingStaticRouteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateDeviceSwitchRoutingStaticRouteRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes/{staticRouteId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "switchStackId" + "}", localVarApiClient.escapeString(switchStackId.toString()))
            .replace("{" + "staticRouteId" + "}", localVarApiClient.escapeString(staticRouteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkSwitchStackRoutingStaticRoute_0ValidateBeforeCall(String networkId, String switchStackId, String staticRouteId, UpdateDeviceSwitchRoutingStaticRouteRequest updateDeviceSwitchRoutingStaticRouteRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkSwitchStackRoutingStaticRoute_0(Async)");
        }

        // verify the required parameter 'switchStackId' is set
        if (switchStackId == null) {
            throw new ApiException("Missing the required parameter 'switchStackId' when calling updateNetworkSwitchStackRoutingStaticRoute_0(Async)");
        }

        // verify the required parameter 'staticRouteId' is set
        if (staticRouteId == null) {
            throw new ApiException("Missing the required parameter 'staticRouteId' when calling updateNetworkSwitchStackRoutingStaticRoute_0(Async)");
        }

        return updateNetworkSwitchStackRoutingStaticRoute_0Call(networkId, switchStackId, staticRouteId, updateDeviceSwitchRoutingStaticRouteRequest, _callback);

    }

    /**
     * Update a layer 3 static route for a switch stack
     * Update a layer 3 static route for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param staticRouteId  (required)
     * @param updateDeviceSwitchRoutingStaticRouteRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkSwitchStackRoutingStaticRoute_0(String networkId, String switchStackId, String staticRouteId, UpdateDeviceSwitchRoutingStaticRouteRequest updateDeviceSwitchRoutingStaticRouteRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkSwitchStackRoutingStaticRoute_0WithHttpInfo(networkId, switchStackId, staticRouteId, updateDeviceSwitchRoutingStaticRouteRequest);
        return localVarResp.getData();
    }

    /**
     * Update a layer 3 static route for a switch stack
     * Update a layer 3 static route for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param staticRouteId  (required)
     * @param updateDeviceSwitchRoutingStaticRouteRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkSwitchStackRoutingStaticRoute_0WithHttpInfo(String networkId, String switchStackId, String staticRouteId, UpdateDeviceSwitchRoutingStaticRouteRequest updateDeviceSwitchRoutingStaticRouteRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkSwitchStackRoutingStaticRoute_0ValidateBeforeCall(networkId, switchStackId, staticRouteId, updateDeviceSwitchRoutingStaticRouteRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a layer 3 static route for a switch stack (asynchronously)
     * Update a layer 3 static route for a switch stack
     * @param networkId  (required)
     * @param switchStackId  (required)
     * @param staticRouteId  (required)
     * @param updateDeviceSwitchRoutingStaticRouteRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSwitchStackRoutingStaticRoute_0Async(String networkId, String switchStackId, String staticRouteId, UpdateDeviceSwitchRoutingStaticRouteRequest updateDeviceSwitchRoutingStaticRouteRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkSwitchStackRoutingStaticRoute_0ValidateBeforeCall(networkId, switchStackId, staticRouteId, updateDeviceSwitchRoutingStaticRouteRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkSwitchStormControl_0
     * @param networkId  (required)
     * @param updateNetworkSwitchStormControlRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSwitchStormControl_0Call(String networkId, UpdateNetworkSwitchStormControlRequest updateNetworkSwitchStormControlRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkSwitchStormControlRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/stormControl"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkSwitchStormControl_0ValidateBeforeCall(String networkId, UpdateNetworkSwitchStormControlRequest updateNetworkSwitchStormControlRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkSwitchStormControl_0(Async)");
        }

        return updateNetworkSwitchStormControl_0Call(networkId, updateNetworkSwitchStormControlRequest, _callback);

    }

    /**
     * Update the storm control configuration for a switch network
     * Update the storm control configuration for a switch network
     * @param networkId  (required)
     * @param updateNetworkSwitchStormControlRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkSwitchStormControl_0(String networkId, UpdateNetworkSwitchStormControlRequest updateNetworkSwitchStormControlRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkSwitchStormControl_0WithHttpInfo(networkId, updateNetworkSwitchStormControlRequest);
        return localVarResp.getData();
    }

    /**
     * Update the storm control configuration for a switch network
     * Update the storm control configuration for a switch network
     * @param networkId  (required)
     * @param updateNetworkSwitchStormControlRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkSwitchStormControl_0WithHttpInfo(String networkId, UpdateNetworkSwitchStormControlRequest updateNetworkSwitchStormControlRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkSwitchStormControl_0ValidateBeforeCall(networkId, updateNetworkSwitchStormControlRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the storm control configuration for a switch network (asynchronously)
     * Update the storm control configuration for a switch network
     * @param networkId  (required)
     * @param updateNetworkSwitchStormControlRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSwitchStormControl_0Async(String networkId, UpdateNetworkSwitchStormControlRequest updateNetworkSwitchStormControlRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkSwitchStormControl_0ValidateBeforeCall(networkId, updateNetworkSwitchStormControlRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkSwitchStp_0
     * @param networkId  (required)
     * @param updateNetworkSwitchStpRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSwitchStp_0Call(String networkId, UpdateNetworkSwitchStpRequest updateNetworkSwitchStpRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkSwitchStpRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/switch/stp"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkSwitchStp_0ValidateBeforeCall(String networkId, UpdateNetworkSwitchStpRequest updateNetworkSwitchStpRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkSwitchStp_0(Async)");
        }

        return updateNetworkSwitchStp_0Call(networkId, updateNetworkSwitchStpRequest, _callback);

    }

    /**
     * Updates STP settings
     * Updates STP settings
     * @param networkId  (required)
     * @param updateNetworkSwitchStpRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkSwitchStp_0(String networkId, UpdateNetworkSwitchStpRequest updateNetworkSwitchStpRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkSwitchStp_0WithHttpInfo(networkId, updateNetworkSwitchStpRequest);
        return localVarResp.getData();
    }

    /**
     * Updates STP settings
     * Updates STP settings
     * @param networkId  (required)
     * @param updateNetworkSwitchStpRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkSwitchStp_0WithHttpInfo(String networkId, UpdateNetworkSwitchStpRequest updateNetworkSwitchStpRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkSwitchStp_0ValidateBeforeCall(networkId, updateNetworkSwitchStpRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates STP settings (asynchronously)
     * Updates STP settings
     * @param networkId  (required)
     * @param updateNetworkSwitchStpRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSwitchStp_0Async(String networkId, UpdateNetworkSwitchStpRequest updateNetworkSwitchStpRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkSwitchStp_0ValidateBeforeCall(networkId, updateNetworkSwitchStpRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkSyslogServers_0
     * @param networkId  (required)
     * @param updateNetworkSyslogServersRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSyslogServers_0Call(String networkId, UpdateNetworkSyslogServersRequest updateNetworkSyslogServersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkSyslogServersRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/syslogServers"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkSyslogServers_0ValidateBeforeCall(String networkId, UpdateNetworkSyslogServersRequest updateNetworkSyslogServersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkSyslogServers_0(Async)");
        }

        // verify the required parameter 'updateNetworkSyslogServersRequest' is set
        if (updateNetworkSyslogServersRequest == null) {
            throw new ApiException("Missing the required parameter 'updateNetworkSyslogServersRequest' when calling updateNetworkSyslogServers_0(Async)");
        }

        return updateNetworkSyslogServers_0Call(networkId, updateNetworkSyslogServersRequest, _callback);

    }

    /**
     * Update the syslog servers for a network
     * Update the syslog servers for a network
     * @param networkId  (required)
     * @param updateNetworkSyslogServersRequest  (required)
     * @return GetNetworkSyslogServers200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkSyslogServers200Response updateNetworkSyslogServers_0(String networkId, UpdateNetworkSyslogServersRequest updateNetworkSyslogServersRequest) throws ApiException {
        ApiResponse<GetNetworkSyslogServers200Response> localVarResp = updateNetworkSyslogServers_0WithHttpInfo(networkId, updateNetworkSyslogServersRequest);
        return localVarResp.getData();
    }

    /**
     * Update the syslog servers for a network
     * Update the syslog servers for a network
     * @param networkId  (required)
     * @param updateNetworkSyslogServersRequest  (required)
     * @return ApiResponse&lt;GetNetworkSyslogServers200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkSyslogServers200Response> updateNetworkSyslogServers_0WithHttpInfo(String networkId, UpdateNetworkSyslogServersRequest updateNetworkSyslogServersRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkSyslogServers_0ValidateBeforeCall(networkId, updateNetworkSyslogServersRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkSyslogServers200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the syslog servers for a network (asynchronously)
     * Update the syslog servers for a network
     * @param networkId  (required)
     * @param updateNetworkSyslogServersRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkSyslogServers_0Async(String networkId, UpdateNetworkSyslogServersRequest updateNetworkSyslogServersRequest, final ApiCallback<GetNetworkSyslogServers200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkSyslogServers_0ValidateBeforeCall(networkId, updateNetworkSyslogServersRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkSyslogServers200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkTrafficAnalysis_0
     * @param networkId  (required)
     * @param updateNetworkTrafficAnalysisRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkTrafficAnalysis_0Call(String networkId, UpdateNetworkTrafficAnalysisRequest updateNetworkTrafficAnalysisRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkTrafficAnalysisRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/trafficAnalysis"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkTrafficAnalysis_0ValidateBeforeCall(String networkId, UpdateNetworkTrafficAnalysisRequest updateNetworkTrafficAnalysisRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkTrafficAnalysis_0(Async)");
        }

        return updateNetworkTrafficAnalysis_0Call(networkId, updateNetworkTrafficAnalysisRequest, _callback);

    }

    /**
     * Update the traffic analysis settings for a network
     * Update the traffic analysis settings for a network
     * @param networkId  (required)
     * @param updateNetworkTrafficAnalysisRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkTrafficAnalysis_0(String networkId, UpdateNetworkTrafficAnalysisRequest updateNetworkTrafficAnalysisRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkTrafficAnalysis_0WithHttpInfo(networkId, updateNetworkTrafficAnalysisRequest);
        return localVarResp.getData();
    }

    /**
     * Update the traffic analysis settings for a network
     * Update the traffic analysis settings for a network
     * @param networkId  (required)
     * @param updateNetworkTrafficAnalysisRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkTrafficAnalysis_0WithHttpInfo(String networkId, UpdateNetworkTrafficAnalysisRequest updateNetworkTrafficAnalysisRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkTrafficAnalysis_0ValidateBeforeCall(networkId, updateNetworkTrafficAnalysisRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the traffic analysis settings for a network (asynchronously)
     * Update the traffic analysis settings for a network
     * @param networkId  (required)
     * @param updateNetworkTrafficAnalysisRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkTrafficAnalysis_0Async(String networkId, UpdateNetworkTrafficAnalysisRequest updateNetworkTrafficAnalysisRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkTrafficAnalysis_0ValidateBeforeCall(networkId, updateNetworkTrafficAnalysisRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkWebhooksHttpServer_0
     * @param networkId  (required)
     * @param httpServerId  (required)
     * @param updateNetworkWebhooksHttpServerRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkWebhooksHttpServer_0Call(String networkId, String httpServerId, UpdateNetworkWebhooksHttpServerRequest updateNetworkWebhooksHttpServerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkWebhooksHttpServerRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/webhooks/httpServers/{httpServerId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "httpServerId" + "}", localVarApiClient.escapeString(httpServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkWebhooksHttpServer_0ValidateBeforeCall(String networkId, String httpServerId, UpdateNetworkWebhooksHttpServerRequest updateNetworkWebhooksHttpServerRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkWebhooksHttpServer_0(Async)");
        }

        // verify the required parameter 'httpServerId' is set
        if (httpServerId == null) {
            throw new ApiException("Missing the required parameter 'httpServerId' when calling updateNetworkWebhooksHttpServer_0(Async)");
        }

        return updateNetworkWebhooksHttpServer_0Call(networkId, httpServerId, updateNetworkWebhooksHttpServerRequest, _callback);

    }

    /**
     * Update an HTTP server
     * Update an HTTP server. To change a URL, create a new HTTP server.
     * @param networkId  (required)
     * @param httpServerId  (required)
     * @param updateNetworkWebhooksHttpServerRequest  (optional)
     * @return GetNetworkWebhooksHttpServers200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkWebhooksHttpServers200ResponseInner updateNetworkWebhooksHttpServer_0(String networkId, String httpServerId, UpdateNetworkWebhooksHttpServerRequest updateNetworkWebhooksHttpServerRequest) throws ApiException {
        ApiResponse<GetNetworkWebhooksHttpServers200ResponseInner> localVarResp = updateNetworkWebhooksHttpServer_0WithHttpInfo(networkId, httpServerId, updateNetworkWebhooksHttpServerRequest);
        return localVarResp.getData();
    }

    /**
     * Update an HTTP server
     * Update an HTTP server. To change a URL, create a new HTTP server.
     * @param networkId  (required)
     * @param httpServerId  (required)
     * @param updateNetworkWebhooksHttpServerRequest  (optional)
     * @return ApiResponse&lt;GetNetworkWebhooksHttpServers200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkWebhooksHttpServers200ResponseInner> updateNetworkWebhooksHttpServer_0WithHttpInfo(String networkId, String httpServerId, UpdateNetworkWebhooksHttpServerRequest updateNetworkWebhooksHttpServerRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkWebhooksHttpServer_0ValidateBeforeCall(networkId, httpServerId, updateNetworkWebhooksHttpServerRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkWebhooksHttpServers200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an HTTP server (asynchronously)
     * Update an HTTP server. To change a URL, create a new HTTP server.
     * @param networkId  (required)
     * @param httpServerId  (required)
     * @param updateNetworkWebhooksHttpServerRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkWebhooksHttpServer_0Async(String networkId, String httpServerId, UpdateNetworkWebhooksHttpServerRequest updateNetworkWebhooksHttpServerRequest, final ApiCallback<GetNetworkWebhooksHttpServers200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkWebhooksHttpServer_0ValidateBeforeCall(networkId, httpServerId, updateNetworkWebhooksHttpServerRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkWebhooksHttpServers200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkWebhooksPayloadTemplate_0
     * @param networkId  (required)
     * @param payloadTemplateId  (required)
     * @param updateNetworkWebhooksPayloadTemplateRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkWebhooksPayloadTemplate_0Call(String networkId, String payloadTemplateId, UpdateNetworkWebhooksPayloadTemplateRequest updateNetworkWebhooksPayloadTemplateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkWebhooksPayloadTemplateRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/webhooks/payloadTemplates/{payloadTemplateId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "payloadTemplateId" + "}", localVarApiClient.escapeString(payloadTemplateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkWebhooksPayloadTemplate_0ValidateBeforeCall(String networkId, String payloadTemplateId, UpdateNetworkWebhooksPayloadTemplateRequest updateNetworkWebhooksPayloadTemplateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkWebhooksPayloadTemplate_0(Async)");
        }

        // verify the required parameter 'payloadTemplateId' is set
        if (payloadTemplateId == null) {
            throw new ApiException("Missing the required parameter 'payloadTemplateId' when calling updateNetworkWebhooksPayloadTemplate_0(Async)");
        }

        return updateNetworkWebhooksPayloadTemplate_0Call(networkId, payloadTemplateId, updateNetworkWebhooksPayloadTemplateRequest, _callback);

    }

    /**
     * Update a webhook payload template for a network
     * Update a webhook payload template for a network
     * @param networkId  (required)
     * @param payloadTemplateId  (required)
     * @param updateNetworkWebhooksPayloadTemplateRequest  (optional)
     * @return GetNetworkWebhooksPayloadTemplates200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkWebhooksPayloadTemplates200ResponseInner updateNetworkWebhooksPayloadTemplate_0(String networkId, String payloadTemplateId, UpdateNetworkWebhooksPayloadTemplateRequest updateNetworkWebhooksPayloadTemplateRequest) throws ApiException {
        ApiResponse<GetNetworkWebhooksPayloadTemplates200ResponseInner> localVarResp = updateNetworkWebhooksPayloadTemplate_0WithHttpInfo(networkId, payloadTemplateId, updateNetworkWebhooksPayloadTemplateRequest);
        return localVarResp.getData();
    }

    /**
     * Update a webhook payload template for a network
     * Update a webhook payload template for a network
     * @param networkId  (required)
     * @param payloadTemplateId  (required)
     * @param updateNetworkWebhooksPayloadTemplateRequest  (optional)
     * @return ApiResponse&lt;GetNetworkWebhooksPayloadTemplates200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkWebhooksPayloadTemplates200ResponseInner> updateNetworkWebhooksPayloadTemplate_0WithHttpInfo(String networkId, String payloadTemplateId, UpdateNetworkWebhooksPayloadTemplateRequest updateNetworkWebhooksPayloadTemplateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkWebhooksPayloadTemplate_0ValidateBeforeCall(networkId, payloadTemplateId, updateNetworkWebhooksPayloadTemplateRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkWebhooksPayloadTemplates200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a webhook payload template for a network (asynchronously)
     * Update a webhook payload template for a network
     * @param networkId  (required)
     * @param payloadTemplateId  (required)
     * @param updateNetworkWebhooksPayloadTemplateRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkWebhooksPayloadTemplate_0Async(String networkId, String payloadTemplateId, UpdateNetworkWebhooksPayloadTemplateRequest updateNetworkWebhooksPayloadTemplateRequest, final ApiCallback<GetNetworkWebhooksPayloadTemplates200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkWebhooksPayloadTemplate_0ValidateBeforeCall(networkId, payloadTemplateId, updateNetworkWebhooksPayloadTemplateRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkWebhooksPayloadTemplates200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkWirelessAlternateManagementInterface_0
     * @param networkId  (required)
     * @param updateNetworkWirelessAlternateManagementInterfaceRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkWirelessAlternateManagementInterface_0Call(String networkId, UpdateNetworkWirelessAlternateManagementInterfaceRequest updateNetworkWirelessAlternateManagementInterfaceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkWirelessAlternateManagementInterfaceRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/wireless/alternateManagementInterface"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkWirelessAlternateManagementInterface_0ValidateBeforeCall(String networkId, UpdateNetworkWirelessAlternateManagementInterfaceRequest updateNetworkWirelessAlternateManagementInterfaceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkWirelessAlternateManagementInterface_0(Async)");
        }

        return updateNetworkWirelessAlternateManagementInterface_0Call(networkId, updateNetworkWirelessAlternateManagementInterfaceRequest, _callback);

    }

    /**
     * Update alternate management interface and device static IP
     * Update alternate management interface and device static IP
     * @param networkId  (required)
     * @param updateNetworkWirelessAlternateManagementInterfaceRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkWirelessAlternateManagementInterface_0(String networkId, UpdateNetworkWirelessAlternateManagementInterfaceRequest updateNetworkWirelessAlternateManagementInterfaceRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkWirelessAlternateManagementInterface_0WithHttpInfo(networkId, updateNetworkWirelessAlternateManagementInterfaceRequest);
        return localVarResp.getData();
    }

    /**
     * Update alternate management interface and device static IP
     * Update alternate management interface and device static IP
     * @param networkId  (required)
     * @param updateNetworkWirelessAlternateManagementInterfaceRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkWirelessAlternateManagementInterface_0WithHttpInfo(String networkId, UpdateNetworkWirelessAlternateManagementInterfaceRequest updateNetworkWirelessAlternateManagementInterfaceRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkWirelessAlternateManagementInterface_0ValidateBeforeCall(networkId, updateNetworkWirelessAlternateManagementInterfaceRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update alternate management interface and device static IP (asynchronously)
     * Update alternate management interface and device static IP
     * @param networkId  (required)
     * @param updateNetworkWirelessAlternateManagementInterfaceRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkWirelessAlternateManagementInterface_0Async(String networkId, UpdateNetworkWirelessAlternateManagementInterfaceRequest updateNetworkWirelessAlternateManagementInterfaceRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkWirelessAlternateManagementInterface_0ValidateBeforeCall(networkId, updateNetworkWirelessAlternateManagementInterfaceRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkWirelessBilling_0
     * @param networkId  (required)
     * @param updateNetworkWirelessBillingRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkWirelessBilling_0Call(String networkId, UpdateNetworkWirelessBillingRequest updateNetworkWirelessBillingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkWirelessBillingRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/wireless/billing"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkWirelessBilling_0ValidateBeforeCall(String networkId, UpdateNetworkWirelessBillingRequest updateNetworkWirelessBillingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkWirelessBilling_0(Async)");
        }

        return updateNetworkWirelessBilling_0Call(networkId, updateNetworkWirelessBillingRequest, _callback);

    }

    /**
     * Update the billing settings
     * Update the billing settings
     * @param networkId  (required)
     * @param updateNetworkWirelessBillingRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkWirelessBilling_0(String networkId, UpdateNetworkWirelessBillingRequest updateNetworkWirelessBillingRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkWirelessBilling_0WithHttpInfo(networkId, updateNetworkWirelessBillingRequest);
        return localVarResp.getData();
    }

    /**
     * Update the billing settings
     * Update the billing settings
     * @param networkId  (required)
     * @param updateNetworkWirelessBillingRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkWirelessBilling_0WithHttpInfo(String networkId, UpdateNetworkWirelessBillingRequest updateNetworkWirelessBillingRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkWirelessBilling_0ValidateBeforeCall(networkId, updateNetworkWirelessBillingRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the billing settings (asynchronously)
     * Update the billing settings
     * @param networkId  (required)
     * @param updateNetworkWirelessBillingRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkWirelessBilling_0Async(String networkId, UpdateNetworkWirelessBillingRequest updateNetworkWirelessBillingRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkWirelessBilling_0ValidateBeforeCall(networkId, updateNetworkWirelessBillingRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkWirelessBluetoothSettings_0
     * @param networkId  (required)
     * @param updateNetworkWirelessBluetoothSettingsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkWirelessBluetoothSettings_0Call(String networkId, UpdateNetworkWirelessBluetoothSettingsRequest updateNetworkWirelessBluetoothSettingsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkWirelessBluetoothSettingsRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/wireless/bluetooth/settings"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkWirelessBluetoothSettings_0ValidateBeforeCall(String networkId, UpdateNetworkWirelessBluetoothSettingsRequest updateNetworkWirelessBluetoothSettingsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkWirelessBluetoothSettings_0(Async)");
        }

        return updateNetworkWirelessBluetoothSettings_0Call(networkId, updateNetworkWirelessBluetoothSettingsRequest, _callback);

    }

    /**
     * Update the Bluetooth settings for a network
     * Update the Bluetooth settings for a network. See the docs page for &lt;a href&#x3D;\&quot;https://documentation.meraki.com/MR/Bluetooth/Bluetooth_Low_Energy_(BLE)\&quot;&gt;Bluetooth settings&lt;/a&gt;.
     * @param networkId  (required)
     * @param updateNetworkWirelessBluetoothSettingsRequest  (optional)
     * @return GetNetworkWirelessBluetoothSettings200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkWirelessBluetoothSettings200Response updateNetworkWirelessBluetoothSettings_0(String networkId, UpdateNetworkWirelessBluetoothSettingsRequest updateNetworkWirelessBluetoothSettingsRequest) throws ApiException {
        ApiResponse<GetNetworkWirelessBluetoothSettings200Response> localVarResp = updateNetworkWirelessBluetoothSettings_0WithHttpInfo(networkId, updateNetworkWirelessBluetoothSettingsRequest);
        return localVarResp.getData();
    }

    /**
     * Update the Bluetooth settings for a network
     * Update the Bluetooth settings for a network. See the docs page for &lt;a href&#x3D;\&quot;https://documentation.meraki.com/MR/Bluetooth/Bluetooth_Low_Energy_(BLE)\&quot;&gt;Bluetooth settings&lt;/a&gt;.
     * @param networkId  (required)
     * @param updateNetworkWirelessBluetoothSettingsRequest  (optional)
     * @return ApiResponse&lt;GetNetworkWirelessBluetoothSettings200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkWirelessBluetoothSettings200Response> updateNetworkWirelessBluetoothSettings_0WithHttpInfo(String networkId, UpdateNetworkWirelessBluetoothSettingsRequest updateNetworkWirelessBluetoothSettingsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkWirelessBluetoothSettings_0ValidateBeforeCall(networkId, updateNetworkWirelessBluetoothSettingsRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkWirelessBluetoothSettings200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the Bluetooth settings for a network (asynchronously)
     * Update the Bluetooth settings for a network. See the docs page for &lt;a href&#x3D;\&quot;https://documentation.meraki.com/MR/Bluetooth/Bluetooth_Low_Energy_(BLE)\&quot;&gt;Bluetooth settings&lt;/a&gt;.
     * @param networkId  (required)
     * @param updateNetworkWirelessBluetoothSettingsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkWirelessBluetoothSettings_0Async(String networkId, UpdateNetworkWirelessBluetoothSettingsRequest updateNetworkWirelessBluetoothSettingsRequest, final ApiCallback<GetNetworkWirelessBluetoothSettings200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkWirelessBluetoothSettings_0ValidateBeforeCall(networkId, updateNetworkWirelessBluetoothSettingsRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkWirelessBluetoothSettings200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkWirelessRfProfile_0
     * @param networkId  (required)
     * @param rfProfileId  (required)
     * @param updateNetworkWirelessRfProfileRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkWirelessRfProfile_0Call(String networkId, String rfProfileId, UpdateNetworkWirelessRfProfileRequest updateNetworkWirelessRfProfileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkWirelessRfProfileRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/wireless/rfProfiles/{rfProfileId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "rfProfileId" + "}", localVarApiClient.escapeString(rfProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkWirelessRfProfile_0ValidateBeforeCall(String networkId, String rfProfileId, UpdateNetworkWirelessRfProfileRequest updateNetworkWirelessRfProfileRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkWirelessRfProfile_0(Async)");
        }

        // verify the required parameter 'rfProfileId' is set
        if (rfProfileId == null) {
            throw new ApiException("Missing the required parameter 'rfProfileId' when calling updateNetworkWirelessRfProfile_0(Async)");
        }

        return updateNetworkWirelessRfProfile_0Call(networkId, rfProfileId, updateNetworkWirelessRfProfileRequest, _callback);

    }

    /**
     * Updates specified RF profile for this network
     * Updates specified RF profile for this network
     * @param networkId  (required)
     * @param rfProfileId  (required)
     * @param updateNetworkWirelessRfProfileRequest  (optional)
     * @return CreateNetworkWirelessRfProfile201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CreateNetworkWirelessRfProfile201Response updateNetworkWirelessRfProfile_0(String networkId, String rfProfileId, UpdateNetworkWirelessRfProfileRequest updateNetworkWirelessRfProfileRequest) throws ApiException {
        ApiResponse<CreateNetworkWirelessRfProfile201Response> localVarResp = updateNetworkWirelessRfProfile_0WithHttpInfo(networkId, rfProfileId, updateNetworkWirelessRfProfileRequest);
        return localVarResp.getData();
    }

    /**
     * Updates specified RF profile for this network
     * Updates specified RF profile for this network
     * @param networkId  (required)
     * @param rfProfileId  (required)
     * @param updateNetworkWirelessRfProfileRequest  (optional)
     * @return ApiResponse&lt;CreateNetworkWirelessRfProfile201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateNetworkWirelessRfProfile201Response> updateNetworkWirelessRfProfile_0WithHttpInfo(String networkId, String rfProfileId, UpdateNetworkWirelessRfProfileRequest updateNetworkWirelessRfProfileRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkWirelessRfProfile_0ValidateBeforeCall(networkId, rfProfileId, updateNetworkWirelessRfProfileRequest, null);
        Type localVarReturnType = new TypeToken<CreateNetworkWirelessRfProfile201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates specified RF profile for this network (asynchronously)
     * Updates specified RF profile for this network
     * @param networkId  (required)
     * @param rfProfileId  (required)
     * @param updateNetworkWirelessRfProfileRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkWirelessRfProfile_0Async(String networkId, String rfProfileId, UpdateNetworkWirelessRfProfileRequest updateNetworkWirelessRfProfileRequest, final ApiCallback<CreateNetworkWirelessRfProfile201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkWirelessRfProfile_0ValidateBeforeCall(networkId, rfProfileId, updateNetworkWirelessRfProfileRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateNetworkWirelessRfProfile201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkWirelessSettings_0
     * @param networkId  (required)
     * @param updateNetworkWirelessSettingsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkWirelessSettings_0Call(String networkId, UpdateNetworkWirelessSettingsRequest updateNetworkWirelessSettingsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkWirelessSettingsRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/wireless/settings"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkWirelessSettings_0ValidateBeforeCall(String networkId, UpdateNetworkWirelessSettingsRequest updateNetworkWirelessSettingsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkWirelessSettings_0(Async)");
        }

        return updateNetworkWirelessSettings_0Call(networkId, updateNetworkWirelessSettingsRequest, _callback);

    }

    /**
     * Update the wireless settings for a network
     * Update the wireless settings for a network
     * @param networkId  (required)
     * @param updateNetworkWirelessSettingsRequest  (optional)
     * @return GetNetworkWirelessSettings200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkWirelessSettings200Response updateNetworkWirelessSettings_0(String networkId, UpdateNetworkWirelessSettingsRequest updateNetworkWirelessSettingsRequest) throws ApiException {
        ApiResponse<GetNetworkWirelessSettings200Response> localVarResp = updateNetworkWirelessSettings_0WithHttpInfo(networkId, updateNetworkWirelessSettingsRequest);
        return localVarResp.getData();
    }

    /**
     * Update the wireless settings for a network
     * Update the wireless settings for a network
     * @param networkId  (required)
     * @param updateNetworkWirelessSettingsRequest  (optional)
     * @return ApiResponse&lt;GetNetworkWirelessSettings200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkWirelessSettings200Response> updateNetworkWirelessSettings_0WithHttpInfo(String networkId, UpdateNetworkWirelessSettingsRequest updateNetworkWirelessSettingsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkWirelessSettings_0ValidateBeforeCall(networkId, updateNetworkWirelessSettingsRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkWirelessSettings200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the wireless settings for a network (asynchronously)
     * Update the wireless settings for a network
     * @param networkId  (required)
     * @param updateNetworkWirelessSettingsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkWirelessSettings_0Async(String networkId, UpdateNetworkWirelessSettingsRequest updateNetworkWirelessSettingsRequest, final ApiCallback<GetNetworkWirelessSettings200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkWirelessSettings_0ValidateBeforeCall(networkId, updateNetworkWirelessSettingsRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkWirelessSettings200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkWirelessSsidBonjourForwarding_0
     * @param networkId  (required)
     * @param number  (required)
     * @param updateNetworkWirelessSsidBonjourForwardingRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkWirelessSsidBonjourForwarding_0Call(String networkId, String number, UpdateNetworkWirelessSsidBonjourForwardingRequest updateNetworkWirelessSsidBonjourForwardingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkWirelessSsidBonjourForwardingRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/wireless/ssids/{number}/bonjourForwarding"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "number" + "}", localVarApiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkWirelessSsidBonjourForwarding_0ValidateBeforeCall(String networkId, String number, UpdateNetworkWirelessSsidBonjourForwardingRequest updateNetworkWirelessSsidBonjourForwardingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkWirelessSsidBonjourForwarding_0(Async)");
        }

        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling updateNetworkWirelessSsidBonjourForwarding_0(Async)");
        }

        return updateNetworkWirelessSsidBonjourForwarding_0Call(networkId, number, updateNetworkWirelessSsidBonjourForwardingRequest, _callback);

    }

    /**
     * Update the bonjour forwarding setting and rules for the SSID
     * Update the bonjour forwarding setting and rules for the SSID
     * @param networkId  (required)
     * @param number  (required)
     * @param updateNetworkWirelessSsidBonjourForwardingRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkWirelessSsidBonjourForwarding_0(String networkId, String number, UpdateNetworkWirelessSsidBonjourForwardingRequest updateNetworkWirelessSsidBonjourForwardingRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkWirelessSsidBonjourForwarding_0WithHttpInfo(networkId, number, updateNetworkWirelessSsidBonjourForwardingRequest);
        return localVarResp.getData();
    }

    /**
     * Update the bonjour forwarding setting and rules for the SSID
     * Update the bonjour forwarding setting and rules for the SSID
     * @param networkId  (required)
     * @param number  (required)
     * @param updateNetworkWirelessSsidBonjourForwardingRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkWirelessSsidBonjourForwarding_0WithHttpInfo(String networkId, String number, UpdateNetworkWirelessSsidBonjourForwardingRequest updateNetworkWirelessSsidBonjourForwardingRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkWirelessSsidBonjourForwarding_0ValidateBeforeCall(networkId, number, updateNetworkWirelessSsidBonjourForwardingRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the bonjour forwarding setting and rules for the SSID (asynchronously)
     * Update the bonjour forwarding setting and rules for the SSID
     * @param networkId  (required)
     * @param number  (required)
     * @param updateNetworkWirelessSsidBonjourForwardingRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkWirelessSsidBonjourForwarding_0Async(String networkId, String number, UpdateNetworkWirelessSsidBonjourForwardingRequest updateNetworkWirelessSsidBonjourForwardingRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkWirelessSsidBonjourForwarding_0ValidateBeforeCall(networkId, number, updateNetworkWirelessSsidBonjourForwardingRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkWirelessSsidDeviceTypeGroupPolicies_0
     * @param networkId  (required)
     * @param number  (required)
     * @param updateNetworkWirelessSsidDeviceTypeGroupPoliciesRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkWirelessSsidDeviceTypeGroupPolicies_0Call(String networkId, String number, UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesRequest updateNetworkWirelessSsidDeviceTypeGroupPoliciesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkWirelessSsidDeviceTypeGroupPoliciesRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/wireless/ssids/{number}/deviceTypeGroupPolicies"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "number" + "}", localVarApiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkWirelessSsidDeviceTypeGroupPolicies_0ValidateBeforeCall(String networkId, String number, UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesRequest updateNetworkWirelessSsidDeviceTypeGroupPoliciesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkWirelessSsidDeviceTypeGroupPolicies_0(Async)");
        }

        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling updateNetworkWirelessSsidDeviceTypeGroupPolicies_0(Async)");
        }

        return updateNetworkWirelessSsidDeviceTypeGroupPolicies_0Call(networkId, number, updateNetworkWirelessSsidDeviceTypeGroupPoliciesRequest, _callback);

    }

    /**
     * Update the device type group policies for the SSID
     * Update the device type group policies for the SSID
     * @param networkId  (required)
     * @param number  (required)
     * @param updateNetworkWirelessSsidDeviceTypeGroupPoliciesRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkWirelessSsidDeviceTypeGroupPolicies_0(String networkId, String number, UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesRequest updateNetworkWirelessSsidDeviceTypeGroupPoliciesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkWirelessSsidDeviceTypeGroupPolicies_0WithHttpInfo(networkId, number, updateNetworkWirelessSsidDeviceTypeGroupPoliciesRequest);
        return localVarResp.getData();
    }

    /**
     * Update the device type group policies for the SSID
     * Update the device type group policies for the SSID
     * @param networkId  (required)
     * @param number  (required)
     * @param updateNetworkWirelessSsidDeviceTypeGroupPoliciesRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkWirelessSsidDeviceTypeGroupPolicies_0WithHttpInfo(String networkId, String number, UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesRequest updateNetworkWirelessSsidDeviceTypeGroupPoliciesRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkWirelessSsidDeviceTypeGroupPolicies_0ValidateBeforeCall(networkId, number, updateNetworkWirelessSsidDeviceTypeGroupPoliciesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the device type group policies for the SSID (asynchronously)
     * Update the device type group policies for the SSID
     * @param networkId  (required)
     * @param number  (required)
     * @param updateNetworkWirelessSsidDeviceTypeGroupPoliciesRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkWirelessSsidDeviceTypeGroupPolicies_0Async(String networkId, String number, UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesRequest updateNetworkWirelessSsidDeviceTypeGroupPoliciesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkWirelessSsidDeviceTypeGroupPolicies_0ValidateBeforeCall(networkId, number, updateNetworkWirelessSsidDeviceTypeGroupPoliciesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkWirelessSsidEapOverride_0
     * @param networkId  (required)
     * @param number  (required)
     * @param updateNetworkWirelessSsidEapOverrideRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkWirelessSsidEapOverride_0Call(String networkId, String number, UpdateNetworkWirelessSsidEapOverrideRequest updateNetworkWirelessSsidEapOverrideRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkWirelessSsidEapOverrideRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/wireless/ssids/{number}/eapOverride"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "number" + "}", localVarApiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkWirelessSsidEapOverride_0ValidateBeforeCall(String networkId, String number, UpdateNetworkWirelessSsidEapOverrideRequest updateNetworkWirelessSsidEapOverrideRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkWirelessSsidEapOverride_0(Async)");
        }

        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling updateNetworkWirelessSsidEapOverride_0(Async)");
        }

        return updateNetworkWirelessSsidEapOverride_0Call(networkId, number, updateNetworkWirelessSsidEapOverrideRequest, _callback);

    }

    /**
     * Update the EAP overridden parameters for an SSID.
     * Update the EAP overridden parameters for an SSID.
     * @param networkId  (required)
     * @param number  (required)
     * @param updateNetworkWirelessSsidEapOverrideRequest  (optional)
     * @return GetNetworkWirelessSsidEapOverride200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkWirelessSsidEapOverride200Response updateNetworkWirelessSsidEapOverride_0(String networkId, String number, UpdateNetworkWirelessSsidEapOverrideRequest updateNetworkWirelessSsidEapOverrideRequest) throws ApiException {
        ApiResponse<GetNetworkWirelessSsidEapOverride200Response> localVarResp = updateNetworkWirelessSsidEapOverride_0WithHttpInfo(networkId, number, updateNetworkWirelessSsidEapOverrideRequest);
        return localVarResp.getData();
    }

    /**
     * Update the EAP overridden parameters for an SSID.
     * Update the EAP overridden parameters for an SSID.
     * @param networkId  (required)
     * @param number  (required)
     * @param updateNetworkWirelessSsidEapOverrideRequest  (optional)
     * @return ApiResponse&lt;GetNetworkWirelessSsidEapOverride200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkWirelessSsidEapOverride200Response> updateNetworkWirelessSsidEapOverride_0WithHttpInfo(String networkId, String number, UpdateNetworkWirelessSsidEapOverrideRequest updateNetworkWirelessSsidEapOverrideRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkWirelessSsidEapOverride_0ValidateBeforeCall(networkId, number, updateNetworkWirelessSsidEapOverrideRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkWirelessSsidEapOverride200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the EAP overridden parameters for an SSID. (asynchronously)
     * Update the EAP overridden parameters for an SSID.
     * @param networkId  (required)
     * @param number  (required)
     * @param updateNetworkWirelessSsidEapOverrideRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkWirelessSsidEapOverride_0Async(String networkId, String number, UpdateNetworkWirelessSsidEapOverrideRequest updateNetworkWirelessSsidEapOverrideRequest, final ApiCallback<GetNetworkWirelessSsidEapOverride200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkWirelessSsidEapOverride_0ValidateBeforeCall(networkId, number, updateNetworkWirelessSsidEapOverrideRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkWirelessSsidEapOverride200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkWirelessSsidFirewallL3FirewallRules_0
     * @param networkId  (required)
     * @param number  (required)
     * @param updateNetworkWirelessSsidFirewallL3FirewallRulesRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkWirelessSsidFirewallL3FirewallRules_0Call(String networkId, String number, UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequest updateNetworkWirelessSsidFirewallL3FirewallRulesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkWirelessSsidFirewallL3FirewallRulesRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/wireless/ssids/{number}/firewall/l3FirewallRules"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "number" + "}", localVarApiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkWirelessSsidFirewallL3FirewallRules_0ValidateBeforeCall(String networkId, String number, UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequest updateNetworkWirelessSsidFirewallL3FirewallRulesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkWirelessSsidFirewallL3FirewallRules_0(Async)");
        }

        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling updateNetworkWirelessSsidFirewallL3FirewallRules_0(Async)");
        }

        return updateNetworkWirelessSsidFirewallL3FirewallRules_0Call(networkId, number, updateNetworkWirelessSsidFirewallL3FirewallRulesRequest, _callback);

    }

    /**
     * Update the L3 firewall rules of an SSID on an MR network
     * Update the L3 firewall rules of an SSID on an MR network
     * @param networkId  (required)
     * @param number  (required)
     * @param updateNetworkWirelessSsidFirewallL3FirewallRulesRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkWirelessSsidFirewallL3FirewallRules_0(String networkId, String number, UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequest updateNetworkWirelessSsidFirewallL3FirewallRulesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkWirelessSsidFirewallL3FirewallRules_0WithHttpInfo(networkId, number, updateNetworkWirelessSsidFirewallL3FirewallRulesRequest);
        return localVarResp.getData();
    }

    /**
     * Update the L3 firewall rules of an SSID on an MR network
     * Update the L3 firewall rules of an SSID on an MR network
     * @param networkId  (required)
     * @param number  (required)
     * @param updateNetworkWirelessSsidFirewallL3FirewallRulesRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkWirelessSsidFirewallL3FirewallRules_0WithHttpInfo(String networkId, String number, UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequest updateNetworkWirelessSsidFirewallL3FirewallRulesRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkWirelessSsidFirewallL3FirewallRules_0ValidateBeforeCall(networkId, number, updateNetworkWirelessSsidFirewallL3FirewallRulesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the L3 firewall rules of an SSID on an MR network (asynchronously)
     * Update the L3 firewall rules of an SSID on an MR network
     * @param networkId  (required)
     * @param number  (required)
     * @param updateNetworkWirelessSsidFirewallL3FirewallRulesRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkWirelessSsidFirewallL3FirewallRules_0Async(String networkId, String number, UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequest updateNetworkWirelessSsidFirewallL3FirewallRulesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkWirelessSsidFirewallL3FirewallRules_0ValidateBeforeCall(networkId, number, updateNetworkWirelessSsidFirewallL3FirewallRulesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkWirelessSsidFirewallL7FirewallRules_0
     * @param networkId  (required)
     * @param number  (required)
     * @param updateNetworkWirelessSsidFirewallL7FirewallRulesRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkWirelessSsidFirewallL7FirewallRules_0Call(String networkId, String number, UpdateNetworkWirelessSsidFirewallL7FirewallRulesRequest updateNetworkWirelessSsidFirewallL7FirewallRulesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkWirelessSsidFirewallL7FirewallRulesRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/wireless/ssids/{number}/firewall/l7FirewallRules"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "number" + "}", localVarApiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkWirelessSsidFirewallL7FirewallRules_0ValidateBeforeCall(String networkId, String number, UpdateNetworkWirelessSsidFirewallL7FirewallRulesRequest updateNetworkWirelessSsidFirewallL7FirewallRulesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkWirelessSsidFirewallL7FirewallRules_0(Async)");
        }

        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling updateNetworkWirelessSsidFirewallL7FirewallRules_0(Async)");
        }

        return updateNetworkWirelessSsidFirewallL7FirewallRules_0Call(networkId, number, updateNetworkWirelessSsidFirewallL7FirewallRulesRequest, _callback);

    }

    /**
     * Update the L7 firewall rules of an SSID on an MR network
     * Update the L7 firewall rules of an SSID on an MR network
     * @param networkId  (required)
     * @param number  (required)
     * @param updateNetworkWirelessSsidFirewallL7FirewallRulesRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkWirelessSsidFirewallL7FirewallRules_0(String networkId, String number, UpdateNetworkWirelessSsidFirewallL7FirewallRulesRequest updateNetworkWirelessSsidFirewallL7FirewallRulesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkWirelessSsidFirewallL7FirewallRules_0WithHttpInfo(networkId, number, updateNetworkWirelessSsidFirewallL7FirewallRulesRequest);
        return localVarResp.getData();
    }

    /**
     * Update the L7 firewall rules of an SSID on an MR network
     * Update the L7 firewall rules of an SSID on an MR network
     * @param networkId  (required)
     * @param number  (required)
     * @param updateNetworkWirelessSsidFirewallL7FirewallRulesRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkWirelessSsidFirewallL7FirewallRules_0WithHttpInfo(String networkId, String number, UpdateNetworkWirelessSsidFirewallL7FirewallRulesRequest updateNetworkWirelessSsidFirewallL7FirewallRulesRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkWirelessSsidFirewallL7FirewallRules_0ValidateBeforeCall(networkId, number, updateNetworkWirelessSsidFirewallL7FirewallRulesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the L7 firewall rules of an SSID on an MR network (asynchronously)
     * Update the L7 firewall rules of an SSID on an MR network
     * @param networkId  (required)
     * @param number  (required)
     * @param updateNetworkWirelessSsidFirewallL7FirewallRulesRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkWirelessSsidFirewallL7FirewallRules_0Async(String networkId, String number, UpdateNetworkWirelessSsidFirewallL7FirewallRulesRequest updateNetworkWirelessSsidFirewallL7FirewallRulesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkWirelessSsidFirewallL7FirewallRules_0ValidateBeforeCall(networkId, number, updateNetworkWirelessSsidFirewallL7FirewallRulesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkWirelessSsidHotspot20_0
     * @param networkId  (required)
     * @param number  (required)
     * @param updateNetworkWirelessSsidHotspot20Request  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkWirelessSsidHotspot20_0Call(String networkId, String number, UpdateNetworkWirelessSsidHotspot20Request updateNetworkWirelessSsidHotspot20Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkWirelessSsidHotspot20Request;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/wireless/ssids/{number}/hotspot20"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "number" + "}", localVarApiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkWirelessSsidHotspot20_0ValidateBeforeCall(String networkId, String number, UpdateNetworkWirelessSsidHotspot20Request updateNetworkWirelessSsidHotspot20Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkWirelessSsidHotspot20_0(Async)");
        }

        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling updateNetworkWirelessSsidHotspot20_0(Async)");
        }

        return updateNetworkWirelessSsidHotspot20_0Call(networkId, number, updateNetworkWirelessSsidHotspot20Request, _callback);

    }

    /**
     * Update the Hotspot 2.0 settings of an SSID
     * Update the Hotspot 2.0 settings of an SSID
     * @param networkId  (required)
     * @param number  (required)
     * @param updateNetworkWirelessSsidHotspot20Request  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkWirelessSsidHotspot20_0(String networkId, String number, UpdateNetworkWirelessSsidHotspot20Request updateNetworkWirelessSsidHotspot20Request) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkWirelessSsidHotspot20_0WithHttpInfo(networkId, number, updateNetworkWirelessSsidHotspot20Request);
        return localVarResp.getData();
    }

    /**
     * Update the Hotspot 2.0 settings of an SSID
     * Update the Hotspot 2.0 settings of an SSID
     * @param networkId  (required)
     * @param number  (required)
     * @param updateNetworkWirelessSsidHotspot20Request  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkWirelessSsidHotspot20_0WithHttpInfo(String networkId, String number, UpdateNetworkWirelessSsidHotspot20Request updateNetworkWirelessSsidHotspot20Request) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkWirelessSsidHotspot20_0ValidateBeforeCall(networkId, number, updateNetworkWirelessSsidHotspot20Request, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the Hotspot 2.0 settings of an SSID (asynchronously)
     * Update the Hotspot 2.0 settings of an SSID
     * @param networkId  (required)
     * @param number  (required)
     * @param updateNetworkWirelessSsidHotspot20Request  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkWirelessSsidHotspot20_0Async(String networkId, String number, UpdateNetworkWirelessSsidHotspot20Request updateNetworkWirelessSsidHotspot20Request, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkWirelessSsidHotspot20_0ValidateBeforeCall(networkId, number, updateNetworkWirelessSsidHotspot20Request, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkWirelessSsidIdentityPsk_0
     * @param networkId  (required)
     * @param number  (required)
     * @param identityPskId  (required)
     * @param updateNetworkWirelessSsidIdentityPskRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkWirelessSsidIdentityPsk_0Call(String networkId, String number, String identityPskId, UpdateNetworkWirelessSsidIdentityPskRequest updateNetworkWirelessSsidIdentityPskRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkWirelessSsidIdentityPskRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/wireless/ssids/{number}/identityPsks/{identityPskId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "number" + "}", localVarApiClient.escapeString(number.toString()))
            .replace("{" + "identityPskId" + "}", localVarApiClient.escapeString(identityPskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkWirelessSsidIdentityPsk_0ValidateBeforeCall(String networkId, String number, String identityPskId, UpdateNetworkWirelessSsidIdentityPskRequest updateNetworkWirelessSsidIdentityPskRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkWirelessSsidIdentityPsk_0(Async)");
        }

        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling updateNetworkWirelessSsidIdentityPsk_0(Async)");
        }

        // verify the required parameter 'identityPskId' is set
        if (identityPskId == null) {
            throw new ApiException("Missing the required parameter 'identityPskId' when calling updateNetworkWirelessSsidIdentityPsk_0(Async)");
        }

        return updateNetworkWirelessSsidIdentityPsk_0Call(networkId, number, identityPskId, updateNetworkWirelessSsidIdentityPskRequest, _callback);

    }

    /**
     * Update an Identity PSK
     * Update an Identity PSK
     * @param networkId  (required)
     * @param number  (required)
     * @param identityPskId  (required)
     * @param updateNetworkWirelessSsidIdentityPskRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkWirelessSsidIdentityPsk_0(String networkId, String number, String identityPskId, UpdateNetworkWirelessSsidIdentityPskRequest updateNetworkWirelessSsidIdentityPskRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkWirelessSsidIdentityPsk_0WithHttpInfo(networkId, number, identityPskId, updateNetworkWirelessSsidIdentityPskRequest);
        return localVarResp.getData();
    }

    /**
     * Update an Identity PSK
     * Update an Identity PSK
     * @param networkId  (required)
     * @param number  (required)
     * @param identityPskId  (required)
     * @param updateNetworkWirelessSsidIdentityPskRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkWirelessSsidIdentityPsk_0WithHttpInfo(String networkId, String number, String identityPskId, UpdateNetworkWirelessSsidIdentityPskRequest updateNetworkWirelessSsidIdentityPskRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkWirelessSsidIdentityPsk_0ValidateBeforeCall(networkId, number, identityPskId, updateNetworkWirelessSsidIdentityPskRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an Identity PSK (asynchronously)
     * Update an Identity PSK
     * @param networkId  (required)
     * @param number  (required)
     * @param identityPskId  (required)
     * @param updateNetworkWirelessSsidIdentityPskRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkWirelessSsidIdentityPsk_0Async(String networkId, String number, String identityPskId, UpdateNetworkWirelessSsidIdentityPskRequest updateNetworkWirelessSsidIdentityPskRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkWirelessSsidIdentityPsk_0ValidateBeforeCall(networkId, number, identityPskId, updateNetworkWirelessSsidIdentityPskRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkWirelessSsidSchedules_0
     * @param networkId  (required)
     * @param number  (required)
     * @param updateNetworkWirelessSsidSchedulesRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkWirelessSsidSchedules_0Call(String networkId, String number, UpdateNetworkWirelessSsidSchedulesRequest updateNetworkWirelessSsidSchedulesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkWirelessSsidSchedulesRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/wireless/ssids/{number}/schedules"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "number" + "}", localVarApiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkWirelessSsidSchedules_0ValidateBeforeCall(String networkId, String number, UpdateNetworkWirelessSsidSchedulesRequest updateNetworkWirelessSsidSchedulesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkWirelessSsidSchedules_0(Async)");
        }

        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling updateNetworkWirelessSsidSchedules_0(Async)");
        }

        return updateNetworkWirelessSsidSchedules_0Call(networkId, number, updateNetworkWirelessSsidSchedulesRequest, _callback);

    }

    /**
     * Update the outage schedule for the SSID
     * Update the outage schedule for the SSID
     * @param networkId  (required)
     * @param number  (required)
     * @param updateNetworkWirelessSsidSchedulesRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkWirelessSsidSchedules_0(String networkId, String number, UpdateNetworkWirelessSsidSchedulesRequest updateNetworkWirelessSsidSchedulesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkWirelessSsidSchedules_0WithHttpInfo(networkId, number, updateNetworkWirelessSsidSchedulesRequest);
        return localVarResp.getData();
    }

    /**
     * Update the outage schedule for the SSID
     * Update the outage schedule for the SSID
     * @param networkId  (required)
     * @param number  (required)
     * @param updateNetworkWirelessSsidSchedulesRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkWirelessSsidSchedules_0WithHttpInfo(String networkId, String number, UpdateNetworkWirelessSsidSchedulesRequest updateNetworkWirelessSsidSchedulesRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkWirelessSsidSchedules_0ValidateBeforeCall(networkId, number, updateNetworkWirelessSsidSchedulesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the outage schedule for the SSID (asynchronously)
     * Update the outage schedule for the SSID
     * @param networkId  (required)
     * @param number  (required)
     * @param updateNetworkWirelessSsidSchedulesRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkWirelessSsidSchedules_0Async(String networkId, String number, UpdateNetworkWirelessSsidSchedulesRequest updateNetworkWirelessSsidSchedulesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkWirelessSsidSchedules_0ValidateBeforeCall(networkId, number, updateNetworkWirelessSsidSchedulesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkWirelessSsidSplashSettings_0
     * @param networkId  (required)
     * @param number  (required)
     * @param updateNetworkWirelessSsidSplashSettingsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkWirelessSsidSplashSettings_0Call(String networkId, String number, UpdateNetworkWirelessSsidSplashSettingsRequest updateNetworkWirelessSsidSplashSettingsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkWirelessSsidSplashSettingsRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/wireless/ssids/{number}/splash/settings"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "number" + "}", localVarApiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkWirelessSsidSplashSettings_0ValidateBeforeCall(String networkId, String number, UpdateNetworkWirelessSsidSplashSettingsRequest updateNetworkWirelessSsidSplashSettingsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkWirelessSsidSplashSettings_0(Async)");
        }

        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling updateNetworkWirelessSsidSplashSettings_0(Async)");
        }

        return updateNetworkWirelessSsidSplashSettings_0Call(networkId, number, updateNetworkWirelessSsidSplashSettingsRequest, _callback);

    }

    /**
     * Modify the splash page settings for the given SSID
     * Modify the splash page settings for the given SSID
     * @param networkId  (required)
     * @param number  (required)
     * @param updateNetworkWirelessSsidSplashSettingsRequest  (optional)
     * @return GetNetworkWirelessSsidSplashSettings200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetworkWirelessSsidSplashSettings200Response updateNetworkWirelessSsidSplashSettings_0(String networkId, String number, UpdateNetworkWirelessSsidSplashSettingsRequest updateNetworkWirelessSsidSplashSettingsRequest) throws ApiException {
        ApiResponse<GetNetworkWirelessSsidSplashSettings200Response> localVarResp = updateNetworkWirelessSsidSplashSettings_0WithHttpInfo(networkId, number, updateNetworkWirelessSsidSplashSettingsRequest);
        return localVarResp.getData();
    }

    /**
     * Modify the splash page settings for the given SSID
     * Modify the splash page settings for the given SSID
     * @param networkId  (required)
     * @param number  (required)
     * @param updateNetworkWirelessSsidSplashSettingsRequest  (optional)
     * @return ApiResponse&lt;GetNetworkWirelessSsidSplashSettings200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetworkWirelessSsidSplashSettings200Response> updateNetworkWirelessSsidSplashSettings_0WithHttpInfo(String networkId, String number, UpdateNetworkWirelessSsidSplashSettingsRequest updateNetworkWirelessSsidSplashSettingsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkWirelessSsidSplashSettings_0ValidateBeforeCall(networkId, number, updateNetworkWirelessSsidSplashSettingsRequest, null);
        Type localVarReturnType = new TypeToken<GetNetworkWirelessSsidSplashSettings200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Modify the splash page settings for the given SSID (asynchronously)
     * Modify the splash page settings for the given SSID
     * @param networkId  (required)
     * @param number  (required)
     * @param updateNetworkWirelessSsidSplashSettingsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkWirelessSsidSplashSettings_0Async(String networkId, String number, UpdateNetworkWirelessSsidSplashSettingsRequest updateNetworkWirelessSsidSplashSettingsRequest, final ApiCallback<GetNetworkWirelessSsidSplashSettings200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkWirelessSsidSplashSettings_0ValidateBeforeCall(networkId, number, updateNetworkWirelessSsidSplashSettingsRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetworkWirelessSsidSplashSettings200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkWirelessSsidTrafficShapingRules_0
     * @param networkId  (required)
     * @param number  (required)
     * @param updateNetworkWirelessSsidTrafficShapingRulesRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkWirelessSsidTrafficShapingRules_0Call(String networkId, String number, UpdateNetworkWirelessSsidTrafficShapingRulesRequest updateNetworkWirelessSsidTrafficShapingRulesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkWirelessSsidTrafficShapingRulesRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/wireless/ssids/{number}/trafficShaping/rules"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "number" + "}", localVarApiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkWirelessSsidTrafficShapingRules_0ValidateBeforeCall(String networkId, String number, UpdateNetworkWirelessSsidTrafficShapingRulesRequest updateNetworkWirelessSsidTrafficShapingRulesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkWirelessSsidTrafficShapingRules_0(Async)");
        }

        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling updateNetworkWirelessSsidTrafficShapingRules_0(Async)");
        }

        return updateNetworkWirelessSsidTrafficShapingRules_0Call(networkId, number, updateNetworkWirelessSsidTrafficShapingRulesRequest, _callback);

    }

    /**
     * Update the traffic shaping settings for an SSID on an MR network
     * Update the traffic shaping settings for an SSID on an MR network
     * @param networkId  (required)
     * @param number  (required)
     * @param updateNetworkWirelessSsidTrafficShapingRulesRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkWirelessSsidTrafficShapingRules_0(String networkId, String number, UpdateNetworkWirelessSsidTrafficShapingRulesRequest updateNetworkWirelessSsidTrafficShapingRulesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkWirelessSsidTrafficShapingRules_0WithHttpInfo(networkId, number, updateNetworkWirelessSsidTrafficShapingRulesRequest);
        return localVarResp.getData();
    }

    /**
     * Update the traffic shaping settings for an SSID on an MR network
     * Update the traffic shaping settings for an SSID on an MR network
     * @param networkId  (required)
     * @param number  (required)
     * @param updateNetworkWirelessSsidTrafficShapingRulesRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkWirelessSsidTrafficShapingRules_0WithHttpInfo(String networkId, String number, UpdateNetworkWirelessSsidTrafficShapingRulesRequest updateNetworkWirelessSsidTrafficShapingRulesRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkWirelessSsidTrafficShapingRules_0ValidateBeforeCall(networkId, number, updateNetworkWirelessSsidTrafficShapingRulesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the traffic shaping settings for an SSID on an MR network (asynchronously)
     * Update the traffic shaping settings for an SSID on an MR network
     * @param networkId  (required)
     * @param number  (required)
     * @param updateNetworkWirelessSsidTrafficShapingRulesRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkWirelessSsidTrafficShapingRules_0Async(String networkId, String number, UpdateNetworkWirelessSsidTrafficShapingRulesRequest updateNetworkWirelessSsidTrafficShapingRulesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkWirelessSsidTrafficShapingRules_0ValidateBeforeCall(networkId, number, updateNetworkWirelessSsidTrafficShapingRulesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkWirelessSsidVpn_0
     * @param networkId  (required)
     * @param number  (required)
     * @param updateNetworkWirelessSsidVpnRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkWirelessSsidVpn_0Call(String networkId, String number, UpdateNetworkWirelessSsidVpnRequest updateNetworkWirelessSsidVpnRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkWirelessSsidVpnRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/wireless/ssids/{number}/vpn"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "number" + "}", localVarApiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkWirelessSsidVpn_0ValidateBeforeCall(String networkId, String number, UpdateNetworkWirelessSsidVpnRequest updateNetworkWirelessSsidVpnRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkWirelessSsidVpn_0(Async)");
        }

        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling updateNetworkWirelessSsidVpn_0(Async)");
        }

        return updateNetworkWirelessSsidVpn_0Call(networkId, number, updateNetworkWirelessSsidVpnRequest, _callback);

    }

    /**
     * Update the VPN settings for the SSID
     * Update the VPN settings for the SSID
     * @param networkId  (required)
     * @param number  (required)
     * @param updateNetworkWirelessSsidVpnRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkWirelessSsidVpn_0(String networkId, String number, UpdateNetworkWirelessSsidVpnRequest updateNetworkWirelessSsidVpnRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkWirelessSsidVpn_0WithHttpInfo(networkId, number, updateNetworkWirelessSsidVpnRequest);
        return localVarResp.getData();
    }

    /**
     * Update the VPN settings for the SSID
     * Update the VPN settings for the SSID
     * @param networkId  (required)
     * @param number  (required)
     * @param updateNetworkWirelessSsidVpnRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkWirelessSsidVpn_0WithHttpInfo(String networkId, String number, UpdateNetworkWirelessSsidVpnRequest updateNetworkWirelessSsidVpnRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkWirelessSsidVpn_0ValidateBeforeCall(networkId, number, updateNetworkWirelessSsidVpnRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the VPN settings for the SSID (asynchronously)
     * Update the VPN settings for the SSID
     * @param networkId  (required)
     * @param number  (required)
     * @param updateNetworkWirelessSsidVpnRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkWirelessSsidVpn_0Async(String networkId, String number, UpdateNetworkWirelessSsidVpnRequest updateNetworkWirelessSsidVpnRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkWirelessSsidVpn_0ValidateBeforeCall(networkId, number, updateNetworkWirelessSsidVpnRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkWirelessSsid_0
     * @param networkId  (required)
     * @param number  (required)
     * @param updateNetworkWirelessSsidRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkWirelessSsid_0Call(String networkId, String number, UpdateNetworkWirelessSsidRequest updateNetworkWirelessSsidRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkWirelessSsidRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/wireless/ssids/{number}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "number" + "}", localVarApiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkWirelessSsid_0ValidateBeforeCall(String networkId, String number, UpdateNetworkWirelessSsidRequest updateNetworkWirelessSsidRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetworkWirelessSsid_0(Async)");
        }

        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling updateNetworkWirelessSsid_0(Async)");
        }

        return updateNetworkWirelessSsid_0Call(networkId, number, updateNetworkWirelessSsidRequest, _callback);

    }

    /**
     * Update the attributes of an MR SSID
     * Update the attributes of an MR SSID
     * @param networkId  (required)
     * @param number  (required)
     * @param updateNetworkWirelessSsidRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateNetworkWirelessSsid_0(String networkId, String number, UpdateNetworkWirelessSsidRequest updateNetworkWirelessSsidRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateNetworkWirelessSsid_0WithHttpInfo(networkId, number, updateNetworkWirelessSsidRequest);
        return localVarResp.getData();
    }

    /**
     * Update the attributes of an MR SSID
     * Update the attributes of an MR SSID
     * @param networkId  (required)
     * @param number  (required)
     * @param updateNetworkWirelessSsidRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateNetworkWirelessSsid_0WithHttpInfo(String networkId, String number, UpdateNetworkWirelessSsidRequest updateNetworkWirelessSsidRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkWirelessSsid_0ValidateBeforeCall(networkId, number, updateNetworkWirelessSsidRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the attributes of an MR SSID (asynchronously)
     * Update the attributes of an MR SSID
     * @param networkId  (required)
     * @param number  (required)
     * @param updateNetworkWirelessSsidRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkWirelessSsid_0Async(String networkId, String number, UpdateNetworkWirelessSsidRequest updateNetworkWirelessSsidRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkWirelessSsid_0ValidateBeforeCall(networkId, number, updateNetworkWirelessSsidRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetwork_0
     * @param networkId  (required)
     * @param updateNetworkRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetwork_0Call(String networkId, UpdateNetworkRequest updateNetworkRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNetworkRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetwork_0ValidateBeforeCall(String networkId, UpdateNetworkRequest updateNetworkRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling updateNetwork_0(Async)");
        }

        return updateNetwork_0Call(networkId, updateNetworkRequest, _callback);

    }

    /**
     * Update a network
     * Update a network
     * @param networkId  (required)
     * @param updateNetworkRequest  (optional)
     * @return GetNetwork200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetNetwork200Response updateNetwork_0(String networkId, UpdateNetworkRequest updateNetworkRequest) throws ApiException {
        ApiResponse<GetNetwork200Response> localVarResp = updateNetwork_0WithHttpInfo(networkId, updateNetworkRequest);
        return localVarResp.getData();
    }

    /**
     * Update a network
     * Update a network
     * @param networkId  (required)
     * @param updateNetworkRequest  (optional)
     * @return ApiResponse&lt;GetNetwork200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNetwork200Response> updateNetwork_0WithHttpInfo(String networkId, UpdateNetworkRequest updateNetworkRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNetwork_0ValidateBeforeCall(networkId, updateNetworkRequest, null);
        Type localVarReturnType = new TypeToken<GetNetwork200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a network (asynchronously)
     * Update a network
     * @param networkId  (required)
     * @param updateNetworkRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetwork_0Async(String networkId, UpdateNetworkRequest updateNetworkRequest, final ApiCallback<GetNetwork200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetwork_0ValidateBeforeCall(networkId, updateNetworkRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNetwork200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrganizationActionBatch_0
     * @param organizationId  (required)
     * @param actionBatchId  (required)
     * @param updateOrganizationActionBatchRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationActionBatch_0Call(String organizationId, String actionBatchId, UpdateOrganizationActionBatchRequest updateOrganizationActionBatchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateOrganizationActionBatchRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/actionBatches/{actionBatchId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "actionBatchId" + "}", localVarApiClient.escapeString(actionBatchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrganizationActionBatch_0ValidateBeforeCall(String organizationId, String actionBatchId, UpdateOrganizationActionBatchRequest updateOrganizationActionBatchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling updateOrganizationActionBatch_0(Async)");
        }

        // verify the required parameter 'actionBatchId' is set
        if (actionBatchId == null) {
            throw new ApiException("Missing the required parameter 'actionBatchId' when calling updateOrganizationActionBatch_0(Async)");
        }

        return updateOrganizationActionBatch_0Call(organizationId, actionBatchId, updateOrganizationActionBatchRequest, _callback);

    }

    /**
     * Update an action batch
     * Update an action batch
     * @param organizationId  (required)
     * @param actionBatchId  (required)
     * @param updateOrganizationActionBatchRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateOrganizationActionBatch_0(String organizationId, String actionBatchId, UpdateOrganizationActionBatchRequest updateOrganizationActionBatchRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateOrganizationActionBatch_0WithHttpInfo(organizationId, actionBatchId, updateOrganizationActionBatchRequest);
        return localVarResp.getData();
    }

    /**
     * Update an action batch
     * Update an action batch
     * @param organizationId  (required)
     * @param actionBatchId  (required)
     * @param updateOrganizationActionBatchRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateOrganizationActionBatch_0WithHttpInfo(String organizationId, String actionBatchId, UpdateOrganizationActionBatchRequest updateOrganizationActionBatchRequest) throws ApiException {
        okhttp3.Call localVarCall = updateOrganizationActionBatch_0ValidateBeforeCall(organizationId, actionBatchId, updateOrganizationActionBatchRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an action batch (asynchronously)
     * Update an action batch
     * @param organizationId  (required)
     * @param actionBatchId  (required)
     * @param updateOrganizationActionBatchRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationActionBatch_0Async(String organizationId, String actionBatchId, UpdateOrganizationActionBatchRequest updateOrganizationActionBatchRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrganizationActionBatch_0ValidateBeforeCall(organizationId, actionBatchId, updateOrganizationActionBatchRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrganizationAdaptivePolicyAcl_0
     * @param organizationId  (required)
     * @param aclId  (required)
     * @param updateOrganizationAdaptivePolicyAclRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationAdaptivePolicyAcl_0Call(String organizationId, String aclId, UpdateOrganizationAdaptivePolicyAclRequest updateOrganizationAdaptivePolicyAclRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateOrganizationAdaptivePolicyAclRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/adaptivePolicy/acls/{aclId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "aclId" + "}", localVarApiClient.escapeString(aclId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrganizationAdaptivePolicyAcl_0ValidateBeforeCall(String organizationId, String aclId, UpdateOrganizationAdaptivePolicyAclRequest updateOrganizationAdaptivePolicyAclRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling updateOrganizationAdaptivePolicyAcl_0(Async)");
        }

        // verify the required parameter 'aclId' is set
        if (aclId == null) {
            throw new ApiException("Missing the required parameter 'aclId' when calling updateOrganizationAdaptivePolicyAcl_0(Async)");
        }

        return updateOrganizationAdaptivePolicyAcl_0Call(organizationId, aclId, updateOrganizationAdaptivePolicyAclRequest, _callback);

    }

    /**
     * Updates an adaptive policy ACL
     * Updates an adaptive policy ACL
     * @param organizationId  (required)
     * @param aclId  (required)
     * @param updateOrganizationAdaptivePolicyAclRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateOrganizationAdaptivePolicyAcl_0(String organizationId, String aclId, UpdateOrganizationAdaptivePolicyAclRequest updateOrganizationAdaptivePolicyAclRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateOrganizationAdaptivePolicyAcl_0WithHttpInfo(organizationId, aclId, updateOrganizationAdaptivePolicyAclRequest);
        return localVarResp.getData();
    }

    /**
     * Updates an adaptive policy ACL
     * Updates an adaptive policy ACL
     * @param organizationId  (required)
     * @param aclId  (required)
     * @param updateOrganizationAdaptivePolicyAclRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateOrganizationAdaptivePolicyAcl_0WithHttpInfo(String organizationId, String aclId, UpdateOrganizationAdaptivePolicyAclRequest updateOrganizationAdaptivePolicyAclRequest) throws ApiException {
        okhttp3.Call localVarCall = updateOrganizationAdaptivePolicyAcl_0ValidateBeforeCall(organizationId, aclId, updateOrganizationAdaptivePolicyAclRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates an adaptive policy ACL (asynchronously)
     * Updates an adaptive policy ACL
     * @param organizationId  (required)
     * @param aclId  (required)
     * @param updateOrganizationAdaptivePolicyAclRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationAdaptivePolicyAcl_0Async(String organizationId, String aclId, UpdateOrganizationAdaptivePolicyAclRequest updateOrganizationAdaptivePolicyAclRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrganizationAdaptivePolicyAcl_0ValidateBeforeCall(organizationId, aclId, updateOrganizationAdaptivePolicyAclRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrganizationAdaptivePolicyGroup_0
     * @param organizationId  (required)
     * @param id  (required)
     * @param updateOrganizationAdaptivePolicyGroupRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationAdaptivePolicyGroup_0Call(String organizationId, String id, UpdateOrganizationAdaptivePolicyGroupRequest updateOrganizationAdaptivePolicyGroupRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateOrganizationAdaptivePolicyGroupRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/adaptivePolicy/groups/{id}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrganizationAdaptivePolicyGroup_0ValidateBeforeCall(String organizationId, String id, UpdateOrganizationAdaptivePolicyGroupRequest updateOrganizationAdaptivePolicyGroupRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling updateOrganizationAdaptivePolicyGroup_0(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateOrganizationAdaptivePolicyGroup_0(Async)");
        }

        return updateOrganizationAdaptivePolicyGroup_0Call(organizationId, id, updateOrganizationAdaptivePolicyGroupRequest, _callback);

    }

    /**
     * Updates an adaptive policy group
     * Updates an adaptive policy group. If updating \&quot;Infrastructure\&quot;, only the SGT is allowed. Cannot update \&quot;Unknown\&quot;.
     * @param organizationId  (required)
     * @param id  (required)
     * @param updateOrganizationAdaptivePolicyGroupRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateOrganizationAdaptivePolicyGroup_0(String organizationId, String id, UpdateOrganizationAdaptivePolicyGroupRequest updateOrganizationAdaptivePolicyGroupRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateOrganizationAdaptivePolicyGroup_0WithHttpInfo(organizationId, id, updateOrganizationAdaptivePolicyGroupRequest);
        return localVarResp.getData();
    }

    /**
     * Updates an adaptive policy group
     * Updates an adaptive policy group. If updating \&quot;Infrastructure\&quot;, only the SGT is allowed. Cannot update \&quot;Unknown\&quot;.
     * @param organizationId  (required)
     * @param id  (required)
     * @param updateOrganizationAdaptivePolicyGroupRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateOrganizationAdaptivePolicyGroup_0WithHttpInfo(String organizationId, String id, UpdateOrganizationAdaptivePolicyGroupRequest updateOrganizationAdaptivePolicyGroupRequest) throws ApiException {
        okhttp3.Call localVarCall = updateOrganizationAdaptivePolicyGroup_0ValidateBeforeCall(organizationId, id, updateOrganizationAdaptivePolicyGroupRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates an adaptive policy group (asynchronously)
     * Updates an adaptive policy group. If updating \&quot;Infrastructure\&quot;, only the SGT is allowed. Cannot update \&quot;Unknown\&quot;.
     * @param organizationId  (required)
     * @param id  (required)
     * @param updateOrganizationAdaptivePolicyGroupRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationAdaptivePolicyGroup_0Async(String organizationId, String id, UpdateOrganizationAdaptivePolicyGroupRequest updateOrganizationAdaptivePolicyGroupRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrganizationAdaptivePolicyGroup_0ValidateBeforeCall(organizationId, id, updateOrganizationAdaptivePolicyGroupRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrganizationAdaptivePolicyPolicy_0
     * @param organizationId  (required)
     * @param id  (required)
     * @param updateOrganizationAdaptivePolicyPolicyRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationAdaptivePolicyPolicy_0Call(String organizationId, String id, UpdateOrganizationAdaptivePolicyPolicyRequest updateOrganizationAdaptivePolicyPolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateOrganizationAdaptivePolicyPolicyRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/adaptivePolicy/policies/{id}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrganizationAdaptivePolicyPolicy_0ValidateBeforeCall(String organizationId, String id, UpdateOrganizationAdaptivePolicyPolicyRequest updateOrganizationAdaptivePolicyPolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling updateOrganizationAdaptivePolicyPolicy_0(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateOrganizationAdaptivePolicyPolicy_0(Async)");
        }

        return updateOrganizationAdaptivePolicyPolicy_0Call(organizationId, id, updateOrganizationAdaptivePolicyPolicyRequest, _callback);

    }

    /**
     * Update an Adaptive Policy
     * Update an Adaptive Policy
     * @param organizationId  (required)
     * @param id  (required)
     * @param updateOrganizationAdaptivePolicyPolicyRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateOrganizationAdaptivePolicyPolicy_0(String organizationId, String id, UpdateOrganizationAdaptivePolicyPolicyRequest updateOrganizationAdaptivePolicyPolicyRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateOrganizationAdaptivePolicyPolicy_0WithHttpInfo(organizationId, id, updateOrganizationAdaptivePolicyPolicyRequest);
        return localVarResp.getData();
    }

    /**
     * Update an Adaptive Policy
     * Update an Adaptive Policy
     * @param organizationId  (required)
     * @param id  (required)
     * @param updateOrganizationAdaptivePolicyPolicyRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateOrganizationAdaptivePolicyPolicy_0WithHttpInfo(String organizationId, String id, UpdateOrganizationAdaptivePolicyPolicyRequest updateOrganizationAdaptivePolicyPolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = updateOrganizationAdaptivePolicyPolicy_0ValidateBeforeCall(organizationId, id, updateOrganizationAdaptivePolicyPolicyRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an Adaptive Policy (asynchronously)
     * Update an Adaptive Policy
     * @param organizationId  (required)
     * @param id  (required)
     * @param updateOrganizationAdaptivePolicyPolicyRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationAdaptivePolicyPolicy_0Async(String organizationId, String id, UpdateOrganizationAdaptivePolicyPolicyRequest updateOrganizationAdaptivePolicyPolicyRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrganizationAdaptivePolicyPolicy_0ValidateBeforeCall(organizationId, id, updateOrganizationAdaptivePolicyPolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrganizationAdaptivePolicySettings_0
     * @param organizationId  (required)
     * @param updateOrganizationAdaptivePolicySettingsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationAdaptivePolicySettings_0Call(String organizationId, UpdateOrganizationAdaptivePolicySettingsRequest updateOrganizationAdaptivePolicySettingsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateOrganizationAdaptivePolicySettingsRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/adaptivePolicy/settings"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrganizationAdaptivePolicySettings_0ValidateBeforeCall(String organizationId, UpdateOrganizationAdaptivePolicySettingsRequest updateOrganizationAdaptivePolicySettingsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling updateOrganizationAdaptivePolicySettings_0(Async)");
        }

        return updateOrganizationAdaptivePolicySettings_0Call(organizationId, updateOrganizationAdaptivePolicySettingsRequest, _callback);

    }

    /**
     * Update global adaptive policy settings
     * Update global adaptive policy settings
     * @param organizationId  (required)
     * @param updateOrganizationAdaptivePolicySettingsRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateOrganizationAdaptivePolicySettings_0(String organizationId, UpdateOrganizationAdaptivePolicySettingsRequest updateOrganizationAdaptivePolicySettingsRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateOrganizationAdaptivePolicySettings_0WithHttpInfo(organizationId, updateOrganizationAdaptivePolicySettingsRequest);
        return localVarResp.getData();
    }

    /**
     * Update global adaptive policy settings
     * Update global adaptive policy settings
     * @param organizationId  (required)
     * @param updateOrganizationAdaptivePolicySettingsRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateOrganizationAdaptivePolicySettings_0WithHttpInfo(String organizationId, UpdateOrganizationAdaptivePolicySettingsRequest updateOrganizationAdaptivePolicySettingsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateOrganizationAdaptivePolicySettings_0ValidateBeforeCall(organizationId, updateOrganizationAdaptivePolicySettingsRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update global adaptive policy settings (asynchronously)
     * Update global adaptive policy settings
     * @param organizationId  (required)
     * @param updateOrganizationAdaptivePolicySettingsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationAdaptivePolicySettings_0Async(String organizationId, UpdateOrganizationAdaptivePolicySettingsRequest updateOrganizationAdaptivePolicySettingsRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrganizationAdaptivePolicySettings_0ValidateBeforeCall(organizationId, updateOrganizationAdaptivePolicySettingsRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrganizationAdmin_0
     * @param organizationId  (required)
     * @param adminId  (required)
     * @param updateOrganizationAdminRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationAdmin_0Call(String organizationId, String adminId, UpdateOrganizationAdminRequest updateOrganizationAdminRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateOrganizationAdminRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/admins/{adminId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "adminId" + "}", localVarApiClient.escapeString(adminId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrganizationAdmin_0ValidateBeforeCall(String organizationId, String adminId, UpdateOrganizationAdminRequest updateOrganizationAdminRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling updateOrganizationAdmin_0(Async)");
        }

        // verify the required parameter 'adminId' is set
        if (adminId == null) {
            throw new ApiException("Missing the required parameter 'adminId' when calling updateOrganizationAdmin_0(Async)");
        }

        return updateOrganizationAdmin_0Call(organizationId, adminId, updateOrganizationAdminRequest, _callback);

    }

    /**
     * Update an administrator
     * Update an administrator
     * @param organizationId  (required)
     * @param adminId  (required)
     * @param updateOrganizationAdminRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateOrganizationAdmin_0(String organizationId, String adminId, UpdateOrganizationAdminRequest updateOrganizationAdminRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateOrganizationAdmin_0WithHttpInfo(organizationId, adminId, updateOrganizationAdminRequest);
        return localVarResp.getData();
    }

    /**
     * Update an administrator
     * Update an administrator
     * @param organizationId  (required)
     * @param adminId  (required)
     * @param updateOrganizationAdminRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateOrganizationAdmin_0WithHttpInfo(String organizationId, String adminId, UpdateOrganizationAdminRequest updateOrganizationAdminRequest) throws ApiException {
        okhttp3.Call localVarCall = updateOrganizationAdmin_0ValidateBeforeCall(organizationId, adminId, updateOrganizationAdminRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an administrator (asynchronously)
     * Update an administrator
     * @param organizationId  (required)
     * @param adminId  (required)
     * @param updateOrganizationAdminRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationAdmin_0Async(String organizationId, String adminId, UpdateOrganizationAdminRequest updateOrganizationAdminRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrganizationAdmin_0ValidateBeforeCall(organizationId, adminId, updateOrganizationAdminRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrganizationAlertsProfile_0
     * @param organizationId  (required)
     * @param alertConfigId  (required)
     * @param updateOrganizationAlertsProfileRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationAlertsProfile_0Call(String organizationId, String alertConfigId, UpdateOrganizationAlertsProfileRequest updateOrganizationAlertsProfileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateOrganizationAlertsProfileRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/alerts/profiles/{alertConfigId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "alertConfigId" + "}", localVarApiClient.escapeString(alertConfigId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrganizationAlertsProfile_0ValidateBeforeCall(String organizationId, String alertConfigId, UpdateOrganizationAlertsProfileRequest updateOrganizationAlertsProfileRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling updateOrganizationAlertsProfile_0(Async)");
        }

        // verify the required parameter 'alertConfigId' is set
        if (alertConfigId == null) {
            throw new ApiException("Missing the required parameter 'alertConfigId' when calling updateOrganizationAlertsProfile_0(Async)");
        }

        return updateOrganizationAlertsProfile_0Call(organizationId, alertConfigId, updateOrganizationAlertsProfileRequest, _callback);

    }

    /**
     * Update an organization-wide alert config
     * Update an organization-wide alert config
     * @param organizationId  (required)
     * @param alertConfigId  (required)
     * @param updateOrganizationAlertsProfileRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateOrganizationAlertsProfile_0(String organizationId, String alertConfigId, UpdateOrganizationAlertsProfileRequest updateOrganizationAlertsProfileRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateOrganizationAlertsProfile_0WithHttpInfo(organizationId, alertConfigId, updateOrganizationAlertsProfileRequest);
        return localVarResp.getData();
    }

    /**
     * Update an organization-wide alert config
     * Update an organization-wide alert config
     * @param organizationId  (required)
     * @param alertConfigId  (required)
     * @param updateOrganizationAlertsProfileRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateOrganizationAlertsProfile_0WithHttpInfo(String organizationId, String alertConfigId, UpdateOrganizationAlertsProfileRequest updateOrganizationAlertsProfileRequest) throws ApiException {
        okhttp3.Call localVarCall = updateOrganizationAlertsProfile_0ValidateBeforeCall(organizationId, alertConfigId, updateOrganizationAlertsProfileRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an organization-wide alert config (asynchronously)
     * Update an organization-wide alert config
     * @param organizationId  (required)
     * @param alertConfigId  (required)
     * @param updateOrganizationAlertsProfileRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationAlertsProfile_0Async(String organizationId, String alertConfigId, UpdateOrganizationAlertsProfileRequest updateOrganizationAlertsProfileRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrganizationAlertsProfile_0ValidateBeforeCall(organizationId, alertConfigId, updateOrganizationAlertsProfileRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrganizationApplianceSecurityIntrusion_0
     * @param organizationId  (required)
     * @param updateOrganizationApplianceSecurityIntrusionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationApplianceSecurityIntrusion_0Call(String organizationId, UpdateOrganizationApplianceSecurityIntrusionRequest updateOrganizationApplianceSecurityIntrusionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateOrganizationApplianceSecurityIntrusionRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/appliance/security/intrusion"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrganizationApplianceSecurityIntrusion_0ValidateBeforeCall(String organizationId, UpdateOrganizationApplianceSecurityIntrusionRequest updateOrganizationApplianceSecurityIntrusionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling updateOrganizationApplianceSecurityIntrusion_0(Async)");
        }

        // verify the required parameter 'updateOrganizationApplianceSecurityIntrusionRequest' is set
        if (updateOrganizationApplianceSecurityIntrusionRequest == null) {
            throw new ApiException("Missing the required parameter 'updateOrganizationApplianceSecurityIntrusionRequest' when calling updateOrganizationApplianceSecurityIntrusion_0(Async)");
        }

        return updateOrganizationApplianceSecurityIntrusion_0Call(organizationId, updateOrganizationApplianceSecurityIntrusionRequest, _callback);

    }

    /**
     * Sets supported intrusion settings for an organization
     * Sets supported intrusion settings for an organization
     * @param organizationId  (required)
     * @param updateOrganizationApplianceSecurityIntrusionRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateOrganizationApplianceSecurityIntrusion_0(String organizationId, UpdateOrganizationApplianceSecurityIntrusionRequest updateOrganizationApplianceSecurityIntrusionRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateOrganizationApplianceSecurityIntrusion_0WithHttpInfo(organizationId, updateOrganizationApplianceSecurityIntrusionRequest);
        return localVarResp.getData();
    }

    /**
     * Sets supported intrusion settings for an organization
     * Sets supported intrusion settings for an organization
     * @param organizationId  (required)
     * @param updateOrganizationApplianceSecurityIntrusionRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateOrganizationApplianceSecurityIntrusion_0WithHttpInfo(String organizationId, UpdateOrganizationApplianceSecurityIntrusionRequest updateOrganizationApplianceSecurityIntrusionRequest) throws ApiException {
        okhttp3.Call localVarCall = updateOrganizationApplianceSecurityIntrusion_0ValidateBeforeCall(organizationId, updateOrganizationApplianceSecurityIntrusionRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sets supported intrusion settings for an organization (asynchronously)
     * Sets supported intrusion settings for an organization
     * @param organizationId  (required)
     * @param updateOrganizationApplianceSecurityIntrusionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationApplianceSecurityIntrusion_0Async(String organizationId, UpdateOrganizationApplianceSecurityIntrusionRequest updateOrganizationApplianceSecurityIntrusionRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrganizationApplianceSecurityIntrusion_0ValidateBeforeCall(organizationId, updateOrganizationApplianceSecurityIntrusionRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrganizationApplianceVpnThirdPartyVPNPeers_0
     * @param organizationId  (required)
     * @param updateOrganizationApplianceVpnThirdPartyVPNPeersRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationApplianceVpnThirdPartyVPNPeers_0Call(String organizationId, UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequest updateOrganizationApplianceVpnThirdPartyVPNPeersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateOrganizationApplianceVpnThirdPartyVPNPeersRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/appliance/vpn/thirdPartyVPNPeers"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrganizationApplianceVpnThirdPartyVPNPeers_0ValidateBeforeCall(String organizationId, UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequest updateOrganizationApplianceVpnThirdPartyVPNPeersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling updateOrganizationApplianceVpnThirdPartyVPNPeers_0(Async)");
        }

        // verify the required parameter 'updateOrganizationApplianceVpnThirdPartyVPNPeersRequest' is set
        if (updateOrganizationApplianceVpnThirdPartyVPNPeersRequest == null) {
            throw new ApiException("Missing the required parameter 'updateOrganizationApplianceVpnThirdPartyVPNPeersRequest' when calling updateOrganizationApplianceVpnThirdPartyVPNPeers_0(Async)");
        }

        return updateOrganizationApplianceVpnThirdPartyVPNPeers_0Call(organizationId, updateOrganizationApplianceVpnThirdPartyVPNPeersRequest, _callback);

    }

    /**
     * Update the third party VPN peers for an organization
     * Update the third party VPN peers for an organization
     * @param organizationId  (required)
     * @param updateOrganizationApplianceVpnThirdPartyVPNPeersRequest  (required)
     * @return GetOrganizationApplianceVpnThirdPartyVPNPeers200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetOrganizationApplianceVpnThirdPartyVPNPeers200Response updateOrganizationApplianceVpnThirdPartyVPNPeers_0(String organizationId, UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequest updateOrganizationApplianceVpnThirdPartyVPNPeersRequest) throws ApiException {
        ApiResponse<GetOrganizationApplianceVpnThirdPartyVPNPeers200Response> localVarResp = updateOrganizationApplianceVpnThirdPartyVPNPeers_0WithHttpInfo(organizationId, updateOrganizationApplianceVpnThirdPartyVPNPeersRequest);
        return localVarResp.getData();
    }

    /**
     * Update the third party VPN peers for an organization
     * Update the third party VPN peers for an organization
     * @param organizationId  (required)
     * @param updateOrganizationApplianceVpnThirdPartyVPNPeersRequest  (required)
     * @return ApiResponse&lt;GetOrganizationApplianceVpnThirdPartyVPNPeers200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOrganizationApplianceVpnThirdPartyVPNPeers200Response> updateOrganizationApplianceVpnThirdPartyVPNPeers_0WithHttpInfo(String organizationId, UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequest updateOrganizationApplianceVpnThirdPartyVPNPeersRequest) throws ApiException {
        okhttp3.Call localVarCall = updateOrganizationApplianceVpnThirdPartyVPNPeers_0ValidateBeforeCall(organizationId, updateOrganizationApplianceVpnThirdPartyVPNPeersRequest, null);
        Type localVarReturnType = new TypeToken<GetOrganizationApplianceVpnThirdPartyVPNPeers200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the third party VPN peers for an organization (asynchronously)
     * Update the third party VPN peers for an organization
     * @param organizationId  (required)
     * @param updateOrganizationApplianceVpnThirdPartyVPNPeersRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationApplianceVpnThirdPartyVPNPeers_0Async(String organizationId, UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequest updateOrganizationApplianceVpnThirdPartyVPNPeersRequest, final ApiCallback<GetOrganizationApplianceVpnThirdPartyVPNPeers200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrganizationApplianceVpnThirdPartyVPNPeers_0ValidateBeforeCall(organizationId, updateOrganizationApplianceVpnThirdPartyVPNPeersRequest, _callback);
        Type localVarReturnType = new TypeToken<GetOrganizationApplianceVpnThirdPartyVPNPeers200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrganizationApplianceVpnVpnFirewallRules_0
     * @param organizationId  (required)
     * @param updateOrganizationApplianceVpnVpnFirewallRulesRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationApplianceVpnVpnFirewallRules_0Call(String organizationId, UpdateOrganizationApplianceVpnVpnFirewallRulesRequest updateOrganizationApplianceVpnVpnFirewallRulesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateOrganizationApplianceVpnVpnFirewallRulesRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/appliance/vpn/vpnFirewallRules"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrganizationApplianceVpnVpnFirewallRules_0ValidateBeforeCall(String organizationId, UpdateOrganizationApplianceVpnVpnFirewallRulesRequest updateOrganizationApplianceVpnVpnFirewallRulesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling updateOrganizationApplianceVpnVpnFirewallRules_0(Async)");
        }

        return updateOrganizationApplianceVpnVpnFirewallRules_0Call(organizationId, updateOrganizationApplianceVpnVpnFirewallRulesRequest, _callback);

    }

    /**
     * Update the firewall rules of an organization&#39;s site-to-site VPN
     * Update the firewall rules of an organization&#39;s site-to-site VPN
     * @param organizationId  (required)
     * @param updateOrganizationApplianceVpnVpnFirewallRulesRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateOrganizationApplianceVpnVpnFirewallRules_0(String organizationId, UpdateOrganizationApplianceVpnVpnFirewallRulesRequest updateOrganizationApplianceVpnVpnFirewallRulesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateOrganizationApplianceVpnVpnFirewallRules_0WithHttpInfo(organizationId, updateOrganizationApplianceVpnVpnFirewallRulesRequest);
        return localVarResp.getData();
    }

    /**
     * Update the firewall rules of an organization&#39;s site-to-site VPN
     * Update the firewall rules of an organization&#39;s site-to-site VPN
     * @param organizationId  (required)
     * @param updateOrganizationApplianceVpnVpnFirewallRulesRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateOrganizationApplianceVpnVpnFirewallRules_0WithHttpInfo(String organizationId, UpdateOrganizationApplianceVpnVpnFirewallRulesRequest updateOrganizationApplianceVpnVpnFirewallRulesRequest) throws ApiException {
        okhttp3.Call localVarCall = updateOrganizationApplianceVpnVpnFirewallRules_0ValidateBeforeCall(organizationId, updateOrganizationApplianceVpnVpnFirewallRulesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the firewall rules of an organization&#39;s site-to-site VPN (asynchronously)
     * Update the firewall rules of an organization&#39;s site-to-site VPN
     * @param organizationId  (required)
     * @param updateOrganizationApplianceVpnVpnFirewallRulesRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationApplianceVpnVpnFirewallRules_0Async(String organizationId, UpdateOrganizationApplianceVpnVpnFirewallRulesRequest updateOrganizationApplianceVpnVpnFirewallRulesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrganizationApplianceVpnVpnFirewallRules_0ValidateBeforeCall(organizationId, updateOrganizationApplianceVpnVpnFirewallRulesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrganizationBrandingPoliciesPriorities_0
     * @param organizationId  (required)
     * @param updateOrganizationBrandingPoliciesPrioritiesRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationBrandingPoliciesPriorities_0Call(String organizationId, UpdateOrganizationBrandingPoliciesPrioritiesRequest updateOrganizationBrandingPoliciesPrioritiesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateOrganizationBrandingPoliciesPrioritiesRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/brandingPolicies/priorities"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrganizationBrandingPoliciesPriorities_0ValidateBeforeCall(String organizationId, UpdateOrganizationBrandingPoliciesPrioritiesRequest updateOrganizationBrandingPoliciesPrioritiesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling updateOrganizationBrandingPoliciesPriorities_0(Async)");
        }

        return updateOrganizationBrandingPoliciesPriorities_0Call(organizationId, updateOrganizationBrandingPoliciesPrioritiesRequest, _callback);

    }

    /**
     * Update the priority ordering of an organization&#39;s branding policies.
     * Update the priority ordering of an organization&#39;s branding policies.
     * @param organizationId  (required)
     * @param updateOrganizationBrandingPoliciesPrioritiesRequest  (optional)
     * @return GetOrganizationBrandingPoliciesPriorities200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetOrganizationBrandingPoliciesPriorities200Response updateOrganizationBrandingPoliciesPriorities_0(String organizationId, UpdateOrganizationBrandingPoliciesPrioritiesRequest updateOrganizationBrandingPoliciesPrioritiesRequest) throws ApiException {
        ApiResponse<GetOrganizationBrandingPoliciesPriorities200Response> localVarResp = updateOrganizationBrandingPoliciesPriorities_0WithHttpInfo(organizationId, updateOrganizationBrandingPoliciesPrioritiesRequest);
        return localVarResp.getData();
    }

    /**
     * Update the priority ordering of an organization&#39;s branding policies.
     * Update the priority ordering of an organization&#39;s branding policies.
     * @param organizationId  (required)
     * @param updateOrganizationBrandingPoliciesPrioritiesRequest  (optional)
     * @return ApiResponse&lt;GetOrganizationBrandingPoliciesPriorities200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOrganizationBrandingPoliciesPriorities200Response> updateOrganizationBrandingPoliciesPriorities_0WithHttpInfo(String organizationId, UpdateOrganizationBrandingPoliciesPrioritiesRequest updateOrganizationBrandingPoliciesPrioritiesRequest) throws ApiException {
        okhttp3.Call localVarCall = updateOrganizationBrandingPoliciesPriorities_0ValidateBeforeCall(organizationId, updateOrganizationBrandingPoliciesPrioritiesRequest, null);
        Type localVarReturnType = new TypeToken<GetOrganizationBrandingPoliciesPriorities200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the priority ordering of an organization&#39;s branding policies. (asynchronously)
     * Update the priority ordering of an organization&#39;s branding policies.
     * @param organizationId  (required)
     * @param updateOrganizationBrandingPoliciesPrioritiesRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationBrandingPoliciesPriorities_0Async(String organizationId, UpdateOrganizationBrandingPoliciesPrioritiesRequest updateOrganizationBrandingPoliciesPrioritiesRequest, final ApiCallback<GetOrganizationBrandingPoliciesPriorities200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrganizationBrandingPoliciesPriorities_0ValidateBeforeCall(organizationId, updateOrganizationBrandingPoliciesPrioritiesRequest, _callback);
        Type localVarReturnType = new TypeToken<GetOrganizationBrandingPoliciesPriorities200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrganizationBrandingPolicy_0
     * @param organizationId  (required)
     * @param brandingPolicyId  (required)
     * @param updateOrganizationBrandingPolicyRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationBrandingPolicy_0Call(String organizationId, String brandingPolicyId, UpdateOrganizationBrandingPolicyRequest updateOrganizationBrandingPolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateOrganizationBrandingPolicyRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/brandingPolicies/{brandingPolicyId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "brandingPolicyId" + "}", localVarApiClient.escapeString(brandingPolicyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrganizationBrandingPolicy_0ValidateBeforeCall(String organizationId, String brandingPolicyId, UpdateOrganizationBrandingPolicyRequest updateOrganizationBrandingPolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling updateOrganizationBrandingPolicy_0(Async)");
        }

        // verify the required parameter 'brandingPolicyId' is set
        if (brandingPolicyId == null) {
            throw new ApiException("Missing the required parameter 'brandingPolicyId' when calling updateOrganizationBrandingPolicy_0(Async)");
        }

        return updateOrganizationBrandingPolicy_0Call(organizationId, brandingPolicyId, updateOrganizationBrandingPolicyRequest, _callback);

    }

    /**
     * Update a branding policy
     * Update a branding policy
     * @param organizationId  (required)
     * @param brandingPolicyId  (required)
     * @param updateOrganizationBrandingPolicyRequest  (optional)
     * @return GetOrganizationBrandingPolicies200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetOrganizationBrandingPolicies200ResponseInner updateOrganizationBrandingPolicy_0(String organizationId, String brandingPolicyId, UpdateOrganizationBrandingPolicyRequest updateOrganizationBrandingPolicyRequest) throws ApiException {
        ApiResponse<GetOrganizationBrandingPolicies200ResponseInner> localVarResp = updateOrganizationBrandingPolicy_0WithHttpInfo(organizationId, brandingPolicyId, updateOrganizationBrandingPolicyRequest);
        return localVarResp.getData();
    }

    /**
     * Update a branding policy
     * Update a branding policy
     * @param organizationId  (required)
     * @param brandingPolicyId  (required)
     * @param updateOrganizationBrandingPolicyRequest  (optional)
     * @return ApiResponse&lt;GetOrganizationBrandingPolicies200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOrganizationBrandingPolicies200ResponseInner> updateOrganizationBrandingPolicy_0WithHttpInfo(String organizationId, String brandingPolicyId, UpdateOrganizationBrandingPolicyRequest updateOrganizationBrandingPolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = updateOrganizationBrandingPolicy_0ValidateBeforeCall(organizationId, brandingPolicyId, updateOrganizationBrandingPolicyRequest, null);
        Type localVarReturnType = new TypeToken<GetOrganizationBrandingPolicies200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a branding policy (asynchronously)
     * Update a branding policy
     * @param organizationId  (required)
     * @param brandingPolicyId  (required)
     * @param updateOrganizationBrandingPolicyRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationBrandingPolicy_0Async(String organizationId, String brandingPolicyId, UpdateOrganizationBrandingPolicyRequest updateOrganizationBrandingPolicyRequest, final ApiCallback<GetOrganizationBrandingPolicies200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrganizationBrandingPolicy_0ValidateBeforeCall(organizationId, brandingPolicyId, updateOrganizationBrandingPolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<GetOrganizationBrandingPolicies200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrganizationCameraOnboardingStatuses_0
     * @param organizationId  (required)
     * @param updateOrganizationCameraOnboardingStatusesRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationCameraOnboardingStatuses_0Call(String organizationId, UpdateOrganizationCameraOnboardingStatusesRequest updateOrganizationCameraOnboardingStatusesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateOrganizationCameraOnboardingStatusesRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/camera/onboarding/statuses"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrganizationCameraOnboardingStatuses_0ValidateBeforeCall(String organizationId, UpdateOrganizationCameraOnboardingStatusesRequest updateOrganizationCameraOnboardingStatusesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling updateOrganizationCameraOnboardingStatuses_0(Async)");
        }

        return updateOrganizationCameraOnboardingStatuses_0Call(organizationId, updateOrganizationCameraOnboardingStatusesRequest, _callback);

    }

    /**
     * Notify that credential handoff to camera has completed
     * Notify that credential handoff to camera has completed
     * @param organizationId  (required)
     * @param updateOrganizationCameraOnboardingStatusesRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateOrganizationCameraOnboardingStatuses_0(String organizationId, UpdateOrganizationCameraOnboardingStatusesRequest updateOrganizationCameraOnboardingStatusesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateOrganizationCameraOnboardingStatuses_0WithHttpInfo(organizationId, updateOrganizationCameraOnboardingStatusesRequest);
        return localVarResp.getData();
    }

    /**
     * Notify that credential handoff to camera has completed
     * Notify that credential handoff to camera has completed
     * @param organizationId  (required)
     * @param updateOrganizationCameraOnboardingStatusesRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateOrganizationCameraOnboardingStatuses_0WithHttpInfo(String organizationId, UpdateOrganizationCameraOnboardingStatusesRequest updateOrganizationCameraOnboardingStatusesRequest) throws ApiException {
        okhttp3.Call localVarCall = updateOrganizationCameraOnboardingStatuses_0ValidateBeforeCall(organizationId, updateOrganizationCameraOnboardingStatusesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Notify that credential handoff to camera has completed (asynchronously)
     * Notify that credential handoff to camera has completed
     * @param organizationId  (required)
     * @param updateOrganizationCameraOnboardingStatusesRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationCameraOnboardingStatuses_0Async(String organizationId, UpdateOrganizationCameraOnboardingStatusesRequest updateOrganizationCameraOnboardingStatusesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrganizationCameraOnboardingStatuses_0ValidateBeforeCall(organizationId, updateOrganizationCameraOnboardingStatusesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrganizationConfigTemplateSwitchProfilePort_0
     * @param organizationId  (required)
     * @param configTemplateId  (required)
     * @param profileId  (required)
     * @param portId  (required)
     * @param updateOrganizationConfigTemplateSwitchProfilePortRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationConfigTemplateSwitchProfilePort_0Call(String organizationId, String configTemplateId, String profileId, String portId, UpdateOrganizationConfigTemplateSwitchProfilePortRequest updateOrganizationConfigTemplateSwitchProfilePortRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateOrganizationConfigTemplateSwitchProfilePortRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/configTemplates/{configTemplateId}/switch/profiles/{profileId}/ports/{portId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "configTemplateId" + "}", localVarApiClient.escapeString(configTemplateId.toString()))
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()))
            .replace("{" + "portId" + "}", localVarApiClient.escapeString(portId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrganizationConfigTemplateSwitchProfilePort_0ValidateBeforeCall(String organizationId, String configTemplateId, String profileId, String portId, UpdateOrganizationConfigTemplateSwitchProfilePortRequest updateOrganizationConfigTemplateSwitchProfilePortRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling updateOrganizationConfigTemplateSwitchProfilePort_0(Async)");
        }

        // verify the required parameter 'configTemplateId' is set
        if (configTemplateId == null) {
            throw new ApiException("Missing the required parameter 'configTemplateId' when calling updateOrganizationConfigTemplateSwitchProfilePort_0(Async)");
        }

        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling updateOrganizationConfigTemplateSwitchProfilePort_0(Async)");
        }

        // verify the required parameter 'portId' is set
        if (portId == null) {
            throw new ApiException("Missing the required parameter 'portId' when calling updateOrganizationConfigTemplateSwitchProfilePort_0(Async)");
        }

        return updateOrganizationConfigTemplateSwitchProfilePort_0Call(organizationId, configTemplateId, profileId, portId, updateOrganizationConfigTemplateSwitchProfilePortRequest, _callback);

    }

    /**
     * Update a switch profile port
     * Update a switch profile port
     * @param organizationId  (required)
     * @param configTemplateId  (required)
     * @param profileId  (required)
     * @param portId  (required)
     * @param updateOrganizationConfigTemplateSwitchProfilePortRequest  (optional)
     * @return GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner updateOrganizationConfigTemplateSwitchProfilePort_0(String organizationId, String configTemplateId, String profileId, String portId, UpdateOrganizationConfigTemplateSwitchProfilePortRequest updateOrganizationConfigTemplateSwitchProfilePortRequest) throws ApiException {
        ApiResponse<GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner> localVarResp = updateOrganizationConfigTemplateSwitchProfilePort_0WithHttpInfo(organizationId, configTemplateId, profileId, portId, updateOrganizationConfigTemplateSwitchProfilePortRequest);
        return localVarResp.getData();
    }

    /**
     * Update a switch profile port
     * Update a switch profile port
     * @param organizationId  (required)
     * @param configTemplateId  (required)
     * @param profileId  (required)
     * @param portId  (required)
     * @param updateOrganizationConfigTemplateSwitchProfilePortRequest  (optional)
     * @return ApiResponse&lt;GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner> updateOrganizationConfigTemplateSwitchProfilePort_0WithHttpInfo(String organizationId, String configTemplateId, String profileId, String portId, UpdateOrganizationConfigTemplateSwitchProfilePortRequest updateOrganizationConfigTemplateSwitchProfilePortRequest) throws ApiException {
        okhttp3.Call localVarCall = updateOrganizationConfigTemplateSwitchProfilePort_0ValidateBeforeCall(organizationId, configTemplateId, profileId, portId, updateOrganizationConfigTemplateSwitchProfilePortRequest, null);
        Type localVarReturnType = new TypeToken<GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a switch profile port (asynchronously)
     * Update a switch profile port
     * @param organizationId  (required)
     * @param configTemplateId  (required)
     * @param profileId  (required)
     * @param portId  (required)
     * @param updateOrganizationConfigTemplateSwitchProfilePortRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationConfigTemplateSwitchProfilePort_0Async(String organizationId, String configTemplateId, String profileId, String portId, UpdateOrganizationConfigTemplateSwitchProfilePortRequest updateOrganizationConfigTemplateSwitchProfilePortRequest, final ApiCallback<GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrganizationConfigTemplateSwitchProfilePort_0ValidateBeforeCall(organizationId, configTemplateId, profileId, portId, updateOrganizationConfigTemplateSwitchProfilePortRequest, _callback);
        Type localVarReturnType = new TypeToken<GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrganizationConfigTemplate_0
     * @param organizationId  (required)
     * @param configTemplateId  (required)
     * @param updateOrganizationConfigTemplateRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationConfigTemplate_0Call(String organizationId, String configTemplateId, UpdateOrganizationConfigTemplateRequest updateOrganizationConfigTemplateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateOrganizationConfigTemplateRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/configTemplates/{configTemplateId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "configTemplateId" + "}", localVarApiClient.escapeString(configTemplateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrganizationConfigTemplate_0ValidateBeforeCall(String organizationId, String configTemplateId, UpdateOrganizationConfigTemplateRequest updateOrganizationConfigTemplateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling updateOrganizationConfigTemplate_0(Async)");
        }

        // verify the required parameter 'configTemplateId' is set
        if (configTemplateId == null) {
            throw new ApiException("Missing the required parameter 'configTemplateId' when calling updateOrganizationConfigTemplate_0(Async)");
        }

        return updateOrganizationConfigTemplate_0Call(organizationId, configTemplateId, updateOrganizationConfigTemplateRequest, _callback);

    }

    /**
     * Update a configuration template
     * Update a configuration template
     * @param organizationId  (required)
     * @param configTemplateId  (required)
     * @param updateOrganizationConfigTemplateRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateOrganizationConfigTemplate_0(String organizationId, String configTemplateId, UpdateOrganizationConfigTemplateRequest updateOrganizationConfigTemplateRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateOrganizationConfigTemplate_0WithHttpInfo(organizationId, configTemplateId, updateOrganizationConfigTemplateRequest);
        return localVarResp.getData();
    }

    /**
     * Update a configuration template
     * Update a configuration template
     * @param organizationId  (required)
     * @param configTemplateId  (required)
     * @param updateOrganizationConfigTemplateRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateOrganizationConfigTemplate_0WithHttpInfo(String organizationId, String configTemplateId, UpdateOrganizationConfigTemplateRequest updateOrganizationConfigTemplateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateOrganizationConfigTemplate_0ValidateBeforeCall(organizationId, configTemplateId, updateOrganizationConfigTemplateRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a configuration template (asynchronously)
     * Update a configuration template
     * @param organizationId  (required)
     * @param configTemplateId  (required)
     * @param updateOrganizationConfigTemplateRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationConfigTemplate_0Async(String organizationId, String configTemplateId, UpdateOrganizationConfigTemplateRequest updateOrganizationConfigTemplateRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrganizationConfigTemplate_0ValidateBeforeCall(organizationId, configTemplateId, updateOrganizationConfigTemplateRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrganizationEarlyAccessFeaturesOptIn_0
     * @param organizationId  (required)
     * @param optInId  (required)
     * @param updateOrganizationEarlyAccessFeaturesOptInRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationEarlyAccessFeaturesOptIn_0Call(String organizationId, String optInId, UpdateOrganizationEarlyAccessFeaturesOptInRequest updateOrganizationEarlyAccessFeaturesOptInRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateOrganizationEarlyAccessFeaturesOptInRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/earlyAccess/features/optIns/{optInId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "optInId" + "}", localVarApiClient.escapeString(optInId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrganizationEarlyAccessFeaturesOptIn_0ValidateBeforeCall(String organizationId, String optInId, UpdateOrganizationEarlyAccessFeaturesOptInRequest updateOrganizationEarlyAccessFeaturesOptInRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling updateOrganizationEarlyAccessFeaturesOptIn_0(Async)");
        }

        // verify the required parameter 'optInId' is set
        if (optInId == null) {
            throw new ApiException("Missing the required parameter 'optInId' when calling updateOrganizationEarlyAccessFeaturesOptIn_0(Async)");
        }

        return updateOrganizationEarlyAccessFeaturesOptIn_0Call(organizationId, optInId, updateOrganizationEarlyAccessFeaturesOptInRequest, _callback);

    }

    /**
     * Update an early access feature opt-in for an organization
     * Update an early access feature opt-in for an organization
     * @param organizationId  (required)
     * @param optInId  (required)
     * @param updateOrganizationEarlyAccessFeaturesOptInRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateOrganizationEarlyAccessFeaturesOptIn_0(String organizationId, String optInId, UpdateOrganizationEarlyAccessFeaturesOptInRequest updateOrganizationEarlyAccessFeaturesOptInRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateOrganizationEarlyAccessFeaturesOptIn_0WithHttpInfo(organizationId, optInId, updateOrganizationEarlyAccessFeaturesOptInRequest);
        return localVarResp.getData();
    }

    /**
     * Update an early access feature opt-in for an organization
     * Update an early access feature opt-in for an organization
     * @param organizationId  (required)
     * @param optInId  (required)
     * @param updateOrganizationEarlyAccessFeaturesOptInRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateOrganizationEarlyAccessFeaturesOptIn_0WithHttpInfo(String organizationId, String optInId, UpdateOrganizationEarlyAccessFeaturesOptInRequest updateOrganizationEarlyAccessFeaturesOptInRequest) throws ApiException {
        okhttp3.Call localVarCall = updateOrganizationEarlyAccessFeaturesOptIn_0ValidateBeforeCall(organizationId, optInId, updateOrganizationEarlyAccessFeaturesOptInRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an early access feature opt-in for an organization (asynchronously)
     * Update an early access feature opt-in for an organization
     * @param organizationId  (required)
     * @param optInId  (required)
     * @param updateOrganizationEarlyAccessFeaturesOptInRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationEarlyAccessFeaturesOptIn_0Async(String organizationId, String optInId, UpdateOrganizationEarlyAccessFeaturesOptInRequest updateOrganizationEarlyAccessFeaturesOptInRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrganizationEarlyAccessFeaturesOptIn_0ValidateBeforeCall(organizationId, optInId, updateOrganizationEarlyAccessFeaturesOptInRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrganizationInsightMonitoredMediaServer_0
     * @param organizationId  (required)
     * @param monitoredMediaServerId  (required)
     * @param updateOrganizationInsightMonitoredMediaServerRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationInsightMonitoredMediaServer_0Call(String organizationId, String monitoredMediaServerId, UpdateOrganizationInsightMonitoredMediaServerRequest updateOrganizationInsightMonitoredMediaServerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateOrganizationInsightMonitoredMediaServerRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/insight/monitoredMediaServers/{monitoredMediaServerId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "monitoredMediaServerId" + "}", localVarApiClient.escapeString(monitoredMediaServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrganizationInsightMonitoredMediaServer_0ValidateBeforeCall(String organizationId, String monitoredMediaServerId, UpdateOrganizationInsightMonitoredMediaServerRequest updateOrganizationInsightMonitoredMediaServerRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling updateOrganizationInsightMonitoredMediaServer_0(Async)");
        }

        // verify the required parameter 'monitoredMediaServerId' is set
        if (monitoredMediaServerId == null) {
            throw new ApiException("Missing the required parameter 'monitoredMediaServerId' when calling updateOrganizationInsightMonitoredMediaServer_0(Async)");
        }

        return updateOrganizationInsightMonitoredMediaServer_0Call(organizationId, monitoredMediaServerId, updateOrganizationInsightMonitoredMediaServerRequest, _callback);

    }

    /**
     * Update a monitored media server for this organization
     * Update a monitored media server for this organization. Only valid for organizations with Meraki Insight.
     * @param organizationId  (required)
     * @param monitoredMediaServerId  (required)
     * @param updateOrganizationInsightMonitoredMediaServerRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateOrganizationInsightMonitoredMediaServer_0(String organizationId, String monitoredMediaServerId, UpdateOrganizationInsightMonitoredMediaServerRequest updateOrganizationInsightMonitoredMediaServerRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateOrganizationInsightMonitoredMediaServer_0WithHttpInfo(organizationId, monitoredMediaServerId, updateOrganizationInsightMonitoredMediaServerRequest);
        return localVarResp.getData();
    }

    /**
     * Update a monitored media server for this organization
     * Update a monitored media server for this organization. Only valid for organizations with Meraki Insight.
     * @param organizationId  (required)
     * @param monitoredMediaServerId  (required)
     * @param updateOrganizationInsightMonitoredMediaServerRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateOrganizationInsightMonitoredMediaServer_0WithHttpInfo(String organizationId, String monitoredMediaServerId, UpdateOrganizationInsightMonitoredMediaServerRequest updateOrganizationInsightMonitoredMediaServerRequest) throws ApiException {
        okhttp3.Call localVarCall = updateOrganizationInsightMonitoredMediaServer_0ValidateBeforeCall(organizationId, monitoredMediaServerId, updateOrganizationInsightMonitoredMediaServerRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a monitored media server for this organization (asynchronously)
     * Update a monitored media server for this organization. Only valid for organizations with Meraki Insight.
     * @param organizationId  (required)
     * @param monitoredMediaServerId  (required)
     * @param updateOrganizationInsightMonitoredMediaServerRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationInsightMonitoredMediaServer_0Async(String organizationId, String monitoredMediaServerId, UpdateOrganizationInsightMonitoredMediaServerRequest updateOrganizationInsightMonitoredMediaServerRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrganizationInsightMonitoredMediaServer_0ValidateBeforeCall(organizationId, monitoredMediaServerId, updateOrganizationInsightMonitoredMediaServerRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrganizationLicense_0
     * @param organizationId  (required)
     * @param licenseId  (required)
     * @param updateOrganizationLicenseRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationLicense_0Call(String organizationId, String licenseId, UpdateOrganizationLicenseRequest updateOrganizationLicenseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateOrganizationLicenseRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/licenses/{licenseId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "licenseId" + "}", localVarApiClient.escapeString(licenseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrganizationLicense_0ValidateBeforeCall(String organizationId, String licenseId, UpdateOrganizationLicenseRequest updateOrganizationLicenseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling updateOrganizationLicense_0(Async)");
        }

        // verify the required parameter 'licenseId' is set
        if (licenseId == null) {
            throw new ApiException("Missing the required parameter 'licenseId' when calling updateOrganizationLicense_0(Async)");
        }

        return updateOrganizationLicense_0Call(organizationId, licenseId, updateOrganizationLicenseRequest, _callback);

    }

    /**
     * Update a license
     * Update a license
     * @param organizationId  (required)
     * @param licenseId  (required)
     * @param updateOrganizationLicenseRequest  (optional)
     * @return GetOrganizationLicenses200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetOrganizationLicenses200ResponseInner updateOrganizationLicense_0(String organizationId, String licenseId, UpdateOrganizationLicenseRequest updateOrganizationLicenseRequest) throws ApiException {
        ApiResponse<GetOrganizationLicenses200ResponseInner> localVarResp = updateOrganizationLicense_0WithHttpInfo(organizationId, licenseId, updateOrganizationLicenseRequest);
        return localVarResp.getData();
    }

    /**
     * Update a license
     * Update a license
     * @param organizationId  (required)
     * @param licenseId  (required)
     * @param updateOrganizationLicenseRequest  (optional)
     * @return ApiResponse&lt;GetOrganizationLicenses200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOrganizationLicenses200ResponseInner> updateOrganizationLicense_0WithHttpInfo(String organizationId, String licenseId, UpdateOrganizationLicenseRequest updateOrganizationLicenseRequest) throws ApiException {
        okhttp3.Call localVarCall = updateOrganizationLicense_0ValidateBeforeCall(organizationId, licenseId, updateOrganizationLicenseRequest, null);
        Type localVarReturnType = new TypeToken<GetOrganizationLicenses200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a license (asynchronously)
     * Update a license
     * @param organizationId  (required)
     * @param licenseId  (required)
     * @param updateOrganizationLicenseRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationLicense_0Async(String organizationId, String licenseId, UpdateOrganizationLicenseRequest updateOrganizationLicenseRequest, final ApiCallback<GetOrganizationLicenses200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrganizationLicense_0ValidateBeforeCall(organizationId, licenseId, updateOrganizationLicenseRequest, _callback);
        Type localVarReturnType = new TypeToken<GetOrganizationLicenses200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrganizationLoginSecurity_0
     * @param organizationId  (required)
     * @param updateOrganizationLoginSecurityRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationLoginSecurity_0Call(String organizationId, UpdateOrganizationLoginSecurityRequest updateOrganizationLoginSecurityRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateOrganizationLoginSecurityRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/loginSecurity"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrganizationLoginSecurity_0ValidateBeforeCall(String organizationId, UpdateOrganizationLoginSecurityRequest updateOrganizationLoginSecurityRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling updateOrganizationLoginSecurity_0(Async)");
        }

        return updateOrganizationLoginSecurity_0Call(organizationId, updateOrganizationLoginSecurityRequest, _callback);

    }

    /**
     * Update the login security settings for an organization
     * Update the login security settings for an organization
     * @param organizationId  (required)
     * @param updateOrganizationLoginSecurityRequest  (optional)
     * @return GetOrganizationLoginSecurity200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetOrganizationLoginSecurity200Response updateOrganizationLoginSecurity_0(String organizationId, UpdateOrganizationLoginSecurityRequest updateOrganizationLoginSecurityRequest) throws ApiException {
        ApiResponse<GetOrganizationLoginSecurity200Response> localVarResp = updateOrganizationLoginSecurity_0WithHttpInfo(organizationId, updateOrganizationLoginSecurityRequest);
        return localVarResp.getData();
    }

    /**
     * Update the login security settings for an organization
     * Update the login security settings for an organization
     * @param organizationId  (required)
     * @param updateOrganizationLoginSecurityRequest  (optional)
     * @return ApiResponse&lt;GetOrganizationLoginSecurity200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOrganizationLoginSecurity200Response> updateOrganizationLoginSecurity_0WithHttpInfo(String organizationId, UpdateOrganizationLoginSecurityRequest updateOrganizationLoginSecurityRequest) throws ApiException {
        okhttp3.Call localVarCall = updateOrganizationLoginSecurity_0ValidateBeforeCall(organizationId, updateOrganizationLoginSecurityRequest, null);
        Type localVarReturnType = new TypeToken<GetOrganizationLoginSecurity200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the login security settings for an organization (asynchronously)
     * Update the login security settings for an organization
     * @param organizationId  (required)
     * @param updateOrganizationLoginSecurityRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationLoginSecurity_0Async(String organizationId, UpdateOrganizationLoginSecurityRequest updateOrganizationLoginSecurityRequest, final ApiCallback<GetOrganizationLoginSecurity200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrganizationLoginSecurity_0ValidateBeforeCall(organizationId, updateOrganizationLoginSecurityRequest, _callback);
        Type localVarReturnType = new TypeToken<GetOrganizationLoginSecurity200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrganizationPolicyObject_0
     * @param organizationId  (required)
     * @param policyObjectId  (required)
     * @param updateOrganizationPolicyObjectRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationPolicyObject_0Call(String organizationId, String policyObjectId, UpdateOrganizationPolicyObjectRequest updateOrganizationPolicyObjectRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateOrganizationPolicyObjectRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/policyObjects/{policyObjectId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "policyObjectId" + "}", localVarApiClient.escapeString(policyObjectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrganizationPolicyObject_0ValidateBeforeCall(String organizationId, String policyObjectId, UpdateOrganizationPolicyObjectRequest updateOrganizationPolicyObjectRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling updateOrganizationPolicyObject_0(Async)");
        }

        // verify the required parameter 'policyObjectId' is set
        if (policyObjectId == null) {
            throw new ApiException("Missing the required parameter 'policyObjectId' when calling updateOrganizationPolicyObject_0(Async)");
        }

        return updateOrganizationPolicyObject_0Call(organizationId, policyObjectId, updateOrganizationPolicyObjectRequest, _callback);

    }

    /**
     * Updates a Policy Object.
     * Updates a Policy Object.
     * @param organizationId  (required)
     * @param policyObjectId  (required)
     * @param updateOrganizationPolicyObjectRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateOrganizationPolicyObject_0(String organizationId, String policyObjectId, UpdateOrganizationPolicyObjectRequest updateOrganizationPolicyObjectRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateOrganizationPolicyObject_0WithHttpInfo(organizationId, policyObjectId, updateOrganizationPolicyObjectRequest);
        return localVarResp.getData();
    }

    /**
     * Updates a Policy Object.
     * Updates a Policy Object.
     * @param organizationId  (required)
     * @param policyObjectId  (required)
     * @param updateOrganizationPolicyObjectRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateOrganizationPolicyObject_0WithHttpInfo(String organizationId, String policyObjectId, UpdateOrganizationPolicyObjectRequest updateOrganizationPolicyObjectRequest) throws ApiException {
        okhttp3.Call localVarCall = updateOrganizationPolicyObject_0ValidateBeforeCall(organizationId, policyObjectId, updateOrganizationPolicyObjectRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a Policy Object. (asynchronously)
     * Updates a Policy Object.
     * @param organizationId  (required)
     * @param policyObjectId  (required)
     * @param updateOrganizationPolicyObjectRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationPolicyObject_0Async(String organizationId, String policyObjectId, UpdateOrganizationPolicyObjectRequest updateOrganizationPolicyObjectRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrganizationPolicyObject_0ValidateBeforeCall(organizationId, policyObjectId, updateOrganizationPolicyObjectRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrganizationPolicyObjectsGroup_0
     * @param organizationId  (required)
     * @param policyObjectGroupId  (required)
     * @param updateOrganizationPolicyObjectsGroupRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationPolicyObjectsGroup_0Call(String organizationId, String policyObjectGroupId, UpdateOrganizationPolicyObjectsGroupRequest updateOrganizationPolicyObjectsGroupRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateOrganizationPolicyObjectsGroupRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/policyObjects/groups/{policyObjectGroupId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "policyObjectGroupId" + "}", localVarApiClient.escapeString(policyObjectGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrganizationPolicyObjectsGroup_0ValidateBeforeCall(String organizationId, String policyObjectGroupId, UpdateOrganizationPolicyObjectsGroupRequest updateOrganizationPolicyObjectsGroupRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling updateOrganizationPolicyObjectsGroup_0(Async)");
        }

        // verify the required parameter 'policyObjectGroupId' is set
        if (policyObjectGroupId == null) {
            throw new ApiException("Missing the required parameter 'policyObjectGroupId' when calling updateOrganizationPolicyObjectsGroup_0(Async)");
        }

        return updateOrganizationPolicyObjectsGroup_0Call(organizationId, policyObjectGroupId, updateOrganizationPolicyObjectsGroupRequest, _callback);

    }

    /**
     * Updates a Policy Object Group.
     * Updates a Policy Object Group.
     * @param organizationId  (required)
     * @param policyObjectGroupId  (required)
     * @param updateOrganizationPolicyObjectsGroupRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateOrganizationPolicyObjectsGroup_0(String organizationId, String policyObjectGroupId, UpdateOrganizationPolicyObjectsGroupRequest updateOrganizationPolicyObjectsGroupRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateOrganizationPolicyObjectsGroup_0WithHttpInfo(organizationId, policyObjectGroupId, updateOrganizationPolicyObjectsGroupRequest);
        return localVarResp.getData();
    }

    /**
     * Updates a Policy Object Group.
     * Updates a Policy Object Group.
     * @param organizationId  (required)
     * @param policyObjectGroupId  (required)
     * @param updateOrganizationPolicyObjectsGroupRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateOrganizationPolicyObjectsGroup_0WithHttpInfo(String organizationId, String policyObjectGroupId, UpdateOrganizationPolicyObjectsGroupRequest updateOrganizationPolicyObjectsGroupRequest) throws ApiException {
        okhttp3.Call localVarCall = updateOrganizationPolicyObjectsGroup_0ValidateBeforeCall(organizationId, policyObjectGroupId, updateOrganizationPolicyObjectsGroupRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a Policy Object Group. (asynchronously)
     * Updates a Policy Object Group.
     * @param organizationId  (required)
     * @param policyObjectGroupId  (required)
     * @param updateOrganizationPolicyObjectsGroupRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationPolicyObjectsGroup_0Async(String organizationId, String policyObjectGroupId, UpdateOrganizationPolicyObjectsGroupRequest updateOrganizationPolicyObjectsGroupRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrganizationPolicyObjectsGroup_0ValidateBeforeCall(organizationId, policyObjectGroupId, updateOrganizationPolicyObjectsGroupRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrganizationSamlIdp_0
     * @param organizationId  (required)
     * @param idpId  (required)
     * @param updateOrganizationSamlIdpRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationSamlIdp_0Call(String organizationId, String idpId, UpdateOrganizationSamlIdpRequest updateOrganizationSamlIdpRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateOrganizationSamlIdpRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/saml/idps/{idpId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "idpId" + "}", localVarApiClient.escapeString(idpId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrganizationSamlIdp_0ValidateBeforeCall(String organizationId, String idpId, UpdateOrganizationSamlIdpRequest updateOrganizationSamlIdpRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling updateOrganizationSamlIdp_0(Async)");
        }

        // verify the required parameter 'idpId' is set
        if (idpId == null) {
            throw new ApiException("Missing the required parameter 'idpId' when calling updateOrganizationSamlIdp_0(Async)");
        }

        return updateOrganizationSamlIdp_0Call(organizationId, idpId, updateOrganizationSamlIdpRequest, _callback);

    }

    /**
     * Update a SAML IdP in your organization
     * Update a SAML IdP in your organization
     * @param organizationId  (required)
     * @param idpId  (required)
     * @param updateOrganizationSamlIdpRequest  (optional)
     * @return List&lt;GetOrganizationSamlIdps200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<GetOrganizationSamlIdps200ResponseInner> updateOrganizationSamlIdp_0(String organizationId, String idpId, UpdateOrganizationSamlIdpRequest updateOrganizationSamlIdpRequest) throws ApiException {
        ApiResponse<List<GetOrganizationSamlIdps200ResponseInner>> localVarResp = updateOrganizationSamlIdp_0WithHttpInfo(organizationId, idpId, updateOrganizationSamlIdpRequest);
        return localVarResp.getData();
    }

    /**
     * Update a SAML IdP in your organization
     * Update a SAML IdP in your organization
     * @param organizationId  (required)
     * @param idpId  (required)
     * @param updateOrganizationSamlIdpRequest  (optional)
     * @return ApiResponse&lt;List&lt;GetOrganizationSamlIdps200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetOrganizationSamlIdps200ResponseInner>> updateOrganizationSamlIdp_0WithHttpInfo(String organizationId, String idpId, UpdateOrganizationSamlIdpRequest updateOrganizationSamlIdpRequest) throws ApiException {
        okhttp3.Call localVarCall = updateOrganizationSamlIdp_0ValidateBeforeCall(organizationId, idpId, updateOrganizationSamlIdpRequest, null);
        Type localVarReturnType = new TypeToken<List<GetOrganizationSamlIdps200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a SAML IdP in your organization (asynchronously)
     * Update a SAML IdP in your organization
     * @param organizationId  (required)
     * @param idpId  (required)
     * @param updateOrganizationSamlIdpRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationSamlIdp_0Async(String organizationId, String idpId, UpdateOrganizationSamlIdpRequest updateOrganizationSamlIdpRequest, final ApiCallback<List<GetOrganizationSamlIdps200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrganizationSamlIdp_0ValidateBeforeCall(organizationId, idpId, updateOrganizationSamlIdpRequest, _callback);
        Type localVarReturnType = new TypeToken<List<GetOrganizationSamlIdps200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrganizationSamlRole_0
     * @param organizationId  (required)
     * @param samlRoleId  (required)
     * @param updateOrganizationSamlRoleRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationSamlRole_0Call(String organizationId, String samlRoleId, UpdateOrganizationSamlRoleRequest updateOrganizationSamlRoleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateOrganizationSamlRoleRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/samlRoles/{samlRoleId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "samlRoleId" + "}", localVarApiClient.escapeString(samlRoleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrganizationSamlRole_0ValidateBeforeCall(String organizationId, String samlRoleId, UpdateOrganizationSamlRoleRequest updateOrganizationSamlRoleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling updateOrganizationSamlRole_0(Async)");
        }

        // verify the required parameter 'samlRoleId' is set
        if (samlRoleId == null) {
            throw new ApiException("Missing the required parameter 'samlRoleId' when calling updateOrganizationSamlRole_0(Async)");
        }

        return updateOrganizationSamlRole_0Call(organizationId, samlRoleId, updateOrganizationSamlRoleRequest, _callback);

    }

    /**
     * Update a SAML role
     * Update a SAML role
     * @param organizationId  (required)
     * @param samlRoleId  (required)
     * @param updateOrganizationSamlRoleRequest  (optional)
     * @return UpdateOrganizationSamlRole200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public UpdateOrganizationSamlRole200Response updateOrganizationSamlRole_0(String organizationId, String samlRoleId, UpdateOrganizationSamlRoleRequest updateOrganizationSamlRoleRequest) throws ApiException {
        ApiResponse<UpdateOrganizationSamlRole200Response> localVarResp = updateOrganizationSamlRole_0WithHttpInfo(organizationId, samlRoleId, updateOrganizationSamlRoleRequest);
        return localVarResp.getData();
    }

    /**
     * Update a SAML role
     * Update a SAML role
     * @param organizationId  (required)
     * @param samlRoleId  (required)
     * @param updateOrganizationSamlRoleRequest  (optional)
     * @return ApiResponse&lt;UpdateOrganizationSamlRole200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateOrganizationSamlRole200Response> updateOrganizationSamlRole_0WithHttpInfo(String organizationId, String samlRoleId, UpdateOrganizationSamlRoleRequest updateOrganizationSamlRoleRequest) throws ApiException {
        okhttp3.Call localVarCall = updateOrganizationSamlRole_0ValidateBeforeCall(organizationId, samlRoleId, updateOrganizationSamlRoleRequest, null);
        Type localVarReturnType = new TypeToken<UpdateOrganizationSamlRole200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a SAML role (asynchronously)
     * Update a SAML role
     * @param organizationId  (required)
     * @param samlRoleId  (required)
     * @param updateOrganizationSamlRoleRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationSamlRole_0Async(String organizationId, String samlRoleId, UpdateOrganizationSamlRoleRequest updateOrganizationSamlRoleRequest, final ApiCallback<UpdateOrganizationSamlRole200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrganizationSamlRole_0ValidateBeforeCall(organizationId, samlRoleId, updateOrganizationSamlRoleRequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateOrganizationSamlRole200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrganizationSaml_0
     * @param organizationId  (required)
     * @param updateOrganizationSamlRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationSaml_0Call(String organizationId, UpdateOrganizationSamlRequest updateOrganizationSamlRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateOrganizationSamlRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/saml"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrganizationSaml_0ValidateBeforeCall(String organizationId, UpdateOrganizationSamlRequest updateOrganizationSamlRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling updateOrganizationSaml_0(Async)");
        }

        return updateOrganizationSaml_0Call(organizationId, updateOrganizationSamlRequest, _callback);

    }

    /**
     * Updates the SAML SSO enabled settings for an organization.
     * Updates the SAML SSO enabled settings for an organization.
     * @param organizationId  (required)
     * @param updateOrganizationSamlRequest  (optional)
     * @return GetOrganizationSaml200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetOrganizationSaml200Response updateOrganizationSaml_0(String organizationId, UpdateOrganizationSamlRequest updateOrganizationSamlRequest) throws ApiException {
        ApiResponse<GetOrganizationSaml200Response> localVarResp = updateOrganizationSaml_0WithHttpInfo(organizationId, updateOrganizationSamlRequest);
        return localVarResp.getData();
    }

    /**
     * Updates the SAML SSO enabled settings for an organization.
     * Updates the SAML SSO enabled settings for an organization.
     * @param organizationId  (required)
     * @param updateOrganizationSamlRequest  (optional)
     * @return ApiResponse&lt;GetOrganizationSaml200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOrganizationSaml200Response> updateOrganizationSaml_0WithHttpInfo(String organizationId, UpdateOrganizationSamlRequest updateOrganizationSamlRequest) throws ApiException {
        okhttp3.Call localVarCall = updateOrganizationSaml_0ValidateBeforeCall(organizationId, updateOrganizationSamlRequest, null);
        Type localVarReturnType = new TypeToken<GetOrganizationSaml200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the SAML SSO enabled settings for an organization. (asynchronously)
     * Updates the SAML SSO enabled settings for an organization.
     * @param organizationId  (required)
     * @param updateOrganizationSamlRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationSaml_0Async(String organizationId, UpdateOrganizationSamlRequest updateOrganizationSamlRequest, final ApiCallback<GetOrganizationSaml200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrganizationSaml_0ValidateBeforeCall(organizationId, updateOrganizationSamlRequest, _callback);
        Type localVarReturnType = new TypeToken<GetOrganizationSaml200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrganizationSnmp_0
     * @param organizationId  (required)
     * @param updateOrganizationSnmpRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationSnmp_0Call(String organizationId, UpdateOrganizationSnmpRequest updateOrganizationSnmpRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateOrganizationSnmpRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/snmp"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrganizationSnmp_0ValidateBeforeCall(String organizationId, UpdateOrganizationSnmpRequest updateOrganizationSnmpRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling updateOrganizationSnmp_0(Async)");
        }

        return updateOrganizationSnmp_0Call(organizationId, updateOrganizationSnmpRequest, _callback);

    }

    /**
     * Update the SNMP settings for an organization
     * Update the SNMP settings for an organization
     * @param organizationId  (required)
     * @param updateOrganizationSnmpRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object updateOrganizationSnmp_0(String organizationId, UpdateOrganizationSnmpRequest updateOrganizationSnmpRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateOrganizationSnmp_0WithHttpInfo(organizationId, updateOrganizationSnmpRequest);
        return localVarResp.getData();
    }

    /**
     * Update the SNMP settings for an organization
     * Update the SNMP settings for an organization
     * @param organizationId  (required)
     * @param updateOrganizationSnmpRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateOrganizationSnmp_0WithHttpInfo(String organizationId, UpdateOrganizationSnmpRequest updateOrganizationSnmpRequest) throws ApiException {
        okhttp3.Call localVarCall = updateOrganizationSnmp_0ValidateBeforeCall(organizationId, updateOrganizationSnmpRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the SNMP settings for an organization (asynchronously)
     * Update the SNMP settings for an organization
     * @param organizationId  (required)
     * @param updateOrganizationSnmpRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationSnmp_0Async(String organizationId, UpdateOrganizationSnmpRequest updateOrganizationSnmpRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrganizationSnmp_0ValidateBeforeCall(organizationId, updateOrganizationSnmpRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrganization_0
     * @param organizationId  (required)
     * @param updateOrganizationRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganization_0Call(String organizationId, UpdateOrganizationRequest updateOrganizationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateOrganizationRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrganization_0ValidateBeforeCall(String organizationId, UpdateOrganizationRequest updateOrganizationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling updateOrganization_0(Async)");
        }

        return updateOrganization_0Call(organizationId, updateOrganizationRequest, _callback);

    }

    /**
     * Update an organization
     * Update an organization
     * @param organizationId  (required)
     * @param updateOrganizationRequest  (optional)
     * @return GetOrganizations200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetOrganizations200ResponseInner updateOrganization_0(String organizationId, UpdateOrganizationRequest updateOrganizationRequest) throws ApiException {
        ApiResponse<GetOrganizations200ResponseInner> localVarResp = updateOrganization_0WithHttpInfo(organizationId, updateOrganizationRequest);
        return localVarResp.getData();
    }

    /**
     * Update an organization
     * Update an organization
     * @param organizationId  (required)
     * @param updateOrganizationRequest  (optional)
     * @return ApiResponse&lt;GetOrganizations200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOrganizations200ResponseInner> updateOrganization_0WithHttpInfo(String organizationId, UpdateOrganizationRequest updateOrganizationRequest) throws ApiException {
        okhttp3.Call localVarCall = updateOrganization_0ValidateBeforeCall(organizationId, updateOrganizationRequest, null);
        Type localVarReturnType = new TypeToken<GetOrganizations200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an organization (asynchronously)
     * Update an organization
     * @param organizationId  (required)
     * @param updateOrganizationRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganization_0Async(String organizationId, UpdateOrganizationRequest updateOrganizationRequest, final ApiCallback<GetOrganizations200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrganization_0ValidateBeforeCall(organizationId, updateOrganizationRequest, _callback);
        Type localVarReturnType = new TypeToken<GetOrganizations200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vmxNetworkDevicesClaim_0
     * @param networkId  (required)
     * @param vmxNetworkDevicesClaimRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vmxNetworkDevicesClaim_0Call(String networkId, VmxNetworkDevicesClaimRequest vmxNetworkDevicesClaimRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vmxNetworkDevicesClaimRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/devices/claim/vmx"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vmxNetworkDevicesClaim_0ValidateBeforeCall(String networkId, VmxNetworkDevicesClaimRequest vmxNetworkDevicesClaimRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling vmxNetworkDevicesClaim_0(Async)");
        }

        // verify the required parameter 'vmxNetworkDevicesClaimRequest' is set
        if (vmxNetworkDevicesClaimRequest == null) {
            throw new ApiException("Missing the required parameter 'vmxNetworkDevicesClaimRequest' when calling vmxNetworkDevicesClaim_0(Async)");
        }

        return vmxNetworkDevicesClaim_0Call(networkId, vmxNetworkDevicesClaimRequest, _callback);

    }

    /**
     * Claim a vMX into a network
     * Claim a vMX into a network
     * @param networkId  (required)
     * @param vmxNetworkDevicesClaimRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object vmxNetworkDevicesClaim_0(String networkId, VmxNetworkDevicesClaimRequest vmxNetworkDevicesClaimRequest) throws ApiException {
        ApiResponse<Object> localVarResp = vmxNetworkDevicesClaim_0WithHttpInfo(networkId, vmxNetworkDevicesClaimRequest);
        return localVarResp.getData();
    }

    /**
     * Claim a vMX into a network
     * Claim a vMX into a network
     * @param networkId  (required)
     * @param vmxNetworkDevicesClaimRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> vmxNetworkDevicesClaim_0WithHttpInfo(String networkId, VmxNetworkDevicesClaimRequest vmxNetworkDevicesClaimRequest) throws ApiException {
        okhttp3.Call localVarCall = vmxNetworkDevicesClaim_0ValidateBeforeCall(networkId, vmxNetworkDevicesClaimRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Claim a vMX into a network (asynchronously)
     * Claim a vMX into a network
     * @param networkId  (required)
     * @param vmxNetworkDevicesClaimRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vmxNetworkDevicesClaim_0Async(String networkId, VmxNetworkDevicesClaimRequest vmxNetworkDevicesClaimRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = vmxNetworkDevicesClaim_0ValidateBeforeCall(networkId, vmxNetworkDevicesClaimRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for wipeNetworkSmDevices_0
     * @param networkId  (required)
     * @param wipeNetworkSmDevicesRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wipeNetworkSmDevices_0Call(String networkId, WipeNetworkSmDevicesRequest wipeNetworkSmDevicesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wipeNetworkSmDevicesRequest;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/sm/devices/wipe"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call wipeNetworkSmDevices_0ValidateBeforeCall(String networkId, WipeNetworkSmDevicesRequest wipeNetworkSmDevicesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling wipeNetworkSmDevices_0(Async)");
        }

        return wipeNetworkSmDevices_0Call(networkId, wipeNetworkSmDevicesRequest, _callback);

    }

    /**
     * Wipe a device
     * Wipe a device
     * @param networkId  (required)
     * @param wipeNetworkSmDevicesRequest  (optional)
     * @return WipeNetworkSmDevices200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public WipeNetworkSmDevices200Response wipeNetworkSmDevices_0(String networkId, WipeNetworkSmDevicesRequest wipeNetworkSmDevicesRequest) throws ApiException {
        ApiResponse<WipeNetworkSmDevices200Response> localVarResp = wipeNetworkSmDevices_0WithHttpInfo(networkId, wipeNetworkSmDevicesRequest);
        return localVarResp.getData();
    }

    /**
     * Wipe a device
     * Wipe a device
     * @param networkId  (required)
     * @param wipeNetworkSmDevicesRequest  (optional)
     * @return ApiResponse&lt;WipeNetworkSmDevices200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WipeNetworkSmDevices200Response> wipeNetworkSmDevices_0WithHttpInfo(String networkId, WipeNetworkSmDevicesRequest wipeNetworkSmDevicesRequest) throws ApiException {
        okhttp3.Call localVarCall = wipeNetworkSmDevices_0ValidateBeforeCall(networkId, wipeNetworkSmDevicesRequest, null);
        Type localVarReturnType = new TypeToken<WipeNetworkSmDevices200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Wipe a device (asynchronously)
     * Wipe a device
     * @param networkId  (required)
     * @param wipeNetworkSmDevicesRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wipeNetworkSmDevices_0Async(String networkId, WipeNetworkSmDevicesRequest wipeNetworkSmDevicesRequest, final ApiCallback<WipeNetworkSmDevices200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = wipeNetworkSmDevices_0ValidateBeforeCall(networkId, wipeNetworkSmDevicesRequest, _callback);
        Type localVarReturnType = new TypeToken<WipeNetworkSmDevices200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
