/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetNetworkWirelessChannelUtilizationHistory200ResponseInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetNetworkWirelessChannelUtilizationHistory200ResponseInner {
  public static final String SERIALIZED_NAME_END_TS = "endTs";
  @SerializedName(SERIALIZED_NAME_END_TS)
  private OffsetDateTime endTs;

  public static final String SERIALIZED_NAME_START_TS = "startTs";
  @SerializedName(SERIALIZED_NAME_START_TS)
  private OffsetDateTime startTs;

  public static final String SERIALIZED_NAME_UTILIZATION80211 = "utilization80211";
  @SerializedName(SERIALIZED_NAME_UTILIZATION80211)
  private Float utilization80211;

  public static final String SERIALIZED_NAME_UTILIZATION_NON80211 = "utilizationNon80211";
  @SerializedName(SERIALIZED_NAME_UTILIZATION_NON80211)
  private Float utilizationNon80211;

  public static final String SERIALIZED_NAME_UTILIZATION_TOTAL = "utilizationTotal";
  @SerializedName(SERIALIZED_NAME_UTILIZATION_TOTAL)
  private Float utilizationTotal;

  public GetNetworkWirelessChannelUtilizationHistory200ResponseInner() {
  }

  public GetNetworkWirelessChannelUtilizationHistory200ResponseInner endTs(OffsetDateTime endTs) {
    this.endTs = endTs;
    return this;
  }

  /**
   * The end time of the query range
   * @return endTs
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTs() {
    return endTs;
  }

  public void setEndTs(OffsetDateTime endTs) {
    this.endTs = endTs;
  }


  public GetNetworkWirelessChannelUtilizationHistory200ResponseInner startTs(OffsetDateTime startTs) {
    this.startTs = startTs;
    return this;
  }

  /**
   * The start time of the query range
   * @return startTs
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTs() {
    return startTs;
  }

  public void setStartTs(OffsetDateTime startTs) {
    this.startTs = startTs;
  }


  public GetNetworkWirelessChannelUtilizationHistory200ResponseInner utilization80211(Float utilization80211) {
    this.utilization80211 = utilization80211;
    return this;
  }

  /**
   * Average wifi utilization
   * @return utilization80211
   */
  @javax.annotation.Nullable
  public Float getUtilization80211() {
    return utilization80211;
  }

  public void setUtilization80211(Float utilization80211) {
    this.utilization80211 = utilization80211;
  }


  public GetNetworkWirelessChannelUtilizationHistory200ResponseInner utilizationNon80211(Float utilizationNon80211) {
    this.utilizationNon80211 = utilizationNon80211;
    return this;
  }

  /**
   * Average signal interference
   * @return utilizationNon80211
   */
  @javax.annotation.Nullable
  public Float getUtilizationNon80211() {
    return utilizationNon80211;
  }

  public void setUtilizationNon80211(Float utilizationNon80211) {
    this.utilizationNon80211 = utilizationNon80211;
  }


  public GetNetworkWirelessChannelUtilizationHistory200ResponseInner utilizationTotal(Float utilizationTotal) {
    this.utilizationTotal = utilizationTotal;
    return this;
  }

  /**
   * Total channel utilization
   * @return utilizationTotal
   */
  @javax.annotation.Nullable
  public Float getUtilizationTotal() {
    return utilizationTotal;
  }

  public void setUtilizationTotal(Float utilizationTotal) {
    this.utilizationTotal = utilizationTotal;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetNetworkWirelessChannelUtilizationHistory200ResponseInner getNetworkWirelessChannelUtilizationHistory200ResponseInner = (GetNetworkWirelessChannelUtilizationHistory200ResponseInner) o;
    return Objects.equals(this.endTs, getNetworkWirelessChannelUtilizationHistory200ResponseInner.endTs) &&
        Objects.equals(this.startTs, getNetworkWirelessChannelUtilizationHistory200ResponseInner.startTs) &&
        Objects.equals(this.utilization80211, getNetworkWirelessChannelUtilizationHistory200ResponseInner.utilization80211) &&
        Objects.equals(this.utilizationNon80211, getNetworkWirelessChannelUtilizationHistory200ResponseInner.utilizationNon80211) &&
        Objects.equals(this.utilizationTotal, getNetworkWirelessChannelUtilizationHistory200ResponseInner.utilizationTotal);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endTs, startTs, utilization80211, utilizationNon80211, utilizationTotal);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetNetworkWirelessChannelUtilizationHistory200ResponseInner {\n");
    sb.append("    endTs: ").append(toIndentedString(endTs)).append("\n");
    sb.append("    startTs: ").append(toIndentedString(startTs)).append("\n");
    sb.append("    utilization80211: ").append(toIndentedString(utilization80211)).append("\n");
    sb.append("    utilizationNon80211: ").append(toIndentedString(utilizationNon80211)).append("\n");
    sb.append("    utilizationTotal: ").append(toIndentedString(utilizationTotal)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endTs");
    openapiFields.add("startTs");
    openapiFields.add("utilization80211");
    openapiFields.add("utilizationNon80211");
    openapiFields.add("utilizationTotal");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetNetworkWirelessChannelUtilizationHistory200ResponseInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetNetworkWirelessChannelUtilizationHistory200ResponseInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetNetworkWirelessChannelUtilizationHistory200ResponseInner is not found in the empty JSON string", GetNetworkWirelessChannelUtilizationHistory200ResponseInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetNetworkWirelessChannelUtilizationHistory200ResponseInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetNetworkWirelessChannelUtilizationHistory200ResponseInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetNetworkWirelessChannelUtilizationHistory200ResponseInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetNetworkWirelessChannelUtilizationHistory200ResponseInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetNetworkWirelessChannelUtilizationHistory200ResponseInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetNetworkWirelessChannelUtilizationHistory200ResponseInner.class));

       return (TypeAdapter<T>) new TypeAdapter<GetNetworkWirelessChannelUtilizationHistory200ResponseInner>() {
           @Override
           public void write(JsonWriter out, GetNetworkWirelessChannelUtilizationHistory200ResponseInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetNetworkWirelessChannelUtilizationHistory200ResponseInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetNetworkWirelessChannelUtilizationHistory200ResponseInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetNetworkWirelessChannelUtilizationHistory200ResponseInner
   * @throws IOException if the JSON string is invalid with respect to GetNetworkWirelessChannelUtilizationHistory200ResponseInner
   */
  public static GetNetworkWirelessChannelUtilizationHistory200ResponseInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetNetworkWirelessChannelUtilizationHistory200ResponseInner.class);
  }

  /**
   * Convert an instance of GetNetworkWirelessChannelUtilizationHistory200ResponseInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

