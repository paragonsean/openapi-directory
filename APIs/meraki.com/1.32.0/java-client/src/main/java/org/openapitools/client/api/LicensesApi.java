/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AssignOrganizationLicensesSeats200Response;
import org.openapitools.client.model.AssignOrganizationLicensesSeatsRequest;
import org.openapitools.client.model.GetOrganizationLicenses200ResponseInner;
import org.openapitools.client.model.GetOrganizationLicensingCotermLicenses200ResponseInner;
import org.openapitools.client.model.MoveOrganizationLicenses200Response;
import org.openapitools.client.model.MoveOrganizationLicensesRequest;
import org.openapitools.client.model.MoveOrganizationLicensesSeats200Response;
import org.openapitools.client.model.MoveOrganizationLicensesSeatsRequest;
import org.openapitools.client.model.MoveOrganizationLicensingCotermLicenses200Response;
import org.openapitools.client.model.MoveOrganizationLicensingCotermLicensesRequest;
import org.openapitools.client.model.RenewOrganizationLicensesSeatsRequest;
import org.openapitools.client.model.UpdateOrganizationLicenseRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LicensesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LicensesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LicensesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for assignOrganizationLicensesSeats_1
     * @param organizationId  (required)
     * @param assignOrganizationLicensesSeatsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assignOrganizationLicensesSeats_1Call(String organizationId, AssignOrganizationLicensesSeatsRequest assignOrganizationLicensesSeatsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = assignOrganizationLicensesSeatsRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/licenses/assignSeats"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assignOrganizationLicensesSeats_1ValidateBeforeCall(String organizationId, AssignOrganizationLicensesSeatsRequest assignOrganizationLicensesSeatsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling assignOrganizationLicensesSeats_1(Async)");
        }

        // verify the required parameter 'assignOrganizationLicensesSeatsRequest' is set
        if (assignOrganizationLicensesSeatsRequest == null) {
            throw new ApiException("Missing the required parameter 'assignOrganizationLicensesSeatsRequest' when calling assignOrganizationLicensesSeats_1(Async)");
        }

        return assignOrganizationLicensesSeats_1Call(organizationId, assignOrganizationLicensesSeatsRequest, _callback);

    }

    /**
     * Assign SM seats to a network
     * Assign SM seats to a network. This will increase the managed SM device limit of the network
     * @param organizationId  (required)
     * @param assignOrganizationLicensesSeatsRequest  (required)
     * @return AssignOrganizationLicensesSeats200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public AssignOrganizationLicensesSeats200Response assignOrganizationLicensesSeats_1(String organizationId, AssignOrganizationLicensesSeatsRequest assignOrganizationLicensesSeatsRequest) throws ApiException {
        ApiResponse<AssignOrganizationLicensesSeats200Response> localVarResp = assignOrganizationLicensesSeats_1WithHttpInfo(organizationId, assignOrganizationLicensesSeatsRequest);
        return localVarResp.getData();
    }

    /**
     * Assign SM seats to a network
     * Assign SM seats to a network. This will increase the managed SM device limit of the network
     * @param organizationId  (required)
     * @param assignOrganizationLicensesSeatsRequest  (required)
     * @return ApiResponse&lt;AssignOrganizationLicensesSeats200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssignOrganizationLicensesSeats200Response> assignOrganizationLicensesSeats_1WithHttpInfo(String organizationId, AssignOrganizationLicensesSeatsRequest assignOrganizationLicensesSeatsRequest) throws ApiException {
        okhttp3.Call localVarCall = assignOrganizationLicensesSeats_1ValidateBeforeCall(organizationId, assignOrganizationLicensesSeatsRequest, null);
        Type localVarReturnType = new TypeToken<AssignOrganizationLicensesSeats200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Assign SM seats to a network (asynchronously)
     * Assign SM seats to a network. This will increase the managed SM device limit of the network
     * @param organizationId  (required)
     * @param assignOrganizationLicensesSeatsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assignOrganizationLicensesSeats_1Async(String organizationId, AssignOrganizationLicensesSeatsRequest assignOrganizationLicensesSeatsRequest, final ApiCallback<AssignOrganizationLicensesSeats200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = assignOrganizationLicensesSeats_1ValidateBeforeCall(organizationId, assignOrganizationLicensesSeatsRequest, _callback);
        Type localVarReturnType = new TypeToken<AssignOrganizationLicensesSeats200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationLicense_1
     * @param organizationId  (required)
     * @param licenseId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationLicense_1Call(String organizationId, String licenseId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/licenses/{licenseId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "licenseId" + "}", localVarApiClient.escapeString(licenseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationLicense_1ValidateBeforeCall(String organizationId, String licenseId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationLicense_1(Async)");
        }

        // verify the required parameter 'licenseId' is set
        if (licenseId == null) {
            throw new ApiException("Missing the required parameter 'licenseId' when calling getOrganizationLicense_1(Async)");
        }

        return getOrganizationLicense_1Call(organizationId, licenseId, _callback);

    }

    /**
     * Display a license
     * Display a license
     * @param organizationId  (required)
     * @param licenseId  (required)
     * @return GetOrganizationLicenses200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetOrganizationLicenses200ResponseInner getOrganizationLicense_1(String organizationId, String licenseId) throws ApiException {
        ApiResponse<GetOrganizationLicenses200ResponseInner> localVarResp = getOrganizationLicense_1WithHttpInfo(organizationId, licenseId);
        return localVarResp.getData();
    }

    /**
     * Display a license
     * Display a license
     * @param organizationId  (required)
     * @param licenseId  (required)
     * @return ApiResponse&lt;GetOrganizationLicenses200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOrganizationLicenses200ResponseInner> getOrganizationLicense_1WithHttpInfo(String organizationId, String licenseId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationLicense_1ValidateBeforeCall(organizationId, licenseId, null);
        Type localVarReturnType = new TypeToken<GetOrganizationLicenses200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Display a license (asynchronously)
     * Display a license
     * @param organizationId  (required)
     * @param licenseId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationLicense_1Async(String organizationId, String licenseId, final ApiCallback<GetOrganizationLicenses200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationLicense_1ValidateBeforeCall(organizationId, licenseId, _callback);
        Type localVarReturnType = new TypeToken<GetOrganizationLicenses200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationLicensesOverview_1
     * @param organizationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationLicensesOverview_1Call(String organizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/licenses/overview"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationLicensesOverview_1ValidateBeforeCall(String organizationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationLicensesOverview_1(Async)");
        }

        return getOrganizationLicensesOverview_1Call(organizationId, _callback);

    }

    /**
     * Return an overview of the license state for an organization
     * Return an overview of the license state for an organization
     * @param organizationId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getOrganizationLicensesOverview_1(String organizationId) throws ApiException {
        ApiResponse<Object> localVarResp = getOrganizationLicensesOverview_1WithHttpInfo(organizationId);
        return localVarResp.getData();
    }

    /**
     * Return an overview of the license state for an organization
     * Return an overview of the license state for an organization
     * @param organizationId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getOrganizationLicensesOverview_1WithHttpInfo(String organizationId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationLicensesOverview_1ValidateBeforeCall(organizationId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return an overview of the license state for an organization (asynchronously)
     * Return an overview of the license state for an organization
     * @param organizationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationLicensesOverview_1Async(String organizationId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationLicensesOverview_1ValidateBeforeCall(organizationId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationLicenses_1
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param deviceSerial Filter the licenses to those assigned to a particular device. Returned in the same order that they are queued to the device. (optional)
     * @param networkId Filter the licenses to those assigned in a particular network (optional)
     * @param state Filter the licenses to those in a particular state. Can be one of &#39;active&#39;, &#39;expired&#39;, &#39;expiring&#39;, &#39;recentlyQueued&#39;, &#39;unused&#39; or &#39;unusedActive&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationLicenses_1Call(String organizationId, Integer perPage, String startingAfter, String endingBefore, String deviceSerial, String networkId, String state, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/licenses"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingAfter", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endingBefore", endingBefore));
        }

        if (deviceSerial != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deviceSerial", deviceSerial));
        }

        if (networkId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("networkId", networkId));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationLicenses_1ValidateBeforeCall(String organizationId, Integer perPage, String startingAfter, String endingBefore, String deviceSerial, String networkId, String state, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationLicenses_1(Async)");
        }

        return getOrganizationLicenses_1Call(organizationId, perPage, startingAfter, endingBefore, deviceSerial, networkId, state, _callback);

    }

    /**
     * List the licenses for an organization
     * List the licenses for an organization
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param deviceSerial Filter the licenses to those assigned to a particular device. Returned in the same order that they are queued to the device. (optional)
     * @param networkId Filter the licenses to those assigned in a particular network (optional)
     * @param state Filter the licenses to those in a particular state. Can be one of &#39;active&#39;, &#39;expired&#39;, &#39;expiring&#39;, &#39;recentlyQueued&#39;, &#39;unused&#39; or &#39;unusedActive&#39; (optional)
     * @return List&lt;GetOrganizationLicenses200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public List<GetOrganizationLicenses200ResponseInner> getOrganizationLicenses_1(String organizationId, Integer perPage, String startingAfter, String endingBefore, String deviceSerial, String networkId, String state) throws ApiException {
        ApiResponse<List<GetOrganizationLicenses200ResponseInner>> localVarResp = getOrganizationLicenses_1WithHttpInfo(organizationId, perPage, startingAfter, endingBefore, deviceSerial, networkId, state);
        return localVarResp.getData();
    }

    /**
     * List the licenses for an organization
     * List the licenses for an organization
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param deviceSerial Filter the licenses to those assigned to a particular device. Returned in the same order that they are queued to the device. (optional)
     * @param networkId Filter the licenses to those assigned in a particular network (optional)
     * @param state Filter the licenses to those in a particular state. Can be one of &#39;active&#39;, &#39;expired&#39;, &#39;expiring&#39;, &#39;recentlyQueued&#39;, &#39;unused&#39; or &#39;unusedActive&#39; (optional)
     * @return ApiResponse&lt;List&lt;GetOrganizationLicenses200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<GetOrganizationLicenses200ResponseInner>> getOrganizationLicenses_1WithHttpInfo(String organizationId, Integer perPage, String startingAfter, String endingBefore, String deviceSerial, String networkId, String state) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationLicenses_1ValidateBeforeCall(organizationId, perPage, startingAfter, endingBefore, deviceSerial, networkId, state, null);
        Type localVarReturnType = new TypeToken<List<GetOrganizationLicenses200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the licenses for an organization (asynchronously)
     * List the licenses for an organization
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param deviceSerial Filter the licenses to those assigned to a particular device. Returned in the same order that they are queued to the device. (optional)
     * @param networkId Filter the licenses to those assigned in a particular network (optional)
     * @param state Filter the licenses to those in a particular state. Can be one of &#39;active&#39;, &#39;expired&#39;, &#39;expiring&#39;, &#39;recentlyQueued&#39;, &#39;unused&#39; or &#39;unusedActive&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationLicenses_1Async(String organizationId, Integer perPage, String startingAfter, String endingBefore, String deviceSerial, String networkId, String state, final ApiCallback<List<GetOrganizationLicenses200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationLicenses_1ValidateBeforeCall(organizationId, perPage, startingAfter, endingBefore, deviceSerial, networkId, state, _callback);
        Type localVarReturnType = new TypeToken<List<GetOrganizationLicenses200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationLicensingCotermLicenses_2
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param invalidated Filter for licenses that are invalidated (optional)
     * @param expired Filter for licenses that are expired (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationLicensingCotermLicenses_2Call(String organizationId, Integer perPage, String startingAfter, String endingBefore, Boolean invalidated, Boolean expired, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/licensing/coterm/licenses"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingAfter", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endingBefore", endingBefore));
        }

        if (invalidated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("invalidated", invalidated));
        }

        if (expired != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expired", expired));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationLicensingCotermLicenses_2ValidateBeforeCall(String organizationId, Integer perPage, String startingAfter, String endingBefore, Boolean invalidated, Boolean expired, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationLicensingCotermLicenses_2(Async)");
        }

        return getOrganizationLicensingCotermLicenses_2Call(organizationId, perPage, startingAfter, endingBefore, invalidated, expired, _callback);

    }

    /**
     * List the licenses in a coterm organization
     * List the licenses in a coterm organization
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param invalidated Filter for licenses that are invalidated (optional)
     * @param expired Filter for licenses that are expired (optional)
     * @return List&lt;GetOrganizationLicensingCotermLicenses200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public List<GetOrganizationLicensingCotermLicenses200ResponseInner> getOrganizationLicensingCotermLicenses_2(String organizationId, Integer perPage, String startingAfter, String endingBefore, Boolean invalidated, Boolean expired) throws ApiException {
        ApiResponse<List<GetOrganizationLicensingCotermLicenses200ResponseInner>> localVarResp = getOrganizationLicensingCotermLicenses_2WithHttpInfo(organizationId, perPage, startingAfter, endingBefore, invalidated, expired);
        return localVarResp.getData();
    }

    /**
     * List the licenses in a coterm organization
     * List the licenses in a coterm organization
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param invalidated Filter for licenses that are invalidated (optional)
     * @param expired Filter for licenses that are expired (optional)
     * @return ApiResponse&lt;List&lt;GetOrganizationLicensingCotermLicenses200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<GetOrganizationLicensingCotermLicenses200ResponseInner>> getOrganizationLicensingCotermLicenses_2WithHttpInfo(String organizationId, Integer perPage, String startingAfter, String endingBefore, Boolean invalidated, Boolean expired) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationLicensingCotermLicenses_2ValidateBeforeCall(organizationId, perPage, startingAfter, endingBefore, invalidated, expired, null);
        Type localVarReturnType = new TypeToken<List<GetOrganizationLicensingCotermLicenses200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the licenses in a coterm organization (asynchronously)
     * List the licenses in a coterm organization
     * @param organizationId  (required)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param invalidated Filter for licenses that are invalidated (optional)
     * @param expired Filter for licenses that are expired (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationLicensingCotermLicenses_2Async(String organizationId, Integer perPage, String startingAfter, String endingBefore, Boolean invalidated, Boolean expired, final ApiCallback<List<GetOrganizationLicensingCotermLicenses200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationLicensingCotermLicenses_2ValidateBeforeCall(organizationId, perPage, startingAfter, endingBefore, invalidated, expired, _callback);
        Type localVarReturnType = new TypeToken<List<GetOrganizationLicensingCotermLicenses200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for moveOrganizationLicensesSeats_1
     * @param organizationId  (required)
     * @param moveOrganizationLicensesSeatsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call moveOrganizationLicensesSeats_1Call(String organizationId, MoveOrganizationLicensesSeatsRequest moveOrganizationLicensesSeatsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = moveOrganizationLicensesSeatsRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/licenses/moveSeats"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call moveOrganizationLicensesSeats_1ValidateBeforeCall(String organizationId, MoveOrganizationLicensesSeatsRequest moveOrganizationLicensesSeatsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling moveOrganizationLicensesSeats_1(Async)");
        }

        // verify the required parameter 'moveOrganizationLicensesSeatsRequest' is set
        if (moveOrganizationLicensesSeatsRequest == null) {
            throw new ApiException("Missing the required parameter 'moveOrganizationLicensesSeatsRequest' when calling moveOrganizationLicensesSeats_1(Async)");
        }

        return moveOrganizationLicensesSeats_1Call(organizationId, moveOrganizationLicensesSeatsRequest, _callback);

    }

    /**
     * Move SM seats to another organization
     * Move SM seats to another organization
     * @param organizationId  (required)
     * @param moveOrganizationLicensesSeatsRequest  (required)
     * @return MoveOrganizationLicensesSeats200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public MoveOrganizationLicensesSeats200Response moveOrganizationLicensesSeats_1(String organizationId, MoveOrganizationLicensesSeatsRequest moveOrganizationLicensesSeatsRequest) throws ApiException {
        ApiResponse<MoveOrganizationLicensesSeats200Response> localVarResp = moveOrganizationLicensesSeats_1WithHttpInfo(organizationId, moveOrganizationLicensesSeatsRequest);
        return localVarResp.getData();
    }

    /**
     * Move SM seats to another organization
     * Move SM seats to another organization
     * @param organizationId  (required)
     * @param moveOrganizationLicensesSeatsRequest  (required)
     * @return ApiResponse&lt;MoveOrganizationLicensesSeats200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MoveOrganizationLicensesSeats200Response> moveOrganizationLicensesSeats_1WithHttpInfo(String organizationId, MoveOrganizationLicensesSeatsRequest moveOrganizationLicensesSeatsRequest) throws ApiException {
        okhttp3.Call localVarCall = moveOrganizationLicensesSeats_1ValidateBeforeCall(organizationId, moveOrganizationLicensesSeatsRequest, null);
        Type localVarReturnType = new TypeToken<MoveOrganizationLicensesSeats200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Move SM seats to another organization (asynchronously)
     * Move SM seats to another organization
     * @param organizationId  (required)
     * @param moveOrganizationLicensesSeatsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call moveOrganizationLicensesSeats_1Async(String organizationId, MoveOrganizationLicensesSeatsRequest moveOrganizationLicensesSeatsRequest, final ApiCallback<MoveOrganizationLicensesSeats200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = moveOrganizationLicensesSeats_1ValidateBeforeCall(organizationId, moveOrganizationLicensesSeatsRequest, _callback);
        Type localVarReturnType = new TypeToken<MoveOrganizationLicensesSeats200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for moveOrganizationLicenses_1
     * @param organizationId  (required)
     * @param moveOrganizationLicensesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call moveOrganizationLicenses_1Call(String organizationId, MoveOrganizationLicensesRequest moveOrganizationLicensesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = moveOrganizationLicensesRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/licenses/move"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call moveOrganizationLicenses_1ValidateBeforeCall(String organizationId, MoveOrganizationLicensesRequest moveOrganizationLicensesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling moveOrganizationLicenses_1(Async)");
        }

        // verify the required parameter 'moveOrganizationLicensesRequest' is set
        if (moveOrganizationLicensesRequest == null) {
            throw new ApiException("Missing the required parameter 'moveOrganizationLicensesRequest' when calling moveOrganizationLicenses_1(Async)");
        }

        return moveOrganizationLicenses_1Call(organizationId, moveOrganizationLicensesRequest, _callback);

    }

    /**
     * Move licenses to another organization
     * Move licenses to another organization. This will also move any devices that the licenses are assigned to
     * @param organizationId  (required)
     * @param moveOrganizationLicensesRequest  (required)
     * @return MoveOrganizationLicenses200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public MoveOrganizationLicenses200Response moveOrganizationLicenses_1(String organizationId, MoveOrganizationLicensesRequest moveOrganizationLicensesRequest) throws ApiException {
        ApiResponse<MoveOrganizationLicenses200Response> localVarResp = moveOrganizationLicenses_1WithHttpInfo(organizationId, moveOrganizationLicensesRequest);
        return localVarResp.getData();
    }

    /**
     * Move licenses to another organization
     * Move licenses to another organization. This will also move any devices that the licenses are assigned to
     * @param organizationId  (required)
     * @param moveOrganizationLicensesRequest  (required)
     * @return ApiResponse&lt;MoveOrganizationLicenses200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MoveOrganizationLicenses200Response> moveOrganizationLicenses_1WithHttpInfo(String organizationId, MoveOrganizationLicensesRequest moveOrganizationLicensesRequest) throws ApiException {
        okhttp3.Call localVarCall = moveOrganizationLicenses_1ValidateBeforeCall(organizationId, moveOrganizationLicensesRequest, null);
        Type localVarReturnType = new TypeToken<MoveOrganizationLicenses200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Move licenses to another organization (asynchronously)
     * Move licenses to another organization. This will also move any devices that the licenses are assigned to
     * @param organizationId  (required)
     * @param moveOrganizationLicensesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call moveOrganizationLicenses_1Async(String organizationId, MoveOrganizationLicensesRequest moveOrganizationLicensesRequest, final ApiCallback<MoveOrganizationLicenses200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = moveOrganizationLicenses_1ValidateBeforeCall(organizationId, moveOrganizationLicensesRequest, _callback);
        Type localVarReturnType = new TypeToken<MoveOrganizationLicenses200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for moveOrganizationLicensingCotermLicenses_2
     * @param organizationId  (required)
     * @param moveOrganizationLicensingCotermLicensesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call moveOrganizationLicensingCotermLicenses_2Call(String organizationId, MoveOrganizationLicensingCotermLicensesRequest moveOrganizationLicensingCotermLicensesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = moveOrganizationLicensingCotermLicensesRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/licensing/coterm/licenses/move"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call moveOrganizationLicensingCotermLicenses_2ValidateBeforeCall(String organizationId, MoveOrganizationLicensingCotermLicensesRequest moveOrganizationLicensingCotermLicensesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling moveOrganizationLicensingCotermLicenses_2(Async)");
        }

        // verify the required parameter 'moveOrganizationLicensingCotermLicensesRequest' is set
        if (moveOrganizationLicensingCotermLicensesRequest == null) {
            throw new ApiException("Missing the required parameter 'moveOrganizationLicensingCotermLicensesRequest' when calling moveOrganizationLicensingCotermLicenses_2(Async)");
        }

        return moveOrganizationLicensingCotermLicenses_2Call(organizationId, moveOrganizationLicensingCotermLicensesRequest, _callback);

    }

    /**
     * Moves a license to a different organization (coterm only)
     * Moves a license to a different organization (coterm only)
     * @param organizationId  (required)
     * @param moveOrganizationLicensingCotermLicensesRequest  (required)
     * @return MoveOrganizationLicensingCotermLicenses200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public MoveOrganizationLicensingCotermLicenses200Response moveOrganizationLicensingCotermLicenses_2(String organizationId, MoveOrganizationLicensingCotermLicensesRequest moveOrganizationLicensingCotermLicensesRequest) throws ApiException {
        ApiResponse<MoveOrganizationLicensingCotermLicenses200Response> localVarResp = moveOrganizationLicensingCotermLicenses_2WithHttpInfo(organizationId, moveOrganizationLicensingCotermLicensesRequest);
        return localVarResp.getData();
    }

    /**
     * Moves a license to a different organization (coterm only)
     * Moves a license to a different organization (coterm only)
     * @param organizationId  (required)
     * @param moveOrganizationLicensingCotermLicensesRequest  (required)
     * @return ApiResponse&lt;MoveOrganizationLicensingCotermLicenses200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MoveOrganizationLicensingCotermLicenses200Response> moveOrganizationLicensingCotermLicenses_2WithHttpInfo(String organizationId, MoveOrganizationLicensingCotermLicensesRequest moveOrganizationLicensingCotermLicensesRequest) throws ApiException {
        okhttp3.Call localVarCall = moveOrganizationLicensingCotermLicenses_2ValidateBeforeCall(organizationId, moveOrganizationLicensingCotermLicensesRequest, null);
        Type localVarReturnType = new TypeToken<MoveOrganizationLicensingCotermLicenses200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Moves a license to a different organization (coterm only) (asynchronously)
     * Moves a license to a different organization (coterm only)
     * @param organizationId  (required)
     * @param moveOrganizationLicensingCotermLicensesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call moveOrganizationLicensingCotermLicenses_2Async(String organizationId, MoveOrganizationLicensingCotermLicensesRequest moveOrganizationLicensingCotermLicensesRequest, final ApiCallback<MoveOrganizationLicensingCotermLicenses200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = moveOrganizationLicensingCotermLicenses_2ValidateBeforeCall(organizationId, moveOrganizationLicensingCotermLicensesRequest, _callback);
        Type localVarReturnType = new TypeToken<MoveOrganizationLicensingCotermLicenses200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for renewOrganizationLicensesSeats_1
     * @param organizationId  (required)
     * @param renewOrganizationLicensesSeatsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call renewOrganizationLicensesSeats_1Call(String organizationId, RenewOrganizationLicensesSeatsRequest renewOrganizationLicensesSeatsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = renewOrganizationLicensesSeatsRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/licenses/renewSeats"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call renewOrganizationLicensesSeats_1ValidateBeforeCall(String organizationId, RenewOrganizationLicensesSeatsRequest renewOrganizationLicensesSeatsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling renewOrganizationLicensesSeats_1(Async)");
        }

        // verify the required parameter 'renewOrganizationLicensesSeatsRequest' is set
        if (renewOrganizationLicensesSeatsRequest == null) {
            throw new ApiException("Missing the required parameter 'renewOrganizationLicensesSeatsRequest' when calling renewOrganizationLicensesSeats_1(Async)");
        }

        return renewOrganizationLicensesSeats_1Call(organizationId, renewOrganizationLicensesSeatsRequest, _callback);

    }

    /**
     * Renew SM seats of a license
     * Renew SM seats of a license. This will extend the license expiration date of managed SM devices covered by this license
     * @param organizationId  (required)
     * @param renewOrganizationLicensesSeatsRequest  (required)
     * @return AssignOrganizationLicensesSeats200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public AssignOrganizationLicensesSeats200Response renewOrganizationLicensesSeats_1(String organizationId, RenewOrganizationLicensesSeatsRequest renewOrganizationLicensesSeatsRequest) throws ApiException {
        ApiResponse<AssignOrganizationLicensesSeats200Response> localVarResp = renewOrganizationLicensesSeats_1WithHttpInfo(organizationId, renewOrganizationLicensesSeatsRequest);
        return localVarResp.getData();
    }

    /**
     * Renew SM seats of a license
     * Renew SM seats of a license. This will extend the license expiration date of managed SM devices covered by this license
     * @param organizationId  (required)
     * @param renewOrganizationLicensesSeatsRequest  (required)
     * @return ApiResponse&lt;AssignOrganizationLicensesSeats200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssignOrganizationLicensesSeats200Response> renewOrganizationLicensesSeats_1WithHttpInfo(String organizationId, RenewOrganizationLicensesSeatsRequest renewOrganizationLicensesSeatsRequest) throws ApiException {
        okhttp3.Call localVarCall = renewOrganizationLicensesSeats_1ValidateBeforeCall(organizationId, renewOrganizationLicensesSeatsRequest, null);
        Type localVarReturnType = new TypeToken<AssignOrganizationLicensesSeats200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Renew SM seats of a license (asynchronously)
     * Renew SM seats of a license. This will extend the license expiration date of managed SM devices covered by this license
     * @param organizationId  (required)
     * @param renewOrganizationLicensesSeatsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call renewOrganizationLicensesSeats_1Async(String organizationId, RenewOrganizationLicensesSeatsRequest renewOrganizationLicensesSeatsRequest, final ApiCallback<AssignOrganizationLicensesSeats200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = renewOrganizationLicensesSeats_1ValidateBeforeCall(organizationId, renewOrganizationLicensesSeatsRequest, _callback);
        Type localVarReturnType = new TypeToken<AssignOrganizationLicensesSeats200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrganizationLicense_1
     * @param organizationId  (required)
     * @param licenseId  (required)
     * @param updateOrganizationLicenseRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationLicense_1Call(String organizationId, String licenseId, UpdateOrganizationLicenseRequest updateOrganizationLicenseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateOrganizationLicenseRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/licenses/{licenseId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "licenseId" + "}", localVarApiClient.escapeString(licenseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrganizationLicense_1ValidateBeforeCall(String organizationId, String licenseId, UpdateOrganizationLicenseRequest updateOrganizationLicenseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling updateOrganizationLicense_1(Async)");
        }

        // verify the required parameter 'licenseId' is set
        if (licenseId == null) {
            throw new ApiException("Missing the required parameter 'licenseId' when calling updateOrganizationLicense_1(Async)");
        }

        return updateOrganizationLicense_1Call(organizationId, licenseId, updateOrganizationLicenseRequest, _callback);

    }

    /**
     * Update a license
     * Update a license
     * @param organizationId  (required)
     * @param licenseId  (required)
     * @param updateOrganizationLicenseRequest  (optional)
     * @return GetOrganizationLicenses200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetOrganizationLicenses200ResponseInner updateOrganizationLicense_1(String organizationId, String licenseId, UpdateOrganizationLicenseRequest updateOrganizationLicenseRequest) throws ApiException {
        ApiResponse<GetOrganizationLicenses200ResponseInner> localVarResp = updateOrganizationLicense_1WithHttpInfo(organizationId, licenseId, updateOrganizationLicenseRequest);
        return localVarResp.getData();
    }

    /**
     * Update a license
     * Update a license
     * @param organizationId  (required)
     * @param licenseId  (required)
     * @param updateOrganizationLicenseRequest  (optional)
     * @return ApiResponse&lt;GetOrganizationLicenses200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOrganizationLicenses200ResponseInner> updateOrganizationLicense_1WithHttpInfo(String organizationId, String licenseId, UpdateOrganizationLicenseRequest updateOrganizationLicenseRequest) throws ApiException {
        okhttp3.Call localVarCall = updateOrganizationLicense_1ValidateBeforeCall(organizationId, licenseId, updateOrganizationLicenseRequest, null);
        Type localVarReturnType = new TypeToken<GetOrganizationLicenses200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a license (asynchronously)
     * Update a license
     * @param organizationId  (required)
     * @param licenseId  (required)
     * @param updateOrganizationLicenseRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationLicense_1Async(String organizationId, String licenseId, UpdateOrganizationLicenseRequest updateOrganizationLicenseRequest, final ApiCallback<GetOrganizationLicenses200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrganizationLicense_1ValidateBeforeCall(organizationId, licenseId, updateOrganizationLicenseRequest, _callback);
        Type localVarReturnType = new TypeToken<GetOrganizationLicenses200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
