/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.UpdateNetworkWirelessSsidSplashSettingsRequestBilling;
import org.openapitools.client.model.UpdateNetworkWirelessSsidSplashSettingsRequestGuestSponsorship;
import org.openapitools.client.model.UpdateNetworkWirelessSsidSplashSettingsRequestSentryEnrollment;
import org.openapitools.client.model.UpdateNetworkWirelessSsidSplashSettingsRequestSplashImage;
import org.openapitools.client.model.UpdateNetworkWirelessSsidSplashSettingsRequestSplashLogo;
import org.openapitools.client.model.UpdateNetworkWirelessSsidSplashSettingsRequestSplashPrepaidFront;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateNetworkWirelessSsidSplashSettingsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateNetworkWirelessSsidSplashSettingsRequest {
  public static final String SERIALIZED_NAME_ALLOW_SIMULTANEOUS_LOGINS = "allowSimultaneousLogins";
  @SerializedName(SERIALIZED_NAME_ALLOW_SIMULTANEOUS_LOGINS)
  private Boolean allowSimultaneousLogins;

  public static final String SERIALIZED_NAME_BILLING = "billing";
  @SerializedName(SERIALIZED_NAME_BILLING)
  private UpdateNetworkWirelessSsidSplashSettingsRequestBilling billing;

  public static final String SERIALIZED_NAME_BLOCK_ALL_TRAFFIC_BEFORE_SIGN_ON = "blockAllTrafficBeforeSignOn";
  @SerializedName(SERIALIZED_NAME_BLOCK_ALL_TRAFFIC_BEFORE_SIGN_ON)
  private Boolean blockAllTrafficBeforeSignOn;

  /**
   * How login attempts should be handled when the controller is unreachable. Can be either &#39;open&#39;, &#39;restricted&#39;, or &#39;default&#39;.
   */
  @JsonAdapter(ControllerDisconnectionBehaviorEnum.Adapter.class)
  public enum ControllerDisconnectionBehaviorEnum {
    DEFAULT("default"),
    
    OPEN("open"),
    
    RESTRICTED("restricted");

    private String value;

    ControllerDisconnectionBehaviorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ControllerDisconnectionBehaviorEnum fromValue(String value) {
      for (ControllerDisconnectionBehaviorEnum b : ControllerDisconnectionBehaviorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ControllerDisconnectionBehaviorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ControllerDisconnectionBehaviorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ControllerDisconnectionBehaviorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ControllerDisconnectionBehaviorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ControllerDisconnectionBehaviorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONTROLLER_DISCONNECTION_BEHAVIOR = "controllerDisconnectionBehavior";
  @SerializedName(SERIALIZED_NAME_CONTROLLER_DISCONNECTION_BEHAVIOR)
  private ControllerDisconnectionBehaviorEnum controllerDisconnectionBehavior;

  public static final String SERIALIZED_NAME_GUEST_SPONSORSHIP = "guestSponsorship";
  @SerializedName(SERIALIZED_NAME_GUEST_SPONSORSHIP)
  private UpdateNetworkWirelessSsidSplashSettingsRequestGuestSponsorship guestSponsorship;

  public static final String SERIALIZED_NAME_REDIRECT_URL = "redirectUrl";
  @SerializedName(SERIALIZED_NAME_REDIRECT_URL)
  private String redirectUrl;

  public static final String SERIALIZED_NAME_SENTRY_ENROLLMENT = "sentryEnrollment";
  @SerializedName(SERIALIZED_NAME_SENTRY_ENROLLMENT)
  private UpdateNetworkWirelessSsidSplashSettingsRequestSentryEnrollment sentryEnrollment;

  public static final String SERIALIZED_NAME_SPLASH_IMAGE = "splashImage";
  @SerializedName(SERIALIZED_NAME_SPLASH_IMAGE)
  private UpdateNetworkWirelessSsidSplashSettingsRequestSplashImage splashImage;

  public static final String SERIALIZED_NAME_SPLASH_LOGO = "splashLogo";
  @SerializedName(SERIALIZED_NAME_SPLASH_LOGO)
  private UpdateNetworkWirelessSsidSplashSettingsRequestSplashLogo splashLogo;

  public static final String SERIALIZED_NAME_SPLASH_PREPAID_FRONT = "splashPrepaidFront";
  @SerializedName(SERIALIZED_NAME_SPLASH_PREPAID_FRONT)
  private UpdateNetworkWirelessSsidSplashSettingsRequestSplashPrepaidFront splashPrepaidFront;

  public static final String SERIALIZED_NAME_SPLASH_TIMEOUT = "splashTimeout";
  @SerializedName(SERIALIZED_NAME_SPLASH_TIMEOUT)
  private Integer splashTimeout;

  public static final String SERIALIZED_NAME_SPLASH_URL = "splashUrl";
  @SerializedName(SERIALIZED_NAME_SPLASH_URL)
  private String splashUrl;

  public static final String SERIALIZED_NAME_USE_REDIRECT_URL = "useRedirectUrl";
  @SerializedName(SERIALIZED_NAME_USE_REDIRECT_URL)
  private Boolean useRedirectUrl;

  public static final String SERIALIZED_NAME_USE_SPLASH_URL = "useSplashUrl";
  @SerializedName(SERIALIZED_NAME_USE_SPLASH_URL)
  private Boolean useSplashUrl;

  public static final String SERIALIZED_NAME_WELCOME_MESSAGE = "welcomeMessage";
  @SerializedName(SERIALIZED_NAME_WELCOME_MESSAGE)
  private String welcomeMessage;

  public UpdateNetworkWirelessSsidSplashSettingsRequest() {
  }

  public UpdateNetworkWirelessSsidSplashSettingsRequest allowSimultaneousLogins(Boolean allowSimultaneousLogins) {
    this.allowSimultaneousLogins = allowSimultaneousLogins;
    return this;
  }

  /**
   * Whether or not to allow simultaneous logins from different devices.
   * @return allowSimultaneousLogins
   */
  @javax.annotation.Nullable
  public Boolean getAllowSimultaneousLogins() {
    return allowSimultaneousLogins;
  }

  public void setAllowSimultaneousLogins(Boolean allowSimultaneousLogins) {
    this.allowSimultaneousLogins = allowSimultaneousLogins;
  }


  public UpdateNetworkWirelessSsidSplashSettingsRequest billing(UpdateNetworkWirelessSsidSplashSettingsRequestBilling billing) {
    this.billing = billing;
    return this;
  }

  /**
   * Get billing
   * @return billing
   */
  @javax.annotation.Nullable
  public UpdateNetworkWirelessSsidSplashSettingsRequestBilling getBilling() {
    return billing;
  }

  public void setBilling(UpdateNetworkWirelessSsidSplashSettingsRequestBilling billing) {
    this.billing = billing;
  }


  public UpdateNetworkWirelessSsidSplashSettingsRequest blockAllTrafficBeforeSignOn(Boolean blockAllTrafficBeforeSignOn) {
    this.blockAllTrafficBeforeSignOn = blockAllTrafficBeforeSignOn;
    return this;
  }

  /**
   * How restricted allowing traffic should be. If true, all traffic types are blocked until the splash page is acknowledged. If false, all non-HTTP traffic is allowed before the splash page is acknowledged.
   * @return blockAllTrafficBeforeSignOn
   */
  @javax.annotation.Nullable
  public Boolean getBlockAllTrafficBeforeSignOn() {
    return blockAllTrafficBeforeSignOn;
  }

  public void setBlockAllTrafficBeforeSignOn(Boolean blockAllTrafficBeforeSignOn) {
    this.blockAllTrafficBeforeSignOn = blockAllTrafficBeforeSignOn;
  }


  public UpdateNetworkWirelessSsidSplashSettingsRequest controllerDisconnectionBehavior(ControllerDisconnectionBehaviorEnum controllerDisconnectionBehavior) {
    this.controllerDisconnectionBehavior = controllerDisconnectionBehavior;
    return this;
  }

  /**
   * How login attempts should be handled when the controller is unreachable. Can be either &#39;open&#39;, &#39;restricted&#39;, or &#39;default&#39;.
   * @return controllerDisconnectionBehavior
   */
  @javax.annotation.Nullable
  public ControllerDisconnectionBehaviorEnum getControllerDisconnectionBehavior() {
    return controllerDisconnectionBehavior;
  }

  public void setControllerDisconnectionBehavior(ControllerDisconnectionBehaviorEnum controllerDisconnectionBehavior) {
    this.controllerDisconnectionBehavior = controllerDisconnectionBehavior;
  }


  public UpdateNetworkWirelessSsidSplashSettingsRequest guestSponsorship(UpdateNetworkWirelessSsidSplashSettingsRequestGuestSponsorship guestSponsorship) {
    this.guestSponsorship = guestSponsorship;
    return this;
  }

  /**
   * Get guestSponsorship
   * @return guestSponsorship
   */
  @javax.annotation.Nullable
  public UpdateNetworkWirelessSsidSplashSettingsRequestGuestSponsorship getGuestSponsorship() {
    return guestSponsorship;
  }

  public void setGuestSponsorship(UpdateNetworkWirelessSsidSplashSettingsRequestGuestSponsorship guestSponsorship) {
    this.guestSponsorship = guestSponsorship;
  }


  public UpdateNetworkWirelessSsidSplashSettingsRequest redirectUrl(String redirectUrl) {
    this.redirectUrl = redirectUrl;
    return this;
  }

  /**
   * The custom redirect URL where the users will go after the splash page.
   * @return redirectUrl
   */
  @javax.annotation.Nullable
  public String getRedirectUrl() {
    return redirectUrl;
  }

  public void setRedirectUrl(String redirectUrl) {
    this.redirectUrl = redirectUrl;
  }


  public UpdateNetworkWirelessSsidSplashSettingsRequest sentryEnrollment(UpdateNetworkWirelessSsidSplashSettingsRequestSentryEnrollment sentryEnrollment) {
    this.sentryEnrollment = sentryEnrollment;
    return this;
  }

  /**
   * Get sentryEnrollment
   * @return sentryEnrollment
   */
  @javax.annotation.Nullable
  public UpdateNetworkWirelessSsidSplashSettingsRequestSentryEnrollment getSentryEnrollment() {
    return sentryEnrollment;
  }

  public void setSentryEnrollment(UpdateNetworkWirelessSsidSplashSettingsRequestSentryEnrollment sentryEnrollment) {
    this.sentryEnrollment = sentryEnrollment;
  }


  public UpdateNetworkWirelessSsidSplashSettingsRequest splashImage(UpdateNetworkWirelessSsidSplashSettingsRequestSplashImage splashImage) {
    this.splashImage = splashImage;
    return this;
  }

  /**
   * Get splashImage
   * @return splashImage
   */
  @javax.annotation.Nullable
  public UpdateNetworkWirelessSsidSplashSettingsRequestSplashImage getSplashImage() {
    return splashImage;
  }

  public void setSplashImage(UpdateNetworkWirelessSsidSplashSettingsRequestSplashImage splashImage) {
    this.splashImage = splashImage;
  }


  public UpdateNetworkWirelessSsidSplashSettingsRequest splashLogo(UpdateNetworkWirelessSsidSplashSettingsRequestSplashLogo splashLogo) {
    this.splashLogo = splashLogo;
    return this;
  }

  /**
   * Get splashLogo
   * @return splashLogo
   */
  @javax.annotation.Nullable
  public UpdateNetworkWirelessSsidSplashSettingsRequestSplashLogo getSplashLogo() {
    return splashLogo;
  }

  public void setSplashLogo(UpdateNetworkWirelessSsidSplashSettingsRequestSplashLogo splashLogo) {
    this.splashLogo = splashLogo;
  }


  public UpdateNetworkWirelessSsidSplashSettingsRequest splashPrepaidFront(UpdateNetworkWirelessSsidSplashSettingsRequestSplashPrepaidFront splashPrepaidFront) {
    this.splashPrepaidFront = splashPrepaidFront;
    return this;
  }

  /**
   * Get splashPrepaidFront
   * @return splashPrepaidFront
   */
  @javax.annotation.Nullable
  public UpdateNetworkWirelessSsidSplashSettingsRequestSplashPrepaidFront getSplashPrepaidFront() {
    return splashPrepaidFront;
  }

  public void setSplashPrepaidFront(UpdateNetworkWirelessSsidSplashSettingsRequestSplashPrepaidFront splashPrepaidFront) {
    this.splashPrepaidFront = splashPrepaidFront;
  }


  public UpdateNetworkWirelessSsidSplashSettingsRequest splashTimeout(Integer splashTimeout) {
    this.splashTimeout = splashTimeout;
    return this;
  }

  /**
   * Splash timeout in minutes. This will determine how often users will see the splash page.
   * @return splashTimeout
   */
  @javax.annotation.Nullable
  public Integer getSplashTimeout() {
    return splashTimeout;
  }

  public void setSplashTimeout(Integer splashTimeout) {
    this.splashTimeout = splashTimeout;
  }


  public UpdateNetworkWirelessSsidSplashSettingsRequest splashUrl(String splashUrl) {
    this.splashUrl = splashUrl;
    return this;
  }

  /**
   * [optional] The custom splash URL of the click-through splash page. Note that the URL can be configured without necessarily being used. In order to enable the custom URL, see &#39;useSplashUrl&#39;
   * @return splashUrl
   */
  @javax.annotation.Nullable
  public String getSplashUrl() {
    return splashUrl;
  }

  public void setSplashUrl(String splashUrl) {
    this.splashUrl = splashUrl;
  }


  public UpdateNetworkWirelessSsidSplashSettingsRequest useRedirectUrl(Boolean useRedirectUrl) {
    this.useRedirectUrl = useRedirectUrl;
    return this;
  }

  /**
   * The Boolean indicating whether the the user will be redirected to the custom redirect URL after the splash page. A custom redirect URL must be set if this is true.
   * @return useRedirectUrl
   */
  @javax.annotation.Nullable
  public Boolean getUseRedirectUrl() {
    return useRedirectUrl;
  }

  public void setUseRedirectUrl(Boolean useRedirectUrl) {
    this.useRedirectUrl = useRedirectUrl;
  }


  public UpdateNetworkWirelessSsidSplashSettingsRequest useSplashUrl(Boolean useSplashUrl) {
    this.useSplashUrl = useSplashUrl;
    return this;
  }

  /**
   * [optional] Boolean indicating whether the users will be redirected to the custom splash url. A custom splash URL must be set if this is true. Note that depending on your SSID&#39;s access control settings, it may not be possible to use the custom splash URL.
   * @return useSplashUrl
   */
  @javax.annotation.Nullable
  public Boolean getUseSplashUrl() {
    return useSplashUrl;
  }

  public void setUseSplashUrl(Boolean useSplashUrl) {
    this.useSplashUrl = useSplashUrl;
  }


  public UpdateNetworkWirelessSsidSplashSettingsRequest welcomeMessage(String welcomeMessage) {
    this.welcomeMessage = welcomeMessage;
    return this;
  }

  /**
   * The welcome message for the users on the splash page.
   * @return welcomeMessage
   */
  @javax.annotation.Nullable
  public String getWelcomeMessage() {
    return welcomeMessage;
  }

  public void setWelcomeMessage(String welcomeMessage) {
    this.welcomeMessage = welcomeMessage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateNetworkWirelessSsidSplashSettingsRequest updateNetworkWirelessSsidSplashSettingsRequest = (UpdateNetworkWirelessSsidSplashSettingsRequest) o;
    return Objects.equals(this.allowSimultaneousLogins, updateNetworkWirelessSsidSplashSettingsRequest.allowSimultaneousLogins) &&
        Objects.equals(this.billing, updateNetworkWirelessSsidSplashSettingsRequest.billing) &&
        Objects.equals(this.blockAllTrafficBeforeSignOn, updateNetworkWirelessSsidSplashSettingsRequest.blockAllTrafficBeforeSignOn) &&
        Objects.equals(this.controllerDisconnectionBehavior, updateNetworkWirelessSsidSplashSettingsRequest.controllerDisconnectionBehavior) &&
        Objects.equals(this.guestSponsorship, updateNetworkWirelessSsidSplashSettingsRequest.guestSponsorship) &&
        Objects.equals(this.redirectUrl, updateNetworkWirelessSsidSplashSettingsRequest.redirectUrl) &&
        Objects.equals(this.sentryEnrollment, updateNetworkWirelessSsidSplashSettingsRequest.sentryEnrollment) &&
        Objects.equals(this.splashImage, updateNetworkWirelessSsidSplashSettingsRequest.splashImage) &&
        Objects.equals(this.splashLogo, updateNetworkWirelessSsidSplashSettingsRequest.splashLogo) &&
        Objects.equals(this.splashPrepaidFront, updateNetworkWirelessSsidSplashSettingsRequest.splashPrepaidFront) &&
        Objects.equals(this.splashTimeout, updateNetworkWirelessSsidSplashSettingsRequest.splashTimeout) &&
        Objects.equals(this.splashUrl, updateNetworkWirelessSsidSplashSettingsRequest.splashUrl) &&
        Objects.equals(this.useRedirectUrl, updateNetworkWirelessSsidSplashSettingsRequest.useRedirectUrl) &&
        Objects.equals(this.useSplashUrl, updateNetworkWirelessSsidSplashSettingsRequest.useSplashUrl) &&
        Objects.equals(this.welcomeMessage, updateNetworkWirelessSsidSplashSettingsRequest.welcomeMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowSimultaneousLogins, billing, blockAllTrafficBeforeSignOn, controllerDisconnectionBehavior, guestSponsorship, redirectUrl, sentryEnrollment, splashImage, splashLogo, splashPrepaidFront, splashTimeout, splashUrl, useRedirectUrl, useSplashUrl, welcomeMessage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateNetworkWirelessSsidSplashSettingsRequest {\n");
    sb.append("    allowSimultaneousLogins: ").append(toIndentedString(allowSimultaneousLogins)).append("\n");
    sb.append("    billing: ").append(toIndentedString(billing)).append("\n");
    sb.append("    blockAllTrafficBeforeSignOn: ").append(toIndentedString(blockAllTrafficBeforeSignOn)).append("\n");
    sb.append("    controllerDisconnectionBehavior: ").append(toIndentedString(controllerDisconnectionBehavior)).append("\n");
    sb.append("    guestSponsorship: ").append(toIndentedString(guestSponsorship)).append("\n");
    sb.append("    redirectUrl: ").append(toIndentedString(redirectUrl)).append("\n");
    sb.append("    sentryEnrollment: ").append(toIndentedString(sentryEnrollment)).append("\n");
    sb.append("    splashImage: ").append(toIndentedString(splashImage)).append("\n");
    sb.append("    splashLogo: ").append(toIndentedString(splashLogo)).append("\n");
    sb.append("    splashPrepaidFront: ").append(toIndentedString(splashPrepaidFront)).append("\n");
    sb.append("    splashTimeout: ").append(toIndentedString(splashTimeout)).append("\n");
    sb.append("    splashUrl: ").append(toIndentedString(splashUrl)).append("\n");
    sb.append("    useRedirectUrl: ").append(toIndentedString(useRedirectUrl)).append("\n");
    sb.append("    useSplashUrl: ").append(toIndentedString(useSplashUrl)).append("\n");
    sb.append("    welcomeMessage: ").append(toIndentedString(welcomeMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowSimultaneousLogins");
    openapiFields.add("billing");
    openapiFields.add("blockAllTrafficBeforeSignOn");
    openapiFields.add("controllerDisconnectionBehavior");
    openapiFields.add("guestSponsorship");
    openapiFields.add("redirectUrl");
    openapiFields.add("sentryEnrollment");
    openapiFields.add("splashImage");
    openapiFields.add("splashLogo");
    openapiFields.add("splashPrepaidFront");
    openapiFields.add("splashTimeout");
    openapiFields.add("splashUrl");
    openapiFields.add("useRedirectUrl");
    openapiFields.add("useSplashUrl");
    openapiFields.add("welcomeMessage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateNetworkWirelessSsidSplashSettingsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateNetworkWirelessSsidSplashSettingsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateNetworkWirelessSsidSplashSettingsRequest is not found in the empty JSON string", UpdateNetworkWirelessSsidSplashSettingsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateNetworkWirelessSsidSplashSettingsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateNetworkWirelessSsidSplashSettingsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `billing`
      if (jsonObj.get("billing") != null && !jsonObj.get("billing").isJsonNull()) {
        UpdateNetworkWirelessSsidSplashSettingsRequestBilling.validateJsonElement(jsonObj.get("billing"));
      }
      if ((jsonObj.get("controllerDisconnectionBehavior") != null && !jsonObj.get("controllerDisconnectionBehavior").isJsonNull()) && !jsonObj.get("controllerDisconnectionBehavior").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `controllerDisconnectionBehavior` to be a primitive type in the JSON string but got `%s`", jsonObj.get("controllerDisconnectionBehavior").toString()));
      }
      // validate the optional field `controllerDisconnectionBehavior`
      if (jsonObj.get("controllerDisconnectionBehavior") != null && !jsonObj.get("controllerDisconnectionBehavior").isJsonNull()) {
        ControllerDisconnectionBehaviorEnum.validateJsonElement(jsonObj.get("controllerDisconnectionBehavior"));
      }
      // validate the optional field `guestSponsorship`
      if (jsonObj.get("guestSponsorship") != null && !jsonObj.get("guestSponsorship").isJsonNull()) {
        UpdateNetworkWirelessSsidSplashSettingsRequestGuestSponsorship.validateJsonElement(jsonObj.get("guestSponsorship"));
      }
      if ((jsonObj.get("redirectUrl") != null && !jsonObj.get("redirectUrl").isJsonNull()) && !jsonObj.get("redirectUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirectUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redirectUrl").toString()));
      }
      // validate the optional field `sentryEnrollment`
      if (jsonObj.get("sentryEnrollment") != null && !jsonObj.get("sentryEnrollment").isJsonNull()) {
        UpdateNetworkWirelessSsidSplashSettingsRequestSentryEnrollment.validateJsonElement(jsonObj.get("sentryEnrollment"));
      }
      // validate the optional field `splashImage`
      if (jsonObj.get("splashImage") != null && !jsonObj.get("splashImage").isJsonNull()) {
        UpdateNetworkWirelessSsidSplashSettingsRequestSplashImage.validateJsonElement(jsonObj.get("splashImage"));
      }
      // validate the optional field `splashLogo`
      if (jsonObj.get("splashLogo") != null && !jsonObj.get("splashLogo").isJsonNull()) {
        UpdateNetworkWirelessSsidSplashSettingsRequestSplashLogo.validateJsonElement(jsonObj.get("splashLogo"));
      }
      // validate the optional field `splashPrepaidFront`
      if (jsonObj.get("splashPrepaidFront") != null && !jsonObj.get("splashPrepaidFront").isJsonNull()) {
        UpdateNetworkWirelessSsidSplashSettingsRequestSplashPrepaidFront.validateJsonElement(jsonObj.get("splashPrepaidFront"));
      }
      if ((jsonObj.get("splashUrl") != null && !jsonObj.get("splashUrl").isJsonNull()) && !jsonObj.get("splashUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `splashUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("splashUrl").toString()));
      }
      if ((jsonObj.get("welcomeMessage") != null && !jsonObj.get("welcomeMessage").isJsonNull()) && !jsonObj.get("welcomeMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `welcomeMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("welcomeMessage").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateNetworkWirelessSsidSplashSettingsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateNetworkWirelessSsidSplashSettingsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateNetworkWirelessSsidSplashSettingsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateNetworkWirelessSsidSplashSettingsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateNetworkWirelessSsidSplashSettingsRequest>() {
           @Override
           public void write(JsonWriter out, UpdateNetworkWirelessSsidSplashSettingsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateNetworkWirelessSsidSplashSettingsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateNetworkWirelessSsidSplashSettingsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateNetworkWirelessSsidSplashSettingsRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateNetworkWirelessSsidSplashSettingsRequest
   */
  public static UpdateNetworkWirelessSsidSplashSettingsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateNetworkWirelessSsidSplashSettingsRequest.class);
  }

  /**
   * Convert an instance of UpdateNetworkWirelessSsidSplashSettingsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

