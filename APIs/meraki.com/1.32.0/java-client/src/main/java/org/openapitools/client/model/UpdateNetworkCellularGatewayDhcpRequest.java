/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateNetworkCellularGatewayDhcpRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateNetworkCellularGatewayDhcpRequest {
  public static final String SERIALIZED_NAME_DHCP_LEASE_TIME = "dhcpLeaseTime";
  @SerializedName(SERIALIZED_NAME_DHCP_LEASE_TIME)
  private String dhcpLeaseTime;

  public static final String SERIALIZED_NAME_DNS_CUSTOM_NAMESERVERS = "dnsCustomNameservers";
  @SerializedName(SERIALIZED_NAME_DNS_CUSTOM_NAMESERVERS)
  private List<String> dnsCustomNameservers = new ArrayList<>();

  public static final String SERIALIZED_NAME_DNS_NAMESERVERS = "dnsNameservers";
  @SerializedName(SERIALIZED_NAME_DNS_NAMESERVERS)
  private String dnsNameservers;

  public UpdateNetworkCellularGatewayDhcpRequest() {
  }

  public UpdateNetworkCellularGatewayDhcpRequest dhcpLeaseTime(String dhcpLeaseTime) {
    this.dhcpLeaseTime = dhcpLeaseTime;
    return this;
  }

  /**
   * DHCP Lease time for all MG of the network. Possible values are &#39;30 minutes&#39;, &#39;1 hour&#39;, &#39;4 hours&#39;, &#39;12 hours&#39;, &#39;1 day&#39; or &#39;1 week&#39;.
   * @return dhcpLeaseTime
   */
  @javax.annotation.Nullable
  public String getDhcpLeaseTime() {
    return dhcpLeaseTime;
  }

  public void setDhcpLeaseTime(String dhcpLeaseTime) {
    this.dhcpLeaseTime = dhcpLeaseTime;
  }


  public UpdateNetworkCellularGatewayDhcpRequest dnsCustomNameservers(List<String> dnsCustomNameservers) {
    this.dnsCustomNameservers = dnsCustomNameservers;
    return this;
  }

  public UpdateNetworkCellularGatewayDhcpRequest addDnsCustomNameserversItem(String dnsCustomNameserversItem) {
    if (this.dnsCustomNameservers == null) {
      this.dnsCustomNameservers = new ArrayList<>();
    }
    this.dnsCustomNameservers.add(dnsCustomNameserversItem);
    return this;
  }

  /**
   * list of fixed IPs representing the the DNS Name servers when the mode is &#39;custom&#39;
   * @return dnsCustomNameservers
   */
  @javax.annotation.Nullable
  public List<String> getDnsCustomNameservers() {
    return dnsCustomNameservers;
  }

  public void setDnsCustomNameservers(List<String> dnsCustomNameservers) {
    this.dnsCustomNameservers = dnsCustomNameservers;
  }


  public UpdateNetworkCellularGatewayDhcpRequest dnsNameservers(String dnsNameservers) {
    this.dnsNameservers = dnsNameservers;
    return this;
  }

  /**
   * DNS name servers mode for all MG of the network. Possible values are: &#39;upstream_dns&#39;, &#39;google_dns&#39;, &#39;opendns&#39;, &#39;custom&#39;.
   * @return dnsNameservers
   */
  @javax.annotation.Nullable
  public String getDnsNameservers() {
    return dnsNameservers;
  }

  public void setDnsNameservers(String dnsNameservers) {
    this.dnsNameservers = dnsNameservers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateNetworkCellularGatewayDhcpRequest updateNetworkCellularGatewayDhcpRequest = (UpdateNetworkCellularGatewayDhcpRequest) o;
    return Objects.equals(this.dhcpLeaseTime, updateNetworkCellularGatewayDhcpRequest.dhcpLeaseTime) &&
        Objects.equals(this.dnsCustomNameservers, updateNetworkCellularGatewayDhcpRequest.dnsCustomNameservers) &&
        Objects.equals(this.dnsNameservers, updateNetworkCellularGatewayDhcpRequest.dnsNameservers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dhcpLeaseTime, dnsCustomNameservers, dnsNameservers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateNetworkCellularGatewayDhcpRequest {\n");
    sb.append("    dhcpLeaseTime: ").append(toIndentedString(dhcpLeaseTime)).append("\n");
    sb.append("    dnsCustomNameservers: ").append(toIndentedString(dnsCustomNameservers)).append("\n");
    sb.append("    dnsNameservers: ").append(toIndentedString(dnsNameservers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dhcpLeaseTime");
    openapiFields.add("dnsCustomNameservers");
    openapiFields.add("dnsNameservers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateNetworkCellularGatewayDhcpRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateNetworkCellularGatewayDhcpRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateNetworkCellularGatewayDhcpRequest is not found in the empty JSON string", UpdateNetworkCellularGatewayDhcpRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateNetworkCellularGatewayDhcpRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateNetworkCellularGatewayDhcpRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dhcpLeaseTime") != null && !jsonObj.get("dhcpLeaseTime").isJsonNull()) && !jsonObj.get("dhcpLeaseTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dhcpLeaseTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dhcpLeaseTime").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("dnsCustomNameservers") != null && !jsonObj.get("dnsCustomNameservers").isJsonNull() && !jsonObj.get("dnsCustomNameservers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dnsCustomNameservers` to be an array in the JSON string but got `%s`", jsonObj.get("dnsCustomNameservers").toString()));
      }
      if ((jsonObj.get("dnsNameservers") != null && !jsonObj.get("dnsNameservers").isJsonNull()) && !jsonObj.get("dnsNameservers").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dnsNameservers` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dnsNameservers").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateNetworkCellularGatewayDhcpRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateNetworkCellularGatewayDhcpRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateNetworkCellularGatewayDhcpRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateNetworkCellularGatewayDhcpRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateNetworkCellularGatewayDhcpRequest>() {
           @Override
           public void write(JsonWriter out, UpdateNetworkCellularGatewayDhcpRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateNetworkCellularGatewayDhcpRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateNetworkCellularGatewayDhcpRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateNetworkCellularGatewayDhcpRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateNetworkCellularGatewayDhcpRequest
   */
  public static UpdateNetworkCellularGatewayDhcpRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateNetworkCellularGatewayDhcpRequest.class);
  }

  /**
   * Convert an instance of UpdateNetworkCellularGatewayDhcpRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

