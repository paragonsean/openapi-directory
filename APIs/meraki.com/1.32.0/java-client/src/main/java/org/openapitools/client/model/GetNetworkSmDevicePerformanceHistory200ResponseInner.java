/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GetNetworkSmDevicePerformanceHistory200ResponseInnerDiskUsage;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetNetworkSmDevicePerformanceHistory200ResponseInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetNetworkSmDevicePerformanceHistory200ResponseInner {
  public static final String SERIALIZED_NAME_CPU_PERCENT_USED = "cpuPercentUsed";
  @SerializedName(SERIALIZED_NAME_CPU_PERCENT_USED)
  private Float cpuPercentUsed;

  public static final String SERIALIZED_NAME_DISK_USAGE = "diskUsage";
  @SerializedName(SERIALIZED_NAME_DISK_USAGE)
  private GetNetworkSmDevicePerformanceHistory200ResponseInnerDiskUsage diskUsage;

  public static final String SERIALIZED_NAME_MEM_ACTIVE = "memActive";
  @SerializedName(SERIALIZED_NAME_MEM_ACTIVE)
  private Integer memActive;

  public static final String SERIALIZED_NAME_MEM_FREE = "memFree";
  @SerializedName(SERIALIZED_NAME_MEM_FREE)
  private Integer memFree;

  public static final String SERIALIZED_NAME_MEM_INACTIVE = "memInactive";
  @SerializedName(SERIALIZED_NAME_MEM_INACTIVE)
  private Integer memInactive;

  public static final String SERIALIZED_NAME_MEM_WIRED = "memWired";
  @SerializedName(SERIALIZED_NAME_MEM_WIRED)
  private Integer memWired;

  public static final String SERIALIZED_NAME_NETWORK_RECEIVED = "networkReceived";
  @SerializedName(SERIALIZED_NAME_NETWORK_RECEIVED)
  private Integer networkReceived;

  public static final String SERIALIZED_NAME_NETWORK_SENT = "networkSent";
  @SerializedName(SERIALIZED_NAME_NETWORK_SENT)
  private Integer networkSent;

  public static final String SERIALIZED_NAME_SWAP_USED = "swapUsed";
  @SerializedName(SERIALIZED_NAME_SWAP_USED)
  private Integer swapUsed;

  public static final String SERIALIZED_NAME_TS = "ts";
  @SerializedName(SERIALIZED_NAME_TS)
  private String ts;

  public GetNetworkSmDevicePerformanceHistory200ResponseInner() {
  }

  public GetNetworkSmDevicePerformanceHistory200ResponseInner cpuPercentUsed(Float cpuPercentUsed) {
    this.cpuPercentUsed = cpuPercentUsed;
    return this;
  }

  /**
   * The percentage of CPU used as a decimal format.
   * @return cpuPercentUsed
   */
  @javax.annotation.Nullable
  public Float getCpuPercentUsed() {
    return cpuPercentUsed;
  }

  public void setCpuPercentUsed(Float cpuPercentUsed) {
    this.cpuPercentUsed = cpuPercentUsed;
  }


  public GetNetworkSmDevicePerformanceHistory200ResponseInner diskUsage(GetNetworkSmDevicePerformanceHistory200ResponseInnerDiskUsage diskUsage) {
    this.diskUsage = diskUsage;
    return this;
  }

  /**
   * Get diskUsage
   * @return diskUsage
   */
  @javax.annotation.Nullable
  public GetNetworkSmDevicePerformanceHistory200ResponseInnerDiskUsage getDiskUsage() {
    return diskUsage;
  }

  public void setDiskUsage(GetNetworkSmDevicePerformanceHistory200ResponseInnerDiskUsage diskUsage) {
    this.diskUsage = diskUsage;
  }


  public GetNetworkSmDevicePerformanceHistory200ResponseInner memActive(Integer memActive) {
    this.memActive = memActive;
    return this;
  }

  /**
   * The active RAM on the device.
   * @return memActive
   */
  @javax.annotation.Nullable
  public Integer getMemActive() {
    return memActive;
  }

  public void setMemActive(Integer memActive) {
    this.memActive = memActive;
  }


  public GetNetworkSmDevicePerformanceHistory200ResponseInner memFree(Integer memFree) {
    this.memFree = memFree;
    return this;
  }

  /**
   * Memory that is not yet in use by the system.
   * @return memFree
   */
  @javax.annotation.Nullable
  public Integer getMemFree() {
    return memFree;
  }

  public void setMemFree(Integer memFree) {
    this.memFree = memFree;
  }


  public GetNetworkSmDevicePerformanceHistory200ResponseInner memInactive(Integer memInactive) {
    this.memInactive = memInactive;
    return this;
  }

  /**
   * The inactive RAM on the device.
   * @return memInactive
   */
  @javax.annotation.Nullable
  public Integer getMemInactive() {
    return memInactive;
  }

  public void setMemInactive(Integer memInactive) {
    this.memInactive = memInactive;
  }


  public GetNetworkSmDevicePerformanceHistory200ResponseInner memWired(Integer memWired) {
    this.memWired = memWired;
    return this;
  }

  /**
   * Memory used for core OS functions on the device.
   * @return memWired
   */
  @javax.annotation.Nullable
  public Integer getMemWired() {
    return memWired;
  }

  public void setMemWired(Integer memWired) {
    this.memWired = memWired;
  }


  public GetNetworkSmDevicePerformanceHistory200ResponseInner networkReceived(Integer networkReceived) {
    this.networkReceived = networkReceived;
    return this;
  }

  /**
   * Network bandwith received.
   * @return networkReceived
   */
  @javax.annotation.Nullable
  public Integer getNetworkReceived() {
    return networkReceived;
  }

  public void setNetworkReceived(Integer networkReceived) {
    this.networkReceived = networkReceived;
  }


  public GetNetworkSmDevicePerformanceHistory200ResponseInner networkSent(Integer networkSent) {
    this.networkSent = networkSent;
    return this;
  }

  /**
   * Network bandwith transmitted.
   * @return networkSent
   */
  @javax.annotation.Nullable
  public Integer getNetworkSent() {
    return networkSent;
  }

  public void setNetworkSent(Integer networkSent) {
    this.networkSent = networkSent;
  }


  public GetNetworkSmDevicePerformanceHistory200ResponseInner swapUsed(Integer swapUsed) {
    this.swapUsed = swapUsed;
    return this;
  }

  /**
   * The amount of space being used on the startup disk to swap unused files to and from RAM.
   * @return swapUsed
   */
  @javax.annotation.Nullable
  public Integer getSwapUsed() {
    return swapUsed;
  }

  public void setSwapUsed(Integer swapUsed) {
    this.swapUsed = swapUsed;
  }


  public GetNetworkSmDevicePerformanceHistory200ResponseInner ts(String ts) {
    this.ts = ts;
    return this;
  }

  /**
   * The time at which the performance was measured.
   * @return ts
   */
  @javax.annotation.Nullable
  public String getTs() {
    return ts;
  }

  public void setTs(String ts) {
    this.ts = ts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetNetworkSmDevicePerformanceHistory200ResponseInner getNetworkSmDevicePerformanceHistory200ResponseInner = (GetNetworkSmDevicePerformanceHistory200ResponseInner) o;
    return Objects.equals(this.cpuPercentUsed, getNetworkSmDevicePerformanceHistory200ResponseInner.cpuPercentUsed) &&
        Objects.equals(this.diskUsage, getNetworkSmDevicePerformanceHistory200ResponseInner.diskUsage) &&
        Objects.equals(this.memActive, getNetworkSmDevicePerformanceHistory200ResponseInner.memActive) &&
        Objects.equals(this.memFree, getNetworkSmDevicePerformanceHistory200ResponseInner.memFree) &&
        Objects.equals(this.memInactive, getNetworkSmDevicePerformanceHistory200ResponseInner.memInactive) &&
        Objects.equals(this.memWired, getNetworkSmDevicePerformanceHistory200ResponseInner.memWired) &&
        Objects.equals(this.networkReceived, getNetworkSmDevicePerformanceHistory200ResponseInner.networkReceived) &&
        Objects.equals(this.networkSent, getNetworkSmDevicePerformanceHistory200ResponseInner.networkSent) &&
        Objects.equals(this.swapUsed, getNetworkSmDevicePerformanceHistory200ResponseInner.swapUsed) &&
        Objects.equals(this.ts, getNetworkSmDevicePerformanceHistory200ResponseInner.ts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cpuPercentUsed, diskUsage, memActive, memFree, memInactive, memWired, networkReceived, networkSent, swapUsed, ts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetNetworkSmDevicePerformanceHistory200ResponseInner {\n");
    sb.append("    cpuPercentUsed: ").append(toIndentedString(cpuPercentUsed)).append("\n");
    sb.append("    diskUsage: ").append(toIndentedString(diskUsage)).append("\n");
    sb.append("    memActive: ").append(toIndentedString(memActive)).append("\n");
    sb.append("    memFree: ").append(toIndentedString(memFree)).append("\n");
    sb.append("    memInactive: ").append(toIndentedString(memInactive)).append("\n");
    sb.append("    memWired: ").append(toIndentedString(memWired)).append("\n");
    sb.append("    networkReceived: ").append(toIndentedString(networkReceived)).append("\n");
    sb.append("    networkSent: ").append(toIndentedString(networkSent)).append("\n");
    sb.append("    swapUsed: ").append(toIndentedString(swapUsed)).append("\n");
    sb.append("    ts: ").append(toIndentedString(ts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cpuPercentUsed");
    openapiFields.add("diskUsage");
    openapiFields.add("memActive");
    openapiFields.add("memFree");
    openapiFields.add("memInactive");
    openapiFields.add("memWired");
    openapiFields.add("networkReceived");
    openapiFields.add("networkSent");
    openapiFields.add("swapUsed");
    openapiFields.add("ts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetNetworkSmDevicePerformanceHistory200ResponseInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetNetworkSmDevicePerformanceHistory200ResponseInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetNetworkSmDevicePerformanceHistory200ResponseInner is not found in the empty JSON string", GetNetworkSmDevicePerformanceHistory200ResponseInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetNetworkSmDevicePerformanceHistory200ResponseInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetNetworkSmDevicePerformanceHistory200ResponseInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `diskUsage`
      if (jsonObj.get("diskUsage") != null && !jsonObj.get("diskUsage").isJsonNull()) {
        GetNetworkSmDevicePerformanceHistory200ResponseInnerDiskUsage.validateJsonElement(jsonObj.get("diskUsage"));
      }
      if ((jsonObj.get("ts") != null && !jsonObj.get("ts").isJsonNull()) && !jsonObj.get("ts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ts").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetNetworkSmDevicePerformanceHistory200ResponseInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetNetworkSmDevicePerformanceHistory200ResponseInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetNetworkSmDevicePerformanceHistory200ResponseInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetNetworkSmDevicePerformanceHistory200ResponseInner.class));

       return (TypeAdapter<T>) new TypeAdapter<GetNetworkSmDevicePerformanceHistory200ResponseInner>() {
           @Override
           public void write(JsonWriter out, GetNetworkSmDevicePerformanceHistory200ResponseInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetNetworkSmDevicePerformanceHistory200ResponseInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetNetworkSmDevicePerformanceHistory200ResponseInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetNetworkSmDevicePerformanceHistory200ResponseInner
   * @throws IOException if the JSON string is invalid with respect to GetNetworkSmDevicePerformanceHistory200ResponseInner
   */
  public static GetNetworkSmDevicePerformanceHistory200ResponseInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetNetworkSmDevicePerformanceHistory200ResponseInner.class);
  }

  /**
   * Convert an instance of GetNetworkSmDevicePerformanceHistory200ResponseInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

