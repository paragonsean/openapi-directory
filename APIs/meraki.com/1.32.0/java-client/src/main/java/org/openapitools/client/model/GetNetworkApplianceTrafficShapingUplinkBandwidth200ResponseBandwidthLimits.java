/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GetNetworkApplianceTrafficShapingUplinkBandwidth200ResponseBandwidthLimitsCellular;
import org.openapitools.client.model.GetNetworkApplianceTrafficShapingUplinkBandwidth200ResponseBandwidthLimitsWan1;
import org.openapitools.client.model.GetNetworkApplianceTrafficShapingUplinkBandwidth200ResponseBandwidthLimitsWan2;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A hash uplink keys and their configured settings for the Appliance
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetNetworkApplianceTrafficShapingUplinkBandwidth200ResponseBandwidthLimits {
  public static final String SERIALIZED_NAME_CELLULAR = "cellular";
  @SerializedName(SERIALIZED_NAME_CELLULAR)
  private GetNetworkApplianceTrafficShapingUplinkBandwidth200ResponseBandwidthLimitsCellular cellular;

  public static final String SERIALIZED_NAME_WAN1 = "wan1";
  @SerializedName(SERIALIZED_NAME_WAN1)
  private GetNetworkApplianceTrafficShapingUplinkBandwidth200ResponseBandwidthLimitsWan1 wan1;

  public static final String SERIALIZED_NAME_WAN2 = "wan2";
  @SerializedName(SERIALIZED_NAME_WAN2)
  private GetNetworkApplianceTrafficShapingUplinkBandwidth200ResponseBandwidthLimitsWan2 wan2;

  public GetNetworkApplianceTrafficShapingUplinkBandwidth200ResponseBandwidthLimits() {
  }

  public GetNetworkApplianceTrafficShapingUplinkBandwidth200ResponseBandwidthLimits cellular(GetNetworkApplianceTrafficShapingUplinkBandwidth200ResponseBandwidthLimitsCellular cellular) {
    this.cellular = cellular;
    return this;
  }

  /**
   * Get cellular
   * @return cellular
   */
  @javax.annotation.Nullable
  public GetNetworkApplianceTrafficShapingUplinkBandwidth200ResponseBandwidthLimitsCellular getCellular() {
    return cellular;
  }

  public void setCellular(GetNetworkApplianceTrafficShapingUplinkBandwidth200ResponseBandwidthLimitsCellular cellular) {
    this.cellular = cellular;
  }


  public GetNetworkApplianceTrafficShapingUplinkBandwidth200ResponseBandwidthLimits wan1(GetNetworkApplianceTrafficShapingUplinkBandwidth200ResponseBandwidthLimitsWan1 wan1) {
    this.wan1 = wan1;
    return this;
  }

  /**
   * Get wan1
   * @return wan1
   */
  @javax.annotation.Nullable
  public GetNetworkApplianceTrafficShapingUplinkBandwidth200ResponseBandwidthLimitsWan1 getWan1() {
    return wan1;
  }

  public void setWan1(GetNetworkApplianceTrafficShapingUplinkBandwidth200ResponseBandwidthLimitsWan1 wan1) {
    this.wan1 = wan1;
  }


  public GetNetworkApplianceTrafficShapingUplinkBandwidth200ResponseBandwidthLimits wan2(GetNetworkApplianceTrafficShapingUplinkBandwidth200ResponseBandwidthLimitsWan2 wan2) {
    this.wan2 = wan2;
    return this;
  }

  /**
   * Get wan2
   * @return wan2
   */
  @javax.annotation.Nullable
  public GetNetworkApplianceTrafficShapingUplinkBandwidth200ResponseBandwidthLimitsWan2 getWan2() {
    return wan2;
  }

  public void setWan2(GetNetworkApplianceTrafficShapingUplinkBandwidth200ResponseBandwidthLimitsWan2 wan2) {
    this.wan2 = wan2;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetNetworkApplianceTrafficShapingUplinkBandwidth200ResponseBandwidthLimits getNetworkApplianceTrafficShapingUplinkBandwidth200ResponseBandwidthLimits = (GetNetworkApplianceTrafficShapingUplinkBandwidth200ResponseBandwidthLimits) o;
    return Objects.equals(this.cellular, getNetworkApplianceTrafficShapingUplinkBandwidth200ResponseBandwidthLimits.cellular) &&
        Objects.equals(this.wan1, getNetworkApplianceTrafficShapingUplinkBandwidth200ResponseBandwidthLimits.wan1) &&
        Objects.equals(this.wan2, getNetworkApplianceTrafficShapingUplinkBandwidth200ResponseBandwidthLimits.wan2);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cellular, wan1, wan2);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetNetworkApplianceTrafficShapingUplinkBandwidth200ResponseBandwidthLimits {\n");
    sb.append("    cellular: ").append(toIndentedString(cellular)).append("\n");
    sb.append("    wan1: ").append(toIndentedString(wan1)).append("\n");
    sb.append("    wan2: ").append(toIndentedString(wan2)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cellular");
    openapiFields.add("wan1");
    openapiFields.add("wan2");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetNetworkApplianceTrafficShapingUplinkBandwidth200ResponseBandwidthLimits
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetNetworkApplianceTrafficShapingUplinkBandwidth200ResponseBandwidthLimits.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetNetworkApplianceTrafficShapingUplinkBandwidth200ResponseBandwidthLimits is not found in the empty JSON string", GetNetworkApplianceTrafficShapingUplinkBandwidth200ResponseBandwidthLimits.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetNetworkApplianceTrafficShapingUplinkBandwidth200ResponseBandwidthLimits.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetNetworkApplianceTrafficShapingUplinkBandwidth200ResponseBandwidthLimits` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `cellular`
      if (jsonObj.get("cellular") != null && !jsonObj.get("cellular").isJsonNull()) {
        GetNetworkApplianceTrafficShapingUplinkBandwidth200ResponseBandwidthLimitsCellular.validateJsonElement(jsonObj.get("cellular"));
      }
      // validate the optional field `wan1`
      if (jsonObj.get("wan1") != null && !jsonObj.get("wan1").isJsonNull()) {
        GetNetworkApplianceTrafficShapingUplinkBandwidth200ResponseBandwidthLimitsWan1.validateJsonElement(jsonObj.get("wan1"));
      }
      // validate the optional field `wan2`
      if (jsonObj.get("wan2") != null && !jsonObj.get("wan2").isJsonNull()) {
        GetNetworkApplianceTrafficShapingUplinkBandwidth200ResponseBandwidthLimitsWan2.validateJsonElement(jsonObj.get("wan2"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetNetworkApplianceTrafficShapingUplinkBandwidth200ResponseBandwidthLimits.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetNetworkApplianceTrafficShapingUplinkBandwidth200ResponseBandwidthLimits' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetNetworkApplianceTrafficShapingUplinkBandwidth200ResponseBandwidthLimits> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetNetworkApplianceTrafficShapingUplinkBandwidth200ResponseBandwidthLimits.class));

       return (TypeAdapter<T>) new TypeAdapter<GetNetworkApplianceTrafficShapingUplinkBandwidth200ResponseBandwidthLimits>() {
           @Override
           public void write(JsonWriter out, GetNetworkApplianceTrafficShapingUplinkBandwidth200ResponseBandwidthLimits value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetNetworkApplianceTrafficShapingUplinkBandwidth200ResponseBandwidthLimits read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetNetworkApplianceTrafficShapingUplinkBandwidth200ResponseBandwidthLimits given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetNetworkApplianceTrafficShapingUplinkBandwidth200ResponseBandwidthLimits
   * @throws IOException if the JSON string is invalid with respect to GetNetworkApplianceTrafficShapingUplinkBandwidth200ResponseBandwidthLimits
   */
  public static GetNetworkApplianceTrafficShapingUplinkBandwidth200ResponseBandwidthLimits fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetNetworkApplianceTrafficShapingUplinkBandwidth200ResponseBandwidthLimits.class);
  }

  /**
   * Convert an instance of GetNetworkApplianceTrafficShapingUplinkBandwidth200ResponseBandwidthLimits to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

