/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GetNetworkWirelessSsidEapOverride200ResponseEapolKey;
import org.openapitools.client.model.GetNetworkWirelessSsidEapOverride200ResponseIdentity;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetNetworkWirelessSsidEapOverride200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:52.491325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetNetworkWirelessSsidEapOverride200Response {
  public static final String SERIALIZED_NAME_EAPOL_KEY = "eapolKey";
  @SerializedName(SERIALIZED_NAME_EAPOL_KEY)
  private GetNetworkWirelessSsidEapOverride200ResponseEapolKey eapolKey;

  public static final String SERIALIZED_NAME_IDENTITY = "identity";
  @SerializedName(SERIALIZED_NAME_IDENTITY)
  private GetNetworkWirelessSsidEapOverride200ResponseIdentity identity;

  public static final String SERIALIZED_NAME_MAX_RETRIES = "maxRetries";
  @SerializedName(SERIALIZED_NAME_MAX_RETRIES)
  private Integer maxRetries;

  public static final String SERIALIZED_NAME_TIMEOUT = "timeout";
  @SerializedName(SERIALIZED_NAME_TIMEOUT)
  private Integer timeout;

  public GetNetworkWirelessSsidEapOverride200Response() {
  }

  public GetNetworkWirelessSsidEapOverride200Response eapolKey(GetNetworkWirelessSsidEapOverride200ResponseEapolKey eapolKey) {
    this.eapolKey = eapolKey;
    return this;
  }

  /**
   * Get eapolKey
   * @return eapolKey
   */
  @javax.annotation.Nullable
  public GetNetworkWirelessSsidEapOverride200ResponseEapolKey getEapolKey() {
    return eapolKey;
  }

  public void setEapolKey(GetNetworkWirelessSsidEapOverride200ResponseEapolKey eapolKey) {
    this.eapolKey = eapolKey;
  }


  public GetNetworkWirelessSsidEapOverride200Response identity(GetNetworkWirelessSsidEapOverride200ResponseIdentity identity) {
    this.identity = identity;
    return this;
  }

  /**
   * Get identity
   * @return identity
   */
  @javax.annotation.Nullable
  public GetNetworkWirelessSsidEapOverride200ResponseIdentity getIdentity() {
    return identity;
  }

  public void setIdentity(GetNetworkWirelessSsidEapOverride200ResponseIdentity identity) {
    this.identity = identity;
  }


  public GetNetworkWirelessSsidEapOverride200Response maxRetries(Integer maxRetries) {
    this.maxRetries = maxRetries;
    return this;
  }

  /**
   * Maximum number of general EAP retries.
   * @return maxRetries
   */
  @javax.annotation.Nullable
  public Integer getMaxRetries() {
    return maxRetries;
  }

  public void setMaxRetries(Integer maxRetries) {
    this.maxRetries = maxRetries;
  }


  public GetNetworkWirelessSsidEapOverride200Response timeout(Integer timeout) {
    this.timeout = timeout;
    return this;
  }

  /**
   * General EAP timeout in seconds.
   * @return timeout
   */
  @javax.annotation.Nullable
  public Integer getTimeout() {
    return timeout;
  }

  public void setTimeout(Integer timeout) {
    this.timeout = timeout;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetNetworkWirelessSsidEapOverride200Response getNetworkWirelessSsidEapOverride200Response = (GetNetworkWirelessSsidEapOverride200Response) o;
    return Objects.equals(this.eapolKey, getNetworkWirelessSsidEapOverride200Response.eapolKey) &&
        Objects.equals(this.identity, getNetworkWirelessSsidEapOverride200Response.identity) &&
        Objects.equals(this.maxRetries, getNetworkWirelessSsidEapOverride200Response.maxRetries) &&
        Objects.equals(this.timeout, getNetworkWirelessSsidEapOverride200Response.timeout);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eapolKey, identity, maxRetries, timeout);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetNetworkWirelessSsidEapOverride200Response {\n");
    sb.append("    eapolKey: ").append(toIndentedString(eapolKey)).append("\n");
    sb.append("    identity: ").append(toIndentedString(identity)).append("\n");
    sb.append("    maxRetries: ").append(toIndentedString(maxRetries)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("eapolKey");
    openapiFields.add("identity");
    openapiFields.add("maxRetries");
    openapiFields.add("timeout");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetNetworkWirelessSsidEapOverride200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetNetworkWirelessSsidEapOverride200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetNetworkWirelessSsidEapOverride200Response is not found in the empty JSON string", GetNetworkWirelessSsidEapOverride200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetNetworkWirelessSsidEapOverride200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetNetworkWirelessSsidEapOverride200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `eapolKey`
      if (jsonObj.get("eapolKey") != null && !jsonObj.get("eapolKey").isJsonNull()) {
        GetNetworkWirelessSsidEapOverride200ResponseEapolKey.validateJsonElement(jsonObj.get("eapolKey"));
      }
      // validate the optional field `identity`
      if (jsonObj.get("identity") != null && !jsonObj.get("identity").isJsonNull()) {
        GetNetworkWirelessSsidEapOverride200ResponseIdentity.validateJsonElement(jsonObj.get("identity"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetNetworkWirelessSsidEapOverride200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetNetworkWirelessSsidEapOverride200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetNetworkWirelessSsidEapOverride200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetNetworkWirelessSsidEapOverride200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<GetNetworkWirelessSsidEapOverride200Response>() {
           @Override
           public void write(JsonWriter out, GetNetworkWirelessSsidEapOverride200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetNetworkWirelessSsidEapOverride200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetNetworkWirelessSsidEapOverride200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetNetworkWirelessSsidEapOverride200Response
   * @throws IOException if the JSON string is invalid with respect to GetNetworkWirelessSsidEapOverride200Response
   */
  public static GetNetworkWirelessSsidEapOverride200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetNetworkWirelessSsidEapOverride200Response.class);
  }

  /**
   * Convert an instance of GetNetworkWirelessSsidEapOverride200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

