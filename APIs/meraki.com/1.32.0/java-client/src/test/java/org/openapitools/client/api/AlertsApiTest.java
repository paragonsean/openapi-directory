/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateNetworkSensorAlertsProfileRequest;
import org.openapitools.client.model.CreateOrganizationAlertsProfileRequest;
import org.openapitools.client.model.GetNetworkAlertsHistory200ResponseInner;
import org.openapitools.client.model.GetNetworkHealthAlerts200ResponseInner;
import org.openapitools.client.model.GetNetworkSensorAlertsCurrentOverviewByMetric200Response;
import org.openapitools.client.model.GetNetworkSensorAlertsOverviewByMetric200ResponseInner;
import org.openapitools.client.model.GetNetworkSensorAlertsProfiles200ResponseInner;
import org.openapitools.client.model.UpdateNetworkAlertsSettingsRequest;
import org.openapitools.client.model.UpdateNetworkSensorAlertsProfileRequest;
import org.openapitools.client.model.UpdateOrganizationAlertsProfileRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AlertsApi
 */
@Disabled
public class AlertsApiTest {

    private final AlertsApi api = new AlertsApi();

    /**
     * Creates a sensor alert profile for a network.
     *
     * Creates a sensor alert profile for a network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkSensorAlertsProfile_1Test() throws ApiException {
        String networkId = null;
        CreateNetworkSensorAlertsProfileRequest createNetworkSensorAlertsProfileRequest = null;
        GetNetworkSensorAlertsProfiles200ResponseInner response = api.createNetworkSensorAlertsProfile_1(networkId, createNetworkSensorAlertsProfileRequest);
        // TODO: test validations
    }

    /**
     * Create an organization-wide alert configuration
     *
     * Create an organization-wide alert configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationAlertsProfile_1Test() throws ApiException {
        String organizationId = null;
        CreateOrganizationAlertsProfileRequest createOrganizationAlertsProfileRequest = null;
        Object response = api.createOrganizationAlertsProfile_1(organizationId, createOrganizationAlertsProfileRequest);
        // TODO: test validations
    }

    /**
     * Deletes a sensor alert profile from a network.
     *
     * Deletes a sensor alert profile from a network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkSensorAlertsProfile_1Test() throws ApiException {
        String networkId = null;
        String id = null;
        api.deleteNetworkSensorAlertsProfile_1(networkId, id);
        // TODO: test validations
    }

    /**
     * Removes an organization-wide alert config
     *
     * Removes an organization-wide alert config
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganizationAlertsProfile_1Test() throws ApiException {
        String organizationId = null;
        String alertConfigId = null;
        api.deleteOrganizationAlertsProfile_1(organizationId, alertConfigId);
        // TODO: test validations
    }

    /**
     * Return the alert history for this network
     *
     * Return the alert history for this network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkAlertsHistory_1Test() throws ApiException {
        String networkId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<GetNetworkAlertsHistory200ResponseInner> response = api.getNetworkAlertsHistory_1(networkId, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * Return the alert configuration for this network
     *
     * Return the alert configuration for this network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkAlertsSettings_1Test() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkAlertsSettings_1(networkId);
        // TODO: test validations
    }

    /**
     * Return all global alerts on this network
     *
     * Return all global alerts on this network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkHealthAlerts_2Test() throws ApiException {
        String networkId = null;
        List<GetNetworkHealthAlerts200ResponseInner> response = api.getNetworkHealthAlerts_2(networkId);
        // TODO: test validations
    }

    /**
     * Return an overview of currently alerting sensors by metric
     *
     * Return an overview of currently alerting sensors by metric
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSensorAlertsCurrentOverviewByMetric_1Test() throws ApiException {
        String networkId = null;
        GetNetworkSensorAlertsCurrentOverviewByMetric200Response response = api.getNetworkSensorAlertsCurrentOverviewByMetric_1(networkId);
        // TODO: test validations
    }

    /**
     * Return an overview of alert occurrences over a timespan, by metric
     *
     * Return an overview of alert occurrences over a timespan, by metric
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSensorAlertsOverviewByMetric_1Test() throws ApiException {
        String networkId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        Integer interval = null;
        List<GetNetworkSensorAlertsOverviewByMetric200ResponseInner> response = api.getNetworkSensorAlertsOverviewByMetric_1(networkId, t0, t1, timespan, interval);
        // TODO: test validations
    }

    /**
     * Show details of a sensor alert profile for a network.
     *
     * Show details of a sensor alert profile for a network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSensorAlertsProfile_1Test() throws ApiException {
        String networkId = null;
        String id = null;
        GetNetworkSensorAlertsProfiles200ResponseInner response = api.getNetworkSensorAlertsProfile_1(networkId, id);
        // TODO: test validations
    }

    /**
     * Lists all sensor alert profiles for a network.
     *
     * Lists all sensor alert profiles for a network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSensorAlertsProfiles_1Test() throws ApiException {
        String networkId = null;
        List<GetNetworkSensorAlertsProfiles200ResponseInner> response = api.getNetworkSensorAlertsProfiles_1(networkId);
        // TODO: test validations
    }

    /**
     * List all organization-wide alert configurations
     *
     * List all organization-wide alert configurations
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationAlertsProfiles_1Test() throws ApiException {
        String organizationId = null;
        List<Object> response = api.getOrganizationAlertsProfiles_1(organizationId);
        // TODO: test validations
    }

    /**
     * Update the alert configuration for this network
     *
     * Update the alert configuration for this network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkAlertsSettings_1Test() throws ApiException {
        String networkId = null;
        UpdateNetworkAlertsSettingsRequest updateNetworkAlertsSettingsRequest = null;
        Object response = api.updateNetworkAlertsSettings_1(networkId, updateNetworkAlertsSettingsRequest);
        // TODO: test validations
    }

    /**
     * Updates a sensor alert profile for a network.
     *
     * Updates a sensor alert profile for a network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSensorAlertsProfile_1Test() throws ApiException {
        String networkId = null;
        String id = null;
        UpdateNetworkSensorAlertsProfileRequest updateNetworkSensorAlertsProfileRequest = null;
        GetNetworkSensorAlertsProfiles200ResponseInner response = api.updateNetworkSensorAlertsProfile_1(networkId, id, updateNetworkSensorAlertsProfileRequest);
        // TODO: test validations
    }

    /**
     * Update an organization-wide alert config
     *
     * Update an organization-wide alert config
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationAlertsProfile_1Test() throws ApiException {
        String organizationId = null;
        String alertConfigId = null;
        UpdateOrganizationAlertsProfileRequest updateOrganizationAlertsProfileRequest = null;
        Object response = api.updateOrganizationAlertsProfile_1(organizationId, alertConfigId, updateOrganizationAlertsProfileRequest);
        // TODO: test validations
    }

}
