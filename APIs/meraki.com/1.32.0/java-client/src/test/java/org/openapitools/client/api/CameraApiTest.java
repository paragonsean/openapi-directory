/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateNetworkCameraQualityRetentionProfileRequest;
import org.openapitools.client.model.CreateNetworkCameraWirelessProfileRequest;
import org.openapitools.client.model.CreateOrganizationCameraCustomAnalyticsArtifactRequest;
import org.openapitools.client.model.GenerateDeviceCameraSnapshotRequest;
import java.time.OffsetDateTime;
import org.openapitools.client.model.UpdateDeviceCameraCustomAnalyticsRequest;
import org.openapitools.client.model.UpdateDeviceCameraQualityAndRetentionRequest;
import org.openapitools.client.model.UpdateDeviceCameraSenseRequest;
import org.openapitools.client.model.UpdateDeviceCameraVideoSettingsRequest;
import org.openapitools.client.model.UpdateDeviceCameraWirelessProfilesRequest;
import org.openapitools.client.model.UpdateNetworkCameraQualityRetentionProfileRequest;
import org.openapitools.client.model.UpdateNetworkCameraWirelessProfileRequest;
import org.openapitools.client.model.UpdateOrganizationCameraOnboardingStatusesRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CameraApi
 */
@Disabled
public class CameraApiTest {

    private final CameraApi api = new CameraApi();

    /**
     * Creates new quality retention profile for this network.
     *
     * Creates new quality retention profile for this network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkCameraQualityRetentionProfileTest() throws ApiException {
        String networkId = null;
        CreateNetworkCameraQualityRetentionProfileRequest createNetworkCameraQualityRetentionProfileRequest = null;
        Object response = api.createNetworkCameraQualityRetentionProfile(networkId, createNetworkCameraQualityRetentionProfileRequest);
        // TODO: test validations
    }

    /**
     * Creates a new camera wireless profile for this network.
     *
     * Creates a new camera wireless profile for this network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkCameraWirelessProfileTest() throws ApiException {
        String networkId = null;
        CreateNetworkCameraWirelessProfileRequest createNetworkCameraWirelessProfileRequest = null;
        Object response = api.createNetworkCameraWirelessProfile(networkId, createNetworkCameraWirelessProfileRequest);
        // TODO: test validations
    }

    /**
     * Create custom analytics artifact
     *
     * Create custom analytics artifact. Returns an artifact upload URL with expiry time. Upload the artifact file with a put request to the returned upload URL before its expiry.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationCameraCustomAnalyticsArtifactTest() throws ApiException {
        String organizationId = null;
        CreateOrganizationCameraCustomAnalyticsArtifactRequest createOrganizationCameraCustomAnalyticsArtifactRequest = null;
        Object response = api.createOrganizationCameraCustomAnalyticsArtifact(organizationId, createOrganizationCameraCustomAnalyticsArtifactRequest);
        // TODO: test validations
    }

    /**
     * Delete an existing quality retention profile for this network.
     *
     * Delete an existing quality retention profile for this network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkCameraQualityRetentionProfileTest() throws ApiException {
        String networkId = null;
        String qualityRetentionProfileId = null;
        api.deleteNetworkCameraQualityRetentionProfile(networkId, qualityRetentionProfileId);
        // TODO: test validations
    }

    /**
     * Delete an existing camera wireless profile for this network.
     *
     * Delete an existing camera wireless profile for this network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkCameraWirelessProfileTest() throws ApiException {
        String networkId = null;
        String wirelessProfileId = null;
        api.deleteNetworkCameraWirelessProfile(networkId, wirelessProfileId);
        // TODO: test validations
    }

    /**
     * Delete Custom Analytics Artifact
     *
     * Delete Custom Analytics Artifact
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganizationCameraCustomAnalyticsArtifactTest() throws ApiException {
        String organizationId = null;
        String artifactId = null;
        api.deleteOrganizationCameraCustomAnalyticsArtifact(organizationId, artifactId);
        // TODO: test validations
    }

    /**
     * Generate a snapshot of what the camera sees at the specified time and return a link to that image.
     *
     * Generate a snapshot of what the camera sees at the specified time and return a link to that image.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generateDeviceCameraSnapshotTest() throws ApiException {
        String serial = null;
        GenerateDeviceCameraSnapshotRequest generateDeviceCameraSnapshotRequest = null;
        Object response = api.generateDeviceCameraSnapshot(serial, generateDeviceCameraSnapshotRequest);
        // TODO: test validations
    }

    /**
     * Returns live state from camera of analytics zones
     *
     * Returns live state from camera of analytics zones
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceCameraAnalyticsLiveTest() throws ApiException {
        String serial = null;
        Object response = api.getDeviceCameraAnalyticsLive(serial);
        // TODO: test validations
    }

    /**
     * Returns an overview of aggregate analytics data for a timespan
     *
     * Returns an overview of aggregate analytics data for a timespan
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceCameraAnalyticsOverviewTest() throws ApiException {
        String serial = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        String objectType = null;
        List<Object> response = api.getDeviceCameraAnalyticsOverview(serial, t0, t1, timespan, objectType);
        // TODO: test validations
    }

    /**
     * Returns most recent record for analytics zones
     *
     * Returns most recent record for analytics zones
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceCameraAnalyticsRecentTest() throws ApiException {
        String serial = null;
        String objectType = null;
        List<Object> response = api.getDeviceCameraAnalyticsRecent(serial, objectType);
        // TODO: test validations
    }

    /**
     * Return historical records for analytic zones
     *
     * Return historical records for analytic zones
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceCameraAnalyticsZoneHistoryTest() throws ApiException {
        String serial = null;
        String zoneId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        Integer resolution = null;
        String objectType = null;
        List<Object> response = api.getDeviceCameraAnalyticsZoneHistory(serial, zoneId, t0, t1, timespan, resolution, objectType);
        // TODO: test validations
    }

    /**
     * Returns all configured analytic zones for this camera
     *
     * Returns all configured analytic zones for this camera
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceCameraAnalyticsZonesTest() throws ApiException {
        String serial = null;
        List<Object> response = api.getDeviceCameraAnalyticsZones(serial);
        // TODO: test validations
    }

    /**
     * Return custom analytics settings for a camera
     *
     * Return custom analytics settings for a camera
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceCameraCustomAnalyticsTest() throws ApiException {
        String serial = null;
        Object response = api.getDeviceCameraCustomAnalytics(serial);
        // TODO: test validations
    }

    /**
     * Returns quality and retention settings for the given camera
     *
     * Returns quality and retention settings for the given camera
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceCameraQualityAndRetentionTest() throws ApiException {
        String serial = null;
        Object response = api.getDeviceCameraQualityAndRetention(serial);
        // TODO: test validations
    }

    /**
     * Returns sense settings for a given camera
     *
     * Returns sense settings for a given camera
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceCameraSenseTest() throws ApiException {
        String serial = null;
        Object response = api.getDeviceCameraSense(serial);
        // TODO: test validations
    }

    /**
     * Returns the MV Sense object detection model list for the given camera
     *
     * Returns the MV Sense object detection model list for the given camera
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceCameraSenseObjectDetectionModelsTest() throws ApiException {
        String serial = null;
        List<Object> response = api.getDeviceCameraSenseObjectDetectionModels(serial);
        // TODO: test validations
    }

    /**
     * Returns video link to the specified camera
     *
     * Returns video link to the specified camera. If a timestamp is supplied, it links to that timestamp.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceCameraVideoLinkTest() throws ApiException {
        String serial = null;
        OffsetDateTime timestamp = null;
        Object response = api.getDeviceCameraVideoLink(serial, timestamp);
        // TODO: test validations
    }

    /**
     * Returns video settings for the given camera
     *
     * Returns video settings for the given camera
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceCameraVideoSettingsTest() throws ApiException {
        String serial = null;
        Object response = api.getDeviceCameraVideoSettings(serial);
        // TODO: test validations
    }

    /**
     * Returns wireless profile assigned to the given camera
     *
     * Returns wireless profile assigned to the given camera
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceCameraWirelessProfilesTest() throws ApiException {
        String serial = null;
        Object response = api.getDeviceCameraWirelessProfiles(serial);
        // TODO: test validations
    }

    /**
     * Retrieve a single quality retention profile
     *
     * Retrieve a single quality retention profile
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkCameraQualityRetentionProfileTest() throws ApiException {
        String networkId = null;
        String qualityRetentionProfileId = null;
        Object response = api.getNetworkCameraQualityRetentionProfile(networkId, qualityRetentionProfileId);
        // TODO: test validations
    }

    /**
     * List the quality retention profiles for this network
     *
     * List the quality retention profiles for this network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkCameraQualityRetentionProfilesTest() throws ApiException {
        String networkId = null;
        List<Object> response = api.getNetworkCameraQualityRetentionProfiles(networkId);
        // TODO: test validations
    }

    /**
     * Returns a list of all camera recording schedules.
     *
     * Returns a list of all camera recording schedules.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkCameraSchedulesTest() throws ApiException {
        String networkId = null;
        List<Object> response = api.getNetworkCameraSchedules(networkId);
        // TODO: test validations
    }

    /**
     * Retrieve a single camera wireless profile.
     *
     * Retrieve a single camera wireless profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkCameraWirelessProfileTest() throws ApiException {
        String networkId = null;
        String wirelessProfileId = null;
        Object response = api.getNetworkCameraWirelessProfile(networkId, wirelessProfileId);
        // TODO: test validations
    }

    /**
     * List the camera wireless profiles for this network.
     *
     * List the camera wireless profiles for this network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkCameraWirelessProfilesTest() throws ApiException {
        String networkId = null;
        List<Object> response = api.getNetworkCameraWirelessProfiles(networkId);
        // TODO: test validations
    }

    /**
     * Get Custom Analytics Artifact
     *
     * Get Custom Analytics Artifact
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationCameraCustomAnalyticsArtifactTest() throws ApiException {
        String organizationId = null;
        String artifactId = null;
        Object response = api.getOrganizationCameraCustomAnalyticsArtifact(organizationId, artifactId);
        // TODO: test validations
    }

    /**
     * List Custom Analytics Artifacts
     *
     * List Custom Analytics Artifacts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationCameraCustomAnalyticsArtifactsTest() throws ApiException {
        String organizationId = null;
        List<Object> response = api.getOrganizationCameraCustomAnalyticsArtifacts(organizationId);
        // TODO: test validations
    }

    /**
     * Fetch onboarding status of cameras
     *
     * Fetch onboarding status of cameras
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationCameraOnboardingStatusesTest() throws ApiException {
        String organizationId = null;
        List<String> serials = null;
        List<String> networkIds = null;
        List<Object> response = api.getOrganizationCameraOnboardingStatuses(organizationId, serials, networkIds);
        // TODO: test validations
    }

    /**
     * Update custom analytics settings for a camera
     *
     * Update custom analytics settings for a camera
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeviceCameraCustomAnalyticsTest() throws ApiException {
        String serial = null;
        UpdateDeviceCameraCustomAnalyticsRequest updateDeviceCameraCustomAnalyticsRequest = null;
        Object response = api.updateDeviceCameraCustomAnalytics(serial, updateDeviceCameraCustomAnalyticsRequest);
        // TODO: test validations
    }

    /**
     * Update quality and retention settings for the given camera
     *
     * Update quality and retention settings for the given camera
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeviceCameraQualityAndRetentionTest() throws ApiException {
        String serial = null;
        UpdateDeviceCameraQualityAndRetentionRequest updateDeviceCameraQualityAndRetentionRequest = null;
        Object response = api.updateDeviceCameraQualityAndRetention(serial, updateDeviceCameraQualityAndRetentionRequest);
        // TODO: test validations
    }

    /**
     * Update sense settings for the given camera
     *
     * Update sense settings for the given camera
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeviceCameraSenseTest() throws ApiException {
        String serial = null;
        UpdateDeviceCameraSenseRequest updateDeviceCameraSenseRequest = null;
        Object response = api.updateDeviceCameraSense(serial, updateDeviceCameraSenseRequest);
        // TODO: test validations
    }

    /**
     * Update video settings for the given camera
     *
     * Update video settings for the given camera
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeviceCameraVideoSettingsTest() throws ApiException {
        String serial = null;
        UpdateDeviceCameraVideoSettingsRequest updateDeviceCameraVideoSettingsRequest = null;
        Object response = api.updateDeviceCameraVideoSettings(serial, updateDeviceCameraVideoSettingsRequest);
        // TODO: test validations
    }

    /**
     * Assign wireless profiles to the given camera
     *
     * Assign wireless profiles to the given camera. Incremental updates are not supported, all profile assignment need to be supplied at once.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeviceCameraWirelessProfilesTest() throws ApiException {
        String serial = null;
        UpdateDeviceCameraWirelessProfilesRequest updateDeviceCameraWirelessProfilesRequest = null;
        Object response = api.updateDeviceCameraWirelessProfiles(serial, updateDeviceCameraWirelessProfilesRequest);
        // TODO: test validations
    }

    /**
     * Update an existing quality retention profile for this network.
     *
     * Update an existing quality retention profile for this network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkCameraQualityRetentionProfileTest() throws ApiException {
        String networkId = null;
        String qualityRetentionProfileId = null;
        UpdateNetworkCameraQualityRetentionProfileRequest updateNetworkCameraQualityRetentionProfileRequest = null;
        Object response = api.updateNetworkCameraQualityRetentionProfile(networkId, qualityRetentionProfileId, updateNetworkCameraQualityRetentionProfileRequest);
        // TODO: test validations
    }

    /**
     * Update an existing camera wireless profile in this network.
     *
     * Update an existing camera wireless profile in this network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkCameraWirelessProfileTest() throws ApiException {
        String networkId = null;
        String wirelessProfileId = null;
        UpdateNetworkCameraWirelessProfileRequest updateNetworkCameraWirelessProfileRequest = null;
        Object response = api.updateNetworkCameraWirelessProfile(networkId, wirelessProfileId, updateNetworkCameraWirelessProfileRequest);
        // TODO: test validations
    }

    /**
     * Notify that credential handoff to camera has completed
     *
     * Notify that credential handoff to camera has completed
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationCameraOnboardingStatusesTest() throws ApiException {
        String organizationId = null;
        UpdateOrganizationCameraOnboardingStatusesRequest updateOrganizationCameraOnboardingStatusesRequest = null;
        Object response = api.updateOrganizationCameraOnboardingStatuses(organizationId, updateOrganizationCameraOnboardingStatusesRequest);
        // TODO: test validations
    }

}
