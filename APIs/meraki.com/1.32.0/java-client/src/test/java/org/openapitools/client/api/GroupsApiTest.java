/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateNetworkFirmwareUpgradesStagedGroupRequest;
import org.openapitools.client.model.CreateOrganizationAdaptivePolicyGroupRequest;
import org.openapitools.client.model.CreateOrganizationPolicyObjectsGroupRequest;
import org.openapitools.client.model.GetNetworkFirmwareUpgradesStagedGroups200ResponseInner;
import org.openapitools.client.model.UpdateOrganizationAdaptivePolicyGroupRequest;
import org.openapitools.client.model.UpdateOrganizationPolicyObjectsGroupRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for GroupsApi
 */
@Disabled
public class GroupsApiTest {

    private final GroupsApi api = new GroupsApi();

    /**
     * Create a Staged Upgrade Group for a network
     *
     * Create a Staged Upgrade Group for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkFirmwareUpgradesStagedGroup_3Test() throws ApiException {
        String networkId = null;
        CreateNetworkFirmwareUpgradesStagedGroupRequest createNetworkFirmwareUpgradesStagedGroupRequest = null;
        Object response = api.createNetworkFirmwareUpgradesStagedGroup_3(networkId, createNetworkFirmwareUpgradesStagedGroupRequest);
        // TODO: test validations
    }

    /**
     * Creates a new adaptive policy group
     *
     * Creates a new adaptive policy group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationAdaptivePolicyGroup_2Test() throws ApiException {
        String organizationId = null;
        CreateOrganizationAdaptivePolicyGroupRequest createOrganizationAdaptivePolicyGroupRequest = null;
        Object response = api.createOrganizationAdaptivePolicyGroup_2(organizationId, createOrganizationAdaptivePolicyGroupRequest);
        // TODO: test validations
    }

    /**
     * Creates a new Policy Object Group.
     *
     * Creates a new Policy Object Group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationPolicyObjectsGroup_2Test() throws ApiException {
        String organizationId = null;
        CreateOrganizationPolicyObjectsGroupRequest createOrganizationPolicyObjectsGroupRequest = null;
        Object response = api.createOrganizationPolicyObjectsGroup_2(organizationId, createOrganizationPolicyObjectsGroupRequest);
        // TODO: test validations
    }

    /**
     * Delete a Staged Upgrade Group
     *
     * Delete a Staged Upgrade Group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkFirmwareUpgradesStagedGroup_3Test() throws ApiException {
        String networkId = null;
        String groupId = null;
        api.deleteNetworkFirmwareUpgradesStagedGroup_3(networkId, groupId);
        // TODO: test validations
    }

    /**
     * Deletes the specified adaptive policy group and any associated policies and references
     *
     * Deletes the specified adaptive policy group and any associated policies and references
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganizationAdaptivePolicyGroup_2Test() throws ApiException {
        String organizationId = null;
        String id = null;
        api.deleteOrganizationAdaptivePolicyGroup_2(organizationId, id);
        // TODO: test validations
    }

    /**
     * Deletes a Policy Object Group.
     *
     * Deletes a Policy Object Group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganizationPolicyObjectsGroup_2Test() throws ApiException {
        String organizationId = null;
        String policyObjectGroupId = null;
        api.deleteOrganizationPolicyObjectsGroup_2(organizationId, policyObjectGroupId);
        // TODO: test validations
    }

    /**
     * Get a Staged Upgrade Group from a network
     *
     * Get a Staged Upgrade Group from a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkFirmwareUpgradesStagedGroup_3Test() throws ApiException {
        String networkId = null;
        String groupId = null;
        GetNetworkFirmwareUpgradesStagedGroups200ResponseInner response = api.getNetworkFirmwareUpgradesStagedGroup_3(networkId, groupId);
        // TODO: test validations
    }

    /**
     * List of Staged Upgrade Groups in a network
     *
     * List of Staged Upgrade Groups in a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkFirmwareUpgradesStagedGroups_3Test() throws ApiException {
        String networkId = null;
        List<GetNetworkFirmwareUpgradesStagedGroups200ResponseInner> response = api.getNetworkFirmwareUpgradesStagedGroups_3(networkId);
        // TODO: test validations
    }

    /**
     * Returns an adaptive policy group
     *
     * Returns an adaptive policy group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationAdaptivePolicyGroup_2Test() throws ApiException {
        String organizationId = null;
        String id = null;
        Object response = api.getOrganizationAdaptivePolicyGroup_2(organizationId, id);
        // TODO: test validations
    }

    /**
     * List adaptive policy groups in a organization
     *
     * List adaptive policy groups in a organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationAdaptivePolicyGroups_2Test() throws ApiException {
        String organizationId = null;
        List<Object> response = api.getOrganizationAdaptivePolicyGroups_2(organizationId);
        // TODO: test validations
    }

    /**
     * Shows details of a Policy Object Group.
     *
     * Shows details of a Policy Object Group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationPolicyObjectsGroup_2Test() throws ApiException {
        String organizationId = null;
        String policyObjectGroupId = null;
        Object response = api.getOrganizationPolicyObjectsGroup_2(organizationId, policyObjectGroupId);
        // TODO: test validations
    }

    /**
     * Lists Policy Object Groups belonging to the organization.
     *
     * Lists Policy Object Groups belonging to the organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationPolicyObjectsGroups_2Test() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<Object> response = api.getOrganizationPolicyObjectsGroups_2(organizationId, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * Update a Staged Upgrade Group for a network
     *
     * Update a Staged Upgrade Group for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkFirmwareUpgradesStagedGroup_3Test() throws ApiException {
        String networkId = null;
        String groupId = null;
        CreateNetworkFirmwareUpgradesStagedGroupRequest createNetworkFirmwareUpgradesStagedGroupRequest = null;
        Object response = api.updateNetworkFirmwareUpgradesStagedGroup_3(networkId, groupId, createNetworkFirmwareUpgradesStagedGroupRequest);
        // TODO: test validations
    }

    /**
     * Updates an adaptive policy group
     *
     * Updates an adaptive policy group. If updating \&quot;Infrastructure\&quot;, only the SGT is allowed. Cannot update \&quot;Unknown\&quot;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationAdaptivePolicyGroup_2Test() throws ApiException {
        String organizationId = null;
        String id = null;
        UpdateOrganizationAdaptivePolicyGroupRequest updateOrganizationAdaptivePolicyGroupRequest = null;
        Object response = api.updateOrganizationAdaptivePolicyGroup_2(organizationId, id, updateOrganizationAdaptivePolicyGroupRequest);
        // TODO: test validations
    }

    /**
     * Updates a Policy Object Group.
     *
     * Updates a Policy Object Group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationPolicyObjectsGroup_2Test() throws ApiException {
        String organizationId = null;
        String policyObjectGroupId = null;
        UpdateOrganizationPolicyObjectsGroupRequest updateOrganizationPolicyObjectsGroupRequest = null;
        Object response = api.updateOrganizationPolicyObjectsGroup_2(organizationId, policyObjectGroupId, updateOrganizationPolicyObjectsGroupRequest);
        // TODO: test validations
    }

}
