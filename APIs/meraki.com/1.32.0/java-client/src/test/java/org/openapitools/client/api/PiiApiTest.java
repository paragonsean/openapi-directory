/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateNetworkPiiRequestRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PiiApi
 */
@Disabled
public class PiiApiTest {

    private final PiiApi api = new PiiApi();

    /**
     * Submit a new delete or restrict processing PII request
     *
     * Submit a new delete or restrict processing PII request  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/requests &#x60;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkPiiRequest_1Test() throws ApiException {
        String networkId = null;
        CreateNetworkPiiRequestRequest createNetworkPiiRequestRequest = null;
        Object response = api.createNetworkPiiRequest_1(networkId, createNetworkPiiRequestRequest);
        // TODO: test validations
    }

    /**
     * Delete a restrict processing PII request
     *
     * Delete a restrict processing PII request  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/requests/{requestId} &#x60;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkPiiRequest_1Test() throws ApiException {
        String networkId = null;
        String requestId = null;
        api.deleteNetworkPiiRequest_1(networkId, requestId);
        // TODO: test validations
    }

    /**
     * List the keys required to access Personally Identifiable Information (PII) for a given identifier
     *
     * List the keys required to access Personally Identifiable Information (PII) for a given identifier. Exactly one identifier will be accepted. If the organization contains org-wide Systems Manager users matching the key provided then there will be an entry with the key \&quot;0\&quot; containing the applicable keys.  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/piiKeys &#x60;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkPiiPiiKeys_1Test() throws ApiException {
        String networkId = null;
        String username = null;
        String email = null;
        String mac = null;
        String serial = null;
        String imei = null;
        String bluetoothMac = null;
        Object response = api.getNetworkPiiPiiKeys_1(networkId, username, email, mac, serial, imei, bluetoothMac);
        // TODO: test validations
    }

    /**
     * Return a PII request
     *
     * Return a PII request  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/requests/{requestId} &#x60;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkPiiRequest_1Test() throws ApiException {
        String networkId = null;
        String requestId = null;
        Object response = api.getNetworkPiiRequest_1(networkId, requestId);
        // TODO: test validations
    }

    /**
     * List the PII requests for this network or organization
     *
     * List the PII requests for this network or organization  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/requests &#x60;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkPiiRequests_1Test() throws ApiException {
        String networkId = null;
        List<Object> response = api.getNetworkPiiRequests_1(networkId);
        // TODO: test validations
    }

    /**
     * Given a piece of Personally Identifiable Information (PII), return the Systems Manager device ID(s) associated with that identifier
     *
     * Given a piece of Personally Identifiable Information (PII), return the Systems Manager device ID(s) associated with that identifier. These device IDs can be used with the Systems Manager API endpoints to retrieve device details. Exactly one identifier will be accepted.  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/smDevicesForKey &#x60;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkPiiSmDevicesForKey_1Test() throws ApiException {
        String networkId = null;
        String username = null;
        String email = null;
        String mac = null;
        String serial = null;
        String imei = null;
        String bluetoothMac = null;
        Object response = api.getNetworkPiiSmDevicesForKey_1(networkId, username, email, mac, serial, imei, bluetoothMac);
        // TODO: test validations
    }

    /**
     * Given a piece of Personally Identifiable Information (PII), return the Systems Manager owner ID(s) associated with that identifier
     *
     * Given a piece of Personally Identifiable Information (PII), return the Systems Manager owner ID(s) associated with that identifier. These owner IDs can be used with the Systems Manager API endpoints to retrieve owner details. Exactly one identifier will be accepted.  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/smOwnersForKey &#x60;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkPiiSmOwnersForKey_1Test() throws ApiException {
        String networkId = null;
        String username = null;
        String email = null;
        String mac = null;
        String serial = null;
        String imei = null;
        String bluetoothMac = null;
        Object response = api.getNetworkPiiSmOwnersForKey_1(networkId, username, email, mac, serial, imei, bluetoothMac);
        // TODO: test validations
    }

}
