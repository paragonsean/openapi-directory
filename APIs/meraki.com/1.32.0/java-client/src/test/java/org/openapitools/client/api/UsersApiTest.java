/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GetNetworkSmDeviceDeviceProfiles200ResponseInner;
import org.openapitools.client.model.GetNetworkSmDeviceSoftwares200ResponseInner;
import org.openapitools.client.model.GetNetworkSmUsers200ResponseInner;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Disabled
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    /**
     * Delete a user and all of its authentication methods.
     *
     * Delete a user and all of its authentication methods.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganizationUser_1Test() throws ApiException {
        String organizationId = null;
        String userId = null;
        api.deleteOrganizationUser_1(organizationId, userId);
        // TODO: test validations
    }

    /**
     * Get the profiles associated with a user
     *
     * Get the profiles associated with a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmUserDeviceProfiles_1Test() throws ApiException {
        String networkId = null;
        String userId = null;
        List<GetNetworkSmDeviceDeviceProfiles200ResponseInner> response = api.getNetworkSmUserDeviceProfiles_1(networkId, userId);
        // TODO: test validations
    }

    /**
     * Get a list of softwares associated with a user
     *
     * Get a list of softwares associated with a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmUserSoftwares_1Test() throws ApiException {
        String networkId = null;
        String userId = null;
        List<GetNetworkSmDeviceSoftwares200ResponseInner> response = api.getNetworkSmUserSoftwares_1(networkId, userId);
        // TODO: test validations
    }

    /**
     * List the owners in an SM network with various specified fields and filters
     *
     * List the owners in an SM network with various specified fields and filters
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmUsers_1Test() throws ApiException {
        String networkId = null;
        List<String> ids = null;
        List<String> usernames = null;
        List<String> emails = null;
        List<String> scope = null;
        List<GetNetworkSmUsers200ResponseInner> response = api.getNetworkSmUsers_1(networkId, ids, usernames, emails, scope);
        // TODO: test validations
    }

}
