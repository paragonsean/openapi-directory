/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AssignOrganizationLicensesSeats200Response;
import org.openapitools.client.model.AssignOrganizationLicensesSeatsRequest;
import org.openapitools.client.model.GetOrganizationLicenses200ResponseInner;
import org.openapitools.client.model.GetOrganizationLicensingCotermLicenses200ResponseInner;
import org.openapitools.client.model.MoveOrganizationLicenses200Response;
import org.openapitools.client.model.MoveOrganizationLicensesRequest;
import org.openapitools.client.model.MoveOrganizationLicensesSeats200Response;
import org.openapitools.client.model.MoveOrganizationLicensesSeatsRequest;
import org.openapitools.client.model.MoveOrganizationLicensingCotermLicenses200Response;
import org.openapitools.client.model.MoveOrganizationLicensingCotermLicensesRequest;
import org.openapitools.client.model.RenewOrganizationLicensesSeatsRequest;
import org.openapitools.client.model.UpdateOrganizationLicenseRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LicensesApi
 */
@Disabled
public class LicensesApiTest {

    private final LicensesApi api = new LicensesApi();

    /**
     * Assign SM seats to a network
     *
     * Assign SM seats to a network. This will increase the managed SM device limit of the network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assignOrganizationLicensesSeats_1Test() throws ApiException {
        String organizationId = null;
        AssignOrganizationLicensesSeatsRequest assignOrganizationLicensesSeatsRequest = null;
        AssignOrganizationLicensesSeats200Response response = api.assignOrganizationLicensesSeats_1(organizationId, assignOrganizationLicensesSeatsRequest);
        // TODO: test validations
    }

    /**
     * Display a license
     *
     * Display a license
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationLicense_1Test() throws ApiException {
        String organizationId = null;
        String licenseId = null;
        GetOrganizationLicenses200ResponseInner response = api.getOrganizationLicense_1(organizationId, licenseId);
        // TODO: test validations
    }

    /**
     * Return an overview of the license state for an organization
     *
     * Return an overview of the license state for an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationLicensesOverview_1Test() throws ApiException {
        String organizationId = null;
        Object response = api.getOrganizationLicensesOverview_1(organizationId);
        // TODO: test validations
    }

    /**
     * List the licenses for an organization
     *
     * List the licenses for an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationLicenses_1Test() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        String deviceSerial = null;
        String networkId = null;
        String state = null;
        List<GetOrganizationLicenses200ResponseInner> response = api.getOrganizationLicenses_1(organizationId, perPage, startingAfter, endingBefore, deviceSerial, networkId, state);
        // TODO: test validations
    }

    /**
     * List the licenses in a coterm organization
     *
     * List the licenses in a coterm organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationLicensingCotermLicenses_2Test() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        Boolean invalidated = null;
        Boolean expired = null;
        List<GetOrganizationLicensingCotermLicenses200ResponseInner> response = api.getOrganizationLicensingCotermLicenses_2(organizationId, perPage, startingAfter, endingBefore, invalidated, expired);
        // TODO: test validations
    }

    /**
     * Move SM seats to another organization
     *
     * Move SM seats to another organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void moveOrganizationLicensesSeats_1Test() throws ApiException {
        String organizationId = null;
        MoveOrganizationLicensesSeatsRequest moveOrganizationLicensesSeatsRequest = null;
        MoveOrganizationLicensesSeats200Response response = api.moveOrganizationLicensesSeats_1(organizationId, moveOrganizationLicensesSeatsRequest);
        // TODO: test validations
    }

    /**
     * Move licenses to another organization
     *
     * Move licenses to another organization. This will also move any devices that the licenses are assigned to
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void moveOrganizationLicenses_1Test() throws ApiException {
        String organizationId = null;
        MoveOrganizationLicensesRequest moveOrganizationLicensesRequest = null;
        MoveOrganizationLicenses200Response response = api.moveOrganizationLicenses_1(organizationId, moveOrganizationLicensesRequest);
        // TODO: test validations
    }

    /**
     * Moves a license to a different organization (coterm only)
     *
     * Moves a license to a different organization (coterm only)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void moveOrganizationLicensingCotermLicenses_2Test() throws ApiException {
        String organizationId = null;
        MoveOrganizationLicensingCotermLicensesRequest moveOrganizationLicensingCotermLicensesRequest = null;
        MoveOrganizationLicensingCotermLicenses200Response response = api.moveOrganizationLicensingCotermLicenses_2(organizationId, moveOrganizationLicensingCotermLicensesRequest);
        // TODO: test validations
    }

    /**
     * Renew SM seats of a license
     *
     * Renew SM seats of a license. This will extend the license expiration date of managed SM devices covered by this license
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void renewOrganizationLicensesSeats_1Test() throws ApiException {
        String organizationId = null;
        RenewOrganizationLicensesSeatsRequest renewOrganizationLicensesSeatsRequest = null;
        AssignOrganizationLicensesSeats200Response response = api.renewOrganizationLicensesSeats_1(organizationId, renewOrganizationLicensesSeatsRequest);
        // TODO: test validations
    }

    /**
     * Update a license
     *
     * Update a license
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationLicense_1Test() throws ApiException {
        String organizationId = null;
        String licenseId = null;
        UpdateOrganizationLicenseRequest updateOrganizationLicenseRequest = null;
        GetOrganizationLicenses200ResponseInner response = api.updateOrganizationLicense_1(organizationId, licenseId, updateOrganizationLicenseRequest);
        // TODO: test validations
    }

}
