/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateNetworkSwitchAccessPolicyRequest;
import org.openapitools.client.model.GetNetworkSwitchAccessPolicies200ResponseInner;
import org.openapitools.client.model.UpdateNetworkSwitchAccessPolicyRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AccessPoliciesApi
 */
@Disabled
public class AccessPoliciesApiTest {

    private final AccessPoliciesApi api = new AccessPoliciesApi();

    /**
     * Create an access policy for a switch network
     *
     * Create an access policy for a switch network. If you would like to enable Meraki Authentication, set radiusServers to empty array.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkSwitchAccessPolicy_1Test() throws ApiException {
        String networkId = null;
        CreateNetworkSwitchAccessPolicyRequest createNetworkSwitchAccessPolicyRequest = null;
        GetNetworkSwitchAccessPolicies200ResponseInner response = api.createNetworkSwitchAccessPolicy_1(networkId, createNetworkSwitchAccessPolicyRequest);
        // TODO: test validations
    }

    /**
     * Delete an access policy for a switch network
     *
     * Delete an access policy for a switch network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkSwitchAccessPolicy_1Test() throws ApiException {
        String networkId = null;
        String accessPolicyNumber = null;
        api.deleteNetworkSwitchAccessPolicy_1(networkId, accessPolicyNumber);
        // TODO: test validations
    }

    /**
     * List the access policies for a switch network
     *
     * List the access policies for a switch network. Only returns access policies with &#39;my RADIUS server&#39; as authentication method
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchAccessPolicies_1Test() throws ApiException {
        String networkId = null;
        List<GetNetworkSwitchAccessPolicies200ResponseInner> response = api.getNetworkSwitchAccessPolicies_1(networkId);
        // TODO: test validations
    }

    /**
     * Return a specific access policy for a switch network
     *
     * Return a specific access policy for a switch network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchAccessPolicy_1Test() throws ApiException {
        String networkId = null;
        String accessPolicyNumber = null;
        GetNetworkSwitchAccessPolicies200ResponseInner response = api.getNetworkSwitchAccessPolicy_1(networkId, accessPolicyNumber);
        // TODO: test validations
    }

    /**
     * Update an access policy for a switch network
     *
     * Update an access policy for a switch network. If you would like to enable Meraki Authentication, set radiusServers to empty array.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSwitchAccessPolicy_1Test() throws ApiException {
        String networkId = null;
        String accessPolicyNumber = null;
        UpdateNetworkSwitchAccessPolicyRequest updateNetworkSwitchAccessPolicyRequest = null;
        GetNetworkSwitchAccessPolicies200ResponseInner response = api.updateNetworkSwitchAccessPolicy_1(networkId, accessPolicyNumber, updateNetworkSwitchAccessPolicyRequest);
        // TODO: test validations
    }

}
