/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateNetworkWirelessSsidIdentityPskRequest;
import org.openapitools.client.model.GetNetworkWirelessSsidIdentityPsks200ResponseInner;
import org.openapitools.client.model.UpdateNetworkWirelessSsidIdentityPskRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for IdentityPsksApi
 */
@Disabled
public class IdentityPsksApiTest {

    private final IdentityPsksApi api = new IdentityPsksApi();

    /**
     * Create an Identity PSK
     *
     * Create an Identity PSK
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkWirelessSsidIdentityPsk_2Test() throws ApiException {
        String networkId = null;
        String number = null;
        CreateNetworkWirelessSsidIdentityPskRequest createNetworkWirelessSsidIdentityPskRequest = null;
        Object response = api.createNetworkWirelessSsidIdentityPsk_2(networkId, number, createNetworkWirelessSsidIdentityPskRequest);
        // TODO: test validations
    }

    /**
     * Delete an Identity PSK
     *
     * Delete an Identity PSK
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkWirelessSsidIdentityPsk_2Test() throws ApiException {
        String networkId = null;
        String number = null;
        String identityPskId = null;
        api.deleteNetworkWirelessSsidIdentityPsk_2(networkId, number, identityPskId);
        // TODO: test validations
    }

    /**
     * Return an Identity PSK
     *
     * Return an Identity PSK
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessSsidIdentityPsk_2Test() throws ApiException {
        String networkId = null;
        String number = null;
        String identityPskId = null;
        GetNetworkWirelessSsidIdentityPsks200ResponseInner response = api.getNetworkWirelessSsidIdentityPsk_2(networkId, number, identityPskId);
        // TODO: test validations
    }

    /**
     * List all Identity PSKs in a wireless network
     *
     * List all Identity PSKs in a wireless network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessSsidIdentityPsks_2Test() throws ApiException {
        String networkId = null;
        String number = null;
        List<GetNetworkWirelessSsidIdentityPsks200ResponseInner> response = api.getNetworkWirelessSsidIdentityPsks_2(networkId, number);
        // TODO: test validations
    }

    /**
     * Update an Identity PSK
     *
     * Update an Identity PSK
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkWirelessSsidIdentityPsk_2Test() throws ApiException {
        String networkId = null;
        String number = null;
        String identityPskId = null;
        UpdateNetworkWirelessSsidIdentityPskRequest updateNetworkWirelessSsidIdentityPskRequest = null;
        Object response = api.updateNetworkWirelessSsidIdentityPsk_2(networkId, number, identityPskId, updateNetworkWirelessSsidIdentityPskRequest);
        // TODO: test validations
    }

}
