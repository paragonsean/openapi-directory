/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateNetworkWebhooksHttpServerRequest;
import org.openapitools.client.model.CreateNetworkWebhooksPayloadTemplateRequest;
import org.openapitools.client.model.CreateNetworkWebhooksWebhookTest201Response;
import org.openapitools.client.model.CreateNetworkWebhooksWebhookTestRequest;
import org.openapitools.client.model.GetNetworkWebhooksHttpServers200ResponseInner;
import org.openapitools.client.model.GetNetworkWebhooksPayloadTemplates200ResponseInner;
import org.openapitools.client.model.GetOrganizationWebhooksLogs200ResponseInner;
import org.openapitools.client.model.UpdateNetworkWebhooksHttpServerRequest;
import org.openapitools.client.model.UpdateNetworkWebhooksPayloadTemplateRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WebhooksApi
 */
@Disabled
public class WebhooksApiTest {

    private final WebhooksApi api = new WebhooksApi();

    /**
     * Add an HTTP server to a network
     *
     * Add an HTTP server to a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkWebhooksHttpServer_1Test() throws ApiException {
        String networkId = null;
        CreateNetworkWebhooksHttpServerRequest createNetworkWebhooksHttpServerRequest = null;
        GetNetworkWebhooksHttpServers200ResponseInner response = api.createNetworkWebhooksHttpServer_1(networkId, createNetworkWebhooksHttpServerRequest);
        // TODO: test validations
    }

    /**
     * Create a webhook payload template for a network
     *
     * Create a webhook payload template for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkWebhooksPayloadTemplate_1Test() throws ApiException {
        String networkId = null;
        CreateNetworkWebhooksPayloadTemplateRequest createNetworkWebhooksPayloadTemplateRequest = null;
        GetNetworkWebhooksPayloadTemplates200ResponseInner response = api.createNetworkWebhooksPayloadTemplate_1(networkId, createNetworkWebhooksPayloadTemplateRequest);
        // TODO: test validations
    }

    /**
     * Send a test webhook for a network
     *
     * Send a test webhook for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkWebhooksWebhookTest_1Test() throws ApiException {
        String networkId = null;
        CreateNetworkWebhooksWebhookTestRequest createNetworkWebhooksWebhookTestRequest = null;
        CreateNetworkWebhooksWebhookTest201Response response = api.createNetworkWebhooksWebhookTest_1(networkId, createNetworkWebhooksWebhookTestRequest);
        // TODO: test validations
    }

    /**
     * Delete an HTTP server from a network
     *
     * Delete an HTTP server from a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkWebhooksHttpServer_1Test() throws ApiException {
        String networkId = null;
        String httpServerId = null;
        api.deleteNetworkWebhooksHttpServer_1(networkId, httpServerId);
        // TODO: test validations
    }

    /**
     * Destroy a webhook payload template for a network
     *
     * Destroy a webhook payload template for a network. Does not work for included templates (&#39;wpt_00001&#39;, &#39;wpt_00002&#39;, &#39;wpt_00003&#39;, &#39;wpt_00004&#39;, &#39;wpt_00005&#39; or &#39;wpt_00006&#39;)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkWebhooksPayloadTemplate_1Test() throws ApiException {
        String networkId = null;
        String payloadTemplateId = null;
        api.deleteNetworkWebhooksPayloadTemplate_1(networkId, payloadTemplateId);
        // TODO: test validations
    }

    /**
     * Return an HTTP server for a network
     *
     * Return an HTTP server for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWebhooksHttpServer_1Test() throws ApiException {
        String networkId = null;
        String httpServerId = null;
        GetNetworkWebhooksHttpServers200ResponseInner response = api.getNetworkWebhooksHttpServer_1(networkId, httpServerId);
        // TODO: test validations
    }

    /**
     * List the HTTP servers for a network
     *
     * List the HTTP servers for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWebhooksHttpServers_1Test() throws ApiException {
        String networkId = null;
        List<GetNetworkWebhooksHttpServers200ResponseInner> response = api.getNetworkWebhooksHttpServers_1(networkId);
        // TODO: test validations
    }

    /**
     * Get the webhook payload template for a network
     *
     * Get the webhook payload template for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWebhooksPayloadTemplate_1Test() throws ApiException {
        String networkId = null;
        String payloadTemplateId = null;
        GetNetworkWebhooksPayloadTemplates200ResponseInner response = api.getNetworkWebhooksPayloadTemplate_1(networkId, payloadTemplateId);
        // TODO: test validations
    }

    /**
     * List the webhook payload templates for a network
     *
     * List the webhook payload templates for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWebhooksPayloadTemplates_1Test() throws ApiException {
        String networkId = null;
        List<GetNetworkWebhooksPayloadTemplates200ResponseInner> response = api.getNetworkWebhooksPayloadTemplates_1(networkId);
        // TODO: test validations
    }

    /**
     * Return the status of a webhook test for a network
     *
     * Return the status of a webhook test for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWebhooksWebhookTest_1Test() throws ApiException {
        String networkId = null;
        String webhookTestId = null;
        CreateNetworkWebhooksWebhookTest201Response response = api.getNetworkWebhooksWebhookTest_1(networkId, webhookTestId);
        // TODO: test validations
    }

    /**
     * Return a list of alert types to be used with managing webhook alerts
     *
     * Return a list of alert types to be used with managing webhook alerts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationWebhooksAlertTypes_1Test() throws ApiException {
        String organizationId = null;
        String productType = null;
        List<Object> response = api.getOrganizationWebhooksAlertTypes_1(organizationId, productType);
        // TODO: test validations
    }

    /**
     * Return the log of webhook POSTs sent
     *
     * Return the log of webhook POSTs sent
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationWebhooksLogs_1Test() throws ApiException {
        String organizationId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        String url = null;
        List<GetOrganizationWebhooksLogs200ResponseInner> response = api.getOrganizationWebhooksLogs_1(organizationId, t0, t1, timespan, perPage, startingAfter, endingBefore, url);
        // TODO: test validations
    }

    /**
     * Update an HTTP server
     *
     * Update an HTTP server. To change a URL, create a new HTTP server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkWebhooksHttpServer_1Test() throws ApiException {
        String networkId = null;
        String httpServerId = null;
        UpdateNetworkWebhooksHttpServerRequest updateNetworkWebhooksHttpServerRequest = null;
        GetNetworkWebhooksHttpServers200ResponseInner response = api.updateNetworkWebhooksHttpServer_1(networkId, httpServerId, updateNetworkWebhooksHttpServerRequest);
        // TODO: test validations
    }

    /**
     * Update a webhook payload template for a network
     *
     * Update a webhook payload template for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkWebhooksPayloadTemplate_1Test() throws ApiException {
        String networkId = null;
        String payloadTemplateId = null;
        UpdateNetworkWebhooksPayloadTemplateRequest updateNetworkWebhooksPayloadTemplateRequest = null;
        GetNetworkWebhooksPayloadTemplates200ResponseInner response = api.updateNetworkWebhooksPayloadTemplate_1(networkId, payloadTemplateId, updateNetworkWebhooksPayloadTemplateRequest);
        // TODO: test validations
    }

}
