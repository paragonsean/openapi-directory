/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateOrganizationPolicyObjectRequest;
import org.openapitools.client.model.CreateOrganizationPolicyObjectsGroupRequest;
import org.openapitools.client.model.UpdateOrganizationPolicyObjectRequest;
import org.openapitools.client.model.UpdateOrganizationPolicyObjectsGroupRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PolicyObjectsApi
 */
@Disabled
public class PolicyObjectsApiTest {

    private final PolicyObjectsApi api = new PolicyObjectsApi();

    /**
     * Creates a new Policy Object.
     *
     * Creates a new Policy Object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationPolicyObject_1Test() throws ApiException {
        String organizationId = null;
        CreateOrganizationPolicyObjectRequest createOrganizationPolicyObjectRequest = null;
        Object response = api.createOrganizationPolicyObject_1(organizationId, createOrganizationPolicyObjectRequest);
        // TODO: test validations
    }

    /**
     * Creates a new Policy Object Group.
     *
     * Creates a new Policy Object Group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationPolicyObjectsGroup_1Test() throws ApiException {
        String organizationId = null;
        CreateOrganizationPolicyObjectsGroupRequest createOrganizationPolicyObjectsGroupRequest = null;
        Object response = api.createOrganizationPolicyObjectsGroup_1(organizationId, createOrganizationPolicyObjectsGroupRequest);
        // TODO: test validations
    }

    /**
     * Deletes a Policy Object.
     *
     * Deletes a Policy Object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganizationPolicyObject_1Test() throws ApiException {
        String organizationId = null;
        String policyObjectId = null;
        api.deleteOrganizationPolicyObject_1(organizationId, policyObjectId);
        // TODO: test validations
    }

    /**
     * Deletes a Policy Object Group.
     *
     * Deletes a Policy Object Group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganizationPolicyObjectsGroup_1Test() throws ApiException {
        String organizationId = null;
        String policyObjectGroupId = null;
        api.deleteOrganizationPolicyObjectsGroup_1(organizationId, policyObjectGroupId);
        // TODO: test validations
    }

    /**
     * Shows details of a Policy Object.
     *
     * Shows details of a Policy Object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationPolicyObject_1Test() throws ApiException {
        String organizationId = null;
        String policyObjectId = null;
        Object response = api.getOrganizationPolicyObject_1(organizationId, policyObjectId);
        // TODO: test validations
    }

    /**
     * Shows details of a Policy Object Group.
     *
     * Shows details of a Policy Object Group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationPolicyObjectsGroup_1Test() throws ApiException {
        String organizationId = null;
        String policyObjectGroupId = null;
        Object response = api.getOrganizationPolicyObjectsGroup_1(organizationId, policyObjectGroupId);
        // TODO: test validations
    }

    /**
     * Lists Policy Object Groups belonging to the organization.
     *
     * Lists Policy Object Groups belonging to the organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationPolicyObjectsGroups_1Test() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<Object> response = api.getOrganizationPolicyObjectsGroups_1(organizationId, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * Lists Policy Objects belonging to the organization.
     *
     * Lists Policy Objects belonging to the organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationPolicyObjects_1Test() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<Object> response = api.getOrganizationPolicyObjects_1(organizationId, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * Updates a Policy Object.
     *
     * Updates a Policy Object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationPolicyObject_1Test() throws ApiException {
        String organizationId = null;
        String policyObjectId = null;
        UpdateOrganizationPolicyObjectRequest updateOrganizationPolicyObjectRequest = null;
        Object response = api.updateOrganizationPolicyObject_1(organizationId, policyObjectId, updateOrganizationPolicyObjectRequest);
        // TODO: test validations
    }

    /**
     * Updates a Policy Object Group.
     *
     * Updates a Policy Object Group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationPolicyObjectsGroup_1Test() throws ApiException {
        String organizationId = null;
        String policyObjectGroupId = null;
        UpdateOrganizationPolicyObjectsGroupRequest updateOrganizationPolicyObjectsGroupRequest = null;
        Object response = api.updateOrganizationPolicyObjectsGroup_1(organizationId, policyObjectGroupId, updateOrganizationPolicyObjectsGroupRequest);
        // TODO: test validations
    }

}
