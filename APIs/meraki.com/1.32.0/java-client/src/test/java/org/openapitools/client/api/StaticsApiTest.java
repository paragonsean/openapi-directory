/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateNetworkAppliancePrefixesDelegatedStaticRequest;
import org.openapitools.client.model.GetNetworkAppliancePrefixesDelegatedStatics200ResponseInner;
import org.openapitools.client.model.UpdateNetworkAppliancePrefixesDelegatedStaticRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for StaticsApi
 */
@Disabled
public class StaticsApiTest {

    private final StaticsApi api = new StaticsApi();

    /**
     * Add a static delegated prefix from a network
     *
     * Add a static delegated prefix from a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkAppliancePrefixesDelegatedStatic_3Test() throws ApiException {
        String networkId = null;
        CreateNetworkAppliancePrefixesDelegatedStaticRequest createNetworkAppliancePrefixesDelegatedStaticRequest = null;
        Object response = api.createNetworkAppliancePrefixesDelegatedStatic_3(networkId, createNetworkAppliancePrefixesDelegatedStaticRequest);
        // TODO: test validations
    }

    /**
     * Delete a static delegated prefix from a network
     *
     * Delete a static delegated prefix from a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkAppliancePrefixesDelegatedStatic_3Test() throws ApiException {
        String networkId = null;
        String staticDelegatedPrefixId = null;
        api.deleteNetworkAppliancePrefixesDelegatedStatic_3(networkId, staticDelegatedPrefixId);
        // TODO: test validations
    }

    /**
     * Return a static delegated prefix from a network
     *
     * Return a static delegated prefix from a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkAppliancePrefixesDelegatedStatic_3Test() throws ApiException {
        String networkId = null;
        String staticDelegatedPrefixId = null;
        GetNetworkAppliancePrefixesDelegatedStatics200ResponseInner response = api.getNetworkAppliancePrefixesDelegatedStatic_3(networkId, staticDelegatedPrefixId);
        // TODO: test validations
    }

    /**
     * List static delegated prefixes for a network
     *
     * List static delegated prefixes for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkAppliancePrefixesDelegatedStatics_3Test() throws ApiException {
        String networkId = null;
        List<GetNetworkAppliancePrefixesDelegatedStatics200ResponseInner> response = api.getNetworkAppliancePrefixesDelegatedStatics_3(networkId);
        // TODO: test validations
    }

    /**
     * Update a static delegated prefix from a network
     *
     * Update a static delegated prefix from a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkAppliancePrefixesDelegatedStatic_3Test() throws ApiException {
        String networkId = null;
        String staticDelegatedPrefixId = null;
        UpdateNetworkAppliancePrefixesDelegatedStaticRequest updateNetworkAppliancePrefixesDelegatedStaticRequest = null;
        Object response = api.updateNetworkAppliancePrefixesDelegatedStatic_3(networkId, staticDelegatedPrefixId, updateNetworkAppliancePrefixesDelegatedStaticRequest);
        // TODO: test validations
    }

}
