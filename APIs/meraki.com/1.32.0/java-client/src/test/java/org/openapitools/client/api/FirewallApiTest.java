/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.UpdateNetworkApplianceFirewallCellularFirewallRulesRequest;
import org.openapitools.client.model.UpdateNetworkApplianceFirewallFirewalledServiceRequest;
import org.openapitools.client.model.UpdateNetworkApplianceFirewallInboundFirewallRulesRequest;
import org.openapitools.client.model.UpdateNetworkApplianceFirewallL7FirewallRulesRequest;
import org.openapitools.client.model.UpdateNetworkApplianceFirewallOneToManyNatRulesRequest;
import org.openapitools.client.model.UpdateNetworkApplianceFirewallOneToOneNatRulesRequest;
import org.openapitools.client.model.UpdateNetworkApplianceFirewallPortForwardingRulesRequest;
import org.openapitools.client.model.UpdateNetworkApplianceFirewallSettingsRequest;
import org.openapitools.client.model.UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequest;
import org.openapitools.client.model.UpdateNetworkWirelessSsidFirewallL7FirewallRulesRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FirewallApi
 */
@Disabled
public class FirewallApiTest {

    private final FirewallApi api = new FirewallApi();

    /**
     * Return the cellular firewall rules for an MX network
     *
     * Return the cellular firewall rules for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceFirewallCellularFirewallRules_1Test() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkApplianceFirewallCellularFirewallRules_1(networkId);
        // TODO: test validations
    }

    /**
     * Return the accessibility settings of the given service (&#39;ICMP&#39;, &#39;web&#39;, or &#39;SNMP&#39;)
     *
     * Return the accessibility settings of the given service (&#39;ICMP&#39;, &#39;web&#39;, or &#39;SNMP&#39;)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceFirewallFirewalledService_1Test() throws ApiException {
        String networkId = null;
        String service = null;
        Object response = api.getNetworkApplianceFirewallFirewalledService_1(networkId, service);
        // TODO: test validations
    }

    /**
     * List the appliance services and their accessibility rules
     *
     * List the appliance services and their accessibility rules
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceFirewallFirewalledServices_1Test() throws ApiException {
        String networkId = null;
        List<Object> response = api.getNetworkApplianceFirewallFirewalledServices_1(networkId);
        // TODO: test validations
    }

    /**
     * Return the inbound cellular firewall rules for an MX network
     *
     * Return the inbound cellular firewall rules for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceFirewallInboundCellularFirewallRules_1Test() throws ApiException {
        String networkId = null;
        List<Object> response = api.getNetworkApplianceFirewallInboundCellularFirewallRules_1(networkId);
        // TODO: test validations
    }

    /**
     * Return the inbound firewall rules for an MX network
     *
     * Return the inbound firewall rules for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceFirewallInboundFirewallRules_1Test() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkApplianceFirewallInboundFirewallRules_1(networkId);
        // TODO: test validations
    }

    /**
     * Return the L3 firewall rules for an MX network
     *
     * Return the L3 firewall rules for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceFirewallL3FirewallRules_1Test() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkApplianceFirewallL3FirewallRules_1(networkId);
        // TODO: test validations
    }

    /**
     * Return the L7 firewall application categories and their associated applications for an MX network
     *
     * Return the L7 firewall application categories and their associated applications for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceFirewallL7FirewallRulesApplicationCategories_1Test() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkApplianceFirewallL7FirewallRulesApplicationCategories_1(networkId);
        // TODO: test validations
    }

    /**
     * List the MX L7 firewall rules for an MX network
     *
     * List the MX L7 firewall rules for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceFirewallL7FirewallRules_1Test() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkApplianceFirewallL7FirewallRules_1(networkId);
        // TODO: test validations
    }

    /**
     * Return the 1:Many NAT mapping rules for an MX network
     *
     * Return the 1:Many NAT mapping rules for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceFirewallOneToManyNatRules_1Test() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkApplianceFirewallOneToManyNatRules_1(networkId);
        // TODO: test validations
    }

    /**
     * Return the 1:1 NAT mapping rules for an MX network
     *
     * Return the 1:1 NAT mapping rules for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceFirewallOneToOneNatRules_1Test() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkApplianceFirewallOneToOneNatRules_1(networkId);
        // TODO: test validations
    }

    /**
     * Return the port forwarding rules for an MX network
     *
     * Return the port forwarding rules for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceFirewallPortForwardingRules_1Test() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkApplianceFirewallPortForwardingRules_1(networkId);
        // TODO: test validations
    }

    /**
     * Return the firewall settings for this network
     *
     * Return the firewall settings for this network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceFirewallSettings_1Test() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkApplianceFirewallSettings_1(networkId);
        // TODO: test validations
    }

    /**
     * Return the L3 firewall rules for an SSID on an MR network
     *
     * Return the L3 firewall rules for an SSID on an MR network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessSsidFirewallL3FirewallRules_2Test() throws ApiException {
        String networkId = null;
        String number = null;
        Object response = api.getNetworkWirelessSsidFirewallL3FirewallRules_2(networkId, number);
        // TODO: test validations
    }

    /**
     * Return the L7 firewall rules for an SSID on an MR network
     *
     * Return the L7 firewall rules for an SSID on an MR network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessSsidFirewallL7FirewallRules_2Test() throws ApiException {
        String networkId = null;
        String number = null;
        Object response = api.getNetworkWirelessSsidFirewallL7FirewallRules_2(networkId, number);
        // TODO: test validations
    }

    /**
     * Update the cellular firewall rules of an MX network
     *
     * Update the cellular firewall rules of an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceFirewallCellularFirewallRules_1Test() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceFirewallCellularFirewallRulesRequest updateNetworkApplianceFirewallCellularFirewallRulesRequest = null;
        Object response = api.updateNetworkApplianceFirewallCellularFirewallRules_1(networkId, updateNetworkApplianceFirewallCellularFirewallRulesRequest);
        // TODO: test validations
    }

    /**
     * Updates the accessibility settings for the given service (&#39;ICMP&#39;, &#39;web&#39;, or &#39;SNMP&#39;)
     *
     * Updates the accessibility settings for the given service (&#39;ICMP&#39;, &#39;web&#39;, or &#39;SNMP&#39;)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceFirewallFirewalledService_1Test() throws ApiException {
        String networkId = null;
        String service = null;
        UpdateNetworkApplianceFirewallFirewalledServiceRequest updateNetworkApplianceFirewallFirewalledServiceRequest = null;
        Object response = api.updateNetworkApplianceFirewallFirewalledService_1(networkId, service, updateNetworkApplianceFirewallFirewalledServiceRequest);
        // TODO: test validations
    }

    /**
     * Update the inbound cellular firewall rules of an MX network
     *
     * Update the inbound cellular firewall rules of an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceFirewallInboundCellularFirewallRules_1Test() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceFirewallCellularFirewallRulesRequest updateNetworkApplianceFirewallCellularFirewallRulesRequest = null;
        List<Object> response = api.updateNetworkApplianceFirewallInboundCellularFirewallRules_1(networkId, updateNetworkApplianceFirewallCellularFirewallRulesRequest);
        // TODO: test validations
    }

    /**
     * Update the inbound firewall rules of an MX network
     *
     * Update the inbound firewall rules of an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceFirewallInboundFirewallRules_1Test() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceFirewallInboundFirewallRulesRequest updateNetworkApplianceFirewallInboundFirewallRulesRequest = null;
        Object response = api.updateNetworkApplianceFirewallInboundFirewallRules_1(networkId, updateNetworkApplianceFirewallInboundFirewallRulesRequest);
        // TODO: test validations
    }

    /**
     * Update the L3 firewall rules of an MX network
     *
     * Update the L3 firewall rules of an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceFirewallL3FirewallRules_1Test() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceFirewallInboundFirewallRulesRequest updateNetworkApplianceFirewallInboundFirewallRulesRequest = null;
        Object response = api.updateNetworkApplianceFirewallL3FirewallRules_1(networkId, updateNetworkApplianceFirewallInboundFirewallRulesRequest);
        // TODO: test validations
    }

    /**
     * Update the MX L7 firewall rules for an MX network
     *
     * Update the MX L7 firewall rules for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceFirewallL7FirewallRules_1Test() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceFirewallL7FirewallRulesRequest updateNetworkApplianceFirewallL7FirewallRulesRequest = null;
        Object response = api.updateNetworkApplianceFirewallL7FirewallRules_1(networkId, updateNetworkApplianceFirewallL7FirewallRulesRequest);
        // TODO: test validations
    }

    /**
     * Set the 1:Many NAT mapping rules for an MX network
     *
     * Set the 1:Many NAT mapping rules for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceFirewallOneToManyNatRules_1Test() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceFirewallOneToManyNatRulesRequest updateNetworkApplianceFirewallOneToManyNatRulesRequest = null;
        Object response = api.updateNetworkApplianceFirewallOneToManyNatRules_1(networkId, updateNetworkApplianceFirewallOneToManyNatRulesRequest);
        // TODO: test validations
    }

    /**
     * Set the 1:1 NAT mapping rules for an MX network
     *
     * Set the 1:1 NAT mapping rules for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceFirewallOneToOneNatRules_1Test() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceFirewallOneToOneNatRulesRequest updateNetworkApplianceFirewallOneToOneNatRulesRequest = null;
        Object response = api.updateNetworkApplianceFirewallOneToOneNatRules_1(networkId, updateNetworkApplianceFirewallOneToOneNatRulesRequest);
        // TODO: test validations
    }

    /**
     * Update the port forwarding rules for an MX network
     *
     * Update the port forwarding rules for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceFirewallPortForwardingRules_1Test() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceFirewallPortForwardingRulesRequest updateNetworkApplianceFirewallPortForwardingRulesRequest = null;
        Object response = api.updateNetworkApplianceFirewallPortForwardingRules_1(networkId, updateNetworkApplianceFirewallPortForwardingRulesRequest);
        // TODO: test validations
    }

    /**
     * Update the firewall settings for this network
     *
     * Update the firewall settings for this network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceFirewallSettings_1Test() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceFirewallSettingsRequest updateNetworkApplianceFirewallSettingsRequest = null;
        Object response = api.updateNetworkApplianceFirewallSettings_1(networkId, updateNetworkApplianceFirewallSettingsRequest);
        // TODO: test validations
    }

    /**
     * Update the L3 firewall rules of an SSID on an MR network
     *
     * Update the L3 firewall rules of an SSID on an MR network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkWirelessSsidFirewallL3FirewallRules_2Test() throws ApiException {
        String networkId = null;
        String number = null;
        UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequest updateNetworkWirelessSsidFirewallL3FirewallRulesRequest = null;
        Object response = api.updateNetworkWirelessSsidFirewallL3FirewallRules_2(networkId, number, updateNetworkWirelessSsidFirewallL3FirewallRulesRequest);
        // TODO: test validations
    }

    /**
     * Update the L7 firewall rules of an SSID on an MR network
     *
     * Update the L7 firewall rules of an SSID on an MR network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkWirelessSsidFirewallL7FirewallRules_2Test() throws ApiException {
        String networkId = null;
        String number = null;
        UpdateNetworkWirelessSsidFirewallL7FirewallRulesRequest updateNetworkWirelessSsidFirewallL7FirewallRulesRequest = null;
        Object response = api.updateNetworkWirelessSsidFirewallL7FirewallRules_2(networkId, number, updateNetworkWirelessSsidFirewallL7FirewallRulesRequest);
        // TODO: test validations
    }

}
