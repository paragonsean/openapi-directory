/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateDeviceApplianceVmxAuthenticationToken201Response;
import org.openapitools.client.model.CreateNetworkAppliancePrefixesDelegatedStaticRequest;
import org.openapitools.client.model.CreateNetworkApplianceStaticRouteRequest;
import org.openapitools.client.model.CreateNetworkApplianceTrafficShapingCustomPerformanceClassRequest;
import org.openapitools.client.model.CreateNetworkApplianceVlan201Response;
import org.openapitools.client.model.CreateNetworkApplianceVlanRequest;
import org.openapitools.client.model.GetDeviceApplianceUplinksSettings200Response;
import org.openapitools.client.model.GetNetworkAppliancePorts200ResponseInner;
import org.openapitools.client.model.GetNetworkAppliancePrefixesDelegatedStatics200ResponseInner;
import org.openapitools.client.model.GetNetworkApplianceSettings200Response;
import org.openapitools.client.model.GetNetworkApplianceSingleLan200Response;
import org.openapitools.client.model.GetNetworkApplianceSsids200ResponseInner;
import org.openapitools.client.model.GetNetworkApplianceTrafficShapingUplinkBandwidth200Response;
import org.openapitools.client.model.GetNetworkApplianceTrafficShapingUplinkSelection200Response;
import org.openapitools.client.model.GetNetworkApplianceVlans200ResponseInner;
import org.openapitools.client.model.GetNetworkApplianceVpnSiteToSiteVpn200Response;
import org.openapitools.client.model.GetOrganizationApplianceVpnThirdPartyVPNPeers200Response;
import org.openapitools.client.model.UpdateDeviceApplianceUplinksSettingsRequest;
import org.openapitools.client.model.UpdateNetworkApplianceConnectivityMonitoringDestinationsRequest;
import org.openapitools.client.model.UpdateNetworkApplianceContentFilteringRequest;
import org.openapitools.client.model.UpdateNetworkApplianceFirewallCellularFirewallRulesRequest;
import org.openapitools.client.model.UpdateNetworkApplianceFirewallFirewalledServiceRequest;
import org.openapitools.client.model.UpdateNetworkApplianceFirewallInboundFirewallRulesRequest;
import org.openapitools.client.model.UpdateNetworkApplianceFirewallL7FirewallRulesRequest;
import org.openapitools.client.model.UpdateNetworkApplianceFirewallOneToManyNatRulesRequest;
import org.openapitools.client.model.UpdateNetworkApplianceFirewallOneToOneNatRulesRequest;
import org.openapitools.client.model.UpdateNetworkApplianceFirewallPortForwardingRulesRequest;
import org.openapitools.client.model.UpdateNetworkApplianceFirewallSettingsRequest;
import org.openapitools.client.model.UpdateNetworkAppliancePortRequest;
import org.openapitools.client.model.UpdateNetworkAppliancePrefixesDelegatedStaticRequest;
import org.openapitools.client.model.UpdateNetworkApplianceSecurityIntrusionRequest;
import org.openapitools.client.model.UpdateNetworkApplianceSecurityMalwareRequest;
import org.openapitools.client.model.UpdateNetworkApplianceSettingsRequest;
import org.openapitools.client.model.UpdateNetworkApplianceSingleLanRequest;
import org.openapitools.client.model.UpdateNetworkApplianceSsidRequest;
import org.openapitools.client.model.UpdateNetworkApplianceStaticRouteRequest;
import org.openapitools.client.model.UpdateNetworkApplianceTrafficShapingCustomPerformanceClassRequest;
import org.openapitools.client.model.UpdateNetworkApplianceTrafficShapingRequest;
import org.openapitools.client.model.UpdateNetworkApplianceTrafficShapingRulesRequest;
import org.openapitools.client.model.UpdateNetworkApplianceTrafficShapingUplinkBandwidthRequest;
import org.openapitools.client.model.UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest;
import org.openapitools.client.model.UpdateNetworkApplianceVlanRequest;
import org.openapitools.client.model.UpdateNetworkApplianceVlansSettingsRequest;
import org.openapitools.client.model.UpdateNetworkApplianceVpnBgpRequest;
import org.openapitools.client.model.UpdateNetworkApplianceVpnSiteToSiteVpnRequest;
import org.openapitools.client.model.UpdateNetworkApplianceWarmSpareRequest;
import org.openapitools.client.model.UpdateOrganizationApplianceSecurityIntrusionRequest;
import org.openapitools.client.model.UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequest;
import org.openapitools.client.model.UpdateOrganizationApplianceVpnVpnFirewallRulesRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ApplianceApi
 */
@Disabled
public class ApplianceApiTest {

    private final ApplianceApi api = new ApplianceApi();

    /**
     * Generate a new vMX authentication token
     *
     * Generate a new vMX authentication token
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDeviceApplianceVmxAuthenticationTokenTest() throws ApiException {
        String serial = null;
        CreateDeviceApplianceVmxAuthenticationToken201Response response = api.createDeviceApplianceVmxAuthenticationToken(serial);
        // TODO: test validations
    }

    /**
     * Add a static delegated prefix from a network
     *
     * Add a static delegated prefix from a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkAppliancePrefixesDelegatedStaticTest() throws ApiException {
        String networkId = null;
        CreateNetworkAppliancePrefixesDelegatedStaticRequest createNetworkAppliancePrefixesDelegatedStaticRequest = null;
        Object response = api.createNetworkAppliancePrefixesDelegatedStatic(networkId, createNetworkAppliancePrefixesDelegatedStaticRequest);
        // TODO: test validations
    }

    /**
     * Add a static route for an MX or teleworker network
     *
     * Add a static route for an MX or teleworker network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkApplianceStaticRouteTest() throws ApiException {
        String networkId = null;
        CreateNetworkApplianceStaticRouteRequest createNetworkApplianceStaticRouteRequest = null;
        Object response = api.createNetworkApplianceStaticRoute(networkId, createNetworkApplianceStaticRouteRequest);
        // TODO: test validations
    }

    /**
     * Add a custom performance class for an MX network
     *
     * Add a custom performance class for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkApplianceTrafficShapingCustomPerformanceClassTest() throws ApiException {
        String networkId = null;
        CreateNetworkApplianceTrafficShapingCustomPerformanceClassRequest createNetworkApplianceTrafficShapingCustomPerformanceClassRequest = null;
        Object response = api.createNetworkApplianceTrafficShapingCustomPerformanceClass(networkId, createNetworkApplianceTrafficShapingCustomPerformanceClassRequest);
        // TODO: test validations
    }

    /**
     * Add a VLAN
     *
     * Add a VLAN
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkApplianceVlanTest() throws ApiException {
        String networkId = null;
        CreateNetworkApplianceVlanRequest createNetworkApplianceVlanRequest = null;
        CreateNetworkApplianceVlan201Response response = api.createNetworkApplianceVlan(networkId, createNetworkApplianceVlanRequest);
        // TODO: test validations
    }

    /**
     * Delete a static delegated prefix from a network
     *
     * Delete a static delegated prefix from a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkAppliancePrefixesDelegatedStaticTest() throws ApiException {
        String networkId = null;
        String staticDelegatedPrefixId = null;
        api.deleteNetworkAppliancePrefixesDelegatedStatic(networkId, staticDelegatedPrefixId);
        // TODO: test validations
    }

    /**
     * Delete a static route from an MX or teleworker network
     *
     * Delete a static route from an MX or teleworker network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkApplianceStaticRouteTest() throws ApiException {
        String networkId = null;
        String staticRouteId = null;
        api.deleteNetworkApplianceStaticRoute(networkId, staticRouteId);
        // TODO: test validations
    }

    /**
     * Delete a custom performance class from an MX network
     *
     * Delete a custom performance class from an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkApplianceTrafficShapingCustomPerformanceClassTest() throws ApiException {
        String networkId = null;
        String customPerformanceClassId = null;
        api.deleteNetworkApplianceTrafficShapingCustomPerformanceClass(networkId, customPerformanceClassId);
        // TODO: test validations
    }

    /**
     * Delete a VLAN from a network
     *
     * Delete a VLAN from a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkApplianceVlanTest() throws ApiException {
        String networkId = null;
        String vlanId = null;
        api.deleteNetworkApplianceVlan(networkId, vlanId);
        // TODO: test validations
    }

    /**
     * Return the DHCP subnet information for an appliance
     *
     * Return the DHCP subnet information for an appliance
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceApplianceDhcpSubnetsTest() throws ApiException {
        String serial = null;
        List<Object> response = api.getDeviceApplianceDhcpSubnets(serial);
        // TODO: test validations
    }

    /**
     * Return the performance score for a single MX
     *
     * Return the performance score for a single MX. Only primary MX devices supported. If no data is available, a 204 error code is returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceAppliancePerformanceTest() throws ApiException {
        String serial = null;
        Object response = api.getDeviceAppliancePerformance(serial);
        // TODO: test validations
    }

    /**
     * Return current delegated IPv6 prefixes on an appliance.
     *
     * Return current delegated IPv6 prefixes on an appliance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceAppliancePrefixesDelegatedTest() throws ApiException {
        String serial = null;
        List<Object> response = api.getDeviceAppliancePrefixesDelegated(serial);
        // TODO: test validations
    }

    /**
     * Return prefixes assigned to all IPv6 enabled VLANs on an appliance.
     *
     * Return prefixes assigned to all IPv6 enabled VLANs on an appliance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceAppliancePrefixesDelegatedVlanAssignmentsTest() throws ApiException {
        String serial = null;
        List<Object> response = api.getDeviceAppliancePrefixesDelegatedVlanAssignments(serial);
        // TODO: test validations
    }

    /**
     * Return the uplink settings for an MX appliance
     *
     * Return the uplink settings for an MX appliance
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceApplianceUplinksSettingsTest() throws ApiException {
        String serial = null;
        GetDeviceApplianceUplinksSettings200Response response = api.getDeviceApplianceUplinksSettings(serial);
        // TODO: test validations
    }

    /**
     * List the security events for a client
     *
     * List the security events for a client. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceClientSecurityEventsTest() throws ApiException {
        String networkId = null;
        String clientId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        String sortOrder = null;
        List<Object> response = api.getNetworkApplianceClientSecurityEvents(networkId, clientId, t0, t1, timespan, perPage, startingAfter, endingBefore, sortOrder);
        // TODO: test validations
    }

    /**
     * Return the connectivity testing destinations for an MX network
     *
     * Return the connectivity testing destinations for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceConnectivityMonitoringDestinationsTest() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkApplianceConnectivityMonitoringDestinations(networkId);
        // TODO: test validations
    }

    /**
     * Return the content filtering settings for an MX network
     *
     * Return the content filtering settings for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceContentFilteringTest() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkApplianceContentFiltering(networkId);
        // TODO: test validations
    }

    /**
     * List all available content filtering categories for an MX network
     *
     * List all available content filtering categories for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceContentFilteringCategoriesTest() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkApplianceContentFilteringCategories(networkId);
        // TODO: test validations
    }

    /**
     * Return the cellular firewall rules for an MX network
     *
     * Return the cellular firewall rules for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceFirewallCellularFirewallRulesTest() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkApplianceFirewallCellularFirewallRules(networkId);
        // TODO: test validations
    }

    /**
     * Return the accessibility settings of the given service (&#39;ICMP&#39;, &#39;web&#39;, or &#39;SNMP&#39;)
     *
     * Return the accessibility settings of the given service (&#39;ICMP&#39;, &#39;web&#39;, or &#39;SNMP&#39;)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceFirewallFirewalledServiceTest() throws ApiException {
        String networkId = null;
        String service = null;
        Object response = api.getNetworkApplianceFirewallFirewalledService(networkId, service);
        // TODO: test validations
    }

    /**
     * List the appliance services and their accessibility rules
     *
     * List the appliance services and their accessibility rules
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceFirewallFirewalledServicesTest() throws ApiException {
        String networkId = null;
        List<Object> response = api.getNetworkApplianceFirewallFirewalledServices(networkId);
        // TODO: test validations
    }

    /**
     * Return the inbound cellular firewall rules for an MX network
     *
     * Return the inbound cellular firewall rules for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceFirewallInboundCellularFirewallRulesTest() throws ApiException {
        String networkId = null;
        List<Object> response = api.getNetworkApplianceFirewallInboundCellularFirewallRules(networkId);
        // TODO: test validations
    }

    /**
     * Return the inbound firewall rules for an MX network
     *
     * Return the inbound firewall rules for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceFirewallInboundFirewallRulesTest() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkApplianceFirewallInboundFirewallRules(networkId);
        // TODO: test validations
    }

    /**
     * Return the L3 firewall rules for an MX network
     *
     * Return the L3 firewall rules for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceFirewallL3FirewallRulesTest() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkApplianceFirewallL3FirewallRules(networkId);
        // TODO: test validations
    }

    /**
     * List the MX L7 firewall rules for an MX network
     *
     * List the MX L7 firewall rules for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceFirewallL7FirewallRulesTest() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkApplianceFirewallL7FirewallRules(networkId);
        // TODO: test validations
    }

    /**
     * Return the L7 firewall application categories and their associated applications for an MX network
     *
     * Return the L7 firewall application categories and their associated applications for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceFirewallL7FirewallRulesApplicationCategoriesTest() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkApplianceFirewallL7FirewallRulesApplicationCategories(networkId);
        // TODO: test validations
    }

    /**
     * Return the 1:Many NAT mapping rules for an MX network
     *
     * Return the 1:Many NAT mapping rules for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceFirewallOneToManyNatRulesTest() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkApplianceFirewallOneToManyNatRules(networkId);
        // TODO: test validations
    }

    /**
     * Return the 1:1 NAT mapping rules for an MX network
     *
     * Return the 1:1 NAT mapping rules for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceFirewallOneToOneNatRulesTest() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkApplianceFirewallOneToOneNatRules(networkId);
        // TODO: test validations
    }

    /**
     * Return the port forwarding rules for an MX network
     *
     * Return the port forwarding rules for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceFirewallPortForwardingRulesTest() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkApplianceFirewallPortForwardingRules(networkId);
        // TODO: test validations
    }

    /**
     * Return the firewall settings for this network
     *
     * Return the firewall settings for this network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceFirewallSettingsTest() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkApplianceFirewallSettings(networkId);
        // TODO: test validations
    }

    /**
     * Return per-port VLAN settings for a single MX port.
     *
     * Return per-port VLAN settings for a single MX port.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkAppliancePortTest() throws ApiException {
        String networkId = null;
        String portId = null;
        GetNetworkAppliancePorts200ResponseInner response = api.getNetworkAppliancePort(networkId, portId);
        // TODO: test validations
    }

    /**
     * List per-port VLAN settings for all ports of a MX.
     *
     * List per-port VLAN settings for all ports of a MX.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkAppliancePortsTest() throws ApiException {
        String networkId = null;
        List<GetNetworkAppliancePorts200ResponseInner> response = api.getNetworkAppliancePorts(networkId);
        // TODO: test validations
    }

    /**
     * Return a static delegated prefix from a network
     *
     * Return a static delegated prefix from a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkAppliancePrefixesDelegatedStaticTest() throws ApiException {
        String networkId = null;
        String staticDelegatedPrefixId = null;
        GetNetworkAppliancePrefixesDelegatedStatics200ResponseInner response = api.getNetworkAppliancePrefixesDelegatedStatic(networkId, staticDelegatedPrefixId);
        // TODO: test validations
    }

    /**
     * List static delegated prefixes for a network
     *
     * List static delegated prefixes for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkAppliancePrefixesDelegatedStaticsTest() throws ApiException {
        String networkId = null;
        List<GetNetworkAppliancePrefixesDelegatedStatics200ResponseInner> response = api.getNetworkAppliancePrefixesDelegatedStatics(networkId);
        // TODO: test validations
    }

    /**
     * List the security events for a network
     *
     * List the security events for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceSecurityEventsTest() throws ApiException {
        String networkId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        String sortOrder = null;
        List<Object> response = api.getNetworkApplianceSecurityEvents(networkId, t0, t1, timespan, perPage, startingAfter, endingBefore, sortOrder);
        // TODO: test validations
    }

    /**
     * Returns all supported intrusion settings for an MX network
     *
     * Returns all supported intrusion settings for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceSecurityIntrusionTest() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkApplianceSecurityIntrusion(networkId);
        // TODO: test validations
    }

    /**
     * Returns all supported malware settings for an MX network
     *
     * Returns all supported malware settings for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceSecurityMalwareTest() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkApplianceSecurityMalware(networkId);
        // TODO: test validations
    }

    /**
     * Return the appliance settings for a network
     *
     * Return the appliance settings for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceSettingsTest() throws ApiException {
        String networkId = null;
        GetNetworkApplianceSettings200Response response = api.getNetworkApplianceSettings(networkId);
        // TODO: test validations
    }

    /**
     * Return single LAN configuration
     *
     * Return single LAN configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceSingleLanTest() throws ApiException {
        String networkId = null;
        GetNetworkApplianceSingleLan200Response response = api.getNetworkApplianceSingleLan(networkId);
        // TODO: test validations
    }

    /**
     * Return a single MX SSID
     *
     * Return a single MX SSID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceSsidTest() throws ApiException {
        String networkId = null;
        String number = null;
        GetNetworkApplianceSsids200ResponseInner response = api.getNetworkApplianceSsid(networkId, number);
        // TODO: test validations
    }

    /**
     * List the MX SSIDs in a network
     *
     * List the MX SSIDs in a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceSsidsTest() throws ApiException {
        String networkId = null;
        List<GetNetworkApplianceSsids200ResponseInner> response = api.getNetworkApplianceSsids(networkId);
        // TODO: test validations
    }

    /**
     * Return a static route for an MX or teleworker network
     *
     * Return a static route for an MX or teleworker network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceStaticRouteTest() throws ApiException {
        String networkId = null;
        String staticRouteId = null;
        Object response = api.getNetworkApplianceStaticRoute(networkId, staticRouteId);
        // TODO: test validations
    }

    /**
     * List the static routes for an MX or teleworker network
     *
     * List the static routes for an MX or teleworker network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceStaticRoutesTest() throws ApiException {
        String networkId = null;
        List<Object> response = api.getNetworkApplianceStaticRoutes(networkId);
        // TODO: test validations
    }

    /**
     * Display the traffic shaping settings for an MX network
     *
     * Display the traffic shaping settings for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceTrafficShapingTest() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkApplianceTrafficShaping(networkId);
        // TODO: test validations
    }

    /**
     * Return a custom performance class for an MX network
     *
     * Return a custom performance class for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceTrafficShapingCustomPerformanceClassTest() throws ApiException {
        String networkId = null;
        String customPerformanceClassId = null;
        Object response = api.getNetworkApplianceTrafficShapingCustomPerformanceClass(networkId, customPerformanceClassId);
        // TODO: test validations
    }

    /**
     * List all custom performance classes for an MX network
     *
     * List all custom performance classes for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceTrafficShapingCustomPerformanceClassesTest() throws ApiException {
        String networkId = null;
        List<Object> response = api.getNetworkApplianceTrafficShapingCustomPerformanceClasses(networkId);
        // TODO: test validations
    }

    /**
     * Display the traffic shaping settings rules for an MX network
     *
     * Display the traffic shaping settings rules for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceTrafficShapingRulesTest() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkApplianceTrafficShapingRules(networkId);
        // TODO: test validations
    }

    /**
     * Returns the uplink bandwidth limits for your MX network
     *
     * Returns the uplink bandwidth limits for your MX network. This may not reflect the affected device&#39;s hardware capabilities.  For more information on your device&#39;s hardware capabilities, please consult our MX Family Datasheet - [https://meraki.cisco.com/product-collateral/mx-family-datasheet/?file]
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceTrafficShapingUplinkBandwidthTest() throws ApiException {
        String networkId = null;
        GetNetworkApplianceTrafficShapingUplinkBandwidth200Response response = api.getNetworkApplianceTrafficShapingUplinkBandwidth(networkId);
        // TODO: test validations
    }

    /**
     * Show uplink selection settings for an MX network
     *
     * Show uplink selection settings for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceTrafficShapingUplinkSelectionTest() throws ApiException {
        String networkId = null;
        GetNetworkApplianceTrafficShapingUplinkSelection200Response response = api.getNetworkApplianceTrafficShapingUplinkSelection(networkId);
        // TODO: test validations
    }

    /**
     * Get the sent and received bytes for each uplink of a network.
     *
     * Get the sent and received bytes for each uplink of a network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceUplinksUsageHistoryTest() throws ApiException {
        String networkId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        Integer resolution = null;
        List<Object> response = api.getNetworkApplianceUplinksUsageHistory(networkId, t0, t1, timespan, resolution);
        // TODO: test validations
    }

    /**
     * Return a VLAN
     *
     * Return a VLAN
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceVlanTest() throws ApiException {
        String networkId = null;
        String vlanId = null;
        GetNetworkApplianceVlans200ResponseInner response = api.getNetworkApplianceVlan(networkId, vlanId);
        // TODO: test validations
    }

    /**
     * List the VLANs for an MX network
     *
     * List the VLANs for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceVlansTest() throws ApiException {
        String networkId = null;
        List<GetNetworkApplianceVlans200ResponseInner> response = api.getNetworkApplianceVlans(networkId);
        // TODO: test validations
    }

    /**
     * Returns the enabled status of VLANs for the network
     *
     * Returns the enabled status of VLANs for the network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceVlansSettingsTest() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkApplianceVlansSettings(networkId);
        // TODO: test validations
    }

    /**
     * Return a Hub BGP Configuration
     *
     * Return a Hub BGP Configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceVpnBgpTest() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkApplianceVpnBgp(networkId);
        // TODO: test validations
    }

    /**
     * Return the site-to-site VPN settings of a network
     *
     * Return the site-to-site VPN settings of a network. Only valid for MX networks.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceVpnSiteToSiteVpnTest() throws ApiException {
        String networkId = null;
        GetNetworkApplianceVpnSiteToSiteVpn200Response response = api.getNetworkApplianceVpnSiteToSiteVpn(networkId);
        // TODO: test validations
    }

    /**
     * Return MX warm spare settings
     *
     * Return MX warm spare settings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceWarmSpareTest() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkApplianceWarmSpare(networkId);
        // TODO: test validations
    }

    /**
     * List the security events for an organization
     *
     * List the security events for an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationApplianceSecurityEventsTest() throws ApiException {
        String organizationId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        String sortOrder = null;
        List<Object> response = api.getOrganizationApplianceSecurityEvents(organizationId, t0, t1, timespan, perPage, startingAfter, endingBefore, sortOrder);
        // TODO: test validations
    }

    /**
     * Returns all supported intrusion settings for an organization
     *
     * Returns all supported intrusion settings for an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationApplianceSecurityIntrusionTest() throws ApiException {
        String organizationId = null;
        Object response = api.getOrganizationApplianceSecurityIntrusion(organizationId);
        // TODO: test validations
    }

    /**
     * List the uplink status of every Meraki MX and Z series appliances in the organization
     *
     * List the uplink status of every Meraki MX and Z series appliances in the organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationApplianceUplinkStatusesTest() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<String> networkIds = null;
        List<String> serials = null;
        List<String> iccids = null;
        List<Object> response = api.getOrganizationApplianceUplinkStatuses(organizationId, perPage, startingAfter, endingBefore, networkIds, serials, iccids);
        // TODO: test validations
    }

    /**
     * Show VPN history stat for networks in an organization
     *
     * Show VPN history stat for networks in an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationApplianceVpnStatsTest() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<String> networkIds = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        List<Object> response = api.getOrganizationApplianceVpnStats(organizationId, perPage, startingAfter, endingBefore, networkIds, t0, t1, timespan);
        // TODO: test validations
    }

    /**
     * Show VPN status for networks in an organization
     *
     * Show VPN status for networks in an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationApplianceVpnStatusesTest() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<String> networkIds = null;
        List<Object> response = api.getOrganizationApplianceVpnStatuses(organizationId, perPage, startingAfter, endingBefore, networkIds);
        // TODO: test validations
    }

    /**
     * Return the third party VPN peers for an organization
     *
     * Return the third party VPN peers for an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationApplianceVpnThirdPartyVPNPeersTest() throws ApiException {
        String organizationId = null;
        GetOrganizationApplianceVpnThirdPartyVPNPeers200Response response = api.getOrganizationApplianceVpnThirdPartyVPNPeers(organizationId);
        // TODO: test validations
    }

    /**
     * Return the firewall rules for an organization&#39;s site-to-site VPN
     *
     * Return the firewall rules for an organization&#39;s site-to-site VPN
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationApplianceVpnVpnFirewallRulesTest() throws ApiException {
        String organizationId = null;
        Object response = api.getOrganizationApplianceVpnVpnFirewallRules(organizationId);
        // TODO: test validations
    }

    /**
     * Swap MX primary and warm spare appliances
     *
     * Swap MX primary and warm spare appliances
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void swapNetworkApplianceWarmSpareTest() throws ApiException {
        String networkId = null;
        Object response = api.swapNetworkApplianceWarmSpare(networkId);
        // TODO: test validations
    }

    /**
     * Update the uplink settings for an MX appliance
     *
     * Update the uplink settings for an MX appliance
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeviceApplianceUplinksSettingsTest() throws ApiException {
        String serial = null;
        UpdateDeviceApplianceUplinksSettingsRequest updateDeviceApplianceUplinksSettingsRequest = null;
        GetDeviceApplianceUplinksSettings200Response response = api.updateDeviceApplianceUplinksSettings(serial, updateDeviceApplianceUplinksSettingsRequest);
        // TODO: test validations
    }

    /**
     * Update the connectivity testing destinations for an MX network
     *
     * Update the connectivity testing destinations for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceConnectivityMonitoringDestinationsTest() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceConnectivityMonitoringDestinationsRequest updateNetworkApplianceConnectivityMonitoringDestinationsRequest = null;
        Object response = api.updateNetworkApplianceConnectivityMonitoringDestinations(networkId, updateNetworkApplianceConnectivityMonitoringDestinationsRequest);
        // TODO: test validations
    }

    /**
     * Update the content filtering settings for an MX network
     *
     * Update the content filtering settings for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceContentFilteringTest() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceContentFilteringRequest updateNetworkApplianceContentFilteringRequest = null;
        Object response = api.updateNetworkApplianceContentFiltering(networkId, updateNetworkApplianceContentFilteringRequest);
        // TODO: test validations
    }

    /**
     * Update the cellular firewall rules of an MX network
     *
     * Update the cellular firewall rules of an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceFirewallCellularFirewallRulesTest() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceFirewallCellularFirewallRulesRequest updateNetworkApplianceFirewallCellularFirewallRulesRequest = null;
        Object response = api.updateNetworkApplianceFirewallCellularFirewallRules(networkId, updateNetworkApplianceFirewallCellularFirewallRulesRequest);
        // TODO: test validations
    }

    /**
     * Updates the accessibility settings for the given service (&#39;ICMP&#39;, &#39;web&#39;, or &#39;SNMP&#39;)
     *
     * Updates the accessibility settings for the given service (&#39;ICMP&#39;, &#39;web&#39;, or &#39;SNMP&#39;)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceFirewallFirewalledServiceTest() throws ApiException {
        String networkId = null;
        String service = null;
        UpdateNetworkApplianceFirewallFirewalledServiceRequest updateNetworkApplianceFirewallFirewalledServiceRequest = null;
        Object response = api.updateNetworkApplianceFirewallFirewalledService(networkId, service, updateNetworkApplianceFirewallFirewalledServiceRequest);
        // TODO: test validations
    }

    /**
     * Update the inbound cellular firewall rules of an MX network
     *
     * Update the inbound cellular firewall rules of an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceFirewallInboundCellularFirewallRulesTest() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceFirewallCellularFirewallRulesRequest updateNetworkApplianceFirewallCellularFirewallRulesRequest = null;
        List<Object> response = api.updateNetworkApplianceFirewallInboundCellularFirewallRules(networkId, updateNetworkApplianceFirewallCellularFirewallRulesRequest);
        // TODO: test validations
    }

    /**
     * Update the inbound firewall rules of an MX network
     *
     * Update the inbound firewall rules of an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceFirewallInboundFirewallRulesTest() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceFirewallInboundFirewallRulesRequest updateNetworkApplianceFirewallInboundFirewallRulesRequest = null;
        Object response = api.updateNetworkApplianceFirewallInboundFirewallRules(networkId, updateNetworkApplianceFirewallInboundFirewallRulesRequest);
        // TODO: test validations
    }

    /**
     * Update the L3 firewall rules of an MX network
     *
     * Update the L3 firewall rules of an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceFirewallL3FirewallRulesTest() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceFirewallInboundFirewallRulesRequest updateNetworkApplianceFirewallInboundFirewallRulesRequest = null;
        Object response = api.updateNetworkApplianceFirewallL3FirewallRules(networkId, updateNetworkApplianceFirewallInboundFirewallRulesRequest);
        // TODO: test validations
    }

    /**
     * Update the MX L7 firewall rules for an MX network
     *
     * Update the MX L7 firewall rules for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceFirewallL7FirewallRulesTest() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceFirewallL7FirewallRulesRequest updateNetworkApplianceFirewallL7FirewallRulesRequest = null;
        Object response = api.updateNetworkApplianceFirewallL7FirewallRules(networkId, updateNetworkApplianceFirewallL7FirewallRulesRequest);
        // TODO: test validations
    }

    /**
     * Set the 1:Many NAT mapping rules for an MX network
     *
     * Set the 1:Many NAT mapping rules for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceFirewallOneToManyNatRulesTest() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceFirewallOneToManyNatRulesRequest updateNetworkApplianceFirewallOneToManyNatRulesRequest = null;
        Object response = api.updateNetworkApplianceFirewallOneToManyNatRules(networkId, updateNetworkApplianceFirewallOneToManyNatRulesRequest);
        // TODO: test validations
    }

    /**
     * Set the 1:1 NAT mapping rules for an MX network
     *
     * Set the 1:1 NAT mapping rules for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceFirewallOneToOneNatRulesTest() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceFirewallOneToOneNatRulesRequest updateNetworkApplianceFirewallOneToOneNatRulesRequest = null;
        Object response = api.updateNetworkApplianceFirewallOneToOneNatRules(networkId, updateNetworkApplianceFirewallOneToOneNatRulesRequest);
        // TODO: test validations
    }

    /**
     * Update the port forwarding rules for an MX network
     *
     * Update the port forwarding rules for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceFirewallPortForwardingRulesTest() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceFirewallPortForwardingRulesRequest updateNetworkApplianceFirewallPortForwardingRulesRequest = null;
        Object response = api.updateNetworkApplianceFirewallPortForwardingRules(networkId, updateNetworkApplianceFirewallPortForwardingRulesRequest);
        // TODO: test validations
    }

    /**
     * Update the firewall settings for this network
     *
     * Update the firewall settings for this network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceFirewallSettingsTest() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceFirewallSettingsRequest updateNetworkApplianceFirewallSettingsRequest = null;
        Object response = api.updateNetworkApplianceFirewallSettings(networkId, updateNetworkApplianceFirewallSettingsRequest);
        // TODO: test validations
    }

    /**
     * Update the per-port VLAN settings for a single MX port.
     *
     * Update the per-port VLAN settings for a single MX port.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkAppliancePortTest() throws ApiException {
        String networkId = null;
        String portId = null;
        UpdateNetworkAppliancePortRequest updateNetworkAppliancePortRequest = null;
        GetNetworkAppliancePorts200ResponseInner response = api.updateNetworkAppliancePort(networkId, portId, updateNetworkAppliancePortRequest);
        // TODO: test validations
    }

    /**
     * Update a static delegated prefix from a network
     *
     * Update a static delegated prefix from a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkAppliancePrefixesDelegatedStaticTest() throws ApiException {
        String networkId = null;
        String staticDelegatedPrefixId = null;
        UpdateNetworkAppliancePrefixesDelegatedStaticRequest updateNetworkAppliancePrefixesDelegatedStaticRequest = null;
        Object response = api.updateNetworkAppliancePrefixesDelegatedStatic(networkId, staticDelegatedPrefixId, updateNetworkAppliancePrefixesDelegatedStaticRequest);
        // TODO: test validations
    }

    /**
     * Set the supported intrusion settings for an MX network
     *
     * Set the supported intrusion settings for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceSecurityIntrusionTest() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceSecurityIntrusionRequest updateNetworkApplianceSecurityIntrusionRequest = null;
        Object response = api.updateNetworkApplianceSecurityIntrusion(networkId, updateNetworkApplianceSecurityIntrusionRequest);
        // TODO: test validations
    }

    /**
     * Set the supported malware settings for an MX network
     *
     * Set the supported malware settings for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceSecurityMalwareTest() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceSecurityMalwareRequest updateNetworkApplianceSecurityMalwareRequest = null;
        Object response = api.updateNetworkApplianceSecurityMalware(networkId, updateNetworkApplianceSecurityMalwareRequest);
        // TODO: test validations
    }

    /**
     * Update the appliance settings for a network
     *
     * Update the appliance settings for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceSettingsTest() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceSettingsRequest updateNetworkApplianceSettingsRequest = null;
        GetNetworkApplianceSettings200Response response = api.updateNetworkApplianceSettings(networkId, updateNetworkApplianceSettingsRequest);
        // TODO: test validations
    }

    /**
     * Update single LAN configuration
     *
     * Update single LAN configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceSingleLanTest() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceSingleLanRequest updateNetworkApplianceSingleLanRequest = null;
        GetNetworkApplianceSingleLan200Response response = api.updateNetworkApplianceSingleLan(networkId, updateNetworkApplianceSingleLanRequest);
        // TODO: test validations
    }

    /**
     * Update the attributes of an MX SSID
     *
     * Update the attributes of an MX SSID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceSsidTest() throws ApiException {
        String networkId = null;
        String number = null;
        UpdateNetworkApplianceSsidRequest updateNetworkApplianceSsidRequest = null;
        GetNetworkApplianceSsids200ResponseInner response = api.updateNetworkApplianceSsid(networkId, number, updateNetworkApplianceSsidRequest);
        // TODO: test validations
    }

    /**
     * Update a static route for an MX or teleworker network
     *
     * Update a static route for an MX or teleworker network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceStaticRouteTest() throws ApiException {
        String networkId = null;
        String staticRouteId = null;
        UpdateNetworkApplianceStaticRouteRequest updateNetworkApplianceStaticRouteRequest = null;
        Object response = api.updateNetworkApplianceStaticRoute(networkId, staticRouteId, updateNetworkApplianceStaticRouteRequest);
        // TODO: test validations
    }

    /**
     * Update the traffic shaping settings for an MX network
     *
     * Update the traffic shaping settings for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceTrafficShapingTest() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceTrafficShapingRequest updateNetworkApplianceTrafficShapingRequest = null;
        Object response = api.updateNetworkApplianceTrafficShaping(networkId, updateNetworkApplianceTrafficShapingRequest);
        // TODO: test validations
    }

    /**
     * Update a custom performance class for an MX network
     *
     * Update a custom performance class for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceTrafficShapingCustomPerformanceClassTest() throws ApiException {
        String networkId = null;
        String customPerformanceClassId = null;
        UpdateNetworkApplianceTrafficShapingCustomPerformanceClassRequest updateNetworkApplianceTrafficShapingCustomPerformanceClassRequest = null;
        Object response = api.updateNetworkApplianceTrafficShapingCustomPerformanceClass(networkId, customPerformanceClassId, updateNetworkApplianceTrafficShapingCustomPerformanceClassRequest);
        // TODO: test validations
    }

    /**
     * Update the traffic shaping settings rules for an MX network
     *
     * Update the traffic shaping settings rules for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceTrafficShapingRulesTest() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceTrafficShapingRulesRequest updateNetworkApplianceTrafficShapingRulesRequest = null;
        Object response = api.updateNetworkApplianceTrafficShapingRules(networkId, updateNetworkApplianceTrafficShapingRulesRequest);
        // TODO: test validations
    }

    /**
     * Updates the uplink bandwidth settings for your MX network.
     *
     * Updates the uplink bandwidth settings for your MX network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceTrafficShapingUplinkBandwidthTest() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceTrafficShapingUplinkBandwidthRequest updateNetworkApplianceTrafficShapingUplinkBandwidthRequest = null;
        Object response = api.updateNetworkApplianceTrafficShapingUplinkBandwidth(networkId, updateNetworkApplianceTrafficShapingUplinkBandwidthRequest);
        // TODO: test validations
    }

    /**
     * Update uplink selection settings for an MX network
     *
     * Update uplink selection settings for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceTrafficShapingUplinkSelectionTest() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest updateNetworkApplianceTrafficShapingUplinkSelectionRequest = null;
        GetNetworkApplianceTrafficShapingUplinkSelection200Response response = api.updateNetworkApplianceTrafficShapingUplinkSelection(networkId, updateNetworkApplianceTrafficShapingUplinkSelectionRequest);
        // TODO: test validations
    }

    /**
     * Update a VLAN
     *
     * Update a VLAN
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceVlanTest() throws ApiException {
        String networkId = null;
        String vlanId = null;
        UpdateNetworkApplianceVlanRequest updateNetworkApplianceVlanRequest = null;
        GetNetworkApplianceVlans200ResponseInner response = api.updateNetworkApplianceVlan(networkId, vlanId, updateNetworkApplianceVlanRequest);
        // TODO: test validations
    }

    /**
     * Enable/Disable VLANs for the given network
     *
     * Enable/Disable VLANs for the given network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceVlansSettingsTest() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceVlansSettingsRequest updateNetworkApplianceVlansSettingsRequest = null;
        Object response = api.updateNetworkApplianceVlansSettings(networkId, updateNetworkApplianceVlansSettingsRequest);
        // TODO: test validations
    }

    /**
     * Update a Hub BGP Configuration
     *
     * Update a Hub BGP Configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceVpnBgpTest() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceVpnBgpRequest updateNetworkApplianceVpnBgpRequest = null;
        Object response = api.updateNetworkApplianceVpnBgp(networkId, updateNetworkApplianceVpnBgpRequest);
        // TODO: test validations
    }

    /**
     * Update the site-to-site VPN settings of a network
     *
     * Update the site-to-site VPN settings of a network. Only valid for MX networks in NAT mode.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceVpnSiteToSiteVpnTest() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceVpnSiteToSiteVpnRequest updateNetworkApplianceVpnSiteToSiteVpnRequest = null;
        GetNetworkApplianceVpnSiteToSiteVpn200Response response = api.updateNetworkApplianceVpnSiteToSiteVpn(networkId, updateNetworkApplianceVpnSiteToSiteVpnRequest);
        // TODO: test validations
    }

    /**
     * Update MX warm spare settings
     *
     * Update MX warm spare settings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceWarmSpareTest() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceWarmSpareRequest updateNetworkApplianceWarmSpareRequest = null;
        Object response = api.updateNetworkApplianceWarmSpare(networkId, updateNetworkApplianceWarmSpareRequest);
        // TODO: test validations
    }

    /**
     * Sets supported intrusion settings for an organization
     *
     * Sets supported intrusion settings for an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationApplianceSecurityIntrusionTest() throws ApiException {
        String organizationId = null;
        UpdateOrganizationApplianceSecurityIntrusionRequest updateOrganizationApplianceSecurityIntrusionRequest = null;
        Object response = api.updateOrganizationApplianceSecurityIntrusion(organizationId, updateOrganizationApplianceSecurityIntrusionRequest);
        // TODO: test validations
    }

    /**
     * Update the third party VPN peers for an organization
     *
     * Update the third party VPN peers for an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationApplianceVpnThirdPartyVPNPeersTest() throws ApiException {
        String organizationId = null;
        UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequest updateOrganizationApplianceVpnThirdPartyVPNPeersRequest = null;
        GetOrganizationApplianceVpnThirdPartyVPNPeers200Response response = api.updateOrganizationApplianceVpnThirdPartyVPNPeers(organizationId, updateOrganizationApplianceVpnThirdPartyVPNPeersRequest);
        // TODO: test validations
    }

    /**
     * Update the firewall rules of an organization&#39;s site-to-site VPN
     *
     * Update the firewall rules of an organization&#39;s site-to-site VPN
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationApplianceVpnVpnFirewallRulesTest() throws ApiException {
        String organizationId = null;
        UpdateOrganizationApplianceVpnVpnFirewallRulesRequest updateOrganizationApplianceVpnVpnFirewallRulesRequest = null;
        Object response = api.updateOrganizationApplianceVpnVpnFirewallRules(organizationId, updateOrganizationApplianceVpnVpnFirewallRulesRequest);
        // TODO: test validations
    }

}
