/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateDeviceSwitchRoutingInterfaceRequest;
import org.openapitools.client.model.CreateDeviceSwitchRoutingStaticRouteRequest;
import org.openapitools.client.model.CreateNetworkSwitchRoutingMulticastRendezvousPointRequest;
import org.openapitools.client.model.CreateNetworkSwitchStackRoutingInterfaceRequest;
import org.openapitools.client.model.GetDeviceSwitchRoutingInterfaces200ResponseInner;
import org.openapitools.client.model.GetDeviceSwitchRoutingStaticRoute200Response;
import org.openapitools.client.model.UpdateDeviceSwitchRoutingInterfaceDhcpRequest;
import org.openapitools.client.model.UpdateDeviceSwitchRoutingStaticRouteRequest;
import org.openapitools.client.model.UpdateNetworkSwitchRoutingMulticastRendezvousPointRequest;
import org.openapitools.client.model.UpdateNetworkSwitchRoutingMulticastRequest;
import org.openapitools.client.model.UpdateNetworkSwitchRoutingOspfRequest;
import org.openapitools.client.model.UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest;
import org.openapitools.client.model.UpdateNetworkSwitchStackRoutingInterfaceRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RoutingApi
 */
@Disabled
public class RoutingApiTest {

    private final RoutingApi api = new RoutingApi();

    /**
     * Create a layer 3 interface for a switch
     *
     * Create a layer 3 interface for a switch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDeviceSwitchRoutingInterface_1Test() throws ApiException {
        String serial = null;
        CreateDeviceSwitchRoutingInterfaceRequest createDeviceSwitchRoutingInterfaceRequest = null;
        GetDeviceSwitchRoutingInterfaces200ResponseInner response = api.createDeviceSwitchRoutingInterface_1(serial, createDeviceSwitchRoutingInterfaceRequest);
        // TODO: test validations
    }

    /**
     * Create a layer 3 static route for a switch
     *
     * Create a layer 3 static route for a switch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDeviceSwitchRoutingStaticRoute_1Test() throws ApiException {
        String serial = null;
        CreateDeviceSwitchRoutingStaticRouteRequest createDeviceSwitchRoutingStaticRouteRequest = null;
        Object response = api.createDeviceSwitchRoutingStaticRoute_1(serial, createDeviceSwitchRoutingStaticRouteRequest);
        // TODO: test validations
    }

    /**
     * Create a multicast rendezvous point
     *
     * Create a multicast rendezvous point
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkSwitchRoutingMulticastRendezvousPoint_1Test() throws ApiException {
        String networkId = null;
        CreateNetworkSwitchRoutingMulticastRendezvousPointRequest createNetworkSwitchRoutingMulticastRendezvousPointRequest = null;
        Object response = api.createNetworkSwitchRoutingMulticastRendezvousPoint_1(networkId, createNetworkSwitchRoutingMulticastRendezvousPointRequest);
        // TODO: test validations
    }

    /**
     * Create a layer 3 interface for a switch stack
     *
     * Create a layer 3 interface for a switch stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkSwitchStackRoutingInterface_2Test() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        CreateNetworkSwitchStackRoutingInterfaceRequest createNetworkSwitchStackRoutingInterfaceRequest = null;
        Object response = api.createNetworkSwitchStackRoutingInterface_2(networkId, switchStackId, createNetworkSwitchStackRoutingInterfaceRequest);
        // TODO: test validations
    }

    /**
     * Create a layer 3 static route for a switch stack
     *
     * Create a layer 3 static route for a switch stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkSwitchStackRoutingStaticRoute_2Test() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        CreateDeviceSwitchRoutingStaticRouteRequest createDeviceSwitchRoutingStaticRouteRequest = null;
        Object response = api.createNetworkSwitchStackRoutingStaticRoute_2(networkId, switchStackId, createDeviceSwitchRoutingStaticRouteRequest);
        // TODO: test validations
    }

    /**
     * Delete a layer 3 interface from the switch
     *
     * Delete a layer 3 interface from the switch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDeviceSwitchRoutingInterface_1Test() throws ApiException {
        String serial = null;
        String interfaceId = null;
        api.deleteDeviceSwitchRoutingInterface_1(serial, interfaceId);
        // TODO: test validations
    }

    /**
     * Delete a layer 3 static route for a switch
     *
     * Delete a layer 3 static route for a switch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDeviceSwitchRoutingStaticRoute_1Test() throws ApiException {
        String serial = null;
        String staticRouteId = null;
        api.deleteDeviceSwitchRoutingStaticRoute_1(serial, staticRouteId);
        // TODO: test validations
    }

    /**
     * Delete a multicast rendezvous point
     *
     * Delete a multicast rendezvous point
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkSwitchRoutingMulticastRendezvousPoint_1Test() throws ApiException {
        String networkId = null;
        String rendezvousPointId = null;
        api.deleteNetworkSwitchRoutingMulticastRendezvousPoint_1(networkId, rendezvousPointId);
        // TODO: test validations
    }

    /**
     * Delete a layer 3 interface from a switch stack
     *
     * Delete a layer 3 interface from a switch stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkSwitchStackRoutingInterface_2Test() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        String interfaceId = null;
        api.deleteNetworkSwitchStackRoutingInterface_2(networkId, switchStackId, interfaceId);
        // TODO: test validations
    }

    /**
     * Delete a layer 3 static route for a switch stack
     *
     * Delete a layer 3 static route for a switch stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkSwitchStackRoutingStaticRoute_2Test() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        String staticRouteId = null;
        api.deleteNetworkSwitchStackRoutingStaticRoute_2(networkId, switchStackId, staticRouteId);
        // TODO: test validations
    }

    /**
     * Return a layer 3 interface DHCP configuration for a switch
     *
     * Return a layer 3 interface DHCP configuration for a switch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceSwitchRoutingInterfaceDhcp_1Test() throws ApiException {
        String serial = null;
        String interfaceId = null;
        Object response = api.getDeviceSwitchRoutingInterfaceDhcp_1(serial, interfaceId);
        // TODO: test validations
    }

    /**
     * Return a layer 3 interface for a switch
     *
     * Return a layer 3 interface for a switch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceSwitchRoutingInterface_1Test() throws ApiException {
        String serial = null;
        String interfaceId = null;
        GetDeviceSwitchRoutingInterfaces200ResponseInner response = api.getDeviceSwitchRoutingInterface_1(serial, interfaceId);
        // TODO: test validations
    }

    /**
     * List layer 3 interfaces for a switch
     *
     * List layer 3 interfaces for a switch. Those for a stack may be found under switch stack routing.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceSwitchRoutingInterfaces_1Test() throws ApiException {
        String serial = null;
        List<GetDeviceSwitchRoutingInterfaces200ResponseInner> response = api.getDeviceSwitchRoutingInterfaces_1(serial);
        // TODO: test validations
    }

    /**
     * Return a layer 3 static route for a switch
     *
     * Return a layer 3 static route for a switch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceSwitchRoutingStaticRoute_1Test() throws ApiException {
        String serial = null;
        String staticRouteId = null;
        GetDeviceSwitchRoutingStaticRoute200Response response = api.getDeviceSwitchRoutingStaticRoute_1(serial, staticRouteId);
        // TODO: test validations
    }

    /**
     * List layer 3 static routes for a switch
     *
     * List layer 3 static routes for a switch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceSwitchRoutingStaticRoutes_1Test() throws ApiException {
        String serial = null;
        List<Object> response = api.getDeviceSwitchRoutingStaticRoutes_1(serial);
        // TODO: test validations
    }

    /**
     * Return a multicast rendezvous point
     *
     * Return a multicast rendezvous point
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchRoutingMulticastRendezvousPoint_1Test() throws ApiException {
        String networkId = null;
        String rendezvousPointId = null;
        Object response = api.getNetworkSwitchRoutingMulticastRendezvousPoint_1(networkId, rendezvousPointId);
        // TODO: test validations
    }

    /**
     * List multicast rendezvous points
     *
     * List multicast rendezvous points
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchRoutingMulticastRendezvousPoints_1Test() throws ApiException {
        String networkId = null;
        List<List<Object>> response = api.getNetworkSwitchRoutingMulticastRendezvousPoints_1(networkId);
        // TODO: test validations
    }

    /**
     * Return multicast settings for a network
     *
     * Return multicast settings for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchRoutingMulticast_1Test() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkSwitchRoutingMulticast_1(networkId);
        // TODO: test validations
    }

    /**
     * Return layer 3 OSPF routing configuration
     *
     * Return layer 3 OSPF routing configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchRoutingOspf_1Test() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkSwitchRoutingOspf_1(networkId);
        // TODO: test validations
    }

    /**
     * Return a layer 3 interface DHCP configuration for a switch stack
     *
     * Return a layer 3 interface DHCP configuration for a switch stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchStackRoutingInterfaceDhcp_2Test() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        String interfaceId = null;
        Object response = api.getNetworkSwitchStackRoutingInterfaceDhcp_2(networkId, switchStackId, interfaceId);
        // TODO: test validations
    }

    /**
     * Return a layer 3 interface from a switch stack
     *
     * Return a layer 3 interface from a switch stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchStackRoutingInterface_2Test() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        String interfaceId = null;
        Object response = api.getNetworkSwitchStackRoutingInterface_2(networkId, switchStackId, interfaceId);
        // TODO: test validations
    }

    /**
     * List layer 3 interfaces for a switch stack
     *
     * List layer 3 interfaces for a switch stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchStackRoutingInterfaces_2Test() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        List<Object> response = api.getNetworkSwitchStackRoutingInterfaces_2(networkId, switchStackId);
        // TODO: test validations
    }

    /**
     * Return a layer 3 static route for a switch stack
     *
     * Return a layer 3 static route for a switch stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchStackRoutingStaticRoute_2Test() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        String staticRouteId = null;
        Object response = api.getNetworkSwitchStackRoutingStaticRoute_2(networkId, switchStackId, staticRouteId);
        // TODO: test validations
    }

    /**
     * List layer 3 static routes for a switch stack
     *
     * List layer 3 static routes for a switch stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchStackRoutingStaticRoutes_2Test() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        List<Object> response = api.getNetworkSwitchStackRoutingStaticRoutes_2(networkId, switchStackId);
        // TODO: test validations
    }

    /**
     * Update a layer 3 interface DHCP configuration for a switch
     *
     * Update a layer 3 interface DHCP configuration for a switch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeviceSwitchRoutingInterfaceDhcp_1Test() throws ApiException {
        String serial = null;
        String interfaceId = null;
        UpdateDeviceSwitchRoutingInterfaceDhcpRequest updateDeviceSwitchRoutingInterfaceDhcpRequest = null;
        Object response = api.updateDeviceSwitchRoutingInterfaceDhcp_1(serial, interfaceId, updateDeviceSwitchRoutingInterfaceDhcpRequest);
        // TODO: test validations
    }

    /**
     * Update a layer 3 interface for a switch
     *
     * Update a layer 3 interface for a switch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeviceSwitchRoutingInterface_1Test() throws ApiException {
        String serial = null;
        String interfaceId = null;
        CreateDeviceSwitchRoutingInterfaceRequest createDeviceSwitchRoutingInterfaceRequest = null;
        GetDeviceSwitchRoutingInterfaces200ResponseInner response = api.updateDeviceSwitchRoutingInterface_1(serial, interfaceId, createDeviceSwitchRoutingInterfaceRequest);
        // TODO: test validations
    }

    /**
     * Update a layer 3 static route for a switch
     *
     * Update a layer 3 static route for a switch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeviceSwitchRoutingStaticRoute_1Test() throws ApiException {
        String serial = null;
        String staticRouteId = null;
        UpdateDeviceSwitchRoutingStaticRouteRequest updateDeviceSwitchRoutingStaticRouteRequest = null;
        Object response = api.updateDeviceSwitchRoutingStaticRoute_1(serial, staticRouteId, updateDeviceSwitchRoutingStaticRouteRequest);
        // TODO: test validations
    }

    /**
     * Update a multicast rendezvous point
     *
     * Update a multicast rendezvous point
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSwitchRoutingMulticastRendezvousPoint_1Test() throws ApiException {
        String networkId = null;
        String rendezvousPointId = null;
        UpdateNetworkSwitchRoutingMulticastRendezvousPointRequest updateNetworkSwitchRoutingMulticastRendezvousPointRequest = null;
        Object response = api.updateNetworkSwitchRoutingMulticastRendezvousPoint_1(networkId, rendezvousPointId, updateNetworkSwitchRoutingMulticastRendezvousPointRequest);
        // TODO: test validations
    }

    /**
     * Update multicast settings for a network
     *
     * Update multicast settings for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSwitchRoutingMulticast_1Test() throws ApiException {
        String networkId = null;
        UpdateNetworkSwitchRoutingMulticastRequest updateNetworkSwitchRoutingMulticastRequest = null;
        Object response = api.updateNetworkSwitchRoutingMulticast_1(networkId, updateNetworkSwitchRoutingMulticastRequest);
        // TODO: test validations
    }

    /**
     * Update layer 3 OSPF routing configuration
     *
     * Update layer 3 OSPF routing configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSwitchRoutingOspf_1Test() throws ApiException {
        String networkId = null;
        UpdateNetworkSwitchRoutingOspfRequest updateNetworkSwitchRoutingOspfRequest = null;
        Object response = api.updateNetworkSwitchRoutingOspf_1(networkId, updateNetworkSwitchRoutingOspfRequest);
        // TODO: test validations
    }

    /**
     * Update a layer 3 interface DHCP configuration for a switch stack
     *
     * Update a layer 3 interface DHCP configuration for a switch stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSwitchStackRoutingInterfaceDhcp_2Test() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        String interfaceId = null;
        UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest updateNetworkSwitchStackRoutingInterfaceDhcpRequest = null;
        Object response = api.updateNetworkSwitchStackRoutingInterfaceDhcp_2(networkId, switchStackId, interfaceId, updateNetworkSwitchStackRoutingInterfaceDhcpRequest);
        // TODO: test validations
    }

    /**
     * Update a layer 3 interface for a switch stack
     *
     * Update a layer 3 interface for a switch stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSwitchStackRoutingInterface_2Test() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        String interfaceId = null;
        UpdateNetworkSwitchStackRoutingInterfaceRequest updateNetworkSwitchStackRoutingInterfaceRequest = null;
        Object response = api.updateNetworkSwitchStackRoutingInterface_2(networkId, switchStackId, interfaceId, updateNetworkSwitchStackRoutingInterfaceRequest);
        // TODO: test validations
    }

    /**
     * Update a layer 3 static route for a switch stack
     *
     * Update a layer 3 static route for a switch stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSwitchStackRoutingStaticRoute_2Test() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        String staticRouteId = null;
        UpdateDeviceSwitchRoutingStaticRouteRequest updateDeviceSwitchRoutingStaticRouteRequest = null;
        Object response = api.updateNetworkSwitchStackRoutingStaticRoute_2(networkId, switchStackId, staticRouteId, updateDeviceSwitchRoutingStaticRouteRequest);
        // TODO: test validations
    }

}
