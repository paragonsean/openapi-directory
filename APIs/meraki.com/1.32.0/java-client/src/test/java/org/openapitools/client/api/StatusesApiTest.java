/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GetDeviceSwitchPortsStatuses200ResponseInner;
import org.openapitools.client.model.GetOrganizationCellularGatewayUplinkStatuses200ResponseInner;
import org.openapitools.client.model.GetOrganizationDevicesPowerModulesStatusesByDevice200ResponseInner;
import org.openapitools.client.model.GetOrganizationDevicesStatuses200Response;
import org.openapitools.client.model.GetOrganizationDevicesStatusesOverview200Response;
import org.openapitools.client.model.GetOrganizationUplinksStatuses200ResponseInner;
import org.openapitools.client.model.GetOrganizationWirelessDevicesEthernetStatuses200ResponseInner;
import org.openapitools.client.model.UpdateOrganizationCameraOnboardingStatusesRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for StatusesApi
 */
@Disabled
public class StatusesApiTest {

    private final StatusesApi api = new StatusesApi();

    /**
     * Return the packet counters for all the ports of a switch
     *
     * Return the packet counters for all the ports of a switch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceSwitchPortsStatusesPackets_2Test() throws ApiException {
        String serial = null;
        String t0 = null;
        Float timespan = null;
        List<Object> response = api.getDeviceSwitchPortsStatusesPackets_2(serial, t0, timespan);
        // TODO: test validations
    }

    /**
     * Return the status for all the ports of a switch
     *
     * Return the status for all the ports of a switch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceSwitchPortsStatuses_2Test() throws ApiException {
        String serial = null;
        String t0 = null;
        Float timespan = null;
        List<GetDeviceSwitchPortsStatuses200ResponseInner> response = api.getDeviceSwitchPortsStatuses_2(serial, t0, timespan);
        // TODO: test validations
    }

    /**
     * List the uplink status of every Meraki MX and Z series appliances in the organization
     *
     * List the uplink status of every Meraki MX and Z series appliances in the organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationApplianceUplinkStatuses_2Test() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<String> networkIds = null;
        List<String> serials = null;
        List<String> iccids = null;
        List<Object> response = api.getOrganizationApplianceUplinkStatuses_2(organizationId, perPage, startingAfter, endingBefore, networkIds, serials, iccids);
        // TODO: test validations
    }

    /**
     * Show VPN status for networks in an organization
     *
     * Show VPN status for networks in an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationApplianceVpnStatuses_2Test() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<String> networkIds = null;
        List<Object> response = api.getOrganizationApplianceVpnStatuses_2(organizationId, perPage, startingAfter, endingBefore, networkIds);
        // TODO: test validations
    }

    /**
     * Fetch onboarding status of cameras
     *
     * Fetch onboarding status of cameras
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationCameraOnboardingStatuses_2Test() throws ApiException {
        String organizationId = null;
        List<String> serials = null;
        List<String> networkIds = null;
        List<Object> response = api.getOrganizationCameraOnboardingStatuses_2(organizationId, serials, networkIds);
        // TODO: test validations
    }

    /**
     * List the uplink status of every Meraki MG cellular gateway in the organization
     *
     * List the uplink status of every Meraki MG cellular gateway in the organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationCellularGatewayUplinkStatuses_2Test() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<String> networkIds = null;
        List<String> serials = null;
        List<String> iccids = null;
        List<GetOrganizationCellularGatewayUplinkStatuses200ResponseInner> response = api.getOrganizationCellularGatewayUplinkStatuses_2(organizationId, perPage, startingAfter, endingBefore, networkIds, serials, iccids);
        // TODO: test validations
    }

    /**
     * List the power status information for devices in an organization
     *
     * List the power status information for devices in an organization. The data returned by this endpoint is updated every 5 minutes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationDevicesPowerModulesStatusesByDevice_3Test() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<String> networkIds = null;
        List<String> productTypes = null;
        List<String> serials = null;
        List<String> tags = null;
        String tagsFilterType = null;
        List<GetOrganizationDevicesPowerModulesStatusesByDevice200ResponseInner> response = api.getOrganizationDevicesPowerModulesStatusesByDevice_3(organizationId, perPage, startingAfter, endingBefore, networkIds, productTypes, serials, tags, tagsFilterType);
        // TODO: test validations
    }

    /**
     * Return an overview of current device statuses
     *
     * Return an overview of current device statuses
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationDevicesStatusesOverview_2Test() throws ApiException {
        String organizationId = null;
        List<String> productTypes = null;
        List<String> networkIds = null;
        GetOrganizationDevicesStatusesOverview200Response response = api.getOrganizationDevicesStatusesOverview_2(organizationId, productTypes, networkIds);
        // TODO: test validations
    }

    /**
     * List the status of every Meraki device in the organization
     *
     * List the status of every Meraki device in the organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationDevicesStatuses_2Test() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<String> networkIds = null;
        List<String> serials = null;
        List<String> statuses = null;
        List<String> productTypes = null;
        List<String> models = null;
        List<String> tags = null;
        String tagsFilterType = null;
        GetOrganizationDevicesStatuses200Response response = api.getOrganizationDevicesStatuses_2(organizationId, perPage, startingAfter, endingBefore, networkIds, serials, statuses, productTypes, models, tags, tagsFilterType);
        // TODO: test validations
    }

    /**
     * List the uplink status of every Meraki MX, MG and Z series devices in the organization
     *
     * List the uplink status of every Meraki MX, MG and Z series devices in the organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationUplinksStatuses_2Test() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<String> networkIds = null;
        List<String> serials = null;
        List<String> iccids = null;
        List<GetOrganizationUplinksStatuses200ResponseInner> response = api.getOrganizationUplinksStatuses_2(organizationId, perPage, startingAfter, endingBefore, networkIds, serials, iccids);
        // TODO: test validations
    }

    /**
     * Endpoint to see power status for wireless devices
     *
     * Endpoint to see power status for wireless devices
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationWirelessDevicesEthernetStatuses_3Test() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<String> networkIds = null;
        List<GetOrganizationWirelessDevicesEthernetStatuses200ResponseInner> response = api.getOrganizationWirelessDevicesEthernetStatuses_3(organizationId, perPage, startingAfter, endingBefore, networkIds);
        // TODO: test validations
    }

    /**
     * Notify that credential handoff to camera has completed
     *
     * Notify that credential handoff to camera has completed
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationCameraOnboardingStatuses_2Test() throws ApiException {
        String organizationId = null;
        UpdateOrganizationCameraOnboardingStatusesRequest updateOrganizationCameraOnboardingStatusesRequest = null;
        Object response = api.updateOrganizationCameraOnboardingStatuses_2(organizationId, updateOrganizationCameraOnboardingStatusesRequest);
        // TODO: test validations
    }

}
