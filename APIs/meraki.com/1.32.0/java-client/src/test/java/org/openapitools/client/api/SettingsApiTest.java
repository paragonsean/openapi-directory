/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GetDeviceApplianceUplinksSettings200Response;
import org.openapitools.client.model.GetDeviceWirelessBluetoothSettings200Response;
import org.openapitools.client.model.GetNetworkApplianceSettings200Response;
import org.openapitools.client.model.GetNetworkSettings200Response;
import org.openapitools.client.model.GetNetworkSwitchSettings200Response;
import org.openapitools.client.model.GetNetworkWirelessBluetoothSettings200Response;
import org.openapitools.client.model.GetNetworkWirelessSettings200Response;
import org.openapitools.client.model.GetNetworkWirelessSsidSplashSettings200Response;
import org.openapitools.client.model.UpdateDeviceApplianceUplinksSettingsRequest;
import org.openapitools.client.model.UpdateDeviceCameraVideoSettingsRequest;
import org.openapitools.client.model.UpdateDeviceWirelessBluetoothSettingsRequest;
import org.openapitools.client.model.UpdateDeviceWirelessRadioSettingsRequest;
import org.openapitools.client.model.UpdateNetworkAlertsSettingsRequest;
import org.openapitools.client.model.UpdateNetworkApplianceFirewallSettingsRequest;
import org.openapitools.client.model.UpdateNetworkApplianceSettingsRequest;
import org.openapitools.client.model.UpdateNetworkApplianceVlansSettingsRequest;
import org.openapitools.client.model.UpdateNetworkSettingsRequest;
import org.openapitools.client.model.UpdateNetworkSwitchSettingsRequest;
import org.openapitools.client.model.UpdateNetworkWirelessBluetoothSettingsRequest;
import org.openapitools.client.model.UpdateNetworkWirelessSettingsRequest;
import org.openapitools.client.model.UpdateNetworkWirelessSsidSplashSettingsRequest;
import org.openapitools.client.model.UpdateOrganizationAdaptivePolicySettingsRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SettingsApi
 */
@Disabled
public class SettingsApiTest {

    private final SettingsApi api = new SettingsApi();

    /**
     * Return the uplink settings for an MX appliance
     *
     * Return the uplink settings for an MX appliance
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceApplianceUplinksSettings_2Test() throws ApiException {
        String serial = null;
        GetDeviceApplianceUplinksSettings200Response response = api.getDeviceApplianceUplinksSettings_2(serial);
        // TODO: test validations
    }

    /**
     * Returns video settings for the given camera
     *
     * Returns video settings for the given camera
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceCameraVideoSettings_2Test() throws ApiException {
        String serial = null;
        Object response = api.getDeviceCameraVideoSettings_2(serial);
        // TODO: test validations
    }

    /**
     * Return the bluetooth settings for a wireless device
     *
     * Return the bluetooth settings for a wireless device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceWirelessBluetoothSettings_2Test() throws ApiException {
        String serial = null;
        GetDeviceWirelessBluetoothSettings200Response response = api.getDeviceWirelessBluetoothSettings_2(serial);
        // TODO: test validations
    }

    /**
     * Return the radio settings of a device
     *
     * Return the radio settings of a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceWirelessRadioSettings_2Test() throws ApiException {
        String serial = null;
        Object response = api.getDeviceWirelessRadioSettings_2(serial);
        // TODO: test validations
    }

    /**
     * Return the alert configuration for this network
     *
     * Return the alert configuration for this network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkAlertsSettings_2Test() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkAlertsSettings_2(networkId);
        // TODO: test validations
    }

    /**
     * Return the firewall settings for this network
     *
     * Return the firewall settings for this network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceFirewallSettings_2Test() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkApplianceFirewallSettings_2(networkId);
        // TODO: test validations
    }

    /**
     * Return the appliance settings for a network
     *
     * Return the appliance settings for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceSettings_1Test() throws ApiException {
        String networkId = null;
        GetNetworkApplianceSettings200Response response = api.getNetworkApplianceSettings_1(networkId);
        // TODO: test validations
    }

    /**
     * Returns the enabled status of VLANs for the network
     *
     * Returns the enabled status of VLANs for the network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceVlansSettings_2Test() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkApplianceVlansSettings_2(networkId);
        // TODO: test validations
    }

    /**
     * Return the settings for a network
     *
     * Return the settings for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSettings_1Test() throws ApiException {
        String networkId = null;
        GetNetworkSettings200Response response = api.getNetworkSettings_1(networkId);
        // TODO: test validations
    }

    /**
     * Returns the switch network settings
     *
     * Returns the switch network settings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchSettings_1Test() throws ApiException {
        String networkId = null;
        GetNetworkSwitchSettings200Response response = api.getNetworkSwitchSettings_1(networkId);
        // TODO: test validations
    }

    /**
     * Return the Bluetooth settings for a network. &lt;a href&#x3D;\&quot;https://documentation.meraki.com/MR/Bluetooth/Bluetooth_Low_Energy_(BLE)\&quot;&gt;Bluetooth settings&lt;/a&gt; must be enabled on the network.
     *
     * Return the Bluetooth settings for a network. &lt;a href&#x3D;\&quot;https://documentation.meraki.com/MR/Bluetooth/Bluetooth_Low_Energy_(BLE)\&quot;&gt;Bluetooth settings&lt;/a&gt; must be enabled on the network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessBluetoothSettings_2Test() throws ApiException {
        String networkId = null;
        GetNetworkWirelessBluetoothSettings200Response response = api.getNetworkWirelessBluetoothSettings_2(networkId);
        // TODO: test validations
    }

    /**
     * Return the wireless settings for a network
     *
     * Return the wireless settings for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessSettings_1Test() throws ApiException {
        String networkId = null;
        GetNetworkWirelessSettings200Response response = api.getNetworkWirelessSettings_1(networkId);
        // TODO: test validations
    }

    /**
     * Display the splash page settings for the given SSID
     *
     * Display the splash page settings for the given SSID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessSsidSplashSettings_3Test() throws ApiException {
        String networkId = null;
        String number = null;
        GetNetworkWirelessSsidSplashSettings200Response response = api.getNetworkWirelessSsidSplashSettings_3(networkId, number);
        // TODO: test validations
    }

    /**
     * Returns global adaptive policy settings in an organization
     *
     * Returns global adaptive policy settings in an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationAdaptivePolicySettings_2Test() throws ApiException {
        String organizationId = null;
        Object response = api.getOrganizationAdaptivePolicySettings_2(organizationId);
        // TODO: test validations
    }

    /**
     * Update the uplink settings for an MX appliance
     *
     * Update the uplink settings for an MX appliance
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeviceApplianceUplinksSettings_2Test() throws ApiException {
        String serial = null;
        UpdateDeviceApplianceUplinksSettingsRequest updateDeviceApplianceUplinksSettingsRequest = null;
        GetDeviceApplianceUplinksSettings200Response response = api.updateDeviceApplianceUplinksSettings_2(serial, updateDeviceApplianceUplinksSettingsRequest);
        // TODO: test validations
    }

    /**
     * Update video settings for the given camera
     *
     * Update video settings for the given camera
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeviceCameraVideoSettings_2Test() throws ApiException {
        String serial = null;
        UpdateDeviceCameraVideoSettingsRequest updateDeviceCameraVideoSettingsRequest = null;
        Object response = api.updateDeviceCameraVideoSettings_2(serial, updateDeviceCameraVideoSettingsRequest);
        // TODO: test validations
    }

    /**
     * Update the bluetooth settings for a wireless device
     *
     * Update the bluetooth settings for a wireless device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeviceWirelessBluetoothSettings_2Test() throws ApiException {
        String serial = null;
        UpdateDeviceWirelessBluetoothSettingsRequest updateDeviceWirelessBluetoothSettingsRequest = null;
        GetDeviceWirelessBluetoothSettings200Response response = api.updateDeviceWirelessBluetoothSettings_2(serial, updateDeviceWirelessBluetoothSettingsRequest);
        // TODO: test validations
    }

    /**
     * Update the radio settings of a device
     *
     * Update the radio settings of a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeviceWirelessRadioSettings_2Test() throws ApiException {
        String serial = null;
        UpdateDeviceWirelessRadioSettingsRequest updateDeviceWirelessRadioSettingsRequest = null;
        Object response = api.updateDeviceWirelessRadioSettings_2(serial, updateDeviceWirelessRadioSettingsRequest);
        // TODO: test validations
    }

    /**
     * Update the alert configuration for this network
     *
     * Update the alert configuration for this network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkAlertsSettings_2Test() throws ApiException {
        String networkId = null;
        UpdateNetworkAlertsSettingsRequest updateNetworkAlertsSettingsRequest = null;
        Object response = api.updateNetworkAlertsSettings_2(networkId, updateNetworkAlertsSettingsRequest);
        // TODO: test validations
    }

    /**
     * Update the firewall settings for this network
     *
     * Update the firewall settings for this network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceFirewallSettings_2Test() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceFirewallSettingsRequest updateNetworkApplianceFirewallSettingsRequest = null;
        Object response = api.updateNetworkApplianceFirewallSettings_2(networkId, updateNetworkApplianceFirewallSettingsRequest);
        // TODO: test validations
    }

    /**
     * Update the appliance settings for a network
     *
     * Update the appliance settings for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceSettings_1Test() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceSettingsRequest updateNetworkApplianceSettingsRequest = null;
        GetNetworkApplianceSettings200Response response = api.updateNetworkApplianceSettings_1(networkId, updateNetworkApplianceSettingsRequest);
        // TODO: test validations
    }

    /**
     * Enable/Disable VLANs for the given network
     *
     * Enable/Disable VLANs for the given network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceVlansSettings_2Test() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceVlansSettingsRequest updateNetworkApplianceVlansSettingsRequest = null;
        Object response = api.updateNetworkApplianceVlansSettings_2(networkId, updateNetworkApplianceVlansSettingsRequest);
        // TODO: test validations
    }

    /**
     * Update the settings for a network
     *
     * Update the settings for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSettings_1Test() throws ApiException {
        String networkId = null;
        UpdateNetworkSettingsRequest updateNetworkSettingsRequest = null;
        GetNetworkSettings200Response response = api.updateNetworkSettings_1(networkId, updateNetworkSettingsRequest);
        // TODO: test validations
    }

    /**
     * Update switch network settings
     *
     * Update switch network settings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSwitchSettings_1Test() throws ApiException {
        String networkId = null;
        UpdateNetworkSwitchSettingsRequest updateNetworkSwitchSettingsRequest = null;
        GetNetworkSwitchSettings200Response response = api.updateNetworkSwitchSettings_1(networkId, updateNetworkSwitchSettingsRequest);
        // TODO: test validations
    }

    /**
     * Update the Bluetooth settings for a network
     *
     * Update the Bluetooth settings for a network. See the docs page for &lt;a href&#x3D;\&quot;https://documentation.meraki.com/MR/Bluetooth/Bluetooth_Low_Energy_(BLE)\&quot;&gt;Bluetooth settings&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkWirelessBluetoothSettings_2Test() throws ApiException {
        String networkId = null;
        UpdateNetworkWirelessBluetoothSettingsRequest updateNetworkWirelessBluetoothSettingsRequest = null;
        GetNetworkWirelessBluetoothSettings200Response response = api.updateNetworkWirelessBluetoothSettings_2(networkId, updateNetworkWirelessBluetoothSettingsRequest);
        // TODO: test validations
    }

    /**
     * Update the wireless settings for a network
     *
     * Update the wireless settings for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkWirelessSettings_1Test() throws ApiException {
        String networkId = null;
        UpdateNetworkWirelessSettingsRequest updateNetworkWirelessSettingsRequest = null;
        GetNetworkWirelessSettings200Response response = api.updateNetworkWirelessSettings_1(networkId, updateNetworkWirelessSettingsRequest);
        // TODO: test validations
    }

    /**
     * Modify the splash page settings for the given SSID
     *
     * Modify the splash page settings for the given SSID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkWirelessSsidSplashSettings_3Test() throws ApiException {
        String networkId = null;
        String number = null;
        UpdateNetworkWirelessSsidSplashSettingsRequest updateNetworkWirelessSsidSplashSettingsRequest = null;
        GetNetworkWirelessSsidSplashSettings200Response response = api.updateNetworkWirelessSsidSplashSettings_3(networkId, number, updateNetworkWirelessSsidSplashSettingsRequest);
        // TODO: test validations
    }

    /**
     * Update global adaptive policy settings
     *
     * Update global adaptive policy settings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationAdaptivePolicySettings_2Test() throws ApiException {
        String organizationId = null;
        UpdateOrganizationAdaptivePolicySettingsRequest updateOrganizationAdaptivePolicySettingsRequest = null;
        Object response = api.updateOrganizationAdaptivePolicySettings_2(organizationId, updateOrganizationAdaptivePolicySettingsRequest);
        // TODO: test validations
    }

}
