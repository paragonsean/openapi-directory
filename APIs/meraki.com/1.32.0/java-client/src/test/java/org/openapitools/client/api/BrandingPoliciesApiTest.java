/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateOrganizationBrandingPolicy201Response;
import org.openapitools.client.model.CreateOrganizationBrandingPolicyRequest;
import org.openapitools.client.model.GetOrganizationBrandingPolicies200ResponseInner;
import org.openapitools.client.model.GetOrganizationBrandingPoliciesPriorities200Response;
import org.openapitools.client.model.UpdateOrganizationBrandingPoliciesPrioritiesRequest;
import org.openapitools.client.model.UpdateOrganizationBrandingPolicyRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BrandingPoliciesApi
 */
@Disabled
public class BrandingPoliciesApiTest {

    private final BrandingPoliciesApi api = new BrandingPoliciesApi();

    /**
     * Add a new branding policy to an organization
     *
     * Add a new branding policy to an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationBrandingPolicy_1Test() throws ApiException {
        String organizationId = null;
        CreateOrganizationBrandingPolicyRequest createOrganizationBrandingPolicyRequest = null;
        CreateOrganizationBrandingPolicy201Response response = api.createOrganizationBrandingPolicy_1(organizationId, createOrganizationBrandingPolicyRequest);
        // TODO: test validations
    }

    /**
     * Delete a branding policy
     *
     * Delete a branding policy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganizationBrandingPolicy_1Test() throws ApiException {
        String organizationId = null;
        String brandingPolicyId = null;
        api.deleteOrganizationBrandingPolicy_1(organizationId, brandingPolicyId);
        // TODO: test validations
    }

    /**
     * Return the branding policy IDs of an organization in priority order
     *
     * Return the branding policy IDs of an organization in priority order. IDs are ordered in ascending order of priority (IDs later in the array have higher priority).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationBrandingPoliciesPriorities_1Test() throws ApiException {
        String organizationId = null;
        GetOrganizationBrandingPoliciesPriorities200Response response = api.getOrganizationBrandingPoliciesPriorities_1(organizationId);
        // TODO: test validations
    }

    /**
     * List the branding policies of an organization
     *
     * List the branding policies of an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationBrandingPolicies_1Test() throws ApiException {
        String organizationId = null;
        List<GetOrganizationBrandingPolicies200ResponseInner> response = api.getOrganizationBrandingPolicies_1(organizationId);
        // TODO: test validations
    }

    /**
     * Return a branding policy
     *
     * Return a branding policy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationBrandingPolicy_1Test() throws ApiException {
        String organizationId = null;
        String brandingPolicyId = null;
        GetOrganizationBrandingPolicies200ResponseInner response = api.getOrganizationBrandingPolicy_1(organizationId, brandingPolicyId);
        // TODO: test validations
    }

    /**
     * Update the priority ordering of an organization&#39;s branding policies.
     *
     * Update the priority ordering of an organization&#39;s branding policies.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationBrandingPoliciesPriorities_1Test() throws ApiException {
        String organizationId = null;
        UpdateOrganizationBrandingPoliciesPrioritiesRequest updateOrganizationBrandingPoliciesPrioritiesRequest = null;
        GetOrganizationBrandingPoliciesPriorities200Response response = api.updateOrganizationBrandingPoliciesPriorities_1(organizationId, updateOrganizationBrandingPoliciesPrioritiesRequest);
        // TODO: test validations
    }

    /**
     * Update a branding policy
     *
     * Update a branding policy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationBrandingPolicy_1Test() throws ApiException {
        String organizationId = null;
        String brandingPolicyId = null;
        UpdateOrganizationBrandingPolicyRequest updateOrganizationBrandingPolicyRequest = null;
        GetOrganizationBrandingPolicies200ResponseInner response = api.updateOrganizationBrandingPolicy_1(organizationId, brandingPolicyId, updateOrganizationBrandingPolicyRequest);
        // TODO: test validations
    }

}
