/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GetNetworkSensorAlertsCurrentOverviewByMetric200Response;
import org.openapitools.client.model.GetNetworkSensorAlertsOverviewByMetric200ResponseInner;
import org.openapitools.client.model.GetOrganizationAdaptivePolicyOverview200Response;
import org.openapitools.client.model.GetOrganizationApiRequestsOverviewResponseCodesByInterval200ResponseInner;
import org.openapitools.client.model.GetOrganizationClientsOverview200Response;
import org.openapitools.client.model.GetOrganizationDevicesStatusesOverview200Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OverviewApi
 */
@Disabled
public class OverviewApiTest {

    private final OverviewApi api = new OverviewApi();

    /**
     * Returns an overview of aggregate analytics data for a timespan
     *
     * Returns an overview of aggregate analytics data for a timespan
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceCameraAnalyticsOverview_2Test() throws ApiException {
        String serial = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        String objectType = null;
        List<Object> response = api.getDeviceCameraAnalyticsOverview_2(serial, t0, t1, timespan, objectType);
        // TODO: test validations
    }

    /**
     * Return overview statistics for network clients
     *
     * Return overview statistics for network clients
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkClientsOverview_2Test() throws ApiException {
        String networkId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        Integer resolution = null;
        Object response = api.getNetworkClientsOverview_2(networkId, t0, t1, timespan, resolution);
        // TODO: test validations
    }

    /**
     * Return an overview of currently alerting sensors by metric
     *
     * Return an overview of currently alerting sensors by metric
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSensorAlertsCurrentOverviewByMetric_3Test() throws ApiException {
        String networkId = null;
        GetNetworkSensorAlertsCurrentOverviewByMetric200Response response = api.getNetworkSensorAlertsCurrentOverviewByMetric_3(networkId);
        // TODO: test validations
    }

    /**
     * Return an overview of alert occurrences over a timespan, by metric
     *
     * Return an overview of alert occurrences over a timespan, by metric
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSensorAlertsOverviewByMetric_2Test() throws ApiException {
        String networkId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        Integer interval = null;
        List<GetNetworkSensorAlertsOverviewByMetric200ResponseInner> response = api.getNetworkSensorAlertsOverviewByMetric_2(networkId, t0, t1, timespan, interval);
        // TODO: test validations
    }

    /**
     * Returns adaptive policy aggregate statistics for an organization
     *
     * Returns adaptive policy aggregate statistics for an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationAdaptivePolicyOverview_2Test() throws ApiException {
        String organizationId = null;
        GetOrganizationAdaptivePolicyOverview200Response response = api.getOrganizationAdaptivePolicyOverview_2(organizationId);
        // TODO: test validations
    }

    /**
     * Tracks organizations&#39; API requests by response code across a given time period
     *
     * Tracks organizations&#39; API requests by response code across a given time period
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationApiRequestsOverviewResponseCodesByInterval_2Test() throws ApiException {
        String organizationId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        Integer interval = null;
        Integer version = null;
        List<String> operationIds = null;
        List<String> sourceIps = null;
        List<String> adminIds = null;
        String userAgent = null;
        List<GetOrganizationApiRequestsOverviewResponseCodesByInterval200ResponseInner> response = api.getOrganizationApiRequestsOverviewResponseCodesByInterval_2(organizationId, t0, t1, timespan, interval, version, operationIds, sourceIps, adminIds, userAgent);
        // TODO: test validations
    }

    /**
     * Return an aggregated overview of API requests data
     *
     * Return an aggregated overview of API requests data
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationApiRequestsOverview_2Test() throws ApiException {
        String organizationId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        Object response = api.getOrganizationApiRequestsOverview_2(organizationId, t0, t1, timespan);
        // TODO: test validations
    }

    /**
     * Return summary information around client data usage (in mb) across the given organization.
     *
     * Return summary information around client data usage (in mb) across the given organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationClientsOverview_2Test() throws ApiException {
        String organizationId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        GetOrganizationClientsOverview200Response response = api.getOrganizationClientsOverview_2(organizationId, t0, t1, timespan);
        // TODO: test validations
    }

    /**
     * Return an overview of current device statuses
     *
     * Return an overview of current device statuses
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationDevicesStatusesOverview_3Test() throws ApiException {
        String organizationId = null;
        List<String> productTypes = null;
        List<String> networkIds = null;
        GetOrganizationDevicesStatusesOverview200Response response = api.getOrganizationDevicesStatusesOverview_3(organizationId, productTypes, networkIds);
        // TODO: test validations
    }

    /**
     * Return an overview of the license state for an organization
     *
     * Return an overview of the license state for an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationLicensesOverview_2Test() throws ApiException {
        String organizationId = null;
        Object response = api.getOrganizationLicensesOverview_2(organizationId);
        // TODO: test validations
    }

}
