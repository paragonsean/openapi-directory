/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddNetworkSwitchStackRequest;
import org.openapitools.client.model.CloneOrganizationSwitchDevicesRequest;
import org.openapitools.client.model.CreateDeviceSwitchRoutingInterfaceRequest;
import org.openapitools.client.model.CreateDeviceSwitchRoutingStaticRouteRequest;
import org.openapitools.client.model.CreateNetworkSwitchAccessPolicyRequest;
import org.openapitools.client.model.CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest;
import org.openapitools.client.model.CreateNetworkSwitchLinkAggregationRequest;
import org.openapitools.client.model.CreateNetworkSwitchPortScheduleRequest;
import org.openapitools.client.model.CreateNetworkSwitchQosRuleRequest;
import org.openapitools.client.model.CreateNetworkSwitchRoutingMulticastRendezvousPointRequest;
import org.openapitools.client.model.CreateNetworkSwitchStackRequest;
import org.openapitools.client.model.CreateNetworkSwitchStackRoutingInterfaceRequest;
import org.openapitools.client.model.CycleDeviceSwitchPortsRequest;
import org.openapitools.client.model.GetDeviceSwitchPorts200ResponseInner;
import org.openapitools.client.model.GetDeviceSwitchPortsStatuses200ResponseInner;
import org.openapitools.client.model.GetDeviceSwitchRoutingInterfaces200ResponseInner;
import org.openapitools.client.model.GetDeviceSwitchRoutingStaticRoute200Response;
import org.openapitools.client.model.GetNetworkSwitchAccessControlLists200Response;
import org.openapitools.client.model.GetNetworkSwitchAccessPolicies200ResponseInner;
import org.openapitools.client.model.GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner;
import org.openapitools.client.model.GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner;
import org.openapitools.client.model.GetNetworkSwitchDhcpV4ServersSeen200ResponseInner;
import org.openapitools.client.model.GetNetworkSwitchMtu200Response;
import org.openapitools.client.model.GetNetworkSwitchSettings200Response;
import org.openapitools.client.model.GetNetworkSwitchStack200Response;
import org.openapitools.client.model.GetNetworkSwitchStormControl200Response;
import org.openapitools.client.model.GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner;
import org.openapitools.client.model.GetOrganizationConfigTemplateSwitchProfiles200Response;
import org.openapitools.client.model.GetOrganizationSwitchPortsBySwitch200ResponseInner;
import org.openapitools.client.model.RemoveNetworkSwitchStackRequest;
import org.openapitools.client.model.UpdateDeviceSwitchPortRequest;
import org.openapitools.client.model.UpdateDeviceSwitchRoutingInterfaceDhcpRequest;
import org.openapitools.client.model.UpdateDeviceSwitchRoutingStaticRouteRequest;
import org.openapitools.client.model.UpdateDeviceSwitchWarmSpareRequest;
import org.openapitools.client.model.UpdateNetworkSwitchAccessControlListsRequest;
import org.openapitools.client.model.UpdateNetworkSwitchAccessPolicyRequest;
import org.openapitools.client.model.UpdateNetworkSwitchAlternateManagementInterfaceRequest;
import org.openapitools.client.model.UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest;
import org.openapitools.client.model.UpdateNetworkSwitchDhcpServerPolicyRequest;
import org.openapitools.client.model.UpdateNetworkSwitchDscpToCosMappingsRequest;
import org.openapitools.client.model.UpdateNetworkSwitchLinkAggregationRequest;
import org.openapitools.client.model.UpdateNetworkSwitchMtuRequest;
import org.openapitools.client.model.UpdateNetworkSwitchPortScheduleRequest;
import org.openapitools.client.model.UpdateNetworkSwitchQosRuleRequest;
import org.openapitools.client.model.UpdateNetworkSwitchQosRulesOrderRequest;
import org.openapitools.client.model.UpdateNetworkSwitchRoutingMulticastRendezvousPointRequest;
import org.openapitools.client.model.UpdateNetworkSwitchRoutingMulticastRequest;
import org.openapitools.client.model.UpdateNetworkSwitchRoutingOspfRequest;
import org.openapitools.client.model.UpdateNetworkSwitchSettingsRequest;
import org.openapitools.client.model.UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest;
import org.openapitools.client.model.UpdateNetworkSwitchStackRoutingInterfaceRequest;
import org.openapitools.client.model.UpdateNetworkSwitchStormControlRequest;
import org.openapitools.client.model.UpdateNetworkSwitchStpRequest;
import org.openapitools.client.model.UpdateOrganizationConfigTemplateSwitchProfilePortRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SwitchApi
 */
@Disabled
public class SwitchApiTest {

    private final SwitchApi api = new SwitchApi();

    /**
     * Add a switch to a stack
     *
     * Add a switch to a stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addNetworkSwitchStackTest() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        AddNetworkSwitchStackRequest addNetworkSwitchStackRequest = null;
        Object response = api.addNetworkSwitchStack(networkId, switchStackId, addNetworkSwitchStackRequest);
        // TODO: test validations
    }

    /**
     * Clone port-level and some switch-level configuration settings from a source switch to one or more target switches
     *
     * Clone port-level and some switch-level configuration settings from a source switch to one or more target switches. Cloned settings include: Aggregation Groups, Power Settings, Multicast Settings, MTU Configuration, STP Bridge priority, Port Mirroring
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloneOrganizationSwitchDevicesTest() throws ApiException {
        String organizationId = null;
        CloneOrganizationSwitchDevicesRequest cloneOrganizationSwitchDevicesRequest = null;
        Object response = api.cloneOrganizationSwitchDevices(organizationId, cloneOrganizationSwitchDevicesRequest);
        // TODO: test validations
    }

    /**
     * Create a layer 3 interface for a switch
     *
     * Create a layer 3 interface for a switch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDeviceSwitchRoutingInterfaceTest() throws ApiException {
        String serial = null;
        CreateDeviceSwitchRoutingInterfaceRequest createDeviceSwitchRoutingInterfaceRequest = null;
        GetDeviceSwitchRoutingInterfaces200ResponseInner response = api.createDeviceSwitchRoutingInterface(serial, createDeviceSwitchRoutingInterfaceRequest);
        // TODO: test validations
    }

    /**
     * Create a layer 3 static route for a switch
     *
     * Create a layer 3 static route for a switch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDeviceSwitchRoutingStaticRouteTest() throws ApiException {
        String serial = null;
        CreateDeviceSwitchRoutingStaticRouteRequest createDeviceSwitchRoutingStaticRouteRequest = null;
        Object response = api.createDeviceSwitchRoutingStaticRoute(serial, createDeviceSwitchRoutingStaticRouteRequest);
        // TODO: test validations
    }

    /**
     * Create an access policy for a switch network
     *
     * Create an access policy for a switch network. If you would like to enable Meraki Authentication, set radiusServers to empty array.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkSwitchAccessPolicyTest() throws ApiException {
        String networkId = null;
        CreateNetworkSwitchAccessPolicyRequest createNetworkSwitchAccessPolicyRequest = null;
        GetNetworkSwitchAccessPolicies200ResponseInner response = api.createNetworkSwitchAccessPolicy(networkId, createNetworkSwitchAccessPolicyRequest);
        // TODO: test validations
    }

    /**
     * Add a server to be trusted by Dynamic ARP Inspection on this network
     *
     * Add a server to be trusted by Dynamic ARP Inspection on this network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerTest() throws ApiException {
        String networkId = null;
        CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest = null;
        GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner response = api.createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer(networkId, createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest);
        // TODO: test validations
    }

    /**
     * Create a link aggregation group
     *
     * Create a link aggregation group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkSwitchLinkAggregationTest() throws ApiException {
        String networkId = null;
        CreateNetworkSwitchLinkAggregationRequest createNetworkSwitchLinkAggregationRequest = null;
        Object response = api.createNetworkSwitchLinkAggregation(networkId, createNetworkSwitchLinkAggregationRequest);
        // TODO: test validations
    }

    /**
     * Add a switch port schedule
     *
     * Add a switch port schedule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkSwitchPortScheduleTest() throws ApiException {
        String networkId = null;
        CreateNetworkSwitchPortScheduleRequest createNetworkSwitchPortScheduleRequest = null;
        Object response = api.createNetworkSwitchPortSchedule(networkId, createNetworkSwitchPortScheduleRequest);
        // TODO: test validations
    }

    /**
     * Add a quality of service rule
     *
     * Add a quality of service rule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkSwitchQosRuleTest() throws ApiException {
        String networkId = null;
        CreateNetworkSwitchQosRuleRequest createNetworkSwitchQosRuleRequest = null;
        Object response = api.createNetworkSwitchQosRule(networkId, createNetworkSwitchQosRuleRequest);
        // TODO: test validations
    }

    /**
     * Create a multicast rendezvous point
     *
     * Create a multicast rendezvous point
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkSwitchRoutingMulticastRendezvousPointTest() throws ApiException {
        String networkId = null;
        CreateNetworkSwitchRoutingMulticastRendezvousPointRequest createNetworkSwitchRoutingMulticastRendezvousPointRequest = null;
        Object response = api.createNetworkSwitchRoutingMulticastRendezvousPoint(networkId, createNetworkSwitchRoutingMulticastRendezvousPointRequest);
        // TODO: test validations
    }

    /**
     * Create a stack
     *
     * Create a stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkSwitchStackTest() throws ApiException {
        String networkId = null;
        CreateNetworkSwitchStackRequest createNetworkSwitchStackRequest = null;
        Object response = api.createNetworkSwitchStack(networkId, createNetworkSwitchStackRequest);
        // TODO: test validations
    }

    /**
     * Create a layer 3 interface for a switch stack
     *
     * Create a layer 3 interface for a switch stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkSwitchStackRoutingInterfaceTest() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        CreateNetworkSwitchStackRoutingInterfaceRequest createNetworkSwitchStackRoutingInterfaceRequest = null;
        Object response = api.createNetworkSwitchStackRoutingInterface(networkId, switchStackId, createNetworkSwitchStackRoutingInterfaceRequest);
        // TODO: test validations
    }

    /**
     * Create a layer 3 static route for a switch stack
     *
     * Create a layer 3 static route for a switch stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkSwitchStackRoutingStaticRouteTest() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        CreateDeviceSwitchRoutingStaticRouteRequest createDeviceSwitchRoutingStaticRouteRequest = null;
        Object response = api.createNetworkSwitchStackRoutingStaticRoute(networkId, switchStackId, createDeviceSwitchRoutingStaticRouteRequest);
        // TODO: test validations
    }

    /**
     * Cycle a set of switch ports
     *
     * Cycle a set of switch ports
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cycleDeviceSwitchPortsTest() throws ApiException {
        String serial = null;
        CycleDeviceSwitchPortsRequest cycleDeviceSwitchPortsRequest = null;
        Object response = api.cycleDeviceSwitchPorts(serial, cycleDeviceSwitchPortsRequest);
        // TODO: test validations
    }

    /**
     * Delete a layer 3 interface from the switch
     *
     * Delete a layer 3 interface from the switch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDeviceSwitchRoutingInterfaceTest() throws ApiException {
        String serial = null;
        String interfaceId = null;
        api.deleteDeviceSwitchRoutingInterface(serial, interfaceId);
        // TODO: test validations
    }

    /**
     * Delete a layer 3 static route for a switch
     *
     * Delete a layer 3 static route for a switch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDeviceSwitchRoutingStaticRouteTest() throws ApiException {
        String serial = null;
        String staticRouteId = null;
        api.deleteDeviceSwitchRoutingStaticRoute(serial, staticRouteId);
        // TODO: test validations
    }

    /**
     * Delete an access policy for a switch network
     *
     * Delete an access policy for a switch network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkSwitchAccessPolicyTest() throws ApiException {
        String networkId = null;
        String accessPolicyNumber = null;
        api.deleteNetworkSwitchAccessPolicy(networkId, accessPolicyNumber);
        // TODO: test validations
    }

    /**
     * Remove a server from being trusted by Dynamic ARP Inspection on this network
     *
     * Remove a server from being trusted by Dynamic ARP Inspection on this network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerTest() throws ApiException {
        String networkId = null;
        String trustedServerId = null;
        api.deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer(networkId, trustedServerId);
        // TODO: test validations
    }

    /**
     * Split a link aggregation group into separate ports
     *
     * Split a link aggregation group into separate ports
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkSwitchLinkAggregationTest() throws ApiException {
        String networkId = null;
        String linkAggregationId = null;
        api.deleteNetworkSwitchLinkAggregation(networkId, linkAggregationId);
        // TODO: test validations
    }

    /**
     * Delete a switch port schedule
     *
     * Delete a switch port schedule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkSwitchPortScheduleTest() throws ApiException {
        String networkId = null;
        String portScheduleId = null;
        api.deleteNetworkSwitchPortSchedule(networkId, portScheduleId);
        // TODO: test validations
    }

    /**
     * Delete a quality of service rule
     *
     * Delete a quality of service rule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkSwitchQosRuleTest() throws ApiException {
        String networkId = null;
        String qosRuleId = null;
        api.deleteNetworkSwitchQosRule(networkId, qosRuleId);
        // TODO: test validations
    }

    /**
     * Delete a multicast rendezvous point
     *
     * Delete a multicast rendezvous point
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkSwitchRoutingMulticastRendezvousPointTest() throws ApiException {
        String networkId = null;
        String rendezvousPointId = null;
        api.deleteNetworkSwitchRoutingMulticastRendezvousPoint(networkId, rendezvousPointId);
        // TODO: test validations
    }

    /**
     * Delete a stack
     *
     * Delete a stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkSwitchStackTest() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        api.deleteNetworkSwitchStack(networkId, switchStackId);
        // TODO: test validations
    }

    /**
     * Delete a layer 3 interface from a switch stack
     *
     * Delete a layer 3 interface from a switch stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkSwitchStackRoutingInterfaceTest() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        String interfaceId = null;
        api.deleteNetworkSwitchStackRoutingInterface(networkId, switchStackId, interfaceId);
        // TODO: test validations
    }

    /**
     * Delete a layer 3 static route for a switch stack
     *
     * Delete a layer 3 static route for a switch stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkSwitchStackRoutingStaticRouteTest() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        String staticRouteId = null;
        api.deleteNetworkSwitchStackRoutingStaticRoute(networkId, switchStackId, staticRouteId);
        // TODO: test validations
    }

    /**
     * Return a switch port
     *
     * Return a switch port
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceSwitchPortTest() throws ApiException {
        String serial = null;
        String portId = null;
        GetDeviceSwitchPorts200ResponseInner response = api.getDeviceSwitchPort(serial, portId);
        // TODO: test validations
    }

    /**
     * List the switch ports for a switch
     *
     * List the switch ports for a switch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceSwitchPortsTest() throws ApiException {
        String serial = null;
        List<GetDeviceSwitchPorts200ResponseInner> response = api.getDeviceSwitchPorts(serial);
        // TODO: test validations
    }

    /**
     * Return the status for all the ports of a switch
     *
     * Return the status for all the ports of a switch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceSwitchPortsStatusesTest() throws ApiException {
        String serial = null;
        String t0 = null;
        Float timespan = null;
        List<GetDeviceSwitchPortsStatuses200ResponseInner> response = api.getDeviceSwitchPortsStatuses(serial, t0, timespan);
        // TODO: test validations
    }

    /**
     * Return the packet counters for all the ports of a switch
     *
     * Return the packet counters for all the ports of a switch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceSwitchPortsStatusesPacketsTest() throws ApiException {
        String serial = null;
        String t0 = null;
        Float timespan = null;
        List<Object> response = api.getDeviceSwitchPortsStatusesPackets(serial, t0, timespan);
        // TODO: test validations
    }

    /**
     * Return a layer 3 interface for a switch
     *
     * Return a layer 3 interface for a switch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceSwitchRoutingInterfaceTest() throws ApiException {
        String serial = null;
        String interfaceId = null;
        GetDeviceSwitchRoutingInterfaces200ResponseInner response = api.getDeviceSwitchRoutingInterface(serial, interfaceId);
        // TODO: test validations
    }

    /**
     * Return a layer 3 interface DHCP configuration for a switch
     *
     * Return a layer 3 interface DHCP configuration for a switch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceSwitchRoutingInterfaceDhcpTest() throws ApiException {
        String serial = null;
        String interfaceId = null;
        Object response = api.getDeviceSwitchRoutingInterfaceDhcp(serial, interfaceId);
        // TODO: test validations
    }

    /**
     * List layer 3 interfaces for a switch
     *
     * List layer 3 interfaces for a switch. Those for a stack may be found under switch stack routing.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceSwitchRoutingInterfacesTest() throws ApiException {
        String serial = null;
        List<GetDeviceSwitchRoutingInterfaces200ResponseInner> response = api.getDeviceSwitchRoutingInterfaces(serial);
        // TODO: test validations
    }

    /**
     * Return a layer 3 static route for a switch
     *
     * Return a layer 3 static route for a switch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceSwitchRoutingStaticRouteTest() throws ApiException {
        String serial = null;
        String staticRouteId = null;
        GetDeviceSwitchRoutingStaticRoute200Response response = api.getDeviceSwitchRoutingStaticRoute(serial, staticRouteId);
        // TODO: test validations
    }

    /**
     * List layer 3 static routes for a switch
     *
     * List layer 3 static routes for a switch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceSwitchRoutingStaticRoutesTest() throws ApiException {
        String serial = null;
        List<Object> response = api.getDeviceSwitchRoutingStaticRoutes(serial);
        // TODO: test validations
    }

    /**
     * Return warm spare configuration for a switch
     *
     * Return warm spare configuration for a switch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceSwitchWarmSpareTest() throws ApiException {
        String serial = null;
        Object response = api.getDeviceSwitchWarmSpare(serial);
        // TODO: test validations
    }

    /**
     * Return the access control lists for a MS network
     *
     * Return the access control lists for a MS network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchAccessControlListsTest() throws ApiException {
        String networkId = null;
        GetNetworkSwitchAccessControlLists200Response response = api.getNetworkSwitchAccessControlLists(networkId);
        // TODO: test validations
    }

    /**
     * List the access policies for a switch network
     *
     * List the access policies for a switch network. Only returns access policies with &#39;my RADIUS server&#39; as authentication method
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchAccessPoliciesTest() throws ApiException {
        String networkId = null;
        List<GetNetworkSwitchAccessPolicies200ResponseInner> response = api.getNetworkSwitchAccessPolicies(networkId);
        // TODO: test validations
    }

    /**
     * Return a specific access policy for a switch network
     *
     * Return a specific access policy for a switch network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchAccessPolicyTest() throws ApiException {
        String networkId = null;
        String accessPolicyNumber = null;
        GetNetworkSwitchAccessPolicies200ResponseInner response = api.getNetworkSwitchAccessPolicy(networkId, accessPolicyNumber);
        // TODO: test validations
    }

    /**
     * Return the switch alternate management interface for the network
     *
     * Return the switch alternate management interface for the network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchAlternateManagementInterfaceTest() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkSwitchAlternateManagementInterface(networkId);
        // TODO: test validations
    }

    /**
     * Return the DHCP server settings
     *
     * Return the DHCP server settings. Blocked/allowed servers are only applied when default policy is allow/block, respectively
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchDhcpServerPolicyTest() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkSwitchDhcpServerPolicy(networkId);
        // TODO: test validations
    }

    /**
     * Return the list of servers trusted by Dynamic ARP Inspection on this network
     *
     * Return the list of servers trusted by Dynamic ARP Inspection on this network. These are also known as whitelisted snoop entries
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersTest() throws ApiException {
        String networkId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner> response = api.getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers(networkId, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * Return the devices that have a Dynamic ARP Inspection warning and their warnings
     *
     * Return the devices that have a Dynamic ARP Inspection warning and their warnings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceTest() throws ApiException {
        String networkId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner> response = api.getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice(networkId, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * Return the network&#39;s DHCPv4 servers seen within the selected timeframe (default 1 day)
     *
     * Return the network&#39;s DHCPv4 servers seen within the selected timeframe (default 1 day)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchDhcpV4ServersSeenTest() throws ApiException {
        String networkId = null;
        String t0 = null;
        Float timespan = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<GetNetworkSwitchDhcpV4ServersSeen200ResponseInner> response = api.getNetworkSwitchDhcpV4ServersSeen(networkId, t0, timespan, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * Return the DSCP to CoS mappings
     *
     * Return the DSCP to CoS mappings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchDscpToCosMappingsTest() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkSwitchDscpToCosMappings(networkId);
        // TODO: test validations
    }

    /**
     * List link aggregation groups
     *
     * List link aggregation groups
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchLinkAggregationsTest() throws ApiException {
        String networkId = null;
        List<Object> response = api.getNetworkSwitchLinkAggregations(networkId);
        // TODO: test validations
    }

    /**
     * Return the MTU configuration
     *
     * Return the MTU configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchMtuTest() throws ApiException {
        String networkId = null;
        GetNetworkSwitchMtu200Response response = api.getNetworkSwitchMtu(networkId);
        // TODO: test validations
    }

    /**
     * List switch port schedules
     *
     * List switch port schedules
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchPortSchedulesTest() throws ApiException {
        String networkId = null;
        List<Object> response = api.getNetworkSwitchPortSchedules(networkId);
        // TODO: test validations
    }

    /**
     * Return a quality of service rule
     *
     * Return a quality of service rule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchQosRuleTest() throws ApiException {
        String networkId = null;
        String qosRuleId = null;
        Object response = api.getNetworkSwitchQosRule(networkId, qosRuleId);
        // TODO: test validations
    }

    /**
     * List quality of service rules
     *
     * List quality of service rules
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchQosRulesTest() throws ApiException {
        String networkId = null;
        List<Object> response = api.getNetworkSwitchQosRules(networkId);
        // TODO: test validations
    }

    /**
     * Return the quality of service rule IDs by order in which they will be processed by the switch
     *
     * Return the quality of service rule IDs by order in which they will be processed by the switch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchQosRulesOrderTest() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkSwitchQosRulesOrder(networkId);
        // TODO: test validations
    }

    /**
     * Return multicast settings for a network
     *
     * Return multicast settings for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchRoutingMulticastTest() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkSwitchRoutingMulticast(networkId);
        // TODO: test validations
    }

    /**
     * Return a multicast rendezvous point
     *
     * Return a multicast rendezvous point
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchRoutingMulticastRendezvousPointTest() throws ApiException {
        String networkId = null;
        String rendezvousPointId = null;
        Object response = api.getNetworkSwitchRoutingMulticastRendezvousPoint(networkId, rendezvousPointId);
        // TODO: test validations
    }

    /**
     * List multicast rendezvous points
     *
     * List multicast rendezvous points
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchRoutingMulticastRendezvousPointsTest() throws ApiException {
        String networkId = null;
        List<List<Object>> response = api.getNetworkSwitchRoutingMulticastRendezvousPoints(networkId);
        // TODO: test validations
    }

    /**
     * Return layer 3 OSPF routing configuration
     *
     * Return layer 3 OSPF routing configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchRoutingOspfTest() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkSwitchRoutingOspf(networkId);
        // TODO: test validations
    }

    /**
     * Returns the switch network settings
     *
     * Returns the switch network settings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchSettingsTest() throws ApiException {
        String networkId = null;
        GetNetworkSwitchSettings200Response response = api.getNetworkSwitchSettings(networkId);
        // TODO: test validations
    }

    /**
     * Show a switch stack
     *
     * Show a switch stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchStackTest() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        GetNetworkSwitchStack200Response response = api.getNetworkSwitchStack(networkId, switchStackId);
        // TODO: test validations
    }

    /**
     * Return a layer 3 interface from a switch stack
     *
     * Return a layer 3 interface from a switch stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchStackRoutingInterfaceTest() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        String interfaceId = null;
        Object response = api.getNetworkSwitchStackRoutingInterface(networkId, switchStackId, interfaceId);
        // TODO: test validations
    }

    /**
     * Return a layer 3 interface DHCP configuration for a switch stack
     *
     * Return a layer 3 interface DHCP configuration for a switch stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchStackRoutingInterfaceDhcpTest() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        String interfaceId = null;
        Object response = api.getNetworkSwitchStackRoutingInterfaceDhcp(networkId, switchStackId, interfaceId);
        // TODO: test validations
    }

    /**
     * List layer 3 interfaces for a switch stack
     *
     * List layer 3 interfaces for a switch stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchStackRoutingInterfacesTest() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        List<Object> response = api.getNetworkSwitchStackRoutingInterfaces(networkId, switchStackId);
        // TODO: test validations
    }

    /**
     * Return a layer 3 static route for a switch stack
     *
     * Return a layer 3 static route for a switch stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchStackRoutingStaticRouteTest() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        String staticRouteId = null;
        Object response = api.getNetworkSwitchStackRoutingStaticRoute(networkId, switchStackId, staticRouteId);
        // TODO: test validations
    }

    /**
     * List layer 3 static routes for a switch stack
     *
     * List layer 3 static routes for a switch stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchStackRoutingStaticRoutesTest() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        List<Object> response = api.getNetworkSwitchStackRoutingStaticRoutes(networkId, switchStackId);
        // TODO: test validations
    }

    /**
     * List the switch stacks in a network
     *
     * List the switch stacks in a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchStacksTest() throws ApiException {
        String networkId = null;
        List<Object> response = api.getNetworkSwitchStacks(networkId);
        // TODO: test validations
    }

    /**
     * Return the storm control configuration for a switch network
     *
     * Return the storm control configuration for a switch network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchStormControlTest() throws ApiException {
        String networkId = null;
        GetNetworkSwitchStormControl200Response response = api.getNetworkSwitchStormControl(networkId);
        // TODO: test validations
    }

    /**
     * Returns STP settings
     *
     * Returns STP settings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchStpTest() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkSwitchStp(networkId);
        // TODO: test validations
    }

    /**
     * Return a switch profile port
     *
     * Return a switch profile port
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationConfigTemplateSwitchProfilePortTest() throws ApiException {
        String organizationId = null;
        String configTemplateId = null;
        String profileId = null;
        String portId = null;
        GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner response = api.getOrganizationConfigTemplateSwitchProfilePort(organizationId, configTemplateId, profileId, portId);
        // TODO: test validations
    }

    /**
     * Return all the ports of a switch profile
     *
     * Return all the ports of a switch profile
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationConfigTemplateSwitchProfilePortsTest() throws ApiException {
        String organizationId = null;
        String configTemplateId = null;
        String profileId = null;
        List<GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner> response = api.getOrganizationConfigTemplateSwitchProfilePorts(organizationId, configTemplateId, profileId);
        // TODO: test validations
    }

    /**
     * List the switch profiles for your switch template configuration
     *
     * List the switch profiles for your switch template configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationConfigTemplateSwitchProfilesTest() throws ApiException {
        String organizationId = null;
        String configTemplateId = null;
        GetOrganizationConfigTemplateSwitchProfiles200Response response = api.getOrganizationConfigTemplateSwitchProfiles(organizationId, configTemplateId);
        // TODO: test validations
    }

    /**
     * List the switchports in an organization by switch
     *
     * List the switchports in an organization by switch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationSwitchPortsBySwitchTest() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<String> networkIds = null;
        List<String> portProfileIds = null;
        String name = null;
        String mac = null;
        List<String> macs = null;
        String serial = null;
        List<String> serials = null;
        String configurationUpdatedAfter = null;
        List<GetOrganizationSwitchPortsBySwitch200ResponseInner> response = api.getOrganizationSwitchPortsBySwitch(organizationId, perPage, startingAfter, endingBefore, networkIds, portProfileIds, name, mac, macs, serial, serials, configurationUpdatedAfter);
        // TODO: test validations
    }

    /**
     * Remove a switch from a stack
     *
     * Remove a switch from a stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeNetworkSwitchStackTest() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        RemoveNetworkSwitchStackRequest removeNetworkSwitchStackRequest = null;
        Object response = api.removeNetworkSwitchStack(networkId, switchStackId, removeNetworkSwitchStackRequest);
        // TODO: test validations
    }

    /**
     * Update a switch port
     *
     * Update a switch port
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeviceSwitchPortTest() throws ApiException {
        String serial = null;
        String portId = null;
        UpdateDeviceSwitchPortRequest updateDeviceSwitchPortRequest = null;
        GetDeviceSwitchPorts200ResponseInner response = api.updateDeviceSwitchPort(serial, portId, updateDeviceSwitchPortRequest);
        // TODO: test validations
    }

    /**
     * Update a layer 3 interface for a switch
     *
     * Update a layer 3 interface for a switch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeviceSwitchRoutingInterfaceTest() throws ApiException {
        String serial = null;
        String interfaceId = null;
        CreateDeviceSwitchRoutingInterfaceRequest createDeviceSwitchRoutingInterfaceRequest = null;
        GetDeviceSwitchRoutingInterfaces200ResponseInner response = api.updateDeviceSwitchRoutingInterface(serial, interfaceId, createDeviceSwitchRoutingInterfaceRequest);
        // TODO: test validations
    }

    /**
     * Update a layer 3 interface DHCP configuration for a switch
     *
     * Update a layer 3 interface DHCP configuration for a switch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeviceSwitchRoutingInterfaceDhcpTest() throws ApiException {
        String serial = null;
        String interfaceId = null;
        UpdateDeviceSwitchRoutingInterfaceDhcpRequest updateDeviceSwitchRoutingInterfaceDhcpRequest = null;
        Object response = api.updateDeviceSwitchRoutingInterfaceDhcp(serial, interfaceId, updateDeviceSwitchRoutingInterfaceDhcpRequest);
        // TODO: test validations
    }

    /**
     * Update a layer 3 static route for a switch
     *
     * Update a layer 3 static route for a switch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeviceSwitchRoutingStaticRouteTest() throws ApiException {
        String serial = null;
        String staticRouteId = null;
        UpdateDeviceSwitchRoutingStaticRouteRequest updateDeviceSwitchRoutingStaticRouteRequest = null;
        Object response = api.updateDeviceSwitchRoutingStaticRoute(serial, staticRouteId, updateDeviceSwitchRoutingStaticRouteRequest);
        // TODO: test validations
    }

    /**
     * Update warm spare configuration for a switch
     *
     * Update warm spare configuration for a switch. The spare will use the same L3 configuration as the primary. Note that this will irreversibly destroy any existing L3 configuration on the spare.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeviceSwitchWarmSpareTest() throws ApiException {
        String serial = null;
        UpdateDeviceSwitchWarmSpareRequest updateDeviceSwitchWarmSpareRequest = null;
        Object response = api.updateDeviceSwitchWarmSpare(serial, updateDeviceSwitchWarmSpareRequest);
        // TODO: test validations
    }

    /**
     * Update the access control lists for a MS network
     *
     * Update the access control lists for a MS network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSwitchAccessControlListsTest() throws ApiException {
        String networkId = null;
        UpdateNetworkSwitchAccessControlListsRequest updateNetworkSwitchAccessControlListsRequest = null;
        GetNetworkSwitchAccessControlLists200Response response = api.updateNetworkSwitchAccessControlLists(networkId, updateNetworkSwitchAccessControlListsRequest);
        // TODO: test validations
    }

    /**
     * Update an access policy for a switch network
     *
     * Update an access policy for a switch network. If you would like to enable Meraki Authentication, set radiusServers to empty array.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSwitchAccessPolicyTest() throws ApiException {
        String networkId = null;
        String accessPolicyNumber = null;
        UpdateNetworkSwitchAccessPolicyRequest updateNetworkSwitchAccessPolicyRequest = null;
        GetNetworkSwitchAccessPolicies200ResponseInner response = api.updateNetworkSwitchAccessPolicy(networkId, accessPolicyNumber, updateNetworkSwitchAccessPolicyRequest);
        // TODO: test validations
    }

    /**
     * Update the switch alternate management interface for the network
     *
     * Update the switch alternate management interface for the network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSwitchAlternateManagementInterfaceTest() throws ApiException {
        String networkId = null;
        UpdateNetworkSwitchAlternateManagementInterfaceRequest updateNetworkSwitchAlternateManagementInterfaceRequest = null;
        Object response = api.updateNetworkSwitchAlternateManagementInterface(networkId, updateNetworkSwitchAlternateManagementInterfaceRequest);
        // TODO: test validations
    }

    /**
     * Update the DHCP server settings
     *
     * Update the DHCP server settings. Blocked/allowed servers are only applied when default policy is allow/block, respectively
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSwitchDhcpServerPolicyTest() throws ApiException {
        String networkId = null;
        UpdateNetworkSwitchDhcpServerPolicyRequest updateNetworkSwitchDhcpServerPolicyRequest = null;
        Object response = api.updateNetworkSwitchDhcpServerPolicy(networkId, updateNetworkSwitchDhcpServerPolicyRequest);
        // TODO: test validations
    }

    /**
     * Update a server that is trusted by Dynamic ARP Inspection on this network
     *
     * Update a server that is trusted by Dynamic ARP Inspection on this network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerTest() throws ApiException {
        String networkId = null;
        String trustedServerId = null;
        UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest = null;
        GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner response = api.updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer(networkId, trustedServerId, updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest);
        // TODO: test validations
    }

    /**
     * Update the DSCP to CoS mappings
     *
     * Update the DSCP to CoS mappings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSwitchDscpToCosMappingsTest() throws ApiException {
        String networkId = null;
        UpdateNetworkSwitchDscpToCosMappingsRequest updateNetworkSwitchDscpToCosMappingsRequest = null;
        Object response = api.updateNetworkSwitchDscpToCosMappings(networkId, updateNetworkSwitchDscpToCosMappingsRequest);
        // TODO: test validations
    }

    /**
     * Update a link aggregation group
     *
     * Update a link aggregation group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSwitchLinkAggregationTest() throws ApiException {
        String networkId = null;
        String linkAggregationId = null;
        UpdateNetworkSwitchLinkAggregationRequest updateNetworkSwitchLinkAggregationRequest = null;
        Object response = api.updateNetworkSwitchLinkAggregation(networkId, linkAggregationId, updateNetworkSwitchLinkAggregationRequest);
        // TODO: test validations
    }

    /**
     * Update the MTU configuration
     *
     * Update the MTU configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSwitchMtuTest() throws ApiException {
        String networkId = null;
        UpdateNetworkSwitchMtuRequest updateNetworkSwitchMtuRequest = null;
        Object response = api.updateNetworkSwitchMtu(networkId, updateNetworkSwitchMtuRequest);
        // TODO: test validations
    }

    /**
     * Update a switch port schedule
     *
     * Update a switch port schedule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSwitchPortScheduleTest() throws ApiException {
        String networkId = null;
        String portScheduleId = null;
        UpdateNetworkSwitchPortScheduleRequest updateNetworkSwitchPortScheduleRequest = null;
        Object response = api.updateNetworkSwitchPortSchedule(networkId, portScheduleId, updateNetworkSwitchPortScheduleRequest);
        // TODO: test validations
    }

    /**
     * Update a quality of service rule
     *
     * Update a quality of service rule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSwitchQosRuleTest() throws ApiException {
        String networkId = null;
        String qosRuleId = null;
        UpdateNetworkSwitchQosRuleRequest updateNetworkSwitchQosRuleRequest = null;
        Object response = api.updateNetworkSwitchQosRule(networkId, qosRuleId, updateNetworkSwitchQosRuleRequest);
        // TODO: test validations
    }

    /**
     * Update the order in which the rules should be processed by the switch
     *
     * Update the order in which the rules should be processed by the switch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSwitchQosRulesOrderTest() throws ApiException {
        String networkId = null;
        UpdateNetworkSwitchQosRulesOrderRequest updateNetworkSwitchQosRulesOrderRequest = null;
        Object response = api.updateNetworkSwitchQosRulesOrder(networkId, updateNetworkSwitchQosRulesOrderRequest);
        // TODO: test validations
    }

    /**
     * Update multicast settings for a network
     *
     * Update multicast settings for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSwitchRoutingMulticastTest() throws ApiException {
        String networkId = null;
        UpdateNetworkSwitchRoutingMulticastRequest updateNetworkSwitchRoutingMulticastRequest = null;
        Object response = api.updateNetworkSwitchRoutingMulticast(networkId, updateNetworkSwitchRoutingMulticastRequest);
        // TODO: test validations
    }

    /**
     * Update a multicast rendezvous point
     *
     * Update a multicast rendezvous point
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSwitchRoutingMulticastRendezvousPointTest() throws ApiException {
        String networkId = null;
        String rendezvousPointId = null;
        UpdateNetworkSwitchRoutingMulticastRendezvousPointRequest updateNetworkSwitchRoutingMulticastRendezvousPointRequest = null;
        Object response = api.updateNetworkSwitchRoutingMulticastRendezvousPoint(networkId, rendezvousPointId, updateNetworkSwitchRoutingMulticastRendezvousPointRequest);
        // TODO: test validations
    }

    /**
     * Update layer 3 OSPF routing configuration
     *
     * Update layer 3 OSPF routing configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSwitchRoutingOspfTest() throws ApiException {
        String networkId = null;
        UpdateNetworkSwitchRoutingOspfRequest updateNetworkSwitchRoutingOspfRequest = null;
        Object response = api.updateNetworkSwitchRoutingOspf(networkId, updateNetworkSwitchRoutingOspfRequest);
        // TODO: test validations
    }

    /**
     * Update switch network settings
     *
     * Update switch network settings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSwitchSettingsTest() throws ApiException {
        String networkId = null;
        UpdateNetworkSwitchSettingsRequest updateNetworkSwitchSettingsRequest = null;
        GetNetworkSwitchSettings200Response response = api.updateNetworkSwitchSettings(networkId, updateNetworkSwitchSettingsRequest);
        // TODO: test validations
    }

    /**
     * Update a layer 3 interface for a switch stack
     *
     * Update a layer 3 interface for a switch stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSwitchStackRoutingInterfaceTest() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        String interfaceId = null;
        UpdateNetworkSwitchStackRoutingInterfaceRequest updateNetworkSwitchStackRoutingInterfaceRequest = null;
        Object response = api.updateNetworkSwitchStackRoutingInterface(networkId, switchStackId, interfaceId, updateNetworkSwitchStackRoutingInterfaceRequest);
        // TODO: test validations
    }

    /**
     * Update a layer 3 interface DHCP configuration for a switch stack
     *
     * Update a layer 3 interface DHCP configuration for a switch stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSwitchStackRoutingInterfaceDhcpTest() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        String interfaceId = null;
        UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest updateNetworkSwitchStackRoutingInterfaceDhcpRequest = null;
        Object response = api.updateNetworkSwitchStackRoutingInterfaceDhcp(networkId, switchStackId, interfaceId, updateNetworkSwitchStackRoutingInterfaceDhcpRequest);
        // TODO: test validations
    }

    /**
     * Update a layer 3 static route for a switch stack
     *
     * Update a layer 3 static route for a switch stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSwitchStackRoutingStaticRouteTest() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        String staticRouteId = null;
        UpdateDeviceSwitchRoutingStaticRouteRequest updateDeviceSwitchRoutingStaticRouteRequest = null;
        Object response = api.updateNetworkSwitchStackRoutingStaticRoute(networkId, switchStackId, staticRouteId, updateDeviceSwitchRoutingStaticRouteRequest);
        // TODO: test validations
    }

    /**
     * Update the storm control configuration for a switch network
     *
     * Update the storm control configuration for a switch network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSwitchStormControlTest() throws ApiException {
        String networkId = null;
        UpdateNetworkSwitchStormControlRequest updateNetworkSwitchStormControlRequest = null;
        Object response = api.updateNetworkSwitchStormControl(networkId, updateNetworkSwitchStormControlRequest);
        // TODO: test validations
    }

    /**
     * Updates STP settings
     *
     * Updates STP settings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSwitchStpTest() throws ApiException {
        String networkId = null;
        UpdateNetworkSwitchStpRequest updateNetworkSwitchStpRequest = null;
        Object response = api.updateNetworkSwitchStp(networkId, updateNetworkSwitchStpRequest);
        // TODO: test validations
    }

    /**
     * Update a switch profile port
     *
     * Update a switch profile port
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationConfigTemplateSwitchProfilePortTest() throws ApiException {
        String organizationId = null;
        String configTemplateId = null;
        String profileId = null;
        String portId = null;
        UpdateOrganizationConfigTemplateSwitchProfilePortRequest updateOrganizationConfigTemplateSwitchProfilePortRequest = null;
        GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner response = api.updateOrganizationConfigTemplateSwitchProfilePort(organizationId, configTemplateId, profileId, portId, updateOrganizationConfigTemplateSwitchProfilePortRequest);
        // TODO: test validations
    }

}
