/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GetNetworkClient200Response;
import org.openapitools.client.model.GetNetworkClients200Response;
import org.openapitools.client.model.GetOrganizationClientsBandwidthUsageHistory200ResponseInner;
import org.openapitools.client.model.GetOrganizationClientsOverview200Response;
import org.openapitools.client.model.GetOrganizationSummaryTopClientsByUsage200ResponseInner;
import org.openapitools.client.model.GetOrganizationSummaryTopClientsManufacturersByUsage200ResponseInner;
import org.openapitools.client.model.ProvisionNetworkClientsRequest;
import org.openapitools.client.model.UpdateNetworkClientPolicyRequest;
import org.openapitools.client.model.UpdateNetworkClientSplashAuthorizationStatusRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ClientsApi
 */
@Disabled
public class ClientsApiTest {

    private final ClientsApi api = new ClientsApi();

    /**
     * List the clients of a device, up to a maximum of a month ago
     *
     * List the clients of a device, up to a maximum of a month ago. The usage of each client is returned in kilobytes. If the device is a switch, the switchport is returned; otherwise the switchport field is null.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceClients_1Test() throws ApiException {
        String serial = null;
        String t0 = null;
        Float timespan = null;
        List<Object> response = api.getDeviceClients_1(serial, t0, timespan);
        // TODO: test validations
    }

    /**
     * List the security events for a client
     *
     * List the security events for a client. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceClientSecurityEvents_1Test() throws ApiException {
        String networkId = null;
        String clientId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        String sortOrder = null;
        List<Object> response = api.getNetworkApplianceClientSecurityEvents_1(networkId, clientId, t0, t1, timespan, perPage, startingAfter, endingBefore, sortOrder);
        // TODO: test validations
    }

    /**
     * Return the policy assigned to a client on the network
     *
     * Return the policy assigned to a client on the network. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkClientPolicy_1Test() throws ApiException {
        String networkId = null;
        String clientId = null;
        Object response = api.getNetworkClientPolicy_1(networkId, clientId);
        // TODO: test validations
    }

    /**
     * Return the splash authorization for a client, for each SSID they&#39;ve associated with through splash
     *
     * Return the splash authorization for a client, for each SSID they&#39;ve associated with through splash. Only enabled SSIDs with Click-through splash enabled will be included. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkClientSplashAuthorizationStatus_1Test() throws ApiException {
        String networkId = null;
        String clientId = null;
        Object response = api.getNetworkClientSplashAuthorizationStatus_1(networkId, clientId);
        // TODO: test validations
    }

    /**
     * Return the client&#39;s network traffic data over time
     *
     * Return the client&#39;s network traffic data over time. Usage data is in kilobytes. This endpoint requires detailed traffic analysis to be enabled on the Network-wide &gt; General page. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkClientTrafficHistory_1Test() throws ApiException {
        String networkId = null;
        String clientId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<Object> response = api.getNetworkClientTrafficHistory_1(networkId, clientId, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * Return the client&#39;s daily usage history
     *
     * Return the client&#39;s daily usage history. Usage data is in kilobytes. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkClientUsageHistory_1Test() throws ApiException {
        String networkId = null;
        String clientId = null;
        List<Object> response = api.getNetworkClientUsageHistory_1(networkId, clientId);
        // TODO: test validations
    }

    /**
     * Return the client associated with the given identifier
     *
     * Return the client associated with the given identifier. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkClient_1Test() throws ApiException {
        String networkId = null;
        String clientId = null;
        GetNetworkClient200Response response = api.getNetworkClient_1(networkId, clientId);
        // TODO: test validations
    }

    /**
     * Return the application usage data for clients
     *
     * Return the application usage data for clients. Usage data is in kilobytes. Clients can be identified by client keys or either the MACs or IPs depending on whether the network uses Track-by-IP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkClientsApplicationUsage_1Test() throws ApiException {
        String networkId = null;
        String clients = null;
        Integer ssidNumber = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        List<Object> response = api.getNetworkClientsApplicationUsage_1(networkId, clients, ssidNumber, perPage, startingAfter, endingBefore, t0, t1, timespan);
        // TODO: test validations
    }

    /**
     * Returns a timeseries of total traffic consumption rates for all clients on a network within a given timespan, in megabits per second.
     *
     * Returns a timeseries of total traffic consumption rates for all clients on a network within a given timespan, in megabits per second.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkClientsBandwidthUsageHistory_1Test() throws ApiException {
        String networkId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<Object> response = api.getNetworkClientsBandwidthUsageHistory_1(networkId, t0, t1, timespan, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * Return overview statistics for network clients
     *
     * Return overview statistics for network clients
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkClientsOverview_1Test() throws ApiException {
        String networkId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        Integer resolution = null;
        Object response = api.getNetworkClientsOverview_1(networkId, t0, t1, timespan, resolution);
        // TODO: test validations
    }

    /**
     * Return the usage histories for clients
     *
     * Return the usage histories for clients. Usage data is in kilobytes. Clients can be identified by client keys or either the MACs or IPs depending on whether the network uses Track-by-IP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkClientsUsageHistories_1Test() throws ApiException {
        String networkId = null;
        String clients = null;
        Integer ssidNumber = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        List<Object> response = api.getNetworkClientsUsageHistories_1(networkId, clients, ssidNumber, perPage, startingAfter, endingBefore, t0, t1, timespan);
        // TODO: test validations
    }

    /**
     * List the clients that have used this network in the timespan
     *
     * List the clients that have used this network in the timespan
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkClients_1Test() throws ApiException {
        String networkId = null;
        String t0 = null;
        Float timespan = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<String> statuses = null;
        String ip = null;
        String ip6 = null;
        String ip6Local = null;
        String mac = null;
        String os = null;
        String description = null;
        String vlan = null;
        List<String> recentDeviceConnections = null;
        GetNetworkClients200Response response = api.getNetworkClients_1(networkId, t0, timespan, perPage, startingAfter, endingBefore, statuses, ip, ip6, ip6Local, mac, os, description, vlan, recentDeviceConnections);
        // TODO: test validations
    }

    /**
     * Aggregated connectivity info for a given client on this network
     *
     * Aggregated connectivity info for a given client on this network. Clients are identified by their MAC.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessClientConnectionStats_1Test() throws ApiException {
        String networkId = null;
        String clientId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        String band = null;
        Integer ssid = null;
        Integer vlan = null;
        String apTag = null;
        Object response = api.getNetworkWirelessClientConnectionStats_1(networkId, clientId, t0, t1, timespan, band, ssid, vlan, apTag);
        // TODO: test validations
    }

    /**
     * List the wireless connectivity events for a client within a network in the timespan.
     *
     * List the wireless connectivity events for a client within a network in the timespan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessClientConnectivityEvents_1Test() throws ApiException {
        String networkId = null;
        String clientId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        List<String> types = null;
        List<String> includedSeverities = null;
        String band = null;
        Integer ssidNumber = null;
        String deviceSerial = null;
        List<Object> response = api.getNetworkWirelessClientConnectivityEvents_1(networkId, clientId, perPage, startingAfter, endingBefore, t0, t1, timespan, types, includedSeverities, band, ssidNumber, deviceSerial);
        // TODO: test validations
    }

    /**
     * Return the latency history for a client
     *
     * Return the latency history for a client. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP. The latency data is from a sample of 2% of packets and is grouped into 4 traffic categories: background, best effort, video, voice. Within these categories the sampled packet counters are bucketed by latency in milliseconds.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessClientLatencyHistory_1Test() throws ApiException {
        String networkId = null;
        String clientId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        Integer resolution = null;
        List<Object> response = api.getNetworkWirelessClientLatencyHistory_1(networkId, clientId, t0, t1, timespan, resolution);
        // TODO: test validations
    }

    /**
     * Aggregated latency info for a given client on this network
     *
     * Aggregated latency info for a given client on this network. Clients are identified by their MAC.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessClientLatencyStats_1Test() throws ApiException {
        String networkId = null;
        String clientId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        String band = null;
        Integer ssid = null;
        Integer vlan = null;
        String apTag = null;
        String fields = null;
        Object response = api.getNetworkWirelessClientLatencyStats_1(networkId, clientId, t0, t1, timespan, band, ssid, vlan, apTag, fields);
        // TODO: test validations
    }

    /**
     * Aggregated connectivity info for this network, grouped by clients
     *
     * Aggregated connectivity info for this network, grouped by clients
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessClientsConnectionStats_1Test() throws ApiException {
        String networkId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        String band = null;
        Integer ssid = null;
        Integer vlan = null;
        String apTag = null;
        List<Object> response = api.getNetworkWirelessClientsConnectionStats_1(networkId, t0, t1, timespan, band, ssid, vlan, apTag);
        // TODO: test validations
    }

    /**
     * Aggregated latency info for this network, grouped by clients
     *
     * Aggregated latency info for this network, grouped by clients
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessClientsLatencyStats_1Test() throws ApiException {
        String networkId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        String band = null;
        Integer ssid = null;
        Integer vlan = null;
        String apTag = null;
        String fields = null;
        List<Object> response = api.getNetworkWirelessClientsLatencyStats_1(networkId, t0, t1, timespan, band, ssid, vlan, apTag, fields);
        // TODO: test validations
    }

    /**
     * Return data usage (in megabits per second) over time for all clients in the given organization within a given time range.
     *
     * Return data usage (in megabits per second) over time for all clients in the given organization within a given time range.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationClientsBandwidthUsageHistory_1Test() throws ApiException {
        String organizationId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        List<GetOrganizationClientsBandwidthUsageHistory200ResponseInner> response = api.getOrganizationClientsBandwidthUsageHistory_1(organizationId, t0, t1, timespan);
        // TODO: test validations
    }

    /**
     * Return summary information around client data usage (in mb) across the given organization.
     *
     * Return summary information around client data usage (in mb) across the given organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationClientsOverview_1Test() throws ApiException {
        String organizationId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        GetOrganizationClientsOverview200Response response = api.getOrganizationClientsOverview_1(organizationId, t0, t1, timespan);
        // TODO: test validations
    }

    /**
     * Return the client details in an organization
     *
     * Return the client details in an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationClientsSearch_1Test() throws ApiException {
        String organizationId = null;
        String mac = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        Object response = api.getOrganizationClientsSearch_1(organizationId, mac, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * Return metrics for organization&#39;s top 10 clients by data usage (in mb) over given time range.
     *
     * Return metrics for organization&#39;s top 10 clients by data usage (in mb) over given time range.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationSummaryTopClientsByUsage_3Test() throws ApiException {
        String organizationId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        List<GetOrganizationSummaryTopClientsByUsage200ResponseInner> response = api.getOrganizationSummaryTopClientsByUsage_3(organizationId, t0, t1, timespan);
        // TODO: test validations
    }

    /**
     * Return metrics for organization&#39;s top clients by data usage (in mb) over given time range, grouped by manufacturer.
     *
     * Return metrics for organization&#39;s top clients by data usage (in mb) over given time range, grouped by manufacturer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationSummaryTopClientsManufacturersByUsage_3Test() throws ApiException {
        String organizationId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        List<GetOrganizationSummaryTopClientsManufacturersByUsage200ResponseInner> response = api.getOrganizationSummaryTopClientsManufacturersByUsage_3(organizationId, t0, t1, timespan);
        // TODO: test validations
    }

    /**
     * Provisions a client with a name and policy
     *
     * Provisions a client with a name and policy. Clients can be provisioned before they associate to the network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void provisionNetworkClients_1Test() throws ApiException {
        String networkId = null;
        ProvisionNetworkClientsRequest provisionNetworkClientsRequest = null;
        Object response = api.provisionNetworkClients_1(networkId, provisionNetworkClientsRequest);
        // TODO: test validations
    }

    /**
     * Update the policy assigned to a client on the network
     *
     * Update the policy assigned to a client on the network. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkClientPolicy_1Test() throws ApiException {
        String networkId = null;
        String clientId = null;
        UpdateNetworkClientPolicyRequest updateNetworkClientPolicyRequest = null;
        Object response = api.updateNetworkClientPolicy_1(networkId, clientId, updateNetworkClientPolicyRequest);
        // TODO: test validations
    }

    /**
     * Update a client&#39;s splash authorization
     *
     * Update a client&#39;s splash authorization. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkClientSplashAuthorizationStatus_1Test() throws ApiException {
        String networkId = null;
        String clientId = null;
        UpdateNetworkClientSplashAuthorizationStatusRequest updateNetworkClientSplashAuthorizationStatusRequest = null;
        Object response = api.updateNetworkClientSplashAuthorizationStatus_1(networkId, clientId, updateNetworkClientSplashAuthorizationStatusRequest);
        // TODO: test validations
    }

}
