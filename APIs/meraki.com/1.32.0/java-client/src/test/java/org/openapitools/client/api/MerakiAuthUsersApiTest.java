/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateNetworkMerakiAuthUserRequest;
import org.openapitools.client.model.GetNetworkMerakiAuthUsers200ResponseInner;
import org.openapitools.client.model.UpdateNetworkMerakiAuthUserRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MerakiAuthUsersApi
 */
@Disabled
public class MerakiAuthUsersApiTest {

    private final MerakiAuthUsersApi api = new MerakiAuthUsersApi();

    /**
     * Authorize a user configured with Meraki Authentication for a network (currently supports 802.1X, splash guest, and client VPN users, and currently, organizations have a 50,000 user cap)
     *
     * Authorize a user configured with Meraki Authentication for a network (currently supports 802.1X, splash guest, and client VPN users, and currently, organizations have a 50,000 user cap)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkMerakiAuthUser_1Test() throws ApiException {
        String networkId = null;
        CreateNetworkMerakiAuthUserRequest createNetworkMerakiAuthUserRequest = null;
        GetNetworkMerakiAuthUsers200ResponseInner response = api.createNetworkMerakiAuthUser_1(networkId, createNetworkMerakiAuthUserRequest);
        // TODO: test validations
    }

    /**
     * Deauthorize a user
     *
     * Deauthorize a user. To reauthorize a user after deauthorizing them, POST to this endpoint. (Currently, 802.1X RADIUS, splash guest, and client VPN users can be deauthorized.)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkMerakiAuthUser_1Test() throws ApiException {
        String networkId = null;
        String merakiAuthUserId = null;
        api.deleteNetworkMerakiAuthUser_1(networkId, merakiAuthUserId);
        // TODO: test validations
    }

    /**
     * Return the Meraki Auth splash guest, RADIUS, or client VPN user
     *
     * Return the Meraki Auth splash guest, RADIUS, or client VPN user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkMerakiAuthUser_1Test() throws ApiException {
        String networkId = null;
        String merakiAuthUserId = null;
        GetNetworkMerakiAuthUsers200ResponseInner response = api.getNetworkMerakiAuthUser_1(networkId, merakiAuthUserId);
        // TODO: test validations
    }

    /**
     * List the users configured under Meraki Authentication for a network (splash guest or RADIUS users for a wireless network, or client VPN users for a wired network)
     *
     * List the users configured under Meraki Authentication for a network (splash guest or RADIUS users for a wireless network, or client VPN users for a wired network)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkMerakiAuthUsers_1Test() throws ApiException {
        String networkId = null;
        List<GetNetworkMerakiAuthUsers200ResponseInner> response = api.getNetworkMerakiAuthUsers_1(networkId);
        // TODO: test validations
    }

    /**
     * Update a user configured with Meraki Authentication (currently, 802.1X RADIUS, splash guest, and client VPN users can be updated)
     *
     * Update a user configured with Meraki Authentication (currently, 802.1X RADIUS, splash guest, and client VPN users can be updated)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkMerakiAuthUser_1Test() throws ApiException {
        String networkId = null;
        String merakiAuthUserId = null;
        UpdateNetworkMerakiAuthUserRequest updateNetworkMerakiAuthUserRequest = null;
        GetNetworkMerakiAuthUsers200ResponseInner response = api.updateNetworkMerakiAuthUser_1(networkId, merakiAuthUserId, updateNetworkMerakiAuthUserRequest);
        // TODO: test validations
    }

}
