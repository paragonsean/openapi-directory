/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AssignOrganizationLicensesSeats200Response;
import org.openapitools.client.model.AssignOrganizationLicensesSeatsRequest;
import org.openapitools.client.model.ClaimIntoOrganizationInventoryRequest;
import org.openapitools.client.model.ClaimIntoOrganizationRequest;
import org.openapitools.client.model.CloneOrganizationRequest;
import org.openapitools.client.model.CombineOrganizationNetworks200Response;
import org.openapitools.client.model.CombineOrganizationNetworksRequest;
import org.openapitools.client.model.CreateOrganizationActionBatch201Response;
import org.openapitools.client.model.CreateOrganizationActionBatchRequest;
import org.openapitools.client.model.CreateOrganizationAdaptivePolicyAclRequest;
import org.openapitools.client.model.CreateOrganizationAdaptivePolicyGroupRequest;
import org.openapitools.client.model.CreateOrganizationAdaptivePolicyPolicyRequest;
import org.openapitools.client.model.CreateOrganizationAdminRequest;
import org.openapitools.client.model.CreateOrganizationAlertsProfileRequest;
import org.openapitools.client.model.CreateOrganizationBrandingPolicy201Response;
import org.openapitools.client.model.CreateOrganizationBrandingPolicyRequest;
import org.openapitools.client.model.CreateOrganizationConfigTemplateRequest;
import org.openapitools.client.model.CreateOrganizationEarlyAccessFeaturesOptInRequest;
import org.openapitools.client.model.CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest;
import org.openapitools.client.model.CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner;
import org.openapitools.client.model.CreateOrganizationInventoryOnboardingCloudMonitoringImportRequest;
import org.openapitools.client.model.CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner;
import org.openapitools.client.model.CreateOrganizationInventoryOnboardingCloudMonitoringPrepareRequest;
import org.openapitools.client.model.CreateOrganizationNetworkRequest;
import org.openapitools.client.model.CreateOrganizationPolicyObjectRequest;
import org.openapitools.client.model.CreateOrganizationPolicyObjectsGroupRequest;
import org.openapitools.client.model.CreateOrganizationRequest;
import org.openapitools.client.model.CreateOrganizationSamlIdpRequest;
import org.openapitools.client.model.CreateOrganizationSamlRoleRequest;
import org.openapitools.client.model.GetNetwork200Response;
import org.openapitools.client.model.GetOrganizationAdaptivePolicyOverview200Response;
import org.openapitools.client.model.GetOrganizationApiRequests200ResponseInner;
import org.openapitools.client.model.GetOrganizationApiRequestsOverviewResponseCodesByInterval200ResponseInner;
import org.openapitools.client.model.GetOrganizationBrandingPolicies200ResponseInner;
import org.openapitools.client.model.GetOrganizationBrandingPoliciesPriorities200Response;
import org.openapitools.client.model.GetOrganizationClientsBandwidthUsageHistory200ResponseInner;
import org.openapitools.client.model.GetOrganizationClientsOverview200Response;
import org.openapitools.client.model.GetOrganizationDevices200ResponseInner;
import org.openapitools.client.model.GetOrganizationDevicesAvailabilities200ResponseInner;
import org.openapitools.client.model.GetOrganizationDevicesPowerModulesStatusesByDevice200ResponseInner;
import org.openapitools.client.model.GetOrganizationDevicesStatuses200Response;
import org.openapitools.client.model.GetOrganizationDevicesStatusesOverview200Response;
import org.openapitools.client.model.GetOrganizationDevicesUplinksAddressesByDevice200ResponseInner;
import org.openapitools.client.model.GetOrganizationDevicesUplinksLossAndLatency200ResponseInner;
import org.openapitools.client.model.GetOrganizationFirmwareUpgrades200ResponseInner;
import org.openapitools.client.model.GetOrganizationFirmwareUpgradesByDevice200ResponseInner;
import org.openapitools.client.model.GetOrganizationInventoryDevices200ResponseInner;
import org.openapitools.client.model.GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner;
import org.openapitools.client.model.GetOrganizationLicenses200ResponseInner;
import org.openapitools.client.model.GetOrganizationLoginSecurity200Response;
import org.openapitools.client.model.GetOrganizationSaml200Response;
import org.openapitools.client.model.GetOrganizationSamlIdps200ResponseInner;
import org.openapitools.client.model.GetOrganizationSummaryTopAppliancesByUtilization200ResponseInner;
import org.openapitools.client.model.GetOrganizationSummaryTopClientsByUsage200ResponseInner;
import org.openapitools.client.model.GetOrganizationSummaryTopClientsManufacturersByUsage200ResponseInner;
import org.openapitools.client.model.GetOrganizationSummaryTopDevicesByUsage200ResponseInner;
import org.openapitools.client.model.GetOrganizationSummaryTopDevicesModelsByUsage200ResponseInner;
import org.openapitools.client.model.GetOrganizationSummaryTopSsidsByUsage200ResponseInner;
import org.openapitools.client.model.GetOrganizationSummaryTopSwitchesByEnergyUsage200ResponseInner;
import org.openapitools.client.model.GetOrganizationUplinksStatuses200ResponseInner;
import org.openapitools.client.model.GetOrganizationWebhooksLogs200ResponseInner;
import org.openapitools.client.model.GetOrganizations200ResponseInner;
import org.openapitools.client.model.MoveOrganizationLicenses200Response;
import org.openapitools.client.model.MoveOrganizationLicensesRequest;
import org.openapitools.client.model.MoveOrganizationLicensesSeats200Response;
import org.openapitools.client.model.MoveOrganizationLicensesSeatsRequest;
import org.openapitools.client.model.ReleaseFromOrganizationInventoryRequest;
import org.openapitools.client.model.RenewOrganizationLicensesSeatsRequest;
import org.openapitools.client.model.UpdateOrganizationActionBatchRequest;
import org.openapitools.client.model.UpdateOrganizationAdaptivePolicyAclRequest;
import org.openapitools.client.model.UpdateOrganizationAdaptivePolicyGroupRequest;
import org.openapitools.client.model.UpdateOrganizationAdaptivePolicyPolicyRequest;
import org.openapitools.client.model.UpdateOrganizationAdaptivePolicySettingsRequest;
import org.openapitools.client.model.UpdateOrganizationAdminRequest;
import org.openapitools.client.model.UpdateOrganizationAlertsProfileRequest;
import org.openapitools.client.model.UpdateOrganizationBrandingPoliciesPrioritiesRequest;
import org.openapitools.client.model.UpdateOrganizationBrandingPolicyRequest;
import org.openapitools.client.model.UpdateOrganizationConfigTemplateRequest;
import org.openapitools.client.model.UpdateOrganizationEarlyAccessFeaturesOptInRequest;
import org.openapitools.client.model.UpdateOrganizationLicenseRequest;
import org.openapitools.client.model.UpdateOrganizationLoginSecurityRequest;
import org.openapitools.client.model.UpdateOrganizationPolicyObjectRequest;
import org.openapitools.client.model.UpdateOrganizationPolicyObjectsGroupRequest;
import org.openapitools.client.model.UpdateOrganizationRequest;
import org.openapitools.client.model.UpdateOrganizationSamlIdpRequest;
import org.openapitools.client.model.UpdateOrganizationSamlRequest;
import org.openapitools.client.model.UpdateOrganizationSamlRole200Response;
import org.openapitools.client.model.UpdateOrganizationSamlRoleRequest;
import org.openapitools.client.model.UpdateOrganizationSnmpRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OrganizationsApi
 */
@Disabled
public class OrganizationsApiTest {

    private final OrganizationsApi api = new OrganizationsApi();

    /**
     * Assign SM seats to a network
     *
     * Assign SM seats to a network. This will increase the managed SM device limit of the network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assignOrganizationLicensesSeatsTest() throws ApiException {
        String organizationId = null;
        AssignOrganizationLicensesSeatsRequest assignOrganizationLicensesSeatsRequest = null;
        AssignOrganizationLicensesSeats200Response response = api.assignOrganizationLicensesSeats(organizationId, assignOrganizationLicensesSeatsRequest);
        // TODO: test validations
    }

    /**
     * Claim a list of devices, licenses, and/or orders into an organization
     *
     * Claim a list of devices, licenses, and/or orders into an organization. When claiming by order, all devices and licenses in the order will be claimed; licenses will be added to the organization and devices will be placed in the organization&#39;s inventory.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void claimIntoOrganizationTest() throws ApiException {
        String organizationId = null;
        ClaimIntoOrganizationRequest claimIntoOrganizationRequest = null;
        Object response = api.claimIntoOrganization(organizationId, claimIntoOrganizationRequest);
        // TODO: test validations
    }

    /**
     * Claim a list of devices, licenses, and/or orders into an organization inventory
     *
     * Claim a list of devices, licenses, and/or orders into an organization inventory. When claiming by order, all devices and licenses in the order will be claimed; licenses will be added to the organization and devices will be placed in the organization&#39;s inventory. Use /organizations/{organizationId}/inventory/release to release devices from an organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void claimIntoOrganizationInventoryTest() throws ApiException {
        String organizationId = null;
        ClaimIntoOrganizationInventoryRequest claimIntoOrganizationInventoryRequest = null;
        Object response = api.claimIntoOrganizationInventory(organizationId, claimIntoOrganizationInventoryRequest);
        // TODO: test validations
    }

    /**
     * Create a new organization by cloning the addressed organization
     *
     * Create a new organization by cloning the addressed organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloneOrganizationTest() throws ApiException {
        String organizationId = null;
        CloneOrganizationRequest cloneOrganizationRequest = null;
        GetOrganizations200ResponseInner response = api.cloneOrganization(organizationId, cloneOrganizationRequest);
        // TODO: test validations
    }

    /**
     * Combine multiple networks into a single network
     *
     * Combine multiple networks into a single network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void combineOrganizationNetworksTest() throws ApiException {
        String organizationId = null;
        CombineOrganizationNetworksRequest combineOrganizationNetworksRequest = null;
        CombineOrganizationNetworks200Response response = api.combineOrganizationNetworks(organizationId, combineOrganizationNetworksRequest);
        // TODO: test validations
    }

    /**
     * Create a new organization
     *
     * Create a new organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationTest() throws ApiException {
        CreateOrganizationRequest createOrganizationRequest = null;
        GetOrganizations200ResponseInner response = api.createOrganization(createOrganizationRequest);
        // TODO: test validations
    }

    /**
     * Create an action batch
     *
     * Create an action batch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationActionBatchTest() throws ApiException {
        String organizationId = null;
        CreateOrganizationActionBatchRequest createOrganizationActionBatchRequest = null;
        CreateOrganizationActionBatch201Response response = api.createOrganizationActionBatch(organizationId, createOrganizationActionBatchRequest);
        // TODO: test validations
    }

    /**
     * Creates new adaptive policy ACL
     *
     * Creates new adaptive policy ACL
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationAdaptivePolicyAclTest() throws ApiException {
        String organizationId = null;
        CreateOrganizationAdaptivePolicyAclRequest createOrganizationAdaptivePolicyAclRequest = null;
        Object response = api.createOrganizationAdaptivePolicyAcl(organizationId, createOrganizationAdaptivePolicyAclRequest);
        // TODO: test validations
    }

    /**
     * Creates a new adaptive policy group
     *
     * Creates a new adaptive policy group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationAdaptivePolicyGroupTest() throws ApiException {
        String organizationId = null;
        CreateOrganizationAdaptivePolicyGroupRequest createOrganizationAdaptivePolicyGroupRequest = null;
        Object response = api.createOrganizationAdaptivePolicyGroup(organizationId, createOrganizationAdaptivePolicyGroupRequest);
        // TODO: test validations
    }

    /**
     * Add an Adaptive Policy
     *
     * Add an Adaptive Policy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationAdaptivePolicyPolicyTest() throws ApiException {
        String organizationId = null;
        CreateOrganizationAdaptivePolicyPolicyRequest createOrganizationAdaptivePolicyPolicyRequest = null;
        Object response = api.createOrganizationAdaptivePolicyPolicy(organizationId, createOrganizationAdaptivePolicyPolicyRequest);
        // TODO: test validations
    }

    /**
     * Create a new dashboard administrator
     *
     * Create a new dashboard administrator
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationAdminTest() throws ApiException {
        String organizationId = null;
        CreateOrganizationAdminRequest createOrganizationAdminRequest = null;
        Object response = api.createOrganizationAdmin(organizationId, createOrganizationAdminRequest);
        // TODO: test validations
    }

    /**
     * Create an organization-wide alert configuration
     *
     * Create an organization-wide alert configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationAlertsProfileTest() throws ApiException {
        String organizationId = null;
        CreateOrganizationAlertsProfileRequest createOrganizationAlertsProfileRequest = null;
        Object response = api.createOrganizationAlertsProfile(organizationId, createOrganizationAlertsProfileRequest);
        // TODO: test validations
    }

    /**
     * Add a new branding policy to an organization
     *
     * Add a new branding policy to an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationBrandingPolicyTest() throws ApiException {
        String organizationId = null;
        CreateOrganizationBrandingPolicyRequest createOrganizationBrandingPolicyRequest = null;
        CreateOrganizationBrandingPolicy201Response response = api.createOrganizationBrandingPolicy(organizationId, createOrganizationBrandingPolicyRequest);
        // TODO: test validations
    }

    /**
     * Create a new configuration template
     *
     * Create a new configuration template
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationConfigTemplateTest() throws ApiException {
        String organizationId = null;
        CreateOrganizationConfigTemplateRequest createOrganizationConfigTemplateRequest = null;
        Object response = api.createOrganizationConfigTemplate(organizationId, createOrganizationConfigTemplateRequest);
        // TODO: test validations
    }

    /**
     * Create a new early access feature opt-in for an organization
     *
     * Create a new early access feature opt-in for an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationEarlyAccessFeaturesOptInTest() throws ApiException {
        String organizationId = null;
        CreateOrganizationEarlyAccessFeaturesOptInRequest createOrganizationEarlyAccessFeaturesOptInRequest = null;
        Object response = api.createOrganizationEarlyAccessFeaturesOptIn(organizationId, createOrganizationEarlyAccessFeaturesOptInRequest);
        // TODO: test validations
    }

    /**
     * Imports event logs related to the onboarding app into elastisearch
     *
     * Imports event logs related to the onboarding app into elastisearch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationInventoryOnboardingCloudMonitoringExportEventTest() throws ApiException {
        String organizationId = null;
        CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest = null;
        Object response = api.createOrganizationInventoryOnboardingCloudMonitoringExportEvent(organizationId, createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest);
        // TODO: test validations
    }

    /**
     * Commits the import operation to complete the onboarding of a device into Dashboard for monitoring.
     *
     * Commits the import operation to complete the onboarding of a device into Dashboard for monitoring.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationInventoryOnboardingCloudMonitoringImportTest() throws ApiException {
        String organizationId = null;
        CreateOrganizationInventoryOnboardingCloudMonitoringImportRequest createOrganizationInventoryOnboardingCloudMonitoringImportRequest = null;
        List<CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner> response = api.createOrganizationInventoryOnboardingCloudMonitoringImport(organizationId, createOrganizationInventoryOnboardingCloudMonitoringImportRequest);
        // TODO: test validations
    }

    /**
     * Initiates or updates an import session
     *
     * Initiates or updates an import session. An import ID will be generated and used when you are ready to commit the import.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationInventoryOnboardingCloudMonitoringPrepareTest() throws ApiException {
        String organizationId = null;
        CreateOrganizationInventoryOnboardingCloudMonitoringPrepareRequest createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest = null;
        List<CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner> response = api.createOrganizationInventoryOnboardingCloudMonitoringPrepare(organizationId, createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest);
        // TODO: test validations
    }

    /**
     * Create a network
     *
     * Create a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationNetworkTest() throws ApiException {
        String organizationId = null;
        CreateOrganizationNetworkRequest createOrganizationNetworkRequest = null;
        GetNetwork200Response response = api.createOrganizationNetwork(organizationId, createOrganizationNetworkRequest);
        // TODO: test validations
    }

    /**
     * Creates a new Policy Object.
     *
     * Creates a new Policy Object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationPolicyObjectTest() throws ApiException {
        String organizationId = null;
        CreateOrganizationPolicyObjectRequest createOrganizationPolicyObjectRequest = null;
        Object response = api.createOrganizationPolicyObject(organizationId, createOrganizationPolicyObjectRequest);
        // TODO: test validations
    }

    /**
     * Creates a new Policy Object Group.
     *
     * Creates a new Policy Object Group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationPolicyObjectsGroupTest() throws ApiException {
        String organizationId = null;
        CreateOrganizationPolicyObjectsGroupRequest createOrganizationPolicyObjectsGroupRequest = null;
        Object response = api.createOrganizationPolicyObjectsGroup(organizationId, createOrganizationPolicyObjectsGroupRequest);
        // TODO: test validations
    }

    /**
     * Create a SAML IdP for your organization.
     *
     * Create a SAML IdP for your organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationSamlIdpTest() throws ApiException {
        String organizationId = null;
        CreateOrganizationSamlIdpRequest createOrganizationSamlIdpRequest = null;
        List<GetOrganizationSamlIdps200ResponseInner> response = api.createOrganizationSamlIdp(organizationId, createOrganizationSamlIdpRequest);
        // TODO: test validations
    }

    /**
     * Create a SAML role
     *
     * Create a SAML role
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationSamlRoleTest() throws ApiException {
        String organizationId = null;
        CreateOrganizationSamlRoleRequest createOrganizationSamlRoleRequest = null;
        Object response = api.createOrganizationSamlRole(organizationId, createOrganizationSamlRoleRequest);
        // TODO: test validations
    }

    /**
     * Delete an organization
     *
     * Delete an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganizationTest() throws ApiException {
        String organizationId = null;
        api.deleteOrganization(organizationId);
        // TODO: test validations
    }

    /**
     * Delete an action batch
     *
     * Delete an action batch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganizationActionBatchTest() throws ApiException {
        String organizationId = null;
        String actionBatchId = null;
        api.deleteOrganizationActionBatch(organizationId, actionBatchId);
        // TODO: test validations
    }

    /**
     * Deletes the specified adaptive policy ACL
     *
     * Deletes the specified adaptive policy ACL. Note this adaptive policy ACL will also be removed from policies using it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganizationAdaptivePolicyAclTest() throws ApiException {
        String organizationId = null;
        String aclId = null;
        api.deleteOrganizationAdaptivePolicyAcl(organizationId, aclId);
        // TODO: test validations
    }

    /**
     * Deletes the specified adaptive policy group and any associated policies and references
     *
     * Deletes the specified adaptive policy group and any associated policies and references
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganizationAdaptivePolicyGroupTest() throws ApiException {
        String organizationId = null;
        String id = null;
        api.deleteOrganizationAdaptivePolicyGroup(organizationId, id);
        // TODO: test validations
    }

    /**
     * Delete an Adaptive Policy
     *
     * Delete an Adaptive Policy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganizationAdaptivePolicyPolicyTest() throws ApiException {
        String organizationId = null;
        String id = null;
        api.deleteOrganizationAdaptivePolicyPolicy(organizationId, id);
        // TODO: test validations
    }

    /**
     * Revoke all access for a dashboard administrator within this organization
     *
     * Revoke all access for a dashboard administrator within this organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganizationAdminTest() throws ApiException {
        String organizationId = null;
        String adminId = null;
        api.deleteOrganizationAdmin(organizationId, adminId);
        // TODO: test validations
    }

    /**
     * Removes an organization-wide alert config
     *
     * Removes an organization-wide alert config
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganizationAlertsProfileTest() throws ApiException {
        String organizationId = null;
        String alertConfigId = null;
        api.deleteOrganizationAlertsProfile(organizationId, alertConfigId);
        // TODO: test validations
    }

    /**
     * Delete a branding policy
     *
     * Delete a branding policy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganizationBrandingPolicyTest() throws ApiException {
        String organizationId = null;
        String brandingPolicyId = null;
        api.deleteOrganizationBrandingPolicy(organizationId, brandingPolicyId);
        // TODO: test validations
    }

    /**
     * Remove a configuration template
     *
     * Remove a configuration template
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganizationConfigTemplateTest() throws ApiException {
        String organizationId = null;
        String configTemplateId = null;
        api.deleteOrganizationConfigTemplate(organizationId, configTemplateId);
        // TODO: test validations
    }

    /**
     * Delete an early access feature opt-in
     *
     * Delete an early access feature opt-in
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganizationEarlyAccessFeaturesOptInTest() throws ApiException {
        String organizationId = null;
        String optInId = null;
        api.deleteOrganizationEarlyAccessFeaturesOptIn(organizationId, optInId);
        // TODO: test validations
    }

    /**
     * Deletes a Policy Object.
     *
     * Deletes a Policy Object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganizationPolicyObjectTest() throws ApiException {
        String organizationId = null;
        String policyObjectId = null;
        api.deleteOrganizationPolicyObject(organizationId, policyObjectId);
        // TODO: test validations
    }

    /**
     * Deletes a Policy Object Group.
     *
     * Deletes a Policy Object Group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganizationPolicyObjectsGroupTest() throws ApiException {
        String organizationId = null;
        String policyObjectGroupId = null;
        api.deleteOrganizationPolicyObjectsGroup(organizationId, policyObjectGroupId);
        // TODO: test validations
    }

    /**
     * Remove a SAML IdP in your organization.
     *
     * Remove a SAML IdP in your organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganizationSamlIdpTest() throws ApiException {
        String organizationId = null;
        String idpId = null;
        api.deleteOrganizationSamlIdp(organizationId, idpId);
        // TODO: test validations
    }

    /**
     * Remove a SAML role
     *
     * Remove a SAML role
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganizationSamlRoleTest() throws ApiException {
        String organizationId = null;
        String samlRoleId = null;
        api.deleteOrganizationSamlRole(organizationId, samlRoleId);
        // TODO: test validations
    }

    /**
     * Delete a user and all of its authentication methods.
     *
     * Delete a user and all of its authentication methods.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganizationUserTest() throws ApiException {
        String organizationId = null;
        String userId = null;
        api.deleteOrganizationUser(organizationId, userId);
        // TODO: test validations
    }

    /**
     * Return an organization
     *
     * Return an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationTest() throws ApiException {
        String organizationId = null;
        GetOrganizations200ResponseInner response = api.getOrganization(organizationId);
        // TODO: test validations
    }

    /**
     * Return an action batch
     *
     * Return an action batch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationActionBatchTest() throws ApiException {
        String organizationId = null;
        String actionBatchId = null;
        CreateOrganizationActionBatch201Response response = api.getOrganizationActionBatch(organizationId, actionBatchId);
        // TODO: test validations
    }

    /**
     * Return the list of action batches in the organization
     *
     * Return the list of action batches in the organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationActionBatchesTest() throws ApiException {
        String organizationId = null;
        String status = null;
        List<Object> response = api.getOrganizationActionBatches(organizationId, status);
        // TODO: test validations
    }

    /**
     * Returns the adaptive policy ACL information
     *
     * Returns the adaptive policy ACL information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationAdaptivePolicyAclTest() throws ApiException {
        String organizationId = null;
        String aclId = null;
        Object response = api.getOrganizationAdaptivePolicyAcl(organizationId, aclId);
        // TODO: test validations
    }

    /**
     * List adaptive policy ACLs in a organization
     *
     * List adaptive policy ACLs in a organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationAdaptivePolicyAclsTest() throws ApiException {
        String organizationId = null;
        List<Object> response = api.getOrganizationAdaptivePolicyAcls(organizationId);
        // TODO: test validations
    }

    /**
     * Returns an adaptive policy group
     *
     * Returns an adaptive policy group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationAdaptivePolicyGroupTest() throws ApiException {
        String organizationId = null;
        String id = null;
        Object response = api.getOrganizationAdaptivePolicyGroup(organizationId, id);
        // TODO: test validations
    }

    /**
     * List adaptive policy groups in a organization
     *
     * List adaptive policy groups in a organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationAdaptivePolicyGroupsTest() throws ApiException {
        String organizationId = null;
        List<Object> response = api.getOrganizationAdaptivePolicyGroups(organizationId);
        // TODO: test validations
    }

    /**
     * Returns adaptive policy aggregate statistics for an organization
     *
     * Returns adaptive policy aggregate statistics for an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationAdaptivePolicyOverviewTest() throws ApiException {
        String organizationId = null;
        GetOrganizationAdaptivePolicyOverview200Response response = api.getOrganizationAdaptivePolicyOverview(organizationId);
        // TODO: test validations
    }

    /**
     * List adaptive policies in an organization
     *
     * List adaptive policies in an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationAdaptivePolicyPoliciesTest() throws ApiException {
        String organizationId = null;
        List<Object> response = api.getOrganizationAdaptivePolicyPolicies(organizationId);
        // TODO: test validations
    }

    /**
     * Return an adaptive policy
     *
     * Return an adaptive policy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationAdaptivePolicyPolicyTest() throws ApiException {
        String organizationId = null;
        String id = null;
        Object response = api.getOrganizationAdaptivePolicyPolicy(organizationId, id);
        // TODO: test validations
    }

    /**
     * Returns global adaptive policy settings in an organization
     *
     * Returns global adaptive policy settings in an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationAdaptivePolicySettingsTest() throws ApiException {
        String organizationId = null;
        Object response = api.getOrganizationAdaptivePolicySettings(organizationId);
        // TODO: test validations
    }

    /**
     * List the dashboard administrators in this organization
     *
     * List the dashboard administrators in this organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationAdminsTest() throws ApiException {
        String organizationId = null;
        List<Object> response = api.getOrganizationAdmins(organizationId);
        // TODO: test validations
    }

    /**
     * List all organization-wide alert configurations
     *
     * List all organization-wide alert configurations
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationAlertsProfilesTest() throws ApiException {
        String organizationId = null;
        List<Object> response = api.getOrganizationAlertsProfiles(organizationId);
        // TODO: test validations
    }

    /**
     * List the API requests made by an organization
     *
     * List the API requests made by an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationApiRequestsTest() throws ApiException {
        String organizationId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        String adminId = null;
        String path = null;
        String method = null;
        Integer responseCode = null;
        String sourceIp = null;
        String userAgent = null;
        Integer version = null;
        List<String> operationIds = null;
        List<GetOrganizationApiRequests200ResponseInner> response = api.getOrganizationApiRequests(organizationId, t0, t1, timespan, perPage, startingAfter, endingBefore, adminId, path, method, responseCode, sourceIp, userAgent, version, operationIds);
        // TODO: test validations
    }

    /**
     * Return an aggregated overview of API requests data
     *
     * Return an aggregated overview of API requests data
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationApiRequestsOverviewTest() throws ApiException {
        String organizationId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        Object response = api.getOrganizationApiRequestsOverview(organizationId, t0, t1, timespan);
        // TODO: test validations
    }

    /**
     * Tracks organizations&#39; API requests by response code across a given time period
     *
     * Tracks organizations&#39; API requests by response code across a given time period
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationApiRequestsOverviewResponseCodesByIntervalTest() throws ApiException {
        String organizationId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        Integer interval = null;
        Integer version = null;
        List<String> operationIds = null;
        List<String> sourceIps = null;
        List<String> adminIds = null;
        String userAgent = null;
        List<GetOrganizationApiRequestsOverviewResponseCodesByInterval200ResponseInner> response = api.getOrganizationApiRequestsOverviewResponseCodesByInterval(organizationId, t0, t1, timespan, interval, version, operationIds, sourceIps, adminIds, userAgent);
        // TODO: test validations
    }

    /**
     * List the branding policies of an organization
     *
     * List the branding policies of an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationBrandingPoliciesTest() throws ApiException {
        String organizationId = null;
        List<GetOrganizationBrandingPolicies200ResponseInner> response = api.getOrganizationBrandingPolicies(organizationId);
        // TODO: test validations
    }

    /**
     * Return the branding policy IDs of an organization in priority order
     *
     * Return the branding policy IDs of an organization in priority order. IDs are ordered in ascending order of priority (IDs later in the array have higher priority).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationBrandingPoliciesPrioritiesTest() throws ApiException {
        String organizationId = null;
        GetOrganizationBrandingPoliciesPriorities200Response response = api.getOrganizationBrandingPoliciesPriorities(organizationId);
        // TODO: test validations
    }

    /**
     * Return a branding policy
     *
     * Return a branding policy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationBrandingPolicyTest() throws ApiException {
        String organizationId = null;
        String brandingPolicyId = null;
        GetOrganizationBrandingPolicies200ResponseInner response = api.getOrganizationBrandingPolicy(organizationId, brandingPolicyId);
        // TODO: test validations
    }

    /**
     * Return data usage (in megabits per second) over time for all clients in the given organization within a given time range.
     *
     * Return data usage (in megabits per second) over time for all clients in the given organization within a given time range.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationClientsBandwidthUsageHistoryTest() throws ApiException {
        String organizationId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        List<GetOrganizationClientsBandwidthUsageHistory200ResponseInner> response = api.getOrganizationClientsBandwidthUsageHistory(organizationId, t0, t1, timespan);
        // TODO: test validations
    }

    /**
     * Return summary information around client data usage (in mb) across the given organization.
     *
     * Return summary information around client data usage (in mb) across the given organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationClientsOverviewTest() throws ApiException {
        String organizationId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        GetOrganizationClientsOverview200Response response = api.getOrganizationClientsOverview(organizationId, t0, t1, timespan);
        // TODO: test validations
    }

    /**
     * Return the client details in an organization
     *
     * Return the client details in an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationClientsSearchTest() throws ApiException {
        String organizationId = null;
        String mac = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        Object response = api.getOrganizationClientsSearch(organizationId, mac, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * Return a single configuration template
     *
     * Return a single configuration template
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationConfigTemplateTest() throws ApiException {
        String organizationId = null;
        String configTemplateId = null;
        Object response = api.getOrganizationConfigTemplate(organizationId, configTemplateId);
        // TODO: test validations
    }

    /**
     * List the configuration templates for this organization
     *
     * List the configuration templates for this organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationConfigTemplatesTest() throws ApiException {
        String organizationId = null;
        List<Object> response = api.getOrganizationConfigTemplates(organizationId);
        // TODO: test validations
    }

    /**
     * View the Change Log for your organization
     *
     * View the Change Log for your organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationConfigurationChangesTest() throws ApiException {
        String organizationId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        String networkId = null;
        String adminId = null;
        List<Object> response = api.getOrganizationConfigurationChanges(organizationId, t0, t1, timespan, perPage, startingAfter, endingBefore, networkId, adminId);
        // TODO: test validations
    }

    /**
     * List the devices in an organization
     *
     * List the devices in an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationDevicesTest() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        String configurationUpdatedAfter = null;
        List<String> networkIds = null;
        List<String> productTypes = null;
        List<String> tags = null;
        String tagsFilterType = null;
        String name = null;
        String mac = null;
        String serial = null;
        String model = null;
        List<String> macs = null;
        List<String> serials = null;
        List<String> sensorMetrics = null;
        List<String> sensorAlertProfileIds = null;
        List<String> models = null;
        List<GetOrganizationDevices200ResponseInner> response = api.getOrganizationDevices(organizationId, perPage, startingAfter, endingBefore, configurationUpdatedAfter, networkIds, productTypes, tags, tagsFilterType, name, mac, serial, model, macs, serials, sensorMetrics, sensorAlertProfileIds, models);
        // TODO: test validations
    }

    /**
     * List the availability information for devices in an organization
     *
     * List the availability information for devices in an organization. The data returned by this endpoint is updated every 5 minutes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationDevicesAvailabilitiesTest() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<String> networkIds = null;
        List<String> productTypes = null;
        List<String> serials = null;
        List<String> tags = null;
        String tagsFilterType = null;
        List<GetOrganizationDevicesAvailabilities200ResponseInner> response = api.getOrganizationDevicesAvailabilities(organizationId, perPage, startingAfter, endingBefore, networkIds, productTypes, serials, tags, tagsFilterType);
        // TODO: test validations
    }

    /**
     * List the power status information for devices in an organization
     *
     * List the power status information for devices in an organization. The data returned by this endpoint is updated every 5 minutes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationDevicesPowerModulesStatusesByDeviceTest() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<String> networkIds = null;
        List<String> productTypes = null;
        List<String> serials = null;
        List<String> tags = null;
        String tagsFilterType = null;
        List<GetOrganizationDevicesPowerModulesStatusesByDevice200ResponseInner> response = api.getOrganizationDevicesPowerModulesStatusesByDevice(organizationId, perPage, startingAfter, endingBefore, networkIds, productTypes, serials, tags, tagsFilterType);
        // TODO: test validations
    }

    /**
     * List the status of every Meraki device in the organization
     *
     * List the status of every Meraki device in the organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationDevicesStatusesTest() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<String> networkIds = null;
        List<String> serials = null;
        List<String> statuses = null;
        List<String> productTypes = null;
        List<String> models = null;
        List<String> tags = null;
        String tagsFilterType = null;
        GetOrganizationDevicesStatuses200Response response = api.getOrganizationDevicesStatuses(organizationId, perPage, startingAfter, endingBefore, networkIds, serials, statuses, productTypes, models, tags, tagsFilterType);
        // TODO: test validations
    }

    /**
     * Return an overview of current device statuses
     *
     * Return an overview of current device statuses
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationDevicesStatusesOverviewTest() throws ApiException {
        String organizationId = null;
        List<String> productTypes = null;
        List<String> networkIds = null;
        GetOrganizationDevicesStatusesOverview200Response response = api.getOrganizationDevicesStatusesOverview(organizationId, productTypes, networkIds);
        // TODO: test validations
    }

    /**
     * List the current uplink addresses for devices in an organization.
     *
     * List the current uplink addresses for devices in an organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationDevicesUplinksAddressesByDeviceTest() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<String> networkIds = null;
        List<String> productTypes = null;
        List<String> serials = null;
        List<String> tags = null;
        String tagsFilterType = null;
        List<GetOrganizationDevicesUplinksAddressesByDevice200ResponseInner> response = api.getOrganizationDevicesUplinksAddressesByDevice(organizationId, perPage, startingAfter, endingBefore, networkIds, productTypes, serials, tags, tagsFilterType);
        // TODO: test validations
    }

    /**
     * Return the uplink loss and latency for every MX in the organization from at latest 2 minutes ago
     *
     * Return the uplink loss and latency for every MX in the organization from at latest 2 minutes ago
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationDevicesUplinksLossAndLatencyTest() throws ApiException {
        String organizationId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        String uplink = null;
        String ip = null;
        List<GetOrganizationDevicesUplinksLossAndLatency200ResponseInner> response = api.getOrganizationDevicesUplinksLossAndLatency(organizationId, t0, t1, timespan, uplink, ip);
        // TODO: test validations
    }

    /**
     * List the available early access features for organization
     *
     * List the available early access features for organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationEarlyAccessFeaturesTest() throws ApiException {
        String organizationId = null;
        List<Object> response = api.getOrganizationEarlyAccessFeatures(organizationId);
        // TODO: test validations
    }

    /**
     * Show an early access feature opt-in for an organization
     *
     * Show an early access feature opt-in for an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationEarlyAccessFeaturesOptInTest() throws ApiException {
        String organizationId = null;
        String optInId = null;
        Object response = api.getOrganizationEarlyAccessFeaturesOptIn(organizationId, optInId);
        // TODO: test validations
    }

    /**
     * List the early access feature opt-ins for an organization
     *
     * List the early access feature opt-ins for an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationEarlyAccessFeaturesOptInsTest() throws ApiException {
        String organizationId = null;
        List<Object> response = api.getOrganizationEarlyAccessFeaturesOptIns(organizationId);
        // TODO: test validations
    }

    /**
     * Get firmware upgrade information for an organization
     *
     * Get firmware upgrade information for an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationFirmwareUpgradesTest() throws ApiException {
        String organizationId = null;
        List<String> status = null;
        List<String> productType = null;
        List<GetOrganizationFirmwareUpgrades200ResponseInner> response = api.getOrganizationFirmwareUpgrades(organizationId, status, productType);
        // TODO: test validations
    }

    /**
     * Get firmware upgrade status for the filtered devices
     *
     * Get firmware upgrade status for the filtered devices
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationFirmwareUpgradesByDeviceTest() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<String> networkIds = null;
        List<String> serials = null;
        List<String> macs = null;
        List<String> firmwareUpgradeIds = null;
        List<String> firmwareUpgradeBatchIds = null;
        List<GetOrganizationFirmwareUpgradesByDevice200ResponseInner> response = api.getOrganizationFirmwareUpgradesByDevice(organizationId, perPage, startingAfter, endingBefore, networkIds, serials, macs, firmwareUpgradeIds, firmwareUpgradeBatchIds);
        // TODO: test validations
    }

    /**
     * Return a single device from the inventory of an organization
     *
     * Return a single device from the inventory of an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationInventoryDeviceTest() throws ApiException {
        String organizationId = null;
        String serial = null;
        GetOrganizationInventoryDevices200ResponseInner response = api.getOrganizationInventoryDevice(organizationId, serial);
        // TODO: test validations
    }

    /**
     * Return the device inventory for an organization
     *
     * Return the device inventory for an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationInventoryDevicesTest() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        String usedState = null;
        String search = null;
        List<String> macs = null;
        List<String> networkIds = null;
        List<String> serials = null;
        List<String> models = null;
        List<String> orderNumbers = null;
        List<String> tags = null;
        String tagsFilterType = null;
        List<String> productTypes = null;
        List<GetOrganizationInventoryDevices200ResponseInner> response = api.getOrganizationInventoryDevices(organizationId, perPage, startingAfter, endingBefore, usedState, search, macs, networkIds, serials, models, orderNumbers, tags, tagsFilterType, productTypes);
        // TODO: test validations
    }

    /**
     * Check the status of a committed Import operation
     *
     * Check the status of a committed Import operation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationInventoryOnboardingCloudMonitoringImportsTest() throws ApiException {
        String organizationId = null;
        List<String> importIds = null;
        List<GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner> response = api.getOrganizationInventoryOnboardingCloudMonitoringImports(organizationId, importIds);
        // TODO: test validations
    }

    /**
     * Returns list of networks eligible for adding cloud monitored device
     *
     * Returns list of networks eligible for adding cloud monitored device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationInventoryOnboardingCloudMonitoringNetworksTest() throws ApiException {
        String organizationId = null;
        String deviceType = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<GetNetwork200Response> response = api.getOrganizationInventoryOnboardingCloudMonitoringNetworks(organizationId, deviceType, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * Display a license
     *
     * Display a license
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationLicenseTest() throws ApiException {
        String organizationId = null;
        String licenseId = null;
        GetOrganizationLicenses200ResponseInner response = api.getOrganizationLicense(organizationId, licenseId);
        // TODO: test validations
    }

    /**
     * List the licenses for an organization
     *
     * List the licenses for an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationLicensesTest() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        String deviceSerial = null;
        String networkId = null;
        String state = null;
        List<GetOrganizationLicenses200ResponseInner> response = api.getOrganizationLicenses(organizationId, perPage, startingAfter, endingBefore, deviceSerial, networkId, state);
        // TODO: test validations
    }

    /**
     * Return an overview of the license state for an organization
     *
     * Return an overview of the license state for an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationLicensesOverviewTest() throws ApiException {
        String organizationId = null;
        Object response = api.getOrganizationLicensesOverview(organizationId);
        // TODO: test validations
    }

    /**
     * Returns the login security settings for an organization.
     *
     * Returns the login security settings for an organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationLoginSecurityTest() throws ApiException {
        String organizationId = null;
        GetOrganizationLoginSecurity200Response response = api.getOrganizationLoginSecurity(organizationId);
        // TODO: test validations
    }

    /**
     * List the networks that the user has privileges on in an organization
     *
     * List the networks that the user has privileges on in an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationNetworksTest() throws ApiException {
        String organizationId = null;
        String configTemplateId = null;
        Boolean isBoundToConfigTemplate = null;
        List<String> tags = null;
        String tagsFilterType = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<GetNetwork200Response> response = api.getOrganizationNetworks(organizationId, configTemplateId, isBoundToConfigTemplate, tags, tagsFilterType, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * Return the OpenAPI 2.0 Specification of the organization&#39;s API documentation in JSON
     *
     * Return the OpenAPI 2.0 Specification of the organization&#39;s API documentation in JSON
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationOpenapiSpecTest() throws ApiException {
        String organizationId = null;
        Object response = api.getOrganizationOpenapiSpec(organizationId);
        // TODO: test validations
    }

    /**
     * Shows details of a Policy Object.
     *
     * Shows details of a Policy Object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationPolicyObjectTest() throws ApiException {
        String organizationId = null;
        String policyObjectId = null;
        Object response = api.getOrganizationPolicyObject(organizationId, policyObjectId);
        // TODO: test validations
    }

    /**
     * Lists Policy Objects belonging to the organization.
     *
     * Lists Policy Objects belonging to the organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationPolicyObjectsTest() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<Object> response = api.getOrganizationPolicyObjects(organizationId, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * Shows details of a Policy Object Group.
     *
     * Shows details of a Policy Object Group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationPolicyObjectsGroupTest() throws ApiException {
        String organizationId = null;
        String policyObjectGroupId = null;
        Object response = api.getOrganizationPolicyObjectsGroup(organizationId, policyObjectGroupId);
        // TODO: test validations
    }

    /**
     * Lists Policy Object Groups belonging to the organization.
     *
     * Lists Policy Object Groups belonging to the organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationPolicyObjectsGroupsTest() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<Object> response = api.getOrganizationPolicyObjectsGroups(organizationId, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * Returns the SAML SSO enabled settings for an organization.
     *
     * Returns the SAML SSO enabled settings for an organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationSamlTest() throws ApiException {
        String organizationId = null;
        GetOrganizationSaml200Response response = api.getOrganizationSaml(organizationId);
        // TODO: test validations
    }

    /**
     * Get a SAML IdP from your organization.
     *
     * Get a SAML IdP from your organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationSamlIdpTest() throws ApiException {
        String organizationId = null;
        String idpId = null;
        GetOrganizationSamlIdps200ResponseInner response = api.getOrganizationSamlIdp(organizationId, idpId);
        // TODO: test validations
    }

    /**
     * List the SAML IdPs in your organization.
     *
     * List the SAML IdPs in your organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationSamlIdpsTest() throws ApiException {
        String organizationId = null;
        List<GetOrganizationSamlIdps200ResponseInner> response = api.getOrganizationSamlIdps(organizationId);
        // TODO: test validations
    }

    /**
     * Return a SAML role
     *
     * Return a SAML role
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationSamlRoleTest() throws ApiException {
        String organizationId = null;
        String samlRoleId = null;
        Object response = api.getOrganizationSamlRole(organizationId, samlRoleId);
        // TODO: test validations
    }

    /**
     * List the SAML roles for this organization
     *
     * List the SAML roles for this organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationSamlRolesTest() throws ApiException {
        String organizationId = null;
        List<Object> response = api.getOrganizationSamlRoles(organizationId);
        // TODO: test validations
    }

    /**
     * Return the SNMP settings for an organization
     *
     * Return the SNMP settings for an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationSnmpTest() throws ApiException {
        String organizationId = null;
        Object response = api.getOrganizationSnmp(organizationId);
        // TODO: test validations
    }

    /**
     * Return the top 10 appliances sorted by utilization over given time range.
     *
     * Return the top 10 appliances sorted by utilization over given time range.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationSummaryTopAppliancesByUtilizationTest() throws ApiException {
        String organizationId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        List<GetOrganizationSummaryTopAppliancesByUtilization200ResponseInner> response = api.getOrganizationSummaryTopAppliancesByUtilization(organizationId, t0, t1, timespan);
        // TODO: test validations
    }

    /**
     * Return metrics for organization&#39;s top 10 clients by data usage (in mb) over given time range.
     *
     * Return metrics for organization&#39;s top 10 clients by data usage (in mb) over given time range.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationSummaryTopClientsByUsageTest() throws ApiException {
        String organizationId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        List<GetOrganizationSummaryTopClientsByUsage200ResponseInner> response = api.getOrganizationSummaryTopClientsByUsage(organizationId, t0, t1, timespan);
        // TODO: test validations
    }

    /**
     * Return metrics for organization&#39;s top clients by data usage (in mb) over given time range, grouped by manufacturer.
     *
     * Return metrics for organization&#39;s top clients by data usage (in mb) over given time range, grouped by manufacturer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationSummaryTopClientsManufacturersByUsageTest() throws ApiException {
        String organizationId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        List<GetOrganizationSummaryTopClientsManufacturersByUsage200ResponseInner> response = api.getOrganizationSummaryTopClientsManufacturersByUsage(organizationId, t0, t1, timespan);
        // TODO: test validations
    }

    /**
     * Return metrics for organization&#39;s top 10 devices sorted by data usage over given time range
     *
     * Return metrics for organization&#39;s top 10 devices sorted by data usage over given time range. Default unit is megabytes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationSummaryTopDevicesByUsageTest() throws ApiException {
        String organizationId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        List<GetOrganizationSummaryTopDevicesByUsage200ResponseInner> response = api.getOrganizationSummaryTopDevicesByUsage(organizationId, t0, t1, timespan);
        // TODO: test validations
    }

    /**
     * Return metrics for organization&#39;s top 10 device models sorted by data usage over given time range
     *
     * Return metrics for organization&#39;s top 10 device models sorted by data usage over given time range. Default unit is megabytes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationSummaryTopDevicesModelsByUsageTest() throws ApiException {
        String organizationId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        List<GetOrganizationSummaryTopDevicesModelsByUsage200ResponseInner> response = api.getOrganizationSummaryTopDevicesModelsByUsage(organizationId, t0, t1, timespan);
        // TODO: test validations
    }

    /**
     * Return metrics for organization&#39;s top 10 ssids by data usage over given time range
     *
     * Return metrics for organization&#39;s top 10 ssids by data usage over given time range. Default unit is megabytes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationSummaryTopSsidsByUsageTest() throws ApiException {
        String organizationId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        List<GetOrganizationSummaryTopSsidsByUsage200ResponseInner> response = api.getOrganizationSummaryTopSsidsByUsage(organizationId, t0, t1, timespan);
        // TODO: test validations
    }

    /**
     * Return metrics for organization&#39;s top 10 switches by energy usage over given time range
     *
     * Return metrics for organization&#39;s top 10 switches by energy usage over given time range. Default unit is joules.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationSummaryTopSwitchesByEnergyUsageTest() throws ApiException {
        String organizationId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        List<GetOrganizationSummaryTopSwitchesByEnergyUsage200ResponseInner> response = api.getOrganizationSummaryTopSwitchesByEnergyUsage(organizationId, t0, t1, timespan);
        // TODO: test validations
    }

    /**
     * List the uplink status of every Meraki MX, MG and Z series devices in the organization
     *
     * List the uplink status of every Meraki MX, MG and Z series devices in the organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationUplinksStatusesTest() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<String> networkIds = null;
        List<String> serials = null;
        List<String> iccids = null;
        List<GetOrganizationUplinksStatuses200ResponseInner> response = api.getOrganizationUplinksStatuses(organizationId, perPage, startingAfter, endingBefore, networkIds, serials, iccids);
        // TODO: test validations
    }

    /**
     * Return a list of alert types to be used with managing webhook alerts
     *
     * Return a list of alert types to be used with managing webhook alerts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationWebhooksAlertTypesTest() throws ApiException {
        String organizationId = null;
        String productType = null;
        List<Object> response = api.getOrganizationWebhooksAlertTypes(organizationId, productType);
        // TODO: test validations
    }

    /**
     * Return the log of webhook POSTs sent
     *
     * Return the log of webhook POSTs sent
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationWebhooksLogsTest() throws ApiException {
        String organizationId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        String url = null;
        List<GetOrganizationWebhooksLogs200ResponseInner> response = api.getOrganizationWebhooksLogs(organizationId, t0, t1, timespan, perPage, startingAfter, endingBefore, url);
        // TODO: test validations
    }

    /**
     * List the organizations that the user has privileges on
     *
     * List the organizations that the user has privileges on
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationsTest() throws ApiException {
        List<GetOrganizations200ResponseInner> response = api.getOrganizations();
        // TODO: test validations
    }

    /**
     * Move licenses to another organization
     *
     * Move licenses to another organization. This will also move any devices that the licenses are assigned to
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void moveOrganizationLicensesTest() throws ApiException {
        String organizationId = null;
        MoveOrganizationLicensesRequest moveOrganizationLicensesRequest = null;
        MoveOrganizationLicenses200Response response = api.moveOrganizationLicenses(organizationId, moveOrganizationLicensesRequest);
        // TODO: test validations
    }

    /**
     * Move SM seats to another organization
     *
     * Move SM seats to another organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void moveOrganizationLicensesSeatsTest() throws ApiException {
        String organizationId = null;
        MoveOrganizationLicensesSeatsRequest moveOrganizationLicensesSeatsRequest = null;
        MoveOrganizationLicensesSeats200Response response = api.moveOrganizationLicensesSeats(organizationId, moveOrganizationLicensesSeatsRequest);
        // TODO: test validations
    }

    /**
     * Release a list of claimed devices from an organization.
     *
     * Release a list of claimed devices from an organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void releaseFromOrganizationInventoryTest() throws ApiException {
        String organizationId = null;
        ReleaseFromOrganizationInventoryRequest releaseFromOrganizationInventoryRequest = null;
        Object response = api.releaseFromOrganizationInventory(organizationId, releaseFromOrganizationInventoryRequest);
        // TODO: test validations
    }

    /**
     * Renew SM seats of a license
     *
     * Renew SM seats of a license. This will extend the license expiration date of managed SM devices covered by this license
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void renewOrganizationLicensesSeatsTest() throws ApiException {
        String organizationId = null;
        RenewOrganizationLicensesSeatsRequest renewOrganizationLicensesSeatsRequest = null;
        AssignOrganizationLicensesSeats200Response response = api.renewOrganizationLicensesSeats(organizationId, renewOrganizationLicensesSeatsRequest);
        // TODO: test validations
    }

    /**
     * Update an organization
     *
     * Update an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationTest() throws ApiException {
        String organizationId = null;
        UpdateOrganizationRequest updateOrganizationRequest = null;
        GetOrganizations200ResponseInner response = api.updateOrganization(organizationId, updateOrganizationRequest);
        // TODO: test validations
    }

    /**
     * Update an action batch
     *
     * Update an action batch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationActionBatchTest() throws ApiException {
        String organizationId = null;
        String actionBatchId = null;
        UpdateOrganizationActionBatchRequest updateOrganizationActionBatchRequest = null;
        Object response = api.updateOrganizationActionBatch(organizationId, actionBatchId, updateOrganizationActionBatchRequest);
        // TODO: test validations
    }

    /**
     * Updates an adaptive policy ACL
     *
     * Updates an adaptive policy ACL
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationAdaptivePolicyAclTest() throws ApiException {
        String organizationId = null;
        String aclId = null;
        UpdateOrganizationAdaptivePolicyAclRequest updateOrganizationAdaptivePolicyAclRequest = null;
        Object response = api.updateOrganizationAdaptivePolicyAcl(organizationId, aclId, updateOrganizationAdaptivePolicyAclRequest);
        // TODO: test validations
    }

    /**
     * Updates an adaptive policy group
     *
     * Updates an adaptive policy group. If updating \&quot;Infrastructure\&quot;, only the SGT is allowed. Cannot update \&quot;Unknown\&quot;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationAdaptivePolicyGroupTest() throws ApiException {
        String organizationId = null;
        String id = null;
        UpdateOrganizationAdaptivePolicyGroupRequest updateOrganizationAdaptivePolicyGroupRequest = null;
        Object response = api.updateOrganizationAdaptivePolicyGroup(organizationId, id, updateOrganizationAdaptivePolicyGroupRequest);
        // TODO: test validations
    }

    /**
     * Update an Adaptive Policy
     *
     * Update an Adaptive Policy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationAdaptivePolicyPolicyTest() throws ApiException {
        String organizationId = null;
        String id = null;
        UpdateOrganizationAdaptivePolicyPolicyRequest updateOrganizationAdaptivePolicyPolicyRequest = null;
        Object response = api.updateOrganizationAdaptivePolicyPolicy(organizationId, id, updateOrganizationAdaptivePolicyPolicyRequest);
        // TODO: test validations
    }

    /**
     * Update global adaptive policy settings
     *
     * Update global adaptive policy settings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationAdaptivePolicySettingsTest() throws ApiException {
        String organizationId = null;
        UpdateOrganizationAdaptivePolicySettingsRequest updateOrganizationAdaptivePolicySettingsRequest = null;
        Object response = api.updateOrganizationAdaptivePolicySettings(organizationId, updateOrganizationAdaptivePolicySettingsRequest);
        // TODO: test validations
    }

    /**
     * Update an administrator
     *
     * Update an administrator
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationAdminTest() throws ApiException {
        String organizationId = null;
        String adminId = null;
        UpdateOrganizationAdminRequest updateOrganizationAdminRequest = null;
        Object response = api.updateOrganizationAdmin(organizationId, adminId, updateOrganizationAdminRequest);
        // TODO: test validations
    }

    /**
     * Update an organization-wide alert config
     *
     * Update an organization-wide alert config
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationAlertsProfileTest() throws ApiException {
        String organizationId = null;
        String alertConfigId = null;
        UpdateOrganizationAlertsProfileRequest updateOrganizationAlertsProfileRequest = null;
        Object response = api.updateOrganizationAlertsProfile(organizationId, alertConfigId, updateOrganizationAlertsProfileRequest);
        // TODO: test validations
    }

    /**
     * Update the priority ordering of an organization&#39;s branding policies.
     *
     * Update the priority ordering of an organization&#39;s branding policies.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationBrandingPoliciesPrioritiesTest() throws ApiException {
        String organizationId = null;
        UpdateOrganizationBrandingPoliciesPrioritiesRequest updateOrganizationBrandingPoliciesPrioritiesRequest = null;
        GetOrganizationBrandingPoliciesPriorities200Response response = api.updateOrganizationBrandingPoliciesPriorities(organizationId, updateOrganizationBrandingPoliciesPrioritiesRequest);
        // TODO: test validations
    }

    /**
     * Update a branding policy
     *
     * Update a branding policy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationBrandingPolicyTest() throws ApiException {
        String organizationId = null;
        String brandingPolicyId = null;
        UpdateOrganizationBrandingPolicyRequest updateOrganizationBrandingPolicyRequest = null;
        GetOrganizationBrandingPolicies200ResponseInner response = api.updateOrganizationBrandingPolicy(organizationId, brandingPolicyId, updateOrganizationBrandingPolicyRequest);
        // TODO: test validations
    }

    /**
     * Update a configuration template
     *
     * Update a configuration template
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationConfigTemplateTest() throws ApiException {
        String organizationId = null;
        String configTemplateId = null;
        UpdateOrganizationConfigTemplateRequest updateOrganizationConfigTemplateRequest = null;
        Object response = api.updateOrganizationConfigTemplate(organizationId, configTemplateId, updateOrganizationConfigTemplateRequest);
        // TODO: test validations
    }

    /**
     * Update an early access feature opt-in for an organization
     *
     * Update an early access feature opt-in for an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationEarlyAccessFeaturesOptInTest() throws ApiException {
        String organizationId = null;
        String optInId = null;
        UpdateOrganizationEarlyAccessFeaturesOptInRequest updateOrganizationEarlyAccessFeaturesOptInRequest = null;
        Object response = api.updateOrganizationEarlyAccessFeaturesOptIn(organizationId, optInId, updateOrganizationEarlyAccessFeaturesOptInRequest);
        // TODO: test validations
    }

    /**
     * Update a license
     *
     * Update a license
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationLicenseTest() throws ApiException {
        String organizationId = null;
        String licenseId = null;
        UpdateOrganizationLicenseRequest updateOrganizationLicenseRequest = null;
        GetOrganizationLicenses200ResponseInner response = api.updateOrganizationLicense(organizationId, licenseId, updateOrganizationLicenseRequest);
        // TODO: test validations
    }

    /**
     * Update the login security settings for an organization
     *
     * Update the login security settings for an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationLoginSecurityTest() throws ApiException {
        String organizationId = null;
        UpdateOrganizationLoginSecurityRequest updateOrganizationLoginSecurityRequest = null;
        GetOrganizationLoginSecurity200Response response = api.updateOrganizationLoginSecurity(organizationId, updateOrganizationLoginSecurityRequest);
        // TODO: test validations
    }

    /**
     * Updates a Policy Object.
     *
     * Updates a Policy Object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationPolicyObjectTest() throws ApiException {
        String organizationId = null;
        String policyObjectId = null;
        UpdateOrganizationPolicyObjectRequest updateOrganizationPolicyObjectRequest = null;
        Object response = api.updateOrganizationPolicyObject(organizationId, policyObjectId, updateOrganizationPolicyObjectRequest);
        // TODO: test validations
    }

    /**
     * Updates a Policy Object Group.
     *
     * Updates a Policy Object Group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationPolicyObjectsGroupTest() throws ApiException {
        String organizationId = null;
        String policyObjectGroupId = null;
        UpdateOrganizationPolicyObjectsGroupRequest updateOrganizationPolicyObjectsGroupRequest = null;
        Object response = api.updateOrganizationPolicyObjectsGroup(organizationId, policyObjectGroupId, updateOrganizationPolicyObjectsGroupRequest);
        // TODO: test validations
    }

    /**
     * Updates the SAML SSO enabled settings for an organization.
     *
     * Updates the SAML SSO enabled settings for an organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationSamlTest() throws ApiException {
        String organizationId = null;
        UpdateOrganizationSamlRequest updateOrganizationSamlRequest = null;
        GetOrganizationSaml200Response response = api.updateOrganizationSaml(organizationId, updateOrganizationSamlRequest);
        // TODO: test validations
    }

    /**
     * Update a SAML IdP in your organization
     *
     * Update a SAML IdP in your organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationSamlIdpTest() throws ApiException {
        String organizationId = null;
        String idpId = null;
        UpdateOrganizationSamlIdpRequest updateOrganizationSamlIdpRequest = null;
        List<GetOrganizationSamlIdps200ResponseInner> response = api.updateOrganizationSamlIdp(organizationId, idpId, updateOrganizationSamlIdpRequest);
        // TODO: test validations
    }

    /**
     * Update a SAML role
     *
     * Update a SAML role
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationSamlRoleTest() throws ApiException {
        String organizationId = null;
        String samlRoleId = null;
        UpdateOrganizationSamlRoleRequest updateOrganizationSamlRoleRequest = null;
        UpdateOrganizationSamlRole200Response response = api.updateOrganizationSamlRole(organizationId, samlRoleId, updateOrganizationSamlRoleRequest);
        // TODO: test validations
    }

    /**
     * Update the SNMP settings for an organization
     *
     * Update the SNMP settings for an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationSnmpTest() throws ApiException {
        String organizationId = null;
        UpdateOrganizationSnmpRequest updateOrganizationSnmpRequest = null;
        Object response = api.updateOrganizationSnmp(organizationId, updateOrganizationSnmpRequest);
        // TODO: test validations
    }

}
