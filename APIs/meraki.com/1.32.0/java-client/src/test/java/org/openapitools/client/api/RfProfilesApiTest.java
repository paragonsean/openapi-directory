/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateNetworkWirelessRfProfile201Response;
import org.openapitools.client.model.CreateNetworkWirelessRfProfileRequest;
import org.openapitools.client.model.UpdateNetworkWirelessRfProfileRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RfProfilesApi
 */
@Disabled
public class RfProfilesApiTest {

    private final RfProfilesApi api = new RfProfilesApi();

    /**
     * Creates new RF profile for this network
     *
     * Creates new RF profile for this network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkWirelessRfProfile_1Test() throws ApiException {
        String networkId = null;
        CreateNetworkWirelessRfProfileRequest createNetworkWirelessRfProfileRequest = null;
        CreateNetworkWirelessRfProfile201Response response = api.createNetworkWirelessRfProfile_1(networkId, createNetworkWirelessRfProfileRequest);
        // TODO: test validations
    }

    /**
     * Delete a RF Profile
     *
     * Delete a RF Profile
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkWirelessRfProfile_1Test() throws ApiException {
        String networkId = null;
        String rfProfileId = null;
        api.deleteNetworkWirelessRfProfile_1(networkId, rfProfileId);
        // TODO: test validations
    }

    /**
     * Return a RF profile
     *
     * Return a RF profile
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessRfProfile_1Test() throws ApiException {
        String networkId = null;
        String rfProfileId = null;
        Object response = api.getNetworkWirelessRfProfile_1(networkId, rfProfileId);
        // TODO: test validations
    }

    /**
     * List the non-basic RF profiles for this network
     *
     * List the non-basic RF profiles for this network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessRfProfiles_1Test() throws ApiException {
        String networkId = null;
        Boolean includeTemplateProfiles = null;
        List<Object> response = api.getNetworkWirelessRfProfiles_1(networkId, includeTemplateProfiles);
        // TODO: test validations
    }

    /**
     * Updates specified RF profile for this network
     *
     * Updates specified RF profile for this network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkWirelessRfProfile_1Test() throws ApiException {
        String networkId = null;
        String rfProfileId = null;
        UpdateNetworkWirelessRfProfileRequest updateNetworkWirelessRfProfileRequest = null;
        CreateNetworkWirelessRfProfile201Response response = api.updateNetworkWirelessRfProfile_1(networkId, rfProfileId, updateNetworkWirelessRfProfileRequest);
        // TODO: test validations
    }

}
