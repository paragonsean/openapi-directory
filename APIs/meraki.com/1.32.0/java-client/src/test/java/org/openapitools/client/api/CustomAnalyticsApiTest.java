/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateOrganizationCameraCustomAnalyticsArtifactRequest;
import org.openapitools.client.model.UpdateDeviceCameraCustomAnalyticsRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CustomAnalyticsApi
 */
@Disabled
public class CustomAnalyticsApiTest {

    private final CustomAnalyticsApi api = new CustomAnalyticsApi();

    /**
     * Create custom analytics artifact
     *
     * Create custom analytics artifact. Returns an artifact upload URL with expiry time. Upload the artifact file with a put request to the returned upload URL before its expiry.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationCameraCustomAnalyticsArtifact_1Test() throws ApiException {
        String organizationId = null;
        CreateOrganizationCameraCustomAnalyticsArtifactRequest createOrganizationCameraCustomAnalyticsArtifactRequest = null;
        Object response = api.createOrganizationCameraCustomAnalyticsArtifact_1(organizationId, createOrganizationCameraCustomAnalyticsArtifactRequest);
        // TODO: test validations
    }

    /**
     * Delete Custom Analytics Artifact
     *
     * Delete Custom Analytics Artifact
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganizationCameraCustomAnalyticsArtifact_1Test() throws ApiException {
        String organizationId = null;
        String artifactId = null;
        api.deleteOrganizationCameraCustomAnalyticsArtifact_1(organizationId, artifactId);
        // TODO: test validations
    }

    /**
     * Return custom analytics settings for a camera
     *
     * Return custom analytics settings for a camera
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceCameraCustomAnalytics_1Test() throws ApiException {
        String serial = null;
        Object response = api.getDeviceCameraCustomAnalytics_1(serial);
        // TODO: test validations
    }

    /**
     * Get Custom Analytics Artifact
     *
     * Get Custom Analytics Artifact
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationCameraCustomAnalyticsArtifact_1Test() throws ApiException {
        String organizationId = null;
        String artifactId = null;
        Object response = api.getOrganizationCameraCustomAnalyticsArtifact_1(organizationId, artifactId);
        // TODO: test validations
    }

    /**
     * List Custom Analytics Artifacts
     *
     * List Custom Analytics Artifacts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationCameraCustomAnalyticsArtifacts_1Test() throws ApiException {
        String organizationId = null;
        List<Object> response = api.getOrganizationCameraCustomAnalyticsArtifacts_1(organizationId);
        // TODO: test validations
    }

    /**
     * Update custom analytics settings for a camera
     *
     * Update custom analytics settings for a camera
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeviceCameraCustomAnalytics_1Test() throws ApiException {
        String serial = null;
        UpdateDeviceCameraCustomAnalyticsRequest updateDeviceCameraCustomAnalyticsRequest = null;
        Object response = api.updateDeviceCameraCustomAnalytics_1(serial, updateDeviceCameraCustomAnalyticsRequest);
        // TODO: test validations
    }

}
