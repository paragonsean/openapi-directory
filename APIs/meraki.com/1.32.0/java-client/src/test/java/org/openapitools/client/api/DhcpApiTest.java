/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GetNetworkCellularGatewayDhcp200Response;
import org.openapitools.client.model.GetNetworkSwitchDhcpV4ServersSeen200ResponseInner;
import org.openapitools.client.model.UpdateDeviceSwitchRoutingInterfaceDhcpRequest;
import org.openapitools.client.model.UpdateNetworkCellularGatewayDhcpRequest;
import org.openapitools.client.model.UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DhcpApi
 */
@Disabled
public class DhcpApiTest {

    private final DhcpApi api = new DhcpApi();

    /**
     * Return the DHCP subnet information for an appliance
     *
     * Return the DHCP subnet information for an appliance
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceApplianceDhcpSubnets_1Test() throws ApiException {
        String serial = null;
        List<Object> response = api.getDeviceApplianceDhcpSubnets_1(serial);
        // TODO: test validations
    }

    /**
     * Return a layer 3 interface DHCP configuration for a switch
     *
     * Return a layer 3 interface DHCP configuration for a switch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceSwitchRoutingInterfaceDhcp_3Test() throws ApiException {
        String serial = null;
        String interfaceId = null;
        Object response = api.getDeviceSwitchRoutingInterfaceDhcp_3(serial, interfaceId);
        // TODO: test validations
    }

    /**
     * List common DHCP settings of MGs
     *
     * List common DHCP settings of MGs
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkCellularGatewayDhcp_1Test() throws ApiException {
        String networkId = null;
        GetNetworkCellularGatewayDhcp200Response response = api.getNetworkCellularGatewayDhcp_1(networkId);
        // TODO: test validations
    }

    /**
     * Return the network&#39;s DHCPv4 servers seen within the selected timeframe (default 1 day)
     *
     * Return the network&#39;s DHCPv4 servers seen within the selected timeframe (default 1 day)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchDhcpV4ServersSeen_1Test() throws ApiException {
        String networkId = null;
        String t0 = null;
        Float timespan = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<GetNetworkSwitchDhcpV4ServersSeen200ResponseInner> response = api.getNetworkSwitchDhcpV4ServersSeen_1(networkId, t0, timespan, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * Return a layer 3 interface DHCP configuration for a switch stack
     *
     * Return a layer 3 interface DHCP configuration for a switch stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchStackRoutingInterfaceDhcp_4Test() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        String interfaceId = null;
        Object response = api.getNetworkSwitchStackRoutingInterfaceDhcp_4(networkId, switchStackId, interfaceId);
        // TODO: test validations
    }

    /**
     * Update a layer 3 interface DHCP configuration for a switch
     *
     * Update a layer 3 interface DHCP configuration for a switch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeviceSwitchRoutingInterfaceDhcp_3Test() throws ApiException {
        String serial = null;
        String interfaceId = null;
        UpdateDeviceSwitchRoutingInterfaceDhcpRequest updateDeviceSwitchRoutingInterfaceDhcpRequest = null;
        Object response = api.updateDeviceSwitchRoutingInterfaceDhcp_3(serial, interfaceId, updateDeviceSwitchRoutingInterfaceDhcpRequest);
        // TODO: test validations
    }

    /**
     * Update common DHCP settings of MGs
     *
     * Update common DHCP settings of MGs
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkCellularGatewayDhcp_1Test() throws ApiException {
        String networkId = null;
        UpdateNetworkCellularGatewayDhcpRequest updateNetworkCellularGatewayDhcpRequest = null;
        GetNetworkCellularGatewayDhcp200Response response = api.updateNetworkCellularGatewayDhcp_1(networkId, updateNetworkCellularGatewayDhcpRequest);
        // TODO: test validations
    }

    /**
     * Update a layer 3 interface DHCP configuration for a switch stack
     *
     * Update a layer 3 interface DHCP configuration for a switch stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSwitchStackRoutingInterfaceDhcp_4Test() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        String interfaceId = null;
        UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest updateNetworkSwitchStackRoutingInterfaceDhcpRequest = null;
        Object response = api.updateNetworkSwitchStackRoutingInterfaceDhcp_4(networkId, switchStackId, interfaceId, updateNetworkSwitchStackRoutingInterfaceDhcpRequest);
        // TODO: test validations
    }

}
