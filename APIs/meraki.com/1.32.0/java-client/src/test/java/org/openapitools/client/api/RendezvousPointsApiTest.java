/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateNetworkSwitchRoutingMulticastRendezvousPointRequest;
import org.openapitools.client.model.UpdateNetworkSwitchRoutingMulticastRendezvousPointRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RendezvousPointsApi
 */
@Disabled
public class RendezvousPointsApiTest {

    private final RendezvousPointsApi api = new RendezvousPointsApi();

    /**
     * Create a multicast rendezvous point
     *
     * Create a multicast rendezvous point
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkSwitchRoutingMulticastRendezvousPoint_3Test() throws ApiException {
        String networkId = null;
        CreateNetworkSwitchRoutingMulticastRendezvousPointRequest createNetworkSwitchRoutingMulticastRendezvousPointRequest = null;
        Object response = api.createNetworkSwitchRoutingMulticastRendezvousPoint_3(networkId, createNetworkSwitchRoutingMulticastRendezvousPointRequest);
        // TODO: test validations
    }

    /**
     * Delete a multicast rendezvous point
     *
     * Delete a multicast rendezvous point
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkSwitchRoutingMulticastRendezvousPoint_3Test() throws ApiException {
        String networkId = null;
        String rendezvousPointId = null;
        api.deleteNetworkSwitchRoutingMulticastRendezvousPoint_3(networkId, rendezvousPointId);
        // TODO: test validations
    }

    /**
     * Return a multicast rendezvous point
     *
     * Return a multicast rendezvous point
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchRoutingMulticastRendezvousPoint_3Test() throws ApiException {
        String networkId = null;
        String rendezvousPointId = null;
        Object response = api.getNetworkSwitchRoutingMulticastRendezvousPoint_3(networkId, rendezvousPointId);
        // TODO: test validations
    }

    /**
     * List multicast rendezvous points
     *
     * List multicast rendezvous points
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchRoutingMulticastRendezvousPoints_3Test() throws ApiException {
        String networkId = null;
        List<List<Object>> response = api.getNetworkSwitchRoutingMulticastRendezvousPoints_3(networkId);
        // TODO: test validations
    }

    /**
     * Update a multicast rendezvous point
     *
     * Update a multicast rendezvous point
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSwitchRoutingMulticastRendezvousPoint_3Test() throws ApiException {
        String networkId = null;
        String rendezvousPointId = null;
        UpdateNetworkSwitchRoutingMulticastRendezvousPointRequest updateNetworkSwitchRoutingMulticastRendezvousPointRequest = null;
        Object response = api.updateNetworkSwitchRoutingMulticastRendezvousPoint_3(networkId, rendezvousPointId, updateNetworkSwitchRoutingMulticastRendezvousPointRequest);
        // TODO: test validations
    }

}
