/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BlinkDeviceLedsRequest;
import org.openapitools.client.model.CheckinNetworkSmDevices200Response;
import org.openapitools.client.model.CheckinNetworkSmDevicesRequest;
import org.openapitools.client.model.ClaimNetworkDevicesRequest;
import org.openapitools.client.model.CloneOrganizationSwitchDevicesRequest;
import org.openapitools.client.model.CreateDeviceLiveToolsPing201Response;
import org.openapitools.client.model.CreateDeviceLiveToolsPingDeviceRequest;
import org.openapitools.client.model.CreateDeviceLiveToolsPingRequest;
import org.openapitools.client.model.GetDeviceLiveToolsPing200Response;
import org.openapitools.client.model.GetDeviceWirelessConnectionStats200Response;
import org.openapitools.client.model.GetNetworkSmDeviceCellularUsageHistory200ResponseInner;
import org.openapitools.client.model.GetNetworkSmDeviceCerts200ResponseInner;
import org.openapitools.client.model.GetNetworkSmDeviceConnectivity200ResponseInner;
import org.openapitools.client.model.GetNetworkSmDeviceDesktopLogs200ResponseInner;
import org.openapitools.client.model.GetNetworkSmDeviceDeviceCommandLogs200ResponseInner;
import org.openapitools.client.model.GetNetworkSmDeviceDeviceProfiles200ResponseInner;
import org.openapitools.client.model.GetNetworkSmDeviceNetworkAdapters200ResponseInner;
import org.openapitools.client.model.GetNetworkSmDevicePerformanceHistory200ResponseInner;
import org.openapitools.client.model.GetNetworkSmDeviceSecurityCenters200ResponseInner;
import org.openapitools.client.model.GetNetworkSmDeviceSoftwares200ResponseInner;
import org.openapitools.client.model.GetNetworkSmDeviceWlanLists200ResponseInner;
import org.openapitools.client.model.GetNetworkSmDevices200ResponseInner;
import org.openapitools.client.model.GetOrganizationDevices200ResponseInner;
import org.openapitools.client.model.GetOrganizationDevicesAvailabilities200ResponseInner;
import org.openapitools.client.model.GetOrganizationDevicesPowerModulesStatusesByDevice200ResponseInner;
import org.openapitools.client.model.GetOrganizationDevicesStatuses200Response;
import org.openapitools.client.model.GetOrganizationDevicesStatusesOverview200Response;
import org.openapitools.client.model.GetOrganizationDevicesUplinksAddressesByDevice200ResponseInner;
import org.openapitools.client.model.GetOrganizationDevicesUplinksLossAndLatency200ResponseInner;
import org.openapitools.client.model.GetOrganizationInventoryDevices200ResponseInner;
import org.openapitools.client.model.GetOrganizationSummaryTopDevicesByUsage200ResponseInner;
import org.openapitools.client.model.GetOrganizationSummaryTopDevicesModelsByUsage200ResponseInner;
import org.openapitools.client.model.GetOrganizationWirelessDevicesEthernetStatuses200ResponseInner;
import org.openapitools.client.model.LockNetworkSmDevicesRequest;
import org.openapitools.client.model.ModifyNetworkSmDevicesTags200ResponseInner;
import org.openapitools.client.model.ModifyNetworkSmDevicesTagsRequest;
import org.openapitools.client.model.MoveNetworkSmDevices200Response;
import org.openapitools.client.model.MoveNetworkSmDevicesRequest;
import org.openapitools.client.model.RemoveNetworkDevicesRequest;
import org.openapitools.client.model.UpdateDeviceCellularSimsRequest;
import org.openapitools.client.model.UpdateDeviceManagementInterfaceRequest;
import org.openapitools.client.model.UpdateDeviceRequest;
import org.openapitools.client.model.UpdateNetworkSmDevicesFields200ResponseInner;
import org.openapitools.client.model.UpdateNetworkSmDevicesFieldsRequest;
import org.openapitools.client.model.VmxNetworkDevicesClaimRequest;
import org.openapitools.client.model.WipeNetworkSmDevices200Response;
import org.openapitools.client.model.WipeNetworkSmDevicesRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DevicesApi
 */
@Disabled
public class DevicesApiTest {

    private final DevicesApi api = new DevicesApi();

    /**
     * Blink the LEDs on a device
     *
     * Blink the LEDs on a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void blinkDeviceLedsTest() throws ApiException {
        String serial = null;
        BlinkDeviceLedsRequest blinkDeviceLedsRequest = null;
        Object response = api.blinkDeviceLeds(serial, blinkDeviceLedsRequest);
        // TODO: test validations
    }

    /**
     * Force check-in a set of devices
     *
     * Force check-in a set of devices
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkinNetworkSmDevices_1Test() throws ApiException {
        String networkId = null;
        CheckinNetworkSmDevicesRequest checkinNetworkSmDevicesRequest = null;
        CheckinNetworkSmDevices200Response response = api.checkinNetworkSmDevices_1(networkId, checkinNetworkSmDevicesRequest);
        // TODO: test validations
    }

    /**
     * Claim devices into a network. (Note: for recently claimed devices, it may take a few minutes for API requsts against that device to succeed)
     *
     * Claim devices into a network. (Note: for recently claimed devices, it may take a few minutes for API requsts against that device to succeed)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void claimNetworkDevices_1Test() throws ApiException {
        String networkId = null;
        ClaimNetworkDevicesRequest claimNetworkDevicesRequest = null;
        api.claimNetworkDevices_1(networkId, claimNetworkDevicesRequest);
        // TODO: test validations
    }

    /**
     * Clone port-level and some switch-level configuration settings from a source switch to one or more target switches
     *
     * Clone port-level and some switch-level configuration settings from a source switch to one or more target switches. Cloned settings include: Aggregation Groups, Power Settings, Multicast Settings, MTU Configuration, STP Bridge priority, Port Mirroring
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloneOrganizationSwitchDevices_1Test() throws ApiException {
        String organizationId = null;
        CloneOrganizationSwitchDevicesRequest cloneOrganizationSwitchDevicesRequest = null;
        Object response = api.cloneOrganizationSwitchDevices_1(organizationId, cloneOrganizationSwitchDevicesRequest);
        // TODO: test validations
    }

    /**
     * Enqueue a job to ping a target host from the device
     *
     * Enqueue a job to ping a target host from the device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDeviceLiveToolsPingTest() throws ApiException {
        String serial = null;
        CreateDeviceLiveToolsPingRequest createDeviceLiveToolsPingRequest = null;
        CreateDeviceLiveToolsPing201Response response = api.createDeviceLiveToolsPing(serial, createDeviceLiveToolsPingRequest);
        // TODO: test validations
    }

    /**
     * Enqueue a job to check connectivity status to the device
     *
     * Enqueue a job to check connectivity status to the device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDeviceLiveToolsPingDeviceTest() throws ApiException {
        String serial = null;
        CreateDeviceLiveToolsPingDeviceRequest createDeviceLiveToolsPingDeviceRequest = null;
        CreateDeviceLiveToolsPing201Response response = api.createDeviceLiveToolsPingDevice(serial, createDeviceLiveToolsPingDeviceRequest);
        // TODO: test validations
    }

    /**
     * Return a single device
     *
     * Return a single device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceTest() throws ApiException {
        String serial = null;
        Object response = api.getDevice(serial);
        // TODO: test validations
    }

    /**
     * Return the SIM and APN configurations for a cellular device.
     *
     * Return the SIM and APN configurations for a cellular device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceCellularSimsTest() throws ApiException {
        String serial = null;
        Object response = api.getDeviceCellularSims(serial);
        // TODO: test validations
    }

    /**
     * List the clients of a device, up to a maximum of a month ago
     *
     * List the clients of a device, up to a maximum of a month ago. The usage of each client is returned in kilobytes. If the device is a switch, the switchport is returned; otherwise the switchport field is null.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceClientsTest() throws ApiException {
        String serial = null;
        String t0 = null;
        Float timespan = null;
        List<Object> response = api.getDeviceClients(serial, t0, timespan);
        // TODO: test validations
    }

    /**
     * Return a ping job
     *
     * Return a ping job. Latency unit in response is in milliseconds. Size is in bytes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceLiveToolsPingTest() throws ApiException {
        String serial = null;
        String id = null;
        GetDeviceLiveToolsPing200Response response = api.getDeviceLiveToolsPing(serial, id);
        // TODO: test validations
    }

    /**
     * Return a ping device job
     *
     * Return a ping device job. Latency unit in response is in milliseconds. Size is in bytes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceLiveToolsPingDeviceTest() throws ApiException {
        String serial = null;
        String id = null;
        GetDeviceLiveToolsPing200Response response = api.getDeviceLiveToolsPingDevice(serial, id);
        // TODO: test validations
    }

    /**
     * List LLDP and CDP information for a device
     *
     * List LLDP and CDP information for a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceLldpCdpTest() throws ApiException {
        String serial = null;
        Object response = api.getDeviceLldpCdp(serial);
        // TODO: test validations
    }

    /**
     * Get the uplink loss percentage and latency in milliseconds, and goodput in kilobits per second for a wired network device.
     *
     * Get the uplink loss percentage and latency in milliseconds, and goodput in kilobits per second for a wired network device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceLossAndLatencyHistoryTest() throws ApiException {
        String serial = null;
        String ip = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        Integer resolution = null;
        String uplink = null;
        List<Object> response = api.getDeviceLossAndLatencyHistory(serial, ip, t0, t1, timespan, resolution, uplink);
        // TODO: test validations
    }

    /**
     * Return the management interface settings for a device
     *
     * Return the management interface settings for a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceManagementInterfaceTest() throws ApiException {
        String serial = null;
        Object response = api.getDeviceManagementInterface(serial);
        // TODO: test validations
    }

    /**
     * List the devices in a network
     *
     * List the devices in a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkDevices_1Test() throws ApiException {
        String networkId = null;
        List<Object> response = api.getNetworkDevices_1(networkId);
        // TODO: test validations
    }

    /**
     * Return the client&#39;s daily cellular data usage history
     *
     * Return the client&#39;s daily cellular data usage history. Usage data is in kilobytes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmDeviceCellularUsageHistory_1Test() throws ApiException {
        String networkId = null;
        String deviceId = null;
        List<GetNetworkSmDeviceCellularUsageHistory200ResponseInner> response = api.getNetworkSmDeviceCellularUsageHistory_1(networkId, deviceId);
        // TODO: test validations
    }

    /**
     * List the certs on a device
     *
     * List the certs on a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmDeviceCerts_1Test() throws ApiException {
        String networkId = null;
        String deviceId = null;
        List<GetNetworkSmDeviceCerts200ResponseInner> response = api.getNetworkSmDeviceCerts_1(networkId, deviceId);
        // TODO: test validations
    }

    /**
     * Returns historical connectivity data (whether a device is regularly checking in to Dashboard).
     *
     * Returns historical connectivity data (whether a device is regularly checking in to Dashboard).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmDeviceConnectivity_1Test() throws ApiException {
        String networkId = null;
        String deviceId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<GetNetworkSmDeviceConnectivity200ResponseInner> response = api.getNetworkSmDeviceConnectivity_1(networkId, deviceId, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * Return historical records of various Systems Manager network connection details for desktop devices.
     *
     * Return historical records of various Systems Manager network connection details for desktop devices.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmDeviceDesktopLogs_1Test() throws ApiException {
        String networkId = null;
        String deviceId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<GetNetworkSmDeviceDesktopLogs200ResponseInner> response = api.getNetworkSmDeviceDesktopLogs_1(networkId, deviceId, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * Return historical records of commands sent to Systems Manager devices
     *
     * Return historical records of commands sent to Systems Manager devices. Note that this will include the name of the Dashboard user who initiated the command if it was generated by a Dashboard admin rather than the automatic behavior of the system; you may wish to filter this out of any reports.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmDeviceDeviceCommandLogs_1Test() throws ApiException {
        String networkId = null;
        String deviceId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<GetNetworkSmDeviceDeviceCommandLogs200ResponseInner> response = api.getNetworkSmDeviceDeviceCommandLogs_1(networkId, deviceId, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * Get the installed profiles associated with a device
     *
     * Get the installed profiles associated with a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmDeviceDeviceProfiles_1Test() throws ApiException {
        String networkId = null;
        String deviceId = null;
        List<GetNetworkSmDeviceDeviceProfiles200ResponseInner> response = api.getNetworkSmDeviceDeviceProfiles_1(networkId, deviceId);
        // TODO: test validations
    }

    /**
     * List the network adapters of a device
     *
     * List the network adapters of a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmDeviceNetworkAdapters_1Test() throws ApiException {
        String networkId = null;
        String deviceId = null;
        List<GetNetworkSmDeviceNetworkAdapters200ResponseInner> response = api.getNetworkSmDeviceNetworkAdapters_1(networkId, deviceId);
        // TODO: test validations
    }

    /**
     * Return historical records of various Systems Manager client metrics for desktop devices.
     *
     * Return historical records of various Systems Manager client metrics for desktop devices.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmDevicePerformanceHistory_1Test() throws ApiException {
        String networkId = null;
        String deviceId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<GetNetworkSmDevicePerformanceHistory200ResponseInner> response = api.getNetworkSmDevicePerformanceHistory_1(networkId, deviceId, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * List the restrictions on a device
     *
     * List the restrictions on a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmDeviceRestrictions_1Test() throws ApiException {
        String networkId = null;
        String deviceId = null;
        List<Object> response = api.getNetworkSmDeviceRestrictions_1(networkId, deviceId);
        // TODO: test validations
    }

    /**
     * List the security centers on a device
     *
     * List the security centers on a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmDeviceSecurityCenters_1Test() throws ApiException {
        String networkId = null;
        String deviceId = null;
        List<GetNetworkSmDeviceSecurityCenters200ResponseInner> response = api.getNetworkSmDeviceSecurityCenters_1(networkId, deviceId);
        // TODO: test validations
    }

    /**
     * Get a list of softwares associated with a device
     *
     * Get a list of softwares associated with a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmDeviceSoftwares_1Test() throws ApiException {
        String networkId = null;
        String deviceId = null;
        List<GetNetworkSmDeviceSoftwares200ResponseInner> response = api.getNetworkSmDeviceSoftwares_1(networkId, deviceId);
        // TODO: test validations
    }

    /**
     * List the saved SSID names on a device
     *
     * List the saved SSID names on a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmDeviceWlanLists_1Test() throws ApiException {
        String networkId = null;
        String deviceId = null;
        List<GetNetworkSmDeviceWlanLists200ResponseInner> response = api.getNetworkSmDeviceWlanLists_1(networkId, deviceId);
        // TODO: test validations
    }

    /**
     * List the devices enrolled in an SM network with various specified fields and filters
     *
     * List the devices enrolled in an SM network with various specified fields and filters
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmDevices_1Test() throws ApiException {
        String networkId = null;
        List<String> fields = null;
        List<String> wifiMacs = null;
        List<String> serials = null;
        List<String> ids = null;
        List<String> scope = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<GetNetworkSmDevices200ResponseInner> response = api.getNetworkSmDevices_1(networkId, fields, wifiMacs, serials, ids, scope, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * Aggregated connectivity info for this network, grouped by node
     *
     * Aggregated connectivity info for this network, grouped by node
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessDevicesConnectionStats_1Test() throws ApiException {
        String networkId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        String band = null;
        Integer ssid = null;
        Integer vlan = null;
        String apTag = null;
        List<GetDeviceWirelessConnectionStats200Response> response = api.getNetworkWirelessDevicesConnectionStats_1(networkId, t0, t1, timespan, band, ssid, vlan, apTag);
        // TODO: test validations
    }

    /**
     * Aggregated latency info for this network, grouped by node
     *
     * Aggregated latency info for this network, grouped by node
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessDevicesLatencyStats_1Test() throws ApiException {
        String networkId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        String band = null;
        Integer ssid = null;
        Integer vlan = null;
        String apTag = null;
        String fields = null;
        List<Object> response = api.getNetworkWirelessDevicesLatencyStats_1(networkId, t0, t1, timespan, band, ssid, vlan, apTag, fields);
        // TODO: test validations
    }

    /**
     * List the availability information for devices in an organization
     *
     * List the availability information for devices in an organization. The data returned by this endpoint is updated every 5 minutes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationDevicesAvailabilities_1Test() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<String> networkIds = null;
        List<String> productTypes = null;
        List<String> serials = null;
        List<String> tags = null;
        String tagsFilterType = null;
        List<GetOrganizationDevicesAvailabilities200ResponseInner> response = api.getOrganizationDevicesAvailabilities_1(organizationId, perPage, startingAfter, endingBefore, networkIds, productTypes, serials, tags, tagsFilterType);
        // TODO: test validations
    }

    /**
     * List the power status information for devices in an organization
     *
     * List the power status information for devices in an organization. The data returned by this endpoint is updated every 5 minutes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationDevicesPowerModulesStatusesByDevice_1Test() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<String> networkIds = null;
        List<String> productTypes = null;
        List<String> serials = null;
        List<String> tags = null;
        String tagsFilterType = null;
        List<GetOrganizationDevicesPowerModulesStatusesByDevice200ResponseInner> response = api.getOrganizationDevicesPowerModulesStatusesByDevice_1(organizationId, perPage, startingAfter, endingBefore, networkIds, productTypes, serials, tags, tagsFilterType);
        // TODO: test validations
    }

    /**
     * Return an overview of current device statuses
     *
     * Return an overview of current device statuses
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationDevicesStatusesOverview_1Test() throws ApiException {
        String organizationId = null;
        List<String> productTypes = null;
        List<String> networkIds = null;
        GetOrganizationDevicesStatusesOverview200Response response = api.getOrganizationDevicesStatusesOverview_1(organizationId, productTypes, networkIds);
        // TODO: test validations
    }

    /**
     * List the status of every Meraki device in the organization
     *
     * List the status of every Meraki device in the organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationDevicesStatuses_1Test() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<String> networkIds = null;
        List<String> serials = null;
        List<String> statuses = null;
        List<String> productTypes = null;
        List<String> models = null;
        List<String> tags = null;
        String tagsFilterType = null;
        GetOrganizationDevicesStatuses200Response response = api.getOrganizationDevicesStatuses_1(organizationId, perPage, startingAfter, endingBefore, networkIds, serials, statuses, productTypes, models, tags, tagsFilterType);
        // TODO: test validations
    }

    /**
     * List the current uplink addresses for devices in an organization.
     *
     * List the current uplink addresses for devices in an organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationDevicesUplinksAddressesByDevice_1Test() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<String> networkIds = null;
        List<String> productTypes = null;
        List<String> serials = null;
        List<String> tags = null;
        String tagsFilterType = null;
        List<GetOrganizationDevicesUplinksAddressesByDevice200ResponseInner> response = api.getOrganizationDevicesUplinksAddressesByDevice_1(organizationId, perPage, startingAfter, endingBefore, networkIds, productTypes, serials, tags, tagsFilterType);
        // TODO: test validations
    }

    /**
     * Return the uplink loss and latency for every MX in the organization from at latest 2 minutes ago
     *
     * Return the uplink loss and latency for every MX in the organization from at latest 2 minutes ago
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationDevicesUplinksLossAndLatency_1Test() throws ApiException {
        String organizationId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        String uplink = null;
        String ip = null;
        List<GetOrganizationDevicesUplinksLossAndLatency200ResponseInner> response = api.getOrganizationDevicesUplinksLossAndLatency_1(organizationId, t0, t1, timespan, uplink, ip);
        // TODO: test validations
    }

    /**
     * List the devices in an organization
     *
     * List the devices in an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationDevices_1Test() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        String configurationUpdatedAfter = null;
        List<String> networkIds = null;
        List<String> productTypes = null;
        List<String> tags = null;
        String tagsFilterType = null;
        String name = null;
        String mac = null;
        String serial = null;
        String model = null;
        List<String> macs = null;
        List<String> serials = null;
        List<String> sensorMetrics = null;
        List<String> sensorAlertProfileIds = null;
        List<String> models = null;
        List<GetOrganizationDevices200ResponseInner> response = api.getOrganizationDevices_1(organizationId, perPage, startingAfter, endingBefore, configurationUpdatedAfter, networkIds, productTypes, tags, tagsFilterType, name, mac, serial, model, macs, serials, sensorMetrics, sensorAlertProfileIds, models);
        // TODO: test validations
    }

    /**
     * Return a single device from the inventory of an organization
     *
     * Return a single device from the inventory of an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationInventoryDevice_2Test() throws ApiException {
        String organizationId = null;
        String serial = null;
        GetOrganizationInventoryDevices200ResponseInner response = api.getOrganizationInventoryDevice_2(organizationId, serial);
        // TODO: test validations
    }

    /**
     * Return the device inventory for an organization
     *
     * Return the device inventory for an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationInventoryDevices_2Test() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        String usedState = null;
        String search = null;
        List<String> macs = null;
        List<String> networkIds = null;
        List<String> serials = null;
        List<String> models = null;
        List<String> orderNumbers = null;
        List<String> tags = null;
        String tagsFilterType = null;
        List<String> productTypes = null;
        List<GetOrganizationInventoryDevices200ResponseInner> response = api.getOrganizationInventoryDevices_2(organizationId, perPage, startingAfter, endingBefore, usedState, search, macs, networkIds, serials, models, orderNumbers, tags, tagsFilterType, productTypes);
        // TODO: test validations
    }

    /**
     * Return metrics for organization&#39;s top 10 devices sorted by data usage over given time range
     *
     * Return metrics for organization&#39;s top 10 devices sorted by data usage over given time range. Default unit is megabytes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationSummaryTopDevicesByUsage_3Test() throws ApiException {
        String organizationId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        List<GetOrganizationSummaryTopDevicesByUsage200ResponseInner> response = api.getOrganizationSummaryTopDevicesByUsage_3(organizationId, t0, t1, timespan);
        // TODO: test validations
    }

    /**
     * Return metrics for organization&#39;s top 10 device models sorted by data usage over given time range
     *
     * Return metrics for organization&#39;s top 10 device models sorted by data usage over given time range. Default unit is megabytes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationSummaryTopDevicesModelsByUsage_3Test() throws ApiException {
        String organizationId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        List<GetOrganizationSummaryTopDevicesModelsByUsage200ResponseInner> response = api.getOrganizationSummaryTopDevicesModelsByUsage_3(organizationId, t0, t1, timespan);
        // TODO: test validations
    }

    /**
     * Endpoint to see power status for wireless devices
     *
     * Endpoint to see power status for wireless devices
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationWirelessDevicesEthernetStatuses_1Test() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<String> networkIds = null;
        List<GetOrganizationWirelessDevicesEthernetStatuses200ResponseInner> response = api.getOrganizationWirelessDevicesEthernetStatuses_1(organizationId, perPage, startingAfter, endingBefore, networkIds);
        // TODO: test validations
    }

    /**
     * Lock a set of devices
     *
     * Lock a set of devices
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void lockNetworkSmDevices_1Test() throws ApiException {
        String networkId = null;
        LockNetworkSmDevicesRequest lockNetworkSmDevicesRequest = null;
        CheckinNetworkSmDevices200Response response = api.lockNetworkSmDevices_1(networkId, lockNetworkSmDevicesRequest);
        // TODO: test validations
    }

    /**
     * Add, delete, or update the tags of a set of devices
     *
     * Add, delete, or update the tags of a set of devices
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyNetworkSmDevicesTags_1Test() throws ApiException {
        String networkId = null;
        ModifyNetworkSmDevicesTagsRequest modifyNetworkSmDevicesTagsRequest = null;
        List<ModifyNetworkSmDevicesTags200ResponseInner> response = api.modifyNetworkSmDevicesTags_1(networkId, modifyNetworkSmDevicesTagsRequest);
        // TODO: test validations
    }

    /**
     * Move a set of devices to a new network
     *
     * Move a set of devices to a new network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void moveNetworkSmDevices_1Test() throws ApiException {
        String networkId = null;
        MoveNetworkSmDevicesRequest moveNetworkSmDevicesRequest = null;
        MoveNetworkSmDevices200Response response = api.moveNetworkSmDevices_1(networkId, moveNetworkSmDevicesRequest);
        // TODO: test validations
    }

    /**
     * Reboot a device
     *
     * Reboot a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rebootDeviceTest() throws ApiException {
        String serial = null;
        Object response = api.rebootDevice(serial);
        // TODO: test validations
    }

    /**
     * Refresh the details of a device
     *
     * Refresh the details of a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void refreshNetworkSmDeviceDetails_1Test() throws ApiException {
        String networkId = null;
        String deviceId = null;
        api.refreshNetworkSmDeviceDetails_1(networkId, deviceId);
        // TODO: test validations
    }

    /**
     * Remove a single device
     *
     * Remove a single device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeNetworkDevices_1Test() throws ApiException {
        String networkId = null;
        RemoveNetworkDevicesRequest removeNetworkDevicesRequest = null;
        api.removeNetworkDevices_1(networkId, removeNetworkDevicesRequest);
        // TODO: test validations
    }

    /**
     * Unenroll a device
     *
     * Unenroll a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unenrollNetworkSmDevice_1Test() throws ApiException {
        String networkId = null;
        String deviceId = null;
        Object response = api.unenrollNetworkSmDevice_1(networkId, deviceId);
        // TODO: test validations
    }

    /**
     * Update the attributes of a device
     *
     * Update the attributes of a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeviceTest() throws ApiException {
        String serial = null;
        UpdateDeviceRequest updateDeviceRequest = null;
        Object response = api.updateDevice(serial, updateDeviceRequest);
        // TODO: test validations
    }

    /**
     * Updates the SIM and APN configurations for a cellular device.
     *
     * Updates the SIM and APN configurations for a cellular device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeviceCellularSimsTest() throws ApiException {
        String serial = null;
        UpdateDeviceCellularSimsRequest updateDeviceCellularSimsRequest = null;
        Object response = api.updateDeviceCellularSims(serial, updateDeviceCellularSimsRequest);
        // TODO: test validations
    }

    /**
     * Update the management interface settings for a device
     *
     * Update the management interface settings for a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeviceManagementInterfaceTest() throws ApiException {
        String serial = null;
        UpdateDeviceManagementInterfaceRequest updateDeviceManagementInterfaceRequest = null;
        Object response = api.updateDeviceManagementInterface(serial, updateDeviceManagementInterfaceRequest);
        // TODO: test validations
    }

    /**
     * Modify the fields of a device
     *
     * Modify the fields of a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSmDevicesFields_1Test() throws ApiException {
        String networkId = null;
        UpdateNetworkSmDevicesFieldsRequest updateNetworkSmDevicesFieldsRequest = null;
        List<UpdateNetworkSmDevicesFields200ResponseInner> response = api.updateNetworkSmDevicesFields_1(networkId, updateNetworkSmDevicesFieldsRequest);
        // TODO: test validations
    }

    /**
     * Claim a vMX into a network
     *
     * Claim a vMX into a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vmxNetworkDevicesClaim_1Test() throws ApiException {
        String networkId = null;
        VmxNetworkDevicesClaimRequest vmxNetworkDevicesClaimRequest = null;
        Object response = api.vmxNetworkDevicesClaim_1(networkId, vmxNetworkDevicesClaimRequest);
        // TODO: test validations
    }

    /**
     * Wipe a device
     *
     * Wipe a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void wipeNetworkSmDevices_1Test() throws ApiException {
        String networkId = null;
        WipeNetworkSmDevicesRequest wipeNetworkSmDevicesRequest = null;
        WipeNetworkSmDevices200Response response = api.wipeNetworkSmDevices_1(networkId, wipeNetworkSmDevicesRequest);
        // TODO: test validations
    }

}
