/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateNetworkSensorAlertsProfileRequest;
import org.openapitools.client.model.GetDeviceSensorRelationships200ResponseInner;
import org.openapitools.client.model.GetNetworkSensorAlertsCurrentOverviewByMetric200Response;
import org.openapitools.client.model.GetNetworkSensorAlertsOverviewByMetric200ResponseInner;
import org.openapitools.client.model.GetNetworkSensorAlertsProfiles200ResponseInner;
import org.openapitools.client.model.GetNetworkSensorRelationships200ResponseInner;
import org.openapitools.client.model.GetOrganizationSensorReadingsHistory200ResponseInner;
import org.openapitools.client.model.GetOrganizationSensorReadingsLatest200ResponseInner;
import org.openapitools.client.model.UpdateDeviceSensorRelationshipsRequest;
import org.openapitools.client.model.UpdateNetworkSensorAlertsProfileRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SensorApi
 */
@Disabled
public class SensorApiTest {

    private final SensorApi api = new SensorApi();

    /**
     * Creates a sensor alert profile for a network.
     *
     * Creates a sensor alert profile for a network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkSensorAlertsProfileTest() throws ApiException {
        String networkId = null;
        CreateNetworkSensorAlertsProfileRequest createNetworkSensorAlertsProfileRequest = null;
        GetNetworkSensorAlertsProfiles200ResponseInner response = api.createNetworkSensorAlertsProfile(networkId, createNetworkSensorAlertsProfileRequest);
        // TODO: test validations
    }

    /**
     * Deletes a sensor alert profile from a network.
     *
     * Deletes a sensor alert profile from a network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkSensorAlertsProfileTest() throws ApiException {
        String networkId = null;
        String id = null;
        api.deleteNetworkSensorAlertsProfile(networkId, id);
        // TODO: test validations
    }

    /**
     * List the sensor roles for a given sensor or camera device.
     *
     * List the sensor roles for a given sensor or camera device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceSensorRelationshipsTest() throws ApiException {
        String serial = null;
        List<GetDeviceSensorRelationships200ResponseInner> response = api.getDeviceSensorRelationships(serial);
        // TODO: test validations
    }

    /**
     * Return an overview of currently alerting sensors by metric
     *
     * Return an overview of currently alerting sensors by metric
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSensorAlertsCurrentOverviewByMetricTest() throws ApiException {
        String networkId = null;
        GetNetworkSensorAlertsCurrentOverviewByMetric200Response response = api.getNetworkSensorAlertsCurrentOverviewByMetric(networkId);
        // TODO: test validations
    }

    /**
     * Return an overview of alert occurrences over a timespan, by metric
     *
     * Return an overview of alert occurrences over a timespan, by metric
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSensorAlertsOverviewByMetricTest() throws ApiException {
        String networkId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        Integer interval = null;
        List<GetNetworkSensorAlertsOverviewByMetric200ResponseInner> response = api.getNetworkSensorAlertsOverviewByMetric(networkId, t0, t1, timespan, interval);
        // TODO: test validations
    }

    /**
     * Show details of a sensor alert profile for a network.
     *
     * Show details of a sensor alert profile for a network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSensorAlertsProfileTest() throws ApiException {
        String networkId = null;
        String id = null;
        GetNetworkSensorAlertsProfiles200ResponseInner response = api.getNetworkSensorAlertsProfile(networkId, id);
        // TODO: test validations
    }

    /**
     * Lists all sensor alert profiles for a network.
     *
     * Lists all sensor alert profiles for a network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSensorAlertsProfilesTest() throws ApiException {
        String networkId = null;
        List<GetNetworkSensorAlertsProfiles200ResponseInner> response = api.getNetworkSensorAlertsProfiles(networkId);
        // TODO: test validations
    }

    /**
     * List the sensor roles for devices in a given network
     *
     * List the sensor roles for devices in a given network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSensorRelationshipsTest() throws ApiException {
        String networkId = null;
        List<GetNetworkSensorRelationships200ResponseInner> response = api.getNetworkSensorRelationships(networkId);
        // TODO: test validations
    }

    /**
     * Return all reported readings from sensors in a given timespan, sorted by timestamp
     *
     * Return all reported readings from sensors in a given timespan, sorted by timestamp
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationSensorReadingsHistoryTest() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        List<String> networkIds = null;
        List<String> serials = null;
        List<String> metrics = null;
        List<GetOrganizationSensorReadingsHistory200ResponseInner> response = api.getOrganizationSensorReadingsHistory(organizationId, perPage, startingAfter, endingBefore, t0, t1, timespan, networkIds, serials, metrics);
        // TODO: test validations
    }

    /**
     * Return the latest available reading for each metric from each sensor, sorted by sensor serial
     *
     * Return the latest available reading for each metric from each sensor, sorted by sensor serial
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationSensorReadingsLatestTest() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<String> networkIds = null;
        List<String> serials = null;
        List<String> metrics = null;
        List<GetOrganizationSensorReadingsLatest200ResponseInner> response = api.getOrganizationSensorReadingsLatest(organizationId, perPage, startingAfter, endingBefore, networkIds, serials, metrics);
        // TODO: test validations
    }

    /**
     * Assign one or more sensor roles to a given sensor or camera device.
     *
     * Assign one or more sensor roles to a given sensor or camera device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeviceSensorRelationshipsTest() throws ApiException {
        String serial = null;
        UpdateDeviceSensorRelationshipsRequest updateDeviceSensorRelationshipsRequest = null;
        GetDeviceSensorRelationships200ResponseInner response = api.updateDeviceSensorRelationships(serial, updateDeviceSensorRelationshipsRequest);
        // TODO: test validations
    }

    /**
     * Updates a sensor alert profile for a network.
     *
     * Updates a sensor alert profile for a network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSensorAlertsProfileTest() throws ApiException {
        String networkId = null;
        String id = null;
        UpdateNetworkSensorAlertsProfileRequest updateNetworkSensorAlertsProfileRequest = null;
        GetNetworkSensorAlertsProfiles200ResponseInner response = api.updateNetworkSensorAlertsProfile(networkId, id, updateNetworkSensorAlertsProfileRequest);
        // TODO: test validations
    }

}
