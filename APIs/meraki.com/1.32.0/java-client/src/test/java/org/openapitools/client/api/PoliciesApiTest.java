/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateOrganizationAdaptivePolicyPolicyRequest;
import org.openapitools.client.model.GetNetworkPoliciesByClient200ResponseInner;
import org.openapitools.client.model.UpdateOrganizationAdaptivePolicyPolicyRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PoliciesApi
 */
@Disabled
public class PoliciesApiTest {

    private final PoliciesApi api = new PoliciesApi();

    /**
     * Add an Adaptive Policy
     *
     * Add an Adaptive Policy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationAdaptivePolicyPolicy_2Test() throws ApiException {
        String organizationId = null;
        CreateOrganizationAdaptivePolicyPolicyRequest createOrganizationAdaptivePolicyPolicyRequest = null;
        Object response = api.createOrganizationAdaptivePolicyPolicy_2(organizationId, createOrganizationAdaptivePolicyPolicyRequest);
        // TODO: test validations
    }

    /**
     * Delete an Adaptive Policy
     *
     * Delete an Adaptive Policy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganizationAdaptivePolicyPolicy_2Test() throws ApiException {
        String organizationId = null;
        String id = null;
        api.deleteOrganizationAdaptivePolicyPolicy_2(organizationId, id);
        // TODO: test validations
    }

    /**
     * Get policies for all clients with policies
     *
     * Get policies for all clients with policies
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkPoliciesByClient_1Test() throws ApiException {
        String networkId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        String t0 = null;
        Float timespan = null;
        List<GetNetworkPoliciesByClient200ResponseInner> response = api.getNetworkPoliciesByClient_1(networkId, perPage, startingAfter, endingBefore, t0, timespan);
        // TODO: test validations
    }

    /**
     * List adaptive policies in an organization
     *
     * List adaptive policies in an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationAdaptivePolicyPolicies_2Test() throws ApiException {
        String organizationId = null;
        List<Object> response = api.getOrganizationAdaptivePolicyPolicies_2(organizationId);
        // TODO: test validations
    }

    /**
     * Return an adaptive policy
     *
     * Return an adaptive policy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationAdaptivePolicyPolicy_2Test() throws ApiException {
        String organizationId = null;
        String id = null;
        Object response = api.getOrganizationAdaptivePolicyPolicy_2(organizationId, id);
        // TODO: test validations
    }

    /**
     * Update an Adaptive Policy
     *
     * Update an Adaptive Policy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationAdaptivePolicyPolicy_2Test() throws ApiException {
        String organizationId = null;
        String id = null;
        UpdateOrganizationAdaptivePolicyPolicyRequest updateOrganizationAdaptivePolicyPolicyRequest = null;
        Object response = api.updateOrganizationAdaptivePolicyPolicy_2(organizationId, id, updateOrganizationAdaptivePolicyPolicyRequest);
        // TODO: test validations
    }

}
