/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GenerateDeviceCameraSnapshotRequest;
import org.openapitools.client.model.GetAdministeredIdentitiesMe200Response;
import org.openapitools.client.model.GetDeviceSwitchPortsStatuses200ResponseInner;
import org.openapitools.client.model.GetDeviceWirelessConnectionStats200Response;
import org.openapitools.client.model.GetNetworkAlertsHistory200ResponseInner;
import org.openapitools.client.model.GetNetworkClient200Response;
import org.openapitools.client.model.GetNetworkClients200Response;
import org.openapitools.client.model.GetNetworkEvents200Response;
import org.openapitools.client.model.GetNetworkEventsEventTypes200ResponseInner;
import org.openapitools.client.model.GetNetworkInsightApplicationHealthByTime200ResponseInner;
import org.openapitools.client.model.GetNetworkSensorAlertsCurrentOverviewByMetric200Response;
import org.openapitools.client.model.GetNetworkSensorAlertsOverviewByMetric200ResponseInner;
import org.openapitools.client.model.GetNetworkSmDeviceCellularUsageHistory200ResponseInner;
import org.openapitools.client.model.GetNetworkSmDeviceConnectivity200ResponseInner;
import org.openapitools.client.model.GetNetworkSmDeviceDesktopLogs200ResponseInner;
import org.openapitools.client.model.GetNetworkSmDeviceDeviceCommandLogs200ResponseInner;
import org.openapitools.client.model.GetNetworkSmDevicePerformanceHistory200ResponseInner;
import org.openapitools.client.model.GetNetworkWirelessChannelUtilizationHistory200ResponseInner;
import org.openapitools.client.model.GetNetworkWirelessClientCountHistory200ResponseInner;
import org.openapitools.client.model.GetNetworkWirelessConnectionStats200Response;
import org.openapitools.client.model.GetNetworkWirelessDataRateHistory200ResponseInner;
import org.openapitools.client.model.GetNetworkWirelessFailedConnections200ResponseInner;
import org.openapitools.client.model.GetNetworkWirelessLatencyHistory200ResponseInner;
import org.openapitools.client.model.GetNetworkWirelessSignalQualityHistory200ResponseInner;
import org.openapitools.client.model.GetNetworkWirelessUsageHistory200ResponseInner;
import org.openapitools.client.model.GetOrganizationAdaptivePolicyOverview200Response;
import org.openapitools.client.model.GetOrganizationApiRequests200ResponseInner;
import org.openapitools.client.model.GetOrganizationApiRequestsOverviewResponseCodesByInterval200ResponseInner;
import org.openapitools.client.model.GetOrganizationCellularGatewayUplinkStatuses200ResponseInner;
import org.openapitools.client.model.GetOrganizationClientsBandwidthUsageHistory200ResponseInner;
import org.openapitools.client.model.GetOrganizationClientsOverview200Response;
import org.openapitools.client.model.GetOrganizationDevicesAvailabilities200ResponseInner;
import org.openapitools.client.model.GetOrganizationDevicesPowerModulesStatusesByDevice200ResponseInner;
import org.openapitools.client.model.GetOrganizationDevicesStatuses200Response;
import org.openapitools.client.model.GetOrganizationDevicesStatusesOverview200Response;
import org.openapitools.client.model.GetOrganizationDevicesUplinksAddressesByDevice200ResponseInner;
import org.openapitools.client.model.GetOrganizationDevicesUplinksLossAndLatency200ResponseInner;
import org.openapitools.client.model.GetOrganizationSensorReadingsHistory200ResponseInner;
import org.openapitools.client.model.GetOrganizationSensorReadingsLatest200ResponseInner;
import org.openapitools.client.model.GetOrganizationSummaryTopAppliancesByUtilization200ResponseInner;
import org.openapitools.client.model.GetOrganizationSummaryTopClientsByUsage200ResponseInner;
import org.openapitools.client.model.GetOrganizationSummaryTopClientsManufacturersByUsage200ResponseInner;
import org.openapitools.client.model.GetOrganizationSummaryTopDevicesByUsage200ResponseInner;
import org.openapitools.client.model.GetOrganizationSummaryTopDevicesModelsByUsage200ResponseInner;
import org.openapitools.client.model.GetOrganizationSummaryTopSsidsByUsage200ResponseInner;
import org.openapitools.client.model.GetOrganizationSummaryTopSwitchesByEnergyUsage200ResponseInner;
import org.openapitools.client.model.GetOrganizationUplinksStatuses200ResponseInner;
import org.openapitools.client.model.GetOrganizationWebhooksLogs200ResponseInner;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MonitorApi
 */
@Disabled
public class MonitorApiTest {

    private final MonitorApi api = new MonitorApi();

    /**
     * Generate a snapshot of what the camera sees at the specified time and return a link to that image.
     *
     * Generate a snapshot of what the camera sees at the specified time and return a link to that image.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generateDeviceCameraSnapshot_0Test() throws ApiException {
        String serial = null;
        GenerateDeviceCameraSnapshotRequest generateDeviceCameraSnapshotRequest = null;
        Object response = api.generateDeviceCameraSnapshot_0(serial, generateDeviceCameraSnapshotRequest);
        // TODO: test validations
    }

    /**
     * Returns the identity of the current user.
     *
     * Returns the identity of the current user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAdministeredIdentitiesMe_0Test() throws ApiException {
        GetAdministeredIdentitiesMe200Response response = api.getAdministeredIdentitiesMe_0();
        // TODO: test validations
    }

    /**
     * Return the DHCP subnet information for an appliance
     *
     * Return the DHCP subnet information for an appliance
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceApplianceDhcpSubnets_0Test() throws ApiException {
        String serial = null;
        List<Object> response = api.getDeviceApplianceDhcpSubnets_0(serial);
        // TODO: test validations
    }

    /**
     * Return the performance score for a single MX
     *
     * Return the performance score for a single MX. Only primary MX devices supported. If no data is available, a 204 error code is returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceAppliancePerformance_0Test() throws ApiException {
        String serial = null;
        Object response = api.getDeviceAppliancePerformance_0(serial);
        // TODO: test validations
    }

    /**
     * Return prefixes assigned to all IPv6 enabled VLANs on an appliance.
     *
     * Return prefixes assigned to all IPv6 enabled VLANs on an appliance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceAppliancePrefixesDelegatedVlanAssignments_0Test() throws ApiException {
        String serial = null;
        List<Object> response = api.getDeviceAppliancePrefixesDelegatedVlanAssignments_0(serial);
        // TODO: test validations
    }

    /**
     * Return current delegated IPv6 prefixes on an appliance.
     *
     * Return current delegated IPv6 prefixes on an appliance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceAppliancePrefixesDelegated_0Test() throws ApiException {
        String serial = null;
        List<Object> response = api.getDeviceAppliancePrefixesDelegated_0(serial);
        // TODO: test validations
    }

    /**
     * Returns live state from camera of analytics zones
     *
     * Returns live state from camera of analytics zones
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceCameraAnalyticsLive_0Test() throws ApiException {
        String serial = null;
        Object response = api.getDeviceCameraAnalyticsLive_0(serial);
        // TODO: test validations
    }

    /**
     * Returns an overview of aggregate analytics data for a timespan
     *
     * Returns an overview of aggregate analytics data for a timespan
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceCameraAnalyticsOverview_0Test() throws ApiException {
        String serial = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        String objectType = null;
        List<Object> response = api.getDeviceCameraAnalyticsOverview_0(serial, t0, t1, timespan, objectType);
        // TODO: test validations
    }

    /**
     * Returns most recent record for analytics zones
     *
     * Returns most recent record for analytics zones
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceCameraAnalyticsRecent_0Test() throws ApiException {
        String serial = null;
        String objectType = null;
        List<Object> response = api.getDeviceCameraAnalyticsRecent_0(serial, objectType);
        // TODO: test validations
    }

    /**
     * Return historical records for analytic zones
     *
     * Return historical records for analytic zones
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceCameraAnalyticsZoneHistory_0Test() throws ApiException {
        String serial = null;
        String zoneId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        Integer resolution = null;
        String objectType = null;
        List<Object> response = api.getDeviceCameraAnalyticsZoneHistory_0(serial, zoneId, t0, t1, timespan, resolution, objectType);
        // TODO: test validations
    }

    /**
     * Returns all configured analytic zones for this camera
     *
     * Returns all configured analytic zones for this camera
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceCameraAnalyticsZones_0Test() throws ApiException {
        String serial = null;
        List<Object> response = api.getDeviceCameraAnalyticsZones_0(serial);
        // TODO: test validations
    }

    /**
     * List the clients of a device, up to a maximum of a month ago
     *
     * List the clients of a device, up to a maximum of a month ago. The usage of each client is returned in kilobytes. If the device is a switch, the switchport is returned; otherwise the switchport field is null.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceClients_0Test() throws ApiException {
        String serial = null;
        String t0 = null;
        Float timespan = null;
        List<Object> response = api.getDeviceClients_0(serial, t0, timespan);
        // TODO: test validations
    }

    /**
     * List LLDP and CDP information for a device
     *
     * List LLDP and CDP information for a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceLldpCdp_0Test() throws ApiException {
        String serial = null;
        Object response = api.getDeviceLldpCdp_0(serial);
        // TODO: test validations
    }

    /**
     * Get the uplink loss percentage and latency in milliseconds, and goodput in kilobits per second for a wired network device.
     *
     * Get the uplink loss percentage and latency in milliseconds, and goodput in kilobits per second for a wired network device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceLossAndLatencyHistory_0Test() throws ApiException {
        String serial = null;
        String ip = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        Integer resolution = null;
        String uplink = null;
        List<Object> response = api.getDeviceLossAndLatencyHistory_0(serial, ip, t0, t1, timespan, resolution, uplink);
        // TODO: test validations
    }

    /**
     * Return the packet counters for all the ports of a switch
     *
     * Return the packet counters for all the ports of a switch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceSwitchPortsStatusesPackets_0Test() throws ApiException {
        String serial = null;
        String t0 = null;
        Float timespan = null;
        List<Object> response = api.getDeviceSwitchPortsStatusesPackets_0(serial, t0, timespan);
        // TODO: test validations
    }

    /**
     * Return the status for all the ports of a switch
     *
     * Return the status for all the ports of a switch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceSwitchPortsStatuses_0Test() throws ApiException {
        String serial = null;
        String t0 = null;
        Float timespan = null;
        List<GetDeviceSwitchPortsStatuses200ResponseInner> response = api.getDeviceSwitchPortsStatuses_0(serial, t0, timespan);
        // TODO: test validations
    }

    /**
     * Aggregated connectivity info for a given AP on this network
     *
     * Aggregated connectivity info for a given AP on this network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceWirelessConnectionStats_0Test() throws ApiException {
        String serial = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        String band = null;
        Integer ssid = null;
        Integer vlan = null;
        String apTag = null;
        GetDeviceWirelessConnectionStats200Response response = api.getDeviceWirelessConnectionStats_0(serial, t0, t1, timespan, band, ssid, vlan, apTag);
        // TODO: test validations
    }

    /**
     * Aggregated latency info for a given AP on this network
     *
     * Aggregated latency info for a given AP on this network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceWirelessLatencyStats_0Test() throws ApiException {
        String serial = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        String band = null;
        Integer ssid = null;
        Integer vlan = null;
        String apTag = null;
        String fields = null;
        Object response = api.getDeviceWirelessLatencyStats_0(serial, t0, t1, timespan, band, ssid, vlan, apTag, fields);
        // TODO: test validations
    }

    /**
     * Return the SSID statuses of an access point
     *
     * Return the SSID statuses of an access point
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceWirelessStatus_0Test() throws ApiException {
        String serial = null;
        Object response = api.getDeviceWirelessStatus_0(serial);
        // TODO: test validations
    }

    /**
     * Return the alert history for this network
     *
     * Return the alert history for this network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkAlertsHistory_0Test() throws ApiException {
        String networkId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<GetNetworkAlertsHistory200ResponseInner> response = api.getNetworkAlertsHistory_0(networkId, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * List the security events for a client
     *
     * List the security events for a client. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceClientSecurityEvents_0Test() throws ApiException {
        String networkId = null;
        String clientId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        String sortOrder = null;
        List<Object> response = api.getNetworkApplianceClientSecurityEvents_0(networkId, clientId, t0, t1, timespan, perPage, startingAfter, endingBefore, sortOrder);
        // TODO: test validations
    }

    /**
     * List the security events for a network
     *
     * List the security events for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceSecurityEvents_0Test() throws ApiException {
        String networkId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        String sortOrder = null;
        List<Object> response = api.getNetworkApplianceSecurityEvents_0(networkId, t0, t1, timespan, perPage, startingAfter, endingBefore, sortOrder);
        // TODO: test validations
    }

    /**
     * Get the sent and received bytes for each uplink of a network.
     *
     * Get the sent and received bytes for each uplink of a network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceUplinksUsageHistory_0Test() throws ApiException {
        String networkId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        Integer resolution = null;
        List<Object> response = api.getNetworkApplianceUplinksUsageHistory_0(networkId, t0, t1, timespan, resolution);
        // TODO: test validations
    }

    /**
     * Return a Bluetooth client
     *
     * Return a Bluetooth client. Bluetooth clients can be identified by their ID or their MAC.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkBluetoothClient_0Test() throws ApiException {
        String networkId = null;
        String bluetoothClientId = null;
        Boolean includeConnectivityHistory = null;
        Integer connectivityHistoryTimespan = null;
        Object response = api.getNetworkBluetoothClient_0(networkId, bluetoothClientId, includeConnectivityHistory, connectivityHistoryTimespan);
        // TODO: test validations
    }

    /**
     * List the Bluetooth clients seen by APs in this network
     *
     * List the Bluetooth clients seen by APs in this network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkBluetoothClients_0Test() throws ApiException {
        String networkId = null;
        String t0 = null;
        Float timespan = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        Boolean includeConnectivityHistory = null;
        List<Object> response = api.getNetworkBluetoothClients_0(networkId, t0, timespan, perPage, startingAfter, endingBefore, includeConnectivityHistory);
        // TODO: test validations
    }

    /**
     * Return the client&#39;s network traffic data over time
     *
     * Return the client&#39;s network traffic data over time. Usage data is in kilobytes. This endpoint requires detailed traffic analysis to be enabled on the Network-wide &gt; General page. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkClientTrafficHistory_0Test() throws ApiException {
        String networkId = null;
        String clientId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<Object> response = api.getNetworkClientTrafficHistory_0(networkId, clientId, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * Return the client&#39;s daily usage history
     *
     * Return the client&#39;s daily usage history. Usage data is in kilobytes. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkClientUsageHistory_0Test() throws ApiException {
        String networkId = null;
        String clientId = null;
        List<Object> response = api.getNetworkClientUsageHistory_0(networkId, clientId);
        // TODO: test validations
    }

    /**
     * Return the client associated with the given identifier
     *
     * Return the client associated with the given identifier. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkClient_0Test() throws ApiException {
        String networkId = null;
        String clientId = null;
        GetNetworkClient200Response response = api.getNetworkClient_0(networkId, clientId);
        // TODO: test validations
    }

    /**
     * Return the application usage data for clients
     *
     * Return the application usage data for clients. Usage data is in kilobytes. Clients can be identified by client keys or either the MACs or IPs depending on whether the network uses Track-by-IP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkClientsApplicationUsage_0Test() throws ApiException {
        String networkId = null;
        String clients = null;
        Integer ssidNumber = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        List<Object> response = api.getNetworkClientsApplicationUsage_0(networkId, clients, ssidNumber, perPage, startingAfter, endingBefore, t0, t1, timespan);
        // TODO: test validations
    }

    /**
     * Returns a timeseries of total traffic consumption rates for all clients on a network within a given timespan, in megabits per second.
     *
     * Returns a timeseries of total traffic consumption rates for all clients on a network within a given timespan, in megabits per second.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkClientsBandwidthUsageHistory_0Test() throws ApiException {
        String networkId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<Object> response = api.getNetworkClientsBandwidthUsageHistory_0(networkId, t0, t1, timespan, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * Return overview statistics for network clients
     *
     * Return overview statistics for network clients
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkClientsOverview_0Test() throws ApiException {
        String networkId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        Integer resolution = null;
        Object response = api.getNetworkClientsOverview_0(networkId, t0, t1, timespan, resolution);
        // TODO: test validations
    }

    /**
     * Return the usage histories for clients
     *
     * Return the usage histories for clients. Usage data is in kilobytes. Clients can be identified by client keys or either the MACs or IPs depending on whether the network uses Track-by-IP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkClientsUsageHistories_0Test() throws ApiException {
        String networkId = null;
        String clients = null;
        Integer ssidNumber = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        List<Object> response = api.getNetworkClientsUsageHistories_0(networkId, clients, ssidNumber, perPage, startingAfter, endingBefore, t0, t1, timespan);
        // TODO: test validations
    }

    /**
     * List the clients that have used this network in the timespan
     *
     * List the clients that have used this network in the timespan
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkClients_0Test() throws ApiException {
        String networkId = null;
        String t0 = null;
        Float timespan = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<String> statuses = null;
        String ip = null;
        String ip6 = null;
        String ip6Local = null;
        String mac = null;
        String os = null;
        String description = null;
        String vlan = null;
        List<String> recentDeviceConnections = null;
        GetNetworkClients200Response response = api.getNetworkClients_0(networkId, t0, timespan, perPage, startingAfter, endingBefore, statuses, ip, ip6, ip6Local, mac, os, description, vlan, recentDeviceConnections);
        // TODO: test validations
    }

    /**
     * List the event type to human-readable description
     *
     * List the event type to human-readable description
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkEventsEventTypes_0Test() throws ApiException {
        String networkId = null;
        List<GetNetworkEventsEventTypes200ResponseInner> response = api.getNetworkEventsEventTypes_0(networkId);
        // TODO: test validations
    }

    /**
     * List the events for the network
     *
     * List the events for the network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkEvents_0Test() throws ApiException {
        String networkId = null;
        String productType = null;
        List<String> includedEventTypes = null;
        List<String> excludedEventTypes = null;
        String deviceMac = null;
        String deviceSerial = null;
        String deviceName = null;
        String clientIp = null;
        String clientMac = null;
        String clientName = null;
        String smDeviceMac = null;
        String smDeviceName = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        GetNetworkEvents200Response response = api.getNetworkEvents_0(networkId, productType, includedEventTypes, excludedEventTypes, deviceMac, deviceSerial, deviceName, clientIp, clientMac, clientName, smDeviceMac, smDeviceName, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * Get application health by time
     *
     * Get application health by time
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkInsightApplicationHealthByTime_0Test() throws ApiException {
        String networkId = null;
        String applicationId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        Integer resolution = null;
        List<GetNetworkInsightApplicationHealthByTime200ResponseInner> response = api.getNetworkInsightApplicationHealthByTime_0(networkId, applicationId, t0, t1, timespan, resolution);
        // TODO: test validations
    }

    /**
     * Get the channel utilization over each radio for all APs in a network.
     *
     * Get the channel utilization over each radio for all APs in a network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkNetworkHealthChannelUtilization_0Test() throws ApiException {
        String networkId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        Integer resolution = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<Object> response = api.getNetworkNetworkHealthChannelUtilization_0(networkId, t0, t1, timespan, resolution, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * Return an overview of currently alerting sensors by metric
     *
     * Return an overview of currently alerting sensors by metric
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSensorAlertsCurrentOverviewByMetric_0Test() throws ApiException {
        String networkId = null;
        GetNetworkSensorAlertsCurrentOverviewByMetric200Response response = api.getNetworkSensorAlertsCurrentOverviewByMetric_0(networkId);
        // TODO: test validations
    }

    /**
     * Return an overview of alert occurrences over a timespan, by metric
     *
     * Return an overview of alert occurrences over a timespan, by metric
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSensorAlertsOverviewByMetric_0Test() throws ApiException {
        String networkId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        Integer interval = null;
        List<GetNetworkSensorAlertsOverviewByMetric200ResponseInner> response = api.getNetworkSensorAlertsOverviewByMetric_0(networkId, t0, t1, timespan, interval);
        // TODO: test validations
    }

    /**
     * Return the client&#39;s daily cellular data usage history
     *
     * Return the client&#39;s daily cellular data usage history. Usage data is in kilobytes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmDeviceCellularUsageHistory_0Test() throws ApiException {
        String networkId = null;
        String deviceId = null;
        List<GetNetworkSmDeviceCellularUsageHistory200ResponseInner> response = api.getNetworkSmDeviceCellularUsageHistory_0(networkId, deviceId);
        // TODO: test validations
    }

    /**
     * Returns historical connectivity data (whether a device is regularly checking in to Dashboard).
     *
     * Returns historical connectivity data (whether a device is regularly checking in to Dashboard).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmDeviceConnectivity_0Test() throws ApiException {
        String networkId = null;
        String deviceId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<GetNetworkSmDeviceConnectivity200ResponseInner> response = api.getNetworkSmDeviceConnectivity_0(networkId, deviceId, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * Return historical records of various Systems Manager network connection details for desktop devices.
     *
     * Return historical records of various Systems Manager network connection details for desktop devices.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmDeviceDesktopLogs_0Test() throws ApiException {
        String networkId = null;
        String deviceId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<GetNetworkSmDeviceDesktopLogs200ResponseInner> response = api.getNetworkSmDeviceDesktopLogs_0(networkId, deviceId, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * Return historical records of commands sent to Systems Manager devices
     *
     * Return historical records of commands sent to Systems Manager devices. Note that this will include the name of the Dashboard user who initiated the command if it was generated by a Dashboard admin rather than the automatic behavior of the system; you may wish to filter this out of any reports.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmDeviceDeviceCommandLogs_0Test() throws ApiException {
        String networkId = null;
        String deviceId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<GetNetworkSmDeviceDeviceCommandLogs200ResponseInner> response = api.getNetworkSmDeviceDeviceCommandLogs_0(networkId, deviceId, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * Return historical records of various Systems Manager client metrics for desktop devices.
     *
     * Return historical records of various Systems Manager client metrics for desktop devices.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmDevicePerformanceHistory_0Test() throws ApiException {
        String networkId = null;
        String deviceId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<GetNetworkSmDevicePerformanceHistory200ResponseInner> response = api.getNetworkSmDevicePerformanceHistory_0(networkId, deviceId, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * List the splash login attempts for a network
     *
     * List the splash login attempts for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSplashLoginAttempts_0Test() throws ApiException {
        String networkId = null;
        Integer ssidNumber = null;
        String loginIdentifier = null;
        Integer timespan = null;
        List<Object> response = api.getNetworkSplashLoginAttempts_0(networkId, ssidNumber, loginIdentifier, timespan);
        // TODO: test validations
    }

    /**
     * List the LLDP and CDP information for all discovered devices and connections in a network.
     *
     * List the LLDP and CDP information for all discovered devices and connections in a network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkTopologyLinkLayer_0Test() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkTopologyLinkLayer_0(networkId);
        // TODO: test validations
    }

    /**
     * Return the traffic analysis data for this network
     *
     * Return the traffic analysis data for this network. Traffic analysis with hostname visibility must be enabled on the network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkTraffic_0Test() throws ApiException {
        String networkId = null;
        String t0 = null;
        Float timespan = null;
        String deviceType = null;
        List<Object> response = api.getNetworkTraffic_0(networkId, t0, timespan, deviceType);
        // TODO: test validations
    }

    /**
     * List Air Marshal scan results from a network
     *
     * List Air Marshal scan results from a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessAirMarshal_0Test() throws ApiException {
        String networkId = null;
        String t0 = null;
        Float timespan = null;
        List<Object> response = api.getNetworkWirelessAirMarshal_0(networkId, t0, timespan);
        // TODO: test validations
    }

    /**
     * Return AP channel utilization over time for a device or network client
     *
     * Return AP channel utilization over time for a device or network client
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessChannelUtilizationHistory_0Test() throws ApiException {
        String networkId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        Integer resolution = null;
        Boolean autoResolution = null;
        String clientId = null;
        String deviceSerial = null;
        String apTag = null;
        String band = null;
        List<GetNetworkWirelessChannelUtilizationHistory200ResponseInner> response = api.getNetworkWirelessChannelUtilizationHistory_0(networkId, t0, t1, timespan, resolution, autoResolution, clientId, deviceSerial, apTag, band);
        // TODO: test validations
    }

    /**
     * Aggregated connectivity info for a given client on this network
     *
     * Aggregated connectivity info for a given client on this network. Clients are identified by their MAC.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessClientConnectionStats_0Test() throws ApiException {
        String networkId = null;
        String clientId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        String band = null;
        Integer ssid = null;
        Integer vlan = null;
        String apTag = null;
        Object response = api.getNetworkWirelessClientConnectionStats_0(networkId, clientId, t0, t1, timespan, band, ssid, vlan, apTag);
        // TODO: test validations
    }

    /**
     * List the wireless connectivity events for a client within a network in the timespan.
     *
     * List the wireless connectivity events for a client within a network in the timespan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessClientConnectivityEvents_0Test() throws ApiException {
        String networkId = null;
        String clientId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        List<String> types = null;
        List<String> includedSeverities = null;
        String band = null;
        Integer ssidNumber = null;
        String deviceSerial = null;
        List<Object> response = api.getNetworkWirelessClientConnectivityEvents_0(networkId, clientId, perPage, startingAfter, endingBefore, t0, t1, timespan, types, includedSeverities, band, ssidNumber, deviceSerial);
        // TODO: test validations
    }

    /**
     * Return wireless client counts over time for a network, device, or network client
     *
     * Return wireless client counts over time for a network, device, or network client
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessClientCountHistory_0Test() throws ApiException {
        String networkId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        Integer resolution = null;
        Boolean autoResolution = null;
        String clientId = null;
        String deviceSerial = null;
        String apTag = null;
        String band = null;
        Integer ssid = null;
        List<GetNetworkWirelessClientCountHistory200ResponseInner> response = api.getNetworkWirelessClientCountHistory_0(networkId, t0, t1, timespan, resolution, autoResolution, clientId, deviceSerial, apTag, band, ssid);
        // TODO: test validations
    }

    /**
     * Return the latency history for a client
     *
     * Return the latency history for a client. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP. The latency data is from a sample of 2% of packets and is grouped into 4 traffic categories: background, best effort, video, voice. Within these categories the sampled packet counters are bucketed by latency in milliseconds.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessClientLatencyHistory_0Test() throws ApiException {
        String networkId = null;
        String clientId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        Integer resolution = null;
        List<Object> response = api.getNetworkWirelessClientLatencyHistory_0(networkId, clientId, t0, t1, timespan, resolution);
        // TODO: test validations
    }

    /**
     * Aggregated latency info for a given client on this network
     *
     * Aggregated latency info for a given client on this network. Clients are identified by their MAC.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessClientLatencyStats_0Test() throws ApiException {
        String networkId = null;
        String clientId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        String band = null;
        Integer ssid = null;
        Integer vlan = null;
        String apTag = null;
        String fields = null;
        Object response = api.getNetworkWirelessClientLatencyStats_0(networkId, clientId, t0, t1, timespan, band, ssid, vlan, apTag, fields);
        // TODO: test validations
    }

    /**
     * Aggregated connectivity info for this network, grouped by clients
     *
     * Aggregated connectivity info for this network, grouped by clients
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessClientsConnectionStats_0Test() throws ApiException {
        String networkId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        String band = null;
        Integer ssid = null;
        Integer vlan = null;
        String apTag = null;
        List<Object> response = api.getNetworkWirelessClientsConnectionStats_0(networkId, t0, t1, timespan, band, ssid, vlan, apTag);
        // TODO: test validations
    }

    /**
     * Aggregated latency info for this network, grouped by clients
     *
     * Aggregated latency info for this network, grouped by clients
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessClientsLatencyStats_0Test() throws ApiException {
        String networkId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        String band = null;
        Integer ssid = null;
        Integer vlan = null;
        String apTag = null;
        String fields = null;
        List<Object> response = api.getNetworkWirelessClientsLatencyStats_0(networkId, t0, t1, timespan, band, ssid, vlan, apTag, fields);
        // TODO: test validations
    }

    /**
     * Aggregated connectivity info for this network
     *
     * Aggregated connectivity info for this network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessConnectionStats_0Test() throws ApiException {
        String networkId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        String band = null;
        Integer ssid = null;
        Integer vlan = null;
        String apTag = null;
        GetNetworkWirelessConnectionStats200Response response = api.getNetworkWirelessConnectionStats_0(networkId, t0, t1, timespan, band, ssid, vlan, apTag);
        // TODO: test validations
    }

    /**
     * Return PHY data rates over time for a network, device, or network client
     *
     * Return PHY data rates over time for a network, device, or network client
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessDataRateHistory_0Test() throws ApiException {
        String networkId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        Integer resolution = null;
        Boolean autoResolution = null;
        String clientId = null;
        String deviceSerial = null;
        String apTag = null;
        String band = null;
        Integer ssid = null;
        List<GetNetworkWirelessDataRateHistory200ResponseInner> response = api.getNetworkWirelessDataRateHistory_0(networkId, t0, t1, timespan, resolution, autoResolution, clientId, deviceSerial, apTag, band, ssid);
        // TODO: test validations
    }

    /**
     * Aggregated connectivity info for this network, grouped by node
     *
     * Aggregated connectivity info for this network, grouped by node
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessDevicesConnectionStats_0Test() throws ApiException {
        String networkId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        String band = null;
        Integer ssid = null;
        Integer vlan = null;
        String apTag = null;
        List<GetDeviceWirelessConnectionStats200Response> response = api.getNetworkWirelessDevicesConnectionStats_0(networkId, t0, t1, timespan, band, ssid, vlan, apTag);
        // TODO: test validations
    }

    /**
     * Aggregated latency info for this network, grouped by node
     *
     * Aggregated latency info for this network, grouped by node
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessDevicesLatencyStats_0Test() throws ApiException {
        String networkId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        String band = null;
        Integer ssid = null;
        Integer vlan = null;
        String apTag = null;
        String fields = null;
        List<Object> response = api.getNetworkWirelessDevicesLatencyStats_0(networkId, t0, t1, timespan, band, ssid, vlan, apTag, fields);
        // TODO: test validations
    }

    /**
     * List of all failed client connection events on this network in a given time range
     *
     * List of all failed client connection events on this network in a given time range
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessFailedConnections_0Test() throws ApiException {
        String networkId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        String band = null;
        Integer ssid = null;
        Integer vlan = null;
        String apTag = null;
        String serial = null;
        String clientId = null;
        List<GetNetworkWirelessFailedConnections200ResponseInner> response = api.getNetworkWirelessFailedConnections_0(networkId, t0, t1, timespan, band, ssid, vlan, apTag, serial, clientId);
        // TODO: test validations
    }

    /**
     * Return average wireless latency over time for a network, device, or network client
     *
     * Return average wireless latency over time for a network, device, or network client
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessLatencyHistory_0Test() throws ApiException {
        String networkId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        Integer resolution = null;
        Boolean autoResolution = null;
        String clientId = null;
        String deviceSerial = null;
        String apTag = null;
        String band = null;
        Integer ssid = null;
        String accessCategory = null;
        List<GetNetworkWirelessLatencyHistory200ResponseInner> response = api.getNetworkWirelessLatencyHistory_0(networkId, t0, t1, timespan, resolution, autoResolution, clientId, deviceSerial, apTag, band, ssid, accessCategory);
        // TODO: test validations
    }

    /**
     * Aggregated latency info for this network
     *
     * Aggregated latency info for this network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessLatencyStats_0Test() throws ApiException {
        String networkId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        String band = null;
        Integer ssid = null;
        Integer vlan = null;
        String apTag = null;
        String fields = null;
        Object response = api.getNetworkWirelessLatencyStats_0(networkId, t0, t1, timespan, band, ssid, vlan, apTag, fields);
        // TODO: test validations
    }

    /**
     * List wireless mesh statuses for repeaters
     *
     * List wireless mesh statuses for repeaters
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessMeshStatuses_0Test() throws ApiException {
        String networkId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        Object response = api.getNetworkWirelessMeshStatuses_0(networkId, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * Return signal quality (SNR/RSSI) over time for a device or network client
     *
     * Return signal quality (SNR/RSSI) over time for a device or network client
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessSignalQualityHistory_0Test() throws ApiException {
        String networkId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        Integer resolution = null;
        Boolean autoResolution = null;
        String clientId = null;
        String deviceSerial = null;
        String apTag = null;
        String band = null;
        Integer ssid = null;
        List<GetNetworkWirelessSignalQualityHistory200ResponseInner> response = api.getNetworkWirelessSignalQualityHistory_0(networkId, t0, t1, timespan, resolution, autoResolution, clientId, deviceSerial, apTag, band, ssid);
        // TODO: test validations
    }

    /**
     * Return AP usage over time for a device or network client
     *
     * Return AP usage over time for a device or network client
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessUsageHistory_0Test() throws ApiException {
        String networkId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        Integer resolution = null;
        Boolean autoResolution = null;
        String clientId = null;
        String deviceSerial = null;
        String apTag = null;
        String band = null;
        Integer ssid = null;
        List<GetNetworkWirelessUsageHistory200ResponseInner> response = api.getNetworkWirelessUsageHistory_0(networkId, t0, t1, timespan, resolution, autoResolution, clientId, deviceSerial, apTag, band, ssid);
        // TODO: test validations
    }

    /**
     * Returns adaptive policy aggregate statistics for an organization
     *
     * Returns adaptive policy aggregate statistics for an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationAdaptivePolicyOverview_0Test() throws ApiException {
        String organizationId = null;
        GetOrganizationAdaptivePolicyOverview200Response response = api.getOrganizationAdaptivePolicyOverview_0(organizationId);
        // TODO: test validations
    }

    /**
     * Tracks organizations&#39; API requests by response code across a given time period
     *
     * Tracks organizations&#39; API requests by response code across a given time period
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationApiRequestsOverviewResponseCodesByInterval_0Test() throws ApiException {
        String organizationId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        Integer interval = null;
        Integer version = null;
        List<String> operationIds = null;
        List<String> sourceIps = null;
        List<String> adminIds = null;
        String userAgent = null;
        List<GetOrganizationApiRequestsOverviewResponseCodesByInterval200ResponseInner> response = api.getOrganizationApiRequestsOverviewResponseCodesByInterval_0(organizationId, t0, t1, timespan, interval, version, operationIds, sourceIps, adminIds, userAgent);
        // TODO: test validations
    }

    /**
     * Return an aggregated overview of API requests data
     *
     * Return an aggregated overview of API requests data
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationApiRequestsOverview_0Test() throws ApiException {
        String organizationId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        Object response = api.getOrganizationApiRequestsOverview_0(organizationId, t0, t1, timespan);
        // TODO: test validations
    }

    /**
     * List the API requests made by an organization
     *
     * List the API requests made by an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationApiRequests_0Test() throws ApiException {
        String organizationId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        String adminId = null;
        String path = null;
        String method = null;
        Integer responseCode = null;
        String sourceIp = null;
        String userAgent = null;
        Integer version = null;
        List<String> operationIds = null;
        List<GetOrganizationApiRequests200ResponseInner> response = api.getOrganizationApiRequests_0(organizationId, t0, t1, timespan, perPage, startingAfter, endingBefore, adminId, path, method, responseCode, sourceIp, userAgent, version, operationIds);
        // TODO: test validations
    }

    /**
     * List the security events for an organization
     *
     * List the security events for an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationApplianceSecurityEvents_0Test() throws ApiException {
        String organizationId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        String sortOrder = null;
        List<Object> response = api.getOrganizationApplianceSecurityEvents_0(organizationId, t0, t1, timespan, perPage, startingAfter, endingBefore, sortOrder);
        // TODO: test validations
    }

    /**
     * List the uplink status of every Meraki MX and Z series appliances in the organization
     *
     * List the uplink status of every Meraki MX and Z series appliances in the organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationApplianceUplinkStatuses_0Test() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<String> networkIds = null;
        List<String> serials = null;
        List<String> iccids = null;
        List<Object> response = api.getOrganizationApplianceUplinkStatuses_0(organizationId, perPage, startingAfter, endingBefore, networkIds, serials, iccids);
        // TODO: test validations
    }

    /**
     * Show VPN history stat for networks in an organization
     *
     * Show VPN history stat for networks in an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationApplianceVpnStats_0Test() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<String> networkIds = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        List<Object> response = api.getOrganizationApplianceVpnStats_0(organizationId, perPage, startingAfter, endingBefore, networkIds, t0, t1, timespan);
        // TODO: test validations
    }

    /**
     * Show VPN status for networks in an organization
     *
     * Show VPN status for networks in an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationApplianceVpnStatuses_0Test() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<String> networkIds = null;
        List<Object> response = api.getOrganizationApplianceVpnStatuses_0(organizationId, perPage, startingAfter, endingBefore, networkIds);
        // TODO: test validations
    }

    /**
     * List the uplink status of every Meraki MG cellular gateway in the organization
     *
     * List the uplink status of every Meraki MG cellular gateway in the organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationCellularGatewayUplinkStatuses_0Test() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<String> networkIds = null;
        List<String> serials = null;
        List<String> iccids = null;
        List<GetOrganizationCellularGatewayUplinkStatuses200ResponseInner> response = api.getOrganizationCellularGatewayUplinkStatuses_0(organizationId, perPage, startingAfter, endingBefore, networkIds, serials, iccids);
        // TODO: test validations
    }

    /**
     * Return data usage (in megabits per second) over time for all clients in the given organization within a given time range.
     *
     * Return data usage (in megabits per second) over time for all clients in the given organization within a given time range.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationClientsBandwidthUsageHistory_0Test() throws ApiException {
        String organizationId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        List<GetOrganizationClientsBandwidthUsageHistory200ResponseInner> response = api.getOrganizationClientsBandwidthUsageHistory_0(organizationId, t0, t1, timespan);
        // TODO: test validations
    }

    /**
     * Return summary information around client data usage (in mb) across the given organization.
     *
     * Return summary information around client data usage (in mb) across the given organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationClientsOverview_0Test() throws ApiException {
        String organizationId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        GetOrganizationClientsOverview200Response response = api.getOrganizationClientsOverview_0(organizationId, t0, t1, timespan);
        // TODO: test validations
    }

    /**
     * View the Change Log for your organization
     *
     * View the Change Log for your organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationConfigurationChanges_0Test() throws ApiException {
        String organizationId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        String networkId = null;
        String adminId = null;
        List<Object> response = api.getOrganizationConfigurationChanges_0(organizationId, t0, t1, timespan, perPage, startingAfter, endingBefore, networkId, adminId);
        // TODO: test validations
    }

    /**
     * List the availability information for devices in an organization
     *
     * List the availability information for devices in an organization. The data returned by this endpoint is updated every 5 minutes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationDevicesAvailabilities_0Test() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<String> networkIds = null;
        List<String> productTypes = null;
        List<String> serials = null;
        List<String> tags = null;
        String tagsFilterType = null;
        List<GetOrganizationDevicesAvailabilities200ResponseInner> response = api.getOrganizationDevicesAvailabilities_0(organizationId, perPage, startingAfter, endingBefore, networkIds, productTypes, serials, tags, tagsFilterType);
        // TODO: test validations
    }

    /**
     * List the power status information for devices in an organization
     *
     * List the power status information for devices in an organization. The data returned by this endpoint is updated every 5 minutes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationDevicesPowerModulesStatusesByDevice_0Test() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<String> networkIds = null;
        List<String> productTypes = null;
        List<String> serials = null;
        List<String> tags = null;
        String tagsFilterType = null;
        List<GetOrganizationDevicesPowerModulesStatusesByDevice200ResponseInner> response = api.getOrganizationDevicesPowerModulesStatusesByDevice_0(organizationId, perPage, startingAfter, endingBefore, networkIds, productTypes, serials, tags, tagsFilterType);
        // TODO: test validations
    }

    /**
     * Return an overview of current device statuses
     *
     * Return an overview of current device statuses
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationDevicesStatusesOverview_0Test() throws ApiException {
        String organizationId = null;
        List<String> productTypes = null;
        List<String> networkIds = null;
        GetOrganizationDevicesStatusesOverview200Response response = api.getOrganizationDevicesStatusesOverview_0(organizationId, productTypes, networkIds);
        // TODO: test validations
    }

    /**
     * List the status of every Meraki device in the organization
     *
     * List the status of every Meraki device in the organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationDevicesStatuses_0Test() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<String> networkIds = null;
        List<String> serials = null;
        List<String> statuses = null;
        List<String> productTypes = null;
        List<String> models = null;
        List<String> tags = null;
        String tagsFilterType = null;
        GetOrganizationDevicesStatuses200Response response = api.getOrganizationDevicesStatuses_0(organizationId, perPage, startingAfter, endingBefore, networkIds, serials, statuses, productTypes, models, tags, tagsFilterType);
        // TODO: test validations
    }

    /**
     * List the current uplink addresses for devices in an organization.
     *
     * List the current uplink addresses for devices in an organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationDevicesUplinksAddressesByDevice_0Test() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<String> networkIds = null;
        List<String> productTypes = null;
        List<String> serials = null;
        List<String> tags = null;
        String tagsFilterType = null;
        List<GetOrganizationDevicesUplinksAddressesByDevice200ResponseInner> response = api.getOrganizationDevicesUplinksAddressesByDevice_0(organizationId, perPage, startingAfter, endingBefore, networkIds, productTypes, serials, tags, tagsFilterType);
        // TODO: test validations
    }

    /**
     * Return the uplink loss and latency for every MX in the organization from at latest 2 minutes ago
     *
     * Return the uplink loss and latency for every MX in the organization from at latest 2 minutes ago
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationDevicesUplinksLossAndLatency_0Test() throws ApiException {
        String organizationId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        String uplink = null;
        String ip = null;
        List<GetOrganizationDevicesUplinksLossAndLatency200ResponseInner> response = api.getOrganizationDevicesUplinksLossAndLatency_0(organizationId, t0, t1, timespan, uplink, ip);
        // TODO: test validations
    }

    /**
     * Return an overview of the license state for an organization
     *
     * Return an overview of the license state for an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationLicensesOverview_0Test() throws ApiException {
        String organizationId = null;
        Object response = api.getOrganizationLicensesOverview_0(organizationId);
        // TODO: test validations
    }

    /**
     * Return the OpenAPI 2.0 Specification of the organization&#39;s API documentation in JSON
     *
     * Return the OpenAPI 2.0 Specification of the organization&#39;s API documentation in JSON
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationOpenapiSpec_0Test() throws ApiException {
        String organizationId = null;
        Object response = api.getOrganizationOpenapiSpec_0(organizationId);
        // TODO: test validations
    }

    /**
     * Return all reported readings from sensors in a given timespan, sorted by timestamp
     *
     * Return all reported readings from sensors in a given timespan, sorted by timestamp
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationSensorReadingsHistory_0Test() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        List<String> networkIds = null;
        List<String> serials = null;
        List<String> metrics = null;
        List<GetOrganizationSensorReadingsHistory200ResponseInner> response = api.getOrganizationSensorReadingsHistory_0(organizationId, perPage, startingAfter, endingBefore, t0, t1, timespan, networkIds, serials, metrics);
        // TODO: test validations
    }

    /**
     * Return the latest available reading for each metric from each sensor, sorted by sensor serial
     *
     * Return the latest available reading for each metric from each sensor, sorted by sensor serial
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationSensorReadingsLatest_0Test() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<String> networkIds = null;
        List<String> serials = null;
        List<String> metrics = null;
        List<GetOrganizationSensorReadingsLatest200ResponseInner> response = api.getOrganizationSensorReadingsLatest_0(organizationId, perPage, startingAfter, endingBefore, networkIds, serials, metrics);
        // TODO: test validations
    }

    /**
     * Return the top 10 appliances sorted by utilization over given time range.
     *
     * Return the top 10 appliances sorted by utilization over given time range.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationSummaryTopAppliancesByUtilization_0Test() throws ApiException {
        String organizationId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        List<GetOrganizationSummaryTopAppliancesByUtilization200ResponseInner> response = api.getOrganizationSummaryTopAppliancesByUtilization_0(organizationId, t0, t1, timespan);
        // TODO: test validations
    }

    /**
     * Return metrics for organization&#39;s top 10 clients by data usage (in mb) over given time range.
     *
     * Return metrics for organization&#39;s top 10 clients by data usage (in mb) over given time range.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationSummaryTopClientsByUsage_0Test() throws ApiException {
        String organizationId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        List<GetOrganizationSummaryTopClientsByUsage200ResponseInner> response = api.getOrganizationSummaryTopClientsByUsage_0(organizationId, t0, t1, timespan);
        // TODO: test validations
    }

    /**
     * Return metrics for organization&#39;s top clients by data usage (in mb) over given time range, grouped by manufacturer.
     *
     * Return metrics for organization&#39;s top clients by data usage (in mb) over given time range, grouped by manufacturer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationSummaryTopClientsManufacturersByUsage_0Test() throws ApiException {
        String organizationId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        List<GetOrganizationSummaryTopClientsManufacturersByUsage200ResponseInner> response = api.getOrganizationSummaryTopClientsManufacturersByUsage_0(organizationId, t0, t1, timespan);
        // TODO: test validations
    }

    /**
     * Return metrics for organization&#39;s top 10 devices sorted by data usage over given time range
     *
     * Return metrics for organization&#39;s top 10 devices sorted by data usage over given time range. Default unit is megabytes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationSummaryTopDevicesByUsage_0Test() throws ApiException {
        String organizationId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        List<GetOrganizationSummaryTopDevicesByUsage200ResponseInner> response = api.getOrganizationSummaryTopDevicesByUsage_0(organizationId, t0, t1, timespan);
        // TODO: test validations
    }

    /**
     * Return metrics for organization&#39;s top 10 device models sorted by data usage over given time range
     *
     * Return metrics for organization&#39;s top 10 device models sorted by data usage over given time range. Default unit is megabytes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationSummaryTopDevicesModelsByUsage_0Test() throws ApiException {
        String organizationId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        List<GetOrganizationSummaryTopDevicesModelsByUsage200ResponseInner> response = api.getOrganizationSummaryTopDevicesModelsByUsage_0(organizationId, t0, t1, timespan);
        // TODO: test validations
    }

    /**
     * Return metrics for organization&#39;s top 10 ssids by data usage over given time range
     *
     * Return metrics for organization&#39;s top 10 ssids by data usage over given time range. Default unit is megabytes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationSummaryTopSsidsByUsage_0Test() throws ApiException {
        String organizationId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        List<GetOrganizationSummaryTopSsidsByUsage200ResponseInner> response = api.getOrganizationSummaryTopSsidsByUsage_0(organizationId, t0, t1, timespan);
        // TODO: test validations
    }

    /**
     * Return metrics for organization&#39;s top 10 switches by energy usage over given time range
     *
     * Return metrics for organization&#39;s top 10 switches by energy usage over given time range. Default unit is joules.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationSummaryTopSwitchesByEnergyUsage_0Test() throws ApiException {
        String organizationId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        List<GetOrganizationSummaryTopSwitchesByEnergyUsage200ResponseInner> response = api.getOrganizationSummaryTopSwitchesByEnergyUsage_0(organizationId, t0, t1, timespan);
        // TODO: test validations
    }

    /**
     * List the uplink status of every Meraki MX, MG and Z series devices in the organization
     *
     * List the uplink status of every Meraki MX, MG and Z series devices in the organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationUplinksStatuses_0Test() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<String> networkIds = null;
        List<String> serials = null;
        List<String> iccids = null;
        List<GetOrganizationUplinksStatuses200ResponseInner> response = api.getOrganizationUplinksStatuses_0(organizationId, perPage, startingAfter, endingBefore, networkIds, serials, iccids);
        // TODO: test validations
    }

    /**
     * Return a list of alert types to be used with managing webhook alerts
     *
     * Return a list of alert types to be used with managing webhook alerts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationWebhooksAlertTypes_0Test() throws ApiException {
        String organizationId = null;
        String productType = null;
        List<Object> response = api.getOrganizationWebhooksAlertTypes_0(organizationId, productType);
        // TODO: test validations
    }

    /**
     * Return the log of webhook POSTs sent
     *
     * Return the log of webhook POSTs sent
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationWebhooksLogs_0Test() throws ApiException {
        String organizationId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        String url = null;
        List<GetOrganizationWebhooksLogs200ResponseInner> response = api.getOrganizationWebhooksLogs_0(organizationId, t0, t1, timespan, perPage, startingAfter, endingBefore, url);
        // TODO: test validations
    }

}
