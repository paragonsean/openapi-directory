/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateOrganizationAdaptivePolicyAclRequest;
import org.openapitools.client.model.CreateOrganizationAdaptivePolicyGroupRequest;
import org.openapitools.client.model.CreateOrganizationAdaptivePolicyPolicyRequest;
import org.openapitools.client.model.GetOrganizationAdaptivePolicyOverview200Response;
import org.openapitools.client.model.UpdateOrganizationAdaptivePolicyAclRequest;
import org.openapitools.client.model.UpdateOrganizationAdaptivePolicyGroupRequest;
import org.openapitools.client.model.UpdateOrganizationAdaptivePolicyPolicyRequest;
import org.openapitools.client.model.UpdateOrganizationAdaptivePolicySettingsRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AdaptivePolicyApi
 */
@Disabled
public class AdaptivePolicyApiTest {

    private final AdaptivePolicyApi api = new AdaptivePolicyApi();

    /**
     * Creates new adaptive policy ACL
     *
     * Creates new adaptive policy ACL
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationAdaptivePolicyAcl_1Test() throws ApiException {
        String organizationId = null;
        CreateOrganizationAdaptivePolicyAclRequest createOrganizationAdaptivePolicyAclRequest = null;
        Object response = api.createOrganizationAdaptivePolicyAcl_1(organizationId, createOrganizationAdaptivePolicyAclRequest);
        // TODO: test validations
    }

    /**
     * Creates a new adaptive policy group
     *
     * Creates a new adaptive policy group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationAdaptivePolicyGroup_1Test() throws ApiException {
        String organizationId = null;
        CreateOrganizationAdaptivePolicyGroupRequest createOrganizationAdaptivePolicyGroupRequest = null;
        Object response = api.createOrganizationAdaptivePolicyGroup_1(organizationId, createOrganizationAdaptivePolicyGroupRequest);
        // TODO: test validations
    }

    /**
     * Add an Adaptive Policy
     *
     * Add an Adaptive Policy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationAdaptivePolicyPolicy_1Test() throws ApiException {
        String organizationId = null;
        CreateOrganizationAdaptivePolicyPolicyRequest createOrganizationAdaptivePolicyPolicyRequest = null;
        Object response = api.createOrganizationAdaptivePolicyPolicy_1(organizationId, createOrganizationAdaptivePolicyPolicyRequest);
        // TODO: test validations
    }

    /**
     * Deletes the specified adaptive policy ACL
     *
     * Deletes the specified adaptive policy ACL. Note this adaptive policy ACL will also be removed from policies using it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganizationAdaptivePolicyAcl_1Test() throws ApiException {
        String organizationId = null;
        String aclId = null;
        api.deleteOrganizationAdaptivePolicyAcl_1(organizationId, aclId);
        // TODO: test validations
    }

    /**
     * Deletes the specified adaptive policy group and any associated policies and references
     *
     * Deletes the specified adaptive policy group and any associated policies and references
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganizationAdaptivePolicyGroup_1Test() throws ApiException {
        String organizationId = null;
        String id = null;
        api.deleteOrganizationAdaptivePolicyGroup_1(organizationId, id);
        // TODO: test validations
    }

    /**
     * Delete an Adaptive Policy
     *
     * Delete an Adaptive Policy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganizationAdaptivePolicyPolicy_1Test() throws ApiException {
        String organizationId = null;
        String id = null;
        api.deleteOrganizationAdaptivePolicyPolicy_1(organizationId, id);
        // TODO: test validations
    }

    /**
     * Returns the adaptive policy ACL information
     *
     * Returns the adaptive policy ACL information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationAdaptivePolicyAcl_1Test() throws ApiException {
        String organizationId = null;
        String aclId = null;
        Object response = api.getOrganizationAdaptivePolicyAcl_1(organizationId, aclId);
        // TODO: test validations
    }

    /**
     * List adaptive policy ACLs in a organization
     *
     * List adaptive policy ACLs in a organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationAdaptivePolicyAcls_1Test() throws ApiException {
        String organizationId = null;
        List<Object> response = api.getOrganizationAdaptivePolicyAcls_1(organizationId);
        // TODO: test validations
    }

    /**
     * Returns an adaptive policy group
     *
     * Returns an adaptive policy group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationAdaptivePolicyGroup_1Test() throws ApiException {
        String organizationId = null;
        String id = null;
        Object response = api.getOrganizationAdaptivePolicyGroup_1(organizationId, id);
        // TODO: test validations
    }

    /**
     * List adaptive policy groups in a organization
     *
     * List adaptive policy groups in a organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationAdaptivePolicyGroups_1Test() throws ApiException {
        String organizationId = null;
        List<Object> response = api.getOrganizationAdaptivePolicyGroups_1(organizationId);
        // TODO: test validations
    }

    /**
     * Returns adaptive policy aggregate statistics for an organization
     *
     * Returns adaptive policy aggregate statistics for an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationAdaptivePolicyOverview_1Test() throws ApiException {
        String organizationId = null;
        GetOrganizationAdaptivePolicyOverview200Response response = api.getOrganizationAdaptivePolicyOverview_1(organizationId);
        // TODO: test validations
    }

    /**
     * List adaptive policies in an organization
     *
     * List adaptive policies in an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationAdaptivePolicyPolicies_1Test() throws ApiException {
        String organizationId = null;
        List<Object> response = api.getOrganizationAdaptivePolicyPolicies_1(organizationId);
        // TODO: test validations
    }

    /**
     * Return an adaptive policy
     *
     * Return an adaptive policy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationAdaptivePolicyPolicy_1Test() throws ApiException {
        String organizationId = null;
        String id = null;
        Object response = api.getOrganizationAdaptivePolicyPolicy_1(organizationId, id);
        // TODO: test validations
    }

    /**
     * Returns global adaptive policy settings in an organization
     *
     * Returns global adaptive policy settings in an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationAdaptivePolicySettings_1Test() throws ApiException {
        String organizationId = null;
        Object response = api.getOrganizationAdaptivePolicySettings_1(organizationId);
        // TODO: test validations
    }

    /**
     * Updates an adaptive policy ACL
     *
     * Updates an adaptive policy ACL
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationAdaptivePolicyAcl_1Test() throws ApiException {
        String organizationId = null;
        String aclId = null;
        UpdateOrganizationAdaptivePolicyAclRequest updateOrganizationAdaptivePolicyAclRequest = null;
        Object response = api.updateOrganizationAdaptivePolicyAcl_1(organizationId, aclId, updateOrganizationAdaptivePolicyAclRequest);
        // TODO: test validations
    }

    /**
     * Updates an adaptive policy group
     *
     * Updates an adaptive policy group. If updating \&quot;Infrastructure\&quot;, only the SGT is allowed. Cannot update \&quot;Unknown\&quot;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationAdaptivePolicyGroup_1Test() throws ApiException {
        String organizationId = null;
        String id = null;
        UpdateOrganizationAdaptivePolicyGroupRequest updateOrganizationAdaptivePolicyGroupRequest = null;
        Object response = api.updateOrganizationAdaptivePolicyGroup_1(organizationId, id, updateOrganizationAdaptivePolicyGroupRequest);
        // TODO: test validations
    }

    /**
     * Update an Adaptive Policy
     *
     * Update an Adaptive Policy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationAdaptivePolicyPolicy_1Test() throws ApiException {
        String organizationId = null;
        String id = null;
        UpdateOrganizationAdaptivePolicyPolicyRequest updateOrganizationAdaptivePolicyPolicyRequest = null;
        Object response = api.updateOrganizationAdaptivePolicyPolicy_1(organizationId, id, updateOrganizationAdaptivePolicyPolicyRequest);
        // TODO: test validations
    }

    /**
     * Update global adaptive policy settings
     *
     * Update global adaptive policy settings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationAdaptivePolicySettings_1Test() throws ApiException {
        String organizationId = null;
        UpdateOrganizationAdaptivePolicySettingsRequest updateOrganizationAdaptivePolicySettingsRequest = null;
        Object response = api.updateOrganizationAdaptivePolicySettings_1(organizationId, updateOrganizationAdaptivePolicySettingsRequest);
        // TODO: test validations
    }

}
