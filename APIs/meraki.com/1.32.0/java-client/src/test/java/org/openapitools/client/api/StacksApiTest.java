/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddNetworkSwitchStackRequest;
import org.openapitools.client.model.CreateDeviceSwitchRoutingStaticRouteRequest;
import org.openapitools.client.model.CreateNetworkSwitchStackRequest;
import org.openapitools.client.model.CreateNetworkSwitchStackRoutingInterfaceRequest;
import org.openapitools.client.model.GetNetworkSwitchStack200Response;
import org.openapitools.client.model.RemoveNetworkSwitchStackRequest;
import org.openapitools.client.model.UpdateDeviceSwitchRoutingStaticRouteRequest;
import org.openapitools.client.model.UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest;
import org.openapitools.client.model.UpdateNetworkSwitchStackRoutingInterfaceRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for StacksApi
 */
@Disabled
public class StacksApiTest {

    private final StacksApi api = new StacksApi();

    /**
     * Add a switch to a stack
     *
     * Add a switch to a stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addNetworkSwitchStack_1Test() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        AddNetworkSwitchStackRequest addNetworkSwitchStackRequest = null;
        Object response = api.addNetworkSwitchStack_1(networkId, switchStackId, addNetworkSwitchStackRequest);
        // TODO: test validations
    }

    /**
     * Create a layer 3 interface for a switch stack
     *
     * Create a layer 3 interface for a switch stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkSwitchStackRoutingInterface_1Test() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        CreateNetworkSwitchStackRoutingInterfaceRequest createNetworkSwitchStackRoutingInterfaceRequest = null;
        Object response = api.createNetworkSwitchStackRoutingInterface_1(networkId, switchStackId, createNetworkSwitchStackRoutingInterfaceRequest);
        // TODO: test validations
    }

    /**
     * Create a layer 3 static route for a switch stack
     *
     * Create a layer 3 static route for a switch stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkSwitchStackRoutingStaticRoute_1Test() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        CreateDeviceSwitchRoutingStaticRouteRequest createDeviceSwitchRoutingStaticRouteRequest = null;
        Object response = api.createNetworkSwitchStackRoutingStaticRoute_1(networkId, switchStackId, createDeviceSwitchRoutingStaticRouteRequest);
        // TODO: test validations
    }

    /**
     * Create a stack
     *
     * Create a stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkSwitchStack_1Test() throws ApiException {
        String networkId = null;
        CreateNetworkSwitchStackRequest createNetworkSwitchStackRequest = null;
        Object response = api.createNetworkSwitchStack_1(networkId, createNetworkSwitchStackRequest);
        // TODO: test validations
    }

    /**
     * Delete a layer 3 interface from a switch stack
     *
     * Delete a layer 3 interface from a switch stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkSwitchStackRoutingInterface_1Test() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        String interfaceId = null;
        api.deleteNetworkSwitchStackRoutingInterface_1(networkId, switchStackId, interfaceId);
        // TODO: test validations
    }

    /**
     * Delete a layer 3 static route for a switch stack
     *
     * Delete a layer 3 static route for a switch stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkSwitchStackRoutingStaticRoute_1Test() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        String staticRouteId = null;
        api.deleteNetworkSwitchStackRoutingStaticRoute_1(networkId, switchStackId, staticRouteId);
        // TODO: test validations
    }

    /**
     * Delete a stack
     *
     * Delete a stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkSwitchStack_1Test() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        api.deleteNetworkSwitchStack_1(networkId, switchStackId);
        // TODO: test validations
    }

    /**
     * Return a layer 3 interface DHCP configuration for a switch stack
     *
     * Return a layer 3 interface DHCP configuration for a switch stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchStackRoutingInterfaceDhcp_1Test() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        String interfaceId = null;
        Object response = api.getNetworkSwitchStackRoutingInterfaceDhcp_1(networkId, switchStackId, interfaceId);
        // TODO: test validations
    }

    /**
     * Return a layer 3 interface from a switch stack
     *
     * Return a layer 3 interface from a switch stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchStackRoutingInterface_1Test() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        String interfaceId = null;
        Object response = api.getNetworkSwitchStackRoutingInterface_1(networkId, switchStackId, interfaceId);
        // TODO: test validations
    }

    /**
     * List layer 3 interfaces for a switch stack
     *
     * List layer 3 interfaces for a switch stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchStackRoutingInterfaces_1Test() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        List<Object> response = api.getNetworkSwitchStackRoutingInterfaces_1(networkId, switchStackId);
        // TODO: test validations
    }

    /**
     * Return a layer 3 static route for a switch stack
     *
     * Return a layer 3 static route for a switch stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchStackRoutingStaticRoute_1Test() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        String staticRouteId = null;
        Object response = api.getNetworkSwitchStackRoutingStaticRoute_1(networkId, switchStackId, staticRouteId);
        // TODO: test validations
    }

    /**
     * List layer 3 static routes for a switch stack
     *
     * List layer 3 static routes for a switch stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchStackRoutingStaticRoutes_1Test() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        List<Object> response = api.getNetworkSwitchStackRoutingStaticRoutes_1(networkId, switchStackId);
        // TODO: test validations
    }

    /**
     * Show a switch stack
     *
     * Show a switch stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchStack_1Test() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        GetNetworkSwitchStack200Response response = api.getNetworkSwitchStack_1(networkId, switchStackId);
        // TODO: test validations
    }

    /**
     * List the switch stacks in a network
     *
     * List the switch stacks in a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchStacks_1Test() throws ApiException {
        String networkId = null;
        List<Object> response = api.getNetworkSwitchStacks_1(networkId);
        // TODO: test validations
    }

    /**
     * Remove a switch from a stack
     *
     * Remove a switch from a stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeNetworkSwitchStack_1Test() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        RemoveNetworkSwitchStackRequest removeNetworkSwitchStackRequest = null;
        Object response = api.removeNetworkSwitchStack_1(networkId, switchStackId, removeNetworkSwitchStackRequest);
        // TODO: test validations
    }

    /**
     * Update a layer 3 interface DHCP configuration for a switch stack
     *
     * Update a layer 3 interface DHCP configuration for a switch stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSwitchStackRoutingInterfaceDhcp_1Test() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        String interfaceId = null;
        UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest updateNetworkSwitchStackRoutingInterfaceDhcpRequest = null;
        Object response = api.updateNetworkSwitchStackRoutingInterfaceDhcp_1(networkId, switchStackId, interfaceId, updateNetworkSwitchStackRoutingInterfaceDhcpRequest);
        // TODO: test validations
    }

    /**
     * Update a layer 3 interface for a switch stack
     *
     * Update a layer 3 interface for a switch stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSwitchStackRoutingInterface_1Test() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        String interfaceId = null;
        UpdateNetworkSwitchStackRoutingInterfaceRequest updateNetworkSwitchStackRoutingInterfaceRequest = null;
        Object response = api.updateNetworkSwitchStackRoutingInterface_1(networkId, switchStackId, interfaceId, updateNetworkSwitchStackRoutingInterfaceRequest);
        // TODO: test validations
    }

    /**
     * Update a layer 3 static route for a switch stack
     *
     * Update a layer 3 static route for a switch stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSwitchStackRoutingStaticRoute_1Test() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        String staticRouteId = null;
        UpdateDeviceSwitchRoutingStaticRouteRequest updateDeviceSwitchRoutingStaticRouteRequest = null;
        Object response = api.updateNetworkSwitchStackRoutingStaticRoute_1(networkId, switchStackId, staticRouteId, updateDeviceSwitchRoutingStaticRouteRequest);
        // TODO: test validations
    }

}
