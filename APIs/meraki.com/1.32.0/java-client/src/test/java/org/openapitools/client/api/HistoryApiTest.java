/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GetNetworkAlertsHistory200ResponseInner;
import org.openapitools.client.model.GetOrganizationSensorReadingsHistory200ResponseInner;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for HistoryApi
 */
@Disabled
public class HistoryApiTest {

    private final HistoryApi api = new HistoryApi();

    /**
     * Return historical records for analytic zones
     *
     * Return historical records for analytic zones
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceCameraAnalyticsZoneHistory_3Test() throws ApiException {
        String serial = null;
        String zoneId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        Integer resolution = null;
        String objectType = null;
        List<Object> response = api.getDeviceCameraAnalyticsZoneHistory_3(serial, zoneId, t0, t1, timespan, resolution, objectType);
        // TODO: test validations
    }

    /**
     * Return the alert history for this network
     *
     * Return the alert history for this network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkAlertsHistory_2Test() throws ApiException {
        String networkId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<GetNetworkAlertsHistory200ResponseInner> response = api.getNetworkAlertsHistory_2(networkId, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * Return all reported readings from sensors in a given timespan, sorted by timestamp
     *
     * Return all reported readings from sensors in a given timespan, sorted by timestamp
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationSensorReadingsHistory_2Test() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        List<String> networkIds = null;
        List<String> serials = null;
        List<String> metrics = null;
        List<GetOrganizationSensorReadingsHistory200ResponseInner> response = api.getOrganizationSensorReadingsHistory_2(organizationId, perPage, startingAfter, endingBefore, t0, t1, timespan, networkIds, serials, metrics);
        // TODO: test validations
    }

}
