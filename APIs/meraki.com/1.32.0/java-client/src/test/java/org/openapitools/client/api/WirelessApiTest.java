/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateNetworkWirelessRfProfile201Response;
import org.openapitools.client.model.CreateNetworkWirelessRfProfileRequest;
import org.openapitools.client.model.CreateNetworkWirelessSsidIdentityPskRequest;
import org.openapitools.client.model.GetDeviceWirelessBluetoothSettings200Response;
import org.openapitools.client.model.GetDeviceWirelessConnectionStats200Response;
import org.openapitools.client.model.GetNetworkWirelessBluetoothSettings200Response;
import org.openapitools.client.model.GetNetworkWirelessChannelUtilizationHistory200ResponseInner;
import org.openapitools.client.model.GetNetworkWirelessClientCountHistory200ResponseInner;
import org.openapitools.client.model.GetNetworkWirelessConnectionStats200Response;
import org.openapitools.client.model.GetNetworkWirelessDataRateHistory200ResponseInner;
import org.openapitools.client.model.GetNetworkWirelessFailedConnections200ResponseInner;
import org.openapitools.client.model.GetNetworkWirelessLatencyHistory200ResponseInner;
import org.openapitools.client.model.GetNetworkWirelessSettings200Response;
import org.openapitools.client.model.GetNetworkWirelessSignalQualityHistory200ResponseInner;
import org.openapitools.client.model.GetNetworkWirelessSsidEapOverride200Response;
import org.openapitools.client.model.GetNetworkWirelessSsidIdentityPsks200ResponseInner;
import org.openapitools.client.model.GetNetworkWirelessSsidSplashSettings200Response;
import org.openapitools.client.model.GetNetworkWirelessUsageHistory200ResponseInner;
import org.openapitools.client.model.GetOrganizationWirelessDevicesEthernetStatuses200ResponseInner;
import org.openapitools.client.model.UpdateDeviceWirelessBluetoothSettingsRequest;
import org.openapitools.client.model.UpdateDeviceWirelessRadioSettingsRequest;
import org.openapitools.client.model.UpdateNetworkWirelessAlternateManagementInterfaceRequest;
import org.openapitools.client.model.UpdateNetworkWirelessBillingRequest;
import org.openapitools.client.model.UpdateNetworkWirelessBluetoothSettingsRequest;
import org.openapitools.client.model.UpdateNetworkWirelessRfProfileRequest;
import org.openapitools.client.model.UpdateNetworkWirelessSettingsRequest;
import org.openapitools.client.model.UpdateNetworkWirelessSsidBonjourForwardingRequest;
import org.openapitools.client.model.UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesRequest;
import org.openapitools.client.model.UpdateNetworkWirelessSsidEapOverrideRequest;
import org.openapitools.client.model.UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequest;
import org.openapitools.client.model.UpdateNetworkWirelessSsidFirewallL7FirewallRulesRequest;
import org.openapitools.client.model.UpdateNetworkWirelessSsidHotspot20Request;
import org.openapitools.client.model.UpdateNetworkWirelessSsidIdentityPskRequest;
import org.openapitools.client.model.UpdateNetworkWirelessSsidRequest;
import org.openapitools.client.model.UpdateNetworkWirelessSsidSchedulesRequest;
import org.openapitools.client.model.UpdateNetworkWirelessSsidSplashSettingsRequest;
import org.openapitools.client.model.UpdateNetworkWirelessSsidTrafficShapingRulesRequest;
import org.openapitools.client.model.UpdateNetworkWirelessSsidVpnRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WirelessApi
 */
@Disabled
public class WirelessApiTest {

    private final WirelessApi api = new WirelessApi();

    /**
     * Creates new RF profile for this network
     *
     * Creates new RF profile for this network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkWirelessRfProfileTest() throws ApiException {
        String networkId = null;
        CreateNetworkWirelessRfProfileRequest createNetworkWirelessRfProfileRequest = null;
        CreateNetworkWirelessRfProfile201Response response = api.createNetworkWirelessRfProfile(networkId, createNetworkWirelessRfProfileRequest);
        // TODO: test validations
    }

    /**
     * Create an Identity PSK
     *
     * Create an Identity PSK
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkWirelessSsidIdentityPskTest() throws ApiException {
        String networkId = null;
        String number = null;
        CreateNetworkWirelessSsidIdentityPskRequest createNetworkWirelessSsidIdentityPskRequest = null;
        Object response = api.createNetworkWirelessSsidIdentityPsk(networkId, number, createNetworkWirelessSsidIdentityPskRequest);
        // TODO: test validations
    }

    /**
     * Delete a RF Profile
     *
     * Delete a RF Profile
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkWirelessRfProfileTest() throws ApiException {
        String networkId = null;
        String rfProfileId = null;
        api.deleteNetworkWirelessRfProfile(networkId, rfProfileId);
        // TODO: test validations
    }

    /**
     * Delete an Identity PSK
     *
     * Delete an Identity PSK
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkWirelessSsidIdentityPskTest() throws ApiException {
        String networkId = null;
        String number = null;
        String identityPskId = null;
        api.deleteNetworkWirelessSsidIdentityPsk(networkId, number, identityPskId);
        // TODO: test validations
    }

    /**
     * Return the bluetooth settings for a wireless device
     *
     * Return the bluetooth settings for a wireless device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceWirelessBluetoothSettingsTest() throws ApiException {
        String serial = null;
        GetDeviceWirelessBluetoothSettings200Response response = api.getDeviceWirelessBluetoothSettings(serial);
        // TODO: test validations
    }

    /**
     * Aggregated connectivity info for a given AP on this network
     *
     * Aggregated connectivity info for a given AP on this network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceWirelessConnectionStatsTest() throws ApiException {
        String serial = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        String band = null;
        Integer ssid = null;
        Integer vlan = null;
        String apTag = null;
        GetDeviceWirelessConnectionStats200Response response = api.getDeviceWirelessConnectionStats(serial, t0, t1, timespan, band, ssid, vlan, apTag);
        // TODO: test validations
    }

    /**
     * Aggregated latency info for a given AP on this network
     *
     * Aggregated latency info for a given AP on this network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceWirelessLatencyStatsTest() throws ApiException {
        String serial = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        String band = null;
        Integer ssid = null;
        Integer vlan = null;
        String apTag = null;
        String fields = null;
        Object response = api.getDeviceWirelessLatencyStats(serial, t0, t1, timespan, band, ssid, vlan, apTag, fields);
        // TODO: test validations
    }

    /**
     * Return the radio settings of a device
     *
     * Return the radio settings of a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceWirelessRadioSettingsTest() throws ApiException {
        String serial = null;
        Object response = api.getDeviceWirelessRadioSettings(serial);
        // TODO: test validations
    }

    /**
     * Return the SSID statuses of an access point
     *
     * Return the SSID statuses of an access point
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceWirelessStatusTest() throws ApiException {
        String serial = null;
        Object response = api.getDeviceWirelessStatus(serial);
        // TODO: test validations
    }

    /**
     * List Air Marshal scan results from a network
     *
     * List Air Marshal scan results from a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessAirMarshalTest() throws ApiException {
        String networkId = null;
        String t0 = null;
        Float timespan = null;
        List<Object> response = api.getNetworkWirelessAirMarshal(networkId, t0, timespan);
        // TODO: test validations
    }

    /**
     * Return alternate management interface and devices with IP assigned
     *
     * Return alternate management interface and devices with IP assigned
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessAlternateManagementInterfaceTest() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkWirelessAlternateManagementInterface(networkId);
        // TODO: test validations
    }

    /**
     * Return the billing settings of this network
     *
     * Return the billing settings of this network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessBillingTest() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkWirelessBilling(networkId);
        // TODO: test validations
    }

    /**
     * Return the Bluetooth settings for a network. &lt;a href&#x3D;\&quot;https://documentation.meraki.com/MR/Bluetooth/Bluetooth_Low_Energy_(BLE)\&quot;&gt;Bluetooth settings&lt;/a&gt; must be enabled on the network.
     *
     * Return the Bluetooth settings for a network. &lt;a href&#x3D;\&quot;https://documentation.meraki.com/MR/Bluetooth/Bluetooth_Low_Energy_(BLE)\&quot;&gt;Bluetooth settings&lt;/a&gt; must be enabled on the network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessBluetoothSettingsTest() throws ApiException {
        String networkId = null;
        GetNetworkWirelessBluetoothSettings200Response response = api.getNetworkWirelessBluetoothSettings(networkId);
        // TODO: test validations
    }

    /**
     * Return AP channel utilization over time for a device or network client
     *
     * Return AP channel utilization over time for a device or network client
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessChannelUtilizationHistoryTest() throws ApiException {
        String networkId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        Integer resolution = null;
        Boolean autoResolution = null;
        String clientId = null;
        String deviceSerial = null;
        String apTag = null;
        String band = null;
        List<GetNetworkWirelessChannelUtilizationHistory200ResponseInner> response = api.getNetworkWirelessChannelUtilizationHistory(networkId, t0, t1, timespan, resolution, autoResolution, clientId, deviceSerial, apTag, band);
        // TODO: test validations
    }

    /**
     * Aggregated connectivity info for a given client on this network
     *
     * Aggregated connectivity info for a given client on this network. Clients are identified by their MAC.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessClientConnectionStatsTest() throws ApiException {
        String networkId = null;
        String clientId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        String band = null;
        Integer ssid = null;
        Integer vlan = null;
        String apTag = null;
        Object response = api.getNetworkWirelessClientConnectionStats(networkId, clientId, t0, t1, timespan, band, ssid, vlan, apTag);
        // TODO: test validations
    }

    /**
     * List the wireless connectivity events for a client within a network in the timespan.
     *
     * List the wireless connectivity events for a client within a network in the timespan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessClientConnectivityEventsTest() throws ApiException {
        String networkId = null;
        String clientId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        List<String> types = null;
        List<String> includedSeverities = null;
        String band = null;
        Integer ssidNumber = null;
        String deviceSerial = null;
        List<Object> response = api.getNetworkWirelessClientConnectivityEvents(networkId, clientId, perPage, startingAfter, endingBefore, t0, t1, timespan, types, includedSeverities, band, ssidNumber, deviceSerial);
        // TODO: test validations
    }

    /**
     * Return wireless client counts over time for a network, device, or network client
     *
     * Return wireless client counts over time for a network, device, or network client
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessClientCountHistoryTest() throws ApiException {
        String networkId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        Integer resolution = null;
        Boolean autoResolution = null;
        String clientId = null;
        String deviceSerial = null;
        String apTag = null;
        String band = null;
        Integer ssid = null;
        List<GetNetworkWirelessClientCountHistory200ResponseInner> response = api.getNetworkWirelessClientCountHistory(networkId, t0, t1, timespan, resolution, autoResolution, clientId, deviceSerial, apTag, band, ssid);
        // TODO: test validations
    }

    /**
     * Return the latency history for a client
     *
     * Return the latency history for a client. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP. The latency data is from a sample of 2% of packets and is grouped into 4 traffic categories: background, best effort, video, voice. Within these categories the sampled packet counters are bucketed by latency in milliseconds.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessClientLatencyHistoryTest() throws ApiException {
        String networkId = null;
        String clientId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        Integer resolution = null;
        List<Object> response = api.getNetworkWirelessClientLatencyHistory(networkId, clientId, t0, t1, timespan, resolution);
        // TODO: test validations
    }

    /**
     * Aggregated latency info for a given client on this network
     *
     * Aggregated latency info for a given client on this network. Clients are identified by their MAC.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessClientLatencyStatsTest() throws ApiException {
        String networkId = null;
        String clientId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        String band = null;
        Integer ssid = null;
        Integer vlan = null;
        String apTag = null;
        String fields = null;
        Object response = api.getNetworkWirelessClientLatencyStats(networkId, clientId, t0, t1, timespan, band, ssid, vlan, apTag, fields);
        // TODO: test validations
    }

    /**
     * Aggregated connectivity info for this network, grouped by clients
     *
     * Aggregated connectivity info for this network, grouped by clients
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessClientsConnectionStatsTest() throws ApiException {
        String networkId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        String band = null;
        Integer ssid = null;
        Integer vlan = null;
        String apTag = null;
        List<Object> response = api.getNetworkWirelessClientsConnectionStats(networkId, t0, t1, timespan, band, ssid, vlan, apTag);
        // TODO: test validations
    }

    /**
     * Aggregated latency info for this network, grouped by clients
     *
     * Aggregated latency info for this network, grouped by clients
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessClientsLatencyStatsTest() throws ApiException {
        String networkId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        String band = null;
        Integer ssid = null;
        Integer vlan = null;
        String apTag = null;
        String fields = null;
        List<Object> response = api.getNetworkWirelessClientsLatencyStats(networkId, t0, t1, timespan, band, ssid, vlan, apTag, fields);
        // TODO: test validations
    }

    /**
     * Aggregated connectivity info for this network
     *
     * Aggregated connectivity info for this network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessConnectionStatsTest() throws ApiException {
        String networkId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        String band = null;
        Integer ssid = null;
        Integer vlan = null;
        String apTag = null;
        GetNetworkWirelessConnectionStats200Response response = api.getNetworkWirelessConnectionStats(networkId, t0, t1, timespan, band, ssid, vlan, apTag);
        // TODO: test validations
    }

    /**
     * Return PHY data rates over time for a network, device, or network client
     *
     * Return PHY data rates over time for a network, device, or network client
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessDataRateHistoryTest() throws ApiException {
        String networkId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        Integer resolution = null;
        Boolean autoResolution = null;
        String clientId = null;
        String deviceSerial = null;
        String apTag = null;
        String band = null;
        Integer ssid = null;
        List<GetNetworkWirelessDataRateHistory200ResponseInner> response = api.getNetworkWirelessDataRateHistory(networkId, t0, t1, timespan, resolution, autoResolution, clientId, deviceSerial, apTag, band, ssid);
        // TODO: test validations
    }

    /**
     * Aggregated connectivity info for this network, grouped by node
     *
     * Aggregated connectivity info for this network, grouped by node
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessDevicesConnectionStatsTest() throws ApiException {
        String networkId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        String band = null;
        Integer ssid = null;
        Integer vlan = null;
        String apTag = null;
        List<GetDeviceWirelessConnectionStats200Response> response = api.getNetworkWirelessDevicesConnectionStats(networkId, t0, t1, timespan, band, ssid, vlan, apTag);
        // TODO: test validations
    }

    /**
     * Aggregated latency info for this network, grouped by node
     *
     * Aggregated latency info for this network, grouped by node
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessDevicesLatencyStatsTest() throws ApiException {
        String networkId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        String band = null;
        Integer ssid = null;
        Integer vlan = null;
        String apTag = null;
        String fields = null;
        List<Object> response = api.getNetworkWirelessDevicesLatencyStats(networkId, t0, t1, timespan, band, ssid, vlan, apTag, fields);
        // TODO: test validations
    }

    /**
     * List of all failed client connection events on this network in a given time range
     *
     * List of all failed client connection events on this network in a given time range
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessFailedConnectionsTest() throws ApiException {
        String networkId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        String band = null;
        Integer ssid = null;
        Integer vlan = null;
        String apTag = null;
        String serial = null;
        String clientId = null;
        List<GetNetworkWirelessFailedConnections200ResponseInner> response = api.getNetworkWirelessFailedConnections(networkId, t0, t1, timespan, band, ssid, vlan, apTag, serial, clientId);
        // TODO: test validations
    }

    /**
     * Return average wireless latency over time for a network, device, or network client
     *
     * Return average wireless latency over time for a network, device, or network client
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessLatencyHistoryTest() throws ApiException {
        String networkId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        Integer resolution = null;
        Boolean autoResolution = null;
        String clientId = null;
        String deviceSerial = null;
        String apTag = null;
        String band = null;
        Integer ssid = null;
        String accessCategory = null;
        List<GetNetworkWirelessLatencyHistory200ResponseInner> response = api.getNetworkWirelessLatencyHistory(networkId, t0, t1, timespan, resolution, autoResolution, clientId, deviceSerial, apTag, band, ssid, accessCategory);
        // TODO: test validations
    }

    /**
     * Aggregated latency info for this network
     *
     * Aggregated latency info for this network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessLatencyStatsTest() throws ApiException {
        String networkId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        String band = null;
        Integer ssid = null;
        Integer vlan = null;
        String apTag = null;
        String fields = null;
        Object response = api.getNetworkWirelessLatencyStats(networkId, t0, t1, timespan, band, ssid, vlan, apTag, fields);
        // TODO: test validations
    }

    /**
     * List wireless mesh statuses for repeaters
     *
     * List wireless mesh statuses for repeaters
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessMeshStatusesTest() throws ApiException {
        String networkId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        Object response = api.getNetworkWirelessMeshStatuses(networkId, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * Return a RF profile
     *
     * Return a RF profile
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessRfProfileTest() throws ApiException {
        String networkId = null;
        String rfProfileId = null;
        Object response = api.getNetworkWirelessRfProfile(networkId, rfProfileId);
        // TODO: test validations
    }

    /**
     * List the non-basic RF profiles for this network
     *
     * List the non-basic RF profiles for this network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessRfProfilesTest() throws ApiException {
        String networkId = null;
        Boolean includeTemplateProfiles = null;
        List<Object> response = api.getNetworkWirelessRfProfiles(networkId, includeTemplateProfiles);
        // TODO: test validations
    }

    /**
     * Return the wireless settings for a network
     *
     * Return the wireless settings for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessSettingsTest() throws ApiException {
        String networkId = null;
        GetNetworkWirelessSettings200Response response = api.getNetworkWirelessSettings(networkId);
        // TODO: test validations
    }

    /**
     * Return signal quality (SNR/RSSI) over time for a device or network client
     *
     * Return signal quality (SNR/RSSI) over time for a device or network client
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessSignalQualityHistoryTest() throws ApiException {
        String networkId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        Integer resolution = null;
        Boolean autoResolution = null;
        String clientId = null;
        String deviceSerial = null;
        String apTag = null;
        String band = null;
        Integer ssid = null;
        List<GetNetworkWirelessSignalQualityHistory200ResponseInner> response = api.getNetworkWirelessSignalQualityHistory(networkId, t0, t1, timespan, resolution, autoResolution, clientId, deviceSerial, apTag, band, ssid);
        // TODO: test validations
    }

    /**
     * Return a single MR SSID
     *
     * Return a single MR SSID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessSsidTest() throws ApiException {
        String networkId = null;
        String number = null;
        Object response = api.getNetworkWirelessSsid(networkId, number);
        // TODO: test validations
    }

    /**
     * List the Bonjour forwarding setting and rules for the SSID
     *
     * List the Bonjour forwarding setting and rules for the SSID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessSsidBonjourForwardingTest() throws ApiException {
        String networkId = null;
        String number = null;
        Object response = api.getNetworkWirelessSsidBonjourForwarding(networkId, number);
        // TODO: test validations
    }

    /**
     * List the device type group policies for the SSID
     *
     * List the device type group policies for the SSID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessSsidDeviceTypeGroupPoliciesTest() throws ApiException {
        String networkId = null;
        String number = null;
        Object response = api.getNetworkWirelessSsidDeviceTypeGroupPolicies(networkId, number);
        // TODO: test validations
    }

    /**
     * Return the EAP overridden parameters for an SSID
     *
     * Return the EAP overridden parameters for an SSID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessSsidEapOverrideTest() throws ApiException {
        String networkId = null;
        String number = null;
        GetNetworkWirelessSsidEapOverride200Response response = api.getNetworkWirelessSsidEapOverride(networkId, number);
        // TODO: test validations
    }

    /**
     * Return the L3 firewall rules for an SSID on an MR network
     *
     * Return the L3 firewall rules for an SSID on an MR network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessSsidFirewallL3FirewallRulesTest() throws ApiException {
        String networkId = null;
        String number = null;
        Object response = api.getNetworkWirelessSsidFirewallL3FirewallRules(networkId, number);
        // TODO: test validations
    }

    /**
     * Return the L7 firewall rules for an SSID on an MR network
     *
     * Return the L7 firewall rules for an SSID on an MR network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessSsidFirewallL7FirewallRulesTest() throws ApiException {
        String networkId = null;
        String number = null;
        Object response = api.getNetworkWirelessSsidFirewallL7FirewallRules(networkId, number);
        // TODO: test validations
    }

    /**
     * Return the Hotspot 2.0 settings for an SSID
     *
     * Return the Hotspot 2.0 settings for an SSID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessSsidHotspot20Test() throws ApiException {
        String networkId = null;
        String number = null;
        Object response = api.getNetworkWirelessSsidHotspot20(networkId, number);
        // TODO: test validations
    }

    /**
     * Return an Identity PSK
     *
     * Return an Identity PSK
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessSsidIdentityPskTest() throws ApiException {
        String networkId = null;
        String number = null;
        String identityPskId = null;
        GetNetworkWirelessSsidIdentityPsks200ResponseInner response = api.getNetworkWirelessSsidIdentityPsk(networkId, number, identityPskId);
        // TODO: test validations
    }

    /**
     * List all Identity PSKs in a wireless network
     *
     * List all Identity PSKs in a wireless network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessSsidIdentityPsksTest() throws ApiException {
        String networkId = null;
        String number = null;
        List<GetNetworkWirelessSsidIdentityPsks200ResponseInner> response = api.getNetworkWirelessSsidIdentityPsks(networkId, number);
        // TODO: test validations
    }

    /**
     * List the outage schedule for the SSID
     *
     * List the outage schedule for the SSID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessSsidSchedulesTest() throws ApiException {
        String networkId = null;
        String number = null;
        Object response = api.getNetworkWirelessSsidSchedules(networkId, number);
        // TODO: test validations
    }

    /**
     * Display the splash page settings for the given SSID
     *
     * Display the splash page settings for the given SSID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessSsidSplashSettingsTest() throws ApiException {
        String networkId = null;
        String number = null;
        GetNetworkWirelessSsidSplashSettings200Response response = api.getNetworkWirelessSsidSplashSettings(networkId, number);
        // TODO: test validations
    }

    /**
     * Display the traffic shaping settings for a SSID on an MR network
     *
     * Display the traffic shaping settings for a SSID on an MR network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessSsidTrafficShapingRulesTest() throws ApiException {
        String networkId = null;
        String number = null;
        Object response = api.getNetworkWirelessSsidTrafficShapingRules(networkId, number);
        // TODO: test validations
    }

    /**
     * List the VPN settings for the SSID.
     *
     * List the VPN settings for the SSID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessSsidVpnTest() throws ApiException {
        String networkId = null;
        String number = null;
        Object response = api.getNetworkWirelessSsidVpn(networkId, number);
        // TODO: test validations
    }

    /**
     * List the MR SSIDs in a network
     *
     * List the MR SSIDs in a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessSsidsTest() throws ApiException {
        String networkId = null;
        List<Object> response = api.getNetworkWirelessSsids(networkId);
        // TODO: test validations
    }

    /**
     * Return AP usage over time for a device or network client
     *
     * Return AP usage over time for a device or network client
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessUsageHistoryTest() throws ApiException {
        String networkId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        Integer resolution = null;
        Boolean autoResolution = null;
        String clientId = null;
        String deviceSerial = null;
        String apTag = null;
        String band = null;
        Integer ssid = null;
        List<GetNetworkWirelessUsageHistory200ResponseInner> response = api.getNetworkWirelessUsageHistory(networkId, t0, t1, timespan, resolution, autoResolution, clientId, deviceSerial, apTag, band, ssid);
        // TODO: test validations
    }

    /**
     * Endpoint to see power status for wireless devices
     *
     * Endpoint to see power status for wireless devices
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationWirelessDevicesEthernetStatusesTest() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<String> networkIds = null;
        List<GetOrganizationWirelessDevicesEthernetStatuses200ResponseInner> response = api.getOrganizationWirelessDevicesEthernetStatuses(organizationId, perPage, startingAfter, endingBefore, networkIds);
        // TODO: test validations
    }

    /**
     * Update the bluetooth settings for a wireless device
     *
     * Update the bluetooth settings for a wireless device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeviceWirelessBluetoothSettingsTest() throws ApiException {
        String serial = null;
        UpdateDeviceWirelessBluetoothSettingsRequest updateDeviceWirelessBluetoothSettingsRequest = null;
        GetDeviceWirelessBluetoothSettings200Response response = api.updateDeviceWirelessBluetoothSettings(serial, updateDeviceWirelessBluetoothSettingsRequest);
        // TODO: test validations
    }

    /**
     * Update the radio settings of a device
     *
     * Update the radio settings of a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeviceWirelessRadioSettingsTest() throws ApiException {
        String serial = null;
        UpdateDeviceWirelessRadioSettingsRequest updateDeviceWirelessRadioSettingsRequest = null;
        Object response = api.updateDeviceWirelessRadioSettings(serial, updateDeviceWirelessRadioSettingsRequest);
        // TODO: test validations
    }

    /**
     * Update alternate management interface and device static IP
     *
     * Update alternate management interface and device static IP
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkWirelessAlternateManagementInterfaceTest() throws ApiException {
        String networkId = null;
        UpdateNetworkWirelessAlternateManagementInterfaceRequest updateNetworkWirelessAlternateManagementInterfaceRequest = null;
        Object response = api.updateNetworkWirelessAlternateManagementInterface(networkId, updateNetworkWirelessAlternateManagementInterfaceRequest);
        // TODO: test validations
    }

    /**
     * Update the billing settings
     *
     * Update the billing settings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkWirelessBillingTest() throws ApiException {
        String networkId = null;
        UpdateNetworkWirelessBillingRequest updateNetworkWirelessBillingRequest = null;
        Object response = api.updateNetworkWirelessBilling(networkId, updateNetworkWirelessBillingRequest);
        // TODO: test validations
    }

    /**
     * Update the Bluetooth settings for a network
     *
     * Update the Bluetooth settings for a network. See the docs page for &lt;a href&#x3D;\&quot;https://documentation.meraki.com/MR/Bluetooth/Bluetooth_Low_Energy_(BLE)\&quot;&gt;Bluetooth settings&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkWirelessBluetoothSettingsTest() throws ApiException {
        String networkId = null;
        UpdateNetworkWirelessBluetoothSettingsRequest updateNetworkWirelessBluetoothSettingsRequest = null;
        GetNetworkWirelessBluetoothSettings200Response response = api.updateNetworkWirelessBluetoothSettings(networkId, updateNetworkWirelessBluetoothSettingsRequest);
        // TODO: test validations
    }

    /**
     * Updates specified RF profile for this network
     *
     * Updates specified RF profile for this network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkWirelessRfProfileTest() throws ApiException {
        String networkId = null;
        String rfProfileId = null;
        UpdateNetworkWirelessRfProfileRequest updateNetworkWirelessRfProfileRequest = null;
        CreateNetworkWirelessRfProfile201Response response = api.updateNetworkWirelessRfProfile(networkId, rfProfileId, updateNetworkWirelessRfProfileRequest);
        // TODO: test validations
    }

    /**
     * Update the wireless settings for a network
     *
     * Update the wireless settings for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkWirelessSettingsTest() throws ApiException {
        String networkId = null;
        UpdateNetworkWirelessSettingsRequest updateNetworkWirelessSettingsRequest = null;
        GetNetworkWirelessSettings200Response response = api.updateNetworkWirelessSettings(networkId, updateNetworkWirelessSettingsRequest);
        // TODO: test validations
    }

    /**
     * Update the attributes of an MR SSID
     *
     * Update the attributes of an MR SSID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkWirelessSsidTest() throws ApiException {
        String networkId = null;
        String number = null;
        UpdateNetworkWirelessSsidRequest updateNetworkWirelessSsidRequest = null;
        Object response = api.updateNetworkWirelessSsid(networkId, number, updateNetworkWirelessSsidRequest);
        // TODO: test validations
    }

    /**
     * Update the bonjour forwarding setting and rules for the SSID
     *
     * Update the bonjour forwarding setting and rules for the SSID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkWirelessSsidBonjourForwardingTest() throws ApiException {
        String networkId = null;
        String number = null;
        UpdateNetworkWirelessSsidBonjourForwardingRequest updateNetworkWirelessSsidBonjourForwardingRequest = null;
        Object response = api.updateNetworkWirelessSsidBonjourForwarding(networkId, number, updateNetworkWirelessSsidBonjourForwardingRequest);
        // TODO: test validations
    }

    /**
     * Update the device type group policies for the SSID
     *
     * Update the device type group policies for the SSID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkWirelessSsidDeviceTypeGroupPoliciesTest() throws ApiException {
        String networkId = null;
        String number = null;
        UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesRequest updateNetworkWirelessSsidDeviceTypeGroupPoliciesRequest = null;
        Object response = api.updateNetworkWirelessSsidDeviceTypeGroupPolicies(networkId, number, updateNetworkWirelessSsidDeviceTypeGroupPoliciesRequest);
        // TODO: test validations
    }

    /**
     * Update the EAP overridden parameters for an SSID.
     *
     * Update the EAP overridden parameters for an SSID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkWirelessSsidEapOverrideTest() throws ApiException {
        String networkId = null;
        String number = null;
        UpdateNetworkWirelessSsidEapOverrideRequest updateNetworkWirelessSsidEapOverrideRequest = null;
        GetNetworkWirelessSsidEapOverride200Response response = api.updateNetworkWirelessSsidEapOverride(networkId, number, updateNetworkWirelessSsidEapOverrideRequest);
        // TODO: test validations
    }

    /**
     * Update the L3 firewall rules of an SSID on an MR network
     *
     * Update the L3 firewall rules of an SSID on an MR network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkWirelessSsidFirewallL3FirewallRulesTest() throws ApiException {
        String networkId = null;
        String number = null;
        UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequest updateNetworkWirelessSsidFirewallL3FirewallRulesRequest = null;
        Object response = api.updateNetworkWirelessSsidFirewallL3FirewallRules(networkId, number, updateNetworkWirelessSsidFirewallL3FirewallRulesRequest);
        // TODO: test validations
    }

    /**
     * Update the L7 firewall rules of an SSID on an MR network
     *
     * Update the L7 firewall rules of an SSID on an MR network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkWirelessSsidFirewallL7FirewallRulesTest() throws ApiException {
        String networkId = null;
        String number = null;
        UpdateNetworkWirelessSsidFirewallL7FirewallRulesRequest updateNetworkWirelessSsidFirewallL7FirewallRulesRequest = null;
        Object response = api.updateNetworkWirelessSsidFirewallL7FirewallRules(networkId, number, updateNetworkWirelessSsidFirewallL7FirewallRulesRequest);
        // TODO: test validations
    }

    /**
     * Update the Hotspot 2.0 settings of an SSID
     *
     * Update the Hotspot 2.0 settings of an SSID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkWirelessSsidHotspot20Test() throws ApiException {
        String networkId = null;
        String number = null;
        UpdateNetworkWirelessSsidHotspot20Request updateNetworkWirelessSsidHotspot20Request = null;
        Object response = api.updateNetworkWirelessSsidHotspot20(networkId, number, updateNetworkWirelessSsidHotspot20Request);
        // TODO: test validations
    }

    /**
     * Update an Identity PSK
     *
     * Update an Identity PSK
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkWirelessSsidIdentityPskTest() throws ApiException {
        String networkId = null;
        String number = null;
        String identityPskId = null;
        UpdateNetworkWirelessSsidIdentityPskRequest updateNetworkWirelessSsidIdentityPskRequest = null;
        Object response = api.updateNetworkWirelessSsidIdentityPsk(networkId, number, identityPskId, updateNetworkWirelessSsidIdentityPskRequest);
        // TODO: test validations
    }

    /**
     * Update the outage schedule for the SSID
     *
     * Update the outage schedule for the SSID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkWirelessSsidSchedulesTest() throws ApiException {
        String networkId = null;
        String number = null;
        UpdateNetworkWirelessSsidSchedulesRequest updateNetworkWirelessSsidSchedulesRequest = null;
        Object response = api.updateNetworkWirelessSsidSchedules(networkId, number, updateNetworkWirelessSsidSchedulesRequest);
        // TODO: test validations
    }

    /**
     * Modify the splash page settings for the given SSID
     *
     * Modify the splash page settings for the given SSID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkWirelessSsidSplashSettingsTest() throws ApiException {
        String networkId = null;
        String number = null;
        UpdateNetworkWirelessSsidSplashSettingsRequest updateNetworkWirelessSsidSplashSettingsRequest = null;
        GetNetworkWirelessSsidSplashSettings200Response response = api.updateNetworkWirelessSsidSplashSettings(networkId, number, updateNetworkWirelessSsidSplashSettingsRequest);
        // TODO: test validations
    }

    /**
     * Update the traffic shaping settings for an SSID on an MR network
     *
     * Update the traffic shaping settings for an SSID on an MR network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkWirelessSsidTrafficShapingRulesTest() throws ApiException {
        String networkId = null;
        String number = null;
        UpdateNetworkWirelessSsidTrafficShapingRulesRequest updateNetworkWirelessSsidTrafficShapingRulesRequest = null;
        Object response = api.updateNetworkWirelessSsidTrafficShapingRules(networkId, number, updateNetworkWirelessSsidTrafficShapingRulesRequest);
        // TODO: test validations
    }

    /**
     * Update the VPN settings for the SSID
     *
     * Update the VPN settings for the SSID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkWirelessSsidVpnTest() throws ApiException {
        String networkId = null;
        String number = null;
        UpdateNetworkWirelessSsidVpnRequest updateNetworkWirelessSsidVpnRequest = null;
        Object response = api.updateNetworkWirelessSsidVpn(networkId, number, updateNetworkWirelessSsidVpnRequest);
        // TODO: test validations
    }

}
