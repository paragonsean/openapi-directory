/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CycleDeviceSwitchPortsRequest;
import org.openapitools.client.model.GetDeviceSwitchPorts200ResponseInner;
import org.openapitools.client.model.GetDeviceSwitchPortsStatuses200ResponseInner;
import org.openapitools.client.model.GetNetworkAppliancePorts200ResponseInner;
import org.openapitools.client.model.GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner;
import org.openapitools.client.model.GetOrganizationSwitchPortsBySwitch200ResponseInner;
import org.openapitools.client.model.UpdateDeviceSwitchPortRequest;
import org.openapitools.client.model.UpdateNetworkAppliancePortRequest;
import org.openapitools.client.model.UpdateOrganizationConfigTemplateSwitchProfilePortRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PortsApi
 */
@Disabled
public class PortsApiTest {

    private final PortsApi api = new PortsApi();

    /**
     * Cycle a set of switch ports
     *
     * Cycle a set of switch ports
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cycleDeviceSwitchPorts_1Test() throws ApiException {
        String serial = null;
        CycleDeviceSwitchPortsRequest cycleDeviceSwitchPortsRequest = null;
        Object response = api.cycleDeviceSwitchPorts_1(serial, cycleDeviceSwitchPortsRequest);
        // TODO: test validations
    }

    /**
     * Return a switch port
     *
     * Return a switch port
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceSwitchPort_1Test() throws ApiException {
        String serial = null;
        String portId = null;
        GetDeviceSwitchPorts200ResponseInner response = api.getDeviceSwitchPort_1(serial, portId);
        // TODO: test validations
    }

    /**
     * Return the packet counters for all the ports of a switch
     *
     * Return the packet counters for all the ports of a switch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceSwitchPortsStatusesPackets_1Test() throws ApiException {
        String serial = null;
        String t0 = null;
        Float timespan = null;
        List<Object> response = api.getDeviceSwitchPortsStatusesPackets_1(serial, t0, timespan);
        // TODO: test validations
    }

    /**
     * Return the status for all the ports of a switch
     *
     * Return the status for all the ports of a switch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceSwitchPortsStatuses_1Test() throws ApiException {
        String serial = null;
        String t0 = null;
        Float timespan = null;
        List<GetDeviceSwitchPortsStatuses200ResponseInner> response = api.getDeviceSwitchPortsStatuses_1(serial, t0, timespan);
        // TODO: test validations
    }

    /**
     * List the switch ports for a switch
     *
     * List the switch ports for a switch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceSwitchPorts_1Test() throws ApiException {
        String serial = null;
        List<GetDeviceSwitchPorts200ResponseInner> response = api.getDeviceSwitchPorts_1(serial);
        // TODO: test validations
    }

    /**
     * Return per-port VLAN settings for a single MX port.
     *
     * Return per-port VLAN settings for a single MX port.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkAppliancePort_1Test() throws ApiException {
        String networkId = null;
        String portId = null;
        GetNetworkAppliancePorts200ResponseInner response = api.getNetworkAppliancePort_1(networkId, portId);
        // TODO: test validations
    }

    /**
     * List per-port VLAN settings for all ports of a MX.
     *
     * List per-port VLAN settings for all ports of a MX.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkAppliancePorts_1Test() throws ApiException {
        String networkId = null;
        List<GetNetworkAppliancePorts200ResponseInner> response = api.getNetworkAppliancePorts_1(networkId);
        // TODO: test validations
    }

    /**
     * Return a switch profile port
     *
     * Return a switch profile port
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationConfigTemplateSwitchProfilePort_3Test() throws ApiException {
        String organizationId = null;
        String configTemplateId = null;
        String profileId = null;
        String portId = null;
        GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner response = api.getOrganizationConfigTemplateSwitchProfilePort_3(organizationId, configTemplateId, profileId, portId);
        // TODO: test validations
    }

    /**
     * Return all the ports of a switch profile
     *
     * Return all the ports of a switch profile
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationConfigTemplateSwitchProfilePorts_3Test() throws ApiException {
        String organizationId = null;
        String configTemplateId = null;
        String profileId = null;
        List<GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner> response = api.getOrganizationConfigTemplateSwitchProfilePorts_3(organizationId, configTemplateId, profileId);
        // TODO: test validations
    }

    /**
     * List the switchports in an organization by switch
     *
     * List the switchports in an organization by switch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationSwitchPortsBySwitch_1Test() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<String> networkIds = null;
        List<String> portProfileIds = null;
        String name = null;
        String mac = null;
        List<String> macs = null;
        String serial = null;
        List<String> serials = null;
        String configurationUpdatedAfter = null;
        List<GetOrganizationSwitchPortsBySwitch200ResponseInner> response = api.getOrganizationSwitchPortsBySwitch_1(organizationId, perPage, startingAfter, endingBefore, networkIds, portProfileIds, name, mac, macs, serial, serials, configurationUpdatedAfter);
        // TODO: test validations
    }

    /**
     * Update a switch port
     *
     * Update a switch port
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeviceSwitchPort_1Test() throws ApiException {
        String serial = null;
        String portId = null;
        UpdateDeviceSwitchPortRequest updateDeviceSwitchPortRequest = null;
        GetDeviceSwitchPorts200ResponseInner response = api.updateDeviceSwitchPort_1(serial, portId, updateDeviceSwitchPortRequest);
        // TODO: test validations
    }

    /**
     * Update the per-port VLAN settings for a single MX port.
     *
     * Update the per-port VLAN settings for a single MX port.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkAppliancePort_1Test() throws ApiException {
        String networkId = null;
        String portId = null;
        UpdateNetworkAppliancePortRequest updateNetworkAppliancePortRequest = null;
        GetNetworkAppliancePorts200ResponseInner response = api.updateNetworkAppliancePort_1(networkId, portId, updateNetworkAppliancePortRequest);
        // TODO: test validations
    }

    /**
     * Update a switch profile port
     *
     * Update a switch profile port
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationConfigTemplateSwitchProfilePort_3Test() throws ApiException {
        String organizationId = null;
        String configTemplateId = null;
        String profileId = null;
        String portId = null;
        UpdateOrganizationConfigTemplateSwitchProfilePortRequest updateOrganizationConfigTemplateSwitchProfilePortRequest = null;
        GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner response = api.updateOrganizationConfigTemplateSwitchProfilePort_3(organizationId, configTemplateId, profileId, portId, updateOrganizationConfigTemplateSwitchProfilePortRequest);
        // TODO: test validations
    }

}
