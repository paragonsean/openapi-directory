/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BindNetworkRequest;
import org.openapitools.client.model.ClaimNetworkDevicesRequest;
import org.openapitools.client.model.CombineOrganizationNetworks200Response;
import org.openapitools.client.model.CombineOrganizationNetworksRequest;
import org.openapitools.client.model.CreateNetworkFirmwareUpgradesRollback200Response;
import org.openapitools.client.model.CreateNetworkFirmwareUpgradesRollbackRequest;
import org.openapitools.client.model.CreateNetworkFirmwareUpgradesStagedEventRequest;
import org.openapitools.client.model.CreateNetworkFirmwareUpgradesStagedGroupRequest;
import org.openapitools.client.model.CreateNetworkFloorPlanRequest;
import org.openapitools.client.model.CreateNetworkGroupPolicyRequest;
import org.openapitools.client.model.CreateNetworkMerakiAuthUserRequest;
import org.openapitools.client.model.CreateNetworkMqttBrokerRequest;
import org.openapitools.client.model.CreateNetworkPiiRequestRequest;
import org.openapitools.client.model.CreateNetworkWebhooksHttpServerRequest;
import org.openapitools.client.model.CreateNetworkWebhooksPayloadTemplateRequest;
import org.openapitools.client.model.CreateNetworkWebhooksWebhookTest201Response;
import org.openapitools.client.model.CreateNetworkWebhooksWebhookTestRequest;
import org.openapitools.client.model.CreateOrganizationNetworkRequest;
import org.openapitools.client.model.GetNetwork200Response;
import org.openapitools.client.model.GetNetworkAlertsHistory200ResponseInner;
import org.openapitools.client.model.GetNetworkClient200Response;
import org.openapitools.client.model.GetNetworkClients200Response;
import org.openapitools.client.model.GetNetworkEvents200Response;
import org.openapitools.client.model.GetNetworkEventsEventTypes200ResponseInner;
import org.openapitools.client.model.GetNetworkFirmwareUpgrades200Response;
import org.openapitools.client.model.GetNetworkFirmwareUpgradesStagedEvents200Response;
import org.openapitools.client.model.GetNetworkFirmwareUpgradesStagedGroups200ResponseInner;
import org.openapitools.client.model.GetNetworkFirmwareUpgradesStagedStages200ResponseInner;
import org.openapitools.client.model.GetNetworkHealthAlerts200ResponseInner;
import org.openapitools.client.model.GetNetworkMerakiAuthUsers200ResponseInner;
import org.openapitools.client.model.GetNetworkPoliciesByClient200ResponseInner;
import org.openapitools.client.model.GetNetworkSettings200Response;
import org.openapitools.client.model.GetNetworkSyslogServers200Response;
import org.openapitools.client.model.GetNetworkWebhooksHttpServers200ResponseInner;
import org.openapitools.client.model.GetNetworkWebhooksPayloadTemplates200ResponseInner;
import org.openapitools.client.model.ProvisionNetworkClientsRequest;
import org.openapitools.client.model.RemoveNetworkDevicesRequest;
import org.openapitools.client.model.RollbacksNetworkFirmwareUpgradesStagedEventsRequest;
import org.openapitools.client.model.SplitNetwork200Response;
import org.openapitools.client.model.UnbindNetworkRequest;
import org.openapitools.client.model.UpdateNetworkAlertsSettingsRequest;
import org.openapitools.client.model.UpdateNetworkClientPolicyRequest;
import org.openapitools.client.model.UpdateNetworkClientSplashAuthorizationStatusRequest;
import org.openapitools.client.model.UpdateNetworkFirmwareUpgradesRequest;
import org.openapitools.client.model.UpdateNetworkFirmwareUpgradesStagedEventsRequest;
import org.openapitools.client.model.UpdateNetworkFirmwareUpgradesStagedStagesRequest;
import org.openapitools.client.model.UpdateNetworkFloorPlanRequest;
import org.openapitools.client.model.UpdateNetworkGroupPolicyRequest;
import org.openapitools.client.model.UpdateNetworkMerakiAuthUserRequest;
import org.openapitools.client.model.UpdateNetworkMqttBrokerRequest;
import org.openapitools.client.model.UpdateNetworkNetflowRequest;
import org.openapitools.client.model.UpdateNetworkRequest;
import org.openapitools.client.model.UpdateNetworkSettingsRequest;
import org.openapitools.client.model.UpdateNetworkSnmpRequest;
import org.openapitools.client.model.UpdateNetworkSyslogServersRequest;
import org.openapitools.client.model.UpdateNetworkTrafficAnalysisRequest;
import org.openapitools.client.model.UpdateNetworkWebhooksHttpServerRequest;
import org.openapitools.client.model.UpdateNetworkWebhooksPayloadTemplateRequest;
import org.openapitools.client.model.VmxNetworkDevicesClaimRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for NetworksApi
 */
@Disabled
public class NetworksApiTest {

    private final NetworksApi api = new NetworksApi();

    /**
     * Bind a network to a template.
     *
     * Bind a network to a template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bindNetworkTest() throws ApiException {
        String networkId = null;
        BindNetworkRequest bindNetworkRequest = null;
        Object response = api.bindNetwork(networkId, bindNetworkRequest);
        // TODO: test validations
    }

    /**
     * Claim devices into a network. (Note: for recently claimed devices, it may take a few minutes for API requsts against that device to succeed)
     *
     * Claim devices into a network. (Note: for recently claimed devices, it may take a few minutes for API requsts against that device to succeed)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void claimNetworkDevicesTest() throws ApiException {
        String networkId = null;
        ClaimNetworkDevicesRequest claimNetworkDevicesRequest = null;
        api.claimNetworkDevices(networkId, claimNetworkDevicesRequest);
        // TODO: test validations
    }

    /**
     * Combine multiple networks into a single network
     *
     * Combine multiple networks into a single network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void combineOrganizationNetworks_1Test() throws ApiException {
        String organizationId = null;
        CombineOrganizationNetworksRequest combineOrganizationNetworksRequest = null;
        CombineOrganizationNetworks200Response response = api.combineOrganizationNetworks_1(organizationId, combineOrganizationNetworksRequest);
        // TODO: test validations
    }

    /**
     * Rollback a Firmware Upgrade For A Network
     *
     * Rollback a Firmware Upgrade For A Network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkFirmwareUpgradesRollbackTest() throws ApiException {
        String networkId = null;
        CreateNetworkFirmwareUpgradesRollbackRequest createNetworkFirmwareUpgradesRollbackRequest = null;
        CreateNetworkFirmwareUpgradesRollback200Response response = api.createNetworkFirmwareUpgradesRollback(networkId, createNetworkFirmwareUpgradesRollbackRequest);
        // TODO: test validations
    }

    /**
     * Create a Staged Upgrade Event for a network
     *
     * Create a Staged Upgrade Event for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkFirmwareUpgradesStagedEventTest() throws ApiException {
        String networkId = null;
        CreateNetworkFirmwareUpgradesStagedEventRequest createNetworkFirmwareUpgradesStagedEventRequest = null;
        GetNetworkFirmwareUpgradesStagedEvents200Response response = api.createNetworkFirmwareUpgradesStagedEvent(networkId, createNetworkFirmwareUpgradesStagedEventRequest);
        // TODO: test validations
    }

    /**
     * Create a Staged Upgrade Group for a network
     *
     * Create a Staged Upgrade Group for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkFirmwareUpgradesStagedGroupTest() throws ApiException {
        String networkId = null;
        CreateNetworkFirmwareUpgradesStagedGroupRequest createNetworkFirmwareUpgradesStagedGroupRequest = null;
        Object response = api.createNetworkFirmwareUpgradesStagedGroup(networkId, createNetworkFirmwareUpgradesStagedGroupRequest);
        // TODO: test validations
    }

    /**
     * Upload a floor plan
     *
     * Upload a floor plan
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkFloorPlanTest() throws ApiException {
        String networkId = null;
        CreateNetworkFloorPlanRequest createNetworkFloorPlanRequest = null;
        Object response = api.createNetworkFloorPlan(networkId, createNetworkFloorPlanRequest);
        // TODO: test validations
    }

    /**
     * Create a group policy
     *
     * Create a group policy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkGroupPolicyTest() throws ApiException {
        String networkId = null;
        CreateNetworkGroupPolicyRequest createNetworkGroupPolicyRequest = null;
        Object response = api.createNetworkGroupPolicy(networkId, createNetworkGroupPolicyRequest);
        // TODO: test validations
    }

    /**
     * Authorize a user configured with Meraki Authentication for a network (currently supports 802.1X, splash guest, and client VPN users, and currently, organizations have a 50,000 user cap)
     *
     * Authorize a user configured with Meraki Authentication for a network (currently supports 802.1X, splash guest, and client VPN users, and currently, organizations have a 50,000 user cap)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkMerakiAuthUserTest() throws ApiException {
        String networkId = null;
        CreateNetworkMerakiAuthUserRequest createNetworkMerakiAuthUserRequest = null;
        GetNetworkMerakiAuthUsers200ResponseInner response = api.createNetworkMerakiAuthUser(networkId, createNetworkMerakiAuthUserRequest);
        // TODO: test validations
    }

    /**
     * Add an MQTT broker
     *
     * Add an MQTT broker
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkMqttBrokerTest() throws ApiException {
        String networkId = null;
        CreateNetworkMqttBrokerRequest createNetworkMqttBrokerRequest = null;
        Object response = api.createNetworkMqttBroker(networkId, createNetworkMqttBrokerRequest);
        // TODO: test validations
    }

    /**
     * Submit a new delete or restrict processing PII request
     *
     * Submit a new delete or restrict processing PII request  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/requests &#x60;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkPiiRequestTest() throws ApiException {
        String networkId = null;
        CreateNetworkPiiRequestRequest createNetworkPiiRequestRequest = null;
        Object response = api.createNetworkPiiRequest(networkId, createNetworkPiiRequestRequest);
        // TODO: test validations
    }

    /**
     * Add an HTTP server to a network
     *
     * Add an HTTP server to a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkWebhooksHttpServerTest() throws ApiException {
        String networkId = null;
        CreateNetworkWebhooksHttpServerRequest createNetworkWebhooksHttpServerRequest = null;
        GetNetworkWebhooksHttpServers200ResponseInner response = api.createNetworkWebhooksHttpServer(networkId, createNetworkWebhooksHttpServerRequest);
        // TODO: test validations
    }

    /**
     * Create a webhook payload template for a network
     *
     * Create a webhook payload template for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkWebhooksPayloadTemplateTest() throws ApiException {
        String networkId = null;
        CreateNetworkWebhooksPayloadTemplateRequest createNetworkWebhooksPayloadTemplateRequest = null;
        GetNetworkWebhooksPayloadTemplates200ResponseInner response = api.createNetworkWebhooksPayloadTemplate(networkId, createNetworkWebhooksPayloadTemplateRequest);
        // TODO: test validations
    }

    /**
     * Send a test webhook for a network
     *
     * Send a test webhook for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkWebhooksWebhookTestTest() throws ApiException {
        String networkId = null;
        CreateNetworkWebhooksWebhookTestRequest createNetworkWebhooksWebhookTestRequest = null;
        CreateNetworkWebhooksWebhookTest201Response response = api.createNetworkWebhooksWebhookTest(networkId, createNetworkWebhooksWebhookTestRequest);
        // TODO: test validations
    }

    /**
     * Create a network
     *
     * Create a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationNetwork_1Test() throws ApiException {
        String organizationId = null;
        CreateOrganizationNetworkRequest createOrganizationNetworkRequest = null;
        GetNetwork200Response response = api.createOrganizationNetwork_1(organizationId, createOrganizationNetworkRequest);
        // TODO: test validations
    }

    /**
     * Postpone by 1 week all pending staged upgrade stages for a network
     *
     * Postpone by 1 week all pending staged upgrade stages for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deferNetworkFirmwareUpgradesStagedEventsTest() throws ApiException {
        String networkId = null;
        GetNetworkFirmwareUpgradesStagedEvents200Response response = api.deferNetworkFirmwareUpgradesStagedEvents(networkId);
        // TODO: test validations
    }

    /**
     * Delete a network
     *
     * Delete a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkTest() throws ApiException {
        String networkId = null;
        api.deleteNetwork(networkId);
        // TODO: test validations
    }

    /**
     * Delete a Staged Upgrade Group
     *
     * Delete a Staged Upgrade Group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkFirmwareUpgradesStagedGroupTest() throws ApiException {
        String networkId = null;
        String groupId = null;
        api.deleteNetworkFirmwareUpgradesStagedGroup(networkId, groupId);
        // TODO: test validations
    }

    /**
     * Destroy a floor plan
     *
     * Destroy a floor plan
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkFloorPlanTest() throws ApiException {
        String networkId = null;
        String floorPlanId = null;
        api.deleteNetworkFloorPlan(networkId, floorPlanId);
        // TODO: test validations
    }

    /**
     * Delete a group policy
     *
     * Delete a group policy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkGroupPolicyTest() throws ApiException {
        String networkId = null;
        String groupPolicyId = null;
        api.deleteNetworkGroupPolicy(networkId, groupPolicyId);
        // TODO: test validations
    }

    /**
     * Deauthorize a user
     *
     * Deauthorize a user. To reauthorize a user after deauthorizing them, POST to this endpoint. (Currently, 802.1X RADIUS, splash guest, and client VPN users can be deauthorized.)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkMerakiAuthUserTest() throws ApiException {
        String networkId = null;
        String merakiAuthUserId = null;
        api.deleteNetworkMerakiAuthUser(networkId, merakiAuthUserId);
        // TODO: test validations
    }

    /**
     * Delete an MQTT broker
     *
     * Delete an MQTT broker
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkMqttBrokerTest() throws ApiException {
        String networkId = null;
        String mqttBrokerId = null;
        api.deleteNetworkMqttBroker(networkId, mqttBrokerId);
        // TODO: test validations
    }

    /**
     * Delete a restrict processing PII request
     *
     * Delete a restrict processing PII request  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/requests/{requestId} &#x60;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkPiiRequestTest() throws ApiException {
        String networkId = null;
        String requestId = null;
        api.deleteNetworkPiiRequest(networkId, requestId);
        // TODO: test validations
    }

    /**
     * Delete an HTTP server from a network
     *
     * Delete an HTTP server from a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkWebhooksHttpServerTest() throws ApiException {
        String networkId = null;
        String httpServerId = null;
        api.deleteNetworkWebhooksHttpServer(networkId, httpServerId);
        // TODO: test validations
    }

    /**
     * Destroy a webhook payload template for a network
     *
     * Destroy a webhook payload template for a network. Does not work for included templates (&#39;wpt_00001&#39;, &#39;wpt_00002&#39;, &#39;wpt_00003&#39;, &#39;wpt_00004&#39;, &#39;wpt_00005&#39; or &#39;wpt_00006&#39;)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkWebhooksPayloadTemplateTest() throws ApiException {
        String networkId = null;
        String payloadTemplateId = null;
        api.deleteNetworkWebhooksPayloadTemplate(networkId, payloadTemplateId);
        // TODO: test validations
    }

    /**
     * Return a network
     *
     * Return a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkTest() throws ApiException {
        String networkId = null;
        GetNetwork200Response response = api.getNetwork(networkId);
        // TODO: test validations
    }

    /**
     * Return the alert history for this network
     *
     * Return the alert history for this network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkAlertsHistoryTest() throws ApiException {
        String networkId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<GetNetworkAlertsHistory200ResponseInner> response = api.getNetworkAlertsHistory(networkId, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * Return the alert configuration for this network
     *
     * Return the alert configuration for this network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkAlertsSettingsTest() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkAlertsSettings(networkId);
        // TODO: test validations
    }

    /**
     * Return a Bluetooth client
     *
     * Return a Bluetooth client. Bluetooth clients can be identified by their ID or their MAC.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkBluetoothClientTest() throws ApiException {
        String networkId = null;
        String bluetoothClientId = null;
        Boolean includeConnectivityHistory = null;
        Integer connectivityHistoryTimespan = null;
        Object response = api.getNetworkBluetoothClient(networkId, bluetoothClientId, includeConnectivityHistory, connectivityHistoryTimespan);
        // TODO: test validations
    }

    /**
     * List the Bluetooth clients seen by APs in this network
     *
     * List the Bluetooth clients seen by APs in this network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkBluetoothClientsTest() throws ApiException {
        String networkId = null;
        String t0 = null;
        Float timespan = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        Boolean includeConnectivityHistory = null;
        List<Object> response = api.getNetworkBluetoothClients(networkId, t0, timespan, perPage, startingAfter, endingBefore, includeConnectivityHistory);
        // TODO: test validations
    }

    /**
     * Return the client associated with the given identifier
     *
     * Return the client associated with the given identifier. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkClientTest() throws ApiException {
        String networkId = null;
        String clientId = null;
        GetNetworkClient200Response response = api.getNetworkClient(networkId, clientId);
        // TODO: test validations
    }

    /**
     * Return the policy assigned to a client on the network
     *
     * Return the policy assigned to a client on the network. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkClientPolicyTest() throws ApiException {
        String networkId = null;
        String clientId = null;
        Object response = api.getNetworkClientPolicy(networkId, clientId);
        // TODO: test validations
    }

    /**
     * Return the splash authorization for a client, for each SSID they&#39;ve associated with through splash
     *
     * Return the splash authorization for a client, for each SSID they&#39;ve associated with through splash. Only enabled SSIDs with Click-through splash enabled will be included. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkClientSplashAuthorizationStatusTest() throws ApiException {
        String networkId = null;
        String clientId = null;
        Object response = api.getNetworkClientSplashAuthorizationStatus(networkId, clientId);
        // TODO: test validations
    }

    /**
     * Return the client&#39;s network traffic data over time
     *
     * Return the client&#39;s network traffic data over time. Usage data is in kilobytes. This endpoint requires detailed traffic analysis to be enabled on the Network-wide &gt; General page. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkClientTrafficHistoryTest() throws ApiException {
        String networkId = null;
        String clientId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<Object> response = api.getNetworkClientTrafficHistory(networkId, clientId, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * Return the client&#39;s daily usage history
     *
     * Return the client&#39;s daily usage history. Usage data is in kilobytes. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkClientUsageHistoryTest() throws ApiException {
        String networkId = null;
        String clientId = null;
        List<Object> response = api.getNetworkClientUsageHistory(networkId, clientId);
        // TODO: test validations
    }

    /**
     * List the clients that have used this network in the timespan
     *
     * List the clients that have used this network in the timespan
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkClientsTest() throws ApiException {
        String networkId = null;
        String t0 = null;
        Float timespan = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<String> statuses = null;
        String ip = null;
        String ip6 = null;
        String ip6Local = null;
        String mac = null;
        String os = null;
        String description = null;
        String vlan = null;
        List<String> recentDeviceConnections = null;
        GetNetworkClients200Response response = api.getNetworkClients(networkId, t0, timespan, perPage, startingAfter, endingBefore, statuses, ip, ip6, ip6Local, mac, os, description, vlan, recentDeviceConnections);
        // TODO: test validations
    }

    /**
     * Return the application usage data for clients
     *
     * Return the application usage data for clients. Usage data is in kilobytes. Clients can be identified by client keys or either the MACs or IPs depending on whether the network uses Track-by-IP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkClientsApplicationUsageTest() throws ApiException {
        String networkId = null;
        String clients = null;
        Integer ssidNumber = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        List<Object> response = api.getNetworkClientsApplicationUsage(networkId, clients, ssidNumber, perPage, startingAfter, endingBefore, t0, t1, timespan);
        // TODO: test validations
    }

    /**
     * Returns a timeseries of total traffic consumption rates for all clients on a network within a given timespan, in megabits per second.
     *
     * Returns a timeseries of total traffic consumption rates for all clients on a network within a given timespan, in megabits per second.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkClientsBandwidthUsageHistoryTest() throws ApiException {
        String networkId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<Object> response = api.getNetworkClientsBandwidthUsageHistory(networkId, t0, t1, timespan, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * Return overview statistics for network clients
     *
     * Return overview statistics for network clients
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkClientsOverviewTest() throws ApiException {
        String networkId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        Integer resolution = null;
        Object response = api.getNetworkClientsOverview(networkId, t0, t1, timespan, resolution);
        // TODO: test validations
    }

    /**
     * Return the usage histories for clients
     *
     * Return the usage histories for clients. Usage data is in kilobytes. Clients can be identified by client keys or either the MACs or IPs depending on whether the network uses Track-by-IP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkClientsUsageHistoriesTest() throws ApiException {
        String networkId = null;
        String clients = null;
        Integer ssidNumber = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        List<Object> response = api.getNetworkClientsUsageHistories(networkId, clients, ssidNumber, perPage, startingAfter, endingBefore, t0, t1, timespan);
        // TODO: test validations
    }

    /**
     * List the devices in a network
     *
     * List the devices in a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkDevicesTest() throws ApiException {
        String networkId = null;
        List<Object> response = api.getNetworkDevices(networkId);
        // TODO: test validations
    }

    /**
     * List the events for the network
     *
     * List the events for the network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkEventsTest() throws ApiException {
        String networkId = null;
        String productType = null;
        List<String> includedEventTypes = null;
        List<String> excludedEventTypes = null;
        String deviceMac = null;
        String deviceSerial = null;
        String deviceName = null;
        String clientIp = null;
        String clientMac = null;
        String clientName = null;
        String smDeviceMac = null;
        String smDeviceName = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        GetNetworkEvents200Response response = api.getNetworkEvents(networkId, productType, includedEventTypes, excludedEventTypes, deviceMac, deviceSerial, deviceName, clientIp, clientMac, clientName, smDeviceMac, smDeviceName, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * List the event type to human-readable description
     *
     * List the event type to human-readable description
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkEventsEventTypesTest() throws ApiException {
        String networkId = null;
        List<GetNetworkEventsEventTypes200ResponseInner> response = api.getNetworkEventsEventTypes(networkId);
        // TODO: test validations
    }

    /**
     * Get firmware upgrade information for a network
     *
     * Get firmware upgrade information for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkFirmwareUpgradesTest() throws ApiException {
        String networkId = null;
        GetNetworkFirmwareUpgrades200Response response = api.getNetworkFirmwareUpgrades(networkId);
        // TODO: test validations
    }

    /**
     * Get the Staged Upgrade Event from a network
     *
     * Get the Staged Upgrade Event from a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkFirmwareUpgradesStagedEventsTest() throws ApiException {
        String networkId = null;
        GetNetworkFirmwareUpgradesStagedEvents200Response response = api.getNetworkFirmwareUpgradesStagedEvents(networkId);
        // TODO: test validations
    }

    /**
     * Get a Staged Upgrade Group from a network
     *
     * Get a Staged Upgrade Group from a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkFirmwareUpgradesStagedGroupTest() throws ApiException {
        String networkId = null;
        String groupId = null;
        GetNetworkFirmwareUpgradesStagedGroups200ResponseInner response = api.getNetworkFirmwareUpgradesStagedGroup(networkId, groupId);
        // TODO: test validations
    }

    /**
     * List of Staged Upgrade Groups in a network
     *
     * List of Staged Upgrade Groups in a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkFirmwareUpgradesStagedGroupsTest() throws ApiException {
        String networkId = null;
        List<GetNetworkFirmwareUpgradesStagedGroups200ResponseInner> response = api.getNetworkFirmwareUpgradesStagedGroups(networkId);
        // TODO: test validations
    }

    /**
     * Order of Staged Upgrade Groups in a network
     *
     * Order of Staged Upgrade Groups in a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkFirmwareUpgradesStagedStagesTest() throws ApiException {
        String networkId = null;
        List<GetNetworkFirmwareUpgradesStagedStages200ResponseInner> response = api.getNetworkFirmwareUpgradesStagedStages(networkId);
        // TODO: test validations
    }

    /**
     * Find a floor plan by ID
     *
     * Find a floor plan by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkFloorPlanTest() throws ApiException {
        String networkId = null;
        String floorPlanId = null;
        Object response = api.getNetworkFloorPlan(networkId, floorPlanId);
        // TODO: test validations
    }

    /**
     * List the floor plans that belong to your network
     *
     * List the floor plans that belong to your network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkFloorPlansTest() throws ApiException {
        String networkId = null;
        List<Object> response = api.getNetworkFloorPlans(networkId);
        // TODO: test validations
    }

    /**
     * List the group policies in a network
     *
     * List the group policies in a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkGroupPoliciesTest() throws ApiException {
        String networkId = null;
        List<Object> response = api.getNetworkGroupPolicies(networkId);
        // TODO: test validations
    }

    /**
     * Display a group policy
     *
     * Display a group policy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkGroupPolicyTest() throws ApiException {
        String networkId = null;
        String groupPolicyId = null;
        Object response = api.getNetworkGroupPolicy(networkId, groupPolicyId);
        // TODO: test validations
    }

    /**
     * Return all global alerts on this network
     *
     * Return all global alerts on this network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkHealthAlertsTest() throws ApiException {
        String networkId = null;
        List<GetNetworkHealthAlerts200ResponseInner> response = api.getNetworkHealthAlerts(networkId);
        // TODO: test validations
    }

    /**
     * Return the Meraki Auth splash guest, RADIUS, or client VPN user
     *
     * Return the Meraki Auth splash guest, RADIUS, or client VPN user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkMerakiAuthUserTest() throws ApiException {
        String networkId = null;
        String merakiAuthUserId = null;
        GetNetworkMerakiAuthUsers200ResponseInner response = api.getNetworkMerakiAuthUser(networkId, merakiAuthUserId);
        // TODO: test validations
    }

    /**
     * List the users configured under Meraki Authentication for a network (splash guest or RADIUS users for a wireless network, or client VPN users for a wired network)
     *
     * List the users configured under Meraki Authentication for a network (splash guest or RADIUS users for a wireless network, or client VPN users for a wired network)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkMerakiAuthUsersTest() throws ApiException {
        String networkId = null;
        List<GetNetworkMerakiAuthUsers200ResponseInner> response = api.getNetworkMerakiAuthUsers(networkId);
        // TODO: test validations
    }

    /**
     * Return an MQTT broker
     *
     * Return an MQTT broker
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkMqttBrokerTest() throws ApiException {
        String networkId = null;
        String mqttBrokerId = null;
        Object response = api.getNetworkMqttBroker(networkId, mqttBrokerId);
        // TODO: test validations
    }

    /**
     * List the MQTT brokers for this network
     *
     * List the MQTT brokers for this network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkMqttBrokersTest() throws ApiException {
        String networkId = null;
        List<Object> response = api.getNetworkMqttBrokers(networkId);
        // TODO: test validations
    }

    /**
     * Return the NetFlow traffic reporting settings for a network
     *
     * Return the NetFlow traffic reporting settings for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkNetflowTest() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkNetflow(networkId);
        // TODO: test validations
    }

    /**
     * Get the channel utilization over each radio for all APs in a network.
     *
     * Get the channel utilization over each radio for all APs in a network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkNetworkHealthChannelUtilizationTest() throws ApiException {
        String networkId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        Integer resolution = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<Object> response = api.getNetworkNetworkHealthChannelUtilization(networkId, t0, t1, timespan, resolution, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * List the keys required to access Personally Identifiable Information (PII) for a given identifier
     *
     * List the keys required to access Personally Identifiable Information (PII) for a given identifier. Exactly one identifier will be accepted. If the organization contains org-wide Systems Manager users matching the key provided then there will be an entry with the key \&quot;0\&quot; containing the applicable keys.  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/piiKeys &#x60;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkPiiPiiKeysTest() throws ApiException {
        String networkId = null;
        String username = null;
        String email = null;
        String mac = null;
        String serial = null;
        String imei = null;
        String bluetoothMac = null;
        Object response = api.getNetworkPiiPiiKeys(networkId, username, email, mac, serial, imei, bluetoothMac);
        // TODO: test validations
    }

    /**
     * Return a PII request
     *
     * Return a PII request  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/requests/{requestId} &#x60;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkPiiRequestTest() throws ApiException {
        String networkId = null;
        String requestId = null;
        Object response = api.getNetworkPiiRequest(networkId, requestId);
        // TODO: test validations
    }

    /**
     * List the PII requests for this network or organization
     *
     * List the PII requests for this network or organization  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/requests &#x60;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkPiiRequestsTest() throws ApiException {
        String networkId = null;
        List<Object> response = api.getNetworkPiiRequests(networkId);
        // TODO: test validations
    }

    /**
     * Given a piece of Personally Identifiable Information (PII), return the Systems Manager device ID(s) associated with that identifier
     *
     * Given a piece of Personally Identifiable Information (PII), return the Systems Manager device ID(s) associated with that identifier. These device IDs can be used with the Systems Manager API endpoints to retrieve device details. Exactly one identifier will be accepted.  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/smDevicesForKey &#x60;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkPiiSmDevicesForKeyTest() throws ApiException {
        String networkId = null;
        String username = null;
        String email = null;
        String mac = null;
        String serial = null;
        String imei = null;
        String bluetoothMac = null;
        Object response = api.getNetworkPiiSmDevicesForKey(networkId, username, email, mac, serial, imei, bluetoothMac);
        // TODO: test validations
    }

    /**
     * Given a piece of Personally Identifiable Information (PII), return the Systems Manager owner ID(s) associated with that identifier
     *
     * Given a piece of Personally Identifiable Information (PII), return the Systems Manager owner ID(s) associated with that identifier. These owner IDs can be used with the Systems Manager API endpoints to retrieve owner details. Exactly one identifier will be accepted.  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/smOwnersForKey &#x60;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkPiiSmOwnersForKeyTest() throws ApiException {
        String networkId = null;
        String username = null;
        String email = null;
        String mac = null;
        String serial = null;
        String imei = null;
        String bluetoothMac = null;
        Object response = api.getNetworkPiiSmOwnersForKey(networkId, username, email, mac, serial, imei, bluetoothMac);
        // TODO: test validations
    }

    /**
     * Get policies for all clients with policies
     *
     * Get policies for all clients with policies
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkPoliciesByClientTest() throws ApiException {
        String networkId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        String t0 = null;
        Float timespan = null;
        List<GetNetworkPoliciesByClient200ResponseInner> response = api.getNetworkPoliciesByClient(networkId, perPage, startingAfter, endingBefore, t0, timespan);
        // TODO: test validations
    }

    /**
     * Return the settings for a network
     *
     * Return the settings for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSettingsTest() throws ApiException {
        String networkId = null;
        GetNetworkSettings200Response response = api.getNetworkSettings(networkId);
        // TODO: test validations
    }

    /**
     * Return the SNMP settings for a network
     *
     * Return the SNMP settings for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSnmpTest() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkSnmp(networkId);
        // TODO: test validations
    }

    /**
     * List the splash login attempts for a network
     *
     * List the splash login attempts for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSplashLoginAttemptsTest() throws ApiException {
        String networkId = null;
        Integer ssidNumber = null;
        String loginIdentifier = null;
        Integer timespan = null;
        List<Object> response = api.getNetworkSplashLoginAttempts(networkId, ssidNumber, loginIdentifier, timespan);
        // TODO: test validations
    }

    /**
     * List the syslog servers for a network
     *
     * List the syslog servers for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSyslogServersTest() throws ApiException {
        String networkId = null;
        GetNetworkSyslogServers200Response response = api.getNetworkSyslogServers(networkId);
        // TODO: test validations
    }

    /**
     * List the LLDP and CDP information for all discovered devices and connections in a network.
     *
     * List the LLDP and CDP information for all discovered devices and connections in a network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkTopologyLinkLayerTest() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkTopologyLinkLayer(networkId);
        // TODO: test validations
    }

    /**
     * Return the traffic analysis data for this network
     *
     * Return the traffic analysis data for this network. Traffic analysis with hostname visibility must be enabled on the network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkTrafficTest() throws ApiException {
        String networkId = null;
        String t0 = null;
        Float timespan = null;
        String deviceType = null;
        List<Object> response = api.getNetworkTraffic(networkId, t0, timespan, deviceType);
        // TODO: test validations
    }

    /**
     * Return the traffic analysis settings for a network
     *
     * Return the traffic analysis settings for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkTrafficAnalysisTest() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkTrafficAnalysis(networkId);
        // TODO: test validations
    }

    /**
     * Returns the application categories for traffic shaping rules.
     *
     * Returns the application categories for traffic shaping rules.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkTrafficShapingApplicationCategoriesTest() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkTrafficShapingApplicationCategories(networkId);
        // TODO: test validations
    }

    /**
     * Returns the available DSCP tagging options for your traffic shaping rules.
     *
     * Returns the available DSCP tagging options for your traffic shaping rules.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkTrafficShapingDscpTaggingOptionsTest() throws ApiException {
        String networkId = null;
        List<Object> response = api.getNetworkTrafficShapingDscpTaggingOptions(networkId);
        // TODO: test validations
    }

    /**
     * Return an HTTP server for a network
     *
     * Return an HTTP server for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWebhooksHttpServerTest() throws ApiException {
        String networkId = null;
        String httpServerId = null;
        GetNetworkWebhooksHttpServers200ResponseInner response = api.getNetworkWebhooksHttpServer(networkId, httpServerId);
        // TODO: test validations
    }

    /**
     * List the HTTP servers for a network
     *
     * List the HTTP servers for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWebhooksHttpServersTest() throws ApiException {
        String networkId = null;
        List<GetNetworkWebhooksHttpServers200ResponseInner> response = api.getNetworkWebhooksHttpServers(networkId);
        // TODO: test validations
    }

    /**
     * Get the webhook payload template for a network
     *
     * Get the webhook payload template for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWebhooksPayloadTemplateTest() throws ApiException {
        String networkId = null;
        String payloadTemplateId = null;
        GetNetworkWebhooksPayloadTemplates200ResponseInner response = api.getNetworkWebhooksPayloadTemplate(networkId, payloadTemplateId);
        // TODO: test validations
    }

    /**
     * List the webhook payload templates for a network
     *
     * List the webhook payload templates for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWebhooksPayloadTemplatesTest() throws ApiException {
        String networkId = null;
        List<GetNetworkWebhooksPayloadTemplates200ResponseInner> response = api.getNetworkWebhooksPayloadTemplates(networkId);
        // TODO: test validations
    }

    /**
     * Return the status of a webhook test for a network
     *
     * Return the status of a webhook test for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWebhooksWebhookTestTest() throws ApiException {
        String networkId = null;
        String webhookTestId = null;
        CreateNetworkWebhooksWebhookTest201Response response = api.getNetworkWebhooksWebhookTest(networkId, webhookTestId);
        // TODO: test validations
    }

    /**
     * Returns list of networks eligible for adding cloud monitored device
     *
     * Returns list of networks eligible for adding cloud monitored device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationInventoryOnboardingCloudMonitoringNetworks_4Test() throws ApiException {
        String organizationId = null;
        String deviceType = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<GetNetwork200Response> response = api.getOrganizationInventoryOnboardingCloudMonitoringNetworks_4(organizationId, deviceType, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * List the networks that the user has privileges on in an organization
     *
     * List the networks that the user has privileges on in an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationNetworks_1Test() throws ApiException {
        String organizationId = null;
        String configTemplateId = null;
        Boolean isBoundToConfigTemplate = null;
        List<String> tags = null;
        String tagsFilterType = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<GetNetwork200Response> response = api.getOrganizationNetworks_1(organizationId, configTemplateId, isBoundToConfigTemplate, tags, tagsFilterType, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * Provisions a client with a name and policy
     *
     * Provisions a client with a name and policy. Clients can be provisioned before they associate to the network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void provisionNetworkClientsTest() throws ApiException {
        String networkId = null;
        ProvisionNetworkClientsRequest provisionNetworkClientsRequest = null;
        Object response = api.provisionNetworkClients(networkId, provisionNetworkClientsRequest);
        // TODO: test validations
    }

    /**
     * Remove a single device
     *
     * Remove a single device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeNetworkDevicesTest() throws ApiException {
        String networkId = null;
        RemoveNetworkDevicesRequest removeNetworkDevicesRequest = null;
        api.removeNetworkDevices(networkId, removeNetworkDevicesRequest);
        // TODO: test validations
    }

    /**
     * Rollback a Staged Upgrade Event for a network
     *
     * Rollback a Staged Upgrade Event for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rollbacksNetworkFirmwareUpgradesStagedEventsTest() throws ApiException {
        String networkId = null;
        RollbacksNetworkFirmwareUpgradesStagedEventsRequest rollbacksNetworkFirmwareUpgradesStagedEventsRequest = null;
        GetNetworkFirmwareUpgradesStagedEvents200Response response = api.rollbacksNetworkFirmwareUpgradesStagedEvents(networkId, rollbacksNetworkFirmwareUpgradesStagedEventsRequest);
        // TODO: test validations
    }

    /**
     * Split a combined network into individual networks for each type of device
     *
     * Split a combined network into individual networks for each type of device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void splitNetworkTest() throws ApiException {
        String networkId = null;
        SplitNetwork200Response response = api.splitNetwork(networkId);
        // TODO: test validations
    }

    /**
     * Unbind a network from a template.
     *
     * Unbind a network from a template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unbindNetworkTest() throws ApiException {
        String networkId = null;
        UnbindNetworkRequest unbindNetworkRequest = null;
        GetNetwork200Response response = api.unbindNetwork(networkId, unbindNetworkRequest);
        // TODO: test validations
    }

    /**
     * Update a network
     *
     * Update a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkTest() throws ApiException {
        String networkId = null;
        UpdateNetworkRequest updateNetworkRequest = null;
        GetNetwork200Response response = api.updateNetwork(networkId, updateNetworkRequest);
        // TODO: test validations
    }

    /**
     * Update the alert configuration for this network
     *
     * Update the alert configuration for this network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkAlertsSettingsTest() throws ApiException {
        String networkId = null;
        UpdateNetworkAlertsSettingsRequest updateNetworkAlertsSettingsRequest = null;
        Object response = api.updateNetworkAlertsSettings(networkId, updateNetworkAlertsSettingsRequest);
        // TODO: test validations
    }

    /**
     * Update the policy assigned to a client on the network
     *
     * Update the policy assigned to a client on the network. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkClientPolicyTest() throws ApiException {
        String networkId = null;
        String clientId = null;
        UpdateNetworkClientPolicyRequest updateNetworkClientPolicyRequest = null;
        Object response = api.updateNetworkClientPolicy(networkId, clientId, updateNetworkClientPolicyRequest);
        // TODO: test validations
    }

    /**
     * Update a client&#39;s splash authorization
     *
     * Update a client&#39;s splash authorization. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkClientSplashAuthorizationStatusTest() throws ApiException {
        String networkId = null;
        String clientId = null;
        UpdateNetworkClientSplashAuthorizationStatusRequest updateNetworkClientSplashAuthorizationStatusRequest = null;
        Object response = api.updateNetworkClientSplashAuthorizationStatus(networkId, clientId, updateNetworkClientSplashAuthorizationStatusRequest);
        // TODO: test validations
    }

    /**
     * Update firmware upgrade information for a network
     *
     * Update firmware upgrade information for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkFirmwareUpgradesTest() throws ApiException {
        String networkId = null;
        UpdateNetworkFirmwareUpgradesRequest updateNetworkFirmwareUpgradesRequest = null;
        GetNetworkFirmwareUpgrades200Response response = api.updateNetworkFirmwareUpgrades(networkId, updateNetworkFirmwareUpgradesRequest);
        // TODO: test validations
    }

    /**
     * Update the Staged Upgrade Event for a network
     *
     * Update the Staged Upgrade Event for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkFirmwareUpgradesStagedEventsTest() throws ApiException {
        String networkId = null;
        UpdateNetworkFirmwareUpgradesStagedEventsRequest updateNetworkFirmwareUpgradesStagedEventsRequest = null;
        GetNetworkFirmwareUpgradesStagedEvents200Response response = api.updateNetworkFirmwareUpgradesStagedEvents(networkId, updateNetworkFirmwareUpgradesStagedEventsRequest);
        // TODO: test validations
    }

    /**
     * Update a Staged Upgrade Group for a network
     *
     * Update a Staged Upgrade Group for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkFirmwareUpgradesStagedGroupTest() throws ApiException {
        String networkId = null;
        String groupId = null;
        CreateNetworkFirmwareUpgradesStagedGroupRequest createNetworkFirmwareUpgradesStagedGroupRequest = null;
        Object response = api.updateNetworkFirmwareUpgradesStagedGroup(networkId, groupId, createNetworkFirmwareUpgradesStagedGroupRequest);
        // TODO: test validations
    }

    /**
     * Assign Staged Upgrade Group order in the sequence.
     *
     * Assign Staged Upgrade Group order in the sequence.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkFirmwareUpgradesStagedStagesTest() throws ApiException {
        String networkId = null;
        UpdateNetworkFirmwareUpgradesStagedStagesRequest updateNetworkFirmwareUpgradesStagedStagesRequest = null;
        List<GetNetworkFirmwareUpgradesStagedStages200ResponseInner> response = api.updateNetworkFirmwareUpgradesStagedStages(networkId, updateNetworkFirmwareUpgradesStagedStagesRequest);
        // TODO: test validations
    }

    /**
     * Update a floor plan&#39;s geolocation and other meta data
     *
     * Update a floor plan&#39;s geolocation and other meta data
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkFloorPlanTest() throws ApiException {
        String networkId = null;
        String floorPlanId = null;
        UpdateNetworkFloorPlanRequest updateNetworkFloorPlanRequest = null;
        Object response = api.updateNetworkFloorPlan(networkId, floorPlanId, updateNetworkFloorPlanRequest);
        // TODO: test validations
    }

    /**
     * Update a group policy
     *
     * Update a group policy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkGroupPolicyTest() throws ApiException {
        String networkId = null;
        String groupPolicyId = null;
        UpdateNetworkGroupPolicyRequest updateNetworkGroupPolicyRequest = null;
        Object response = api.updateNetworkGroupPolicy(networkId, groupPolicyId, updateNetworkGroupPolicyRequest);
        // TODO: test validations
    }

    /**
     * Update a user configured with Meraki Authentication (currently, 802.1X RADIUS, splash guest, and client VPN users can be updated)
     *
     * Update a user configured with Meraki Authentication (currently, 802.1X RADIUS, splash guest, and client VPN users can be updated)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkMerakiAuthUserTest() throws ApiException {
        String networkId = null;
        String merakiAuthUserId = null;
        UpdateNetworkMerakiAuthUserRequest updateNetworkMerakiAuthUserRequest = null;
        GetNetworkMerakiAuthUsers200ResponseInner response = api.updateNetworkMerakiAuthUser(networkId, merakiAuthUserId, updateNetworkMerakiAuthUserRequest);
        // TODO: test validations
    }

    /**
     * Update an MQTT broker
     *
     * Update an MQTT broker
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkMqttBrokerTest() throws ApiException {
        String networkId = null;
        String mqttBrokerId = null;
        UpdateNetworkMqttBrokerRequest updateNetworkMqttBrokerRequest = null;
        Object response = api.updateNetworkMqttBroker(networkId, mqttBrokerId, updateNetworkMqttBrokerRequest);
        // TODO: test validations
    }

    /**
     * Update the NetFlow traffic reporting settings for a network
     *
     * Update the NetFlow traffic reporting settings for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkNetflowTest() throws ApiException {
        String networkId = null;
        UpdateNetworkNetflowRequest updateNetworkNetflowRequest = null;
        Object response = api.updateNetworkNetflow(networkId, updateNetworkNetflowRequest);
        // TODO: test validations
    }

    /**
     * Update the settings for a network
     *
     * Update the settings for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSettingsTest() throws ApiException {
        String networkId = null;
        UpdateNetworkSettingsRequest updateNetworkSettingsRequest = null;
        GetNetworkSettings200Response response = api.updateNetworkSettings(networkId, updateNetworkSettingsRequest);
        // TODO: test validations
    }

    /**
     * Update the SNMP settings for a network
     *
     * Update the SNMP settings for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSnmpTest() throws ApiException {
        String networkId = null;
        UpdateNetworkSnmpRequest updateNetworkSnmpRequest = null;
        Object response = api.updateNetworkSnmp(networkId, updateNetworkSnmpRequest);
        // TODO: test validations
    }

    /**
     * Update the syslog servers for a network
     *
     * Update the syslog servers for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSyslogServersTest() throws ApiException {
        String networkId = null;
        UpdateNetworkSyslogServersRequest updateNetworkSyslogServersRequest = null;
        GetNetworkSyslogServers200Response response = api.updateNetworkSyslogServers(networkId, updateNetworkSyslogServersRequest);
        // TODO: test validations
    }

    /**
     * Update the traffic analysis settings for a network
     *
     * Update the traffic analysis settings for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkTrafficAnalysisTest() throws ApiException {
        String networkId = null;
        UpdateNetworkTrafficAnalysisRequest updateNetworkTrafficAnalysisRequest = null;
        Object response = api.updateNetworkTrafficAnalysis(networkId, updateNetworkTrafficAnalysisRequest);
        // TODO: test validations
    }

    /**
     * Update an HTTP server
     *
     * Update an HTTP server. To change a URL, create a new HTTP server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkWebhooksHttpServerTest() throws ApiException {
        String networkId = null;
        String httpServerId = null;
        UpdateNetworkWebhooksHttpServerRequest updateNetworkWebhooksHttpServerRequest = null;
        GetNetworkWebhooksHttpServers200ResponseInner response = api.updateNetworkWebhooksHttpServer(networkId, httpServerId, updateNetworkWebhooksHttpServerRequest);
        // TODO: test validations
    }

    /**
     * Update a webhook payload template for a network
     *
     * Update a webhook payload template for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkWebhooksPayloadTemplateTest() throws ApiException {
        String networkId = null;
        String payloadTemplateId = null;
        UpdateNetworkWebhooksPayloadTemplateRequest updateNetworkWebhooksPayloadTemplateRequest = null;
        GetNetworkWebhooksPayloadTemplates200ResponseInner response = api.updateNetworkWebhooksPayloadTemplate(networkId, payloadTemplateId, updateNetworkWebhooksPayloadTemplateRequest);
        // TODO: test validations
    }

    /**
     * Claim a vMX into a network
     *
     * Claim a vMX into a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vmxNetworkDevicesClaimTest() throws ApiException {
        String networkId = null;
        VmxNetworkDevicesClaimRequest vmxNetworkDevicesClaimRequest = null;
        Object response = api.vmxNetworkDevicesClaim(networkId, vmxNetworkDevicesClaimRequest);
        // TODO: test validations
    }

}
