/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateNetworkApplianceTrafficShapingCustomPerformanceClassRequest;
import org.openapitools.client.model.GetNetworkApplianceTrafficShapingUplinkBandwidth200Response;
import org.openapitools.client.model.GetNetworkApplianceTrafficShapingUplinkSelection200Response;
import org.openapitools.client.model.UpdateNetworkApplianceTrafficShapingCustomPerformanceClassRequest;
import org.openapitools.client.model.UpdateNetworkApplianceTrafficShapingRequest;
import org.openapitools.client.model.UpdateNetworkApplianceTrafficShapingRulesRequest;
import org.openapitools.client.model.UpdateNetworkApplianceTrafficShapingUplinkBandwidthRequest;
import org.openapitools.client.model.UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest;
import org.openapitools.client.model.UpdateNetworkWirelessSsidTrafficShapingRulesRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TrafficShapingApi
 */
@Disabled
public class TrafficShapingApiTest {

    private final TrafficShapingApi api = new TrafficShapingApi();

    /**
     * Add a custom performance class for an MX network
     *
     * Add a custom performance class for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkApplianceTrafficShapingCustomPerformanceClass_1Test() throws ApiException {
        String networkId = null;
        CreateNetworkApplianceTrafficShapingCustomPerformanceClassRequest createNetworkApplianceTrafficShapingCustomPerformanceClassRequest = null;
        Object response = api.createNetworkApplianceTrafficShapingCustomPerformanceClass_1(networkId, createNetworkApplianceTrafficShapingCustomPerformanceClassRequest);
        // TODO: test validations
    }

    /**
     * Delete a custom performance class from an MX network
     *
     * Delete a custom performance class from an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkApplianceTrafficShapingCustomPerformanceClass_1Test() throws ApiException {
        String networkId = null;
        String customPerformanceClassId = null;
        api.deleteNetworkApplianceTrafficShapingCustomPerformanceClass_1(networkId, customPerformanceClassId);
        // TODO: test validations
    }

    /**
     * Return a custom performance class for an MX network
     *
     * Return a custom performance class for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceTrafficShapingCustomPerformanceClass_1Test() throws ApiException {
        String networkId = null;
        String customPerformanceClassId = null;
        Object response = api.getNetworkApplianceTrafficShapingCustomPerformanceClass_1(networkId, customPerformanceClassId);
        // TODO: test validations
    }

    /**
     * List all custom performance classes for an MX network
     *
     * List all custom performance classes for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceTrafficShapingCustomPerformanceClasses_1Test() throws ApiException {
        String networkId = null;
        List<Object> response = api.getNetworkApplianceTrafficShapingCustomPerformanceClasses_1(networkId);
        // TODO: test validations
    }

    /**
     * Display the traffic shaping settings rules for an MX network
     *
     * Display the traffic shaping settings rules for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceTrafficShapingRules_1Test() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkApplianceTrafficShapingRules_1(networkId);
        // TODO: test validations
    }

    /**
     * Returns the uplink bandwidth limits for your MX network
     *
     * Returns the uplink bandwidth limits for your MX network. This may not reflect the affected device&#39;s hardware capabilities.  For more information on your device&#39;s hardware capabilities, please consult our MX Family Datasheet - [https://meraki.cisco.com/product-collateral/mx-family-datasheet/?file]
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceTrafficShapingUplinkBandwidth_1Test() throws ApiException {
        String networkId = null;
        GetNetworkApplianceTrafficShapingUplinkBandwidth200Response response = api.getNetworkApplianceTrafficShapingUplinkBandwidth_1(networkId);
        // TODO: test validations
    }

    /**
     * Show uplink selection settings for an MX network
     *
     * Show uplink selection settings for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceTrafficShapingUplinkSelection_1Test() throws ApiException {
        String networkId = null;
        GetNetworkApplianceTrafficShapingUplinkSelection200Response response = api.getNetworkApplianceTrafficShapingUplinkSelection_1(networkId);
        // TODO: test validations
    }

    /**
     * Display the traffic shaping settings for an MX network
     *
     * Display the traffic shaping settings for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceTrafficShaping_1Test() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkApplianceTrafficShaping_1(networkId);
        // TODO: test validations
    }

    /**
     * Returns the application categories for traffic shaping rules.
     *
     * Returns the application categories for traffic shaping rules.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkTrafficShapingApplicationCategories_1Test() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkTrafficShapingApplicationCategories_1(networkId);
        // TODO: test validations
    }

    /**
     * Returns the available DSCP tagging options for your traffic shaping rules.
     *
     * Returns the available DSCP tagging options for your traffic shaping rules.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkTrafficShapingDscpTaggingOptions_1Test() throws ApiException {
        String networkId = null;
        List<Object> response = api.getNetworkTrafficShapingDscpTaggingOptions_1(networkId);
        // TODO: test validations
    }

    /**
     * Display the traffic shaping settings for a SSID on an MR network
     *
     * Display the traffic shaping settings for a SSID on an MR network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessSsidTrafficShapingRules_2Test() throws ApiException {
        String networkId = null;
        String number = null;
        Object response = api.getNetworkWirelessSsidTrafficShapingRules_2(networkId, number);
        // TODO: test validations
    }

    /**
     * Update a custom performance class for an MX network
     *
     * Update a custom performance class for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceTrafficShapingCustomPerformanceClass_1Test() throws ApiException {
        String networkId = null;
        String customPerformanceClassId = null;
        UpdateNetworkApplianceTrafficShapingCustomPerformanceClassRequest updateNetworkApplianceTrafficShapingCustomPerformanceClassRequest = null;
        Object response = api.updateNetworkApplianceTrafficShapingCustomPerformanceClass_1(networkId, customPerformanceClassId, updateNetworkApplianceTrafficShapingCustomPerformanceClassRequest);
        // TODO: test validations
    }

    /**
     * Update the traffic shaping settings rules for an MX network
     *
     * Update the traffic shaping settings rules for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceTrafficShapingRules_1Test() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceTrafficShapingRulesRequest updateNetworkApplianceTrafficShapingRulesRequest = null;
        Object response = api.updateNetworkApplianceTrafficShapingRules_1(networkId, updateNetworkApplianceTrafficShapingRulesRequest);
        // TODO: test validations
    }

    /**
     * Updates the uplink bandwidth settings for your MX network.
     *
     * Updates the uplink bandwidth settings for your MX network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceTrafficShapingUplinkBandwidth_1Test() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceTrafficShapingUplinkBandwidthRequest updateNetworkApplianceTrafficShapingUplinkBandwidthRequest = null;
        Object response = api.updateNetworkApplianceTrafficShapingUplinkBandwidth_1(networkId, updateNetworkApplianceTrafficShapingUplinkBandwidthRequest);
        // TODO: test validations
    }

    /**
     * Update uplink selection settings for an MX network
     *
     * Update uplink selection settings for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceTrafficShapingUplinkSelection_1Test() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest updateNetworkApplianceTrafficShapingUplinkSelectionRequest = null;
        GetNetworkApplianceTrafficShapingUplinkSelection200Response response = api.updateNetworkApplianceTrafficShapingUplinkSelection_1(networkId, updateNetworkApplianceTrafficShapingUplinkSelectionRequest);
        // TODO: test validations
    }

    /**
     * Update the traffic shaping settings for an MX network
     *
     * Update the traffic shaping settings for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceTrafficShaping_1Test() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceTrafficShapingRequest updateNetworkApplianceTrafficShapingRequest = null;
        Object response = api.updateNetworkApplianceTrafficShaping_1(networkId, updateNetworkApplianceTrafficShapingRequest);
        // TODO: test validations
    }

    /**
     * Update the traffic shaping settings for an SSID on an MR network
     *
     * Update the traffic shaping settings for an SSID on an MR network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkWirelessSsidTrafficShapingRules_2Test() throws ApiException {
        String networkId = null;
        String number = null;
        UpdateNetworkWirelessSsidTrafficShapingRulesRequest updateNetworkWirelessSsidTrafficShapingRulesRequest = null;
        Object response = api.updateNetworkWirelessSsidTrafficShapingRules_2(networkId, number, updateNetworkWirelessSsidTrafficShapingRulesRequest);
        // TODO: test validations
    }

}
