/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GetDeviceApplianceUplinksSettings200Response;
import org.openapitools.client.model.GetOrganizationDevicesUplinksAddressesByDevice200ResponseInner;
import org.openapitools.client.model.GetOrganizationDevicesUplinksLossAndLatency200ResponseInner;
import org.openapitools.client.model.GetOrganizationUplinksStatuses200ResponseInner;
import org.openapitools.client.model.UpdateDeviceApplianceUplinksSettingsRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UplinksApi
 */
@Disabled
public class UplinksApiTest {

    private final UplinksApi api = new UplinksApi();

    /**
     * Return the uplink settings for an MX appliance
     *
     * Return the uplink settings for an MX appliance
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceApplianceUplinksSettings_1Test() throws ApiException {
        String serial = null;
        GetDeviceApplianceUplinksSettings200Response response = api.getDeviceApplianceUplinksSettings_1(serial);
        // TODO: test validations
    }

    /**
     * Get the uplink loss percentage and latency in milliseconds, and goodput in kilobits per second for a wired network device.
     *
     * Get the uplink loss percentage and latency in milliseconds, and goodput in kilobits per second for a wired network device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceLossAndLatencyHistory_1Test() throws ApiException {
        String serial = null;
        String ip = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        Integer resolution = null;
        String uplink = null;
        List<Object> response = api.getDeviceLossAndLatencyHistory_1(serial, ip, t0, t1, timespan, resolution, uplink);
        // TODO: test validations
    }

    /**
     * Get the sent and received bytes for each uplink of a network.
     *
     * Get the sent and received bytes for each uplink of a network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceUplinksUsageHistory_1Test() throws ApiException {
        String networkId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        Integer resolution = null;
        List<Object> response = api.getNetworkApplianceUplinksUsageHistory_1(networkId, t0, t1, timespan, resolution);
        // TODO: test validations
    }

    /**
     * List the uplink status of every Meraki MX and Z series appliances in the organization
     *
     * List the uplink status of every Meraki MX and Z series appliances in the organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationApplianceUplinkStatuses_1Test() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<String> networkIds = null;
        List<String> serials = null;
        List<String> iccids = null;
        List<Object> response = api.getOrganizationApplianceUplinkStatuses_1(organizationId, perPage, startingAfter, endingBefore, networkIds, serials, iccids);
        // TODO: test validations
    }

    /**
     * List the current uplink addresses for devices in an organization.
     *
     * List the current uplink addresses for devices in an organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationDevicesUplinksAddressesByDevice_2Test() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<String> networkIds = null;
        List<String> productTypes = null;
        List<String> serials = null;
        List<String> tags = null;
        String tagsFilterType = null;
        List<GetOrganizationDevicesUplinksAddressesByDevice200ResponseInner> response = api.getOrganizationDevicesUplinksAddressesByDevice_2(organizationId, perPage, startingAfter, endingBefore, networkIds, productTypes, serials, tags, tagsFilterType);
        // TODO: test validations
    }

    /**
     * Return the uplink loss and latency for every MX in the organization from at latest 2 minutes ago
     *
     * Return the uplink loss and latency for every MX in the organization from at latest 2 minutes ago
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationDevicesUplinksLossAndLatency_2Test() throws ApiException {
        String organizationId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        String uplink = null;
        String ip = null;
        List<GetOrganizationDevicesUplinksLossAndLatency200ResponseInner> response = api.getOrganizationDevicesUplinksLossAndLatency_2(organizationId, t0, t1, timespan, uplink, ip);
        // TODO: test validations
    }

    /**
     * List the uplink status of every Meraki MX, MG and Z series devices in the organization
     *
     * List the uplink status of every Meraki MX, MG and Z series devices in the organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationUplinksStatuses_1Test() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<String> networkIds = null;
        List<String> serials = null;
        List<String> iccids = null;
        List<GetOrganizationUplinksStatuses200ResponseInner> response = api.getOrganizationUplinksStatuses_1(organizationId, perPage, startingAfter, endingBefore, networkIds, serials, iccids);
        // TODO: test validations
    }

    /**
     * Update the uplink settings for an MX appliance
     *
     * Update the uplink settings for an MX appliance
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeviceApplianceUplinksSettings_1Test() throws ApiException {
        String serial = null;
        UpdateDeviceApplianceUplinksSettingsRequest updateDeviceApplianceUplinksSettingsRequest = null;
        GetDeviceApplianceUplinksSettings200Response response = api.updateDeviceApplianceUplinksSettings_1(serial, updateDeviceApplianceUplinksSettingsRequest);
        // TODO: test validations
    }

}
