/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateDeviceSwitchRoutingStaticRouteRequest;
import org.openapitools.client.model.CreateNetworkApplianceStaticRouteRequest;
import org.openapitools.client.model.GetDeviceSwitchRoutingStaticRoute200Response;
import org.openapitools.client.model.UpdateDeviceSwitchRoutingStaticRouteRequest;
import org.openapitools.client.model.UpdateNetworkApplianceStaticRouteRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for StaticRoutesApi
 */
@Disabled
public class StaticRoutesApiTest {

    private final StaticRoutesApi api = new StaticRoutesApi();

    /**
     * Create a layer 3 static route for a switch
     *
     * Create a layer 3 static route for a switch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDeviceSwitchRoutingStaticRoute_2Test() throws ApiException {
        String serial = null;
        CreateDeviceSwitchRoutingStaticRouteRequest createDeviceSwitchRoutingStaticRouteRequest = null;
        Object response = api.createDeviceSwitchRoutingStaticRoute_2(serial, createDeviceSwitchRoutingStaticRouteRequest);
        // TODO: test validations
    }

    /**
     * Add a static route for an MX or teleworker network
     *
     * Add a static route for an MX or teleworker network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkApplianceStaticRoute_1Test() throws ApiException {
        String networkId = null;
        CreateNetworkApplianceStaticRouteRequest createNetworkApplianceStaticRouteRequest = null;
        Object response = api.createNetworkApplianceStaticRoute_1(networkId, createNetworkApplianceStaticRouteRequest);
        // TODO: test validations
    }

    /**
     * Create a layer 3 static route for a switch stack
     *
     * Create a layer 3 static route for a switch stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkSwitchStackRoutingStaticRoute_3Test() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        CreateDeviceSwitchRoutingStaticRouteRequest createDeviceSwitchRoutingStaticRouteRequest = null;
        Object response = api.createNetworkSwitchStackRoutingStaticRoute_3(networkId, switchStackId, createDeviceSwitchRoutingStaticRouteRequest);
        // TODO: test validations
    }

    /**
     * Delete a layer 3 static route for a switch
     *
     * Delete a layer 3 static route for a switch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDeviceSwitchRoutingStaticRoute_2Test() throws ApiException {
        String serial = null;
        String staticRouteId = null;
        api.deleteDeviceSwitchRoutingStaticRoute_2(serial, staticRouteId);
        // TODO: test validations
    }

    /**
     * Delete a static route from an MX or teleworker network
     *
     * Delete a static route from an MX or teleworker network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkApplianceStaticRoute_1Test() throws ApiException {
        String networkId = null;
        String staticRouteId = null;
        api.deleteNetworkApplianceStaticRoute_1(networkId, staticRouteId);
        // TODO: test validations
    }

    /**
     * Delete a layer 3 static route for a switch stack
     *
     * Delete a layer 3 static route for a switch stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkSwitchStackRoutingStaticRoute_3Test() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        String staticRouteId = null;
        api.deleteNetworkSwitchStackRoutingStaticRoute_3(networkId, switchStackId, staticRouteId);
        // TODO: test validations
    }

    /**
     * Return a layer 3 static route for a switch
     *
     * Return a layer 3 static route for a switch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceSwitchRoutingStaticRoute_2Test() throws ApiException {
        String serial = null;
        String staticRouteId = null;
        GetDeviceSwitchRoutingStaticRoute200Response response = api.getDeviceSwitchRoutingStaticRoute_2(serial, staticRouteId);
        // TODO: test validations
    }

    /**
     * List layer 3 static routes for a switch
     *
     * List layer 3 static routes for a switch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceSwitchRoutingStaticRoutes_2Test() throws ApiException {
        String serial = null;
        List<Object> response = api.getDeviceSwitchRoutingStaticRoutes_2(serial);
        // TODO: test validations
    }

    /**
     * Return a static route for an MX or teleworker network
     *
     * Return a static route for an MX or teleworker network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceStaticRoute_1Test() throws ApiException {
        String networkId = null;
        String staticRouteId = null;
        Object response = api.getNetworkApplianceStaticRoute_1(networkId, staticRouteId);
        // TODO: test validations
    }

    /**
     * List the static routes for an MX or teleworker network
     *
     * List the static routes for an MX or teleworker network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceStaticRoutes_1Test() throws ApiException {
        String networkId = null;
        List<Object> response = api.getNetworkApplianceStaticRoutes_1(networkId);
        // TODO: test validations
    }

    /**
     * Return a layer 3 static route for a switch stack
     *
     * Return a layer 3 static route for a switch stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchStackRoutingStaticRoute_3Test() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        String staticRouteId = null;
        Object response = api.getNetworkSwitchStackRoutingStaticRoute_3(networkId, switchStackId, staticRouteId);
        // TODO: test validations
    }

    /**
     * List layer 3 static routes for a switch stack
     *
     * List layer 3 static routes for a switch stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchStackRoutingStaticRoutes_3Test() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        List<Object> response = api.getNetworkSwitchStackRoutingStaticRoutes_3(networkId, switchStackId);
        // TODO: test validations
    }

    /**
     * Update a layer 3 static route for a switch
     *
     * Update a layer 3 static route for a switch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeviceSwitchRoutingStaticRoute_2Test() throws ApiException {
        String serial = null;
        String staticRouteId = null;
        UpdateDeviceSwitchRoutingStaticRouteRequest updateDeviceSwitchRoutingStaticRouteRequest = null;
        Object response = api.updateDeviceSwitchRoutingStaticRoute_2(serial, staticRouteId, updateDeviceSwitchRoutingStaticRouteRequest);
        // TODO: test validations
    }

    /**
     * Update a static route for an MX or teleworker network
     *
     * Update a static route for an MX or teleworker network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceStaticRoute_1Test() throws ApiException {
        String networkId = null;
        String staticRouteId = null;
        UpdateNetworkApplianceStaticRouteRequest updateNetworkApplianceStaticRouteRequest = null;
        Object response = api.updateNetworkApplianceStaticRoute_1(networkId, staticRouteId, updateNetworkApplianceStaticRouteRequest);
        // TODO: test validations
    }

    /**
     * Update a layer 3 static route for a switch stack
     *
     * Update a layer 3 static route for a switch stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSwitchStackRoutingStaticRoute_3Test() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        String staticRouteId = null;
        UpdateDeviceSwitchRoutingStaticRouteRequest updateDeviceSwitchRoutingStaticRouteRequest = null;
        Object response = api.updateNetworkSwitchStackRoutingStaticRoute_3(networkId, switchStackId, staticRouteId, updateDeviceSwitchRoutingStaticRouteRequest);
        // TODO: test validations
    }

}
