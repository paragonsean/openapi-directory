/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddNetworkSwitchStackRequest;
import org.openapitools.client.model.AssignOrganizationLicensesSeats200Response;
import org.openapitools.client.model.AssignOrganizationLicensesSeatsRequest;
import org.openapitools.client.model.BindNetworkRequest;
import org.openapitools.client.model.CheckinNetworkSmDevices200Response;
import org.openapitools.client.model.CheckinNetworkSmDevicesRequest;
import org.openapitools.client.model.ClaimIntoOrganizationInventoryRequest;
import org.openapitools.client.model.ClaimIntoOrganizationRequest;
import org.openapitools.client.model.ClaimNetworkDevicesRequest;
import org.openapitools.client.model.CloneOrganizationRequest;
import org.openapitools.client.model.CloneOrganizationSwitchDevicesRequest;
import org.openapitools.client.model.CombineOrganizationNetworks200Response;
import org.openapitools.client.model.CombineOrganizationNetworksRequest;
import org.openapitools.client.model.CreateDeviceApplianceVmxAuthenticationToken201Response;
import org.openapitools.client.model.CreateDeviceSwitchRoutingInterfaceRequest;
import org.openapitools.client.model.CreateDeviceSwitchRoutingStaticRouteRequest;
import org.openapitools.client.model.CreateNetworkAppliancePrefixesDelegatedStaticRequest;
import org.openapitools.client.model.CreateNetworkApplianceStaticRouteRequest;
import org.openapitools.client.model.CreateNetworkApplianceTrafficShapingCustomPerformanceClassRequest;
import org.openapitools.client.model.CreateNetworkApplianceVlan201Response;
import org.openapitools.client.model.CreateNetworkApplianceVlanRequest;
import org.openapitools.client.model.CreateNetworkCameraQualityRetentionProfileRequest;
import org.openapitools.client.model.CreateNetworkCameraWirelessProfileRequest;
import org.openapitools.client.model.CreateNetworkFirmwareUpgradesRollback200Response;
import org.openapitools.client.model.CreateNetworkFirmwareUpgradesRollbackRequest;
import org.openapitools.client.model.CreateNetworkFirmwareUpgradesStagedEventRequest;
import org.openapitools.client.model.CreateNetworkFirmwareUpgradesStagedGroupRequest;
import org.openapitools.client.model.CreateNetworkFloorPlanRequest;
import org.openapitools.client.model.CreateNetworkGroupPolicyRequest;
import org.openapitools.client.model.CreateNetworkMerakiAuthUserRequest;
import org.openapitools.client.model.CreateNetworkMqttBrokerRequest;
import org.openapitools.client.model.CreateNetworkPiiRequestRequest;
import org.openapitools.client.model.CreateNetworkSensorAlertsProfileRequest;
import org.openapitools.client.model.CreateNetworkSmBypassActivationLockAttemptRequest;
import org.openapitools.client.model.CreateNetworkSmTargetGroupRequest;
import org.openapitools.client.model.CreateNetworkSwitchAccessPolicyRequest;
import org.openapitools.client.model.CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest;
import org.openapitools.client.model.CreateNetworkSwitchLinkAggregationRequest;
import org.openapitools.client.model.CreateNetworkSwitchPortScheduleRequest;
import org.openapitools.client.model.CreateNetworkSwitchQosRuleRequest;
import org.openapitools.client.model.CreateNetworkSwitchRoutingMulticastRendezvousPointRequest;
import org.openapitools.client.model.CreateNetworkSwitchStackRequest;
import org.openapitools.client.model.CreateNetworkSwitchStackRoutingInterfaceRequest;
import org.openapitools.client.model.CreateNetworkWebhooksHttpServerRequest;
import org.openapitools.client.model.CreateNetworkWebhooksPayloadTemplateRequest;
import org.openapitools.client.model.CreateNetworkWebhooksWebhookTest201Response;
import org.openapitools.client.model.CreateNetworkWebhooksWebhookTestRequest;
import org.openapitools.client.model.CreateNetworkWirelessRfProfile201Response;
import org.openapitools.client.model.CreateNetworkWirelessRfProfileRequest;
import org.openapitools.client.model.CreateNetworkWirelessSsidIdentityPskRequest;
import org.openapitools.client.model.CreateOrganizationActionBatch201Response;
import org.openapitools.client.model.CreateOrganizationActionBatchRequest;
import org.openapitools.client.model.CreateOrganizationAdaptivePolicyAclRequest;
import org.openapitools.client.model.CreateOrganizationAdaptivePolicyGroupRequest;
import org.openapitools.client.model.CreateOrganizationAdaptivePolicyPolicyRequest;
import org.openapitools.client.model.CreateOrganizationAdminRequest;
import org.openapitools.client.model.CreateOrganizationAlertsProfileRequest;
import org.openapitools.client.model.CreateOrganizationBrandingPolicy201Response;
import org.openapitools.client.model.CreateOrganizationBrandingPolicyRequest;
import org.openapitools.client.model.CreateOrganizationCameraCustomAnalyticsArtifactRequest;
import org.openapitools.client.model.CreateOrganizationConfigTemplateRequest;
import org.openapitools.client.model.CreateOrganizationEarlyAccessFeaturesOptInRequest;
import org.openapitools.client.model.CreateOrganizationInsightMonitoredMediaServerRequest;
import org.openapitools.client.model.CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest;
import org.openapitools.client.model.CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner;
import org.openapitools.client.model.CreateOrganizationInventoryOnboardingCloudMonitoringImportRequest;
import org.openapitools.client.model.CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner;
import org.openapitools.client.model.CreateOrganizationInventoryOnboardingCloudMonitoringPrepareRequest;
import org.openapitools.client.model.CreateOrganizationNetworkRequest;
import org.openapitools.client.model.CreateOrganizationPolicyObjectRequest;
import org.openapitools.client.model.CreateOrganizationPolicyObjectsGroupRequest;
import org.openapitools.client.model.CreateOrganizationRequest;
import org.openapitools.client.model.CreateOrganizationSamlIdpRequest;
import org.openapitools.client.model.CreateOrganizationSamlRoleRequest;
import org.openapitools.client.model.GetDeviceApplianceUplinksSettings200Response;
import org.openapitools.client.model.GetDeviceSensorRelationships200ResponseInner;
import org.openapitools.client.model.GetDeviceSwitchPorts200ResponseInner;
import org.openapitools.client.model.GetDeviceSwitchRoutingInterfaces200ResponseInner;
import org.openapitools.client.model.GetDeviceSwitchRoutingStaticRoute200Response;
import org.openapitools.client.model.GetDeviceWirelessBluetoothSettings200Response;
import org.openapitools.client.model.GetNetwork200Response;
import org.openapitools.client.model.GetNetworkAppliancePorts200ResponseInner;
import org.openapitools.client.model.GetNetworkAppliancePrefixesDelegatedStatics200ResponseInner;
import org.openapitools.client.model.GetNetworkApplianceSettings200Response;
import org.openapitools.client.model.GetNetworkApplianceSingleLan200Response;
import org.openapitools.client.model.GetNetworkApplianceSsids200ResponseInner;
import org.openapitools.client.model.GetNetworkApplianceTrafficShapingUplinkBandwidth200Response;
import org.openapitools.client.model.GetNetworkApplianceTrafficShapingUplinkSelection200Response;
import org.openapitools.client.model.GetNetworkApplianceVlans200ResponseInner;
import org.openapitools.client.model.GetNetworkApplianceVpnSiteToSiteVpn200Response;
import org.openapitools.client.model.GetNetworkCellularGatewayDhcp200Response;
import org.openapitools.client.model.GetNetworkFirmwareUpgrades200Response;
import org.openapitools.client.model.GetNetworkFirmwareUpgradesStagedEvents200Response;
import org.openapitools.client.model.GetNetworkFirmwareUpgradesStagedGroups200ResponseInner;
import org.openapitools.client.model.GetNetworkFirmwareUpgradesStagedStages200ResponseInner;
import org.openapitools.client.model.GetNetworkHealthAlerts200ResponseInner;
import org.openapitools.client.model.GetNetworkMerakiAuthUsers200ResponseInner;
import org.openapitools.client.model.GetNetworkPoliciesByClient200ResponseInner;
import org.openapitools.client.model.GetNetworkSensorAlertsProfiles200ResponseInner;
import org.openapitools.client.model.GetNetworkSensorRelationships200ResponseInner;
import org.openapitools.client.model.GetNetworkSettings200Response;
import org.openapitools.client.model.GetNetworkSmDeviceCerts200ResponseInner;
import org.openapitools.client.model.GetNetworkSmDeviceDeviceProfiles200ResponseInner;
import org.openapitools.client.model.GetNetworkSmDeviceNetworkAdapters200ResponseInner;
import org.openapitools.client.model.GetNetworkSmDeviceSecurityCenters200ResponseInner;
import org.openapitools.client.model.GetNetworkSmDeviceSoftwares200ResponseInner;
import org.openapitools.client.model.GetNetworkSmDeviceWlanLists200ResponseInner;
import org.openapitools.client.model.GetNetworkSmDevices200ResponseInner;
import org.openapitools.client.model.GetNetworkSmProfiles200ResponseInner;
import org.openapitools.client.model.GetNetworkSmTrustedAccessConfigs200ResponseInner;
import org.openapitools.client.model.GetNetworkSmUserAccessDevices200ResponseInner;
import org.openapitools.client.model.GetNetworkSmUsers200ResponseInner;
import org.openapitools.client.model.GetNetworkSwitchAccessControlLists200Response;
import org.openapitools.client.model.GetNetworkSwitchAccessPolicies200ResponseInner;
import org.openapitools.client.model.GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner;
import org.openapitools.client.model.GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner;
import org.openapitools.client.model.GetNetworkSwitchDhcpV4ServersSeen200ResponseInner;
import org.openapitools.client.model.GetNetworkSwitchMtu200Response;
import org.openapitools.client.model.GetNetworkSwitchSettings200Response;
import org.openapitools.client.model.GetNetworkSwitchStack200Response;
import org.openapitools.client.model.GetNetworkSwitchStormControl200Response;
import org.openapitools.client.model.GetNetworkSyslogServers200Response;
import org.openapitools.client.model.GetNetworkWebhooksHttpServers200ResponseInner;
import org.openapitools.client.model.GetNetworkWebhooksPayloadTemplates200ResponseInner;
import org.openapitools.client.model.GetNetworkWirelessBluetoothSettings200Response;
import org.openapitools.client.model.GetNetworkWirelessSettings200Response;
import org.openapitools.client.model.GetNetworkWirelessSsidEapOverride200Response;
import org.openapitools.client.model.GetNetworkWirelessSsidIdentityPsks200ResponseInner;
import org.openapitools.client.model.GetNetworkWirelessSsidSplashSettings200Response;
import org.openapitools.client.model.GetOrganizationApplianceVpnThirdPartyVPNPeers200Response;
import org.openapitools.client.model.GetOrganizationBrandingPolicies200ResponseInner;
import org.openapitools.client.model.GetOrganizationBrandingPoliciesPriorities200Response;
import org.openapitools.client.model.GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner;
import org.openapitools.client.model.GetOrganizationConfigTemplateSwitchProfiles200Response;
import org.openapitools.client.model.GetOrganizationDevices200ResponseInner;
import org.openapitools.client.model.GetOrganizationFirmwareUpgrades200ResponseInner;
import org.openapitools.client.model.GetOrganizationFirmwareUpgradesByDevice200ResponseInner;
import org.openapitools.client.model.GetOrganizationInsightApplications200ResponseInner;
import org.openapitools.client.model.GetOrganizationInsightMonitoredMediaServers200ResponseInner;
import org.openapitools.client.model.GetOrganizationInventoryDevices200ResponseInner;
import org.openapitools.client.model.GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner;
import org.openapitools.client.model.GetOrganizationLicenses200ResponseInner;
import org.openapitools.client.model.GetOrganizationLicensingCotermLicenses200ResponseInner;
import org.openapitools.client.model.GetOrganizationLoginSecurity200Response;
import org.openapitools.client.model.GetOrganizationSaml200Response;
import org.openapitools.client.model.GetOrganizationSamlIdps200ResponseInner;
import org.openapitools.client.model.GetOrganizationSmApnsCert200Response;
import org.openapitools.client.model.GetOrganizationSmVppAccounts200ResponseInner;
import org.openapitools.client.model.GetOrganizationSwitchPortsBySwitch200ResponseInner;
import org.openapitools.client.model.GetOrganizationWirelessDevicesEthernetStatuses200ResponseInner;
import org.openapitools.client.model.GetOrganizations200ResponseInner;
import org.openapitools.client.model.LockNetworkSmDevicesRequest;
import org.openapitools.client.model.ModifyNetworkSmDevicesTags200ResponseInner;
import org.openapitools.client.model.ModifyNetworkSmDevicesTagsRequest;
import org.openapitools.client.model.MoveNetworkSmDevices200Response;
import org.openapitools.client.model.MoveNetworkSmDevicesRequest;
import org.openapitools.client.model.MoveOrganizationLicenses200Response;
import org.openapitools.client.model.MoveOrganizationLicensesRequest;
import org.openapitools.client.model.MoveOrganizationLicensesSeats200Response;
import org.openapitools.client.model.MoveOrganizationLicensesSeatsRequest;
import org.openapitools.client.model.MoveOrganizationLicensingCotermLicenses200Response;
import org.openapitools.client.model.MoveOrganizationLicensingCotermLicensesRequest;
import java.time.OffsetDateTime;
import org.openapitools.client.model.ProvisionNetworkClientsRequest;
import org.openapitools.client.model.ReleaseFromOrganizationInventoryRequest;
import org.openapitools.client.model.RemoveNetworkDevicesRequest;
import org.openapitools.client.model.RemoveNetworkSwitchStackRequest;
import org.openapitools.client.model.RenewOrganizationLicensesSeatsRequest;
import org.openapitools.client.model.RollbacksNetworkFirmwareUpgradesStagedEventsRequest;
import org.openapitools.client.model.SplitNetwork200Response;
import org.openapitools.client.model.UnbindNetworkRequest;
import org.openapitools.client.model.UpdateDeviceApplianceUplinksSettingsRequest;
import org.openapitools.client.model.UpdateDeviceCameraCustomAnalyticsRequest;
import org.openapitools.client.model.UpdateDeviceCameraQualityAndRetentionRequest;
import org.openapitools.client.model.UpdateDeviceCameraSenseRequest;
import org.openapitools.client.model.UpdateDeviceCameraVideoSettingsRequest;
import org.openapitools.client.model.UpdateDeviceCameraWirelessProfilesRequest;
import org.openapitools.client.model.UpdateDeviceCellularGatewayLanRequest;
import org.openapitools.client.model.UpdateDeviceCellularGatewayPortForwardingRulesRequest;
import org.openapitools.client.model.UpdateDeviceCellularSimsRequest;
import org.openapitools.client.model.UpdateDeviceManagementInterfaceRequest;
import org.openapitools.client.model.UpdateDeviceRequest;
import org.openapitools.client.model.UpdateDeviceSensorRelationshipsRequest;
import org.openapitools.client.model.UpdateDeviceSwitchPortRequest;
import org.openapitools.client.model.UpdateDeviceSwitchRoutingInterfaceDhcpRequest;
import org.openapitools.client.model.UpdateDeviceSwitchRoutingStaticRouteRequest;
import org.openapitools.client.model.UpdateDeviceSwitchWarmSpareRequest;
import org.openapitools.client.model.UpdateDeviceWirelessBluetoothSettingsRequest;
import org.openapitools.client.model.UpdateDeviceWirelessRadioSettingsRequest;
import org.openapitools.client.model.UpdateNetworkAlertsSettingsRequest;
import org.openapitools.client.model.UpdateNetworkApplianceConnectivityMonitoringDestinationsRequest;
import org.openapitools.client.model.UpdateNetworkApplianceContentFilteringRequest;
import org.openapitools.client.model.UpdateNetworkApplianceFirewallCellularFirewallRulesRequest;
import org.openapitools.client.model.UpdateNetworkApplianceFirewallFirewalledServiceRequest;
import org.openapitools.client.model.UpdateNetworkApplianceFirewallInboundFirewallRulesRequest;
import org.openapitools.client.model.UpdateNetworkApplianceFirewallL7FirewallRulesRequest;
import org.openapitools.client.model.UpdateNetworkApplianceFirewallOneToManyNatRulesRequest;
import org.openapitools.client.model.UpdateNetworkApplianceFirewallOneToOneNatRulesRequest;
import org.openapitools.client.model.UpdateNetworkApplianceFirewallPortForwardingRulesRequest;
import org.openapitools.client.model.UpdateNetworkApplianceFirewallSettingsRequest;
import org.openapitools.client.model.UpdateNetworkAppliancePortRequest;
import org.openapitools.client.model.UpdateNetworkAppliancePrefixesDelegatedStaticRequest;
import org.openapitools.client.model.UpdateNetworkApplianceSecurityIntrusionRequest;
import org.openapitools.client.model.UpdateNetworkApplianceSecurityMalwareRequest;
import org.openapitools.client.model.UpdateNetworkApplianceSettingsRequest;
import org.openapitools.client.model.UpdateNetworkApplianceSingleLanRequest;
import org.openapitools.client.model.UpdateNetworkApplianceSsidRequest;
import org.openapitools.client.model.UpdateNetworkApplianceStaticRouteRequest;
import org.openapitools.client.model.UpdateNetworkApplianceTrafficShapingCustomPerformanceClassRequest;
import org.openapitools.client.model.UpdateNetworkApplianceTrafficShapingRequest;
import org.openapitools.client.model.UpdateNetworkApplianceTrafficShapingRulesRequest;
import org.openapitools.client.model.UpdateNetworkApplianceTrafficShapingUplinkBandwidthRequest;
import org.openapitools.client.model.UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest;
import org.openapitools.client.model.UpdateNetworkApplianceVlanRequest;
import org.openapitools.client.model.UpdateNetworkApplianceVlansSettingsRequest;
import org.openapitools.client.model.UpdateNetworkApplianceVpnBgpRequest;
import org.openapitools.client.model.UpdateNetworkApplianceVpnSiteToSiteVpnRequest;
import org.openapitools.client.model.UpdateNetworkApplianceWarmSpareRequest;
import org.openapitools.client.model.UpdateNetworkCameraQualityRetentionProfileRequest;
import org.openapitools.client.model.UpdateNetworkCameraWirelessProfileRequest;
import org.openapitools.client.model.UpdateNetworkCellularGatewayConnectivityMonitoringDestinationsRequest;
import org.openapitools.client.model.UpdateNetworkCellularGatewayDhcpRequest;
import org.openapitools.client.model.UpdateNetworkCellularGatewaySubnetPoolRequest;
import org.openapitools.client.model.UpdateNetworkCellularGatewayUplinkRequest;
import org.openapitools.client.model.UpdateNetworkClientPolicyRequest;
import org.openapitools.client.model.UpdateNetworkClientSplashAuthorizationStatusRequest;
import org.openapitools.client.model.UpdateNetworkFirmwareUpgradesRequest;
import org.openapitools.client.model.UpdateNetworkFirmwareUpgradesStagedEventsRequest;
import org.openapitools.client.model.UpdateNetworkFirmwareUpgradesStagedStagesRequest;
import org.openapitools.client.model.UpdateNetworkFloorPlanRequest;
import org.openapitools.client.model.UpdateNetworkGroupPolicyRequest;
import org.openapitools.client.model.UpdateNetworkMerakiAuthUserRequest;
import org.openapitools.client.model.UpdateNetworkMqttBrokerRequest;
import org.openapitools.client.model.UpdateNetworkNetflowRequest;
import org.openapitools.client.model.UpdateNetworkRequest;
import org.openapitools.client.model.UpdateNetworkSensorAlertsProfileRequest;
import org.openapitools.client.model.UpdateNetworkSettingsRequest;
import org.openapitools.client.model.UpdateNetworkSmDevicesFields200ResponseInner;
import org.openapitools.client.model.UpdateNetworkSmDevicesFieldsRequest;
import org.openapitools.client.model.UpdateNetworkSnmpRequest;
import org.openapitools.client.model.UpdateNetworkSwitchAccessControlListsRequest;
import org.openapitools.client.model.UpdateNetworkSwitchAccessPolicyRequest;
import org.openapitools.client.model.UpdateNetworkSwitchAlternateManagementInterfaceRequest;
import org.openapitools.client.model.UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest;
import org.openapitools.client.model.UpdateNetworkSwitchDhcpServerPolicyRequest;
import org.openapitools.client.model.UpdateNetworkSwitchDscpToCosMappingsRequest;
import org.openapitools.client.model.UpdateNetworkSwitchLinkAggregationRequest;
import org.openapitools.client.model.UpdateNetworkSwitchMtuRequest;
import org.openapitools.client.model.UpdateNetworkSwitchPortScheduleRequest;
import org.openapitools.client.model.UpdateNetworkSwitchQosRuleRequest;
import org.openapitools.client.model.UpdateNetworkSwitchQosRulesOrderRequest;
import org.openapitools.client.model.UpdateNetworkSwitchRoutingMulticastRendezvousPointRequest;
import org.openapitools.client.model.UpdateNetworkSwitchRoutingMulticastRequest;
import org.openapitools.client.model.UpdateNetworkSwitchRoutingOspfRequest;
import org.openapitools.client.model.UpdateNetworkSwitchSettingsRequest;
import org.openapitools.client.model.UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest;
import org.openapitools.client.model.UpdateNetworkSwitchStackRoutingInterfaceRequest;
import org.openapitools.client.model.UpdateNetworkSwitchStormControlRequest;
import org.openapitools.client.model.UpdateNetworkSwitchStpRequest;
import org.openapitools.client.model.UpdateNetworkSyslogServersRequest;
import org.openapitools.client.model.UpdateNetworkTrafficAnalysisRequest;
import org.openapitools.client.model.UpdateNetworkWebhooksHttpServerRequest;
import org.openapitools.client.model.UpdateNetworkWebhooksPayloadTemplateRequest;
import org.openapitools.client.model.UpdateNetworkWirelessAlternateManagementInterfaceRequest;
import org.openapitools.client.model.UpdateNetworkWirelessBillingRequest;
import org.openapitools.client.model.UpdateNetworkWirelessBluetoothSettingsRequest;
import org.openapitools.client.model.UpdateNetworkWirelessRfProfileRequest;
import org.openapitools.client.model.UpdateNetworkWirelessSettingsRequest;
import org.openapitools.client.model.UpdateNetworkWirelessSsidBonjourForwardingRequest;
import org.openapitools.client.model.UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesRequest;
import org.openapitools.client.model.UpdateNetworkWirelessSsidEapOverrideRequest;
import org.openapitools.client.model.UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequest;
import org.openapitools.client.model.UpdateNetworkWirelessSsidFirewallL7FirewallRulesRequest;
import org.openapitools.client.model.UpdateNetworkWirelessSsidHotspot20Request;
import org.openapitools.client.model.UpdateNetworkWirelessSsidIdentityPskRequest;
import org.openapitools.client.model.UpdateNetworkWirelessSsidRequest;
import org.openapitools.client.model.UpdateNetworkWirelessSsidSchedulesRequest;
import org.openapitools.client.model.UpdateNetworkWirelessSsidSplashSettingsRequest;
import org.openapitools.client.model.UpdateNetworkWirelessSsidTrafficShapingRulesRequest;
import org.openapitools.client.model.UpdateNetworkWirelessSsidVpnRequest;
import org.openapitools.client.model.UpdateOrganizationActionBatchRequest;
import org.openapitools.client.model.UpdateOrganizationAdaptivePolicyAclRequest;
import org.openapitools.client.model.UpdateOrganizationAdaptivePolicyGroupRequest;
import org.openapitools.client.model.UpdateOrganizationAdaptivePolicyPolicyRequest;
import org.openapitools.client.model.UpdateOrganizationAdaptivePolicySettingsRequest;
import org.openapitools.client.model.UpdateOrganizationAdminRequest;
import org.openapitools.client.model.UpdateOrganizationAlertsProfileRequest;
import org.openapitools.client.model.UpdateOrganizationApplianceSecurityIntrusionRequest;
import org.openapitools.client.model.UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequest;
import org.openapitools.client.model.UpdateOrganizationApplianceVpnVpnFirewallRulesRequest;
import org.openapitools.client.model.UpdateOrganizationBrandingPoliciesPrioritiesRequest;
import org.openapitools.client.model.UpdateOrganizationBrandingPolicyRequest;
import org.openapitools.client.model.UpdateOrganizationCameraOnboardingStatusesRequest;
import org.openapitools.client.model.UpdateOrganizationConfigTemplateRequest;
import org.openapitools.client.model.UpdateOrganizationConfigTemplateSwitchProfilePortRequest;
import org.openapitools.client.model.UpdateOrganizationEarlyAccessFeaturesOptInRequest;
import org.openapitools.client.model.UpdateOrganizationInsightMonitoredMediaServerRequest;
import org.openapitools.client.model.UpdateOrganizationLicenseRequest;
import org.openapitools.client.model.UpdateOrganizationLoginSecurityRequest;
import org.openapitools.client.model.UpdateOrganizationPolicyObjectRequest;
import org.openapitools.client.model.UpdateOrganizationPolicyObjectsGroupRequest;
import org.openapitools.client.model.UpdateOrganizationRequest;
import org.openapitools.client.model.UpdateOrganizationSamlIdpRequest;
import org.openapitools.client.model.UpdateOrganizationSamlRequest;
import org.openapitools.client.model.UpdateOrganizationSamlRole200Response;
import org.openapitools.client.model.UpdateOrganizationSamlRoleRequest;
import org.openapitools.client.model.UpdateOrganizationSnmpRequest;
import org.openapitools.client.model.VmxNetworkDevicesClaimRequest;
import org.openapitools.client.model.WipeNetworkSmDevices200Response;
import org.openapitools.client.model.WipeNetworkSmDevicesRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConfigureApi
 */
@Disabled
public class ConfigureApiTest {

    private final ConfigureApi api = new ConfigureApi();

    /**
     * Add a switch to a stack
     *
     * Add a switch to a stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addNetworkSwitchStack_0Test() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        AddNetworkSwitchStackRequest addNetworkSwitchStackRequest = null;
        Object response = api.addNetworkSwitchStack_0(networkId, switchStackId, addNetworkSwitchStackRequest);
        // TODO: test validations
    }

    /**
     * Assign SM seats to a network
     *
     * Assign SM seats to a network. This will increase the managed SM device limit of the network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assignOrganizationLicensesSeats_0Test() throws ApiException {
        String organizationId = null;
        AssignOrganizationLicensesSeatsRequest assignOrganizationLicensesSeatsRequest = null;
        AssignOrganizationLicensesSeats200Response response = api.assignOrganizationLicensesSeats_0(organizationId, assignOrganizationLicensesSeatsRequest);
        // TODO: test validations
    }

    /**
     * Bind a network to a template.
     *
     * Bind a network to a template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bindNetwork_0Test() throws ApiException {
        String networkId = null;
        BindNetworkRequest bindNetworkRequest = null;
        Object response = api.bindNetwork_0(networkId, bindNetworkRequest);
        // TODO: test validations
    }

    /**
     * Force check-in a set of devices
     *
     * Force check-in a set of devices
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkinNetworkSmDevices_0Test() throws ApiException {
        String networkId = null;
        CheckinNetworkSmDevicesRequest checkinNetworkSmDevicesRequest = null;
        CheckinNetworkSmDevices200Response response = api.checkinNetworkSmDevices_0(networkId, checkinNetworkSmDevicesRequest);
        // TODO: test validations
    }

    /**
     * Claim a list of devices, licenses, and/or orders into an organization inventory
     *
     * Claim a list of devices, licenses, and/or orders into an organization inventory. When claiming by order, all devices and licenses in the order will be claimed; licenses will be added to the organization and devices will be placed in the organization&#39;s inventory. Use /organizations/{organizationId}/inventory/release to release devices from an organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void claimIntoOrganizationInventory_0Test() throws ApiException {
        String organizationId = null;
        ClaimIntoOrganizationInventoryRequest claimIntoOrganizationInventoryRequest = null;
        Object response = api.claimIntoOrganizationInventory_0(organizationId, claimIntoOrganizationInventoryRequest);
        // TODO: test validations
    }

    /**
     * Claim a list of devices, licenses, and/or orders into an organization
     *
     * Claim a list of devices, licenses, and/or orders into an organization. When claiming by order, all devices and licenses in the order will be claimed; licenses will be added to the organization and devices will be placed in the organization&#39;s inventory.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void claimIntoOrganization_0Test() throws ApiException {
        String organizationId = null;
        ClaimIntoOrganizationRequest claimIntoOrganizationRequest = null;
        Object response = api.claimIntoOrganization_0(organizationId, claimIntoOrganizationRequest);
        // TODO: test validations
    }

    /**
     * Claim devices into a network. (Note: for recently claimed devices, it may take a few minutes for API requsts against that device to succeed)
     *
     * Claim devices into a network. (Note: for recently claimed devices, it may take a few minutes for API requsts against that device to succeed)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void claimNetworkDevices_0Test() throws ApiException {
        String networkId = null;
        ClaimNetworkDevicesRequest claimNetworkDevicesRequest = null;
        api.claimNetworkDevices_0(networkId, claimNetworkDevicesRequest);
        // TODO: test validations
    }

    /**
     * Clone port-level and some switch-level configuration settings from a source switch to one or more target switches
     *
     * Clone port-level and some switch-level configuration settings from a source switch to one or more target switches. Cloned settings include: Aggregation Groups, Power Settings, Multicast Settings, MTU Configuration, STP Bridge priority, Port Mirroring
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloneOrganizationSwitchDevices_0Test() throws ApiException {
        String organizationId = null;
        CloneOrganizationSwitchDevicesRequest cloneOrganizationSwitchDevicesRequest = null;
        Object response = api.cloneOrganizationSwitchDevices_0(organizationId, cloneOrganizationSwitchDevicesRequest);
        // TODO: test validations
    }

    /**
     * Create a new organization by cloning the addressed organization
     *
     * Create a new organization by cloning the addressed organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloneOrganization_0Test() throws ApiException {
        String organizationId = null;
        CloneOrganizationRequest cloneOrganizationRequest = null;
        GetOrganizations200ResponseInner response = api.cloneOrganization_0(organizationId, cloneOrganizationRequest);
        // TODO: test validations
    }

    /**
     * Combine multiple networks into a single network
     *
     * Combine multiple networks into a single network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void combineOrganizationNetworks_0Test() throws ApiException {
        String organizationId = null;
        CombineOrganizationNetworksRequest combineOrganizationNetworksRequest = null;
        CombineOrganizationNetworks200Response response = api.combineOrganizationNetworks_0(organizationId, combineOrganizationNetworksRequest);
        // TODO: test validations
    }

    /**
     * Generate a new vMX authentication token
     *
     * Generate a new vMX authentication token
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDeviceApplianceVmxAuthenticationToken_0Test() throws ApiException {
        String serial = null;
        CreateDeviceApplianceVmxAuthenticationToken201Response response = api.createDeviceApplianceVmxAuthenticationToken_0(serial);
        // TODO: test validations
    }

    /**
     * Create a layer 3 interface for a switch
     *
     * Create a layer 3 interface for a switch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDeviceSwitchRoutingInterface_0Test() throws ApiException {
        String serial = null;
        CreateDeviceSwitchRoutingInterfaceRequest createDeviceSwitchRoutingInterfaceRequest = null;
        GetDeviceSwitchRoutingInterfaces200ResponseInner response = api.createDeviceSwitchRoutingInterface_0(serial, createDeviceSwitchRoutingInterfaceRequest);
        // TODO: test validations
    }

    /**
     * Create a layer 3 static route for a switch
     *
     * Create a layer 3 static route for a switch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDeviceSwitchRoutingStaticRoute_0Test() throws ApiException {
        String serial = null;
        CreateDeviceSwitchRoutingStaticRouteRequest createDeviceSwitchRoutingStaticRouteRequest = null;
        Object response = api.createDeviceSwitchRoutingStaticRoute_0(serial, createDeviceSwitchRoutingStaticRouteRequest);
        // TODO: test validations
    }

    /**
     * Add a static delegated prefix from a network
     *
     * Add a static delegated prefix from a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkAppliancePrefixesDelegatedStatic_0Test() throws ApiException {
        String networkId = null;
        CreateNetworkAppliancePrefixesDelegatedStaticRequest createNetworkAppliancePrefixesDelegatedStaticRequest = null;
        Object response = api.createNetworkAppliancePrefixesDelegatedStatic_0(networkId, createNetworkAppliancePrefixesDelegatedStaticRequest);
        // TODO: test validations
    }

    /**
     * Add a static route for an MX or teleworker network
     *
     * Add a static route for an MX or teleworker network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkApplianceStaticRoute_0Test() throws ApiException {
        String networkId = null;
        CreateNetworkApplianceStaticRouteRequest createNetworkApplianceStaticRouteRequest = null;
        Object response = api.createNetworkApplianceStaticRoute_0(networkId, createNetworkApplianceStaticRouteRequest);
        // TODO: test validations
    }

    /**
     * Add a custom performance class for an MX network
     *
     * Add a custom performance class for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkApplianceTrafficShapingCustomPerformanceClass_0Test() throws ApiException {
        String networkId = null;
        CreateNetworkApplianceTrafficShapingCustomPerformanceClassRequest createNetworkApplianceTrafficShapingCustomPerformanceClassRequest = null;
        Object response = api.createNetworkApplianceTrafficShapingCustomPerformanceClass_0(networkId, createNetworkApplianceTrafficShapingCustomPerformanceClassRequest);
        // TODO: test validations
    }

    /**
     * Add a VLAN
     *
     * Add a VLAN
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkApplianceVlan_0Test() throws ApiException {
        String networkId = null;
        CreateNetworkApplianceVlanRequest createNetworkApplianceVlanRequest = null;
        CreateNetworkApplianceVlan201Response response = api.createNetworkApplianceVlan_0(networkId, createNetworkApplianceVlanRequest);
        // TODO: test validations
    }

    /**
     * Creates new quality retention profile for this network.
     *
     * Creates new quality retention profile for this network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkCameraQualityRetentionProfile_0Test() throws ApiException {
        String networkId = null;
        CreateNetworkCameraQualityRetentionProfileRequest createNetworkCameraQualityRetentionProfileRequest = null;
        Object response = api.createNetworkCameraQualityRetentionProfile_0(networkId, createNetworkCameraQualityRetentionProfileRequest);
        // TODO: test validations
    }

    /**
     * Creates a new camera wireless profile for this network.
     *
     * Creates a new camera wireless profile for this network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkCameraWirelessProfile_0Test() throws ApiException {
        String networkId = null;
        CreateNetworkCameraWirelessProfileRequest createNetworkCameraWirelessProfileRequest = null;
        Object response = api.createNetworkCameraWirelessProfile_0(networkId, createNetworkCameraWirelessProfileRequest);
        // TODO: test validations
    }

    /**
     * Rollback a Firmware Upgrade For A Network
     *
     * Rollback a Firmware Upgrade For A Network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkFirmwareUpgradesRollback_0Test() throws ApiException {
        String networkId = null;
        CreateNetworkFirmwareUpgradesRollbackRequest createNetworkFirmwareUpgradesRollbackRequest = null;
        CreateNetworkFirmwareUpgradesRollback200Response response = api.createNetworkFirmwareUpgradesRollback_0(networkId, createNetworkFirmwareUpgradesRollbackRequest);
        // TODO: test validations
    }

    /**
     * Create a Staged Upgrade Event for a network
     *
     * Create a Staged Upgrade Event for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkFirmwareUpgradesStagedEvent_0Test() throws ApiException {
        String networkId = null;
        CreateNetworkFirmwareUpgradesStagedEventRequest createNetworkFirmwareUpgradesStagedEventRequest = null;
        GetNetworkFirmwareUpgradesStagedEvents200Response response = api.createNetworkFirmwareUpgradesStagedEvent_0(networkId, createNetworkFirmwareUpgradesStagedEventRequest);
        // TODO: test validations
    }

    /**
     * Create a Staged Upgrade Group for a network
     *
     * Create a Staged Upgrade Group for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkFirmwareUpgradesStagedGroup_0Test() throws ApiException {
        String networkId = null;
        CreateNetworkFirmwareUpgradesStagedGroupRequest createNetworkFirmwareUpgradesStagedGroupRequest = null;
        Object response = api.createNetworkFirmwareUpgradesStagedGroup_0(networkId, createNetworkFirmwareUpgradesStagedGroupRequest);
        // TODO: test validations
    }

    /**
     * Upload a floor plan
     *
     * Upload a floor plan
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkFloorPlan_0Test() throws ApiException {
        String networkId = null;
        CreateNetworkFloorPlanRequest createNetworkFloorPlanRequest = null;
        Object response = api.createNetworkFloorPlan_0(networkId, createNetworkFloorPlanRequest);
        // TODO: test validations
    }

    /**
     * Create a group policy
     *
     * Create a group policy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkGroupPolicy_0Test() throws ApiException {
        String networkId = null;
        CreateNetworkGroupPolicyRequest createNetworkGroupPolicyRequest = null;
        Object response = api.createNetworkGroupPolicy_0(networkId, createNetworkGroupPolicyRequest);
        // TODO: test validations
    }

    /**
     * Authorize a user configured with Meraki Authentication for a network (currently supports 802.1X, splash guest, and client VPN users, and currently, organizations have a 50,000 user cap)
     *
     * Authorize a user configured with Meraki Authentication for a network (currently supports 802.1X, splash guest, and client VPN users, and currently, organizations have a 50,000 user cap)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkMerakiAuthUser_0Test() throws ApiException {
        String networkId = null;
        CreateNetworkMerakiAuthUserRequest createNetworkMerakiAuthUserRequest = null;
        GetNetworkMerakiAuthUsers200ResponseInner response = api.createNetworkMerakiAuthUser_0(networkId, createNetworkMerakiAuthUserRequest);
        // TODO: test validations
    }

    /**
     * Add an MQTT broker
     *
     * Add an MQTT broker
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkMqttBroker_0Test() throws ApiException {
        String networkId = null;
        CreateNetworkMqttBrokerRequest createNetworkMqttBrokerRequest = null;
        Object response = api.createNetworkMqttBroker_0(networkId, createNetworkMqttBrokerRequest);
        // TODO: test validations
    }

    /**
     * Submit a new delete or restrict processing PII request
     *
     * Submit a new delete or restrict processing PII request  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/requests &#x60;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkPiiRequest_0Test() throws ApiException {
        String networkId = null;
        CreateNetworkPiiRequestRequest createNetworkPiiRequestRequest = null;
        Object response = api.createNetworkPiiRequest_0(networkId, createNetworkPiiRequestRequest);
        // TODO: test validations
    }

    /**
     * Creates a sensor alert profile for a network.
     *
     * Creates a sensor alert profile for a network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkSensorAlertsProfile_0Test() throws ApiException {
        String networkId = null;
        CreateNetworkSensorAlertsProfileRequest createNetworkSensorAlertsProfileRequest = null;
        GetNetworkSensorAlertsProfiles200ResponseInner response = api.createNetworkSensorAlertsProfile_0(networkId, createNetworkSensorAlertsProfileRequest);
        // TODO: test validations
    }

    /**
     * Bypass activation lock attempt
     *
     * Bypass activation lock attempt
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkSmBypassActivationLockAttempt_0Test() throws ApiException {
        String networkId = null;
        CreateNetworkSmBypassActivationLockAttemptRequest createNetworkSmBypassActivationLockAttemptRequest = null;
        Object response = api.createNetworkSmBypassActivationLockAttempt_0(networkId, createNetworkSmBypassActivationLockAttemptRequest);
        // TODO: test validations
    }

    /**
     * Add a target group
     *
     * Add a target group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkSmTargetGroup_0Test() throws ApiException {
        String networkId = null;
        CreateNetworkSmTargetGroupRequest createNetworkSmTargetGroupRequest = null;
        Object response = api.createNetworkSmTargetGroup_0(networkId, createNetworkSmTargetGroupRequest);
        // TODO: test validations
    }

    /**
     * Create an access policy for a switch network
     *
     * Create an access policy for a switch network. If you would like to enable Meraki Authentication, set radiusServers to empty array.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkSwitchAccessPolicy_0Test() throws ApiException {
        String networkId = null;
        CreateNetworkSwitchAccessPolicyRequest createNetworkSwitchAccessPolicyRequest = null;
        GetNetworkSwitchAccessPolicies200ResponseInner response = api.createNetworkSwitchAccessPolicy_0(networkId, createNetworkSwitchAccessPolicyRequest);
        // TODO: test validations
    }

    /**
     * Add a server to be trusted by Dynamic ARP Inspection on this network
     *
     * Add a server to be trusted by Dynamic ARP Inspection on this network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_0Test() throws ApiException {
        String networkId = null;
        CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest = null;
        GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner response = api.createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_0(networkId, createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest);
        // TODO: test validations
    }

    /**
     * Create a link aggregation group
     *
     * Create a link aggregation group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkSwitchLinkAggregation_0Test() throws ApiException {
        String networkId = null;
        CreateNetworkSwitchLinkAggregationRequest createNetworkSwitchLinkAggregationRequest = null;
        Object response = api.createNetworkSwitchLinkAggregation_0(networkId, createNetworkSwitchLinkAggregationRequest);
        // TODO: test validations
    }

    /**
     * Add a switch port schedule
     *
     * Add a switch port schedule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkSwitchPortSchedule_0Test() throws ApiException {
        String networkId = null;
        CreateNetworkSwitchPortScheduleRequest createNetworkSwitchPortScheduleRequest = null;
        Object response = api.createNetworkSwitchPortSchedule_0(networkId, createNetworkSwitchPortScheduleRequest);
        // TODO: test validations
    }

    /**
     * Add a quality of service rule
     *
     * Add a quality of service rule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkSwitchQosRule_0Test() throws ApiException {
        String networkId = null;
        CreateNetworkSwitchQosRuleRequest createNetworkSwitchQosRuleRequest = null;
        Object response = api.createNetworkSwitchQosRule_0(networkId, createNetworkSwitchQosRuleRequest);
        // TODO: test validations
    }

    /**
     * Create a multicast rendezvous point
     *
     * Create a multicast rendezvous point
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkSwitchRoutingMulticastRendezvousPoint_0Test() throws ApiException {
        String networkId = null;
        CreateNetworkSwitchRoutingMulticastRendezvousPointRequest createNetworkSwitchRoutingMulticastRendezvousPointRequest = null;
        Object response = api.createNetworkSwitchRoutingMulticastRendezvousPoint_0(networkId, createNetworkSwitchRoutingMulticastRendezvousPointRequest);
        // TODO: test validations
    }

    /**
     * Create a layer 3 interface for a switch stack
     *
     * Create a layer 3 interface for a switch stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkSwitchStackRoutingInterface_0Test() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        CreateNetworkSwitchStackRoutingInterfaceRequest createNetworkSwitchStackRoutingInterfaceRequest = null;
        Object response = api.createNetworkSwitchStackRoutingInterface_0(networkId, switchStackId, createNetworkSwitchStackRoutingInterfaceRequest);
        // TODO: test validations
    }

    /**
     * Create a layer 3 static route for a switch stack
     *
     * Create a layer 3 static route for a switch stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkSwitchStackRoutingStaticRoute_0Test() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        CreateDeviceSwitchRoutingStaticRouteRequest createDeviceSwitchRoutingStaticRouteRequest = null;
        Object response = api.createNetworkSwitchStackRoutingStaticRoute_0(networkId, switchStackId, createDeviceSwitchRoutingStaticRouteRequest);
        // TODO: test validations
    }

    /**
     * Create a stack
     *
     * Create a stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkSwitchStack_0Test() throws ApiException {
        String networkId = null;
        CreateNetworkSwitchStackRequest createNetworkSwitchStackRequest = null;
        Object response = api.createNetworkSwitchStack_0(networkId, createNetworkSwitchStackRequest);
        // TODO: test validations
    }

    /**
     * Add an HTTP server to a network
     *
     * Add an HTTP server to a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkWebhooksHttpServer_0Test() throws ApiException {
        String networkId = null;
        CreateNetworkWebhooksHttpServerRequest createNetworkWebhooksHttpServerRequest = null;
        GetNetworkWebhooksHttpServers200ResponseInner response = api.createNetworkWebhooksHttpServer_0(networkId, createNetworkWebhooksHttpServerRequest);
        // TODO: test validations
    }

    /**
     * Create a webhook payload template for a network
     *
     * Create a webhook payload template for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkWebhooksPayloadTemplate_0Test() throws ApiException {
        String networkId = null;
        CreateNetworkWebhooksPayloadTemplateRequest createNetworkWebhooksPayloadTemplateRequest = null;
        GetNetworkWebhooksPayloadTemplates200ResponseInner response = api.createNetworkWebhooksPayloadTemplate_0(networkId, createNetworkWebhooksPayloadTemplateRequest);
        // TODO: test validations
    }

    /**
     * Send a test webhook for a network
     *
     * Send a test webhook for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkWebhooksWebhookTest_0Test() throws ApiException {
        String networkId = null;
        CreateNetworkWebhooksWebhookTestRequest createNetworkWebhooksWebhookTestRequest = null;
        CreateNetworkWebhooksWebhookTest201Response response = api.createNetworkWebhooksWebhookTest_0(networkId, createNetworkWebhooksWebhookTestRequest);
        // TODO: test validations
    }

    /**
     * Creates new RF profile for this network
     *
     * Creates new RF profile for this network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkWirelessRfProfile_0Test() throws ApiException {
        String networkId = null;
        CreateNetworkWirelessRfProfileRequest createNetworkWirelessRfProfileRequest = null;
        CreateNetworkWirelessRfProfile201Response response = api.createNetworkWirelessRfProfile_0(networkId, createNetworkWirelessRfProfileRequest);
        // TODO: test validations
    }

    /**
     * Create an Identity PSK
     *
     * Create an Identity PSK
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkWirelessSsidIdentityPsk_0Test() throws ApiException {
        String networkId = null;
        String number = null;
        CreateNetworkWirelessSsidIdentityPskRequest createNetworkWirelessSsidIdentityPskRequest = null;
        Object response = api.createNetworkWirelessSsidIdentityPsk_0(networkId, number, createNetworkWirelessSsidIdentityPskRequest);
        // TODO: test validations
    }

    /**
     * Create an action batch
     *
     * Create an action batch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationActionBatch_0Test() throws ApiException {
        String organizationId = null;
        CreateOrganizationActionBatchRequest createOrganizationActionBatchRequest = null;
        CreateOrganizationActionBatch201Response response = api.createOrganizationActionBatch_0(organizationId, createOrganizationActionBatchRequest);
        // TODO: test validations
    }

    /**
     * Creates new adaptive policy ACL
     *
     * Creates new adaptive policy ACL
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationAdaptivePolicyAcl_0Test() throws ApiException {
        String organizationId = null;
        CreateOrganizationAdaptivePolicyAclRequest createOrganizationAdaptivePolicyAclRequest = null;
        Object response = api.createOrganizationAdaptivePolicyAcl_0(organizationId, createOrganizationAdaptivePolicyAclRequest);
        // TODO: test validations
    }

    /**
     * Creates a new adaptive policy group
     *
     * Creates a new adaptive policy group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationAdaptivePolicyGroup_0Test() throws ApiException {
        String organizationId = null;
        CreateOrganizationAdaptivePolicyGroupRequest createOrganizationAdaptivePolicyGroupRequest = null;
        Object response = api.createOrganizationAdaptivePolicyGroup_0(organizationId, createOrganizationAdaptivePolicyGroupRequest);
        // TODO: test validations
    }

    /**
     * Add an Adaptive Policy
     *
     * Add an Adaptive Policy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationAdaptivePolicyPolicy_0Test() throws ApiException {
        String organizationId = null;
        CreateOrganizationAdaptivePolicyPolicyRequest createOrganizationAdaptivePolicyPolicyRequest = null;
        Object response = api.createOrganizationAdaptivePolicyPolicy_0(organizationId, createOrganizationAdaptivePolicyPolicyRequest);
        // TODO: test validations
    }

    /**
     * Create a new dashboard administrator
     *
     * Create a new dashboard administrator
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationAdmin_0Test() throws ApiException {
        String organizationId = null;
        CreateOrganizationAdminRequest createOrganizationAdminRequest = null;
        Object response = api.createOrganizationAdmin_0(organizationId, createOrganizationAdminRequest);
        // TODO: test validations
    }

    /**
     * Create an organization-wide alert configuration
     *
     * Create an organization-wide alert configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationAlertsProfile_0Test() throws ApiException {
        String organizationId = null;
        CreateOrganizationAlertsProfileRequest createOrganizationAlertsProfileRequest = null;
        Object response = api.createOrganizationAlertsProfile_0(organizationId, createOrganizationAlertsProfileRequest);
        // TODO: test validations
    }

    /**
     * Add a new branding policy to an organization
     *
     * Add a new branding policy to an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationBrandingPolicy_0Test() throws ApiException {
        String organizationId = null;
        CreateOrganizationBrandingPolicyRequest createOrganizationBrandingPolicyRequest = null;
        CreateOrganizationBrandingPolicy201Response response = api.createOrganizationBrandingPolicy_0(organizationId, createOrganizationBrandingPolicyRequest);
        // TODO: test validations
    }

    /**
     * Create custom analytics artifact
     *
     * Create custom analytics artifact. Returns an artifact upload URL with expiry time. Upload the artifact file with a put request to the returned upload URL before its expiry.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationCameraCustomAnalyticsArtifact_0Test() throws ApiException {
        String organizationId = null;
        CreateOrganizationCameraCustomAnalyticsArtifactRequest createOrganizationCameraCustomAnalyticsArtifactRequest = null;
        Object response = api.createOrganizationCameraCustomAnalyticsArtifact_0(organizationId, createOrganizationCameraCustomAnalyticsArtifactRequest);
        // TODO: test validations
    }

    /**
     * Create a new configuration template
     *
     * Create a new configuration template
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationConfigTemplate_0Test() throws ApiException {
        String organizationId = null;
        CreateOrganizationConfigTemplateRequest createOrganizationConfigTemplateRequest = null;
        Object response = api.createOrganizationConfigTemplate_0(organizationId, createOrganizationConfigTemplateRequest);
        // TODO: test validations
    }

    /**
     * Create a new early access feature opt-in for an organization
     *
     * Create a new early access feature opt-in for an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationEarlyAccessFeaturesOptIn_0Test() throws ApiException {
        String organizationId = null;
        CreateOrganizationEarlyAccessFeaturesOptInRequest createOrganizationEarlyAccessFeaturesOptInRequest = null;
        Object response = api.createOrganizationEarlyAccessFeaturesOptIn_0(organizationId, createOrganizationEarlyAccessFeaturesOptInRequest);
        // TODO: test validations
    }

    /**
     * Add a media server to be monitored for this organization
     *
     * Add a media server to be monitored for this organization. Only valid for organizations with Meraki Insight.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationInsightMonitoredMediaServer_0Test() throws ApiException {
        String organizationId = null;
        CreateOrganizationInsightMonitoredMediaServerRequest createOrganizationInsightMonitoredMediaServerRequest = null;
        Object response = api.createOrganizationInsightMonitoredMediaServer_0(organizationId, createOrganizationInsightMonitoredMediaServerRequest);
        // TODO: test validations
    }

    /**
     * Imports event logs related to the onboarding app into elastisearch
     *
     * Imports event logs related to the onboarding app into elastisearch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationInventoryOnboardingCloudMonitoringExportEvent_0Test() throws ApiException {
        String organizationId = null;
        CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest = null;
        Object response = api.createOrganizationInventoryOnboardingCloudMonitoringExportEvent_0(organizationId, createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest);
        // TODO: test validations
    }

    /**
     * Commits the import operation to complete the onboarding of a device into Dashboard for monitoring.
     *
     * Commits the import operation to complete the onboarding of a device into Dashboard for monitoring.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationInventoryOnboardingCloudMonitoringImport_0Test() throws ApiException {
        String organizationId = null;
        CreateOrganizationInventoryOnboardingCloudMonitoringImportRequest createOrganizationInventoryOnboardingCloudMonitoringImportRequest = null;
        List<CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner> response = api.createOrganizationInventoryOnboardingCloudMonitoringImport_0(organizationId, createOrganizationInventoryOnboardingCloudMonitoringImportRequest);
        // TODO: test validations
    }

    /**
     * Initiates or updates an import session
     *
     * Initiates or updates an import session. An import ID will be generated and used when you are ready to commit the import.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationInventoryOnboardingCloudMonitoringPrepare_0Test() throws ApiException {
        String organizationId = null;
        CreateOrganizationInventoryOnboardingCloudMonitoringPrepareRequest createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest = null;
        List<CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner> response = api.createOrganizationInventoryOnboardingCloudMonitoringPrepare_0(organizationId, createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest);
        // TODO: test validations
    }

    /**
     * Create a network
     *
     * Create a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationNetwork_0Test() throws ApiException {
        String organizationId = null;
        CreateOrganizationNetworkRequest createOrganizationNetworkRequest = null;
        GetNetwork200Response response = api.createOrganizationNetwork_0(organizationId, createOrganizationNetworkRequest);
        // TODO: test validations
    }

    /**
     * Creates a new Policy Object.
     *
     * Creates a new Policy Object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationPolicyObject_0Test() throws ApiException {
        String organizationId = null;
        CreateOrganizationPolicyObjectRequest createOrganizationPolicyObjectRequest = null;
        Object response = api.createOrganizationPolicyObject_0(organizationId, createOrganizationPolicyObjectRequest);
        // TODO: test validations
    }

    /**
     * Creates a new Policy Object Group.
     *
     * Creates a new Policy Object Group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationPolicyObjectsGroup_0Test() throws ApiException {
        String organizationId = null;
        CreateOrganizationPolicyObjectsGroupRequest createOrganizationPolicyObjectsGroupRequest = null;
        Object response = api.createOrganizationPolicyObjectsGroup_0(organizationId, createOrganizationPolicyObjectsGroupRequest);
        // TODO: test validations
    }

    /**
     * Create a SAML IdP for your organization.
     *
     * Create a SAML IdP for your organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationSamlIdp_0Test() throws ApiException {
        String organizationId = null;
        CreateOrganizationSamlIdpRequest createOrganizationSamlIdpRequest = null;
        List<GetOrganizationSamlIdps200ResponseInner> response = api.createOrganizationSamlIdp_0(organizationId, createOrganizationSamlIdpRequest);
        // TODO: test validations
    }

    /**
     * Create a SAML role
     *
     * Create a SAML role
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationSamlRole_0Test() throws ApiException {
        String organizationId = null;
        CreateOrganizationSamlRoleRequest createOrganizationSamlRoleRequest = null;
        Object response = api.createOrganizationSamlRole_0(organizationId, createOrganizationSamlRoleRequest);
        // TODO: test validations
    }

    /**
     * Create a new organization
     *
     * Create a new organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganization_0Test() throws ApiException {
        CreateOrganizationRequest createOrganizationRequest = null;
        GetOrganizations200ResponseInner response = api.createOrganization_0(createOrganizationRequest);
        // TODO: test validations
    }

    /**
     * Postpone by 1 week all pending staged upgrade stages for a network
     *
     * Postpone by 1 week all pending staged upgrade stages for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deferNetworkFirmwareUpgradesStagedEvents_0Test() throws ApiException {
        String networkId = null;
        GetNetworkFirmwareUpgradesStagedEvents200Response response = api.deferNetworkFirmwareUpgradesStagedEvents_0(networkId);
        // TODO: test validations
    }

    /**
     * Delete a layer 3 interface from the switch
     *
     * Delete a layer 3 interface from the switch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDeviceSwitchRoutingInterface_0Test() throws ApiException {
        String serial = null;
        String interfaceId = null;
        api.deleteDeviceSwitchRoutingInterface_0(serial, interfaceId);
        // TODO: test validations
    }

    /**
     * Delete a layer 3 static route for a switch
     *
     * Delete a layer 3 static route for a switch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDeviceSwitchRoutingStaticRoute_0Test() throws ApiException {
        String serial = null;
        String staticRouteId = null;
        api.deleteDeviceSwitchRoutingStaticRoute_0(serial, staticRouteId);
        // TODO: test validations
    }

    /**
     * Delete a static delegated prefix from a network
     *
     * Delete a static delegated prefix from a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkAppliancePrefixesDelegatedStatic_0Test() throws ApiException {
        String networkId = null;
        String staticDelegatedPrefixId = null;
        api.deleteNetworkAppliancePrefixesDelegatedStatic_0(networkId, staticDelegatedPrefixId);
        // TODO: test validations
    }

    /**
     * Delete a static route from an MX or teleworker network
     *
     * Delete a static route from an MX or teleworker network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkApplianceStaticRoute_0Test() throws ApiException {
        String networkId = null;
        String staticRouteId = null;
        api.deleteNetworkApplianceStaticRoute_0(networkId, staticRouteId);
        // TODO: test validations
    }

    /**
     * Delete a custom performance class from an MX network
     *
     * Delete a custom performance class from an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkApplianceTrafficShapingCustomPerformanceClass_0Test() throws ApiException {
        String networkId = null;
        String customPerformanceClassId = null;
        api.deleteNetworkApplianceTrafficShapingCustomPerformanceClass_0(networkId, customPerformanceClassId);
        // TODO: test validations
    }

    /**
     * Delete a VLAN from a network
     *
     * Delete a VLAN from a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkApplianceVlan_0Test() throws ApiException {
        String networkId = null;
        String vlanId = null;
        api.deleteNetworkApplianceVlan_0(networkId, vlanId);
        // TODO: test validations
    }

    /**
     * Delete an existing quality retention profile for this network.
     *
     * Delete an existing quality retention profile for this network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkCameraQualityRetentionProfile_0Test() throws ApiException {
        String networkId = null;
        String qualityRetentionProfileId = null;
        api.deleteNetworkCameraQualityRetentionProfile_0(networkId, qualityRetentionProfileId);
        // TODO: test validations
    }

    /**
     * Delete an existing camera wireless profile for this network.
     *
     * Delete an existing camera wireless profile for this network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkCameraWirelessProfile_0Test() throws ApiException {
        String networkId = null;
        String wirelessProfileId = null;
        api.deleteNetworkCameraWirelessProfile_0(networkId, wirelessProfileId);
        // TODO: test validations
    }

    /**
     * Delete a Staged Upgrade Group
     *
     * Delete a Staged Upgrade Group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkFirmwareUpgradesStagedGroup_0Test() throws ApiException {
        String networkId = null;
        String groupId = null;
        api.deleteNetworkFirmwareUpgradesStagedGroup_0(networkId, groupId);
        // TODO: test validations
    }

    /**
     * Destroy a floor plan
     *
     * Destroy a floor plan
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkFloorPlan_0Test() throws ApiException {
        String networkId = null;
        String floorPlanId = null;
        api.deleteNetworkFloorPlan_0(networkId, floorPlanId);
        // TODO: test validations
    }

    /**
     * Delete a group policy
     *
     * Delete a group policy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkGroupPolicy_0Test() throws ApiException {
        String networkId = null;
        String groupPolicyId = null;
        api.deleteNetworkGroupPolicy_0(networkId, groupPolicyId);
        // TODO: test validations
    }

    /**
     * Deauthorize a user
     *
     * Deauthorize a user. To reauthorize a user after deauthorizing them, POST to this endpoint. (Currently, 802.1X RADIUS, splash guest, and client VPN users can be deauthorized.)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkMerakiAuthUser_0Test() throws ApiException {
        String networkId = null;
        String merakiAuthUserId = null;
        api.deleteNetworkMerakiAuthUser_0(networkId, merakiAuthUserId);
        // TODO: test validations
    }

    /**
     * Delete an MQTT broker
     *
     * Delete an MQTT broker
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkMqttBroker_0Test() throws ApiException {
        String networkId = null;
        String mqttBrokerId = null;
        api.deleteNetworkMqttBroker_0(networkId, mqttBrokerId);
        // TODO: test validations
    }

    /**
     * Delete a restrict processing PII request
     *
     * Delete a restrict processing PII request  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/requests/{requestId} &#x60;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkPiiRequest_0Test() throws ApiException {
        String networkId = null;
        String requestId = null;
        api.deleteNetworkPiiRequest_0(networkId, requestId);
        // TODO: test validations
    }

    /**
     * Deletes a sensor alert profile from a network.
     *
     * Deletes a sensor alert profile from a network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkSensorAlertsProfile_0Test() throws ApiException {
        String networkId = null;
        String id = null;
        api.deleteNetworkSensorAlertsProfile_0(networkId, id);
        // TODO: test validations
    }

    /**
     * Delete a target group from a network
     *
     * Delete a target group from a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkSmTargetGroup_0Test() throws ApiException {
        String networkId = null;
        String targetGroupId = null;
        api.deleteNetworkSmTargetGroup_0(networkId, targetGroupId);
        // TODO: test validations
    }

    /**
     * Delete a User Access Device
     *
     * Delete a User Access Device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkSmUserAccessDevice_0Test() throws ApiException {
        String networkId = null;
        String userAccessDeviceId = null;
        api.deleteNetworkSmUserAccessDevice_0(networkId, userAccessDeviceId);
        // TODO: test validations
    }

    /**
     * Delete an access policy for a switch network
     *
     * Delete an access policy for a switch network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkSwitchAccessPolicy_0Test() throws ApiException {
        String networkId = null;
        String accessPolicyNumber = null;
        api.deleteNetworkSwitchAccessPolicy_0(networkId, accessPolicyNumber);
        // TODO: test validations
    }

    /**
     * Remove a server from being trusted by Dynamic ARP Inspection on this network
     *
     * Remove a server from being trusted by Dynamic ARP Inspection on this network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_0Test() throws ApiException {
        String networkId = null;
        String trustedServerId = null;
        api.deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_0(networkId, trustedServerId);
        // TODO: test validations
    }

    /**
     * Split a link aggregation group into separate ports
     *
     * Split a link aggregation group into separate ports
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkSwitchLinkAggregation_0Test() throws ApiException {
        String networkId = null;
        String linkAggregationId = null;
        api.deleteNetworkSwitchLinkAggregation_0(networkId, linkAggregationId);
        // TODO: test validations
    }

    /**
     * Delete a switch port schedule
     *
     * Delete a switch port schedule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkSwitchPortSchedule_0Test() throws ApiException {
        String networkId = null;
        String portScheduleId = null;
        api.deleteNetworkSwitchPortSchedule_0(networkId, portScheduleId);
        // TODO: test validations
    }

    /**
     * Delete a quality of service rule
     *
     * Delete a quality of service rule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkSwitchQosRule_0Test() throws ApiException {
        String networkId = null;
        String qosRuleId = null;
        api.deleteNetworkSwitchQosRule_0(networkId, qosRuleId);
        // TODO: test validations
    }

    /**
     * Delete a multicast rendezvous point
     *
     * Delete a multicast rendezvous point
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkSwitchRoutingMulticastRendezvousPoint_0Test() throws ApiException {
        String networkId = null;
        String rendezvousPointId = null;
        api.deleteNetworkSwitchRoutingMulticastRendezvousPoint_0(networkId, rendezvousPointId);
        // TODO: test validations
    }

    /**
     * Delete a layer 3 interface from a switch stack
     *
     * Delete a layer 3 interface from a switch stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkSwitchStackRoutingInterface_0Test() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        String interfaceId = null;
        api.deleteNetworkSwitchStackRoutingInterface_0(networkId, switchStackId, interfaceId);
        // TODO: test validations
    }

    /**
     * Delete a layer 3 static route for a switch stack
     *
     * Delete a layer 3 static route for a switch stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkSwitchStackRoutingStaticRoute_0Test() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        String staticRouteId = null;
        api.deleteNetworkSwitchStackRoutingStaticRoute_0(networkId, switchStackId, staticRouteId);
        // TODO: test validations
    }

    /**
     * Delete a stack
     *
     * Delete a stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkSwitchStack_0Test() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        api.deleteNetworkSwitchStack_0(networkId, switchStackId);
        // TODO: test validations
    }

    /**
     * Delete an HTTP server from a network
     *
     * Delete an HTTP server from a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkWebhooksHttpServer_0Test() throws ApiException {
        String networkId = null;
        String httpServerId = null;
        api.deleteNetworkWebhooksHttpServer_0(networkId, httpServerId);
        // TODO: test validations
    }

    /**
     * Destroy a webhook payload template for a network
     *
     * Destroy a webhook payload template for a network. Does not work for included templates (&#39;wpt_00001&#39;, &#39;wpt_00002&#39;, &#39;wpt_00003&#39;, &#39;wpt_00004&#39;, &#39;wpt_00005&#39; or &#39;wpt_00006&#39;)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkWebhooksPayloadTemplate_0Test() throws ApiException {
        String networkId = null;
        String payloadTemplateId = null;
        api.deleteNetworkWebhooksPayloadTemplate_0(networkId, payloadTemplateId);
        // TODO: test validations
    }

    /**
     * Delete a RF Profile
     *
     * Delete a RF Profile
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkWirelessRfProfile_0Test() throws ApiException {
        String networkId = null;
        String rfProfileId = null;
        api.deleteNetworkWirelessRfProfile_0(networkId, rfProfileId);
        // TODO: test validations
    }

    /**
     * Delete an Identity PSK
     *
     * Delete an Identity PSK
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkWirelessSsidIdentityPsk_0Test() throws ApiException {
        String networkId = null;
        String number = null;
        String identityPskId = null;
        api.deleteNetworkWirelessSsidIdentityPsk_0(networkId, number, identityPskId);
        // TODO: test validations
    }

    /**
     * Delete a network
     *
     * Delete a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetwork_0Test() throws ApiException {
        String networkId = null;
        api.deleteNetwork_0(networkId);
        // TODO: test validations
    }

    /**
     * Delete an action batch
     *
     * Delete an action batch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganizationActionBatch_0Test() throws ApiException {
        String organizationId = null;
        String actionBatchId = null;
        api.deleteOrganizationActionBatch_0(organizationId, actionBatchId);
        // TODO: test validations
    }

    /**
     * Deletes the specified adaptive policy ACL
     *
     * Deletes the specified adaptive policy ACL. Note this adaptive policy ACL will also be removed from policies using it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganizationAdaptivePolicyAcl_0Test() throws ApiException {
        String organizationId = null;
        String aclId = null;
        api.deleteOrganizationAdaptivePolicyAcl_0(organizationId, aclId);
        // TODO: test validations
    }

    /**
     * Deletes the specified adaptive policy group and any associated policies and references
     *
     * Deletes the specified adaptive policy group and any associated policies and references
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganizationAdaptivePolicyGroup_0Test() throws ApiException {
        String organizationId = null;
        String id = null;
        api.deleteOrganizationAdaptivePolicyGroup_0(organizationId, id);
        // TODO: test validations
    }

    /**
     * Delete an Adaptive Policy
     *
     * Delete an Adaptive Policy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganizationAdaptivePolicyPolicy_0Test() throws ApiException {
        String organizationId = null;
        String id = null;
        api.deleteOrganizationAdaptivePolicyPolicy_0(organizationId, id);
        // TODO: test validations
    }

    /**
     * Revoke all access for a dashboard administrator within this organization
     *
     * Revoke all access for a dashboard administrator within this organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganizationAdmin_0Test() throws ApiException {
        String organizationId = null;
        String adminId = null;
        api.deleteOrganizationAdmin_0(organizationId, adminId);
        // TODO: test validations
    }

    /**
     * Removes an organization-wide alert config
     *
     * Removes an organization-wide alert config
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganizationAlertsProfile_0Test() throws ApiException {
        String organizationId = null;
        String alertConfigId = null;
        api.deleteOrganizationAlertsProfile_0(organizationId, alertConfigId);
        // TODO: test validations
    }

    /**
     * Delete a branding policy
     *
     * Delete a branding policy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganizationBrandingPolicy_0Test() throws ApiException {
        String organizationId = null;
        String brandingPolicyId = null;
        api.deleteOrganizationBrandingPolicy_0(organizationId, brandingPolicyId);
        // TODO: test validations
    }

    /**
     * Delete Custom Analytics Artifact
     *
     * Delete Custom Analytics Artifact
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganizationCameraCustomAnalyticsArtifact_0Test() throws ApiException {
        String organizationId = null;
        String artifactId = null;
        api.deleteOrganizationCameraCustomAnalyticsArtifact_0(organizationId, artifactId);
        // TODO: test validations
    }

    /**
     * Remove a configuration template
     *
     * Remove a configuration template
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganizationConfigTemplate_0Test() throws ApiException {
        String organizationId = null;
        String configTemplateId = null;
        api.deleteOrganizationConfigTemplate_0(organizationId, configTemplateId);
        // TODO: test validations
    }

    /**
     * Delete an early access feature opt-in
     *
     * Delete an early access feature opt-in
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganizationEarlyAccessFeaturesOptIn_0Test() throws ApiException {
        String organizationId = null;
        String optInId = null;
        api.deleteOrganizationEarlyAccessFeaturesOptIn_0(organizationId, optInId);
        // TODO: test validations
    }

    /**
     * Delete a monitored media server from this organization
     *
     * Delete a monitored media server from this organization. Only valid for organizations with Meraki Insight.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganizationInsightMonitoredMediaServer_0Test() throws ApiException {
        String organizationId = null;
        String monitoredMediaServerId = null;
        api.deleteOrganizationInsightMonitoredMediaServer_0(organizationId, monitoredMediaServerId);
        // TODO: test validations
    }

    /**
     * Deletes a Policy Object.
     *
     * Deletes a Policy Object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganizationPolicyObject_0Test() throws ApiException {
        String organizationId = null;
        String policyObjectId = null;
        api.deleteOrganizationPolicyObject_0(organizationId, policyObjectId);
        // TODO: test validations
    }

    /**
     * Deletes a Policy Object Group.
     *
     * Deletes a Policy Object Group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganizationPolicyObjectsGroup_0Test() throws ApiException {
        String organizationId = null;
        String policyObjectGroupId = null;
        api.deleteOrganizationPolicyObjectsGroup_0(organizationId, policyObjectGroupId);
        // TODO: test validations
    }

    /**
     * Remove a SAML IdP in your organization.
     *
     * Remove a SAML IdP in your organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganizationSamlIdp_0Test() throws ApiException {
        String organizationId = null;
        String idpId = null;
        api.deleteOrganizationSamlIdp_0(organizationId, idpId);
        // TODO: test validations
    }

    /**
     * Remove a SAML role
     *
     * Remove a SAML role
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganizationSamlRole_0Test() throws ApiException {
        String organizationId = null;
        String samlRoleId = null;
        api.deleteOrganizationSamlRole_0(organizationId, samlRoleId);
        // TODO: test validations
    }

    /**
     * Delete a user and all of its authentication methods.
     *
     * Delete a user and all of its authentication methods.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganizationUser_0Test() throws ApiException {
        String organizationId = null;
        String userId = null;
        api.deleteOrganizationUser_0(organizationId, userId);
        // TODO: test validations
    }

    /**
     * Delete an organization
     *
     * Delete an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganization_0Test() throws ApiException {
        String organizationId = null;
        api.deleteOrganization_0(organizationId);
        // TODO: test validations
    }

    /**
     * Return the uplink settings for an MX appliance
     *
     * Return the uplink settings for an MX appliance
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceApplianceUplinksSettings_0Test() throws ApiException {
        String serial = null;
        GetDeviceApplianceUplinksSettings200Response response = api.getDeviceApplianceUplinksSettings_0(serial);
        // TODO: test validations
    }

    /**
     * Return custom analytics settings for a camera
     *
     * Return custom analytics settings for a camera
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceCameraCustomAnalytics_0Test() throws ApiException {
        String serial = null;
        Object response = api.getDeviceCameraCustomAnalytics_0(serial);
        // TODO: test validations
    }

    /**
     * Returns quality and retention settings for the given camera
     *
     * Returns quality and retention settings for the given camera
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceCameraQualityAndRetention_0Test() throws ApiException {
        String serial = null;
        Object response = api.getDeviceCameraQualityAndRetention_0(serial);
        // TODO: test validations
    }

    /**
     * Returns the MV Sense object detection model list for the given camera
     *
     * Returns the MV Sense object detection model list for the given camera
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceCameraSenseObjectDetectionModels_0Test() throws ApiException {
        String serial = null;
        List<Object> response = api.getDeviceCameraSenseObjectDetectionModels_0(serial);
        // TODO: test validations
    }

    /**
     * Returns sense settings for a given camera
     *
     * Returns sense settings for a given camera
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceCameraSense_0Test() throws ApiException {
        String serial = null;
        Object response = api.getDeviceCameraSense_0(serial);
        // TODO: test validations
    }

    /**
     * Returns video link to the specified camera
     *
     * Returns video link to the specified camera. If a timestamp is supplied, it links to that timestamp.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceCameraVideoLink_0Test() throws ApiException {
        String serial = null;
        OffsetDateTime timestamp = null;
        Object response = api.getDeviceCameraVideoLink_0(serial, timestamp);
        // TODO: test validations
    }

    /**
     * Returns video settings for the given camera
     *
     * Returns video settings for the given camera
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceCameraVideoSettings_0Test() throws ApiException {
        String serial = null;
        Object response = api.getDeviceCameraVideoSettings_0(serial);
        // TODO: test validations
    }

    /**
     * Returns wireless profile assigned to the given camera
     *
     * Returns wireless profile assigned to the given camera
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceCameraWirelessProfiles_0Test() throws ApiException {
        String serial = null;
        Object response = api.getDeviceCameraWirelessProfiles_0(serial);
        // TODO: test validations
    }

    /**
     * Show the LAN Settings of a MG
     *
     * Show the LAN Settings of a MG
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceCellularGatewayLan_0Test() throws ApiException {
        String serial = null;
        Object response = api.getDeviceCellularGatewayLan_0(serial);
        // TODO: test validations
    }

    /**
     * Returns the port forwarding rules for a single MG.
     *
     * Returns the port forwarding rules for a single MG.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceCellularGatewayPortForwardingRules_0Test() throws ApiException {
        String serial = null;
        Object response = api.getDeviceCellularGatewayPortForwardingRules_0(serial);
        // TODO: test validations
    }

    /**
     * Return the SIM and APN configurations for a cellular device.
     *
     * Return the SIM and APN configurations for a cellular device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceCellularSims_0Test() throws ApiException {
        String serial = null;
        Object response = api.getDeviceCellularSims_0(serial);
        // TODO: test validations
    }

    /**
     * Return the management interface settings for a device
     *
     * Return the management interface settings for a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceManagementInterface_0Test() throws ApiException {
        String serial = null;
        Object response = api.getDeviceManagementInterface_0(serial);
        // TODO: test validations
    }

    /**
     * List the sensor roles for a given sensor or camera device.
     *
     * List the sensor roles for a given sensor or camera device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceSensorRelationships_0Test() throws ApiException {
        String serial = null;
        List<GetDeviceSensorRelationships200ResponseInner> response = api.getDeviceSensorRelationships_0(serial);
        // TODO: test validations
    }

    /**
     * Return a switch port
     *
     * Return a switch port
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceSwitchPort_0Test() throws ApiException {
        String serial = null;
        String portId = null;
        GetDeviceSwitchPorts200ResponseInner response = api.getDeviceSwitchPort_0(serial, portId);
        // TODO: test validations
    }

    /**
     * List the switch ports for a switch
     *
     * List the switch ports for a switch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceSwitchPorts_0Test() throws ApiException {
        String serial = null;
        List<GetDeviceSwitchPorts200ResponseInner> response = api.getDeviceSwitchPorts_0(serial);
        // TODO: test validations
    }

    /**
     * Return a layer 3 interface DHCP configuration for a switch
     *
     * Return a layer 3 interface DHCP configuration for a switch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceSwitchRoutingInterfaceDhcp_0Test() throws ApiException {
        String serial = null;
        String interfaceId = null;
        Object response = api.getDeviceSwitchRoutingInterfaceDhcp_0(serial, interfaceId);
        // TODO: test validations
    }

    /**
     * Return a layer 3 interface for a switch
     *
     * Return a layer 3 interface for a switch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceSwitchRoutingInterface_0Test() throws ApiException {
        String serial = null;
        String interfaceId = null;
        GetDeviceSwitchRoutingInterfaces200ResponseInner response = api.getDeviceSwitchRoutingInterface_0(serial, interfaceId);
        // TODO: test validations
    }

    /**
     * List layer 3 interfaces for a switch
     *
     * List layer 3 interfaces for a switch. Those for a stack may be found under switch stack routing.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceSwitchRoutingInterfaces_0Test() throws ApiException {
        String serial = null;
        List<GetDeviceSwitchRoutingInterfaces200ResponseInner> response = api.getDeviceSwitchRoutingInterfaces_0(serial);
        // TODO: test validations
    }

    /**
     * Return a layer 3 static route for a switch
     *
     * Return a layer 3 static route for a switch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceSwitchRoutingStaticRoute_0Test() throws ApiException {
        String serial = null;
        String staticRouteId = null;
        GetDeviceSwitchRoutingStaticRoute200Response response = api.getDeviceSwitchRoutingStaticRoute_0(serial, staticRouteId);
        // TODO: test validations
    }

    /**
     * List layer 3 static routes for a switch
     *
     * List layer 3 static routes for a switch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceSwitchRoutingStaticRoutes_0Test() throws ApiException {
        String serial = null;
        List<Object> response = api.getDeviceSwitchRoutingStaticRoutes_0(serial);
        // TODO: test validations
    }

    /**
     * Return warm spare configuration for a switch
     *
     * Return warm spare configuration for a switch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceSwitchWarmSpare_0Test() throws ApiException {
        String serial = null;
        Object response = api.getDeviceSwitchWarmSpare_0(serial);
        // TODO: test validations
    }

    /**
     * Return the bluetooth settings for a wireless device
     *
     * Return the bluetooth settings for a wireless device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceWirelessBluetoothSettings_0Test() throws ApiException {
        String serial = null;
        GetDeviceWirelessBluetoothSettings200Response response = api.getDeviceWirelessBluetoothSettings_0(serial);
        // TODO: test validations
    }

    /**
     * Return the radio settings of a device
     *
     * Return the radio settings of a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceWirelessRadioSettings_0Test() throws ApiException {
        String serial = null;
        Object response = api.getDeviceWirelessRadioSettings_0(serial);
        // TODO: test validations
    }

    /**
     * Return a single device
     *
     * Return a single device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDevice_0Test() throws ApiException {
        String serial = null;
        Object response = api.getDevice_0(serial);
        // TODO: test validations
    }

    /**
     * Return the alert configuration for this network
     *
     * Return the alert configuration for this network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkAlertsSettings_0Test() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkAlertsSettings_0(networkId);
        // TODO: test validations
    }

    /**
     * Return the connectivity testing destinations for an MX network
     *
     * Return the connectivity testing destinations for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceConnectivityMonitoringDestinations_0Test() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkApplianceConnectivityMonitoringDestinations_0(networkId);
        // TODO: test validations
    }

    /**
     * List all available content filtering categories for an MX network
     *
     * List all available content filtering categories for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceContentFilteringCategories_0Test() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkApplianceContentFilteringCategories_0(networkId);
        // TODO: test validations
    }

    /**
     * Return the content filtering settings for an MX network
     *
     * Return the content filtering settings for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceContentFiltering_0Test() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkApplianceContentFiltering_0(networkId);
        // TODO: test validations
    }

    /**
     * Return the cellular firewall rules for an MX network
     *
     * Return the cellular firewall rules for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceFirewallCellularFirewallRules_0Test() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkApplianceFirewallCellularFirewallRules_0(networkId);
        // TODO: test validations
    }

    /**
     * Return the accessibility settings of the given service (&#39;ICMP&#39;, &#39;web&#39;, or &#39;SNMP&#39;)
     *
     * Return the accessibility settings of the given service (&#39;ICMP&#39;, &#39;web&#39;, or &#39;SNMP&#39;)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceFirewallFirewalledService_0Test() throws ApiException {
        String networkId = null;
        String service = null;
        Object response = api.getNetworkApplianceFirewallFirewalledService_0(networkId, service);
        // TODO: test validations
    }

    /**
     * List the appliance services and their accessibility rules
     *
     * List the appliance services and their accessibility rules
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceFirewallFirewalledServices_0Test() throws ApiException {
        String networkId = null;
        List<Object> response = api.getNetworkApplianceFirewallFirewalledServices_0(networkId);
        // TODO: test validations
    }

    /**
     * Return the inbound cellular firewall rules for an MX network
     *
     * Return the inbound cellular firewall rules for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceFirewallInboundCellularFirewallRules_0Test() throws ApiException {
        String networkId = null;
        List<Object> response = api.getNetworkApplianceFirewallInboundCellularFirewallRules_0(networkId);
        // TODO: test validations
    }

    /**
     * Return the inbound firewall rules for an MX network
     *
     * Return the inbound firewall rules for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceFirewallInboundFirewallRules_0Test() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkApplianceFirewallInboundFirewallRules_0(networkId);
        // TODO: test validations
    }

    /**
     * Return the L3 firewall rules for an MX network
     *
     * Return the L3 firewall rules for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceFirewallL3FirewallRules_0Test() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkApplianceFirewallL3FirewallRules_0(networkId);
        // TODO: test validations
    }

    /**
     * Return the L7 firewall application categories and their associated applications for an MX network
     *
     * Return the L7 firewall application categories and their associated applications for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceFirewallL7FirewallRulesApplicationCategories_0Test() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkApplianceFirewallL7FirewallRulesApplicationCategories_0(networkId);
        // TODO: test validations
    }

    /**
     * List the MX L7 firewall rules for an MX network
     *
     * List the MX L7 firewall rules for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceFirewallL7FirewallRules_0Test() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkApplianceFirewallL7FirewallRules_0(networkId);
        // TODO: test validations
    }

    /**
     * Return the 1:Many NAT mapping rules for an MX network
     *
     * Return the 1:Many NAT mapping rules for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceFirewallOneToManyNatRules_0Test() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkApplianceFirewallOneToManyNatRules_0(networkId);
        // TODO: test validations
    }

    /**
     * Return the 1:1 NAT mapping rules for an MX network
     *
     * Return the 1:1 NAT mapping rules for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceFirewallOneToOneNatRules_0Test() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkApplianceFirewallOneToOneNatRules_0(networkId);
        // TODO: test validations
    }

    /**
     * Return the port forwarding rules for an MX network
     *
     * Return the port forwarding rules for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceFirewallPortForwardingRules_0Test() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkApplianceFirewallPortForwardingRules_0(networkId);
        // TODO: test validations
    }

    /**
     * Return the firewall settings for this network
     *
     * Return the firewall settings for this network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceFirewallSettings_0Test() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkApplianceFirewallSettings_0(networkId);
        // TODO: test validations
    }

    /**
     * Return per-port VLAN settings for a single MX port.
     *
     * Return per-port VLAN settings for a single MX port.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkAppliancePort_0Test() throws ApiException {
        String networkId = null;
        String portId = null;
        GetNetworkAppliancePorts200ResponseInner response = api.getNetworkAppliancePort_0(networkId, portId);
        // TODO: test validations
    }

    /**
     * List per-port VLAN settings for all ports of a MX.
     *
     * List per-port VLAN settings for all ports of a MX.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkAppliancePorts_0Test() throws ApiException {
        String networkId = null;
        List<GetNetworkAppliancePorts200ResponseInner> response = api.getNetworkAppliancePorts_0(networkId);
        // TODO: test validations
    }

    /**
     * Return a static delegated prefix from a network
     *
     * Return a static delegated prefix from a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkAppliancePrefixesDelegatedStatic_0Test() throws ApiException {
        String networkId = null;
        String staticDelegatedPrefixId = null;
        GetNetworkAppliancePrefixesDelegatedStatics200ResponseInner response = api.getNetworkAppliancePrefixesDelegatedStatic_0(networkId, staticDelegatedPrefixId);
        // TODO: test validations
    }

    /**
     * List static delegated prefixes for a network
     *
     * List static delegated prefixes for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkAppliancePrefixesDelegatedStatics_0Test() throws ApiException {
        String networkId = null;
        List<GetNetworkAppliancePrefixesDelegatedStatics200ResponseInner> response = api.getNetworkAppliancePrefixesDelegatedStatics_0(networkId);
        // TODO: test validations
    }

    /**
     * Returns all supported intrusion settings for an MX network
     *
     * Returns all supported intrusion settings for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceSecurityIntrusion_0Test() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkApplianceSecurityIntrusion_0(networkId);
        // TODO: test validations
    }

    /**
     * Returns all supported malware settings for an MX network
     *
     * Returns all supported malware settings for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceSecurityMalware_0Test() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkApplianceSecurityMalware_0(networkId);
        // TODO: test validations
    }

    /**
     * Return the appliance settings for a network
     *
     * Return the appliance settings for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceSettings_0Test() throws ApiException {
        String networkId = null;
        GetNetworkApplianceSettings200Response response = api.getNetworkApplianceSettings_0(networkId);
        // TODO: test validations
    }

    /**
     * Return single LAN configuration
     *
     * Return single LAN configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceSingleLan_0Test() throws ApiException {
        String networkId = null;
        GetNetworkApplianceSingleLan200Response response = api.getNetworkApplianceSingleLan_0(networkId);
        // TODO: test validations
    }

    /**
     * Return a single MX SSID
     *
     * Return a single MX SSID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceSsid_0Test() throws ApiException {
        String networkId = null;
        String number = null;
        GetNetworkApplianceSsids200ResponseInner response = api.getNetworkApplianceSsid_0(networkId, number);
        // TODO: test validations
    }

    /**
     * List the MX SSIDs in a network
     *
     * List the MX SSIDs in a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceSsids_0Test() throws ApiException {
        String networkId = null;
        List<GetNetworkApplianceSsids200ResponseInner> response = api.getNetworkApplianceSsids_0(networkId);
        // TODO: test validations
    }

    /**
     * Return a static route for an MX or teleworker network
     *
     * Return a static route for an MX or teleworker network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceStaticRoute_0Test() throws ApiException {
        String networkId = null;
        String staticRouteId = null;
        Object response = api.getNetworkApplianceStaticRoute_0(networkId, staticRouteId);
        // TODO: test validations
    }

    /**
     * List the static routes for an MX or teleworker network
     *
     * List the static routes for an MX or teleworker network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceStaticRoutes_0Test() throws ApiException {
        String networkId = null;
        List<Object> response = api.getNetworkApplianceStaticRoutes_0(networkId);
        // TODO: test validations
    }

    /**
     * Return a custom performance class for an MX network
     *
     * Return a custom performance class for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceTrafficShapingCustomPerformanceClass_0Test() throws ApiException {
        String networkId = null;
        String customPerformanceClassId = null;
        Object response = api.getNetworkApplianceTrafficShapingCustomPerformanceClass_0(networkId, customPerformanceClassId);
        // TODO: test validations
    }

    /**
     * List all custom performance classes for an MX network
     *
     * List all custom performance classes for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceTrafficShapingCustomPerformanceClasses_0Test() throws ApiException {
        String networkId = null;
        List<Object> response = api.getNetworkApplianceTrafficShapingCustomPerformanceClasses_0(networkId);
        // TODO: test validations
    }

    /**
     * Display the traffic shaping settings rules for an MX network
     *
     * Display the traffic shaping settings rules for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceTrafficShapingRules_0Test() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkApplianceTrafficShapingRules_0(networkId);
        // TODO: test validations
    }

    /**
     * Returns the uplink bandwidth limits for your MX network
     *
     * Returns the uplink bandwidth limits for your MX network. This may not reflect the affected device&#39;s hardware capabilities.  For more information on your device&#39;s hardware capabilities, please consult our MX Family Datasheet - [https://meraki.cisco.com/product-collateral/mx-family-datasheet/?file]
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceTrafficShapingUplinkBandwidth_0Test() throws ApiException {
        String networkId = null;
        GetNetworkApplianceTrafficShapingUplinkBandwidth200Response response = api.getNetworkApplianceTrafficShapingUplinkBandwidth_0(networkId);
        // TODO: test validations
    }

    /**
     * Show uplink selection settings for an MX network
     *
     * Show uplink selection settings for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceTrafficShapingUplinkSelection_0Test() throws ApiException {
        String networkId = null;
        GetNetworkApplianceTrafficShapingUplinkSelection200Response response = api.getNetworkApplianceTrafficShapingUplinkSelection_0(networkId);
        // TODO: test validations
    }

    /**
     * Display the traffic shaping settings for an MX network
     *
     * Display the traffic shaping settings for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceTrafficShaping_0Test() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkApplianceTrafficShaping_0(networkId);
        // TODO: test validations
    }

    /**
     * Return a VLAN
     *
     * Return a VLAN
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceVlan_0Test() throws ApiException {
        String networkId = null;
        String vlanId = null;
        GetNetworkApplianceVlans200ResponseInner response = api.getNetworkApplianceVlan_0(networkId, vlanId);
        // TODO: test validations
    }

    /**
     * Returns the enabled status of VLANs for the network
     *
     * Returns the enabled status of VLANs for the network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceVlansSettings_0Test() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkApplianceVlansSettings_0(networkId);
        // TODO: test validations
    }

    /**
     * List the VLANs for an MX network
     *
     * List the VLANs for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceVlans_0Test() throws ApiException {
        String networkId = null;
        List<GetNetworkApplianceVlans200ResponseInner> response = api.getNetworkApplianceVlans_0(networkId);
        // TODO: test validations
    }

    /**
     * Return a Hub BGP Configuration
     *
     * Return a Hub BGP Configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceVpnBgp_0Test() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkApplianceVpnBgp_0(networkId);
        // TODO: test validations
    }

    /**
     * Return the site-to-site VPN settings of a network
     *
     * Return the site-to-site VPN settings of a network. Only valid for MX networks.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceVpnSiteToSiteVpn_0Test() throws ApiException {
        String networkId = null;
        GetNetworkApplianceVpnSiteToSiteVpn200Response response = api.getNetworkApplianceVpnSiteToSiteVpn_0(networkId);
        // TODO: test validations
    }

    /**
     * Return MX warm spare settings
     *
     * Return MX warm spare settings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceWarmSpare_0Test() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkApplianceWarmSpare_0(networkId);
        // TODO: test validations
    }

    /**
     * Retrieve a single quality retention profile
     *
     * Retrieve a single quality retention profile
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkCameraQualityRetentionProfile_0Test() throws ApiException {
        String networkId = null;
        String qualityRetentionProfileId = null;
        Object response = api.getNetworkCameraQualityRetentionProfile_0(networkId, qualityRetentionProfileId);
        // TODO: test validations
    }

    /**
     * List the quality retention profiles for this network
     *
     * List the quality retention profiles for this network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkCameraQualityRetentionProfiles_0Test() throws ApiException {
        String networkId = null;
        List<Object> response = api.getNetworkCameraQualityRetentionProfiles_0(networkId);
        // TODO: test validations
    }

    /**
     * Returns a list of all camera recording schedules.
     *
     * Returns a list of all camera recording schedules.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkCameraSchedules_0Test() throws ApiException {
        String networkId = null;
        List<Object> response = api.getNetworkCameraSchedules_0(networkId);
        // TODO: test validations
    }

    /**
     * Retrieve a single camera wireless profile.
     *
     * Retrieve a single camera wireless profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkCameraWirelessProfile_0Test() throws ApiException {
        String networkId = null;
        String wirelessProfileId = null;
        Object response = api.getNetworkCameraWirelessProfile_0(networkId, wirelessProfileId);
        // TODO: test validations
    }

    /**
     * List the camera wireless profiles for this network.
     *
     * List the camera wireless profiles for this network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkCameraWirelessProfiles_0Test() throws ApiException {
        String networkId = null;
        List<Object> response = api.getNetworkCameraWirelessProfiles_0(networkId);
        // TODO: test validations
    }

    /**
     * Return the connectivity testing destinations for an MG network
     *
     * Return the connectivity testing destinations for an MG network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkCellularGatewayConnectivityMonitoringDestinations_0Test() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkCellularGatewayConnectivityMonitoringDestinations_0(networkId);
        // TODO: test validations
    }

    /**
     * List common DHCP settings of MGs
     *
     * List common DHCP settings of MGs
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkCellularGatewayDhcp_0Test() throws ApiException {
        String networkId = null;
        GetNetworkCellularGatewayDhcp200Response response = api.getNetworkCellularGatewayDhcp_0(networkId);
        // TODO: test validations
    }

    /**
     * Return the subnet pool and mask configured for MGs in the network.
     *
     * Return the subnet pool and mask configured for MGs in the network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkCellularGatewaySubnetPool_0Test() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkCellularGatewaySubnetPool_0(networkId);
        // TODO: test validations
    }

    /**
     * Returns the uplink settings for your MG network.
     *
     * Returns the uplink settings for your MG network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkCellularGatewayUplink_0Test() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkCellularGatewayUplink_0(networkId);
        // TODO: test validations
    }

    /**
     * Return the policy assigned to a client on the network
     *
     * Return the policy assigned to a client on the network. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkClientPolicy_0Test() throws ApiException {
        String networkId = null;
        String clientId = null;
        Object response = api.getNetworkClientPolicy_0(networkId, clientId);
        // TODO: test validations
    }

    /**
     * Return the splash authorization for a client, for each SSID they&#39;ve associated with through splash
     *
     * Return the splash authorization for a client, for each SSID they&#39;ve associated with through splash. Only enabled SSIDs with Click-through splash enabled will be included. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkClientSplashAuthorizationStatus_0Test() throws ApiException {
        String networkId = null;
        String clientId = null;
        Object response = api.getNetworkClientSplashAuthorizationStatus_0(networkId, clientId);
        // TODO: test validations
    }

    /**
     * List the devices in a network
     *
     * List the devices in a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkDevices_0Test() throws ApiException {
        String networkId = null;
        List<Object> response = api.getNetworkDevices_0(networkId);
        // TODO: test validations
    }

    /**
     * Get the Staged Upgrade Event from a network
     *
     * Get the Staged Upgrade Event from a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkFirmwareUpgradesStagedEvents_0Test() throws ApiException {
        String networkId = null;
        GetNetworkFirmwareUpgradesStagedEvents200Response response = api.getNetworkFirmwareUpgradesStagedEvents_0(networkId);
        // TODO: test validations
    }

    /**
     * Get a Staged Upgrade Group from a network
     *
     * Get a Staged Upgrade Group from a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkFirmwareUpgradesStagedGroup_0Test() throws ApiException {
        String networkId = null;
        String groupId = null;
        GetNetworkFirmwareUpgradesStagedGroups200ResponseInner response = api.getNetworkFirmwareUpgradesStagedGroup_0(networkId, groupId);
        // TODO: test validations
    }

    /**
     * List of Staged Upgrade Groups in a network
     *
     * List of Staged Upgrade Groups in a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkFirmwareUpgradesStagedGroups_0Test() throws ApiException {
        String networkId = null;
        List<GetNetworkFirmwareUpgradesStagedGroups200ResponseInner> response = api.getNetworkFirmwareUpgradesStagedGroups_0(networkId);
        // TODO: test validations
    }

    /**
     * Order of Staged Upgrade Groups in a network
     *
     * Order of Staged Upgrade Groups in a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkFirmwareUpgradesStagedStages_0Test() throws ApiException {
        String networkId = null;
        List<GetNetworkFirmwareUpgradesStagedStages200ResponseInner> response = api.getNetworkFirmwareUpgradesStagedStages_0(networkId);
        // TODO: test validations
    }

    /**
     * Get firmware upgrade information for a network
     *
     * Get firmware upgrade information for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkFirmwareUpgrades_0Test() throws ApiException {
        String networkId = null;
        GetNetworkFirmwareUpgrades200Response response = api.getNetworkFirmwareUpgrades_0(networkId);
        // TODO: test validations
    }

    /**
     * Find a floor plan by ID
     *
     * Find a floor plan by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkFloorPlan_0Test() throws ApiException {
        String networkId = null;
        String floorPlanId = null;
        Object response = api.getNetworkFloorPlan_0(networkId, floorPlanId);
        // TODO: test validations
    }

    /**
     * List the floor plans that belong to your network
     *
     * List the floor plans that belong to your network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkFloorPlans_0Test() throws ApiException {
        String networkId = null;
        List<Object> response = api.getNetworkFloorPlans_0(networkId);
        // TODO: test validations
    }

    /**
     * List the group policies in a network
     *
     * List the group policies in a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkGroupPolicies_0Test() throws ApiException {
        String networkId = null;
        List<Object> response = api.getNetworkGroupPolicies_0(networkId);
        // TODO: test validations
    }

    /**
     * Display a group policy
     *
     * Display a group policy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkGroupPolicy_0Test() throws ApiException {
        String networkId = null;
        String groupPolicyId = null;
        Object response = api.getNetworkGroupPolicy_0(networkId, groupPolicyId);
        // TODO: test validations
    }

    /**
     * Return all global alerts on this network
     *
     * Return all global alerts on this network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkHealthAlerts_0Test() throws ApiException {
        String networkId = null;
        List<GetNetworkHealthAlerts200ResponseInner> response = api.getNetworkHealthAlerts_0(networkId);
        // TODO: test validations
    }

    /**
     * Return the Meraki Auth splash guest, RADIUS, or client VPN user
     *
     * Return the Meraki Auth splash guest, RADIUS, or client VPN user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkMerakiAuthUser_0Test() throws ApiException {
        String networkId = null;
        String merakiAuthUserId = null;
        GetNetworkMerakiAuthUsers200ResponseInner response = api.getNetworkMerakiAuthUser_0(networkId, merakiAuthUserId);
        // TODO: test validations
    }

    /**
     * List the users configured under Meraki Authentication for a network (splash guest or RADIUS users for a wireless network, or client VPN users for a wired network)
     *
     * List the users configured under Meraki Authentication for a network (splash guest or RADIUS users for a wireless network, or client VPN users for a wired network)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkMerakiAuthUsers_0Test() throws ApiException {
        String networkId = null;
        List<GetNetworkMerakiAuthUsers200ResponseInner> response = api.getNetworkMerakiAuthUsers_0(networkId);
        // TODO: test validations
    }

    /**
     * Return an MQTT broker
     *
     * Return an MQTT broker
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkMqttBroker_0Test() throws ApiException {
        String networkId = null;
        String mqttBrokerId = null;
        Object response = api.getNetworkMqttBroker_0(networkId, mqttBrokerId);
        // TODO: test validations
    }

    /**
     * List the MQTT brokers for this network
     *
     * List the MQTT brokers for this network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkMqttBrokers_0Test() throws ApiException {
        String networkId = null;
        List<Object> response = api.getNetworkMqttBrokers_0(networkId);
        // TODO: test validations
    }

    /**
     * Return the NetFlow traffic reporting settings for a network
     *
     * Return the NetFlow traffic reporting settings for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkNetflow_0Test() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkNetflow_0(networkId);
        // TODO: test validations
    }

    /**
     * List the keys required to access Personally Identifiable Information (PII) for a given identifier
     *
     * List the keys required to access Personally Identifiable Information (PII) for a given identifier. Exactly one identifier will be accepted. If the organization contains org-wide Systems Manager users matching the key provided then there will be an entry with the key \&quot;0\&quot; containing the applicable keys.  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/piiKeys &#x60;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkPiiPiiKeys_0Test() throws ApiException {
        String networkId = null;
        String username = null;
        String email = null;
        String mac = null;
        String serial = null;
        String imei = null;
        String bluetoothMac = null;
        Object response = api.getNetworkPiiPiiKeys_0(networkId, username, email, mac, serial, imei, bluetoothMac);
        // TODO: test validations
    }

    /**
     * Return a PII request
     *
     * Return a PII request  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/requests/{requestId} &#x60;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkPiiRequest_0Test() throws ApiException {
        String networkId = null;
        String requestId = null;
        Object response = api.getNetworkPiiRequest_0(networkId, requestId);
        // TODO: test validations
    }

    /**
     * List the PII requests for this network or organization
     *
     * List the PII requests for this network or organization  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/requests &#x60;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkPiiRequests_0Test() throws ApiException {
        String networkId = null;
        List<Object> response = api.getNetworkPiiRequests_0(networkId);
        // TODO: test validations
    }

    /**
     * Given a piece of Personally Identifiable Information (PII), return the Systems Manager device ID(s) associated with that identifier
     *
     * Given a piece of Personally Identifiable Information (PII), return the Systems Manager device ID(s) associated with that identifier. These device IDs can be used with the Systems Manager API endpoints to retrieve device details. Exactly one identifier will be accepted.  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/smDevicesForKey &#x60;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkPiiSmDevicesForKey_0Test() throws ApiException {
        String networkId = null;
        String username = null;
        String email = null;
        String mac = null;
        String serial = null;
        String imei = null;
        String bluetoothMac = null;
        Object response = api.getNetworkPiiSmDevicesForKey_0(networkId, username, email, mac, serial, imei, bluetoothMac);
        // TODO: test validations
    }

    /**
     * Given a piece of Personally Identifiable Information (PII), return the Systems Manager owner ID(s) associated with that identifier
     *
     * Given a piece of Personally Identifiable Information (PII), return the Systems Manager owner ID(s) associated with that identifier. These owner IDs can be used with the Systems Manager API endpoints to retrieve owner details. Exactly one identifier will be accepted.  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/smOwnersForKey &#x60;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkPiiSmOwnersForKey_0Test() throws ApiException {
        String networkId = null;
        String username = null;
        String email = null;
        String mac = null;
        String serial = null;
        String imei = null;
        String bluetoothMac = null;
        Object response = api.getNetworkPiiSmOwnersForKey_0(networkId, username, email, mac, serial, imei, bluetoothMac);
        // TODO: test validations
    }

    /**
     * Get policies for all clients with policies
     *
     * Get policies for all clients with policies
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkPoliciesByClient_0Test() throws ApiException {
        String networkId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        String t0 = null;
        Float timespan = null;
        List<GetNetworkPoliciesByClient200ResponseInner> response = api.getNetworkPoliciesByClient_0(networkId, perPage, startingAfter, endingBefore, t0, timespan);
        // TODO: test validations
    }

    /**
     * Show details of a sensor alert profile for a network.
     *
     * Show details of a sensor alert profile for a network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSensorAlertsProfile_0Test() throws ApiException {
        String networkId = null;
        String id = null;
        GetNetworkSensorAlertsProfiles200ResponseInner response = api.getNetworkSensorAlertsProfile_0(networkId, id);
        // TODO: test validations
    }

    /**
     * Lists all sensor alert profiles for a network.
     *
     * Lists all sensor alert profiles for a network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSensorAlertsProfiles_0Test() throws ApiException {
        String networkId = null;
        List<GetNetworkSensorAlertsProfiles200ResponseInner> response = api.getNetworkSensorAlertsProfiles_0(networkId);
        // TODO: test validations
    }

    /**
     * List the sensor roles for devices in a given network
     *
     * List the sensor roles for devices in a given network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSensorRelationships_0Test() throws ApiException {
        String networkId = null;
        List<GetNetworkSensorRelationships200ResponseInner> response = api.getNetworkSensorRelationships_0(networkId);
        // TODO: test validations
    }

    /**
     * Return the settings for a network
     *
     * Return the settings for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSettings_0Test() throws ApiException {
        String networkId = null;
        GetNetworkSettings200Response response = api.getNetworkSettings_0(networkId);
        // TODO: test validations
    }

    /**
     * Bypass activation lock attempt status
     *
     * Bypass activation lock attempt status
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmBypassActivationLockAttempt_0Test() throws ApiException {
        String networkId = null;
        String attemptId = null;
        Object response = api.getNetworkSmBypassActivationLockAttempt_0(networkId, attemptId);
        // TODO: test validations
    }

    /**
     * List the certs on a device
     *
     * List the certs on a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmDeviceCerts_0Test() throws ApiException {
        String networkId = null;
        String deviceId = null;
        List<GetNetworkSmDeviceCerts200ResponseInner> response = api.getNetworkSmDeviceCerts_0(networkId, deviceId);
        // TODO: test validations
    }

    /**
     * Get the installed profiles associated with a device
     *
     * Get the installed profiles associated with a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmDeviceDeviceProfiles_0Test() throws ApiException {
        String networkId = null;
        String deviceId = null;
        List<GetNetworkSmDeviceDeviceProfiles200ResponseInner> response = api.getNetworkSmDeviceDeviceProfiles_0(networkId, deviceId);
        // TODO: test validations
    }

    /**
     * List the network adapters of a device
     *
     * List the network adapters of a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmDeviceNetworkAdapters_0Test() throws ApiException {
        String networkId = null;
        String deviceId = null;
        List<GetNetworkSmDeviceNetworkAdapters200ResponseInner> response = api.getNetworkSmDeviceNetworkAdapters_0(networkId, deviceId);
        // TODO: test validations
    }

    /**
     * List the restrictions on a device
     *
     * List the restrictions on a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmDeviceRestrictions_0Test() throws ApiException {
        String networkId = null;
        String deviceId = null;
        List<Object> response = api.getNetworkSmDeviceRestrictions_0(networkId, deviceId);
        // TODO: test validations
    }

    /**
     * List the security centers on a device
     *
     * List the security centers on a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmDeviceSecurityCenters_0Test() throws ApiException {
        String networkId = null;
        String deviceId = null;
        List<GetNetworkSmDeviceSecurityCenters200ResponseInner> response = api.getNetworkSmDeviceSecurityCenters_0(networkId, deviceId);
        // TODO: test validations
    }

    /**
     * Get a list of softwares associated with a device
     *
     * Get a list of softwares associated with a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmDeviceSoftwares_0Test() throws ApiException {
        String networkId = null;
        String deviceId = null;
        List<GetNetworkSmDeviceSoftwares200ResponseInner> response = api.getNetworkSmDeviceSoftwares_0(networkId, deviceId);
        // TODO: test validations
    }

    /**
     * List the saved SSID names on a device
     *
     * List the saved SSID names on a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmDeviceWlanLists_0Test() throws ApiException {
        String networkId = null;
        String deviceId = null;
        List<GetNetworkSmDeviceWlanLists200ResponseInner> response = api.getNetworkSmDeviceWlanLists_0(networkId, deviceId);
        // TODO: test validations
    }

    /**
     * List the devices enrolled in an SM network with various specified fields and filters
     *
     * List the devices enrolled in an SM network with various specified fields and filters
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmDevices_0Test() throws ApiException {
        String networkId = null;
        List<String> fields = null;
        List<String> wifiMacs = null;
        List<String> serials = null;
        List<String> ids = null;
        List<String> scope = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<GetNetworkSmDevices200ResponseInner> response = api.getNetworkSmDevices_0(networkId, fields, wifiMacs, serials, ids, scope, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * List all profiles in a network
     *
     * List all profiles in a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmProfiles_0Test() throws ApiException {
        String networkId = null;
        List<GetNetworkSmProfiles200ResponseInner> response = api.getNetworkSmProfiles_0(networkId);
        // TODO: test validations
    }

    /**
     * Return a target group
     *
     * Return a target group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmTargetGroup_0Test() throws ApiException {
        String networkId = null;
        String targetGroupId = null;
        Boolean withDetails = null;
        Object response = api.getNetworkSmTargetGroup_0(networkId, targetGroupId, withDetails);
        // TODO: test validations
    }

    /**
     * List the target groups in this network
     *
     * List the target groups in this network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmTargetGroups_0Test() throws ApiException {
        String networkId = null;
        Boolean withDetails = null;
        List<Object> response = api.getNetworkSmTargetGroups_0(networkId, withDetails);
        // TODO: test validations
    }

    /**
     * List Trusted Access Configs
     *
     * List Trusted Access Configs
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmTrustedAccessConfigs_0Test() throws ApiException {
        String networkId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<GetNetworkSmTrustedAccessConfigs200ResponseInner> response = api.getNetworkSmTrustedAccessConfigs_0(networkId, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * List User Access Devices and its Trusted Access Connections
     *
     * List User Access Devices and its Trusted Access Connections
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmUserAccessDevices_0Test() throws ApiException {
        String networkId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<GetNetworkSmUserAccessDevices200ResponseInner> response = api.getNetworkSmUserAccessDevices_0(networkId, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * Get the profiles associated with a user
     *
     * Get the profiles associated with a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmUserDeviceProfiles_0Test() throws ApiException {
        String networkId = null;
        String userId = null;
        List<GetNetworkSmDeviceDeviceProfiles200ResponseInner> response = api.getNetworkSmUserDeviceProfiles_0(networkId, userId);
        // TODO: test validations
    }

    /**
     * Get a list of softwares associated with a user
     *
     * Get a list of softwares associated with a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmUserSoftwares_0Test() throws ApiException {
        String networkId = null;
        String userId = null;
        List<GetNetworkSmDeviceSoftwares200ResponseInner> response = api.getNetworkSmUserSoftwares_0(networkId, userId);
        // TODO: test validations
    }

    /**
     * List the owners in an SM network with various specified fields and filters
     *
     * List the owners in an SM network with various specified fields and filters
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmUsers_0Test() throws ApiException {
        String networkId = null;
        List<String> ids = null;
        List<String> usernames = null;
        List<String> emails = null;
        List<String> scope = null;
        List<GetNetworkSmUsers200ResponseInner> response = api.getNetworkSmUsers_0(networkId, ids, usernames, emails, scope);
        // TODO: test validations
    }

    /**
     * Return the SNMP settings for a network
     *
     * Return the SNMP settings for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSnmp_0Test() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkSnmp_0(networkId);
        // TODO: test validations
    }

    /**
     * Return the access control lists for a MS network
     *
     * Return the access control lists for a MS network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchAccessControlLists_0Test() throws ApiException {
        String networkId = null;
        GetNetworkSwitchAccessControlLists200Response response = api.getNetworkSwitchAccessControlLists_0(networkId);
        // TODO: test validations
    }

    /**
     * List the access policies for a switch network
     *
     * List the access policies for a switch network. Only returns access policies with &#39;my RADIUS server&#39; as authentication method
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchAccessPolicies_0Test() throws ApiException {
        String networkId = null;
        List<GetNetworkSwitchAccessPolicies200ResponseInner> response = api.getNetworkSwitchAccessPolicies_0(networkId);
        // TODO: test validations
    }

    /**
     * Return a specific access policy for a switch network
     *
     * Return a specific access policy for a switch network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchAccessPolicy_0Test() throws ApiException {
        String networkId = null;
        String accessPolicyNumber = null;
        GetNetworkSwitchAccessPolicies200ResponseInner response = api.getNetworkSwitchAccessPolicy_0(networkId, accessPolicyNumber);
        // TODO: test validations
    }

    /**
     * Return the switch alternate management interface for the network
     *
     * Return the switch alternate management interface for the network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchAlternateManagementInterface_0Test() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkSwitchAlternateManagementInterface_0(networkId);
        // TODO: test validations
    }

    /**
     * Return the list of servers trusted by Dynamic ARP Inspection on this network
     *
     * Return the list of servers trusted by Dynamic ARP Inspection on this network. These are also known as whitelisted snoop entries
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_0Test() throws ApiException {
        String networkId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner> response = api.getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_0(networkId, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * Return the devices that have a Dynamic ARP Inspection warning and their warnings
     *
     * Return the devices that have a Dynamic ARP Inspection warning and their warnings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice_0Test() throws ApiException {
        String networkId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner> response = api.getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice_0(networkId, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * Return the DHCP server settings
     *
     * Return the DHCP server settings. Blocked/allowed servers are only applied when default policy is allow/block, respectively
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchDhcpServerPolicy_0Test() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkSwitchDhcpServerPolicy_0(networkId);
        // TODO: test validations
    }

    /**
     * Return the network&#39;s DHCPv4 servers seen within the selected timeframe (default 1 day)
     *
     * Return the network&#39;s DHCPv4 servers seen within the selected timeframe (default 1 day)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchDhcpV4ServersSeen_0Test() throws ApiException {
        String networkId = null;
        String t0 = null;
        Float timespan = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<GetNetworkSwitchDhcpV4ServersSeen200ResponseInner> response = api.getNetworkSwitchDhcpV4ServersSeen_0(networkId, t0, timespan, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * Return the DSCP to CoS mappings
     *
     * Return the DSCP to CoS mappings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchDscpToCosMappings_0Test() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkSwitchDscpToCosMappings_0(networkId);
        // TODO: test validations
    }

    /**
     * List link aggregation groups
     *
     * List link aggregation groups
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchLinkAggregations_0Test() throws ApiException {
        String networkId = null;
        List<Object> response = api.getNetworkSwitchLinkAggregations_0(networkId);
        // TODO: test validations
    }

    /**
     * Return the MTU configuration
     *
     * Return the MTU configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchMtu_0Test() throws ApiException {
        String networkId = null;
        GetNetworkSwitchMtu200Response response = api.getNetworkSwitchMtu_0(networkId);
        // TODO: test validations
    }

    /**
     * List switch port schedules
     *
     * List switch port schedules
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchPortSchedules_0Test() throws ApiException {
        String networkId = null;
        List<Object> response = api.getNetworkSwitchPortSchedules_0(networkId);
        // TODO: test validations
    }

    /**
     * Return a quality of service rule
     *
     * Return a quality of service rule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchQosRule_0Test() throws ApiException {
        String networkId = null;
        String qosRuleId = null;
        Object response = api.getNetworkSwitchQosRule_0(networkId, qosRuleId);
        // TODO: test validations
    }

    /**
     * Return the quality of service rule IDs by order in which they will be processed by the switch
     *
     * Return the quality of service rule IDs by order in which they will be processed by the switch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchQosRulesOrder_0Test() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkSwitchQosRulesOrder_0(networkId);
        // TODO: test validations
    }

    /**
     * List quality of service rules
     *
     * List quality of service rules
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchQosRules_0Test() throws ApiException {
        String networkId = null;
        List<Object> response = api.getNetworkSwitchQosRules_0(networkId);
        // TODO: test validations
    }

    /**
     * Return a multicast rendezvous point
     *
     * Return a multicast rendezvous point
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchRoutingMulticastRendezvousPoint_0Test() throws ApiException {
        String networkId = null;
        String rendezvousPointId = null;
        Object response = api.getNetworkSwitchRoutingMulticastRendezvousPoint_0(networkId, rendezvousPointId);
        // TODO: test validations
    }

    /**
     * List multicast rendezvous points
     *
     * List multicast rendezvous points
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchRoutingMulticastRendezvousPoints_0Test() throws ApiException {
        String networkId = null;
        List<List<Object>> response = api.getNetworkSwitchRoutingMulticastRendezvousPoints_0(networkId);
        // TODO: test validations
    }

    /**
     * Return multicast settings for a network
     *
     * Return multicast settings for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchRoutingMulticast_0Test() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkSwitchRoutingMulticast_0(networkId);
        // TODO: test validations
    }

    /**
     * Return layer 3 OSPF routing configuration
     *
     * Return layer 3 OSPF routing configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchRoutingOspf_0Test() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkSwitchRoutingOspf_0(networkId);
        // TODO: test validations
    }

    /**
     * Returns the switch network settings
     *
     * Returns the switch network settings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchSettings_0Test() throws ApiException {
        String networkId = null;
        GetNetworkSwitchSettings200Response response = api.getNetworkSwitchSettings_0(networkId);
        // TODO: test validations
    }

    /**
     * Return a layer 3 interface DHCP configuration for a switch stack
     *
     * Return a layer 3 interface DHCP configuration for a switch stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchStackRoutingInterfaceDhcp_0Test() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        String interfaceId = null;
        Object response = api.getNetworkSwitchStackRoutingInterfaceDhcp_0(networkId, switchStackId, interfaceId);
        // TODO: test validations
    }

    /**
     * Return a layer 3 interface from a switch stack
     *
     * Return a layer 3 interface from a switch stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchStackRoutingInterface_0Test() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        String interfaceId = null;
        Object response = api.getNetworkSwitchStackRoutingInterface_0(networkId, switchStackId, interfaceId);
        // TODO: test validations
    }

    /**
     * List layer 3 interfaces for a switch stack
     *
     * List layer 3 interfaces for a switch stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchStackRoutingInterfaces_0Test() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        List<Object> response = api.getNetworkSwitchStackRoutingInterfaces_0(networkId, switchStackId);
        // TODO: test validations
    }

    /**
     * Return a layer 3 static route for a switch stack
     *
     * Return a layer 3 static route for a switch stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchStackRoutingStaticRoute_0Test() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        String staticRouteId = null;
        Object response = api.getNetworkSwitchStackRoutingStaticRoute_0(networkId, switchStackId, staticRouteId);
        // TODO: test validations
    }

    /**
     * List layer 3 static routes for a switch stack
     *
     * List layer 3 static routes for a switch stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchStackRoutingStaticRoutes_0Test() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        List<Object> response = api.getNetworkSwitchStackRoutingStaticRoutes_0(networkId, switchStackId);
        // TODO: test validations
    }

    /**
     * Show a switch stack
     *
     * Show a switch stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchStack_0Test() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        GetNetworkSwitchStack200Response response = api.getNetworkSwitchStack_0(networkId, switchStackId);
        // TODO: test validations
    }

    /**
     * List the switch stacks in a network
     *
     * List the switch stacks in a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchStacks_0Test() throws ApiException {
        String networkId = null;
        List<Object> response = api.getNetworkSwitchStacks_0(networkId);
        // TODO: test validations
    }

    /**
     * Return the storm control configuration for a switch network
     *
     * Return the storm control configuration for a switch network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchStormControl_0Test() throws ApiException {
        String networkId = null;
        GetNetworkSwitchStormControl200Response response = api.getNetworkSwitchStormControl_0(networkId);
        // TODO: test validations
    }

    /**
     * Returns STP settings
     *
     * Returns STP settings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchStp_0Test() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkSwitchStp_0(networkId);
        // TODO: test validations
    }

    /**
     * List the syslog servers for a network
     *
     * List the syslog servers for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSyslogServers_0Test() throws ApiException {
        String networkId = null;
        GetNetworkSyslogServers200Response response = api.getNetworkSyslogServers_0(networkId);
        // TODO: test validations
    }

    /**
     * Return the traffic analysis settings for a network
     *
     * Return the traffic analysis settings for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkTrafficAnalysis_0Test() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkTrafficAnalysis_0(networkId);
        // TODO: test validations
    }

    /**
     * Returns the application categories for traffic shaping rules.
     *
     * Returns the application categories for traffic shaping rules.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkTrafficShapingApplicationCategories_0Test() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkTrafficShapingApplicationCategories_0(networkId);
        // TODO: test validations
    }

    /**
     * Returns the available DSCP tagging options for your traffic shaping rules.
     *
     * Returns the available DSCP tagging options for your traffic shaping rules.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkTrafficShapingDscpTaggingOptions_0Test() throws ApiException {
        String networkId = null;
        List<Object> response = api.getNetworkTrafficShapingDscpTaggingOptions_0(networkId);
        // TODO: test validations
    }

    /**
     * Return an HTTP server for a network
     *
     * Return an HTTP server for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWebhooksHttpServer_0Test() throws ApiException {
        String networkId = null;
        String httpServerId = null;
        GetNetworkWebhooksHttpServers200ResponseInner response = api.getNetworkWebhooksHttpServer_0(networkId, httpServerId);
        // TODO: test validations
    }

    /**
     * List the HTTP servers for a network
     *
     * List the HTTP servers for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWebhooksHttpServers_0Test() throws ApiException {
        String networkId = null;
        List<GetNetworkWebhooksHttpServers200ResponseInner> response = api.getNetworkWebhooksHttpServers_0(networkId);
        // TODO: test validations
    }

    /**
     * Get the webhook payload template for a network
     *
     * Get the webhook payload template for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWebhooksPayloadTemplate_0Test() throws ApiException {
        String networkId = null;
        String payloadTemplateId = null;
        GetNetworkWebhooksPayloadTemplates200ResponseInner response = api.getNetworkWebhooksPayloadTemplate_0(networkId, payloadTemplateId);
        // TODO: test validations
    }

    /**
     * List the webhook payload templates for a network
     *
     * List the webhook payload templates for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWebhooksPayloadTemplates_0Test() throws ApiException {
        String networkId = null;
        List<GetNetworkWebhooksPayloadTemplates200ResponseInner> response = api.getNetworkWebhooksPayloadTemplates_0(networkId);
        // TODO: test validations
    }

    /**
     * Return the status of a webhook test for a network
     *
     * Return the status of a webhook test for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWebhooksWebhookTest_0Test() throws ApiException {
        String networkId = null;
        String webhookTestId = null;
        CreateNetworkWebhooksWebhookTest201Response response = api.getNetworkWebhooksWebhookTest_0(networkId, webhookTestId);
        // TODO: test validations
    }

    /**
     * Return alternate management interface and devices with IP assigned
     *
     * Return alternate management interface and devices with IP assigned
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessAlternateManagementInterface_0Test() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkWirelessAlternateManagementInterface_0(networkId);
        // TODO: test validations
    }

    /**
     * Return the billing settings of this network
     *
     * Return the billing settings of this network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessBilling_0Test() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkWirelessBilling_0(networkId);
        // TODO: test validations
    }

    /**
     * Return the Bluetooth settings for a network. &lt;a href&#x3D;\&quot;https://documentation.meraki.com/MR/Bluetooth/Bluetooth_Low_Energy_(BLE)\&quot;&gt;Bluetooth settings&lt;/a&gt; must be enabled on the network.
     *
     * Return the Bluetooth settings for a network. &lt;a href&#x3D;\&quot;https://documentation.meraki.com/MR/Bluetooth/Bluetooth_Low_Energy_(BLE)\&quot;&gt;Bluetooth settings&lt;/a&gt; must be enabled on the network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessBluetoothSettings_0Test() throws ApiException {
        String networkId = null;
        GetNetworkWirelessBluetoothSettings200Response response = api.getNetworkWirelessBluetoothSettings_0(networkId);
        // TODO: test validations
    }

    /**
     * Return a RF profile
     *
     * Return a RF profile
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessRfProfile_0Test() throws ApiException {
        String networkId = null;
        String rfProfileId = null;
        Object response = api.getNetworkWirelessRfProfile_0(networkId, rfProfileId);
        // TODO: test validations
    }

    /**
     * List the non-basic RF profiles for this network
     *
     * List the non-basic RF profiles for this network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessRfProfiles_0Test() throws ApiException {
        String networkId = null;
        Boolean includeTemplateProfiles = null;
        List<Object> response = api.getNetworkWirelessRfProfiles_0(networkId, includeTemplateProfiles);
        // TODO: test validations
    }

    /**
     * Return the wireless settings for a network
     *
     * Return the wireless settings for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessSettings_0Test() throws ApiException {
        String networkId = null;
        GetNetworkWirelessSettings200Response response = api.getNetworkWirelessSettings_0(networkId);
        // TODO: test validations
    }

    /**
     * List the Bonjour forwarding setting and rules for the SSID
     *
     * List the Bonjour forwarding setting and rules for the SSID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessSsidBonjourForwarding_0Test() throws ApiException {
        String networkId = null;
        String number = null;
        Object response = api.getNetworkWirelessSsidBonjourForwarding_0(networkId, number);
        // TODO: test validations
    }

    /**
     * List the device type group policies for the SSID
     *
     * List the device type group policies for the SSID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessSsidDeviceTypeGroupPolicies_0Test() throws ApiException {
        String networkId = null;
        String number = null;
        Object response = api.getNetworkWirelessSsidDeviceTypeGroupPolicies_0(networkId, number);
        // TODO: test validations
    }

    /**
     * Return the EAP overridden parameters for an SSID
     *
     * Return the EAP overridden parameters for an SSID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessSsidEapOverride_0Test() throws ApiException {
        String networkId = null;
        String number = null;
        GetNetworkWirelessSsidEapOverride200Response response = api.getNetworkWirelessSsidEapOverride_0(networkId, number);
        // TODO: test validations
    }

    /**
     * Return the L3 firewall rules for an SSID on an MR network
     *
     * Return the L3 firewall rules for an SSID on an MR network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessSsidFirewallL3FirewallRules_0Test() throws ApiException {
        String networkId = null;
        String number = null;
        Object response = api.getNetworkWirelessSsidFirewallL3FirewallRules_0(networkId, number);
        // TODO: test validations
    }

    /**
     * Return the L7 firewall rules for an SSID on an MR network
     *
     * Return the L7 firewall rules for an SSID on an MR network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessSsidFirewallL7FirewallRules_0Test() throws ApiException {
        String networkId = null;
        String number = null;
        Object response = api.getNetworkWirelessSsidFirewallL7FirewallRules_0(networkId, number);
        // TODO: test validations
    }

    /**
     * Return the Hotspot 2.0 settings for an SSID
     *
     * Return the Hotspot 2.0 settings for an SSID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessSsidHotspot20_0Test() throws ApiException {
        String networkId = null;
        String number = null;
        Object response = api.getNetworkWirelessSsidHotspot20_0(networkId, number);
        // TODO: test validations
    }

    /**
     * Return an Identity PSK
     *
     * Return an Identity PSK
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessSsidIdentityPsk_0Test() throws ApiException {
        String networkId = null;
        String number = null;
        String identityPskId = null;
        GetNetworkWirelessSsidIdentityPsks200ResponseInner response = api.getNetworkWirelessSsidIdentityPsk_0(networkId, number, identityPskId);
        // TODO: test validations
    }

    /**
     * List all Identity PSKs in a wireless network
     *
     * List all Identity PSKs in a wireless network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessSsidIdentityPsks_0Test() throws ApiException {
        String networkId = null;
        String number = null;
        List<GetNetworkWirelessSsidIdentityPsks200ResponseInner> response = api.getNetworkWirelessSsidIdentityPsks_0(networkId, number);
        // TODO: test validations
    }

    /**
     * List the outage schedule for the SSID
     *
     * List the outage schedule for the SSID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessSsidSchedules_0Test() throws ApiException {
        String networkId = null;
        String number = null;
        Object response = api.getNetworkWirelessSsidSchedules_0(networkId, number);
        // TODO: test validations
    }

    /**
     * Display the splash page settings for the given SSID
     *
     * Display the splash page settings for the given SSID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessSsidSplashSettings_0Test() throws ApiException {
        String networkId = null;
        String number = null;
        GetNetworkWirelessSsidSplashSettings200Response response = api.getNetworkWirelessSsidSplashSettings_0(networkId, number);
        // TODO: test validations
    }

    /**
     * Display the traffic shaping settings for a SSID on an MR network
     *
     * Display the traffic shaping settings for a SSID on an MR network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessSsidTrafficShapingRules_0Test() throws ApiException {
        String networkId = null;
        String number = null;
        Object response = api.getNetworkWirelessSsidTrafficShapingRules_0(networkId, number);
        // TODO: test validations
    }

    /**
     * List the VPN settings for the SSID.
     *
     * List the VPN settings for the SSID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessSsidVpn_0Test() throws ApiException {
        String networkId = null;
        String number = null;
        Object response = api.getNetworkWirelessSsidVpn_0(networkId, number);
        // TODO: test validations
    }

    /**
     * Return a single MR SSID
     *
     * Return a single MR SSID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessSsid_0Test() throws ApiException {
        String networkId = null;
        String number = null;
        Object response = api.getNetworkWirelessSsid_0(networkId, number);
        // TODO: test validations
    }

    /**
     * List the MR SSIDs in a network
     *
     * List the MR SSIDs in a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessSsids_0Test() throws ApiException {
        String networkId = null;
        List<Object> response = api.getNetworkWirelessSsids_0(networkId);
        // TODO: test validations
    }

    /**
     * Return a network
     *
     * Return a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetwork_0Test() throws ApiException {
        String networkId = null;
        GetNetwork200Response response = api.getNetwork_0(networkId);
        // TODO: test validations
    }

    /**
     * Return an action batch
     *
     * Return an action batch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationActionBatch_0Test() throws ApiException {
        String organizationId = null;
        String actionBatchId = null;
        CreateOrganizationActionBatch201Response response = api.getOrganizationActionBatch_0(organizationId, actionBatchId);
        // TODO: test validations
    }

    /**
     * Return the list of action batches in the organization
     *
     * Return the list of action batches in the organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationActionBatches_0Test() throws ApiException {
        String organizationId = null;
        String status = null;
        List<Object> response = api.getOrganizationActionBatches_0(organizationId, status);
        // TODO: test validations
    }

    /**
     * Returns the adaptive policy ACL information
     *
     * Returns the adaptive policy ACL information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationAdaptivePolicyAcl_0Test() throws ApiException {
        String organizationId = null;
        String aclId = null;
        Object response = api.getOrganizationAdaptivePolicyAcl_0(organizationId, aclId);
        // TODO: test validations
    }

    /**
     * List adaptive policy ACLs in a organization
     *
     * List adaptive policy ACLs in a organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationAdaptivePolicyAcls_0Test() throws ApiException {
        String organizationId = null;
        List<Object> response = api.getOrganizationAdaptivePolicyAcls_0(organizationId);
        // TODO: test validations
    }

    /**
     * Returns an adaptive policy group
     *
     * Returns an adaptive policy group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationAdaptivePolicyGroup_0Test() throws ApiException {
        String organizationId = null;
        String id = null;
        Object response = api.getOrganizationAdaptivePolicyGroup_0(organizationId, id);
        // TODO: test validations
    }

    /**
     * List adaptive policy groups in a organization
     *
     * List adaptive policy groups in a organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationAdaptivePolicyGroups_0Test() throws ApiException {
        String organizationId = null;
        List<Object> response = api.getOrganizationAdaptivePolicyGroups_0(organizationId);
        // TODO: test validations
    }

    /**
     * List adaptive policies in an organization
     *
     * List adaptive policies in an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationAdaptivePolicyPolicies_0Test() throws ApiException {
        String organizationId = null;
        List<Object> response = api.getOrganizationAdaptivePolicyPolicies_0(organizationId);
        // TODO: test validations
    }

    /**
     * Return an adaptive policy
     *
     * Return an adaptive policy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationAdaptivePolicyPolicy_0Test() throws ApiException {
        String organizationId = null;
        String id = null;
        Object response = api.getOrganizationAdaptivePolicyPolicy_0(organizationId, id);
        // TODO: test validations
    }

    /**
     * Returns global adaptive policy settings in an organization
     *
     * Returns global adaptive policy settings in an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationAdaptivePolicySettings_0Test() throws ApiException {
        String organizationId = null;
        Object response = api.getOrganizationAdaptivePolicySettings_0(organizationId);
        // TODO: test validations
    }

    /**
     * List the dashboard administrators in this organization
     *
     * List the dashboard administrators in this organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationAdmins_0Test() throws ApiException {
        String organizationId = null;
        List<Object> response = api.getOrganizationAdmins_0(organizationId);
        // TODO: test validations
    }

    /**
     * List all organization-wide alert configurations
     *
     * List all organization-wide alert configurations
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationAlertsProfiles_0Test() throws ApiException {
        String organizationId = null;
        List<Object> response = api.getOrganizationAlertsProfiles_0(organizationId);
        // TODO: test validations
    }

    /**
     * Returns all supported intrusion settings for an organization
     *
     * Returns all supported intrusion settings for an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationApplianceSecurityIntrusion_0Test() throws ApiException {
        String organizationId = null;
        Object response = api.getOrganizationApplianceSecurityIntrusion_0(organizationId);
        // TODO: test validations
    }

    /**
     * Return the third party VPN peers for an organization
     *
     * Return the third party VPN peers for an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationApplianceVpnThirdPartyVPNPeers_0Test() throws ApiException {
        String organizationId = null;
        GetOrganizationApplianceVpnThirdPartyVPNPeers200Response response = api.getOrganizationApplianceVpnThirdPartyVPNPeers_0(organizationId);
        // TODO: test validations
    }

    /**
     * Return the firewall rules for an organization&#39;s site-to-site VPN
     *
     * Return the firewall rules for an organization&#39;s site-to-site VPN
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationApplianceVpnVpnFirewallRules_0Test() throws ApiException {
        String organizationId = null;
        Object response = api.getOrganizationApplianceVpnVpnFirewallRules_0(organizationId);
        // TODO: test validations
    }

    /**
     * Return the branding policy IDs of an organization in priority order
     *
     * Return the branding policy IDs of an organization in priority order. IDs are ordered in ascending order of priority (IDs later in the array have higher priority).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationBrandingPoliciesPriorities_0Test() throws ApiException {
        String organizationId = null;
        GetOrganizationBrandingPoliciesPriorities200Response response = api.getOrganizationBrandingPoliciesPriorities_0(organizationId);
        // TODO: test validations
    }

    /**
     * List the branding policies of an organization
     *
     * List the branding policies of an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationBrandingPolicies_0Test() throws ApiException {
        String organizationId = null;
        List<GetOrganizationBrandingPolicies200ResponseInner> response = api.getOrganizationBrandingPolicies_0(organizationId);
        // TODO: test validations
    }

    /**
     * Return a branding policy
     *
     * Return a branding policy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationBrandingPolicy_0Test() throws ApiException {
        String organizationId = null;
        String brandingPolicyId = null;
        GetOrganizationBrandingPolicies200ResponseInner response = api.getOrganizationBrandingPolicy_0(organizationId, brandingPolicyId);
        // TODO: test validations
    }

    /**
     * Get Custom Analytics Artifact
     *
     * Get Custom Analytics Artifact
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationCameraCustomAnalyticsArtifact_0Test() throws ApiException {
        String organizationId = null;
        String artifactId = null;
        Object response = api.getOrganizationCameraCustomAnalyticsArtifact_0(organizationId, artifactId);
        // TODO: test validations
    }

    /**
     * List Custom Analytics Artifacts
     *
     * List Custom Analytics Artifacts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationCameraCustomAnalyticsArtifacts_0Test() throws ApiException {
        String organizationId = null;
        List<Object> response = api.getOrganizationCameraCustomAnalyticsArtifacts_0(organizationId);
        // TODO: test validations
    }

    /**
     * Fetch onboarding status of cameras
     *
     * Fetch onboarding status of cameras
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationCameraOnboardingStatuses_0Test() throws ApiException {
        String organizationId = null;
        List<String> serials = null;
        List<String> networkIds = null;
        List<Object> response = api.getOrganizationCameraOnboardingStatuses_0(organizationId, serials, networkIds);
        // TODO: test validations
    }

    /**
     * Return the client details in an organization
     *
     * Return the client details in an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationClientsSearch_0Test() throws ApiException {
        String organizationId = null;
        String mac = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        Object response = api.getOrganizationClientsSearch_0(organizationId, mac, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * Return a switch profile port
     *
     * Return a switch profile port
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationConfigTemplateSwitchProfilePort_0Test() throws ApiException {
        String organizationId = null;
        String configTemplateId = null;
        String profileId = null;
        String portId = null;
        GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner response = api.getOrganizationConfigTemplateSwitchProfilePort_0(organizationId, configTemplateId, profileId, portId);
        // TODO: test validations
    }

    /**
     * Return all the ports of a switch profile
     *
     * Return all the ports of a switch profile
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationConfigTemplateSwitchProfilePorts_0Test() throws ApiException {
        String organizationId = null;
        String configTemplateId = null;
        String profileId = null;
        List<GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner> response = api.getOrganizationConfigTemplateSwitchProfilePorts_0(organizationId, configTemplateId, profileId);
        // TODO: test validations
    }

    /**
     * List the switch profiles for your switch template configuration
     *
     * List the switch profiles for your switch template configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationConfigTemplateSwitchProfiles_0Test() throws ApiException {
        String organizationId = null;
        String configTemplateId = null;
        GetOrganizationConfigTemplateSwitchProfiles200Response response = api.getOrganizationConfigTemplateSwitchProfiles_0(organizationId, configTemplateId);
        // TODO: test validations
    }

    /**
     * Return a single configuration template
     *
     * Return a single configuration template
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationConfigTemplate_0Test() throws ApiException {
        String organizationId = null;
        String configTemplateId = null;
        Object response = api.getOrganizationConfigTemplate_0(organizationId, configTemplateId);
        // TODO: test validations
    }

    /**
     * List the configuration templates for this organization
     *
     * List the configuration templates for this organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationConfigTemplates_0Test() throws ApiException {
        String organizationId = null;
        List<Object> response = api.getOrganizationConfigTemplates_0(organizationId);
        // TODO: test validations
    }

    /**
     * List the devices in an organization
     *
     * List the devices in an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationDevices_0Test() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        String configurationUpdatedAfter = null;
        List<String> networkIds = null;
        List<String> productTypes = null;
        List<String> tags = null;
        String tagsFilterType = null;
        String name = null;
        String mac = null;
        String serial = null;
        String model = null;
        List<String> macs = null;
        List<String> serials = null;
        List<String> sensorMetrics = null;
        List<String> sensorAlertProfileIds = null;
        List<String> models = null;
        List<GetOrganizationDevices200ResponseInner> response = api.getOrganizationDevices_0(organizationId, perPage, startingAfter, endingBefore, configurationUpdatedAfter, networkIds, productTypes, tags, tagsFilterType, name, mac, serial, model, macs, serials, sensorMetrics, sensorAlertProfileIds, models);
        // TODO: test validations
    }

    /**
     * Show an early access feature opt-in for an organization
     *
     * Show an early access feature opt-in for an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationEarlyAccessFeaturesOptIn_0Test() throws ApiException {
        String organizationId = null;
        String optInId = null;
        Object response = api.getOrganizationEarlyAccessFeaturesOptIn_0(organizationId, optInId);
        // TODO: test validations
    }

    /**
     * List the early access feature opt-ins for an organization
     *
     * List the early access feature opt-ins for an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationEarlyAccessFeaturesOptIns_0Test() throws ApiException {
        String organizationId = null;
        List<Object> response = api.getOrganizationEarlyAccessFeaturesOptIns_0(organizationId);
        // TODO: test validations
    }

    /**
     * List the available early access features for organization
     *
     * List the available early access features for organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationEarlyAccessFeatures_0Test() throws ApiException {
        String organizationId = null;
        List<Object> response = api.getOrganizationEarlyAccessFeatures_0(organizationId);
        // TODO: test validations
    }

    /**
     * Get firmware upgrade status for the filtered devices
     *
     * Get firmware upgrade status for the filtered devices
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationFirmwareUpgradesByDevice_0Test() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<String> networkIds = null;
        List<String> serials = null;
        List<String> macs = null;
        List<String> firmwareUpgradeIds = null;
        List<String> firmwareUpgradeBatchIds = null;
        List<GetOrganizationFirmwareUpgradesByDevice200ResponseInner> response = api.getOrganizationFirmwareUpgradesByDevice_0(organizationId, perPage, startingAfter, endingBefore, networkIds, serials, macs, firmwareUpgradeIds, firmwareUpgradeBatchIds);
        // TODO: test validations
    }

    /**
     * Get firmware upgrade information for an organization
     *
     * Get firmware upgrade information for an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationFirmwareUpgrades_0Test() throws ApiException {
        String organizationId = null;
        List<String> status = null;
        List<String> productType = null;
        List<GetOrganizationFirmwareUpgrades200ResponseInner> response = api.getOrganizationFirmwareUpgrades_0(organizationId, status, productType);
        // TODO: test validations
    }

    /**
     * List all Insight tracked applications
     *
     * List all Insight tracked applications
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationInsightApplications_0Test() throws ApiException {
        String organizationId = null;
        List<GetOrganizationInsightApplications200ResponseInner> response = api.getOrganizationInsightApplications_0(organizationId);
        // TODO: test validations
    }

    /**
     * Return a monitored media server for this organization
     *
     * Return a monitored media server for this organization. Only valid for organizations with Meraki Insight.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationInsightMonitoredMediaServer_0Test() throws ApiException {
        String organizationId = null;
        String monitoredMediaServerId = null;
        Object response = api.getOrganizationInsightMonitoredMediaServer_0(organizationId, monitoredMediaServerId);
        // TODO: test validations
    }

    /**
     * List the monitored media servers for this organization
     *
     * List the monitored media servers for this organization. Only valid for organizations with Meraki Insight.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationInsightMonitoredMediaServers_0Test() throws ApiException {
        String organizationId = null;
        List<GetOrganizationInsightMonitoredMediaServers200ResponseInner> response = api.getOrganizationInsightMonitoredMediaServers_0(organizationId);
        // TODO: test validations
    }

    /**
     * Return a single device from the inventory of an organization
     *
     * Return a single device from the inventory of an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationInventoryDevice_0Test() throws ApiException {
        String organizationId = null;
        String serial = null;
        GetOrganizationInventoryDevices200ResponseInner response = api.getOrganizationInventoryDevice_0(organizationId, serial);
        // TODO: test validations
    }

    /**
     * Return the device inventory for an organization
     *
     * Return the device inventory for an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationInventoryDevices_0Test() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        String usedState = null;
        String search = null;
        List<String> macs = null;
        List<String> networkIds = null;
        List<String> serials = null;
        List<String> models = null;
        List<String> orderNumbers = null;
        List<String> tags = null;
        String tagsFilterType = null;
        List<String> productTypes = null;
        List<GetOrganizationInventoryDevices200ResponseInner> response = api.getOrganizationInventoryDevices_0(organizationId, perPage, startingAfter, endingBefore, usedState, search, macs, networkIds, serials, models, orderNumbers, tags, tagsFilterType, productTypes);
        // TODO: test validations
    }

    /**
     * Check the status of a committed Import operation
     *
     * Check the status of a committed Import operation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationInventoryOnboardingCloudMonitoringImports_0Test() throws ApiException {
        String organizationId = null;
        List<String> importIds = null;
        List<GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner> response = api.getOrganizationInventoryOnboardingCloudMonitoringImports_0(organizationId, importIds);
        // TODO: test validations
    }

    /**
     * Returns list of networks eligible for adding cloud monitored device
     *
     * Returns list of networks eligible for adding cloud monitored device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationInventoryOnboardingCloudMonitoringNetworks_0Test() throws ApiException {
        String organizationId = null;
        String deviceType = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<GetNetwork200Response> response = api.getOrganizationInventoryOnboardingCloudMonitoringNetworks_0(organizationId, deviceType, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * Display a license
     *
     * Display a license
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationLicense_0Test() throws ApiException {
        String organizationId = null;
        String licenseId = null;
        GetOrganizationLicenses200ResponseInner response = api.getOrganizationLicense_0(organizationId, licenseId);
        // TODO: test validations
    }

    /**
     * List the licenses for an organization
     *
     * List the licenses for an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationLicenses_0Test() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        String deviceSerial = null;
        String networkId = null;
        String state = null;
        List<GetOrganizationLicenses200ResponseInner> response = api.getOrganizationLicenses_0(organizationId, perPage, startingAfter, endingBefore, deviceSerial, networkId, state);
        // TODO: test validations
    }

    /**
     * List the licenses in a coterm organization
     *
     * List the licenses in a coterm organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationLicensingCotermLicenses_0Test() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        Boolean invalidated = null;
        Boolean expired = null;
        List<GetOrganizationLicensingCotermLicenses200ResponseInner> response = api.getOrganizationLicensingCotermLicenses_0(organizationId, perPage, startingAfter, endingBefore, invalidated, expired);
        // TODO: test validations
    }

    /**
     * Returns the login security settings for an organization.
     *
     * Returns the login security settings for an organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationLoginSecurity_0Test() throws ApiException {
        String organizationId = null;
        GetOrganizationLoginSecurity200Response response = api.getOrganizationLoginSecurity_0(organizationId);
        // TODO: test validations
    }

    /**
     * List the networks that the user has privileges on in an organization
     *
     * List the networks that the user has privileges on in an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationNetworks_0Test() throws ApiException {
        String organizationId = null;
        String configTemplateId = null;
        Boolean isBoundToConfigTemplate = null;
        List<String> tags = null;
        String tagsFilterType = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<GetNetwork200Response> response = api.getOrganizationNetworks_0(organizationId, configTemplateId, isBoundToConfigTemplate, tags, tagsFilterType, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * Shows details of a Policy Object.
     *
     * Shows details of a Policy Object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationPolicyObject_0Test() throws ApiException {
        String organizationId = null;
        String policyObjectId = null;
        Object response = api.getOrganizationPolicyObject_0(organizationId, policyObjectId);
        // TODO: test validations
    }

    /**
     * Shows details of a Policy Object Group.
     *
     * Shows details of a Policy Object Group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationPolicyObjectsGroup_0Test() throws ApiException {
        String organizationId = null;
        String policyObjectGroupId = null;
        Object response = api.getOrganizationPolicyObjectsGroup_0(organizationId, policyObjectGroupId);
        // TODO: test validations
    }

    /**
     * Lists Policy Object Groups belonging to the organization.
     *
     * Lists Policy Object Groups belonging to the organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationPolicyObjectsGroups_0Test() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<Object> response = api.getOrganizationPolicyObjectsGroups_0(organizationId, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * Lists Policy Objects belonging to the organization.
     *
     * Lists Policy Objects belonging to the organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationPolicyObjects_0Test() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<Object> response = api.getOrganizationPolicyObjects_0(organizationId, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * Get a SAML IdP from your organization.
     *
     * Get a SAML IdP from your organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationSamlIdp_0Test() throws ApiException {
        String organizationId = null;
        String idpId = null;
        GetOrganizationSamlIdps200ResponseInner response = api.getOrganizationSamlIdp_0(organizationId, idpId);
        // TODO: test validations
    }

    /**
     * List the SAML IdPs in your organization.
     *
     * List the SAML IdPs in your organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationSamlIdps_0Test() throws ApiException {
        String organizationId = null;
        List<GetOrganizationSamlIdps200ResponseInner> response = api.getOrganizationSamlIdps_0(organizationId);
        // TODO: test validations
    }

    /**
     * Return a SAML role
     *
     * Return a SAML role
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationSamlRole_0Test() throws ApiException {
        String organizationId = null;
        String samlRoleId = null;
        Object response = api.getOrganizationSamlRole_0(organizationId, samlRoleId);
        // TODO: test validations
    }

    /**
     * List the SAML roles for this organization
     *
     * List the SAML roles for this organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationSamlRoles_0Test() throws ApiException {
        String organizationId = null;
        List<Object> response = api.getOrganizationSamlRoles_0(organizationId);
        // TODO: test validations
    }

    /**
     * Returns the SAML SSO enabled settings for an organization.
     *
     * Returns the SAML SSO enabled settings for an organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationSaml_0Test() throws ApiException {
        String organizationId = null;
        GetOrganizationSaml200Response response = api.getOrganizationSaml_0(organizationId);
        // TODO: test validations
    }

    /**
     * Get the organization&#39;s APNS certificate
     *
     * Get the organization&#39;s APNS certificate
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationSmApnsCert_0Test() throws ApiException {
        String organizationId = null;
        GetOrganizationSmApnsCert200Response response = api.getOrganizationSmApnsCert_0(organizationId);
        // TODO: test validations
    }

    /**
     * Get a hash containing the unparsed token of the VPP account with the given ID
     *
     * Get a hash containing the unparsed token of the VPP account with the given ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationSmVppAccount_0Test() throws ApiException {
        String organizationId = null;
        String vppAccountId = null;
        GetOrganizationSmVppAccounts200ResponseInner response = api.getOrganizationSmVppAccount_0(organizationId, vppAccountId);
        // TODO: test validations
    }

    /**
     * List the VPP accounts in the organization
     *
     * List the VPP accounts in the organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationSmVppAccounts_0Test() throws ApiException {
        String organizationId = null;
        List<GetOrganizationSmVppAccounts200ResponseInner> response = api.getOrganizationSmVppAccounts_0(organizationId);
        // TODO: test validations
    }

    /**
     * Return the SNMP settings for an organization
     *
     * Return the SNMP settings for an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationSnmp_0Test() throws ApiException {
        String organizationId = null;
        Object response = api.getOrganizationSnmp_0(organizationId);
        // TODO: test validations
    }

    /**
     * List the switchports in an organization by switch
     *
     * List the switchports in an organization by switch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationSwitchPortsBySwitch_0Test() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<String> networkIds = null;
        List<String> portProfileIds = null;
        String name = null;
        String mac = null;
        List<String> macs = null;
        String serial = null;
        List<String> serials = null;
        String configurationUpdatedAfter = null;
        List<GetOrganizationSwitchPortsBySwitch200ResponseInner> response = api.getOrganizationSwitchPortsBySwitch_0(organizationId, perPage, startingAfter, endingBefore, networkIds, portProfileIds, name, mac, macs, serial, serials, configurationUpdatedAfter);
        // TODO: test validations
    }

    /**
     * Endpoint to see power status for wireless devices
     *
     * Endpoint to see power status for wireless devices
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationWirelessDevicesEthernetStatuses_0Test() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<String> networkIds = null;
        List<GetOrganizationWirelessDevicesEthernetStatuses200ResponseInner> response = api.getOrganizationWirelessDevicesEthernetStatuses_0(organizationId, perPage, startingAfter, endingBefore, networkIds);
        // TODO: test validations
    }

    /**
     * Return an organization
     *
     * Return an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganization_0Test() throws ApiException {
        String organizationId = null;
        GetOrganizations200ResponseInner response = api.getOrganization_0(organizationId);
        // TODO: test validations
    }

    /**
     * List the organizations that the user has privileges on
     *
     * List the organizations that the user has privileges on
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizations_0Test() throws ApiException {
        List<GetOrganizations200ResponseInner> response = api.getOrganizations_0();
        // TODO: test validations
    }

    /**
     * Lock a set of devices
     *
     * Lock a set of devices
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void lockNetworkSmDevices_0Test() throws ApiException {
        String networkId = null;
        LockNetworkSmDevicesRequest lockNetworkSmDevicesRequest = null;
        CheckinNetworkSmDevices200Response response = api.lockNetworkSmDevices_0(networkId, lockNetworkSmDevicesRequest);
        // TODO: test validations
    }

    /**
     * Add, delete, or update the tags of a set of devices
     *
     * Add, delete, or update the tags of a set of devices
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyNetworkSmDevicesTags_0Test() throws ApiException {
        String networkId = null;
        ModifyNetworkSmDevicesTagsRequest modifyNetworkSmDevicesTagsRequest = null;
        List<ModifyNetworkSmDevicesTags200ResponseInner> response = api.modifyNetworkSmDevicesTags_0(networkId, modifyNetworkSmDevicesTagsRequest);
        // TODO: test validations
    }

    /**
     * Move a set of devices to a new network
     *
     * Move a set of devices to a new network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void moveNetworkSmDevices_0Test() throws ApiException {
        String networkId = null;
        MoveNetworkSmDevicesRequest moveNetworkSmDevicesRequest = null;
        MoveNetworkSmDevices200Response response = api.moveNetworkSmDevices_0(networkId, moveNetworkSmDevicesRequest);
        // TODO: test validations
    }

    /**
     * Move SM seats to another organization
     *
     * Move SM seats to another organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void moveOrganizationLicensesSeats_0Test() throws ApiException {
        String organizationId = null;
        MoveOrganizationLicensesSeatsRequest moveOrganizationLicensesSeatsRequest = null;
        MoveOrganizationLicensesSeats200Response response = api.moveOrganizationLicensesSeats_0(organizationId, moveOrganizationLicensesSeatsRequest);
        // TODO: test validations
    }

    /**
     * Move licenses to another organization
     *
     * Move licenses to another organization. This will also move any devices that the licenses are assigned to
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void moveOrganizationLicenses_0Test() throws ApiException {
        String organizationId = null;
        MoveOrganizationLicensesRequest moveOrganizationLicensesRequest = null;
        MoveOrganizationLicenses200Response response = api.moveOrganizationLicenses_0(organizationId, moveOrganizationLicensesRequest);
        // TODO: test validations
    }

    /**
     * Moves a license to a different organization (coterm only)
     *
     * Moves a license to a different organization (coterm only)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void moveOrganizationLicensingCotermLicenses_0Test() throws ApiException {
        String organizationId = null;
        MoveOrganizationLicensingCotermLicensesRequest moveOrganizationLicensingCotermLicensesRequest = null;
        MoveOrganizationLicensingCotermLicenses200Response response = api.moveOrganizationLicensingCotermLicenses_0(organizationId, moveOrganizationLicensingCotermLicensesRequest);
        // TODO: test validations
    }

    /**
     * Provisions a client with a name and policy
     *
     * Provisions a client with a name and policy. Clients can be provisioned before they associate to the network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void provisionNetworkClients_0Test() throws ApiException {
        String networkId = null;
        ProvisionNetworkClientsRequest provisionNetworkClientsRequest = null;
        Object response = api.provisionNetworkClients_0(networkId, provisionNetworkClientsRequest);
        // TODO: test validations
    }

    /**
     * Refresh the details of a device
     *
     * Refresh the details of a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void refreshNetworkSmDeviceDetails_0Test() throws ApiException {
        String networkId = null;
        String deviceId = null;
        api.refreshNetworkSmDeviceDetails_0(networkId, deviceId);
        // TODO: test validations
    }

    /**
     * Release a list of claimed devices from an organization.
     *
     * Release a list of claimed devices from an organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void releaseFromOrganizationInventory_0Test() throws ApiException {
        String organizationId = null;
        ReleaseFromOrganizationInventoryRequest releaseFromOrganizationInventoryRequest = null;
        Object response = api.releaseFromOrganizationInventory_0(organizationId, releaseFromOrganizationInventoryRequest);
        // TODO: test validations
    }

    /**
     * Remove a single device
     *
     * Remove a single device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeNetworkDevices_0Test() throws ApiException {
        String networkId = null;
        RemoveNetworkDevicesRequest removeNetworkDevicesRequest = null;
        api.removeNetworkDevices_0(networkId, removeNetworkDevicesRequest);
        // TODO: test validations
    }

    /**
     * Remove a switch from a stack
     *
     * Remove a switch from a stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeNetworkSwitchStack_0Test() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        RemoveNetworkSwitchStackRequest removeNetworkSwitchStackRequest = null;
        Object response = api.removeNetworkSwitchStack_0(networkId, switchStackId, removeNetworkSwitchStackRequest);
        // TODO: test validations
    }

    /**
     * Renew SM seats of a license
     *
     * Renew SM seats of a license. This will extend the license expiration date of managed SM devices covered by this license
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void renewOrganizationLicensesSeats_0Test() throws ApiException {
        String organizationId = null;
        RenewOrganizationLicensesSeatsRequest renewOrganizationLicensesSeatsRequest = null;
        AssignOrganizationLicensesSeats200Response response = api.renewOrganizationLicensesSeats_0(organizationId, renewOrganizationLicensesSeatsRequest);
        // TODO: test validations
    }

    /**
     * Rollback a Staged Upgrade Event for a network
     *
     * Rollback a Staged Upgrade Event for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rollbacksNetworkFirmwareUpgradesStagedEvents_0Test() throws ApiException {
        String networkId = null;
        RollbacksNetworkFirmwareUpgradesStagedEventsRequest rollbacksNetworkFirmwareUpgradesStagedEventsRequest = null;
        GetNetworkFirmwareUpgradesStagedEvents200Response response = api.rollbacksNetworkFirmwareUpgradesStagedEvents_0(networkId, rollbacksNetworkFirmwareUpgradesStagedEventsRequest);
        // TODO: test validations
    }

    /**
     * Split a combined network into individual networks for each type of device
     *
     * Split a combined network into individual networks for each type of device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void splitNetwork_0Test() throws ApiException {
        String networkId = null;
        SplitNetwork200Response response = api.splitNetwork_0(networkId);
        // TODO: test validations
    }

    /**
     * Swap MX primary and warm spare appliances
     *
     * Swap MX primary and warm spare appliances
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void swapNetworkApplianceWarmSpare_0Test() throws ApiException {
        String networkId = null;
        Object response = api.swapNetworkApplianceWarmSpare_0(networkId);
        // TODO: test validations
    }

    /**
     * Unbind a network from a template.
     *
     * Unbind a network from a template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unbindNetwork_0Test() throws ApiException {
        String networkId = null;
        UnbindNetworkRequest unbindNetworkRequest = null;
        GetNetwork200Response response = api.unbindNetwork_0(networkId, unbindNetworkRequest);
        // TODO: test validations
    }

    /**
     * Unenroll a device
     *
     * Unenroll a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unenrollNetworkSmDevice_0Test() throws ApiException {
        String networkId = null;
        String deviceId = null;
        Object response = api.unenrollNetworkSmDevice_0(networkId, deviceId);
        // TODO: test validations
    }

    /**
     * Update the uplink settings for an MX appliance
     *
     * Update the uplink settings for an MX appliance
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeviceApplianceUplinksSettings_0Test() throws ApiException {
        String serial = null;
        UpdateDeviceApplianceUplinksSettingsRequest updateDeviceApplianceUplinksSettingsRequest = null;
        GetDeviceApplianceUplinksSettings200Response response = api.updateDeviceApplianceUplinksSettings_0(serial, updateDeviceApplianceUplinksSettingsRequest);
        // TODO: test validations
    }

    /**
     * Update custom analytics settings for a camera
     *
     * Update custom analytics settings for a camera
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeviceCameraCustomAnalytics_0Test() throws ApiException {
        String serial = null;
        UpdateDeviceCameraCustomAnalyticsRequest updateDeviceCameraCustomAnalyticsRequest = null;
        Object response = api.updateDeviceCameraCustomAnalytics_0(serial, updateDeviceCameraCustomAnalyticsRequest);
        // TODO: test validations
    }

    /**
     * Update quality and retention settings for the given camera
     *
     * Update quality and retention settings for the given camera
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeviceCameraQualityAndRetention_0Test() throws ApiException {
        String serial = null;
        UpdateDeviceCameraQualityAndRetentionRequest updateDeviceCameraQualityAndRetentionRequest = null;
        Object response = api.updateDeviceCameraQualityAndRetention_0(serial, updateDeviceCameraQualityAndRetentionRequest);
        // TODO: test validations
    }

    /**
     * Update sense settings for the given camera
     *
     * Update sense settings for the given camera
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeviceCameraSense_0Test() throws ApiException {
        String serial = null;
        UpdateDeviceCameraSenseRequest updateDeviceCameraSenseRequest = null;
        Object response = api.updateDeviceCameraSense_0(serial, updateDeviceCameraSenseRequest);
        // TODO: test validations
    }

    /**
     * Update video settings for the given camera
     *
     * Update video settings for the given camera
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeviceCameraVideoSettings_0Test() throws ApiException {
        String serial = null;
        UpdateDeviceCameraVideoSettingsRequest updateDeviceCameraVideoSettingsRequest = null;
        Object response = api.updateDeviceCameraVideoSettings_0(serial, updateDeviceCameraVideoSettingsRequest);
        // TODO: test validations
    }

    /**
     * Assign wireless profiles to the given camera
     *
     * Assign wireless profiles to the given camera. Incremental updates are not supported, all profile assignment need to be supplied at once.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeviceCameraWirelessProfiles_0Test() throws ApiException {
        String serial = null;
        UpdateDeviceCameraWirelessProfilesRequest updateDeviceCameraWirelessProfilesRequest = null;
        Object response = api.updateDeviceCameraWirelessProfiles_0(serial, updateDeviceCameraWirelessProfilesRequest);
        // TODO: test validations
    }

    /**
     * Update the LAN Settings for a single MG.
     *
     * Update the LAN Settings for a single MG.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeviceCellularGatewayLan_0Test() throws ApiException {
        String serial = null;
        UpdateDeviceCellularGatewayLanRequest updateDeviceCellularGatewayLanRequest = null;
        Object response = api.updateDeviceCellularGatewayLan_0(serial, updateDeviceCellularGatewayLanRequest);
        // TODO: test validations
    }

    /**
     * Updates the port forwarding rules for a single MG.
     *
     * Updates the port forwarding rules for a single MG.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeviceCellularGatewayPortForwardingRules_0Test() throws ApiException {
        String serial = null;
        UpdateDeviceCellularGatewayPortForwardingRulesRequest updateDeviceCellularGatewayPortForwardingRulesRequest = null;
        Object response = api.updateDeviceCellularGatewayPortForwardingRules_0(serial, updateDeviceCellularGatewayPortForwardingRulesRequest);
        // TODO: test validations
    }

    /**
     * Updates the SIM and APN configurations for a cellular device.
     *
     * Updates the SIM and APN configurations for a cellular device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeviceCellularSims_0Test() throws ApiException {
        String serial = null;
        UpdateDeviceCellularSimsRequest updateDeviceCellularSimsRequest = null;
        Object response = api.updateDeviceCellularSims_0(serial, updateDeviceCellularSimsRequest);
        // TODO: test validations
    }

    /**
     * Update the management interface settings for a device
     *
     * Update the management interface settings for a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeviceManagementInterface_0Test() throws ApiException {
        String serial = null;
        UpdateDeviceManagementInterfaceRequest updateDeviceManagementInterfaceRequest = null;
        Object response = api.updateDeviceManagementInterface_0(serial, updateDeviceManagementInterfaceRequest);
        // TODO: test validations
    }

    /**
     * Assign one or more sensor roles to a given sensor or camera device.
     *
     * Assign one or more sensor roles to a given sensor or camera device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeviceSensorRelationships_0Test() throws ApiException {
        String serial = null;
        UpdateDeviceSensorRelationshipsRequest updateDeviceSensorRelationshipsRequest = null;
        GetDeviceSensorRelationships200ResponseInner response = api.updateDeviceSensorRelationships_0(serial, updateDeviceSensorRelationshipsRequest);
        // TODO: test validations
    }

    /**
     * Update a switch port
     *
     * Update a switch port
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeviceSwitchPort_0Test() throws ApiException {
        String serial = null;
        String portId = null;
        UpdateDeviceSwitchPortRequest updateDeviceSwitchPortRequest = null;
        GetDeviceSwitchPorts200ResponseInner response = api.updateDeviceSwitchPort_0(serial, portId, updateDeviceSwitchPortRequest);
        // TODO: test validations
    }

    /**
     * Update a layer 3 interface DHCP configuration for a switch
     *
     * Update a layer 3 interface DHCP configuration for a switch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeviceSwitchRoutingInterfaceDhcp_0Test() throws ApiException {
        String serial = null;
        String interfaceId = null;
        UpdateDeviceSwitchRoutingInterfaceDhcpRequest updateDeviceSwitchRoutingInterfaceDhcpRequest = null;
        Object response = api.updateDeviceSwitchRoutingInterfaceDhcp_0(serial, interfaceId, updateDeviceSwitchRoutingInterfaceDhcpRequest);
        // TODO: test validations
    }

    /**
     * Update a layer 3 interface for a switch
     *
     * Update a layer 3 interface for a switch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeviceSwitchRoutingInterface_0Test() throws ApiException {
        String serial = null;
        String interfaceId = null;
        CreateDeviceSwitchRoutingInterfaceRequest createDeviceSwitchRoutingInterfaceRequest = null;
        GetDeviceSwitchRoutingInterfaces200ResponseInner response = api.updateDeviceSwitchRoutingInterface_0(serial, interfaceId, createDeviceSwitchRoutingInterfaceRequest);
        // TODO: test validations
    }

    /**
     * Update a layer 3 static route for a switch
     *
     * Update a layer 3 static route for a switch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeviceSwitchRoutingStaticRoute_0Test() throws ApiException {
        String serial = null;
        String staticRouteId = null;
        UpdateDeviceSwitchRoutingStaticRouteRequest updateDeviceSwitchRoutingStaticRouteRequest = null;
        Object response = api.updateDeviceSwitchRoutingStaticRoute_0(serial, staticRouteId, updateDeviceSwitchRoutingStaticRouteRequest);
        // TODO: test validations
    }

    /**
     * Update warm spare configuration for a switch
     *
     * Update warm spare configuration for a switch. The spare will use the same L3 configuration as the primary. Note that this will irreversibly destroy any existing L3 configuration on the spare.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeviceSwitchWarmSpare_0Test() throws ApiException {
        String serial = null;
        UpdateDeviceSwitchWarmSpareRequest updateDeviceSwitchWarmSpareRequest = null;
        Object response = api.updateDeviceSwitchWarmSpare_0(serial, updateDeviceSwitchWarmSpareRequest);
        // TODO: test validations
    }

    /**
     * Update the bluetooth settings for a wireless device
     *
     * Update the bluetooth settings for a wireless device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeviceWirelessBluetoothSettings_0Test() throws ApiException {
        String serial = null;
        UpdateDeviceWirelessBluetoothSettingsRequest updateDeviceWirelessBluetoothSettingsRequest = null;
        GetDeviceWirelessBluetoothSettings200Response response = api.updateDeviceWirelessBluetoothSettings_0(serial, updateDeviceWirelessBluetoothSettingsRequest);
        // TODO: test validations
    }

    /**
     * Update the radio settings of a device
     *
     * Update the radio settings of a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeviceWirelessRadioSettings_0Test() throws ApiException {
        String serial = null;
        UpdateDeviceWirelessRadioSettingsRequest updateDeviceWirelessRadioSettingsRequest = null;
        Object response = api.updateDeviceWirelessRadioSettings_0(serial, updateDeviceWirelessRadioSettingsRequest);
        // TODO: test validations
    }

    /**
     * Update the attributes of a device
     *
     * Update the attributes of a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDevice_0Test() throws ApiException {
        String serial = null;
        UpdateDeviceRequest updateDeviceRequest = null;
        Object response = api.updateDevice_0(serial, updateDeviceRequest);
        // TODO: test validations
    }

    /**
     * Update the alert configuration for this network
     *
     * Update the alert configuration for this network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkAlertsSettings_0Test() throws ApiException {
        String networkId = null;
        UpdateNetworkAlertsSettingsRequest updateNetworkAlertsSettingsRequest = null;
        Object response = api.updateNetworkAlertsSettings_0(networkId, updateNetworkAlertsSettingsRequest);
        // TODO: test validations
    }

    /**
     * Update the connectivity testing destinations for an MX network
     *
     * Update the connectivity testing destinations for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceConnectivityMonitoringDestinations_0Test() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceConnectivityMonitoringDestinationsRequest updateNetworkApplianceConnectivityMonitoringDestinationsRequest = null;
        Object response = api.updateNetworkApplianceConnectivityMonitoringDestinations_0(networkId, updateNetworkApplianceConnectivityMonitoringDestinationsRequest);
        // TODO: test validations
    }

    /**
     * Update the content filtering settings for an MX network
     *
     * Update the content filtering settings for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceContentFiltering_0Test() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceContentFilteringRequest updateNetworkApplianceContentFilteringRequest = null;
        Object response = api.updateNetworkApplianceContentFiltering_0(networkId, updateNetworkApplianceContentFilteringRequest);
        // TODO: test validations
    }

    /**
     * Update the cellular firewall rules of an MX network
     *
     * Update the cellular firewall rules of an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceFirewallCellularFirewallRules_0Test() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceFirewallCellularFirewallRulesRequest updateNetworkApplianceFirewallCellularFirewallRulesRequest = null;
        Object response = api.updateNetworkApplianceFirewallCellularFirewallRules_0(networkId, updateNetworkApplianceFirewallCellularFirewallRulesRequest);
        // TODO: test validations
    }

    /**
     * Updates the accessibility settings for the given service (&#39;ICMP&#39;, &#39;web&#39;, or &#39;SNMP&#39;)
     *
     * Updates the accessibility settings for the given service (&#39;ICMP&#39;, &#39;web&#39;, or &#39;SNMP&#39;)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceFirewallFirewalledService_0Test() throws ApiException {
        String networkId = null;
        String service = null;
        UpdateNetworkApplianceFirewallFirewalledServiceRequest updateNetworkApplianceFirewallFirewalledServiceRequest = null;
        Object response = api.updateNetworkApplianceFirewallFirewalledService_0(networkId, service, updateNetworkApplianceFirewallFirewalledServiceRequest);
        // TODO: test validations
    }

    /**
     * Update the inbound cellular firewall rules of an MX network
     *
     * Update the inbound cellular firewall rules of an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceFirewallInboundCellularFirewallRules_0Test() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceFirewallCellularFirewallRulesRequest updateNetworkApplianceFirewallCellularFirewallRulesRequest = null;
        List<Object> response = api.updateNetworkApplianceFirewallInboundCellularFirewallRules_0(networkId, updateNetworkApplianceFirewallCellularFirewallRulesRequest);
        // TODO: test validations
    }

    /**
     * Update the inbound firewall rules of an MX network
     *
     * Update the inbound firewall rules of an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceFirewallInboundFirewallRules_0Test() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceFirewallInboundFirewallRulesRequest updateNetworkApplianceFirewallInboundFirewallRulesRequest = null;
        Object response = api.updateNetworkApplianceFirewallInboundFirewallRules_0(networkId, updateNetworkApplianceFirewallInboundFirewallRulesRequest);
        // TODO: test validations
    }

    /**
     * Update the L3 firewall rules of an MX network
     *
     * Update the L3 firewall rules of an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceFirewallL3FirewallRules_0Test() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceFirewallInboundFirewallRulesRequest updateNetworkApplianceFirewallInboundFirewallRulesRequest = null;
        Object response = api.updateNetworkApplianceFirewallL3FirewallRules_0(networkId, updateNetworkApplianceFirewallInboundFirewallRulesRequest);
        // TODO: test validations
    }

    /**
     * Update the MX L7 firewall rules for an MX network
     *
     * Update the MX L7 firewall rules for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceFirewallL7FirewallRules_0Test() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceFirewallL7FirewallRulesRequest updateNetworkApplianceFirewallL7FirewallRulesRequest = null;
        Object response = api.updateNetworkApplianceFirewallL7FirewallRules_0(networkId, updateNetworkApplianceFirewallL7FirewallRulesRequest);
        // TODO: test validations
    }

    /**
     * Set the 1:Many NAT mapping rules for an MX network
     *
     * Set the 1:Many NAT mapping rules for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceFirewallOneToManyNatRules_0Test() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceFirewallOneToManyNatRulesRequest updateNetworkApplianceFirewallOneToManyNatRulesRequest = null;
        Object response = api.updateNetworkApplianceFirewallOneToManyNatRules_0(networkId, updateNetworkApplianceFirewallOneToManyNatRulesRequest);
        // TODO: test validations
    }

    /**
     * Set the 1:1 NAT mapping rules for an MX network
     *
     * Set the 1:1 NAT mapping rules for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceFirewallOneToOneNatRules_0Test() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceFirewallOneToOneNatRulesRequest updateNetworkApplianceFirewallOneToOneNatRulesRequest = null;
        Object response = api.updateNetworkApplianceFirewallOneToOneNatRules_0(networkId, updateNetworkApplianceFirewallOneToOneNatRulesRequest);
        // TODO: test validations
    }

    /**
     * Update the port forwarding rules for an MX network
     *
     * Update the port forwarding rules for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceFirewallPortForwardingRules_0Test() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceFirewallPortForwardingRulesRequest updateNetworkApplianceFirewallPortForwardingRulesRequest = null;
        Object response = api.updateNetworkApplianceFirewallPortForwardingRules_0(networkId, updateNetworkApplianceFirewallPortForwardingRulesRequest);
        // TODO: test validations
    }

    /**
     * Update the firewall settings for this network
     *
     * Update the firewall settings for this network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceFirewallSettings_0Test() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceFirewallSettingsRequest updateNetworkApplianceFirewallSettingsRequest = null;
        Object response = api.updateNetworkApplianceFirewallSettings_0(networkId, updateNetworkApplianceFirewallSettingsRequest);
        // TODO: test validations
    }

    /**
     * Update the per-port VLAN settings for a single MX port.
     *
     * Update the per-port VLAN settings for a single MX port.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkAppliancePort_0Test() throws ApiException {
        String networkId = null;
        String portId = null;
        UpdateNetworkAppliancePortRequest updateNetworkAppliancePortRequest = null;
        GetNetworkAppliancePorts200ResponseInner response = api.updateNetworkAppliancePort_0(networkId, portId, updateNetworkAppliancePortRequest);
        // TODO: test validations
    }

    /**
     * Update a static delegated prefix from a network
     *
     * Update a static delegated prefix from a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkAppliancePrefixesDelegatedStatic_0Test() throws ApiException {
        String networkId = null;
        String staticDelegatedPrefixId = null;
        UpdateNetworkAppliancePrefixesDelegatedStaticRequest updateNetworkAppliancePrefixesDelegatedStaticRequest = null;
        Object response = api.updateNetworkAppliancePrefixesDelegatedStatic_0(networkId, staticDelegatedPrefixId, updateNetworkAppliancePrefixesDelegatedStaticRequest);
        // TODO: test validations
    }

    /**
     * Set the supported intrusion settings for an MX network
     *
     * Set the supported intrusion settings for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceSecurityIntrusion_0Test() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceSecurityIntrusionRequest updateNetworkApplianceSecurityIntrusionRequest = null;
        Object response = api.updateNetworkApplianceSecurityIntrusion_0(networkId, updateNetworkApplianceSecurityIntrusionRequest);
        // TODO: test validations
    }

    /**
     * Set the supported malware settings for an MX network
     *
     * Set the supported malware settings for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceSecurityMalware_0Test() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceSecurityMalwareRequest updateNetworkApplianceSecurityMalwareRequest = null;
        Object response = api.updateNetworkApplianceSecurityMalware_0(networkId, updateNetworkApplianceSecurityMalwareRequest);
        // TODO: test validations
    }

    /**
     * Update the appliance settings for a network
     *
     * Update the appliance settings for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceSettings_0Test() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceSettingsRequest updateNetworkApplianceSettingsRequest = null;
        GetNetworkApplianceSettings200Response response = api.updateNetworkApplianceSettings_0(networkId, updateNetworkApplianceSettingsRequest);
        // TODO: test validations
    }

    /**
     * Update single LAN configuration
     *
     * Update single LAN configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceSingleLan_0Test() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceSingleLanRequest updateNetworkApplianceSingleLanRequest = null;
        GetNetworkApplianceSingleLan200Response response = api.updateNetworkApplianceSingleLan_0(networkId, updateNetworkApplianceSingleLanRequest);
        // TODO: test validations
    }

    /**
     * Update the attributes of an MX SSID
     *
     * Update the attributes of an MX SSID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceSsid_0Test() throws ApiException {
        String networkId = null;
        String number = null;
        UpdateNetworkApplianceSsidRequest updateNetworkApplianceSsidRequest = null;
        GetNetworkApplianceSsids200ResponseInner response = api.updateNetworkApplianceSsid_0(networkId, number, updateNetworkApplianceSsidRequest);
        // TODO: test validations
    }

    /**
     * Update a static route for an MX or teleworker network
     *
     * Update a static route for an MX or teleworker network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceStaticRoute_0Test() throws ApiException {
        String networkId = null;
        String staticRouteId = null;
        UpdateNetworkApplianceStaticRouteRequest updateNetworkApplianceStaticRouteRequest = null;
        Object response = api.updateNetworkApplianceStaticRoute_0(networkId, staticRouteId, updateNetworkApplianceStaticRouteRequest);
        // TODO: test validations
    }

    /**
     * Update a custom performance class for an MX network
     *
     * Update a custom performance class for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceTrafficShapingCustomPerformanceClass_0Test() throws ApiException {
        String networkId = null;
        String customPerformanceClassId = null;
        UpdateNetworkApplianceTrafficShapingCustomPerformanceClassRequest updateNetworkApplianceTrafficShapingCustomPerformanceClassRequest = null;
        Object response = api.updateNetworkApplianceTrafficShapingCustomPerformanceClass_0(networkId, customPerformanceClassId, updateNetworkApplianceTrafficShapingCustomPerformanceClassRequest);
        // TODO: test validations
    }

    /**
     * Update the traffic shaping settings rules for an MX network
     *
     * Update the traffic shaping settings rules for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceTrafficShapingRules_0Test() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceTrafficShapingRulesRequest updateNetworkApplianceTrafficShapingRulesRequest = null;
        Object response = api.updateNetworkApplianceTrafficShapingRules_0(networkId, updateNetworkApplianceTrafficShapingRulesRequest);
        // TODO: test validations
    }

    /**
     * Updates the uplink bandwidth settings for your MX network.
     *
     * Updates the uplink bandwidth settings for your MX network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceTrafficShapingUplinkBandwidth_0Test() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceTrafficShapingUplinkBandwidthRequest updateNetworkApplianceTrafficShapingUplinkBandwidthRequest = null;
        Object response = api.updateNetworkApplianceTrafficShapingUplinkBandwidth_0(networkId, updateNetworkApplianceTrafficShapingUplinkBandwidthRequest);
        // TODO: test validations
    }

    /**
     * Update uplink selection settings for an MX network
     *
     * Update uplink selection settings for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceTrafficShapingUplinkSelection_0Test() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest updateNetworkApplianceTrafficShapingUplinkSelectionRequest = null;
        GetNetworkApplianceTrafficShapingUplinkSelection200Response response = api.updateNetworkApplianceTrafficShapingUplinkSelection_0(networkId, updateNetworkApplianceTrafficShapingUplinkSelectionRequest);
        // TODO: test validations
    }

    /**
     * Update the traffic shaping settings for an MX network
     *
     * Update the traffic shaping settings for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceTrafficShaping_0Test() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceTrafficShapingRequest updateNetworkApplianceTrafficShapingRequest = null;
        Object response = api.updateNetworkApplianceTrafficShaping_0(networkId, updateNetworkApplianceTrafficShapingRequest);
        // TODO: test validations
    }

    /**
     * Update a VLAN
     *
     * Update a VLAN
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceVlan_0Test() throws ApiException {
        String networkId = null;
        String vlanId = null;
        UpdateNetworkApplianceVlanRequest updateNetworkApplianceVlanRequest = null;
        GetNetworkApplianceVlans200ResponseInner response = api.updateNetworkApplianceVlan_0(networkId, vlanId, updateNetworkApplianceVlanRequest);
        // TODO: test validations
    }

    /**
     * Enable/Disable VLANs for the given network
     *
     * Enable/Disable VLANs for the given network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceVlansSettings_0Test() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceVlansSettingsRequest updateNetworkApplianceVlansSettingsRequest = null;
        Object response = api.updateNetworkApplianceVlansSettings_0(networkId, updateNetworkApplianceVlansSettingsRequest);
        // TODO: test validations
    }

    /**
     * Update a Hub BGP Configuration
     *
     * Update a Hub BGP Configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceVpnBgp_0Test() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceVpnBgpRequest updateNetworkApplianceVpnBgpRequest = null;
        Object response = api.updateNetworkApplianceVpnBgp_0(networkId, updateNetworkApplianceVpnBgpRequest);
        // TODO: test validations
    }

    /**
     * Update the site-to-site VPN settings of a network
     *
     * Update the site-to-site VPN settings of a network. Only valid for MX networks in NAT mode.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceVpnSiteToSiteVpn_0Test() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceVpnSiteToSiteVpnRequest updateNetworkApplianceVpnSiteToSiteVpnRequest = null;
        GetNetworkApplianceVpnSiteToSiteVpn200Response response = api.updateNetworkApplianceVpnSiteToSiteVpn_0(networkId, updateNetworkApplianceVpnSiteToSiteVpnRequest);
        // TODO: test validations
    }

    /**
     * Update MX warm spare settings
     *
     * Update MX warm spare settings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceWarmSpare_0Test() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceWarmSpareRequest updateNetworkApplianceWarmSpareRequest = null;
        Object response = api.updateNetworkApplianceWarmSpare_0(networkId, updateNetworkApplianceWarmSpareRequest);
        // TODO: test validations
    }

    /**
     * Update an existing quality retention profile for this network.
     *
     * Update an existing quality retention profile for this network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkCameraQualityRetentionProfile_0Test() throws ApiException {
        String networkId = null;
        String qualityRetentionProfileId = null;
        UpdateNetworkCameraQualityRetentionProfileRequest updateNetworkCameraQualityRetentionProfileRequest = null;
        Object response = api.updateNetworkCameraQualityRetentionProfile_0(networkId, qualityRetentionProfileId, updateNetworkCameraQualityRetentionProfileRequest);
        // TODO: test validations
    }

    /**
     * Update an existing camera wireless profile in this network.
     *
     * Update an existing camera wireless profile in this network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkCameraWirelessProfile_0Test() throws ApiException {
        String networkId = null;
        String wirelessProfileId = null;
        UpdateNetworkCameraWirelessProfileRequest updateNetworkCameraWirelessProfileRequest = null;
        Object response = api.updateNetworkCameraWirelessProfile_0(networkId, wirelessProfileId, updateNetworkCameraWirelessProfileRequest);
        // TODO: test validations
    }

    /**
     * Update the connectivity testing destinations for an MG network
     *
     * Update the connectivity testing destinations for an MG network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkCellularGatewayConnectivityMonitoringDestinations_0Test() throws ApiException {
        String networkId = null;
        UpdateNetworkCellularGatewayConnectivityMonitoringDestinationsRequest updateNetworkCellularGatewayConnectivityMonitoringDestinationsRequest = null;
        Object response = api.updateNetworkCellularGatewayConnectivityMonitoringDestinations_0(networkId, updateNetworkCellularGatewayConnectivityMonitoringDestinationsRequest);
        // TODO: test validations
    }

    /**
     * Update common DHCP settings of MGs
     *
     * Update common DHCP settings of MGs
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkCellularGatewayDhcp_0Test() throws ApiException {
        String networkId = null;
        UpdateNetworkCellularGatewayDhcpRequest updateNetworkCellularGatewayDhcpRequest = null;
        GetNetworkCellularGatewayDhcp200Response response = api.updateNetworkCellularGatewayDhcp_0(networkId, updateNetworkCellularGatewayDhcpRequest);
        // TODO: test validations
    }

    /**
     * Update the subnet pool and mask configuration for MGs in the network.
     *
     * Update the subnet pool and mask configuration for MGs in the network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkCellularGatewaySubnetPool_0Test() throws ApiException {
        String networkId = null;
        UpdateNetworkCellularGatewaySubnetPoolRequest updateNetworkCellularGatewaySubnetPoolRequest = null;
        Object response = api.updateNetworkCellularGatewaySubnetPool_0(networkId, updateNetworkCellularGatewaySubnetPoolRequest);
        // TODO: test validations
    }

    /**
     * Updates the uplink settings for your MG network.
     *
     * Updates the uplink settings for your MG network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkCellularGatewayUplink_0Test() throws ApiException {
        String networkId = null;
        UpdateNetworkCellularGatewayUplinkRequest updateNetworkCellularGatewayUplinkRequest = null;
        Object response = api.updateNetworkCellularGatewayUplink_0(networkId, updateNetworkCellularGatewayUplinkRequest);
        // TODO: test validations
    }

    /**
     * Update the policy assigned to a client on the network
     *
     * Update the policy assigned to a client on the network. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkClientPolicy_0Test() throws ApiException {
        String networkId = null;
        String clientId = null;
        UpdateNetworkClientPolicyRequest updateNetworkClientPolicyRequest = null;
        Object response = api.updateNetworkClientPolicy_0(networkId, clientId, updateNetworkClientPolicyRequest);
        // TODO: test validations
    }

    /**
     * Update a client&#39;s splash authorization
     *
     * Update a client&#39;s splash authorization. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkClientSplashAuthorizationStatus_0Test() throws ApiException {
        String networkId = null;
        String clientId = null;
        UpdateNetworkClientSplashAuthorizationStatusRequest updateNetworkClientSplashAuthorizationStatusRequest = null;
        Object response = api.updateNetworkClientSplashAuthorizationStatus_0(networkId, clientId, updateNetworkClientSplashAuthorizationStatusRequest);
        // TODO: test validations
    }

    /**
     * Update the Staged Upgrade Event for a network
     *
     * Update the Staged Upgrade Event for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkFirmwareUpgradesStagedEvents_0Test() throws ApiException {
        String networkId = null;
        UpdateNetworkFirmwareUpgradesStagedEventsRequest updateNetworkFirmwareUpgradesStagedEventsRequest = null;
        GetNetworkFirmwareUpgradesStagedEvents200Response response = api.updateNetworkFirmwareUpgradesStagedEvents_0(networkId, updateNetworkFirmwareUpgradesStagedEventsRequest);
        // TODO: test validations
    }

    /**
     * Update a Staged Upgrade Group for a network
     *
     * Update a Staged Upgrade Group for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkFirmwareUpgradesStagedGroup_0Test() throws ApiException {
        String networkId = null;
        String groupId = null;
        CreateNetworkFirmwareUpgradesStagedGroupRequest createNetworkFirmwareUpgradesStagedGroupRequest = null;
        Object response = api.updateNetworkFirmwareUpgradesStagedGroup_0(networkId, groupId, createNetworkFirmwareUpgradesStagedGroupRequest);
        // TODO: test validations
    }

    /**
     * Assign Staged Upgrade Group order in the sequence.
     *
     * Assign Staged Upgrade Group order in the sequence.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkFirmwareUpgradesStagedStages_0Test() throws ApiException {
        String networkId = null;
        UpdateNetworkFirmwareUpgradesStagedStagesRequest updateNetworkFirmwareUpgradesStagedStagesRequest = null;
        List<GetNetworkFirmwareUpgradesStagedStages200ResponseInner> response = api.updateNetworkFirmwareUpgradesStagedStages_0(networkId, updateNetworkFirmwareUpgradesStagedStagesRequest);
        // TODO: test validations
    }

    /**
     * Update firmware upgrade information for a network
     *
     * Update firmware upgrade information for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkFirmwareUpgrades_0Test() throws ApiException {
        String networkId = null;
        UpdateNetworkFirmwareUpgradesRequest updateNetworkFirmwareUpgradesRequest = null;
        GetNetworkFirmwareUpgrades200Response response = api.updateNetworkFirmwareUpgrades_0(networkId, updateNetworkFirmwareUpgradesRequest);
        // TODO: test validations
    }

    /**
     * Update a floor plan&#39;s geolocation and other meta data
     *
     * Update a floor plan&#39;s geolocation and other meta data
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkFloorPlan_0Test() throws ApiException {
        String networkId = null;
        String floorPlanId = null;
        UpdateNetworkFloorPlanRequest updateNetworkFloorPlanRequest = null;
        Object response = api.updateNetworkFloorPlan_0(networkId, floorPlanId, updateNetworkFloorPlanRequest);
        // TODO: test validations
    }

    /**
     * Update a group policy
     *
     * Update a group policy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkGroupPolicy_0Test() throws ApiException {
        String networkId = null;
        String groupPolicyId = null;
        UpdateNetworkGroupPolicyRequest updateNetworkGroupPolicyRequest = null;
        Object response = api.updateNetworkGroupPolicy_0(networkId, groupPolicyId, updateNetworkGroupPolicyRequest);
        // TODO: test validations
    }

    /**
     * Update a user configured with Meraki Authentication (currently, 802.1X RADIUS, splash guest, and client VPN users can be updated)
     *
     * Update a user configured with Meraki Authentication (currently, 802.1X RADIUS, splash guest, and client VPN users can be updated)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkMerakiAuthUser_0Test() throws ApiException {
        String networkId = null;
        String merakiAuthUserId = null;
        UpdateNetworkMerakiAuthUserRequest updateNetworkMerakiAuthUserRequest = null;
        GetNetworkMerakiAuthUsers200ResponseInner response = api.updateNetworkMerakiAuthUser_0(networkId, merakiAuthUserId, updateNetworkMerakiAuthUserRequest);
        // TODO: test validations
    }

    /**
     * Update an MQTT broker
     *
     * Update an MQTT broker
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkMqttBroker_0Test() throws ApiException {
        String networkId = null;
        String mqttBrokerId = null;
        UpdateNetworkMqttBrokerRequest updateNetworkMqttBrokerRequest = null;
        Object response = api.updateNetworkMqttBroker_0(networkId, mqttBrokerId, updateNetworkMqttBrokerRequest);
        // TODO: test validations
    }

    /**
     * Update the NetFlow traffic reporting settings for a network
     *
     * Update the NetFlow traffic reporting settings for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkNetflow_0Test() throws ApiException {
        String networkId = null;
        UpdateNetworkNetflowRequest updateNetworkNetflowRequest = null;
        Object response = api.updateNetworkNetflow_0(networkId, updateNetworkNetflowRequest);
        // TODO: test validations
    }

    /**
     * Updates a sensor alert profile for a network.
     *
     * Updates a sensor alert profile for a network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSensorAlertsProfile_0Test() throws ApiException {
        String networkId = null;
        String id = null;
        UpdateNetworkSensorAlertsProfileRequest updateNetworkSensorAlertsProfileRequest = null;
        GetNetworkSensorAlertsProfiles200ResponseInner response = api.updateNetworkSensorAlertsProfile_0(networkId, id, updateNetworkSensorAlertsProfileRequest);
        // TODO: test validations
    }

    /**
     * Update the settings for a network
     *
     * Update the settings for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSettings_0Test() throws ApiException {
        String networkId = null;
        UpdateNetworkSettingsRequest updateNetworkSettingsRequest = null;
        GetNetworkSettings200Response response = api.updateNetworkSettings_0(networkId, updateNetworkSettingsRequest);
        // TODO: test validations
    }

    /**
     * Modify the fields of a device
     *
     * Modify the fields of a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSmDevicesFields_0Test() throws ApiException {
        String networkId = null;
        UpdateNetworkSmDevicesFieldsRequest updateNetworkSmDevicesFieldsRequest = null;
        List<UpdateNetworkSmDevicesFields200ResponseInner> response = api.updateNetworkSmDevicesFields_0(networkId, updateNetworkSmDevicesFieldsRequest);
        // TODO: test validations
    }

    /**
     * Update a target group
     *
     * Update a target group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSmTargetGroup_0Test() throws ApiException {
        String networkId = null;
        String targetGroupId = null;
        CreateNetworkSmTargetGroupRequest createNetworkSmTargetGroupRequest = null;
        Object response = api.updateNetworkSmTargetGroup_0(networkId, targetGroupId, createNetworkSmTargetGroupRequest);
        // TODO: test validations
    }

    /**
     * Update the SNMP settings for a network
     *
     * Update the SNMP settings for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSnmp_0Test() throws ApiException {
        String networkId = null;
        UpdateNetworkSnmpRequest updateNetworkSnmpRequest = null;
        Object response = api.updateNetworkSnmp_0(networkId, updateNetworkSnmpRequest);
        // TODO: test validations
    }

    /**
     * Update the access control lists for a MS network
     *
     * Update the access control lists for a MS network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSwitchAccessControlLists_0Test() throws ApiException {
        String networkId = null;
        UpdateNetworkSwitchAccessControlListsRequest updateNetworkSwitchAccessControlListsRequest = null;
        GetNetworkSwitchAccessControlLists200Response response = api.updateNetworkSwitchAccessControlLists_0(networkId, updateNetworkSwitchAccessControlListsRequest);
        // TODO: test validations
    }

    /**
     * Update an access policy for a switch network
     *
     * Update an access policy for a switch network. If you would like to enable Meraki Authentication, set radiusServers to empty array.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSwitchAccessPolicy_0Test() throws ApiException {
        String networkId = null;
        String accessPolicyNumber = null;
        UpdateNetworkSwitchAccessPolicyRequest updateNetworkSwitchAccessPolicyRequest = null;
        GetNetworkSwitchAccessPolicies200ResponseInner response = api.updateNetworkSwitchAccessPolicy_0(networkId, accessPolicyNumber, updateNetworkSwitchAccessPolicyRequest);
        // TODO: test validations
    }

    /**
     * Update the switch alternate management interface for the network
     *
     * Update the switch alternate management interface for the network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSwitchAlternateManagementInterface_0Test() throws ApiException {
        String networkId = null;
        UpdateNetworkSwitchAlternateManagementInterfaceRequest updateNetworkSwitchAlternateManagementInterfaceRequest = null;
        Object response = api.updateNetworkSwitchAlternateManagementInterface_0(networkId, updateNetworkSwitchAlternateManagementInterfaceRequest);
        // TODO: test validations
    }

    /**
     * Update a server that is trusted by Dynamic ARP Inspection on this network
     *
     * Update a server that is trusted by Dynamic ARP Inspection on this network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_0Test() throws ApiException {
        String networkId = null;
        String trustedServerId = null;
        UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest = null;
        GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner response = api.updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_0(networkId, trustedServerId, updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest);
        // TODO: test validations
    }

    /**
     * Update the DHCP server settings
     *
     * Update the DHCP server settings. Blocked/allowed servers are only applied when default policy is allow/block, respectively
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSwitchDhcpServerPolicy_0Test() throws ApiException {
        String networkId = null;
        UpdateNetworkSwitchDhcpServerPolicyRequest updateNetworkSwitchDhcpServerPolicyRequest = null;
        Object response = api.updateNetworkSwitchDhcpServerPolicy_0(networkId, updateNetworkSwitchDhcpServerPolicyRequest);
        // TODO: test validations
    }

    /**
     * Update the DSCP to CoS mappings
     *
     * Update the DSCP to CoS mappings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSwitchDscpToCosMappings_0Test() throws ApiException {
        String networkId = null;
        UpdateNetworkSwitchDscpToCosMappingsRequest updateNetworkSwitchDscpToCosMappingsRequest = null;
        Object response = api.updateNetworkSwitchDscpToCosMappings_0(networkId, updateNetworkSwitchDscpToCosMappingsRequest);
        // TODO: test validations
    }

    /**
     * Update a link aggregation group
     *
     * Update a link aggregation group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSwitchLinkAggregation_0Test() throws ApiException {
        String networkId = null;
        String linkAggregationId = null;
        UpdateNetworkSwitchLinkAggregationRequest updateNetworkSwitchLinkAggregationRequest = null;
        Object response = api.updateNetworkSwitchLinkAggregation_0(networkId, linkAggregationId, updateNetworkSwitchLinkAggregationRequest);
        // TODO: test validations
    }

    /**
     * Update the MTU configuration
     *
     * Update the MTU configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSwitchMtu_0Test() throws ApiException {
        String networkId = null;
        UpdateNetworkSwitchMtuRequest updateNetworkSwitchMtuRequest = null;
        Object response = api.updateNetworkSwitchMtu_0(networkId, updateNetworkSwitchMtuRequest);
        // TODO: test validations
    }

    /**
     * Update a switch port schedule
     *
     * Update a switch port schedule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSwitchPortSchedule_0Test() throws ApiException {
        String networkId = null;
        String portScheduleId = null;
        UpdateNetworkSwitchPortScheduleRequest updateNetworkSwitchPortScheduleRequest = null;
        Object response = api.updateNetworkSwitchPortSchedule_0(networkId, portScheduleId, updateNetworkSwitchPortScheduleRequest);
        // TODO: test validations
    }

    /**
     * Update a quality of service rule
     *
     * Update a quality of service rule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSwitchQosRule_0Test() throws ApiException {
        String networkId = null;
        String qosRuleId = null;
        UpdateNetworkSwitchQosRuleRequest updateNetworkSwitchQosRuleRequest = null;
        Object response = api.updateNetworkSwitchQosRule_0(networkId, qosRuleId, updateNetworkSwitchQosRuleRequest);
        // TODO: test validations
    }

    /**
     * Update the order in which the rules should be processed by the switch
     *
     * Update the order in which the rules should be processed by the switch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSwitchQosRulesOrder_0Test() throws ApiException {
        String networkId = null;
        UpdateNetworkSwitchQosRulesOrderRequest updateNetworkSwitchQosRulesOrderRequest = null;
        Object response = api.updateNetworkSwitchQosRulesOrder_0(networkId, updateNetworkSwitchQosRulesOrderRequest);
        // TODO: test validations
    }

    /**
     * Update a multicast rendezvous point
     *
     * Update a multicast rendezvous point
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSwitchRoutingMulticastRendezvousPoint_0Test() throws ApiException {
        String networkId = null;
        String rendezvousPointId = null;
        UpdateNetworkSwitchRoutingMulticastRendezvousPointRequest updateNetworkSwitchRoutingMulticastRendezvousPointRequest = null;
        Object response = api.updateNetworkSwitchRoutingMulticastRendezvousPoint_0(networkId, rendezvousPointId, updateNetworkSwitchRoutingMulticastRendezvousPointRequest);
        // TODO: test validations
    }

    /**
     * Update multicast settings for a network
     *
     * Update multicast settings for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSwitchRoutingMulticast_0Test() throws ApiException {
        String networkId = null;
        UpdateNetworkSwitchRoutingMulticastRequest updateNetworkSwitchRoutingMulticastRequest = null;
        Object response = api.updateNetworkSwitchRoutingMulticast_0(networkId, updateNetworkSwitchRoutingMulticastRequest);
        // TODO: test validations
    }

    /**
     * Update layer 3 OSPF routing configuration
     *
     * Update layer 3 OSPF routing configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSwitchRoutingOspf_0Test() throws ApiException {
        String networkId = null;
        UpdateNetworkSwitchRoutingOspfRequest updateNetworkSwitchRoutingOspfRequest = null;
        Object response = api.updateNetworkSwitchRoutingOspf_0(networkId, updateNetworkSwitchRoutingOspfRequest);
        // TODO: test validations
    }

    /**
     * Update switch network settings
     *
     * Update switch network settings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSwitchSettings_0Test() throws ApiException {
        String networkId = null;
        UpdateNetworkSwitchSettingsRequest updateNetworkSwitchSettingsRequest = null;
        GetNetworkSwitchSettings200Response response = api.updateNetworkSwitchSettings_0(networkId, updateNetworkSwitchSettingsRequest);
        // TODO: test validations
    }

    /**
     * Update a layer 3 interface DHCP configuration for a switch stack
     *
     * Update a layer 3 interface DHCP configuration for a switch stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSwitchStackRoutingInterfaceDhcp_0Test() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        String interfaceId = null;
        UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest updateNetworkSwitchStackRoutingInterfaceDhcpRequest = null;
        Object response = api.updateNetworkSwitchStackRoutingInterfaceDhcp_0(networkId, switchStackId, interfaceId, updateNetworkSwitchStackRoutingInterfaceDhcpRequest);
        // TODO: test validations
    }

    /**
     * Update a layer 3 interface for a switch stack
     *
     * Update a layer 3 interface for a switch stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSwitchStackRoutingInterface_0Test() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        String interfaceId = null;
        UpdateNetworkSwitchStackRoutingInterfaceRequest updateNetworkSwitchStackRoutingInterfaceRequest = null;
        Object response = api.updateNetworkSwitchStackRoutingInterface_0(networkId, switchStackId, interfaceId, updateNetworkSwitchStackRoutingInterfaceRequest);
        // TODO: test validations
    }

    /**
     * Update a layer 3 static route for a switch stack
     *
     * Update a layer 3 static route for a switch stack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSwitchStackRoutingStaticRoute_0Test() throws ApiException {
        String networkId = null;
        String switchStackId = null;
        String staticRouteId = null;
        UpdateDeviceSwitchRoutingStaticRouteRequest updateDeviceSwitchRoutingStaticRouteRequest = null;
        Object response = api.updateNetworkSwitchStackRoutingStaticRoute_0(networkId, switchStackId, staticRouteId, updateDeviceSwitchRoutingStaticRouteRequest);
        // TODO: test validations
    }

    /**
     * Update the storm control configuration for a switch network
     *
     * Update the storm control configuration for a switch network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSwitchStormControl_0Test() throws ApiException {
        String networkId = null;
        UpdateNetworkSwitchStormControlRequest updateNetworkSwitchStormControlRequest = null;
        Object response = api.updateNetworkSwitchStormControl_0(networkId, updateNetworkSwitchStormControlRequest);
        // TODO: test validations
    }

    /**
     * Updates STP settings
     *
     * Updates STP settings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSwitchStp_0Test() throws ApiException {
        String networkId = null;
        UpdateNetworkSwitchStpRequest updateNetworkSwitchStpRequest = null;
        Object response = api.updateNetworkSwitchStp_0(networkId, updateNetworkSwitchStpRequest);
        // TODO: test validations
    }

    /**
     * Update the syslog servers for a network
     *
     * Update the syslog servers for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSyslogServers_0Test() throws ApiException {
        String networkId = null;
        UpdateNetworkSyslogServersRequest updateNetworkSyslogServersRequest = null;
        GetNetworkSyslogServers200Response response = api.updateNetworkSyslogServers_0(networkId, updateNetworkSyslogServersRequest);
        // TODO: test validations
    }

    /**
     * Update the traffic analysis settings for a network
     *
     * Update the traffic analysis settings for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkTrafficAnalysis_0Test() throws ApiException {
        String networkId = null;
        UpdateNetworkTrafficAnalysisRequest updateNetworkTrafficAnalysisRequest = null;
        Object response = api.updateNetworkTrafficAnalysis_0(networkId, updateNetworkTrafficAnalysisRequest);
        // TODO: test validations
    }

    /**
     * Update an HTTP server
     *
     * Update an HTTP server. To change a URL, create a new HTTP server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkWebhooksHttpServer_0Test() throws ApiException {
        String networkId = null;
        String httpServerId = null;
        UpdateNetworkWebhooksHttpServerRequest updateNetworkWebhooksHttpServerRequest = null;
        GetNetworkWebhooksHttpServers200ResponseInner response = api.updateNetworkWebhooksHttpServer_0(networkId, httpServerId, updateNetworkWebhooksHttpServerRequest);
        // TODO: test validations
    }

    /**
     * Update a webhook payload template for a network
     *
     * Update a webhook payload template for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkWebhooksPayloadTemplate_0Test() throws ApiException {
        String networkId = null;
        String payloadTemplateId = null;
        UpdateNetworkWebhooksPayloadTemplateRequest updateNetworkWebhooksPayloadTemplateRequest = null;
        GetNetworkWebhooksPayloadTemplates200ResponseInner response = api.updateNetworkWebhooksPayloadTemplate_0(networkId, payloadTemplateId, updateNetworkWebhooksPayloadTemplateRequest);
        // TODO: test validations
    }

    /**
     * Update alternate management interface and device static IP
     *
     * Update alternate management interface and device static IP
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkWirelessAlternateManagementInterface_0Test() throws ApiException {
        String networkId = null;
        UpdateNetworkWirelessAlternateManagementInterfaceRequest updateNetworkWirelessAlternateManagementInterfaceRequest = null;
        Object response = api.updateNetworkWirelessAlternateManagementInterface_0(networkId, updateNetworkWirelessAlternateManagementInterfaceRequest);
        // TODO: test validations
    }

    /**
     * Update the billing settings
     *
     * Update the billing settings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkWirelessBilling_0Test() throws ApiException {
        String networkId = null;
        UpdateNetworkWirelessBillingRequest updateNetworkWirelessBillingRequest = null;
        Object response = api.updateNetworkWirelessBilling_0(networkId, updateNetworkWirelessBillingRequest);
        // TODO: test validations
    }

    /**
     * Update the Bluetooth settings for a network
     *
     * Update the Bluetooth settings for a network. See the docs page for &lt;a href&#x3D;\&quot;https://documentation.meraki.com/MR/Bluetooth/Bluetooth_Low_Energy_(BLE)\&quot;&gt;Bluetooth settings&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkWirelessBluetoothSettings_0Test() throws ApiException {
        String networkId = null;
        UpdateNetworkWirelessBluetoothSettingsRequest updateNetworkWirelessBluetoothSettingsRequest = null;
        GetNetworkWirelessBluetoothSettings200Response response = api.updateNetworkWirelessBluetoothSettings_0(networkId, updateNetworkWirelessBluetoothSettingsRequest);
        // TODO: test validations
    }

    /**
     * Updates specified RF profile for this network
     *
     * Updates specified RF profile for this network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkWirelessRfProfile_0Test() throws ApiException {
        String networkId = null;
        String rfProfileId = null;
        UpdateNetworkWirelessRfProfileRequest updateNetworkWirelessRfProfileRequest = null;
        CreateNetworkWirelessRfProfile201Response response = api.updateNetworkWirelessRfProfile_0(networkId, rfProfileId, updateNetworkWirelessRfProfileRequest);
        // TODO: test validations
    }

    /**
     * Update the wireless settings for a network
     *
     * Update the wireless settings for a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkWirelessSettings_0Test() throws ApiException {
        String networkId = null;
        UpdateNetworkWirelessSettingsRequest updateNetworkWirelessSettingsRequest = null;
        GetNetworkWirelessSettings200Response response = api.updateNetworkWirelessSettings_0(networkId, updateNetworkWirelessSettingsRequest);
        // TODO: test validations
    }

    /**
     * Update the bonjour forwarding setting and rules for the SSID
     *
     * Update the bonjour forwarding setting and rules for the SSID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkWirelessSsidBonjourForwarding_0Test() throws ApiException {
        String networkId = null;
        String number = null;
        UpdateNetworkWirelessSsidBonjourForwardingRequest updateNetworkWirelessSsidBonjourForwardingRequest = null;
        Object response = api.updateNetworkWirelessSsidBonjourForwarding_0(networkId, number, updateNetworkWirelessSsidBonjourForwardingRequest);
        // TODO: test validations
    }

    /**
     * Update the device type group policies for the SSID
     *
     * Update the device type group policies for the SSID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkWirelessSsidDeviceTypeGroupPolicies_0Test() throws ApiException {
        String networkId = null;
        String number = null;
        UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesRequest updateNetworkWirelessSsidDeviceTypeGroupPoliciesRequest = null;
        Object response = api.updateNetworkWirelessSsidDeviceTypeGroupPolicies_0(networkId, number, updateNetworkWirelessSsidDeviceTypeGroupPoliciesRequest);
        // TODO: test validations
    }

    /**
     * Update the EAP overridden parameters for an SSID.
     *
     * Update the EAP overridden parameters for an SSID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkWirelessSsidEapOverride_0Test() throws ApiException {
        String networkId = null;
        String number = null;
        UpdateNetworkWirelessSsidEapOverrideRequest updateNetworkWirelessSsidEapOverrideRequest = null;
        GetNetworkWirelessSsidEapOverride200Response response = api.updateNetworkWirelessSsidEapOverride_0(networkId, number, updateNetworkWirelessSsidEapOverrideRequest);
        // TODO: test validations
    }

    /**
     * Update the L3 firewall rules of an SSID on an MR network
     *
     * Update the L3 firewall rules of an SSID on an MR network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkWirelessSsidFirewallL3FirewallRules_0Test() throws ApiException {
        String networkId = null;
        String number = null;
        UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequest updateNetworkWirelessSsidFirewallL3FirewallRulesRequest = null;
        Object response = api.updateNetworkWirelessSsidFirewallL3FirewallRules_0(networkId, number, updateNetworkWirelessSsidFirewallL3FirewallRulesRequest);
        // TODO: test validations
    }

    /**
     * Update the L7 firewall rules of an SSID on an MR network
     *
     * Update the L7 firewall rules of an SSID on an MR network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkWirelessSsidFirewallL7FirewallRules_0Test() throws ApiException {
        String networkId = null;
        String number = null;
        UpdateNetworkWirelessSsidFirewallL7FirewallRulesRequest updateNetworkWirelessSsidFirewallL7FirewallRulesRequest = null;
        Object response = api.updateNetworkWirelessSsidFirewallL7FirewallRules_0(networkId, number, updateNetworkWirelessSsidFirewallL7FirewallRulesRequest);
        // TODO: test validations
    }

    /**
     * Update the Hotspot 2.0 settings of an SSID
     *
     * Update the Hotspot 2.0 settings of an SSID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkWirelessSsidHotspot20_0Test() throws ApiException {
        String networkId = null;
        String number = null;
        UpdateNetworkWirelessSsidHotspot20Request updateNetworkWirelessSsidHotspot20Request = null;
        Object response = api.updateNetworkWirelessSsidHotspot20_0(networkId, number, updateNetworkWirelessSsidHotspot20Request);
        // TODO: test validations
    }

    /**
     * Update an Identity PSK
     *
     * Update an Identity PSK
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkWirelessSsidIdentityPsk_0Test() throws ApiException {
        String networkId = null;
        String number = null;
        String identityPskId = null;
        UpdateNetworkWirelessSsidIdentityPskRequest updateNetworkWirelessSsidIdentityPskRequest = null;
        Object response = api.updateNetworkWirelessSsidIdentityPsk_0(networkId, number, identityPskId, updateNetworkWirelessSsidIdentityPskRequest);
        // TODO: test validations
    }

    /**
     * Update the outage schedule for the SSID
     *
     * Update the outage schedule for the SSID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkWirelessSsidSchedules_0Test() throws ApiException {
        String networkId = null;
        String number = null;
        UpdateNetworkWirelessSsidSchedulesRequest updateNetworkWirelessSsidSchedulesRequest = null;
        Object response = api.updateNetworkWirelessSsidSchedules_0(networkId, number, updateNetworkWirelessSsidSchedulesRequest);
        // TODO: test validations
    }

    /**
     * Modify the splash page settings for the given SSID
     *
     * Modify the splash page settings for the given SSID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkWirelessSsidSplashSettings_0Test() throws ApiException {
        String networkId = null;
        String number = null;
        UpdateNetworkWirelessSsidSplashSettingsRequest updateNetworkWirelessSsidSplashSettingsRequest = null;
        GetNetworkWirelessSsidSplashSettings200Response response = api.updateNetworkWirelessSsidSplashSettings_0(networkId, number, updateNetworkWirelessSsidSplashSettingsRequest);
        // TODO: test validations
    }

    /**
     * Update the traffic shaping settings for an SSID on an MR network
     *
     * Update the traffic shaping settings for an SSID on an MR network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkWirelessSsidTrafficShapingRules_0Test() throws ApiException {
        String networkId = null;
        String number = null;
        UpdateNetworkWirelessSsidTrafficShapingRulesRequest updateNetworkWirelessSsidTrafficShapingRulesRequest = null;
        Object response = api.updateNetworkWirelessSsidTrafficShapingRules_0(networkId, number, updateNetworkWirelessSsidTrafficShapingRulesRequest);
        // TODO: test validations
    }

    /**
     * Update the VPN settings for the SSID
     *
     * Update the VPN settings for the SSID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkWirelessSsidVpn_0Test() throws ApiException {
        String networkId = null;
        String number = null;
        UpdateNetworkWirelessSsidVpnRequest updateNetworkWirelessSsidVpnRequest = null;
        Object response = api.updateNetworkWirelessSsidVpn_0(networkId, number, updateNetworkWirelessSsidVpnRequest);
        // TODO: test validations
    }

    /**
     * Update the attributes of an MR SSID
     *
     * Update the attributes of an MR SSID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkWirelessSsid_0Test() throws ApiException {
        String networkId = null;
        String number = null;
        UpdateNetworkWirelessSsidRequest updateNetworkWirelessSsidRequest = null;
        Object response = api.updateNetworkWirelessSsid_0(networkId, number, updateNetworkWirelessSsidRequest);
        // TODO: test validations
    }

    /**
     * Update a network
     *
     * Update a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetwork_0Test() throws ApiException {
        String networkId = null;
        UpdateNetworkRequest updateNetworkRequest = null;
        GetNetwork200Response response = api.updateNetwork_0(networkId, updateNetworkRequest);
        // TODO: test validations
    }

    /**
     * Update an action batch
     *
     * Update an action batch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationActionBatch_0Test() throws ApiException {
        String organizationId = null;
        String actionBatchId = null;
        UpdateOrganizationActionBatchRequest updateOrganizationActionBatchRequest = null;
        Object response = api.updateOrganizationActionBatch_0(organizationId, actionBatchId, updateOrganizationActionBatchRequest);
        // TODO: test validations
    }

    /**
     * Updates an adaptive policy ACL
     *
     * Updates an adaptive policy ACL
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationAdaptivePolicyAcl_0Test() throws ApiException {
        String organizationId = null;
        String aclId = null;
        UpdateOrganizationAdaptivePolicyAclRequest updateOrganizationAdaptivePolicyAclRequest = null;
        Object response = api.updateOrganizationAdaptivePolicyAcl_0(organizationId, aclId, updateOrganizationAdaptivePolicyAclRequest);
        // TODO: test validations
    }

    /**
     * Updates an adaptive policy group
     *
     * Updates an adaptive policy group. If updating \&quot;Infrastructure\&quot;, only the SGT is allowed. Cannot update \&quot;Unknown\&quot;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationAdaptivePolicyGroup_0Test() throws ApiException {
        String organizationId = null;
        String id = null;
        UpdateOrganizationAdaptivePolicyGroupRequest updateOrganizationAdaptivePolicyGroupRequest = null;
        Object response = api.updateOrganizationAdaptivePolicyGroup_0(organizationId, id, updateOrganizationAdaptivePolicyGroupRequest);
        // TODO: test validations
    }

    /**
     * Update an Adaptive Policy
     *
     * Update an Adaptive Policy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationAdaptivePolicyPolicy_0Test() throws ApiException {
        String organizationId = null;
        String id = null;
        UpdateOrganizationAdaptivePolicyPolicyRequest updateOrganizationAdaptivePolicyPolicyRequest = null;
        Object response = api.updateOrganizationAdaptivePolicyPolicy_0(organizationId, id, updateOrganizationAdaptivePolicyPolicyRequest);
        // TODO: test validations
    }

    /**
     * Update global adaptive policy settings
     *
     * Update global adaptive policy settings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationAdaptivePolicySettings_0Test() throws ApiException {
        String organizationId = null;
        UpdateOrganizationAdaptivePolicySettingsRequest updateOrganizationAdaptivePolicySettingsRequest = null;
        Object response = api.updateOrganizationAdaptivePolicySettings_0(organizationId, updateOrganizationAdaptivePolicySettingsRequest);
        // TODO: test validations
    }

    /**
     * Update an administrator
     *
     * Update an administrator
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationAdmin_0Test() throws ApiException {
        String organizationId = null;
        String adminId = null;
        UpdateOrganizationAdminRequest updateOrganizationAdminRequest = null;
        Object response = api.updateOrganizationAdmin_0(organizationId, adminId, updateOrganizationAdminRequest);
        // TODO: test validations
    }

    /**
     * Update an organization-wide alert config
     *
     * Update an organization-wide alert config
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationAlertsProfile_0Test() throws ApiException {
        String organizationId = null;
        String alertConfigId = null;
        UpdateOrganizationAlertsProfileRequest updateOrganizationAlertsProfileRequest = null;
        Object response = api.updateOrganizationAlertsProfile_0(organizationId, alertConfigId, updateOrganizationAlertsProfileRequest);
        // TODO: test validations
    }

    /**
     * Sets supported intrusion settings for an organization
     *
     * Sets supported intrusion settings for an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationApplianceSecurityIntrusion_0Test() throws ApiException {
        String organizationId = null;
        UpdateOrganizationApplianceSecurityIntrusionRequest updateOrganizationApplianceSecurityIntrusionRequest = null;
        Object response = api.updateOrganizationApplianceSecurityIntrusion_0(organizationId, updateOrganizationApplianceSecurityIntrusionRequest);
        // TODO: test validations
    }

    /**
     * Update the third party VPN peers for an organization
     *
     * Update the third party VPN peers for an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationApplianceVpnThirdPartyVPNPeers_0Test() throws ApiException {
        String organizationId = null;
        UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequest updateOrganizationApplianceVpnThirdPartyVPNPeersRequest = null;
        GetOrganizationApplianceVpnThirdPartyVPNPeers200Response response = api.updateOrganizationApplianceVpnThirdPartyVPNPeers_0(organizationId, updateOrganizationApplianceVpnThirdPartyVPNPeersRequest);
        // TODO: test validations
    }

    /**
     * Update the firewall rules of an organization&#39;s site-to-site VPN
     *
     * Update the firewall rules of an organization&#39;s site-to-site VPN
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationApplianceVpnVpnFirewallRules_0Test() throws ApiException {
        String organizationId = null;
        UpdateOrganizationApplianceVpnVpnFirewallRulesRequest updateOrganizationApplianceVpnVpnFirewallRulesRequest = null;
        Object response = api.updateOrganizationApplianceVpnVpnFirewallRules_0(organizationId, updateOrganizationApplianceVpnVpnFirewallRulesRequest);
        // TODO: test validations
    }

    /**
     * Update the priority ordering of an organization&#39;s branding policies.
     *
     * Update the priority ordering of an organization&#39;s branding policies.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationBrandingPoliciesPriorities_0Test() throws ApiException {
        String organizationId = null;
        UpdateOrganizationBrandingPoliciesPrioritiesRequest updateOrganizationBrandingPoliciesPrioritiesRequest = null;
        GetOrganizationBrandingPoliciesPriorities200Response response = api.updateOrganizationBrandingPoliciesPriorities_0(organizationId, updateOrganizationBrandingPoliciesPrioritiesRequest);
        // TODO: test validations
    }

    /**
     * Update a branding policy
     *
     * Update a branding policy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationBrandingPolicy_0Test() throws ApiException {
        String organizationId = null;
        String brandingPolicyId = null;
        UpdateOrganizationBrandingPolicyRequest updateOrganizationBrandingPolicyRequest = null;
        GetOrganizationBrandingPolicies200ResponseInner response = api.updateOrganizationBrandingPolicy_0(organizationId, brandingPolicyId, updateOrganizationBrandingPolicyRequest);
        // TODO: test validations
    }

    /**
     * Notify that credential handoff to camera has completed
     *
     * Notify that credential handoff to camera has completed
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationCameraOnboardingStatuses_0Test() throws ApiException {
        String organizationId = null;
        UpdateOrganizationCameraOnboardingStatusesRequest updateOrganizationCameraOnboardingStatusesRequest = null;
        Object response = api.updateOrganizationCameraOnboardingStatuses_0(organizationId, updateOrganizationCameraOnboardingStatusesRequest);
        // TODO: test validations
    }

    /**
     * Update a switch profile port
     *
     * Update a switch profile port
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationConfigTemplateSwitchProfilePort_0Test() throws ApiException {
        String organizationId = null;
        String configTemplateId = null;
        String profileId = null;
        String portId = null;
        UpdateOrganizationConfigTemplateSwitchProfilePortRequest updateOrganizationConfigTemplateSwitchProfilePortRequest = null;
        GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner response = api.updateOrganizationConfigTemplateSwitchProfilePort_0(organizationId, configTemplateId, profileId, portId, updateOrganizationConfigTemplateSwitchProfilePortRequest);
        // TODO: test validations
    }

    /**
     * Update a configuration template
     *
     * Update a configuration template
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationConfigTemplate_0Test() throws ApiException {
        String organizationId = null;
        String configTemplateId = null;
        UpdateOrganizationConfigTemplateRequest updateOrganizationConfigTemplateRequest = null;
        Object response = api.updateOrganizationConfigTemplate_0(organizationId, configTemplateId, updateOrganizationConfigTemplateRequest);
        // TODO: test validations
    }

    /**
     * Update an early access feature opt-in for an organization
     *
     * Update an early access feature opt-in for an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationEarlyAccessFeaturesOptIn_0Test() throws ApiException {
        String organizationId = null;
        String optInId = null;
        UpdateOrganizationEarlyAccessFeaturesOptInRequest updateOrganizationEarlyAccessFeaturesOptInRequest = null;
        Object response = api.updateOrganizationEarlyAccessFeaturesOptIn_0(organizationId, optInId, updateOrganizationEarlyAccessFeaturesOptInRequest);
        // TODO: test validations
    }

    /**
     * Update a monitored media server for this organization
     *
     * Update a monitored media server for this organization. Only valid for organizations with Meraki Insight.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationInsightMonitoredMediaServer_0Test() throws ApiException {
        String organizationId = null;
        String monitoredMediaServerId = null;
        UpdateOrganizationInsightMonitoredMediaServerRequest updateOrganizationInsightMonitoredMediaServerRequest = null;
        Object response = api.updateOrganizationInsightMonitoredMediaServer_0(organizationId, monitoredMediaServerId, updateOrganizationInsightMonitoredMediaServerRequest);
        // TODO: test validations
    }

    /**
     * Update a license
     *
     * Update a license
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationLicense_0Test() throws ApiException {
        String organizationId = null;
        String licenseId = null;
        UpdateOrganizationLicenseRequest updateOrganizationLicenseRequest = null;
        GetOrganizationLicenses200ResponseInner response = api.updateOrganizationLicense_0(organizationId, licenseId, updateOrganizationLicenseRequest);
        // TODO: test validations
    }

    /**
     * Update the login security settings for an organization
     *
     * Update the login security settings for an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationLoginSecurity_0Test() throws ApiException {
        String organizationId = null;
        UpdateOrganizationLoginSecurityRequest updateOrganizationLoginSecurityRequest = null;
        GetOrganizationLoginSecurity200Response response = api.updateOrganizationLoginSecurity_0(organizationId, updateOrganizationLoginSecurityRequest);
        // TODO: test validations
    }

    /**
     * Updates a Policy Object.
     *
     * Updates a Policy Object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationPolicyObject_0Test() throws ApiException {
        String organizationId = null;
        String policyObjectId = null;
        UpdateOrganizationPolicyObjectRequest updateOrganizationPolicyObjectRequest = null;
        Object response = api.updateOrganizationPolicyObject_0(organizationId, policyObjectId, updateOrganizationPolicyObjectRequest);
        // TODO: test validations
    }

    /**
     * Updates a Policy Object Group.
     *
     * Updates a Policy Object Group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationPolicyObjectsGroup_0Test() throws ApiException {
        String organizationId = null;
        String policyObjectGroupId = null;
        UpdateOrganizationPolicyObjectsGroupRequest updateOrganizationPolicyObjectsGroupRequest = null;
        Object response = api.updateOrganizationPolicyObjectsGroup_0(organizationId, policyObjectGroupId, updateOrganizationPolicyObjectsGroupRequest);
        // TODO: test validations
    }

    /**
     * Update a SAML IdP in your organization
     *
     * Update a SAML IdP in your organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationSamlIdp_0Test() throws ApiException {
        String organizationId = null;
        String idpId = null;
        UpdateOrganizationSamlIdpRequest updateOrganizationSamlIdpRequest = null;
        List<GetOrganizationSamlIdps200ResponseInner> response = api.updateOrganizationSamlIdp_0(organizationId, idpId, updateOrganizationSamlIdpRequest);
        // TODO: test validations
    }

    /**
     * Update a SAML role
     *
     * Update a SAML role
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationSamlRole_0Test() throws ApiException {
        String organizationId = null;
        String samlRoleId = null;
        UpdateOrganizationSamlRoleRequest updateOrganizationSamlRoleRequest = null;
        UpdateOrganizationSamlRole200Response response = api.updateOrganizationSamlRole_0(organizationId, samlRoleId, updateOrganizationSamlRoleRequest);
        // TODO: test validations
    }

    /**
     * Updates the SAML SSO enabled settings for an organization.
     *
     * Updates the SAML SSO enabled settings for an organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationSaml_0Test() throws ApiException {
        String organizationId = null;
        UpdateOrganizationSamlRequest updateOrganizationSamlRequest = null;
        GetOrganizationSaml200Response response = api.updateOrganizationSaml_0(organizationId, updateOrganizationSamlRequest);
        // TODO: test validations
    }

    /**
     * Update the SNMP settings for an organization
     *
     * Update the SNMP settings for an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationSnmp_0Test() throws ApiException {
        String organizationId = null;
        UpdateOrganizationSnmpRequest updateOrganizationSnmpRequest = null;
        Object response = api.updateOrganizationSnmp_0(organizationId, updateOrganizationSnmpRequest);
        // TODO: test validations
    }

    /**
     * Update an organization
     *
     * Update an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganization_0Test() throws ApiException {
        String organizationId = null;
        UpdateOrganizationRequest updateOrganizationRequest = null;
        GetOrganizations200ResponseInner response = api.updateOrganization_0(organizationId, updateOrganizationRequest);
        // TODO: test validations
    }

    /**
     * Claim a vMX into a network
     *
     * Claim a vMX into a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vmxNetworkDevicesClaim_0Test() throws ApiException {
        String networkId = null;
        VmxNetworkDevicesClaimRequest vmxNetworkDevicesClaimRequest = null;
        Object response = api.vmxNetworkDevicesClaim_0(networkId, vmxNetworkDevicesClaimRequest);
        // TODO: test validations
    }

    /**
     * Wipe a device
     *
     * Wipe a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void wipeNetworkSmDevices_0Test() throws ApiException {
        String networkId = null;
        WipeNetworkSmDevicesRequest wipeNetworkSmDevicesRequest = null;
        WipeNetworkSmDevices200Response response = api.wipeNetworkSmDevices_0(networkId, wipeNetworkSmDevicesRequest);
        // TODO: test validations
    }

}
