/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateOrganizationInsightMonitoredMediaServerRequest;
import org.openapitools.client.model.GetOrganizationInsightMonitoredMediaServers200ResponseInner;
import org.openapitools.client.model.UpdateOrganizationInsightMonitoredMediaServerRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MonitoredMediaServersApi
 */
@Disabled
public class MonitoredMediaServersApiTest {

    private final MonitoredMediaServersApi api = new MonitoredMediaServersApi();

    /**
     * Add a media server to be monitored for this organization
     *
     * Add a media server to be monitored for this organization. Only valid for organizations with Meraki Insight.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationInsightMonitoredMediaServer_1Test() throws ApiException {
        String organizationId = null;
        CreateOrganizationInsightMonitoredMediaServerRequest createOrganizationInsightMonitoredMediaServerRequest = null;
        Object response = api.createOrganizationInsightMonitoredMediaServer_1(organizationId, createOrganizationInsightMonitoredMediaServerRequest);
        // TODO: test validations
    }

    /**
     * Delete a monitored media server from this organization
     *
     * Delete a monitored media server from this organization. Only valid for organizations with Meraki Insight.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganizationInsightMonitoredMediaServer_1Test() throws ApiException {
        String organizationId = null;
        String monitoredMediaServerId = null;
        api.deleteOrganizationInsightMonitoredMediaServer_1(organizationId, monitoredMediaServerId);
        // TODO: test validations
    }

    /**
     * Return a monitored media server for this organization
     *
     * Return a monitored media server for this organization. Only valid for organizations with Meraki Insight.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationInsightMonitoredMediaServer_1Test() throws ApiException {
        String organizationId = null;
        String monitoredMediaServerId = null;
        Object response = api.getOrganizationInsightMonitoredMediaServer_1(organizationId, monitoredMediaServerId);
        // TODO: test validations
    }

    /**
     * List the monitored media servers for this organization
     *
     * List the monitored media servers for this organization. Only valid for organizations with Meraki Insight.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationInsightMonitoredMediaServers_1Test() throws ApiException {
        String organizationId = null;
        List<GetOrganizationInsightMonitoredMediaServers200ResponseInner> response = api.getOrganizationInsightMonitoredMediaServers_1(organizationId);
        // TODO: test validations
    }

    /**
     * Update a monitored media server for this organization
     *
     * Update a monitored media server for this organization. Only valid for organizations with Meraki Insight.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationInsightMonitoredMediaServer_1Test() throws ApiException {
        String organizationId = null;
        String monitoredMediaServerId = null;
        UpdateOrganizationInsightMonitoredMediaServerRequest updateOrganizationInsightMonitoredMediaServerRequest = null;
        Object response = api.updateOrganizationInsightMonitoredMediaServer_1(organizationId, monitoredMediaServerId, updateOrganizationInsightMonitoredMediaServerRequest);
        // TODO: test validations
    }

}
