/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateNetworkApplianceVlan201Response;
import org.openapitools.client.model.CreateNetworkApplianceVlanRequest;
import org.openapitools.client.model.GetNetworkApplianceVlans200ResponseInner;
import org.openapitools.client.model.UpdateNetworkApplianceVlanRequest;
import org.openapitools.client.model.UpdateNetworkApplianceVlansSettingsRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VlansApi
 */
@Disabled
public class VlansApiTest {

    private final VlansApi api = new VlansApi();

    /**
     * Add a VLAN
     *
     * Add a VLAN
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkApplianceVlan_1Test() throws ApiException {
        String networkId = null;
        CreateNetworkApplianceVlanRequest createNetworkApplianceVlanRequest = null;
        CreateNetworkApplianceVlan201Response response = api.createNetworkApplianceVlan_1(networkId, createNetworkApplianceVlanRequest);
        // TODO: test validations
    }

    /**
     * Delete a VLAN from a network
     *
     * Delete a VLAN from a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkApplianceVlan_1Test() throws ApiException {
        String networkId = null;
        String vlanId = null;
        api.deleteNetworkApplianceVlan_1(networkId, vlanId);
        // TODO: test validations
    }

    /**
     * Return a VLAN
     *
     * Return a VLAN
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceVlan_1Test() throws ApiException {
        String networkId = null;
        String vlanId = null;
        GetNetworkApplianceVlans200ResponseInner response = api.getNetworkApplianceVlan_1(networkId, vlanId);
        // TODO: test validations
    }

    /**
     * Returns the enabled status of VLANs for the network
     *
     * Returns the enabled status of VLANs for the network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceVlansSettings_1Test() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkApplianceVlansSettings_1(networkId);
        // TODO: test validations
    }

    /**
     * List the VLANs for an MX network
     *
     * List the VLANs for an MX network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceVlans_1Test() throws ApiException {
        String networkId = null;
        List<GetNetworkApplianceVlans200ResponseInner> response = api.getNetworkApplianceVlans_1(networkId);
        // TODO: test validations
    }

    /**
     * Update a VLAN
     *
     * Update a VLAN
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceVlan_1Test() throws ApiException {
        String networkId = null;
        String vlanId = null;
        UpdateNetworkApplianceVlanRequest updateNetworkApplianceVlanRequest = null;
        GetNetworkApplianceVlans200ResponseInner response = api.updateNetworkApplianceVlan_1(networkId, vlanId, updateNetworkApplianceVlanRequest);
        // TODO: test validations
    }

    /**
     * Enable/Disable VLANs for the given network
     *
     * Enable/Disable VLANs for the given network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceVlansSettings_1Test() throws ApiException {
        String networkId = null;
        UpdateNetworkApplianceVlansSettingsRequest updateNetworkApplianceVlansSettingsRequest = null;
        Object response = api.updateNetworkApplianceVlansSettings_1(networkId, updateNetworkApplianceVlansSettingsRequest);
        // TODO: test validations
    }

}
