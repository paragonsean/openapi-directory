/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest;
import org.openapitools.client.model.GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner;
import org.openapitools.client.model.UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TrustedServersApi
 */
@Disabled
public class TrustedServersApiTest {

    private final TrustedServersApi api = new TrustedServersApi();

    /**
     * Add a server to be trusted by Dynamic ARP Inspection on this network
     *
     * Add a server to be trusted by Dynamic ARP Inspection on this network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_3Test() throws ApiException {
        String networkId = null;
        CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest = null;
        GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner response = api.createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_3(networkId, createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest);
        // TODO: test validations
    }

    /**
     * Remove a server from being trusted by Dynamic ARP Inspection on this network
     *
     * Remove a server from being trusted by Dynamic ARP Inspection on this network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_3Test() throws ApiException {
        String networkId = null;
        String trustedServerId = null;
        api.deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_3(networkId, trustedServerId);
        // TODO: test validations
    }

    /**
     * Return the list of servers trusted by Dynamic ARP Inspection on this network
     *
     * Return the list of servers trusted by Dynamic ARP Inspection on this network. These are also known as whitelisted snoop entries
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_3Test() throws ApiException {
        String networkId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner> response = api.getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_3(networkId, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * Update a server that is trusted by Dynamic ARP Inspection on this network
     *
     * Update a server that is trusted by Dynamic ARP Inspection on this network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_3Test() throws ApiException {
        String networkId = null;
        String trustedServerId = null;
        UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest = null;
        GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner response = api.updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_3(networkId, trustedServerId, updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest);
        // TODO: test validations
    }

}
