/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateNetworkWirelessSsidIdentityPskRequest;
import org.openapitools.client.model.GetNetworkApplianceSsids200ResponseInner;
import org.openapitools.client.model.GetNetworkWirelessSsidEapOverride200Response;
import org.openapitools.client.model.GetNetworkWirelessSsidIdentityPsks200ResponseInner;
import org.openapitools.client.model.GetNetworkWirelessSsidSplashSettings200Response;
import org.openapitools.client.model.GetOrganizationSummaryTopSsidsByUsage200ResponseInner;
import org.openapitools.client.model.UpdateNetworkApplianceSsidRequest;
import org.openapitools.client.model.UpdateNetworkWirelessSsidBonjourForwardingRequest;
import org.openapitools.client.model.UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesRequest;
import org.openapitools.client.model.UpdateNetworkWirelessSsidEapOverrideRequest;
import org.openapitools.client.model.UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequest;
import org.openapitools.client.model.UpdateNetworkWirelessSsidFirewallL7FirewallRulesRequest;
import org.openapitools.client.model.UpdateNetworkWirelessSsidHotspot20Request;
import org.openapitools.client.model.UpdateNetworkWirelessSsidIdentityPskRequest;
import org.openapitools.client.model.UpdateNetworkWirelessSsidRequest;
import org.openapitools.client.model.UpdateNetworkWirelessSsidSchedulesRequest;
import org.openapitools.client.model.UpdateNetworkWirelessSsidSplashSettingsRequest;
import org.openapitools.client.model.UpdateNetworkWirelessSsidTrafficShapingRulesRequest;
import org.openapitools.client.model.UpdateNetworkWirelessSsidVpnRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SsidsApi
 */
@Disabled
public class SsidsApiTest {

    private final SsidsApi api = new SsidsApi();

    /**
     * Create an Identity PSK
     *
     * Create an Identity PSK
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkWirelessSsidIdentityPsk_1Test() throws ApiException {
        String networkId = null;
        String number = null;
        CreateNetworkWirelessSsidIdentityPskRequest createNetworkWirelessSsidIdentityPskRequest = null;
        Object response = api.createNetworkWirelessSsidIdentityPsk_1(networkId, number, createNetworkWirelessSsidIdentityPskRequest);
        // TODO: test validations
    }

    /**
     * Delete an Identity PSK
     *
     * Delete an Identity PSK
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkWirelessSsidIdentityPsk_1Test() throws ApiException {
        String networkId = null;
        String number = null;
        String identityPskId = null;
        api.deleteNetworkWirelessSsidIdentityPsk_1(networkId, number, identityPskId);
        // TODO: test validations
    }

    /**
     * Return a single MX SSID
     *
     * Return a single MX SSID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceSsid_1Test() throws ApiException {
        String networkId = null;
        String number = null;
        GetNetworkApplianceSsids200ResponseInner response = api.getNetworkApplianceSsid_1(networkId, number);
        // TODO: test validations
    }

    /**
     * List the MX SSIDs in a network
     *
     * List the MX SSIDs in a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkApplianceSsids_1Test() throws ApiException {
        String networkId = null;
        List<GetNetworkApplianceSsids200ResponseInner> response = api.getNetworkApplianceSsids_1(networkId);
        // TODO: test validations
    }

    /**
     * List the Bonjour forwarding setting and rules for the SSID
     *
     * List the Bonjour forwarding setting and rules for the SSID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessSsidBonjourForwarding_1Test() throws ApiException {
        String networkId = null;
        String number = null;
        Object response = api.getNetworkWirelessSsidBonjourForwarding_1(networkId, number);
        // TODO: test validations
    }

    /**
     * List the device type group policies for the SSID
     *
     * List the device type group policies for the SSID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessSsidDeviceTypeGroupPolicies_1Test() throws ApiException {
        String networkId = null;
        String number = null;
        Object response = api.getNetworkWirelessSsidDeviceTypeGroupPolicies_1(networkId, number);
        // TODO: test validations
    }

    /**
     * Return the EAP overridden parameters for an SSID
     *
     * Return the EAP overridden parameters for an SSID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessSsidEapOverride_1Test() throws ApiException {
        String networkId = null;
        String number = null;
        GetNetworkWirelessSsidEapOverride200Response response = api.getNetworkWirelessSsidEapOverride_1(networkId, number);
        // TODO: test validations
    }

    /**
     * Return the L3 firewall rules for an SSID on an MR network
     *
     * Return the L3 firewall rules for an SSID on an MR network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessSsidFirewallL3FirewallRules_1Test() throws ApiException {
        String networkId = null;
        String number = null;
        Object response = api.getNetworkWirelessSsidFirewallL3FirewallRules_1(networkId, number);
        // TODO: test validations
    }

    /**
     * Return the L7 firewall rules for an SSID on an MR network
     *
     * Return the L7 firewall rules for an SSID on an MR network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessSsidFirewallL7FirewallRules_1Test() throws ApiException {
        String networkId = null;
        String number = null;
        Object response = api.getNetworkWirelessSsidFirewallL7FirewallRules_1(networkId, number);
        // TODO: test validations
    }

    /**
     * Return the Hotspot 2.0 settings for an SSID
     *
     * Return the Hotspot 2.0 settings for an SSID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessSsidHotspot20_1Test() throws ApiException {
        String networkId = null;
        String number = null;
        Object response = api.getNetworkWirelessSsidHotspot20_1(networkId, number);
        // TODO: test validations
    }

    /**
     * Return an Identity PSK
     *
     * Return an Identity PSK
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessSsidIdentityPsk_1Test() throws ApiException {
        String networkId = null;
        String number = null;
        String identityPskId = null;
        GetNetworkWirelessSsidIdentityPsks200ResponseInner response = api.getNetworkWirelessSsidIdentityPsk_1(networkId, number, identityPskId);
        // TODO: test validations
    }

    /**
     * List all Identity PSKs in a wireless network
     *
     * List all Identity PSKs in a wireless network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessSsidIdentityPsks_1Test() throws ApiException {
        String networkId = null;
        String number = null;
        List<GetNetworkWirelessSsidIdentityPsks200ResponseInner> response = api.getNetworkWirelessSsidIdentityPsks_1(networkId, number);
        // TODO: test validations
    }

    /**
     * List the outage schedule for the SSID
     *
     * List the outage schedule for the SSID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessSsidSchedules_1Test() throws ApiException {
        String networkId = null;
        String number = null;
        Object response = api.getNetworkWirelessSsidSchedules_1(networkId, number);
        // TODO: test validations
    }

    /**
     * Display the splash page settings for the given SSID
     *
     * Display the splash page settings for the given SSID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessSsidSplashSettings_1Test() throws ApiException {
        String networkId = null;
        String number = null;
        GetNetworkWirelessSsidSplashSettings200Response response = api.getNetworkWirelessSsidSplashSettings_1(networkId, number);
        // TODO: test validations
    }

    /**
     * Display the traffic shaping settings for a SSID on an MR network
     *
     * Display the traffic shaping settings for a SSID on an MR network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessSsidTrafficShapingRules_1Test() throws ApiException {
        String networkId = null;
        String number = null;
        Object response = api.getNetworkWirelessSsidTrafficShapingRules_1(networkId, number);
        // TODO: test validations
    }

    /**
     * List the VPN settings for the SSID.
     *
     * List the VPN settings for the SSID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessSsidVpn_1Test() throws ApiException {
        String networkId = null;
        String number = null;
        Object response = api.getNetworkWirelessSsidVpn_1(networkId, number);
        // TODO: test validations
    }

    /**
     * Return a single MR SSID
     *
     * Return a single MR SSID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessSsid_1Test() throws ApiException {
        String networkId = null;
        String number = null;
        Object response = api.getNetworkWirelessSsid_1(networkId, number);
        // TODO: test validations
    }

    /**
     * List the MR SSIDs in a network
     *
     * List the MR SSIDs in a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkWirelessSsids_1Test() throws ApiException {
        String networkId = null;
        List<Object> response = api.getNetworkWirelessSsids_1(networkId);
        // TODO: test validations
    }

    /**
     * Return metrics for organization&#39;s top 10 ssids by data usage over given time range
     *
     * Return metrics for organization&#39;s top 10 ssids by data usage over given time range. Default unit is megabytes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationSummaryTopSsidsByUsage_3Test() throws ApiException {
        String organizationId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        List<GetOrganizationSummaryTopSsidsByUsage200ResponseInner> response = api.getOrganizationSummaryTopSsidsByUsage_3(organizationId, t0, t1, timespan);
        // TODO: test validations
    }

    /**
     * Update the attributes of an MX SSID
     *
     * Update the attributes of an MX SSID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkApplianceSsid_1Test() throws ApiException {
        String networkId = null;
        String number = null;
        UpdateNetworkApplianceSsidRequest updateNetworkApplianceSsidRequest = null;
        GetNetworkApplianceSsids200ResponseInner response = api.updateNetworkApplianceSsid_1(networkId, number, updateNetworkApplianceSsidRequest);
        // TODO: test validations
    }

    /**
     * Update the bonjour forwarding setting and rules for the SSID
     *
     * Update the bonjour forwarding setting and rules for the SSID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkWirelessSsidBonjourForwarding_1Test() throws ApiException {
        String networkId = null;
        String number = null;
        UpdateNetworkWirelessSsidBonjourForwardingRequest updateNetworkWirelessSsidBonjourForwardingRequest = null;
        Object response = api.updateNetworkWirelessSsidBonjourForwarding_1(networkId, number, updateNetworkWirelessSsidBonjourForwardingRequest);
        // TODO: test validations
    }

    /**
     * Update the device type group policies for the SSID
     *
     * Update the device type group policies for the SSID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkWirelessSsidDeviceTypeGroupPolicies_1Test() throws ApiException {
        String networkId = null;
        String number = null;
        UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesRequest updateNetworkWirelessSsidDeviceTypeGroupPoliciesRequest = null;
        Object response = api.updateNetworkWirelessSsidDeviceTypeGroupPolicies_1(networkId, number, updateNetworkWirelessSsidDeviceTypeGroupPoliciesRequest);
        // TODO: test validations
    }

    /**
     * Update the EAP overridden parameters for an SSID.
     *
     * Update the EAP overridden parameters for an SSID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkWirelessSsidEapOverride_1Test() throws ApiException {
        String networkId = null;
        String number = null;
        UpdateNetworkWirelessSsidEapOverrideRequest updateNetworkWirelessSsidEapOverrideRequest = null;
        GetNetworkWirelessSsidEapOverride200Response response = api.updateNetworkWirelessSsidEapOverride_1(networkId, number, updateNetworkWirelessSsidEapOverrideRequest);
        // TODO: test validations
    }

    /**
     * Update the L3 firewall rules of an SSID on an MR network
     *
     * Update the L3 firewall rules of an SSID on an MR network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkWirelessSsidFirewallL3FirewallRules_1Test() throws ApiException {
        String networkId = null;
        String number = null;
        UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequest updateNetworkWirelessSsidFirewallL3FirewallRulesRequest = null;
        Object response = api.updateNetworkWirelessSsidFirewallL3FirewallRules_1(networkId, number, updateNetworkWirelessSsidFirewallL3FirewallRulesRequest);
        // TODO: test validations
    }

    /**
     * Update the L7 firewall rules of an SSID on an MR network
     *
     * Update the L7 firewall rules of an SSID on an MR network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkWirelessSsidFirewallL7FirewallRules_1Test() throws ApiException {
        String networkId = null;
        String number = null;
        UpdateNetworkWirelessSsidFirewallL7FirewallRulesRequest updateNetworkWirelessSsidFirewallL7FirewallRulesRequest = null;
        Object response = api.updateNetworkWirelessSsidFirewallL7FirewallRules_1(networkId, number, updateNetworkWirelessSsidFirewallL7FirewallRulesRequest);
        // TODO: test validations
    }

    /**
     * Update the Hotspot 2.0 settings of an SSID
     *
     * Update the Hotspot 2.0 settings of an SSID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkWirelessSsidHotspot20_1Test() throws ApiException {
        String networkId = null;
        String number = null;
        UpdateNetworkWirelessSsidHotspot20Request updateNetworkWirelessSsidHotspot20Request = null;
        Object response = api.updateNetworkWirelessSsidHotspot20_1(networkId, number, updateNetworkWirelessSsidHotspot20Request);
        // TODO: test validations
    }

    /**
     * Update an Identity PSK
     *
     * Update an Identity PSK
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkWirelessSsidIdentityPsk_1Test() throws ApiException {
        String networkId = null;
        String number = null;
        String identityPskId = null;
        UpdateNetworkWirelessSsidIdentityPskRequest updateNetworkWirelessSsidIdentityPskRequest = null;
        Object response = api.updateNetworkWirelessSsidIdentityPsk_1(networkId, number, identityPskId, updateNetworkWirelessSsidIdentityPskRequest);
        // TODO: test validations
    }

    /**
     * Update the outage schedule for the SSID
     *
     * Update the outage schedule for the SSID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkWirelessSsidSchedules_1Test() throws ApiException {
        String networkId = null;
        String number = null;
        UpdateNetworkWirelessSsidSchedulesRequest updateNetworkWirelessSsidSchedulesRequest = null;
        Object response = api.updateNetworkWirelessSsidSchedules_1(networkId, number, updateNetworkWirelessSsidSchedulesRequest);
        // TODO: test validations
    }

    /**
     * Modify the splash page settings for the given SSID
     *
     * Modify the splash page settings for the given SSID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkWirelessSsidSplashSettings_1Test() throws ApiException {
        String networkId = null;
        String number = null;
        UpdateNetworkWirelessSsidSplashSettingsRequest updateNetworkWirelessSsidSplashSettingsRequest = null;
        GetNetworkWirelessSsidSplashSettings200Response response = api.updateNetworkWirelessSsidSplashSettings_1(networkId, number, updateNetworkWirelessSsidSplashSettingsRequest);
        // TODO: test validations
    }

    /**
     * Update the traffic shaping settings for an SSID on an MR network
     *
     * Update the traffic shaping settings for an SSID on an MR network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkWirelessSsidTrafficShapingRules_1Test() throws ApiException {
        String networkId = null;
        String number = null;
        UpdateNetworkWirelessSsidTrafficShapingRulesRequest updateNetworkWirelessSsidTrafficShapingRulesRequest = null;
        Object response = api.updateNetworkWirelessSsidTrafficShapingRules_1(networkId, number, updateNetworkWirelessSsidTrafficShapingRulesRequest);
        // TODO: test validations
    }

    /**
     * Update the VPN settings for the SSID
     *
     * Update the VPN settings for the SSID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkWirelessSsidVpn_1Test() throws ApiException {
        String networkId = null;
        String number = null;
        UpdateNetworkWirelessSsidVpnRequest updateNetworkWirelessSsidVpnRequest = null;
        Object response = api.updateNetworkWirelessSsidVpn_1(networkId, number, updateNetworkWirelessSsidVpnRequest);
        // TODO: test validations
    }

    /**
     * Update the attributes of an MR SSID
     *
     * Update the attributes of an MR SSID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkWirelessSsid_1Test() throws ApiException {
        String networkId = null;
        String number = null;
        UpdateNetworkWirelessSsidRequest updateNetworkWirelessSsidRequest = null;
        Object response = api.updateNetworkWirelessSsid_1(networkId, number, updateNetworkWirelessSsidRequest);
        // TODO: test validations
    }

}
