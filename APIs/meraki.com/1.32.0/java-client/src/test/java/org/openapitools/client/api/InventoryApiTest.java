/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ClaimIntoOrganizationInventoryRequest;
import org.openapitools.client.model.CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest;
import org.openapitools.client.model.CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner;
import org.openapitools.client.model.CreateOrganizationInventoryOnboardingCloudMonitoringImportRequest;
import org.openapitools.client.model.CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner;
import org.openapitools.client.model.CreateOrganizationInventoryOnboardingCloudMonitoringPrepareRequest;
import org.openapitools.client.model.GetNetwork200Response;
import org.openapitools.client.model.GetOrganizationInventoryDevices200ResponseInner;
import org.openapitools.client.model.GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner;
import org.openapitools.client.model.ReleaseFromOrganizationInventoryRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for InventoryApi
 */
@Disabled
public class InventoryApiTest {

    private final InventoryApi api = new InventoryApi();

    /**
     * Claim a list of devices, licenses, and/or orders into an organization inventory
     *
     * Claim a list of devices, licenses, and/or orders into an organization inventory. When claiming by order, all devices and licenses in the order will be claimed; licenses will be added to the organization and devices will be placed in the organization&#39;s inventory. Use /organizations/{organizationId}/inventory/release to release devices from an organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void claimIntoOrganizationInventory_1Test() throws ApiException {
        String organizationId = null;
        ClaimIntoOrganizationInventoryRequest claimIntoOrganizationInventoryRequest = null;
        Object response = api.claimIntoOrganizationInventory_1(organizationId, claimIntoOrganizationInventoryRequest);
        // TODO: test validations
    }

    /**
     * Imports event logs related to the onboarding app into elastisearch
     *
     * Imports event logs related to the onboarding app into elastisearch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationInventoryOnboardingCloudMonitoringExportEvent_1Test() throws ApiException {
        String organizationId = null;
        CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest = null;
        Object response = api.createOrganizationInventoryOnboardingCloudMonitoringExportEvent_1(organizationId, createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest);
        // TODO: test validations
    }

    /**
     * Commits the import operation to complete the onboarding of a device into Dashboard for monitoring.
     *
     * Commits the import operation to complete the onboarding of a device into Dashboard for monitoring.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationInventoryOnboardingCloudMonitoringImport_1Test() throws ApiException {
        String organizationId = null;
        CreateOrganizationInventoryOnboardingCloudMonitoringImportRequest createOrganizationInventoryOnboardingCloudMonitoringImportRequest = null;
        List<CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner> response = api.createOrganizationInventoryOnboardingCloudMonitoringImport_1(organizationId, createOrganizationInventoryOnboardingCloudMonitoringImportRequest);
        // TODO: test validations
    }

    /**
     * Initiates or updates an import session
     *
     * Initiates or updates an import session. An import ID will be generated and used when you are ready to commit the import.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationInventoryOnboardingCloudMonitoringPrepare_1Test() throws ApiException {
        String organizationId = null;
        CreateOrganizationInventoryOnboardingCloudMonitoringPrepareRequest createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest = null;
        List<CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner> response = api.createOrganizationInventoryOnboardingCloudMonitoringPrepare_1(organizationId, createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest);
        // TODO: test validations
    }

    /**
     * Return a single device from the inventory of an organization
     *
     * Return a single device from the inventory of an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationInventoryDevice_1Test() throws ApiException {
        String organizationId = null;
        String serial = null;
        GetOrganizationInventoryDevices200ResponseInner response = api.getOrganizationInventoryDevice_1(organizationId, serial);
        // TODO: test validations
    }

    /**
     * Return the device inventory for an organization
     *
     * Return the device inventory for an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationInventoryDevices_1Test() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        String usedState = null;
        String search = null;
        List<String> macs = null;
        List<String> networkIds = null;
        List<String> serials = null;
        List<String> models = null;
        List<String> orderNumbers = null;
        List<String> tags = null;
        String tagsFilterType = null;
        List<String> productTypes = null;
        List<GetOrganizationInventoryDevices200ResponseInner> response = api.getOrganizationInventoryDevices_1(organizationId, perPage, startingAfter, endingBefore, usedState, search, macs, networkIds, serials, models, orderNumbers, tags, tagsFilterType, productTypes);
        // TODO: test validations
    }

    /**
     * Check the status of a committed Import operation
     *
     * Check the status of a committed Import operation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationInventoryOnboardingCloudMonitoringImports_1Test() throws ApiException {
        String organizationId = null;
        List<String> importIds = null;
        List<GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner> response = api.getOrganizationInventoryOnboardingCloudMonitoringImports_1(organizationId, importIds);
        // TODO: test validations
    }

    /**
     * Returns list of networks eligible for adding cloud monitored device
     *
     * Returns list of networks eligible for adding cloud monitored device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationInventoryOnboardingCloudMonitoringNetworks_1Test() throws ApiException {
        String organizationId = null;
        String deviceType = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<GetNetwork200Response> response = api.getOrganizationInventoryOnboardingCloudMonitoringNetworks_1(organizationId, deviceType, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * Release a list of claimed devices from an organization.
     *
     * Release a list of claimed devices from an organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void releaseFromOrganizationInventory_1Test() throws ApiException {
        String organizationId = null;
        ReleaseFromOrganizationInventoryRequest releaseFromOrganizationInventoryRequest = null;
        Object response = api.releaseFromOrganizationInventory_1(organizationId, releaseFromOrganizationInventoryRequest);
        // TODO: test validations
    }

}
