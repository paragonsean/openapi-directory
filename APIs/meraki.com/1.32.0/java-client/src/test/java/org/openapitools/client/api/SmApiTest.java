/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CheckinNetworkSmDevices200Response;
import org.openapitools.client.model.CheckinNetworkSmDevicesRequest;
import org.openapitools.client.model.CreateNetworkSmBypassActivationLockAttemptRequest;
import org.openapitools.client.model.CreateNetworkSmTargetGroupRequest;
import org.openapitools.client.model.GetNetworkSmDeviceCellularUsageHistory200ResponseInner;
import org.openapitools.client.model.GetNetworkSmDeviceCerts200ResponseInner;
import org.openapitools.client.model.GetNetworkSmDeviceConnectivity200ResponseInner;
import org.openapitools.client.model.GetNetworkSmDeviceDesktopLogs200ResponseInner;
import org.openapitools.client.model.GetNetworkSmDeviceDeviceCommandLogs200ResponseInner;
import org.openapitools.client.model.GetNetworkSmDeviceDeviceProfiles200ResponseInner;
import org.openapitools.client.model.GetNetworkSmDeviceNetworkAdapters200ResponseInner;
import org.openapitools.client.model.GetNetworkSmDevicePerformanceHistory200ResponseInner;
import org.openapitools.client.model.GetNetworkSmDeviceSecurityCenters200ResponseInner;
import org.openapitools.client.model.GetNetworkSmDeviceSoftwares200ResponseInner;
import org.openapitools.client.model.GetNetworkSmDeviceWlanLists200ResponseInner;
import org.openapitools.client.model.GetNetworkSmDevices200ResponseInner;
import org.openapitools.client.model.GetNetworkSmProfiles200ResponseInner;
import org.openapitools.client.model.GetNetworkSmTrustedAccessConfigs200ResponseInner;
import org.openapitools.client.model.GetNetworkSmUserAccessDevices200ResponseInner;
import org.openapitools.client.model.GetNetworkSmUsers200ResponseInner;
import org.openapitools.client.model.GetOrganizationSmApnsCert200Response;
import org.openapitools.client.model.GetOrganizationSmVppAccounts200ResponseInner;
import org.openapitools.client.model.LockNetworkSmDevicesRequest;
import org.openapitools.client.model.ModifyNetworkSmDevicesTags200ResponseInner;
import org.openapitools.client.model.ModifyNetworkSmDevicesTagsRequest;
import org.openapitools.client.model.MoveNetworkSmDevices200Response;
import org.openapitools.client.model.MoveNetworkSmDevicesRequest;
import org.openapitools.client.model.UpdateNetworkSmDevicesFields200ResponseInner;
import org.openapitools.client.model.UpdateNetworkSmDevicesFieldsRequest;
import org.openapitools.client.model.WipeNetworkSmDevices200Response;
import org.openapitools.client.model.WipeNetworkSmDevicesRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SmApi
 */
@Disabled
public class SmApiTest {

    private final SmApi api = new SmApi();

    /**
     * Force check-in a set of devices
     *
     * Force check-in a set of devices
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkinNetworkSmDevicesTest() throws ApiException {
        String networkId = null;
        CheckinNetworkSmDevicesRequest checkinNetworkSmDevicesRequest = null;
        CheckinNetworkSmDevices200Response response = api.checkinNetworkSmDevices(networkId, checkinNetworkSmDevicesRequest);
        // TODO: test validations
    }

    /**
     * Bypass activation lock attempt
     *
     * Bypass activation lock attempt
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkSmBypassActivationLockAttemptTest() throws ApiException {
        String networkId = null;
        CreateNetworkSmBypassActivationLockAttemptRequest createNetworkSmBypassActivationLockAttemptRequest = null;
        Object response = api.createNetworkSmBypassActivationLockAttempt(networkId, createNetworkSmBypassActivationLockAttemptRequest);
        // TODO: test validations
    }

    /**
     * Add a target group
     *
     * Add a target group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkSmTargetGroupTest() throws ApiException {
        String networkId = null;
        CreateNetworkSmTargetGroupRequest createNetworkSmTargetGroupRequest = null;
        Object response = api.createNetworkSmTargetGroup(networkId, createNetworkSmTargetGroupRequest);
        // TODO: test validations
    }

    /**
     * Delete a target group from a network
     *
     * Delete a target group from a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkSmTargetGroupTest() throws ApiException {
        String networkId = null;
        String targetGroupId = null;
        api.deleteNetworkSmTargetGroup(networkId, targetGroupId);
        // TODO: test validations
    }

    /**
     * Delete a User Access Device
     *
     * Delete a User Access Device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkSmUserAccessDeviceTest() throws ApiException {
        String networkId = null;
        String userAccessDeviceId = null;
        api.deleteNetworkSmUserAccessDevice(networkId, userAccessDeviceId);
        // TODO: test validations
    }

    /**
     * Bypass activation lock attempt status
     *
     * Bypass activation lock attempt status
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmBypassActivationLockAttemptTest() throws ApiException {
        String networkId = null;
        String attemptId = null;
        Object response = api.getNetworkSmBypassActivationLockAttempt(networkId, attemptId);
        // TODO: test validations
    }

    /**
     * Return the client&#39;s daily cellular data usage history
     *
     * Return the client&#39;s daily cellular data usage history. Usage data is in kilobytes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmDeviceCellularUsageHistoryTest() throws ApiException {
        String networkId = null;
        String deviceId = null;
        List<GetNetworkSmDeviceCellularUsageHistory200ResponseInner> response = api.getNetworkSmDeviceCellularUsageHistory(networkId, deviceId);
        // TODO: test validations
    }

    /**
     * List the certs on a device
     *
     * List the certs on a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmDeviceCertsTest() throws ApiException {
        String networkId = null;
        String deviceId = null;
        List<GetNetworkSmDeviceCerts200ResponseInner> response = api.getNetworkSmDeviceCerts(networkId, deviceId);
        // TODO: test validations
    }

    /**
     * Returns historical connectivity data (whether a device is regularly checking in to Dashboard).
     *
     * Returns historical connectivity data (whether a device is regularly checking in to Dashboard).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmDeviceConnectivityTest() throws ApiException {
        String networkId = null;
        String deviceId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<GetNetworkSmDeviceConnectivity200ResponseInner> response = api.getNetworkSmDeviceConnectivity(networkId, deviceId, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * Return historical records of various Systems Manager network connection details for desktop devices.
     *
     * Return historical records of various Systems Manager network connection details for desktop devices.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmDeviceDesktopLogsTest() throws ApiException {
        String networkId = null;
        String deviceId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<GetNetworkSmDeviceDesktopLogs200ResponseInner> response = api.getNetworkSmDeviceDesktopLogs(networkId, deviceId, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * Return historical records of commands sent to Systems Manager devices
     *
     * Return historical records of commands sent to Systems Manager devices. Note that this will include the name of the Dashboard user who initiated the command if it was generated by a Dashboard admin rather than the automatic behavior of the system; you may wish to filter this out of any reports.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmDeviceDeviceCommandLogsTest() throws ApiException {
        String networkId = null;
        String deviceId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<GetNetworkSmDeviceDeviceCommandLogs200ResponseInner> response = api.getNetworkSmDeviceDeviceCommandLogs(networkId, deviceId, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * Get the installed profiles associated with a device
     *
     * Get the installed profiles associated with a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmDeviceDeviceProfilesTest() throws ApiException {
        String networkId = null;
        String deviceId = null;
        List<GetNetworkSmDeviceDeviceProfiles200ResponseInner> response = api.getNetworkSmDeviceDeviceProfiles(networkId, deviceId);
        // TODO: test validations
    }

    /**
     * List the network adapters of a device
     *
     * List the network adapters of a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmDeviceNetworkAdaptersTest() throws ApiException {
        String networkId = null;
        String deviceId = null;
        List<GetNetworkSmDeviceNetworkAdapters200ResponseInner> response = api.getNetworkSmDeviceNetworkAdapters(networkId, deviceId);
        // TODO: test validations
    }

    /**
     * Return historical records of various Systems Manager client metrics for desktop devices.
     *
     * Return historical records of various Systems Manager client metrics for desktop devices.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmDevicePerformanceHistoryTest() throws ApiException {
        String networkId = null;
        String deviceId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<GetNetworkSmDevicePerformanceHistory200ResponseInner> response = api.getNetworkSmDevicePerformanceHistory(networkId, deviceId, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * List the restrictions on a device
     *
     * List the restrictions on a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmDeviceRestrictionsTest() throws ApiException {
        String networkId = null;
        String deviceId = null;
        List<Object> response = api.getNetworkSmDeviceRestrictions(networkId, deviceId);
        // TODO: test validations
    }

    /**
     * List the security centers on a device
     *
     * List the security centers on a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmDeviceSecurityCentersTest() throws ApiException {
        String networkId = null;
        String deviceId = null;
        List<GetNetworkSmDeviceSecurityCenters200ResponseInner> response = api.getNetworkSmDeviceSecurityCenters(networkId, deviceId);
        // TODO: test validations
    }

    /**
     * Get a list of softwares associated with a device
     *
     * Get a list of softwares associated with a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmDeviceSoftwaresTest() throws ApiException {
        String networkId = null;
        String deviceId = null;
        List<GetNetworkSmDeviceSoftwares200ResponseInner> response = api.getNetworkSmDeviceSoftwares(networkId, deviceId);
        // TODO: test validations
    }

    /**
     * List the saved SSID names on a device
     *
     * List the saved SSID names on a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmDeviceWlanListsTest() throws ApiException {
        String networkId = null;
        String deviceId = null;
        List<GetNetworkSmDeviceWlanLists200ResponseInner> response = api.getNetworkSmDeviceWlanLists(networkId, deviceId);
        // TODO: test validations
    }

    /**
     * List the devices enrolled in an SM network with various specified fields and filters
     *
     * List the devices enrolled in an SM network with various specified fields and filters
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmDevicesTest() throws ApiException {
        String networkId = null;
        List<String> fields = null;
        List<String> wifiMacs = null;
        List<String> serials = null;
        List<String> ids = null;
        List<String> scope = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<GetNetworkSmDevices200ResponseInner> response = api.getNetworkSmDevices(networkId, fields, wifiMacs, serials, ids, scope, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * List all profiles in a network
     *
     * List all profiles in a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmProfilesTest() throws ApiException {
        String networkId = null;
        List<GetNetworkSmProfiles200ResponseInner> response = api.getNetworkSmProfiles(networkId);
        // TODO: test validations
    }

    /**
     * Return a target group
     *
     * Return a target group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmTargetGroupTest() throws ApiException {
        String networkId = null;
        String targetGroupId = null;
        Boolean withDetails = null;
        Object response = api.getNetworkSmTargetGroup(networkId, targetGroupId, withDetails);
        // TODO: test validations
    }

    /**
     * List the target groups in this network
     *
     * List the target groups in this network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmTargetGroupsTest() throws ApiException {
        String networkId = null;
        Boolean withDetails = null;
        List<Object> response = api.getNetworkSmTargetGroups(networkId, withDetails);
        // TODO: test validations
    }

    /**
     * List Trusted Access Configs
     *
     * List Trusted Access Configs
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmTrustedAccessConfigsTest() throws ApiException {
        String networkId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<GetNetworkSmTrustedAccessConfigs200ResponseInner> response = api.getNetworkSmTrustedAccessConfigs(networkId, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * List User Access Devices and its Trusted Access Connections
     *
     * List User Access Devices and its Trusted Access Connections
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmUserAccessDevicesTest() throws ApiException {
        String networkId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<GetNetworkSmUserAccessDevices200ResponseInner> response = api.getNetworkSmUserAccessDevices(networkId, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * Get the profiles associated with a user
     *
     * Get the profiles associated with a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmUserDeviceProfilesTest() throws ApiException {
        String networkId = null;
        String userId = null;
        List<GetNetworkSmDeviceDeviceProfiles200ResponseInner> response = api.getNetworkSmUserDeviceProfiles(networkId, userId);
        // TODO: test validations
    }

    /**
     * Get a list of softwares associated with a user
     *
     * Get a list of softwares associated with a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmUserSoftwaresTest() throws ApiException {
        String networkId = null;
        String userId = null;
        List<GetNetworkSmDeviceSoftwares200ResponseInner> response = api.getNetworkSmUserSoftwares(networkId, userId);
        // TODO: test validations
    }

    /**
     * List the owners in an SM network with various specified fields and filters
     *
     * List the owners in an SM network with various specified fields and filters
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmUsersTest() throws ApiException {
        String networkId = null;
        List<String> ids = null;
        List<String> usernames = null;
        List<String> emails = null;
        List<String> scope = null;
        List<GetNetworkSmUsers200ResponseInner> response = api.getNetworkSmUsers(networkId, ids, usernames, emails, scope);
        // TODO: test validations
    }

    /**
     * Get the organization&#39;s APNS certificate
     *
     * Get the organization&#39;s APNS certificate
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationSmApnsCertTest() throws ApiException {
        String organizationId = null;
        GetOrganizationSmApnsCert200Response response = api.getOrganizationSmApnsCert(organizationId);
        // TODO: test validations
    }

    /**
     * Get a hash containing the unparsed token of the VPP account with the given ID
     *
     * Get a hash containing the unparsed token of the VPP account with the given ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationSmVppAccountTest() throws ApiException {
        String organizationId = null;
        String vppAccountId = null;
        GetOrganizationSmVppAccounts200ResponseInner response = api.getOrganizationSmVppAccount(organizationId, vppAccountId);
        // TODO: test validations
    }

    /**
     * List the VPP accounts in the organization
     *
     * List the VPP accounts in the organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationSmVppAccountsTest() throws ApiException {
        String organizationId = null;
        List<GetOrganizationSmVppAccounts200ResponseInner> response = api.getOrganizationSmVppAccounts(organizationId);
        // TODO: test validations
    }

    /**
     * Lock a set of devices
     *
     * Lock a set of devices
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void lockNetworkSmDevicesTest() throws ApiException {
        String networkId = null;
        LockNetworkSmDevicesRequest lockNetworkSmDevicesRequest = null;
        CheckinNetworkSmDevices200Response response = api.lockNetworkSmDevices(networkId, lockNetworkSmDevicesRequest);
        // TODO: test validations
    }

    /**
     * Add, delete, or update the tags of a set of devices
     *
     * Add, delete, or update the tags of a set of devices
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyNetworkSmDevicesTagsTest() throws ApiException {
        String networkId = null;
        ModifyNetworkSmDevicesTagsRequest modifyNetworkSmDevicesTagsRequest = null;
        List<ModifyNetworkSmDevicesTags200ResponseInner> response = api.modifyNetworkSmDevicesTags(networkId, modifyNetworkSmDevicesTagsRequest);
        // TODO: test validations
    }

    /**
     * Move a set of devices to a new network
     *
     * Move a set of devices to a new network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void moveNetworkSmDevicesTest() throws ApiException {
        String networkId = null;
        MoveNetworkSmDevicesRequest moveNetworkSmDevicesRequest = null;
        MoveNetworkSmDevices200Response response = api.moveNetworkSmDevices(networkId, moveNetworkSmDevicesRequest);
        // TODO: test validations
    }

    /**
     * Refresh the details of a device
     *
     * Refresh the details of a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void refreshNetworkSmDeviceDetailsTest() throws ApiException {
        String networkId = null;
        String deviceId = null;
        api.refreshNetworkSmDeviceDetails(networkId, deviceId);
        // TODO: test validations
    }

    /**
     * Unenroll a device
     *
     * Unenroll a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unenrollNetworkSmDeviceTest() throws ApiException {
        String networkId = null;
        String deviceId = null;
        Object response = api.unenrollNetworkSmDevice(networkId, deviceId);
        // TODO: test validations
    }

    /**
     * Modify the fields of a device
     *
     * Modify the fields of a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSmDevicesFieldsTest() throws ApiException {
        String networkId = null;
        UpdateNetworkSmDevicesFieldsRequest updateNetworkSmDevicesFieldsRequest = null;
        List<UpdateNetworkSmDevicesFields200ResponseInner> response = api.updateNetworkSmDevicesFields(networkId, updateNetworkSmDevicesFieldsRequest);
        // TODO: test validations
    }

    /**
     * Update a target group
     *
     * Update a target group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSmTargetGroupTest() throws ApiException {
        String networkId = null;
        String targetGroupId = null;
        CreateNetworkSmTargetGroupRequest createNetworkSmTargetGroupRequest = null;
        Object response = api.updateNetworkSmTargetGroup(networkId, targetGroupId, createNetworkSmTargetGroupRequest);
        // TODO: test validations
    }

    /**
     * Wipe a device
     *
     * Wipe a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void wipeNetworkSmDevicesTest() throws ApiException {
        String networkId = null;
        WipeNetworkSmDevicesRequest wipeNetworkSmDevicesRequest = null;
        WipeNetworkSmDevices200Response response = api.wipeNetworkSmDevices(networkId, wipeNetworkSmDevicesRequest);
        // TODO: test validations
    }

}
