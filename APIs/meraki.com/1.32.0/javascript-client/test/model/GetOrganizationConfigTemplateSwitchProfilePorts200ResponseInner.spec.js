/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MerakiDashboardApi);
  }
}(this, function(expect, MerakiDashboardApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MerakiDashboardApi.GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner', function() {
    it('should create an instance of GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner', function() {
      // uncomment below and update the code to test GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner
      //var instance = new MerakiDashboardApi.GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner();
      //expect(instance).to.be.a(MerakiDashboardApi.GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner);
    });

    it('should have the property accessPolicyNumber (base name: "accessPolicyNumber")', function() {
      // uncomment below and update the code to test the property accessPolicyNumber
      //var instance = new MerakiDashboardApi.GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property accessPolicyType (base name: "accessPolicyType")', function() {
      // uncomment below and update the code to test the property accessPolicyType
      //var instance = new MerakiDashboardApi.GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property allowedVlans (base name: "allowedVlans")', function() {
      // uncomment below and update the code to test the property allowedVlans
      //var instance = new MerakiDashboardApi.GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property daiTrusted (base name: "daiTrusted")', function() {
      // uncomment below and update the code to test the property daiTrusted
      //var instance = new MerakiDashboardApi.GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property enabled (base name: "enabled")', function() {
      // uncomment below and update the code to test the property enabled
      //var instance = new MerakiDashboardApi.GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property flexibleStackingEnabled (base name: "flexibleStackingEnabled")', function() {
      // uncomment below and update the code to test the property flexibleStackingEnabled
      //var instance = new MerakiDashboardApi.GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property isolationEnabled (base name: "isolationEnabled")', function() {
      // uncomment below and update the code to test the property isolationEnabled
      //var instance = new MerakiDashboardApi.GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property linkNegotiation (base name: "linkNegotiation")', function() {
      // uncomment below and update the code to test the property linkNegotiation
      //var instance = new MerakiDashboardApi.GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property linkNegotiationCapabilities (base name: "linkNegotiationCapabilities")', function() {
      // uncomment below and update the code to test the property linkNegotiationCapabilities
      //var instance = new MerakiDashboardApi.GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property macAllowList (base name: "macAllowList")', function() {
      // uncomment below and update the code to test the property macAllowList
      //var instance = new MerakiDashboardApi.GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new MerakiDashboardApi.GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property poeEnabled (base name: "poeEnabled")', function() {
      // uncomment below and update the code to test the property poeEnabled
      //var instance = new MerakiDashboardApi.GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property portId (base name: "portId")', function() {
      // uncomment below and update the code to test the property portId
      //var instance = new MerakiDashboardApi.GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property portScheduleId (base name: "portScheduleId")', function() {
      // uncomment below and update the code to test the property portScheduleId
      //var instance = new MerakiDashboardApi.GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property profile (base name: "profile")', function() {
      // uncomment below and update the code to test the property profile
      //var instance = new MerakiDashboardApi.GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property rstpEnabled (base name: "rstpEnabled")', function() {
      // uncomment below and update the code to test the property rstpEnabled
      //var instance = new MerakiDashboardApi.GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property stickyMacAllowList (base name: "stickyMacAllowList")', function() {
      // uncomment below and update the code to test the property stickyMacAllowList
      //var instance = new MerakiDashboardApi.GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property stickyMacAllowListLimit (base name: "stickyMacAllowListLimit")', function() {
      // uncomment below and update the code to test the property stickyMacAllowListLimit
      //var instance = new MerakiDashboardApi.GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property stormControlEnabled (base name: "stormControlEnabled")', function() {
      // uncomment below and update the code to test the property stormControlEnabled
      //var instance = new MerakiDashboardApi.GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property stpGuard (base name: "stpGuard")', function() {
      // uncomment below and update the code to test the property stpGuard
      //var instance = new MerakiDashboardApi.GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new MerakiDashboardApi.GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new MerakiDashboardApi.GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property udld (base name: "udld")', function() {
      // uncomment below and update the code to test the property udld
      //var instance = new MerakiDashboardApi.GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property vlan (base name: "vlan")', function() {
      // uncomment below and update the code to test the property vlan
      //var instance = new MerakiDashboardApi.GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property voiceVlan (base name: "voiceVlan")', function() {
      // uncomment below and update the code to test the property voiceVlan
      //var instance = new MerakiDashboardApi.GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner();
      //expect(instance).to.be();
    });

  });

}));
