/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MerakiDashboardApi);
  }
}(this, function(expect, MerakiDashboardApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MerakiDashboardApi.VpnApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('VpnApi', function() {
    describe('getNetworkApplianceVpnBgp_1', function() {
      it('should call getNetworkApplianceVpnBgp_1 successfully', function(done) {
        //uncomment below and update the code to test getNetworkApplianceVpnBgp_1
        //instance.getNetworkApplianceVpnBgp_1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getNetworkApplianceVpnSiteToSiteVpn_1', function() {
      it('should call getNetworkApplianceVpnSiteToSiteVpn_1 successfully', function(done) {
        //uncomment below and update the code to test getNetworkApplianceVpnSiteToSiteVpn_1
        //instance.getNetworkApplianceVpnSiteToSiteVpn_1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getNetworkWirelessSsidVpn_2', function() {
      it('should call getNetworkWirelessSsidVpn_2 successfully', function(done) {
        //uncomment below and update the code to test getNetworkWirelessSsidVpn_2
        //instance.getNetworkWirelessSsidVpn_2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getOrganizationApplianceVpnStats_1', function() {
      it('should call getOrganizationApplianceVpnStats_1 successfully', function(done) {
        //uncomment below and update the code to test getOrganizationApplianceVpnStats_1
        //instance.getOrganizationApplianceVpnStats_1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getOrganizationApplianceVpnStatuses_1', function() {
      it('should call getOrganizationApplianceVpnStatuses_1 successfully', function(done) {
        //uncomment below and update the code to test getOrganizationApplianceVpnStatuses_1
        //instance.getOrganizationApplianceVpnStatuses_1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getOrganizationApplianceVpnThirdPartyVPNPeers_1', function() {
      it('should call getOrganizationApplianceVpnThirdPartyVPNPeers_1 successfully', function(done) {
        //uncomment below and update the code to test getOrganizationApplianceVpnThirdPartyVPNPeers_1
        //instance.getOrganizationApplianceVpnThirdPartyVPNPeers_1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getOrganizationApplianceVpnVpnFirewallRules_1', function() {
      it('should call getOrganizationApplianceVpnVpnFirewallRules_1 successfully', function(done) {
        //uncomment below and update the code to test getOrganizationApplianceVpnVpnFirewallRules_1
        //instance.getOrganizationApplianceVpnVpnFirewallRules_1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateNetworkApplianceVpnBgp_1', function() {
      it('should call updateNetworkApplianceVpnBgp_1 successfully', function(done) {
        //uncomment below and update the code to test updateNetworkApplianceVpnBgp_1
        //instance.updateNetworkApplianceVpnBgp_1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateNetworkApplianceVpnSiteToSiteVpn_1', function() {
      it('should call updateNetworkApplianceVpnSiteToSiteVpn_1 successfully', function(done) {
        //uncomment below and update the code to test updateNetworkApplianceVpnSiteToSiteVpn_1
        //instance.updateNetworkApplianceVpnSiteToSiteVpn_1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateNetworkWirelessSsidVpn_2', function() {
      it('should call updateNetworkWirelessSsidVpn_2 successfully', function(done) {
        //uncomment below and update the code to test updateNetworkWirelessSsidVpn_2
        //instance.updateNetworkWirelessSsidVpn_2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateOrganizationApplianceVpnThirdPartyVPNPeers_1', function() {
      it('should call updateOrganizationApplianceVpnThirdPartyVPNPeers_1 successfully', function(done) {
        //uncomment below and update the code to test updateOrganizationApplianceVpnThirdPartyVPNPeers_1
        //instance.updateOrganizationApplianceVpnThirdPartyVPNPeers_1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateOrganizationApplianceVpnVpnFirewallRules_1', function() {
      it('should call updateOrganizationApplianceVpnVpnFirewallRules_1 successfully', function(done) {
        //uncomment below and update the code to test updateOrganizationApplianceVpnVpnFirewallRules_1
        //instance.updateOrganizationApplianceVpnVpnFirewallRules_1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
