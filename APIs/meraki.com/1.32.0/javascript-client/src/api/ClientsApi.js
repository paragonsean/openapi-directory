/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetNetworkClient200Response from '../model/GetNetworkClient200Response';
import GetNetworkClients200Response from '../model/GetNetworkClients200Response';
import GetOrganizationClientsBandwidthUsageHistory200ResponseInner from '../model/GetOrganizationClientsBandwidthUsageHistory200ResponseInner';
import GetOrganizationClientsOverview200Response from '../model/GetOrganizationClientsOverview200Response';
import GetOrganizationSummaryTopClientsByUsage200ResponseInner from '../model/GetOrganizationSummaryTopClientsByUsage200ResponseInner';
import GetOrganizationSummaryTopClientsManufacturersByUsage200ResponseInner from '../model/GetOrganizationSummaryTopClientsManufacturersByUsage200ResponseInner';
import ProvisionNetworkClientsRequest from '../model/ProvisionNetworkClientsRequest';
import UpdateNetworkClientPolicyRequest from '../model/UpdateNetworkClientPolicyRequest';
import UpdateNetworkClientSplashAuthorizationStatusRequest from '../model/UpdateNetworkClientSplashAuthorizationStatusRequest';

/**
* Clients service.
* @module api/ClientsApi
* @version 1.32.0
*/
export default class ClientsApi {

    /**
    * Constructs a new ClientsApi. 
    * @alias module:api/ClientsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getDeviceClients_1 operation.
     * @callback module:api/ClientsApi~getDeviceClients_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the clients of a device, up to a maximum of a month ago
     * List the clients of a device, up to a maximum of a month ago. The usage of each client is returned in kilobytes. If the device is a switch, the switchport is returned; otherwise the switchport field is null.
     * @param {String} serial 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
     * @param {module:api/ClientsApi~getDeviceClients_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getDeviceClients_1(serial, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceClients_1");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
        't0': opts['t0'],
        'timespan': opts['timespan']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/devices/{serial}/clients', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceClientSecurityEvents_1 operation.
     * @callback module:api/ClientsApi~getNetworkApplianceClientSecurityEvents_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the security events for a client
     * List the security events for a client. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param {String} networkId 
     * @param {String} clientId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. Data is gathered after the specified t0 value. The maximum lookback period is 791 days from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 791 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 791 days. The default is 31 days.
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:model/String} [sortOrder] Sorted order of security events based on event detection time. Order options are 'ascending' or 'descending'. Default is ascending order.
     * @param {module:api/ClientsApi~getNetworkApplianceClientSecurityEvents_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkApplianceClientSecurityEvents_1(networkId, clientId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceClientSecurityEvents_1");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getNetworkApplianceClientSecurityEvents_1");
      }

      let pathParams = {
        'networkId': networkId,
        'clientId': clientId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan'],
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        'sortOrder': opts['sortOrder']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/clients/{clientId}/security/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkClientPolicy_1 operation.
     * @callback module:api/ClientsApi~getNetworkClientPolicy_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the policy assigned to a client on the network
     * Return the policy assigned to a client on the network. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param {String} networkId 
     * @param {String} clientId 
     * @param {module:api/ClientsApi~getNetworkClientPolicy_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkClientPolicy_1(networkId, clientId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkClientPolicy_1");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getNetworkClientPolicy_1");
      }

      let pathParams = {
        'networkId': networkId,
        'clientId': clientId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/clients/{clientId}/policy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkClientSplashAuthorizationStatus_1 operation.
     * @callback module:api/ClientsApi~getNetworkClientSplashAuthorizationStatus_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the splash authorization for a client, for each SSID they've associated with through splash
     * Return the splash authorization for a client, for each SSID they've associated with through splash. Only enabled SSIDs with Click-through splash enabled will be included. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param {String} networkId 
     * @param {String} clientId 
     * @param {module:api/ClientsApi~getNetworkClientSplashAuthorizationStatus_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkClientSplashAuthorizationStatus_1(networkId, clientId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkClientSplashAuthorizationStatus_1");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getNetworkClientSplashAuthorizationStatus_1");
      }

      let pathParams = {
        'networkId': networkId,
        'clientId': clientId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/clients/{clientId}/splashAuthorizationStatus', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkClientTrafficHistory_1 operation.
     * @callback module:api/ClientsApi~getNetworkClientTrafficHistory_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the client's network traffic data over time
     * Return the client's network traffic data over time. Usage data is in kilobytes. This endpoint requires detailed traffic analysis to be enabled on the Network-wide > General page. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param {String} networkId 
     * @param {String} clientId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:api/ClientsApi~getNetworkClientTrafficHistory_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkClientTrafficHistory_1(networkId, clientId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkClientTrafficHistory_1");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getNetworkClientTrafficHistory_1");
      }

      let pathParams = {
        'networkId': networkId,
        'clientId': clientId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/clients/{clientId}/trafficHistory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkClientUsageHistory_1 operation.
     * @callback module:api/ClientsApi~getNetworkClientUsageHistory_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the client's daily usage history
     * Return the client's daily usage history. Usage data is in kilobytes. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param {String} networkId 
     * @param {String} clientId 
     * @param {module:api/ClientsApi~getNetworkClientUsageHistory_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkClientUsageHistory_1(networkId, clientId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkClientUsageHistory_1");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getNetworkClientUsageHistory_1");
      }

      let pathParams = {
        'networkId': networkId,
        'clientId': clientId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/clients/{clientId}/usageHistory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkClient_1 operation.
     * @callback module:api/ClientsApi~getNetworkClient_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkClient200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the client associated with the given identifier
     * Return the client associated with the given identifier. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param {String} networkId 
     * @param {String} clientId 
     * @param {module:api/ClientsApi~getNetworkClient_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkClient200Response}
     */
    getNetworkClient_1(networkId, clientId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkClient_1");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getNetworkClient_1");
      }

      let pathParams = {
        'networkId': networkId,
        'clientId': clientId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkClient200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/clients/{clientId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkClientsApplicationUsage_1 operation.
     * @callback module:api/ClientsApi~getNetworkClientsApplicationUsage_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the application usage data for clients
     * Return the application usage data for clients. Usage data is in kilobytes. Clients can be identified by client keys or either the MACs or IPs depending on whether the network uses Track-by-IP.
     * @param {String} networkId 
     * @param {String} clients A list of client keys, MACs or IPs separated by comma.
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} [ssidNumber] An SSID number to include. If not specified, eveusage histories application usagents for all SSIDs will be returned.
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
     * @param {module:api/ClientsApi~getNetworkClientsApplicationUsage_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkClientsApplicationUsage_1(networkId, clients, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkClientsApplicationUsage_1");
      }
      // verify the required parameter 'clients' is set
      if (clients === undefined || clients === null) {
        throw new Error("Missing the required parameter 'clients' when calling getNetworkClientsApplicationUsage_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        'clients': clients,
        'ssidNumber': opts['ssidNumber'],
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/clients/applicationUsage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkClientsBandwidthUsageHistory_1 operation.
     * @callback module:api/ClientsApi~getNetworkClientsBandwidthUsageHistory_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a timeseries of total traffic consumption rates for all clients on a network within a given timespan, in megabits per second.
     * Returns a timeseries of total traffic consumption rates for all clients on a network within a given timespan, in megabits per second.
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 30 days from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:api/ClientsApi~getNetworkClientsBandwidthUsageHistory_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkClientsBandwidthUsageHistory_1(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkClientsBandwidthUsageHistory_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan'],
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/clients/bandwidthUsageHistory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkClientsOverview_1 operation.
     * @callback module:api/ClientsApi~getNetworkClientsOverview_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return overview statistics for network clients
     * Return overview statistics for network clients
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
     * @param {Number} [resolution] The time resolution in seconds for returned data. The valid resolutions are: 7200, 86400, 604800, 2592000. The default is 604800.
     * @param {module:api/ClientsApi~getNetworkClientsOverview_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkClientsOverview_1(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkClientsOverview_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan'],
        'resolution': opts['resolution']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/clients/overview', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkClientsUsageHistories_1 operation.
     * @callback module:api/ClientsApi~getNetworkClientsUsageHistories_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the usage histories for clients
     * Return the usage histories for clients. Usage data is in kilobytes. Clients can be identified by client keys or either the MACs or IPs depending on whether the network uses Track-by-IP.
     * @param {String} networkId 
     * @param {String} clients A list of client keys, MACs or IPs separated by comma.
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} [ssidNumber] An SSID number to include. If not specified, events for all SSIDs will be returned.
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
     * @param {module:api/ClientsApi~getNetworkClientsUsageHistories_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkClientsUsageHistories_1(networkId, clients, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkClientsUsageHistories_1");
      }
      // verify the required parameter 'clients' is set
      if (clients === undefined || clients === null) {
        throw new Error("Missing the required parameter 'clients' when calling getNetworkClientsUsageHistories_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        'clients': clients,
        'ssidNumber': opts['ssidNumber'],
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/clients/usageHistories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkClients_1 operation.
     * @callback module:api/ClientsApi~getNetworkClients_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkClients200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the clients that have used this network in the timespan
     * List the clients that have used this network in the timespan
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 10.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {Array.<module:model/String>} [statuses] Filters clients based on status. Can be one of 'Online' or 'Offline'.
     * @param {String} [ip] Filters clients based on a partial or full match for the ip address field.
     * @param {String} [ip6] Filters clients based on a partial or full match for the ip6 address field.
     * @param {String} [ip6Local] Filters clients based on a partial or full match for the ip6Local address field.
     * @param {String} [mac] Filters clients based on a partial or full match for the mac address field.
     * @param {String} [os] Filters clients based on a partial or full match for the os (operating system) field.
     * @param {String} [description] Filters clients based on a partial or full match for the description field.
     * @param {String} [vlan] Filters clients based on the full match for the VLAN field.
     * @param {Array.<module:model/String>} [recentDeviceConnections] Filters clients based on recent connection type. Can be one of 'Wired' or 'Wireless'.
     * @param {module:api/ClientsApi~getNetworkClients_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkClients200Response}
     */
    getNetworkClients_1(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkClients_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        't0': opts['t0'],
        'timespan': opts['timespan'],
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        'statuses': this.apiClient.buildCollectionParam(opts['statuses'], 'csv'),
        'ip': opts['ip'],
        'ip6': opts['ip6'],
        'ip6Local': opts['ip6Local'],
        'mac': opts['mac'],
        'os': opts['os'],
        'description': opts['description'],
        'vlan': opts['vlan'],
        'recentDeviceConnections': this.apiClient.buildCollectionParam(opts['recentDeviceConnections'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkClients200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/clients', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessClientConnectionStats_1 operation.
     * @callback module:api/ClientsApi~getNetworkWirelessClientConnectionStats_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Aggregated connectivity info for a given client on this network
     * Aggregated connectivity info for a given client on this network. Clients are identified by their MAC.
     * @param {String} networkId 
     * @param {String} clientId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 180 days from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 7 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days.
     * @param {module:model/String} [band] Filter results by band (either '2.4', '5' or '6'). Note that data prior to February 2020 will not have band information.
     * @param {Number} [ssid] Filter results by SSID
     * @param {Number} [vlan] Filter results by VLAN
     * @param {String} [apTag] Filter results by AP Tag
     * @param {module:api/ClientsApi~getNetworkWirelessClientConnectionStats_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkWirelessClientConnectionStats_1(networkId, clientId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessClientConnectionStats_1");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getNetworkWirelessClientConnectionStats_1");
      }

      let pathParams = {
        'networkId': networkId,
        'clientId': clientId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan'],
        'band': opts['band'],
        'ssid': opts['ssid'],
        'vlan': opts['vlan'],
        'apTag': opts['apTag']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/clients/{clientId}/connectionStats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessClientConnectivityEvents_1 operation.
     * @callback module:api/ClientsApi~getNetworkWirelessClientConnectivityEvents_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the wireless connectivity events for a client within a network in the timespan.
     * List the wireless connectivity events for a client within a network in the timespan.
     * @param {String} networkId 
     * @param {String} clientId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
     * @param {Array.<module:model/String>} [types] A list of event types to include. If not specified, events of all types will be returned. Valid types are 'assoc', 'disassoc', 'auth', 'deauth', 'dns', 'dhcp', 'roam', 'connection' and/or 'sticky'.
     * @param {Array.<module:model/String>} [includedSeverities] A list of severities to include. If not specified, events of all severities will be returned. Valid severities are 'good', 'info', 'warn' and/or 'bad'.
     * @param {module:model/String} [band] Filter results by band (either '2.4', '5', '6').
     * @param {module:model/Number} [ssidNumber] An SSID number to include. If not specified, events for all SSIDs will be returned.
     * @param {String} [deviceSerial] Filter results by an AP's serial number.
     * @param {module:api/ClientsApi~getNetworkWirelessClientConnectivityEvents_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkWirelessClientConnectivityEvents_1(networkId, clientId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessClientConnectivityEvents_1");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getNetworkWirelessClientConnectivityEvents_1");
      }

      let pathParams = {
        'networkId': networkId,
        'clientId': clientId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan'],
        'types': this.apiClient.buildCollectionParam(opts['types'], 'csv'),
        'includedSeverities': this.apiClient.buildCollectionParam(opts['includedSeverities'], 'csv'),
        'band': opts['band'],
        'ssidNumber': opts['ssidNumber'],
        'deviceSerial': opts['deviceSerial']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/clients/{clientId}/connectivityEvents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessClientLatencyHistory_1 operation.
     * @callback module:api/ClientsApi~getNetworkWirelessClientLatencyHistory_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the latency history for a client
     * Return the latency history for a client. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP. The latency data is from a sample of 2% of packets and is grouped into 4 traffic categories: background, best effort, video, voice. Within these categories the sampled packet counters are bucketed by latency in milliseconds.
     * @param {String} networkId 
     * @param {String} clientId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 791 days from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 791 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 791 days. The default is 1 day.
     * @param {Number} [resolution] The time resolution in seconds for returned data. The valid resolutions are: 86400. The default is 86400.
     * @param {module:api/ClientsApi~getNetworkWirelessClientLatencyHistory_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkWirelessClientLatencyHistory_1(networkId, clientId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessClientLatencyHistory_1");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getNetworkWirelessClientLatencyHistory_1");
      }

      let pathParams = {
        'networkId': networkId,
        'clientId': clientId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan'],
        'resolution': opts['resolution']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/clients/{clientId}/latencyHistory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessClientLatencyStats_1 operation.
     * @callback module:api/ClientsApi~getNetworkWirelessClientLatencyStats_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Aggregated latency info for a given client on this network
     * Aggregated latency info for a given client on this network. Clients are identified by their MAC.
     * @param {String} networkId 
     * @param {String} clientId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 180 days from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 7 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days.
     * @param {module:model/String} [band] Filter results by band (either '2.4', '5' or '6'). Note that data prior to February 2020 will not have band information.
     * @param {Number} [ssid] Filter results by SSID
     * @param {Number} [vlan] Filter results by VLAN
     * @param {String} [apTag] Filter results by AP Tag
     * @param {String} [fields] Partial selection: If present, this call will return only the selected fields of [\"rawDistribution\", \"avg\"]. All fields will be returned by default. Selected fields must be entered as a comma separated string.
     * @param {module:api/ClientsApi~getNetworkWirelessClientLatencyStats_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkWirelessClientLatencyStats_1(networkId, clientId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessClientLatencyStats_1");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getNetworkWirelessClientLatencyStats_1");
      }

      let pathParams = {
        'networkId': networkId,
        'clientId': clientId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan'],
        'band': opts['band'],
        'ssid': opts['ssid'],
        'vlan': opts['vlan'],
        'apTag': opts['apTag'],
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/clients/{clientId}/latencyStats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessClientsConnectionStats_1 operation.
     * @callback module:api/ClientsApi~getNetworkWirelessClientsConnectionStats_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Aggregated connectivity info for this network, grouped by clients
     * Aggregated connectivity info for this network, grouped by clients
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 180 days from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 7 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days.
     * @param {module:model/String} [band] Filter results by band (either '2.4', '5' or '6'). Note that data prior to February 2020 will not have band information.
     * @param {Number} [ssid] Filter results by SSID
     * @param {Number} [vlan] Filter results by VLAN
     * @param {String} [apTag] Filter results by AP Tag
     * @param {module:api/ClientsApi~getNetworkWirelessClientsConnectionStats_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkWirelessClientsConnectionStats_1(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessClientsConnectionStats_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan'],
        'band': opts['band'],
        'ssid': opts['ssid'],
        'vlan': opts['vlan'],
        'apTag': opts['apTag']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/clients/connectionStats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessClientsLatencyStats_1 operation.
     * @callback module:api/ClientsApi~getNetworkWirelessClientsLatencyStats_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Aggregated latency info for this network, grouped by clients
     * Aggregated latency info for this network, grouped by clients
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 180 days from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 7 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days.
     * @param {module:model/String} [band] Filter results by band (either '2.4', '5' or '6'). Note that data prior to February 2020 will not have band information.
     * @param {Number} [ssid] Filter results by SSID
     * @param {Number} [vlan] Filter results by VLAN
     * @param {String} [apTag] Filter results by AP Tag
     * @param {String} [fields] Partial selection: If present, this call will return only the selected fields of [\"rawDistribution\", \"avg\"]. All fields will be returned by default. Selected fields must be entered as a comma separated string.
     * @param {module:api/ClientsApi~getNetworkWirelessClientsLatencyStats_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkWirelessClientsLatencyStats_1(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessClientsLatencyStats_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan'],
        'band': opts['band'],
        'ssid': opts['ssid'],
        'vlan': opts['vlan'],
        'apTag': opts['apTag'],
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/clients/latencyStats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationClientsBandwidthUsageHistory_1 operation.
     * @callback module:api/ClientsApi~getOrganizationClientsBandwidthUsageHistory_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationClientsBandwidthUsageHistory200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return data usage (in megabits per second) over time for all clients in the given organization within a given time range.
     * Return data usage (in megabits per second) over time for all clients in the given organization within a given time range.
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
     * @param {module:api/ClientsApi~getOrganizationClientsBandwidthUsageHistory_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationClientsBandwidthUsageHistory200ResponseInner>}
     */
    getOrganizationClientsBandwidthUsageHistory_1(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationClientsBandwidthUsageHistory_1");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationClientsBandwidthUsageHistory200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/clients/bandwidthUsageHistory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationClientsOverview_1 operation.
     * @callback module:api/ClientsApi~getOrganizationClientsOverview_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizationClientsOverview200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return summary information around client data usage (in mb) across the given organization.
     * Return summary information around client data usage (in mb) across the given organization.
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
     * @param {module:api/ClientsApi~getOrganizationClientsOverview_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizationClientsOverview200Response}
     */
    getOrganizationClientsOverview_1(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationClientsOverview_1");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOrganizationClientsOverview200Response;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/clients/overview', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationClientsSearch_1 operation.
     * @callback module:api/ClientsApi~getOrganizationClientsSearch_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the client details in an organization
     * Return the client details in an organization
     * @param {String} organizationId 
     * @param {String} mac The MAC address of the client. Required.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 5. Default is 5.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:api/ClientsApi~getOrganizationClientsSearch_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getOrganizationClientsSearch_1(organizationId, mac, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationClientsSearch_1");
      }
      // verify the required parameter 'mac' is set
      if (mac === undefined || mac === null) {
        throw new Error("Missing the required parameter 'mac' when calling getOrganizationClientsSearch_1");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'mac': mac,
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/clients/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationSummaryTopClientsByUsage_3 operation.
     * @callback module:api/ClientsApi~getOrganizationSummaryTopClientsByUsage_3Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationSummaryTopClientsByUsage200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return metrics for organization's top 10 clients by data usage (in mb) over given time range.
     * Return metrics for organization's top 10 clients by data usage (in mb) over given time range.
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
     * @param {module:api/ClientsApi~getOrganizationSummaryTopClientsByUsage_3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationSummaryTopClientsByUsage200ResponseInner>}
     */
    getOrganizationSummaryTopClientsByUsage_3(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationSummaryTopClientsByUsage_3");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationSummaryTopClientsByUsage200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/summary/top/clients/byUsage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationSummaryTopClientsManufacturersByUsage_3 operation.
     * @callback module:api/ClientsApi~getOrganizationSummaryTopClientsManufacturersByUsage_3Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationSummaryTopClientsManufacturersByUsage200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return metrics for organization's top clients by data usage (in mb) over given time range, grouped by manufacturer.
     * Return metrics for organization's top clients by data usage (in mb) over given time range, grouped by manufacturer.
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
     * @param {module:api/ClientsApi~getOrganizationSummaryTopClientsManufacturersByUsage_3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationSummaryTopClientsManufacturersByUsage200ResponseInner>}
     */
    getOrganizationSummaryTopClientsManufacturersByUsage_3(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationSummaryTopClientsManufacturersByUsage_3");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationSummaryTopClientsManufacturersByUsage200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/summary/top/clients/manufacturers/byUsage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the provisionNetworkClients_1 operation.
     * @callback module:api/ClientsApi~provisionNetworkClients_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provisions a client with a name and policy
     * Provisions a client with a name and policy. Clients can be provisioned before they associate to the network.
     * @param {String} networkId 
     * @param {module:model/ProvisionNetworkClientsRequest} provisionNetworkClientsRequest 
     * @param {module:api/ClientsApi~provisionNetworkClients_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    provisionNetworkClients_1(networkId, provisionNetworkClientsRequest, callback) {
      let postBody = provisionNetworkClientsRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling provisionNetworkClients_1");
      }
      // verify the required parameter 'provisionNetworkClientsRequest' is set
      if (provisionNetworkClientsRequest === undefined || provisionNetworkClientsRequest === null) {
        throw new Error("Missing the required parameter 'provisionNetworkClientsRequest' when calling provisionNetworkClients_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/clients/provision', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkClientPolicy_1 operation.
     * @callback module:api/ClientsApi~updateNetworkClientPolicy_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the policy assigned to a client on the network
     * Update the policy assigned to a client on the network. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param {String} networkId 
     * @param {String} clientId 
     * @param {module:model/UpdateNetworkClientPolicyRequest} updateNetworkClientPolicyRequest 
     * @param {module:api/ClientsApi~updateNetworkClientPolicy_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkClientPolicy_1(networkId, clientId, updateNetworkClientPolicyRequest, callback) {
      let postBody = updateNetworkClientPolicyRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkClientPolicy_1");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling updateNetworkClientPolicy_1");
      }
      // verify the required parameter 'updateNetworkClientPolicyRequest' is set
      if (updateNetworkClientPolicyRequest === undefined || updateNetworkClientPolicyRequest === null) {
        throw new Error("Missing the required parameter 'updateNetworkClientPolicyRequest' when calling updateNetworkClientPolicy_1");
      }

      let pathParams = {
        'networkId': networkId,
        'clientId': clientId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/clients/{clientId}/policy', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkClientSplashAuthorizationStatus_1 operation.
     * @callback module:api/ClientsApi~updateNetworkClientSplashAuthorizationStatus_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a client's splash authorization
     * Update a client's splash authorization. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param {String} networkId 
     * @param {String} clientId 
     * @param {module:model/UpdateNetworkClientSplashAuthorizationStatusRequest} updateNetworkClientSplashAuthorizationStatusRequest 
     * @param {module:api/ClientsApi~updateNetworkClientSplashAuthorizationStatus_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkClientSplashAuthorizationStatus_1(networkId, clientId, updateNetworkClientSplashAuthorizationStatusRequest, callback) {
      let postBody = updateNetworkClientSplashAuthorizationStatusRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkClientSplashAuthorizationStatus_1");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling updateNetworkClientSplashAuthorizationStatus_1");
      }
      // verify the required parameter 'updateNetworkClientSplashAuthorizationStatusRequest' is set
      if (updateNetworkClientSplashAuthorizationStatusRequest === undefined || updateNetworkClientSplashAuthorizationStatusRequest === null) {
        throw new Error("Missing the required parameter 'updateNetworkClientSplashAuthorizationStatusRequest' when calling updateNetworkClientSplashAuthorizationStatus_1");
      }

      let pathParams = {
        'networkId': networkId,
        'clientId': clientId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/clients/{clientId}/splashAuthorizationStatus', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
