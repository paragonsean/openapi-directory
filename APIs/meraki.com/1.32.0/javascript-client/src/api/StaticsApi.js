/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateNetworkAppliancePrefixesDelegatedStaticRequest from '../model/CreateNetworkAppliancePrefixesDelegatedStaticRequest';
import GetNetworkAppliancePrefixesDelegatedStatics200ResponseInner from '../model/GetNetworkAppliancePrefixesDelegatedStatics200ResponseInner';
import UpdateNetworkAppliancePrefixesDelegatedStaticRequest from '../model/UpdateNetworkAppliancePrefixesDelegatedStaticRequest';

/**
* Statics service.
* @module api/StaticsApi
* @version 1.32.0
*/
export default class StaticsApi {

    /**
    * Constructs a new StaticsApi. 
    * @alias module:api/StaticsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createNetworkAppliancePrefixesDelegatedStatic_3 operation.
     * @callback module:api/StaticsApi~createNetworkAppliancePrefixesDelegatedStatic_3Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a static delegated prefix from a network
     * Add a static delegated prefix from a network
     * @param {String} networkId 
     * @param {module:model/CreateNetworkAppliancePrefixesDelegatedStaticRequest} createNetworkAppliancePrefixesDelegatedStaticRequest 
     * @param {module:api/StaticsApi~createNetworkAppliancePrefixesDelegatedStatic_3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNetworkAppliancePrefixesDelegatedStatic_3(networkId, createNetworkAppliancePrefixesDelegatedStaticRequest, callback) {
      let postBody = createNetworkAppliancePrefixesDelegatedStaticRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkAppliancePrefixesDelegatedStatic_3");
      }
      // verify the required parameter 'createNetworkAppliancePrefixesDelegatedStaticRequest' is set
      if (createNetworkAppliancePrefixesDelegatedStaticRequest === undefined || createNetworkAppliancePrefixesDelegatedStaticRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkAppliancePrefixesDelegatedStaticRequest' when calling createNetworkAppliancePrefixesDelegatedStatic_3");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/prefixes/delegated/statics', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkAppliancePrefixesDelegatedStatic_3 operation.
     * @callback module:api/StaticsApi~deleteNetworkAppliancePrefixesDelegatedStatic_3Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a static delegated prefix from a network
     * Delete a static delegated prefix from a network
     * @param {String} networkId 
     * @param {String} staticDelegatedPrefixId 
     * @param {module:api/StaticsApi~deleteNetworkAppliancePrefixesDelegatedStatic_3Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkAppliancePrefixesDelegatedStatic_3(networkId, staticDelegatedPrefixId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkAppliancePrefixesDelegatedStatic_3");
      }
      // verify the required parameter 'staticDelegatedPrefixId' is set
      if (staticDelegatedPrefixId === undefined || staticDelegatedPrefixId === null) {
        throw new Error("Missing the required parameter 'staticDelegatedPrefixId' when calling deleteNetworkAppliancePrefixesDelegatedStatic_3");
      }

      let pathParams = {
        'networkId': networkId,
        'staticDelegatedPrefixId': staticDelegatedPrefixId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/prefixes/delegated/statics/{staticDelegatedPrefixId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkAppliancePrefixesDelegatedStatic_3 operation.
     * @callback module:api/StaticsApi~getNetworkAppliancePrefixesDelegatedStatic_3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkAppliancePrefixesDelegatedStatics200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a static delegated prefix from a network
     * Return a static delegated prefix from a network
     * @param {String} networkId 
     * @param {String} staticDelegatedPrefixId 
     * @param {module:api/StaticsApi~getNetworkAppliancePrefixesDelegatedStatic_3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkAppliancePrefixesDelegatedStatics200ResponseInner}
     */
    getNetworkAppliancePrefixesDelegatedStatic_3(networkId, staticDelegatedPrefixId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkAppliancePrefixesDelegatedStatic_3");
      }
      // verify the required parameter 'staticDelegatedPrefixId' is set
      if (staticDelegatedPrefixId === undefined || staticDelegatedPrefixId === null) {
        throw new Error("Missing the required parameter 'staticDelegatedPrefixId' when calling getNetworkAppliancePrefixesDelegatedStatic_3");
      }

      let pathParams = {
        'networkId': networkId,
        'staticDelegatedPrefixId': staticDelegatedPrefixId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkAppliancePrefixesDelegatedStatics200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/prefixes/delegated/statics/{staticDelegatedPrefixId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkAppliancePrefixesDelegatedStatics_3 operation.
     * @callback module:api/StaticsApi~getNetworkAppliancePrefixesDelegatedStatics_3Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkAppliancePrefixesDelegatedStatics200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List static delegated prefixes for a network
     * List static delegated prefixes for a network
     * @param {String} networkId 
     * @param {module:api/StaticsApi~getNetworkAppliancePrefixesDelegatedStatics_3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkAppliancePrefixesDelegatedStatics200ResponseInner>}
     */
    getNetworkAppliancePrefixesDelegatedStatics_3(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkAppliancePrefixesDelegatedStatics_3");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkAppliancePrefixesDelegatedStatics200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/prefixes/delegated/statics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkAppliancePrefixesDelegatedStatic_3 operation.
     * @callback module:api/StaticsApi~updateNetworkAppliancePrefixesDelegatedStatic_3Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a static delegated prefix from a network
     * Update a static delegated prefix from a network
     * @param {String} networkId 
     * @param {String} staticDelegatedPrefixId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkAppliancePrefixesDelegatedStaticRequest} [updateNetworkAppliancePrefixesDelegatedStaticRequest] 
     * @param {module:api/StaticsApi~updateNetworkAppliancePrefixesDelegatedStatic_3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkAppliancePrefixesDelegatedStatic_3(networkId, staticDelegatedPrefixId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkAppliancePrefixesDelegatedStaticRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkAppliancePrefixesDelegatedStatic_3");
      }
      // verify the required parameter 'staticDelegatedPrefixId' is set
      if (staticDelegatedPrefixId === undefined || staticDelegatedPrefixId === null) {
        throw new Error("Missing the required parameter 'staticDelegatedPrefixId' when calling updateNetworkAppliancePrefixesDelegatedStatic_3");
      }

      let pathParams = {
        'networkId': networkId,
        'staticDelegatedPrefixId': staticDelegatedPrefixId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/prefixes/delegated/statics/{staticDelegatedPrefixId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
