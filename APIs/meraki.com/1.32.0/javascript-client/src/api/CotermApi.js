/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetOrganizationLicensingCotermLicenses200ResponseInner from '../model/GetOrganizationLicensingCotermLicenses200ResponseInner';
import MoveOrganizationLicensingCotermLicenses200Response from '../model/MoveOrganizationLicensingCotermLicenses200Response';
import MoveOrganizationLicensingCotermLicensesRequest from '../model/MoveOrganizationLicensingCotermLicensesRequest';

/**
* Coterm service.
* @module api/CotermApi
* @version 1.32.0
*/
export default class CotermApi {

    /**
    * Constructs a new CotermApi. 
    * @alias module:api/CotermApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getOrganizationLicensingCotermLicenses_1 operation.
     * @callback module:api/CotermApi~getOrganizationLicensingCotermLicenses_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationLicensingCotermLicenses200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the licenses in a coterm organization
     * List the licenses in a coterm organization
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {Boolean} [invalidated] Filter for licenses that are invalidated
     * @param {Boolean} [expired] Filter for licenses that are expired
     * @param {module:api/CotermApi~getOrganizationLicensingCotermLicenses_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationLicensingCotermLicenses200ResponseInner>}
     */
    getOrganizationLicensingCotermLicenses_1(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationLicensingCotermLicenses_1");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        'invalidated': opts['invalidated'],
        'expired': opts['expired']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationLicensingCotermLicenses200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/licensing/coterm/licenses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the moveOrganizationLicensingCotermLicenses_1 operation.
     * @callback module:api/CotermApi~moveOrganizationLicensingCotermLicenses_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/MoveOrganizationLicensingCotermLicenses200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Moves a license to a different organization (coterm only)
     * Moves a license to a different organization (coterm only)
     * @param {String} organizationId 
     * @param {module:model/MoveOrganizationLicensingCotermLicensesRequest} moveOrganizationLicensingCotermLicensesRequest 
     * @param {module:api/CotermApi~moveOrganizationLicensingCotermLicenses_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MoveOrganizationLicensingCotermLicenses200Response}
     */
    moveOrganizationLicensingCotermLicenses_1(organizationId, moveOrganizationLicensingCotermLicensesRequest, callback) {
      let postBody = moveOrganizationLicensingCotermLicensesRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling moveOrganizationLicensingCotermLicenses_1");
      }
      // verify the required parameter 'moveOrganizationLicensingCotermLicensesRequest' is set
      if (moveOrganizationLicensingCotermLicensesRequest === undefined || moveOrganizationLicensingCotermLicensesRequest === null) {
        throw new Error("Missing the required parameter 'moveOrganizationLicensingCotermLicensesRequest' when calling moveOrganizationLicensingCotermLicenses_1");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MoveOrganizationLicensingCotermLicenses200Response;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/licensing/coterm/licenses/move', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
