/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CycleDeviceSwitchPortsRequest from '../model/CycleDeviceSwitchPortsRequest';
import GetDeviceSwitchPorts200ResponseInner from '../model/GetDeviceSwitchPorts200ResponseInner';
import GetDeviceSwitchPortsStatuses200ResponseInner from '../model/GetDeviceSwitchPortsStatuses200ResponseInner';
import GetNetworkAppliancePorts200ResponseInner from '../model/GetNetworkAppliancePorts200ResponseInner';
import GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner from '../model/GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner';
import GetOrganizationSwitchPortsBySwitch200ResponseInner from '../model/GetOrganizationSwitchPortsBySwitch200ResponseInner';
import UpdateDeviceSwitchPortRequest from '../model/UpdateDeviceSwitchPortRequest';
import UpdateNetworkAppliancePortRequest from '../model/UpdateNetworkAppliancePortRequest';
import UpdateOrganizationConfigTemplateSwitchProfilePortRequest from '../model/UpdateOrganizationConfigTemplateSwitchProfilePortRequest';

/**
* Ports service.
* @module api/PortsApi
* @version 1.32.0
*/
export default class PortsApi {

    /**
    * Constructs a new PortsApi. 
    * @alias module:api/PortsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cycleDeviceSwitchPorts_1 operation.
     * @callback module:api/PortsApi~cycleDeviceSwitchPorts_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cycle a set of switch ports
     * Cycle a set of switch ports
     * @param {String} serial 
     * @param {module:model/CycleDeviceSwitchPortsRequest} cycleDeviceSwitchPortsRequest 
     * @param {module:api/PortsApi~cycleDeviceSwitchPorts_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    cycleDeviceSwitchPorts_1(serial, cycleDeviceSwitchPortsRequest, callback) {
      let postBody = cycleDeviceSwitchPortsRequest;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling cycleDeviceSwitchPorts_1");
      }
      // verify the required parameter 'cycleDeviceSwitchPortsRequest' is set
      if (cycleDeviceSwitchPortsRequest === undefined || cycleDeviceSwitchPortsRequest === null) {
        throw new Error("Missing the required parameter 'cycleDeviceSwitchPortsRequest' when calling cycleDeviceSwitchPorts_1");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/switch/ports/cycle', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceSwitchPort_1 operation.
     * @callback module:api/PortsApi~getDeviceSwitchPort_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDeviceSwitchPorts200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a switch port
     * Return a switch port
     * @param {String} serial 
     * @param {String} portId 
     * @param {module:api/PortsApi~getDeviceSwitchPort_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDeviceSwitchPorts200ResponseInner}
     */
    getDeviceSwitchPort_1(serial, portId, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceSwitchPort_1");
      }
      // verify the required parameter 'portId' is set
      if (portId === undefined || portId === null) {
        throw new Error("Missing the required parameter 'portId' when calling getDeviceSwitchPort_1");
      }

      let pathParams = {
        'serial': serial,
        'portId': portId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDeviceSwitchPorts200ResponseInner;
      return this.apiClient.callApi(
        '/devices/{serial}/switch/ports/{portId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceSwitchPortsStatusesPackets_1 operation.
     * @callback module:api/PortsApi~getDeviceSwitchPortsStatusesPackets_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the packet counters for all the ports of a switch
     * Return the packet counters for all the ports of a switch
     * @param {String} serial 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 1 day from today.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 1 day. The default is 1 day.
     * @param {module:api/PortsApi~getDeviceSwitchPortsStatusesPackets_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getDeviceSwitchPortsStatusesPackets_1(serial, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceSwitchPortsStatusesPackets_1");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
        't0': opts['t0'],
        'timespan': opts['timespan']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/devices/{serial}/switch/ports/statuses/packets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceSwitchPortsStatuses_1 operation.
     * @callback module:api/PortsApi~getDeviceSwitchPortsStatuses_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetDeviceSwitchPortsStatuses200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the status for all the ports of a switch
     * Return the status for all the ports of a switch
     * @param {String} serial 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
     * @param {module:api/PortsApi~getDeviceSwitchPortsStatuses_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetDeviceSwitchPortsStatuses200ResponseInner>}
     */
    getDeviceSwitchPortsStatuses_1(serial, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceSwitchPortsStatuses_1");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
        't0': opts['t0'],
        'timespan': opts['timespan']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetDeviceSwitchPortsStatuses200ResponseInner];
      return this.apiClient.callApi(
        '/devices/{serial}/switch/ports/statuses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceSwitchPorts_1 operation.
     * @callback module:api/PortsApi~getDeviceSwitchPorts_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetDeviceSwitchPorts200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the switch ports for a switch
     * List the switch ports for a switch
     * @param {String} serial 
     * @param {module:api/PortsApi~getDeviceSwitchPorts_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetDeviceSwitchPorts200ResponseInner>}
     */
    getDeviceSwitchPorts_1(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceSwitchPorts_1");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetDeviceSwitchPorts200ResponseInner];
      return this.apiClient.callApi(
        '/devices/{serial}/switch/ports', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkAppliancePort_1 operation.
     * @callback module:api/PortsApi~getNetworkAppliancePort_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkAppliancePorts200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return per-port VLAN settings for a single MX port.
     * Return per-port VLAN settings for a single MX port.
     * @param {String} networkId 
     * @param {String} portId 
     * @param {module:api/PortsApi~getNetworkAppliancePort_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkAppliancePorts200ResponseInner}
     */
    getNetworkAppliancePort_1(networkId, portId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkAppliancePort_1");
      }
      // verify the required parameter 'portId' is set
      if (portId === undefined || portId === null) {
        throw new Error("Missing the required parameter 'portId' when calling getNetworkAppliancePort_1");
      }

      let pathParams = {
        'networkId': networkId,
        'portId': portId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkAppliancePorts200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/ports/{portId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkAppliancePorts_1 operation.
     * @callback module:api/PortsApi~getNetworkAppliancePorts_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkAppliancePorts200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List per-port VLAN settings for all ports of a MX.
     * List per-port VLAN settings for all ports of a MX.
     * @param {String} networkId 
     * @param {module:api/PortsApi~getNetworkAppliancePorts_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkAppliancePorts200ResponseInner>}
     */
    getNetworkAppliancePorts_1(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkAppliancePorts_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkAppliancePorts200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/ports', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationConfigTemplateSwitchProfilePort_3 operation.
     * @callback module:api/PortsApi~getOrganizationConfigTemplateSwitchProfilePort_3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a switch profile port
     * Return a switch profile port
     * @param {String} organizationId 
     * @param {String} configTemplateId 
     * @param {String} profileId 
     * @param {String} portId 
     * @param {module:api/PortsApi~getOrganizationConfigTemplateSwitchProfilePort_3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner}
     */
    getOrganizationConfigTemplateSwitchProfilePort_3(organizationId, configTemplateId, profileId, portId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationConfigTemplateSwitchProfilePort_3");
      }
      // verify the required parameter 'configTemplateId' is set
      if (configTemplateId === undefined || configTemplateId === null) {
        throw new Error("Missing the required parameter 'configTemplateId' when calling getOrganizationConfigTemplateSwitchProfilePort_3");
      }
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling getOrganizationConfigTemplateSwitchProfilePort_3");
      }
      // verify the required parameter 'portId' is set
      if (portId === undefined || portId === null) {
        throw new Error("Missing the required parameter 'portId' when calling getOrganizationConfigTemplateSwitchProfilePort_3");
      }

      let pathParams = {
        'organizationId': organizationId,
        'configTemplateId': configTemplateId,
        'profileId': profileId,
        'portId': portId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/configTemplates/{configTemplateId}/switch/profiles/{profileId}/ports/{portId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationConfigTemplateSwitchProfilePorts_3 operation.
     * @callback module:api/PortsApi~getOrganizationConfigTemplateSwitchProfilePorts_3Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return all the ports of a switch profile
     * Return all the ports of a switch profile
     * @param {String} organizationId 
     * @param {String} configTemplateId 
     * @param {String} profileId 
     * @param {module:api/PortsApi~getOrganizationConfigTemplateSwitchProfilePorts_3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner>}
     */
    getOrganizationConfigTemplateSwitchProfilePorts_3(organizationId, configTemplateId, profileId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationConfigTemplateSwitchProfilePorts_3");
      }
      // verify the required parameter 'configTemplateId' is set
      if (configTemplateId === undefined || configTemplateId === null) {
        throw new Error("Missing the required parameter 'configTemplateId' when calling getOrganizationConfigTemplateSwitchProfilePorts_3");
      }
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling getOrganizationConfigTemplateSwitchProfilePorts_3");
      }

      let pathParams = {
        'organizationId': organizationId,
        'configTemplateId': configTemplateId,
        'profileId': profileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/configTemplates/{configTemplateId}/switch/profiles/{profileId}/ports', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationSwitchPortsBySwitch_1 operation.
     * @callback module:api/PortsApi~getOrganizationSwitchPortsBySwitch_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationSwitchPortsBySwitch200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the switchports in an organization by switch
     * List the switchports in an organization by switch
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 50. Default is 50.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {Array.<String>} [networkIds] Optional parameter to filter switchports by network.
     * @param {Array.<String>} [portProfileIds] Optional parameter to filter switchports belonging to the specified switchport profiles.
     * @param {String} [name] Optional parameter to filter switchports belonging to switches by name. All returned switches will have a name that contains the search term or is an exact match.
     * @param {String} [mac] Optional parameter to filter switchports belonging to switches by MAC address. All returned switches will have a MAC address that contains the search term or is an exact match.
     * @param {Array.<String>} [macs] Optional parameter to filter switchports by one or more MAC addresses belonging to devices. All switchports returned belong to MAC addresses of switches that are an exact match.
     * @param {String} [serial] Optional parameter to filter switchports belonging to switches by serial number. All returned switches will have a serial number that contains the search term or is an exact match.
     * @param {Array.<String>} [serials] Optional parameter to filter switchports belonging to switches with one or more serial numbers. All switchports returned belong to serial numbers of switches that are an exact match.
     * @param {String} [configurationUpdatedAfter] Optional parameter to filter results by switches where the configuration has been updated after the given timestamp.
     * @param {module:api/PortsApi~getOrganizationSwitchPortsBySwitch_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationSwitchPortsBySwitch200ResponseInner>}
     */
    getOrganizationSwitchPortsBySwitch_1(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationSwitchPortsBySwitch_1");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        'networkIds': this.apiClient.buildCollectionParam(opts['networkIds'], 'csv'),
        'portProfileIds': this.apiClient.buildCollectionParam(opts['portProfileIds'], 'csv'),
        'name': opts['name'],
        'mac': opts['mac'],
        'macs': this.apiClient.buildCollectionParam(opts['macs'], 'csv'),
        'serial': opts['serial'],
        'serials': this.apiClient.buildCollectionParam(opts['serials'], 'csv'),
        'configurationUpdatedAfter': opts['configurationUpdatedAfter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationSwitchPortsBySwitch200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/switch/ports/bySwitch', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeviceSwitchPort_1 operation.
     * @callback module:api/PortsApi~updateDeviceSwitchPort_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDeviceSwitchPorts200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a switch port
     * Update a switch port
     * @param {String} serial 
     * @param {String} portId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateDeviceSwitchPortRequest} [updateDeviceSwitchPortRequest] 
     * @param {module:api/PortsApi~updateDeviceSwitchPort_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDeviceSwitchPorts200ResponseInner}
     */
    updateDeviceSwitchPort_1(serial, portId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateDeviceSwitchPortRequest'];
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling updateDeviceSwitchPort_1");
      }
      // verify the required parameter 'portId' is set
      if (portId === undefined || portId === null) {
        throw new Error("Missing the required parameter 'portId' when calling updateDeviceSwitchPort_1");
      }

      let pathParams = {
        'serial': serial,
        'portId': portId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetDeviceSwitchPorts200ResponseInner;
      return this.apiClient.callApi(
        '/devices/{serial}/switch/ports/{portId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkAppliancePort_1 operation.
     * @callback module:api/PortsApi~updateNetworkAppliancePort_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkAppliancePorts200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the per-port VLAN settings for a single MX port.
     * Update the per-port VLAN settings for a single MX port.
     * @param {String} networkId 
     * @param {String} portId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkAppliancePortRequest} [updateNetworkAppliancePortRequest] 
     * @param {module:api/PortsApi~updateNetworkAppliancePort_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkAppliancePorts200ResponseInner}
     */
    updateNetworkAppliancePort_1(networkId, portId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkAppliancePortRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkAppliancePort_1");
      }
      // verify the required parameter 'portId' is set
      if (portId === undefined || portId === null) {
        throw new Error("Missing the required parameter 'portId' when calling updateNetworkAppliancePort_1");
      }

      let pathParams = {
        'networkId': networkId,
        'portId': portId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkAppliancePorts200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/ports/{portId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationConfigTemplateSwitchProfilePort_3 operation.
     * @callback module:api/PortsApi~updateOrganizationConfigTemplateSwitchProfilePort_3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a switch profile port
     * Update a switch profile port
     * @param {String} organizationId 
     * @param {String} configTemplateId 
     * @param {String} profileId 
     * @param {String} portId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationConfigTemplateSwitchProfilePortRequest} [updateOrganizationConfigTemplateSwitchProfilePortRequest] 
     * @param {module:api/PortsApi~updateOrganizationConfigTemplateSwitchProfilePort_3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner}
     */
    updateOrganizationConfigTemplateSwitchProfilePort_3(organizationId, configTemplateId, profileId, portId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateOrganizationConfigTemplateSwitchProfilePortRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationConfigTemplateSwitchProfilePort_3");
      }
      // verify the required parameter 'configTemplateId' is set
      if (configTemplateId === undefined || configTemplateId === null) {
        throw new Error("Missing the required parameter 'configTemplateId' when calling updateOrganizationConfigTemplateSwitchProfilePort_3");
      }
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling updateOrganizationConfigTemplateSwitchProfilePort_3");
      }
      // verify the required parameter 'portId' is set
      if (portId === undefined || portId === null) {
        throw new Error("Missing the required parameter 'portId' when calling updateOrganizationConfigTemplateSwitchProfilePort_3");
      }

      let pathParams = {
        'organizationId': organizationId,
        'configTemplateId': configTemplateId,
        'profileId': profileId,
        'portId': portId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/configTemplates/{configTemplateId}/switch/profiles/{profileId}/ports/{portId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
