/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateNetworkFloorPlanRequest from '../model/CreateNetworkFloorPlanRequest';
import UpdateNetworkFloorPlanRequest from '../model/UpdateNetworkFloorPlanRequest';

/**
* FloorPlans service.
* @module api/FloorPlansApi
* @version 1.32.0
*/
export default class FloorPlansApi {

    /**
    * Constructs a new FloorPlansApi. 
    * @alias module:api/FloorPlansApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createNetworkFloorPlan_1 operation.
     * @callback module:api/FloorPlansApi~createNetworkFloorPlan_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload a floor plan
     * Upload a floor plan
     * @param {String} networkId 
     * @param {module:model/CreateNetworkFloorPlanRequest} createNetworkFloorPlanRequest 
     * @param {module:api/FloorPlansApi~createNetworkFloorPlan_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNetworkFloorPlan_1(networkId, createNetworkFloorPlanRequest, callback) {
      let postBody = createNetworkFloorPlanRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkFloorPlan_1");
      }
      // verify the required parameter 'createNetworkFloorPlanRequest' is set
      if (createNetworkFloorPlanRequest === undefined || createNetworkFloorPlanRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkFloorPlanRequest' when calling createNetworkFloorPlan_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/floorPlans', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkFloorPlan_1 operation.
     * @callback module:api/FloorPlansApi~deleteNetworkFloorPlan_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Destroy a floor plan
     * Destroy a floor plan
     * @param {String} networkId 
     * @param {String} floorPlanId 
     * @param {module:api/FloorPlansApi~deleteNetworkFloorPlan_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkFloorPlan_1(networkId, floorPlanId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkFloorPlan_1");
      }
      // verify the required parameter 'floorPlanId' is set
      if (floorPlanId === undefined || floorPlanId === null) {
        throw new Error("Missing the required parameter 'floorPlanId' when calling deleteNetworkFloorPlan_1");
      }

      let pathParams = {
        'networkId': networkId,
        'floorPlanId': floorPlanId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/floorPlans/{floorPlanId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkFloorPlan_1 operation.
     * @callback module:api/FloorPlansApi~getNetworkFloorPlan_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find a floor plan by ID
     * Find a floor plan by ID
     * @param {String} networkId 
     * @param {String} floorPlanId 
     * @param {module:api/FloorPlansApi~getNetworkFloorPlan_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkFloorPlan_1(networkId, floorPlanId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkFloorPlan_1");
      }
      // verify the required parameter 'floorPlanId' is set
      if (floorPlanId === undefined || floorPlanId === null) {
        throw new Error("Missing the required parameter 'floorPlanId' when calling getNetworkFloorPlan_1");
      }

      let pathParams = {
        'networkId': networkId,
        'floorPlanId': floorPlanId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/floorPlans/{floorPlanId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkFloorPlans_1 operation.
     * @callback module:api/FloorPlansApi~getNetworkFloorPlans_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the floor plans that belong to your network
     * List the floor plans that belong to your network
     * @param {String} networkId 
     * @param {module:api/FloorPlansApi~getNetworkFloorPlans_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkFloorPlans_1(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkFloorPlans_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/floorPlans', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkFloorPlan_1 operation.
     * @callback module:api/FloorPlansApi~updateNetworkFloorPlan_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a floor plan's geolocation and other meta data
     * Update a floor plan's geolocation and other meta data
     * @param {String} networkId 
     * @param {String} floorPlanId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkFloorPlanRequest} [updateNetworkFloorPlanRequest] 
     * @param {module:api/FloorPlansApi~updateNetworkFloorPlan_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkFloorPlan_1(networkId, floorPlanId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkFloorPlanRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkFloorPlan_1");
      }
      // verify the required parameter 'floorPlanId' is set
      if (floorPlanId === undefined || floorPlanId === null) {
        throw new Error("Missing the required parameter 'floorPlanId' when calling updateNetworkFloorPlan_1");
      }

      let pathParams = {
        'networkId': networkId,
        'floorPlanId': floorPlanId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/floorPlans/{floorPlanId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
