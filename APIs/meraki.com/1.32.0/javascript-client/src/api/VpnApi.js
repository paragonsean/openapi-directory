/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetNetworkApplianceVpnSiteToSiteVpn200Response from '../model/GetNetworkApplianceVpnSiteToSiteVpn200Response';
import GetOrganizationApplianceVpnThirdPartyVPNPeers200Response from '../model/GetOrganizationApplianceVpnThirdPartyVPNPeers200Response';
import UpdateNetworkApplianceVpnBgpRequest from '../model/UpdateNetworkApplianceVpnBgpRequest';
import UpdateNetworkApplianceVpnSiteToSiteVpnRequest from '../model/UpdateNetworkApplianceVpnSiteToSiteVpnRequest';
import UpdateNetworkWirelessSsidVpnRequest from '../model/UpdateNetworkWirelessSsidVpnRequest';
import UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequest from '../model/UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequest';
import UpdateOrganizationApplianceVpnVpnFirewallRulesRequest from '../model/UpdateOrganizationApplianceVpnVpnFirewallRulesRequest';

/**
* Vpn service.
* @module api/VpnApi
* @version 1.32.0
*/
export default class VpnApi {

    /**
    * Constructs a new VpnApi. 
    * @alias module:api/VpnApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getNetworkApplianceVpnBgp_1 operation.
     * @callback module:api/VpnApi~getNetworkApplianceVpnBgp_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a Hub BGP Configuration
     * Return a Hub BGP Configuration
     * @param {String} networkId 
     * @param {module:api/VpnApi~getNetworkApplianceVpnBgp_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkApplianceVpnBgp_1(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceVpnBgp_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/vpn/bgp', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceVpnSiteToSiteVpn_1 operation.
     * @callback module:api/VpnApi~getNetworkApplianceVpnSiteToSiteVpn_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkApplianceVpnSiteToSiteVpn200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the site-to-site VPN settings of a network
     * Return the site-to-site VPN settings of a network. Only valid for MX networks.
     * @param {String} networkId 
     * @param {module:api/VpnApi~getNetworkApplianceVpnSiteToSiteVpn_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkApplianceVpnSiteToSiteVpn200Response}
     */
    getNetworkApplianceVpnSiteToSiteVpn_1(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceVpnSiteToSiteVpn_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkApplianceVpnSiteToSiteVpn200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/vpn/siteToSiteVpn', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessSsidVpn_2 operation.
     * @callback module:api/VpnApi~getNetworkWirelessSsidVpn_2Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the VPN settings for the SSID.
     * List the VPN settings for the SSID.
     * @param {String} networkId 
     * @param {String} number 
     * @param {module:api/VpnApi~getNetworkWirelessSsidVpn_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkWirelessSsidVpn_2(networkId, number, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessSsidVpn_2");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling getNetworkWirelessSsidVpn_2");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/vpn', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationApplianceVpnStats_1 operation.
     * @callback module:api/VpnApi~getOrganizationApplianceVpnStats_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show VPN history stat for networks in an organization
     * Show VPN history stat for networks in an organization
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 300. Default is 300.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {Array.<String>} [networkIds] A list of Meraki network IDs to filter results to contain only specified networks. E.g.: networkIds[]=N_12345678&networkIds[]=L_3456
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
     * @param {module:api/VpnApi~getOrganizationApplianceVpnStats_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getOrganizationApplianceVpnStats_1(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationApplianceVpnStats_1");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        'networkIds': this.apiClient.buildCollectionParam(opts['networkIds'], 'csv'),
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/appliance/vpn/stats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationApplianceVpnStatuses_1 operation.
     * @callback module:api/VpnApi~getOrganizationApplianceVpnStatuses_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show VPN status for networks in an organization
     * Show VPN status for networks in an organization
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 300. Default is 300.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {Array.<String>} [networkIds] A list of Meraki network IDs to filter results to contain only specified networks. E.g.: networkIds[]=N_12345678&networkIds[]=L_3456
     * @param {module:api/VpnApi~getOrganizationApplianceVpnStatuses_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getOrganizationApplianceVpnStatuses_1(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationApplianceVpnStatuses_1");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        'networkIds': this.apiClient.buildCollectionParam(opts['networkIds'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/appliance/vpn/statuses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationApplianceVpnThirdPartyVPNPeers_1 operation.
     * @callback module:api/VpnApi~getOrganizationApplianceVpnThirdPartyVPNPeers_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizationApplianceVpnThirdPartyVPNPeers200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the third party VPN peers for an organization
     * Return the third party VPN peers for an organization
     * @param {String} organizationId 
     * @param {module:api/VpnApi~getOrganizationApplianceVpnThirdPartyVPNPeers_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizationApplianceVpnThirdPartyVPNPeers200Response}
     */
    getOrganizationApplianceVpnThirdPartyVPNPeers_1(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationApplianceVpnThirdPartyVPNPeers_1");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOrganizationApplianceVpnThirdPartyVPNPeers200Response;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/appliance/vpn/thirdPartyVPNPeers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationApplianceVpnVpnFirewallRules_1 operation.
     * @callback module:api/VpnApi~getOrganizationApplianceVpnVpnFirewallRules_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the firewall rules for an organization's site-to-site VPN
     * Return the firewall rules for an organization's site-to-site VPN
     * @param {String} organizationId 
     * @param {module:api/VpnApi~getOrganizationApplianceVpnVpnFirewallRules_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getOrganizationApplianceVpnVpnFirewallRules_1(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationApplianceVpnVpnFirewallRules_1");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/appliance/vpn/vpnFirewallRules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceVpnBgp_1 operation.
     * @callback module:api/VpnApi~updateNetworkApplianceVpnBgp_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Hub BGP Configuration
     * Update a Hub BGP Configuration
     * @param {String} networkId 
     * @param {module:model/UpdateNetworkApplianceVpnBgpRequest} updateNetworkApplianceVpnBgpRequest 
     * @param {module:api/VpnApi~updateNetworkApplianceVpnBgp_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkApplianceVpnBgp_1(networkId, updateNetworkApplianceVpnBgpRequest, callback) {
      let postBody = updateNetworkApplianceVpnBgpRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceVpnBgp_1");
      }
      // verify the required parameter 'updateNetworkApplianceVpnBgpRequest' is set
      if (updateNetworkApplianceVpnBgpRequest === undefined || updateNetworkApplianceVpnBgpRequest === null) {
        throw new Error("Missing the required parameter 'updateNetworkApplianceVpnBgpRequest' when calling updateNetworkApplianceVpnBgp_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/vpn/bgp', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceVpnSiteToSiteVpn_1 operation.
     * @callback module:api/VpnApi~updateNetworkApplianceVpnSiteToSiteVpn_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkApplianceVpnSiteToSiteVpn200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the site-to-site VPN settings of a network
     * Update the site-to-site VPN settings of a network. Only valid for MX networks in NAT mode.
     * @param {String} networkId 
     * @param {module:model/UpdateNetworkApplianceVpnSiteToSiteVpnRequest} updateNetworkApplianceVpnSiteToSiteVpnRequest 
     * @param {module:api/VpnApi~updateNetworkApplianceVpnSiteToSiteVpn_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkApplianceVpnSiteToSiteVpn200Response}
     */
    updateNetworkApplianceVpnSiteToSiteVpn_1(networkId, updateNetworkApplianceVpnSiteToSiteVpnRequest, callback) {
      let postBody = updateNetworkApplianceVpnSiteToSiteVpnRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceVpnSiteToSiteVpn_1");
      }
      // verify the required parameter 'updateNetworkApplianceVpnSiteToSiteVpnRequest' is set
      if (updateNetworkApplianceVpnSiteToSiteVpnRequest === undefined || updateNetworkApplianceVpnSiteToSiteVpnRequest === null) {
        throw new Error("Missing the required parameter 'updateNetworkApplianceVpnSiteToSiteVpnRequest' when calling updateNetworkApplianceVpnSiteToSiteVpn_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkApplianceVpnSiteToSiteVpn200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/vpn/siteToSiteVpn', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkWirelessSsidVpn_2 operation.
     * @callback module:api/VpnApi~updateNetworkWirelessSsidVpn_2Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the VPN settings for the SSID
     * Update the VPN settings for the SSID
     * @param {String} networkId 
     * @param {String} number 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkWirelessSsidVpnRequest} [updateNetworkWirelessSsidVpnRequest] 
     * @param {module:api/VpnApi~updateNetworkWirelessSsidVpn_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkWirelessSsidVpn_2(networkId, number, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkWirelessSsidVpnRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkWirelessSsidVpn_2");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling updateNetworkWirelessSsidVpn_2");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/vpn', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationApplianceVpnThirdPartyVPNPeers_1 operation.
     * @callback module:api/VpnApi~updateOrganizationApplianceVpnThirdPartyVPNPeers_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizationApplianceVpnThirdPartyVPNPeers200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the third party VPN peers for an organization
     * Update the third party VPN peers for an organization
     * @param {String} organizationId 
     * @param {module:model/UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequest} updateOrganizationApplianceVpnThirdPartyVPNPeersRequest 
     * @param {module:api/VpnApi~updateOrganizationApplianceVpnThirdPartyVPNPeers_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizationApplianceVpnThirdPartyVPNPeers200Response}
     */
    updateOrganizationApplianceVpnThirdPartyVPNPeers_1(organizationId, updateOrganizationApplianceVpnThirdPartyVPNPeersRequest, callback) {
      let postBody = updateOrganizationApplianceVpnThirdPartyVPNPeersRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationApplianceVpnThirdPartyVPNPeers_1");
      }
      // verify the required parameter 'updateOrganizationApplianceVpnThirdPartyVPNPeersRequest' is set
      if (updateOrganizationApplianceVpnThirdPartyVPNPeersRequest === undefined || updateOrganizationApplianceVpnThirdPartyVPNPeersRequest === null) {
        throw new Error("Missing the required parameter 'updateOrganizationApplianceVpnThirdPartyVPNPeersRequest' when calling updateOrganizationApplianceVpnThirdPartyVPNPeers_1");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetOrganizationApplianceVpnThirdPartyVPNPeers200Response;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/appliance/vpn/thirdPartyVPNPeers', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationApplianceVpnVpnFirewallRules_1 operation.
     * @callback module:api/VpnApi~updateOrganizationApplianceVpnVpnFirewallRules_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the firewall rules of an organization's site-to-site VPN
     * Update the firewall rules of an organization's site-to-site VPN
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationApplianceVpnVpnFirewallRulesRequest} [updateOrganizationApplianceVpnVpnFirewallRulesRequest] 
     * @param {module:api/VpnApi~updateOrganizationApplianceVpnVpnFirewallRules_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateOrganizationApplianceVpnVpnFirewallRules_1(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateOrganizationApplianceVpnVpnFirewallRulesRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationApplianceVpnVpnFirewallRules_1");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/appliance/vpn/vpnFirewallRules', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
