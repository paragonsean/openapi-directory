/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateDeviceApplianceVmxAuthenticationToken201Response from '../model/CreateDeviceApplianceVmxAuthenticationToken201Response';
import CreateNetworkAppliancePrefixesDelegatedStaticRequest from '../model/CreateNetworkAppliancePrefixesDelegatedStaticRequest';
import CreateNetworkApplianceStaticRouteRequest from '../model/CreateNetworkApplianceStaticRouteRequest';
import CreateNetworkApplianceTrafficShapingCustomPerformanceClassRequest from '../model/CreateNetworkApplianceTrafficShapingCustomPerformanceClassRequest';
import CreateNetworkApplianceVlan201Response from '../model/CreateNetworkApplianceVlan201Response';
import CreateNetworkApplianceVlanRequest from '../model/CreateNetworkApplianceVlanRequest';
import GetDeviceApplianceUplinksSettings200Response from '../model/GetDeviceApplianceUplinksSettings200Response';
import GetNetworkAppliancePorts200ResponseInner from '../model/GetNetworkAppliancePorts200ResponseInner';
import GetNetworkAppliancePrefixesDelegatedStatics200ResponseInner from '../model/GetNetworkAppliancePrefixesDelegatedStatics200ResponseInner';
import GetNetworkApplianceSettings200Response from '../model/GetNetworkApplianceSettings200Response';
import GetNetworkApplianceSingleLan200Response from '../model/GetNetworkApplianceSingleLan200Response';
import GetNetworkApplianceSsids200ResponseInner from '../model/GetNetworkApplianceSsids200ResponseInner';
import GetNetworkApplianceTrafficShapingUplinkBandwidth200Response from '../model/GetNetworkApplianceTrafficShapingUplinkBandwidth200Response';
import GetNetworkApplianceTrafficShapingUplinkSelection200Response from '../model/GetNetworkApplianceTrafficShapingUplinkSelection200Response';
import GetNetworkApplianceVlans200ResponseInner from '../model/GetNetworkApplianceVlans200ResponseInner';
import GetNetworkApplianceVpnSiteToSiteVpn200Response from '../model/GetNetworkApplianceVpnSiteToSiteVpn200Response';
import GetOrganizationApplianceVpnThirdPartyVPNPeers200Response from '../model/GetOrganizationApplianceVpnThirdPartyVPNPeers200Response';
import UpdateDeviceApplianceUplinksSettingsRequest from '../model/UpdateDeviceApplianceUplinksSettingsRequest';
import UpdateNetworkApplianceConnectivityMonitoringDestinationsRequest from '../model/UpdateNetworkApplianceConnectivityMonitoringDestinationsRequest';
import UpdateNetworkApplianceContentFilteringRequest from '../model/UpdateNetworkApplianceContentFilteringRequest';
import UpdateNetworkApplianceFirewallCellularFirewallRulesRequest from '../model/UpdateNetworkApplianceFirewallCellularFirewallRulesRequest';
import UpdateNetworkApplianceFirewallFirewalledServiceRequest from '../model/UpdateNetworkApplianceFirewallFirewalledServiceRequest';
import UpdateNetworkApplianceFirewallInboundFirewallRulesRequest from '../model/UpdateNetworkApplianceFirewallInboundFirewallRulesRequest';
import UpdateNetworkApplianceFirewallL7FirewallRulesRequest from '../model/UpdateNetworkApplianceFirewallL7FirewallRulesRequest';
import UpdateNetworkApplianceFirewallOneToManyNatRulesRequest from '../model/UpdateNetworkApplianceFirewallOneToManyNatRulesRequest';
import UpdateNetworkApplianceFirewallOneToOneNatRulesRequest from '../model/UpdateNetworkApplianceFirewallOneToOneNatRulesRequest';
import UpdateNetworkApplianceFirewallPortForwardingRulesRequest from '../model/UpdateNetworkApplianceFirewallPortForwardingRulesRequest';
import UpdateNetworkApplianceFirewallSettingsRequest from '../model/UpdateNetworkApplianceFirewallSettingsRequest';
import UpdateNetworkAppliancePortRequest from '../model/UpdateNetworkAppliancePortRequest';
import UpdateNetworkAppliancePrefixesDelegatedStaticRequest from '../model/UpdateNetworkAppliancePrefixesDelegatedStaticRequest';
import UpdateNetworkApplianceSecurityIntrusionRequest from '../model/UpdateNetworkApplianceSecurityIntrusionRequest';
import UpdateNetworkApplianceSecurityMalwareRequest from '../model/UpdateNetworkApplianceSecurityMalwareRequest';
import UpdateNetworkApplianceSettingsRequest from '../model/UpdateNetworkApplianceSettingsRequest';
import UpdateNetworkApplianceSingleLanRequest from '../model/UpdateNetworkApplianceSingleLanRequest';
import UpdateNetworkApplianceSsidRequest from '../model/UpdateNetworkApplianceSsidRequest';
import UpdateNetworkApplianceStaticRouteRequest from '../model/UpdateNetworkApplianceStaticRouteRequest';
import UpdateNetworkApplianceTrafficShapingCustomPerformanceClassRequest from '../model/UpdateNetworkApplianceTrafficShapingCustomPerformanceClassRequest';
import UpdateNetworkApplianceTrafficShapingRequest from '../model/UpdateNetworkApplianceTrafficShapingRequest';
import UpdateNetworkApplianceTrafficShapingRulesRequest from '../model/UpdateNetworkApplianceTrafficShapingRulesRequest';
import UpdateNetworkApplianceTrafficShapingUplinkBandwidthRequest from '../model/UpdateNetworkApplianceTrafficShapingUplinkBandwidthRequest';
import UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest from '../model/UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest';
import UpdateNetworkApplianceVlanRequest from '../model/UpdateNetworkApplianceVlanRequest';
import UpdateNetworkApplianceVlansSettingsRequest from '../model/UpdateNetworkApplianceVlansSettingsRequest';
import UpdateNetworkApplianceVpnBgpRequest from '../model/UpdateNetworkApplianceVpnBgpRequest';
import UpdateNetworkApplianceVpnSiteToSiteVpnRequest from '../model/UpdateNetworkApplianceVpnSiteToSiteVpnRequest';
import UpdateNetworkApplianceWarmSpareRequest from '../model/UpdateNetworkApplianceWarmSpareRequest';
import UpdateOrganizationApplianceSecurityIntrusionRequest from '../model/UpdateOrganizationApplianceSecurityIntrusionRequest';
import UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequest from '../model/UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequest';
import UpdateOrganizationApplianceVpnVpnFirewallRulesRequest from '../model/UpdateOrganizationApplianceVpnVpnFirewallRulesRequest';

/**
* Appliance service.
* @module api/ApplianceApi
* @version 1.32.0
*/
export default class ApplianceApi {

    /**
    * Constructs a new ApplianceApi. 
    * @alias module:api/ApplianceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createDeviceApplianceVmxAuthenticationToken operation.
     * @callback module:api/ApplianceApi~createDeviceApplianceVmxAuthenticationTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDeviceApplianceVmxAuthenticationToken201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate a new vMX authentication token
     * Generate a new vMX authentication token
     * @param {String} serial 
     * @param {module:api/ApplianceApi~createDeviceApplianceVmxAuthenticationTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDeviceApplianceVmxAuthenticationToken201Response}
     */
    createDeviceApplianceVmxAuthenticationToken(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling createDeviceApplianceVmxAuthenticationToken");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreateDeviceApplianceVmxAuthenticationToken201Response;
      return this.apiClient.callApi(
        '/devices/{serial}/appliance/vmx/authenticationToken', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkAppliancePrefixesDelegatedStatic operation.
     * @callback module:api/ApplianceApi~createNetworkAppliancePrefixesDelegatedStaticCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a static delegated prefix from a network
     * Add a static delegated prefix from a network
     * @param {String} networkId 
     * @param {module:model/CreateNetworkAppliancePrefixesDelegatedStaticRequest} createNetworkAppliancePrefixesDelegatedStaticRequest 
     * @param {module:api/ApplianceApi~createNetworkAppliancePrefixesDelegatedStaticCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNetworkAppliancePrefixesDelegatedStatic(networkId, createNetworkAppliancePrefixesDelegatedStaticRequest, callback) {
      let postBody = createNetworkAppliancePrefixesDelegatedStaticRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkAppliancePrefixesDelegatedStatic");
      }
      // verify the required parameter 'createNetworkAppliancePrefixesDelegatedStaticRequest' is set
      if (createNetworkAppliancePrefixesDelegatedStaticRequest === undefined || createNetworkAppliancePrefixesDelegatedStaticRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkAppliancePrefixesDelegatedStaticRequest' when calling createNetworkAppliancePrefixesDelegatedStatic");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/prefixes/delegated/statics', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkApplianceStaticRoute operation.
     * @callback module:api/ApplianceApi~createNetworkApplianceStaticRouteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a static route for an MX or teleworker network
     * Add a static route for an MX or teleworker network
     * @param {String} networkId 
     * @param {module:model/CreateNetworkApplianceStaticRouteRequest} createNetworkApplianceStaticRouteRequest 
     * @param {module:api/ApplianceApi~createNetworkApplianceStaticRouteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNetworkApplianceStaticRoute(networkId, createNetworkApplianceStaticRouteRequest, callback) {
      let postBody = createNetworkApplianceStaticRouteRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkApplianceStaticRoute");
      }
      // verify the required parameter 'createNetworkApplianceStaticRouteRequest' is set
      if (createNetworkApplianceStaticRouteRequest === undefined || createNetworkApplianceStaticRouteRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkApplianceStaticRouteRequest' when calling createNetworkApplianceStaticRoute");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/staticRoutes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkApplianceTrafficShapingCustomPerformanceClass operation.
     * @callback module:api/ApplianceApi~createNetworkApplianceTrafficShapingCustomPerformanceClassCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a custom performance class for an MX network
     * Add a custom performance class for an MX network
     * @param {String} networkId 
     * @param {module:model/CreateNetworkApplianceTrafficShapingCustomPerformanceClassRequest} createNetworkApplianceTrafficShapingCustomPerformanceClassRequest 
     * @param {module:api/ApplianceApi~createNetworkApplianceTrafficShapingCustomPerformanceClassCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNetworkApplianceTrafficShapingCustomPerformanceClass(networkId, createNetworkApplianceTrafficShapingCustomPerformanceClassRequest, callback) {
      let postBody = createNetworkApplianceTrafficShapingCustomPerformanceClassRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkApplianceTrafficShapingCustomPerformanceClass");
      }
      // verify the required parameter 'createNetworkApplianceTrafficShapingCustomPerformanceClassRequest' is set
      if (createNetworkApplianceTrafficShapingCustomPerformanceClassRequest === undefined || createNetworkApplianceTrafficShapingCustomPerformanceClassRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkApplianceTrafficShapingCustomPerformanceClassRequest' when calling createNetworkApplianceTrafficShapingCustomPerformanceClass");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/trafficShaping/customPerformanceClasses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkApplianceVlan operation.
     * @callback module:api/ApplianceApi~createNetworkApplianceVlanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateNetworkApplianceVlan201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a VLAN
     * Add a VLAN
     * @param {String} networkId 
     * @param {module:model/CreateNetworkApplianceVlanRequest} createNetworkApplianceVlanRequest 
     * @param {module:api/ApplianceApi~createNetworkApplianceVlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateNetworkApplianceVlan201Response}
     */
    createNetworkApplianceVlan(networkId, createNetworkApplianceVlanRequest, callback) {
      let postBody = createNetworkApplianceVlanRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkApplianceVlan");
      }
      // verify the required parameter 'createNetworkApplianceVlanRequest' is set
      if (createNetworkApplianceVlanRequest === undefined || createNetworkApplianceVlanRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkApplianceVlanRequest' when calling createNetworkApplianceVlan");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateNetworkApplianceVlan201Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/vlans', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkAppliancePrefixesDelegatedStatic operation.
     * @callback module:api/ApplianceApi~deleteNetworkAppliancePrefixesDelegatedStaticCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a static delegated prefix from a network
     * Delete a static delegated prefix from a network
     * @param {String} networkId 
     * @param {String} staticDelegatedPrefixId 
     * @param {module:api/ApplianceApi~deleteNetworkAppliancePrefixesDelegatedStaticCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkAppliancePrefixesDelegatedStatic(networkId, staticDelegatedPrefixId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkAppliancePrefixesDelegatedStatic");
      }
      // verify the required parameter 'staticDelegatedPrefixId' is set
      if (staticDelegatedPrefixId === undefined || staticDelegatedPrefixId === null) {
        throw new Error("Missing the required parameter 'staticDelegatedPrefixId' when calling deleteNetworkAppliancePrefixesDelegatedStatic");
      }

      let pathParams = {
        'networkId': networkId,
        'staticDelegatedPrefixId': staticDelegatedPrefixId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/prefixes/delegated/statics/{staticDelegatedPrefixId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkApplianceStaticRoute operation.
     * @callback module:api/ApplianceApi~deleteNetworkApplianceStaticRouteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a static route from an MX or teleworker network
     * Delete a static route from an MX or teleworker network
     * @param {String} networkId 
     * @param {String} staticRouteId 
     * @param {module:api/ApplianceApi~deleteNetworkApplianceStaticRouteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkApplianceStaticRoute(networkId, staticRouteId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkApplianceStaticRoute");
      }
      // verify the required parameter 'staticRouteId' is set
      if (staticRouteId === undefined || staticRouteId === null) {
        throw new Error("Missing the required parameter 'staticRouteId' when calling deleteNetworkApplianceStaticRoute");
      }

      let pathParams = {
        'networkId': networkId,
        'staticRouteId': staticRouteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/staticRoutes/{staticRouteId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkApplianceTrafficShapingCustomPerformanceClass operation.
     * @callback module:api/ApplianceApi~deleteNetworkApplianceTrafficShapingCustomPerformanceClassCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a custom performance class from an MX network
     * Delete a custom performance class from an MX network
     * @param {String} networkId 
     * @param {String} customPerformanceClassId 
     * @param {module:api/ApplianceApi~deleteNetworkApplianceTrafficShapingCustomPerformanceClassCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkApplianceTrafficShapingCustomPerformanceClass(networkId, customPerformanceClassId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkApplianceTrafficShapingCustomPerformanceClass");
      }
      // verify the required parameter 'customPerformanceClassId' is set
      if (customPerformanceClassId === undefined || customPerformanceClassId === null) {
        throw new Error("Missing the required parameter 'customPerformanceClassId' when calling deleteNetworkApplianceTrafficShapingCustomPerformanceClass");
      }

      let pathParams = {
        'networkId': networkId,
        'customPerformanceClassId': customPerformanceClassId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/trafficShaping/customPerformanceClasses/{customPerformanceClassId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkApplianceVlan operation.
     * @callback module:api/ApplianceApi~deleteNetworkApplianceVlanCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a VLAN from a network
     * Delete a VLAN from a network
     * @param {String} networkId 
     * @param {String} vlanId 
     * @param {module:api/ApplianceApi~deleteNetworkApplianceVlanCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkApplianceVlan(networkId, vlanId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkApplianceVlan");
      }
      // verify the required parameter 'vlanId' is set
      if (vlanId === undefined || vlanId === null) {
        throw new Error("Missing the required parameter 'vlanId' when calling deleteNetworkApplianceVlan");
      }

      let pathParams = {
        'networkId': networkId,
        'vlanId': vlanId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/vlans/{vlanId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceApplianceDhcpSubnets operation.
     * @callback module:api/ApplianceApi~getDeviceApplianceDhcpSubnetsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the DHCP subnet information for an appliance
     * Return the DHCP subnet information for an appliance
     * @param {String} serial 
     * @param {module:api/ApplianceApi~getDeviceApplianceDhcpSubnetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getDeviceApplianceDhcpSubnets(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceApplianceDhcpSubnets");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/devices/{serial}/appliance/dhcp/subnets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceAppliancePerformance operation.
     * @callback module:api/ApplianceApi~getDeviceAppliancePerformanceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the performance score for a single MX
     * Return the performance score for a single MX. Only primary MX devices supported. If no data is available, a 204 error code is returned.
     * @param {String} serial 
     * @param {module:api/ApplianceApi~getDeviceAppliancePerformanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getDeviceAppliancePerformance(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceAppliancePerformance");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/appliance/performance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceAppliancePrefixesDelegated operation.
     * @callback module:api/ApplianceApi~getDeviceAppliancePrefixesDelegatedCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return current delegated IPv6 prefixes on an appliance.
     * Return current delegated IPv6 prefixes on an appliance.
     * @param {String} serial 
     * @param {module:api/ApplianceApi~getDeviceAppliancePrefixesDelegatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getDeviceAppliancePrefixesDelegated(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceAppliancePrefixesDelegated");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/devices/{serial}/appliance/prefixes/delegated', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceAppliancePrefixesDelegatedVlanAssignments operation.
     * @callback module:api/ApplianceApi~getDeviceAppliancePrefixesDelegatedVlanAssignmentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return prefixes assigned to all IPv6 enabled VLANs on an appliance.
     * Return prefixes assigned to all IPv6 enabled VLANs on an appliance.
     * @param {String} serial 
     * @param {module:api/ApplianceApi~getDeviceAppliancePrefixesDelegatedVlanAssignmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getDeviceAppliancePrefixesDelegatedVlanAssignments(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceAppliancePrefixesDelegatedVlanAssignments");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/devices/{serial}/appliance/prefixes/delegated/vlanAssignments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceApplianceUplinksSettings operation.
     * @callback module:api/ApplianceApi~getDeviceApplianceUplinksSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDeviceApplianceUplinksSettings200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the uplink settings for an MX appliance
     * Return the uplink settings for an MX appliance
     * @param {String} serial 
     * @param {module:api/ApplianceApi~getDeviceApplianceUplinksSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDeviceApplianceUplinksSettings200Response}
     */
    getDeviceApplianceUplinksSettings(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceApplianceUplinksSettings");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDeviceApplianceUplinksSettings200Response;
      return this.apiClient.callApi(
        '/devices/{serial}/appliance/uplinks/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceClientSecurityEvents operation.
     * @callback module:api/ApplianceApi~getNetworkApplianceClientSecurityEventsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the security events for a client
     * List the security events for a client. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param {String} networkId 
     * @param {String} clientId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. Data is gathered after the specified t0 value. The maximum lookback period is 791 days from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 791 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 791 days. The default is 31 days.
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:model/String} [sortOrder] Sorted order of security events based on event detection time. Order options are 'ascending' or 'descending'. Default is ascending order.
     * @param {module:api/ApplianceApi~getNetworkApplianceClientSecurityEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkApplianceClientSecurityEvents(networkId, clientId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceClientSecurityEvents");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getNetworkApplianceClientSecurityEvents");
      }

      let pathParams = {
        'networkId': networkId,
        'clientId': clientId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan'],
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        'sortOrder': opts['sortOrder']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/clients/{clientId}/security/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceConnectivityMonitoringDestinations operation.
     * @callback module:api/ApplianceApi~getNetworkApplianceConnectivityMonitoringDestinationsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the connectivity testing destinations for an MX network
     * Return the connectivity testing destinations for an MX network
     * @param {String} networkId 
     * @param {module:api/ApplianceApi~getNetworkApplianceConnectivityMonitoringDestinationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkApplianceConnectivityMonitoringDestinations(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceConnectivityMonitoringDestinations");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/connectivityMonitoringDestinations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceContentFiltering operation.
     * @callback module:api/ApplianceApi~getNetworkApplianceContentFilteringCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the content filtering settings for an MX network
     * Return the content filtering settings for an MX network
     * @param {String} networkId 
     * @param {module:api/ApplianceApi~getNetworkApplianceContentFilteringCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkApplianceContentFiltering(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceContentFiltering");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/contentFiltering', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceContentFilteringCategories operation.
     * @callback module:api/ApplianceApi~getNetworkApplianceContentFilteringCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all available content filtering categories for an MX network
     * List all available content filtering categories for an MX network
     * @param {String} networkId 
     * @param {module:api/ApplianceApi~getNetworkApplianceContentFilteringCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkApplianceContentFilteringCategories(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceContentFilteringCategories");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/contentFiltering/categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceFirewallCellularFirewallRules operation.
     * @callback module:api/ApplianceApi~getNetworkApplianceFirewallCellularFirewallRulesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the cellular firewall rules for an MX network
     * Return the cellular firewall rules for an MX network
     * @param {String} networkId 
     * @param {module:api/ApplianceApi~getNetworkApplianceFirewallCellularFirewallRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkApplianceFirewallCellularFirewallRules(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceFirewallCellularFirewallRules");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/cellularFirewallRules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceFirewallFirewalledService operation.
     * @callback module:api/ApplianceApi~getNetworkApplianceFirewallFirewalledServiceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the accessibility settings of the given service ('ICMP', 'web', or 'SNMP')
     * Return the accessibility settings of the given service ('ICMP', 'web', or 'SNMP')
     * @param {String} networkId 
     * @param {String} service 
     * @param {module:api/ApplianceApi~getNetworkApplianceFirewallFirewalledServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkApplianceFirewallFirewalledService(networkId, service, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceFirewallFirewalledService");
      }
      // verify the required parameter 'service' is set
      if (service === undefined || service === null) {
        throw new Error("Missing the required parameter 'service' when calling getNetworkApplianceFirewallFirewalledService");
      }

      let pathParams = {
        'networkId': networkId,
        'service': service
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/firewalledServices/{service}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceFirewallFirewalledServices operation.
     * @callback module:api/ApplianceApi~getNetworkApplianceFirewallFirewalledServicesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the appliance services and their accessibility rules
     * List the appliance services and their accessibility rules
     * @param {String} networkId 
     * @param {module:api/ApplianceApi~getNetworkApplianceFirewallFirewalledServicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkApplianceFirewallFirewalledServices(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceFirewallFirewalledServices");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/firewalledServices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceFirewallInboundCellularFirewallRules operation.
     * @callback module:api/ApplianceApi~getNetworkApplianceFirewallInboundCellularFirewallRulesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the inbound cellular firewall rules for an MX network
     * Return the inbound cellular firewall rules for an MX network
     * @param {String} networkId 
     * @param {module:api/ApplianceApi~getNetworkApplianceFirewallInboundCellularFirewallRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkApplianceFirewallInboundCellularFirewallRules(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceFirewallInboundCellularFirewallRules");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/inboundCellularFirewallRules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceFirewallInboundFirewallRules operation.
     * @callback module:api/ApplianceApi~getNetworkApplianceFirewallInboundFirewallRulesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the inbound firewall rules for an MX network
     * Return the inbound firewall rules for an MX network
     * @param {String} networkId 
     * @param {module:api/ApplianceApi~getNetworkApplianceFirewallInboundFirewallRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkApplianceFirewallInboundFirewallRules(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceFirewallInboundFirewallRules");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/inboundFirewallRules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceFirewallL3FirewallRules operation.
     * @callback module:api/ApplianceApi~getNetworkApplianceFirewallL3FirewallRulesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the L3 firewall rules for an MX network
     * Return the L3 firewall rules for an MX network
     * @param {String} networkId 
     * @param {module:api/ApplianceApi~getNetworkApplianceFirewallL3FirewallRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkApplianceFirewallL3FirewallRules(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceFirewallL3FirewallRules");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/l3FirewallRules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceFirewallL7FirewallRules operation.
     * @callback module:api/ApplianceApi~getNetworkApplianceFirewallL7FirewallRulesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the MX L7 firewall rules for an MX network
     * List the MX L7 firewall rules for an MX network
     * @param {String} networkId 
     * @param {module:api/ApplianceApi~getNetworkApplianceFirewallL7FirewallRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkApplianceFirewallL7FirewallRules(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceFirewallL7FirewallRules");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/l7FirewallRules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceFirewallL7FirewallRulesApplicationCategories operation.
     * @callback module:api/ApplianceApi~getNetworkApplianceFirewallL7FirewallRulesApplicationCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the L7 firewall application categories and their associated applications for an MX network
     * Return the L7 firewall application categories and their associated applications for an MX network
     * @param {String} networkId 
     * @param {module:api/ApplianceApi~getNetworkApplianceFirewallL7FirewallRulesApplicationCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkApplianceFirewallL7FirewallRulesApplicationCategories(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceFirewallL7FirewallRulesApplicationCategories");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/l7FirewallRules/applicationCategories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceFirewallOneToManyNatRules operation.
     * @callback module:api/ApplianceApi~getNetworkApplianceFirewallOneToManyNatRulesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the 1:Many NAT mapping rules for an MX network
     * Return the 1:Many NAT mapping rules for an MX network
     * @param {String} networkId 
     * @param {module:api/ApplianceApi~getNetworkApplianceFirewallOneToManyNatRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkApplianceFirewallOneToManyNatRules(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceFirewallOneToManyNatRules");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/oneToManyNatRules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceFirewallOneToOneNatRules operation.
     * @callback module:api/ApplianceApi~getNetworkApplianceFirewallOneToOneNatRulesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the 1:1 NAT mapping rules for an MX network
     * Return the 1:1 NAT mapping rules for an MX network
     * @param {String} networkId 
     * @param {module:api/ApplianceApi~getNetworkApplianceFirewallOneToOneNatRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkApplianceFirewallOneToOneNatRules(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceFirewallOneToOneNatRules");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/oneToOneNatRules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceFirewallPortForwardingRules operation.
     * @callback module:api/ApplianceApi~getNetworkApplianceFirewallPortForwardingRulesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the port forwarding rules for an MX network
     * Return the port forwarding rules for an MX network
     * @param {String} networkId 
     * @param {module:api/ApplianceApi~getNetworkApplianceFirewallPortForwardingRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkApplianceFirewallPortForwardingRules(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceFirewallPortForwardingRules");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/portForwardingRules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceFirewallSettings operation.
     * @callback module:api/ApplianceApi~getNetworkApplianceFirewallSettingsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the firewall settings for this network
     * Return the firewall settings for this network
     * @param {String} networkId 
     * @param {module:api/ApplianceApi~getNetworkApplianceFirewallSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkApplianceFirewallSettings(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceFirewallSettings");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkAppliancePort operation.
     * @callback module:api/ApplianceApi~getNetworkAppliancePortCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkAppliancePorts200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return per-port VLAN settings for a single MX port.
     * Return per-port VLAN settings for a single MX port.
     * @param {String} networkId 
     * @param {String} portId 
     * @param {module:api/ApplianceApi~getNetworkAppliancePortCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkAppliancePorts200ResponseInner}
     */
    getNetworkAppliancePort(networkId, portId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkAppliancePort");
      }
      // verify the required parameter 'portId' is set
      if (portId === undefined || portId === null) {
        throw new Error("Missing the required parameter 'portId' when calling getNetworkAppliancePort");
      }

      let pathParams = {
        'networkId': networkId,
        'portId': portId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkAppliancePorts200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/ports/{portId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkAppliancePorts operation.
     * @callback module:api/ApplianceApi~getNetworkAppliancePortsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkAppliancePorts200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List per-port VLAN settings for all ports of a MX.
     * List per-port VLAN settings for all ports of a MX.
     * @param {String} networkId 
     * @param {module:api/ApplianceApi~getNetworkAppliancePortsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkAppliancePorts200ResponseInner>}
     */
    getNetworkAppliancePorts(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkAppliancePorts");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkAppliancePorts200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/ports', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkAppliancePrefixesDelegatedStatic operation.
     * @callback module:api/ApplianceApi~getNetworkAppliancePrefixesDelegatedStaticCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkAppliancePrefixesDelegatedStatics200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a static delegated prefix from a network
     * Return a static delegated prefix from a network
     * @param {String} networkId 
     * @param {String} staticDelegatedPrefixId 
     * @param {module:api/ApplianceApi~getNetworkAppliancePrefixesDelegatedStaticCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkAppliancePrefixesDelegatedStatics200ResponseInner}
     */
    getNetworkAppliancePrefixesDelegatedStatic(networkId, staticDelegatedPrefixId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkAppliancePrefixesDelegatedStatic");
      }
      // verify the required parameter 'staticDelegatedPrefixId' is set
      if (staticDelegatedPrefixId === undefined || staticDelegatedPrefixId === null) {
        throw new Error("Missing the required parameter 'staticDelegatedPrefixId' when calling getNetworkAppliancePrefixesDelegatedStatic");
      }

      let pathParams = {
        'networkId': networkId,
        'staticDelegatedPrefixId': staticDelegatedPrefixId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkAppliancePrefixesDelegatedStatics200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/prefixes/delegated/statics/{staticDelegatedPrefixId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkAppliancePrefixesDelegatedStatics operation.
     * @callback module:api/ApplianceApi~getNetworkAppliancePrefixesDelegatedStaticsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkAppliancePrefixesDelegatedStatics200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List static delegated prefixes for a network
     * List static delegated prefixes for a network
     * @param {String} networkId 
     * @param {module:api/ApplianceApi~getNetworkAppliancePrefixesDelegatedStaticsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkAppliancePrefixesDelegatedStatics200ResponseInner>}
     */
    getNetworkAppliancePrefixesDelegatedStatics(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkAppliancePrefixesDelegatedStatics");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkAppliancePrefixesDelegatedStatics200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/prefixes/delegated/statics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceSecurityEvents operation.
     * @callback module:api/ApplianceApi~getNetworkApplianceSecurityEventsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the security events for a network
     * List the security events for a network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. Data is gathered after the specified t0 value. The maximum lookback period is 365 days from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 365 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 365 days. The default is 31 days.
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:model/String} [sortOrder] Sorted order of security events based on event detection time. Order options are 'ascending' or 'descending'. Default is ascending order.
     * @param {module:api/ApplianceApi~getNetworkApplianceSecurityEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkApplianceSecurityEvents(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceSecurityEvents");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan'],
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        'sortOrder': opts['sortOrder']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/security/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceSecurityIntrusion operation.
     * @callback module:api/ApplianceApi~getNetworkApplianceSecurityIntrusionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all supported intrusion settings for an MX network
     * Returns all supported intrusion settings for an MX network
     * @param {String} networkId 
     * @param {module:api/ApplianceApi~getNetworkApplianceSecurityIntrusionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkApplianceSecurityIntrusion(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceSecurityIntrusion");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/security/intrusion', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceSecurityMalware operation.
     * @callback module:api/ApplianceApi~getNetworkApplianceSecurityMalwareCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all supported malware settings for an MX network
     * Returns all supported malware settings for an MX network
     * @param {String} networkId 
     * @param {module:api/ApplianceApi~getNetworkApplianceSecurityMalwareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkApplianceSecurityMalware(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceSecurityMalware");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/security/malware', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceSettings operation.
     * @callback module:api/ApplianceApi~getNetworkApplianceSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkApplianceSettings200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the appliance settings for a network
     * Return the appliance settings for a network
     * @param {String} networkId 
     * @param {module:api/ApplianceApi~getNetworkApplianceSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkApplianceSettings200Response}
     */
    getNetworkApplianceSettings(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceSettings");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkApplianceSettings200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceSingleLan operation.
     * @callback module:api/ApplianceApi~getNetworkApplianceSingleLanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkApplianceSingleLan200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return single LAN configuration
     * Return single LAN configuration
     * @param {String} networkId 
     * @param {module:api/ApplianceApi~getNetworkApplianceSingleLanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkApplianceSingleLan200Response}
     */
    getNetworkApplianceSingleLan(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceSingleLan");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkApplianceSingleLan200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/singleLan', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceSsid operation.
     * @callback module:api/ApplianceApi~getNetworkApplianceSsidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkApplianceSsids200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a single MX SSID
     * Return a single MX SSID
     * @param {String} networkId 
     * @param {String} number 
     * @param {module:api/ApplianceApi~getNetworkApplianceSsidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkApplianceSsids200ResponseInner}
     */
    getNetworkApplianceSsid(networkId, number, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceSsid");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling getNetworkApplianceSsid");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkApplianceSsids200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/ssids/{number}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceSsids operation.
     * @callback module:api/ApplianceApi~getNetworkApplianceSsidsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkApplianceSsids200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the MX SSIDs in a network
     * List the MX SSIDs in a network
     * @param {String} networkId 
     * @param {module:api/ApplianceApi~getNetworkApplianceSsidsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkApplianceSsids200ResponseInner>}
     */
    getNetworkApplianceSsids(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceSsids");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkApplianceSsids200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/ssids', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceStaticRoute operation.
     * @callback module:api/ApplianceApi~getNetworkApplianceStaticRouteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a static route for an MX or teleworker network
     * Return a static route for an MX or teleworker network
     * @param {String} networkId 
     * @param {String} staticRouteId 
     * @param {module:api/ApplianceApi~getNetworkApplianceStaticRouteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkApplianceStaticRoute(networkId, staticRouteId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceStaticRoute");
      }
      // verify the required parameter 'staticRouteId' is set
      if (staticRouteId === undefined || staticRouteId === null) {
        throw new Error("Missing the required parameter 'staticRouteId' when calling getNetworkApplianceStaticRoute");
      }

      let pathParams = {
        'networkId': networkId,
        'staticRouteId': staticRouteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/staticRoutes/{staticRouteId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceStaticRoutes operation.
     * @callback module:api/ApplianceApi~getNetworkApplianceStaticRoutesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the static routes for an MX or teleworker network
     * List the static routes for an MX or teleworker network
     * @param {String} networkId 
     * @param {module:api/ApplianceApi~getNetworkApplianceStaticRoutesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkApplianceStaticRoutes(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceStaticRoutes");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/staticRoutes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceTrafficShaping operation.
     * @callback module:api/ApplianceApi~getNetworkApplianceTrafficShapingCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Display the traffic shaping settings for an MX network
     * Display the traffic shaping settings for an MX network
     * @param {String} networkId 
     * @param {module:api/ApplianceApi~getNetworkApplianceTrafficShapingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkApplianceTrafficShaping(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceTrafficShaping");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/trafficShaping', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceTrafficShapingCustomPerformanceClass operation.
     * @callback module:api/ApplianceApi~getNetworkApplianceTrafficShapingCustomPerformanceClassCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a custom performance class for an MX network
     * Return a custom performance class for an MX network
     * @param {String} networkId 
     * @param {String} customPerformanceClassId 
     * @param {module:api/ApplianceApi~getNetworkApplianceTrafficShapingCustomPerformanceClassCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkApplianceTrafficShapingCustomPerformanceClass(networkId, customPerformanceClassId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceTrafficShapingCustomPerformanceClass");
      }
      // verify the required parameter 'customPerformanceClassId' is set
      if (customPerformanceClassId === undefined || customPerformanceClassId === null) {
        throw new Error("Missing the required parameter 'customPerformanceClassId' when calling getNetworkApplianceTrafficShapingCustomPerformanceClass");
      }

      let pathParams = {
        'networkId': networkId,
        'customPerformanceClassId': customPerformanceClassId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/trafficShaping/customPerformanceClasses/{customPerformanceClassId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceTrafficShapingCustomPerformanceClasses operation.
     * @callback module:api/ApplianceApi~getNetworkApplianceTrafficShapingCustomPerformanceClassesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all custom performance classes for an MX network
     * List all custom performance classes for an MX network
     * @param {String} networkId 
     * @param {module:api/ApplianceApi~getNetworkApplianceTrafficShapingCustomPerformanceClassesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkApplianceTrafficShapingCustomPerformanceClasses(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceTrafficShapingCustomPerformanceClasses");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/trafficShaping/customPerformanceClasses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceTrafficShapingRules operation.
     * @callback module:api/ApplianceApi~getNetworkApplianceTrafficShapingRulesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Display the traffic shaping settings rules for an MX network
     * Display the traffic shaping settings rules for an MX network
     * @param {String} networkId 
     * @param {module:api/ApplianceApi~getNetworkApplianceTrafficShapingRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkApplianceTrafficShapingRules(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceTrafficShapingRules");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/trafficShaping/rules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceTrafficShapingUplinkBandwidth operation.
     * @callback module:api/ApplianceApi~getNetworkApplianceTrafficShapingUplinkBandwidthCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkApplianceTrafficShapingUplinkBandwidth200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the uplink bandwidth limits for your MX network
     * Returns the uplink bandwidth limits for your MX network. This may not reflect the affected device's hardware capabilities.  For more information on your device's hardware capabilities, please consult our MX Family Datasheet - [https://meraki.cisco.com/product-collateral/mx-family-datasheet/?file]
     * @param {String} networkId 
     * @param {module:api/ApplianceApi~getNetworkApplianceTrafficShapingUplinkBandwidthCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkApplianceTrafficShapingUplinkBandwidth200Response}
     */
    getNetworkApplianceTrafficShapingUplinkBandwidth(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceTrafficShapingUplinkBandwidth");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkApplianceTrafficShapingUplinkBandwidth200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/trafficShaping/uplinkBandwidth', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceTrafficShapingUplinkSelection operation.
     * @callback module:api/ApplianceApi~getNetworkApplianceTrafficShapingUplinkSelectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkApplianceTrafficShapingUplinkSelection200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show uplink selection settings for an MX network
     * Show uplink selection settings for an MX network
     * @param {String} networkId 
     * @param {module:api/ApplianceApi~getNetworkApplianceTrafficShapingUplinkSelectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkApplianceTrafficShapingUplinkSelection200Response}
     */
    getNetworkApplianceTrafficShapingUplinkSelection(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceTrafficShapingUplinkSelection");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkApplianceTrafficShapingUplinkSelection200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/trafficShaping/uplinkSelection', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceUplinksUsageHistory operation.
     * @callback module:api/ApplianceApi~getNetworkApplianceUplinksUsageHistoryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the sent and received bytes for each uplink of a network.
     * Get the sent and received bytes for each uplink of a network.
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 365 days from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 10 minutes.
     * @param {Number} [resolution] The time resolution in seconds for returned data. The valid resolutions are: 60, 300, 600, 1800, 3600, 86400. The default is 60.
     * @param {module:api/ApplianceApi~getNetworkApplianceUplinksUsageHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkApplianceUplinksUsageHistory(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceUplinksUsageHistory");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan'],
        'resolution': opts['resolution']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/uplinks/usageHistory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceVlan operation.
     * @callback module:api/ApplianceApi~getNetworkApplianceVlanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkApplianceVlans200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a VLAN
     * Return a VLAN
     * @param {String} networkId 
     * @param {String} vlanId 
     * @param {module:api/ApplianceApi~getNetworkApplianceVlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkApplianceVlans200ResponseInner}
     */
    getNetworkApplianceVlan(networkId, vlanId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceVlan");
      }
      // verify the required parameter 'vlanId' is set
      if (vlanId === undefined || vlanId === null) {
        throw new Error("Missing the required parameter 'vlanId' when calling getNetworkApplianceVlan");
      }

      let pathParams = {
        'networkId': networkId,
        'vlanId': vlanId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkApplianceVlans200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/vlans/{vlanId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceVlans operation.
     * @callback module:api/ApplianceApi~getNetworkApplianceVlansCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkApplianceVlans200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the VLANs for an MX network
     * List the VLANs for an MX network
     * @param {String} networkId 
     * @param {module:api/ApplianceApi~getNetworkApplianceVlansCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkApplianceVlans200ResponseInner>}
     */
    getNetworkApplianceVlans(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceVlans");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkApplianceVlans200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/vlans', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceVlansSettings operation.
     * @callback module:api/ApplianceApi~getNetworkApplianceVlansSettingsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the enabled status of VLANs for the network
     * Returns the enabled status of VLANs for the network
     * @param {String} networkId 
     * @param {module:api/ApplianceApi~getNetworkApplianceVlansSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkApplianceVlansSettings(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceVlansSettings");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/vlans/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceVpnBgp operation.
     * @callback module:api/ApplianceApi~getNetworkApplianceVpnBgpCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a Hub BGP Configuration
     * Return a Hub BGP Configuration
     * @param {String} networkId 
     * @param {module:api/ApplianceApi~getNetworkApplianceVpnBgpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkApplianceVpnBgp(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceVpnBgp");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/vpn/bgp', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceVpnSiteToSiteVpn operation.
     * @callback module:api/ApplianceApi~getNetworkApplianceVpnSiteToSiteVpnCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkApplianceVpnSiteToSiteVpn200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the site-to-site VPN settings of a network
     * Return the site-to-site VPN settings of a network. Only valid for MX networks.
     * @param {String} networkId 
     * @param {module:api/ApplianceApi~getNetworkApplianceVpnSiteToSiteVpnCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkApplianceVpnSiteToSiteVpn200Response}
     */
    getNetworkApplianceVpnSiteToSiteVpn(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceVpnSiteToSiteVpn");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkApplianceVpnSiteToSiteVpn200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/vpn/siteToSiteVpn', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceWarmSpare operation.
     * @callback module:api/ApplianceApi~getNetworkApplianceWarmSpareCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return MX warm spare settings
     * Return MX warm spare settings
     * @param {String} networkId 
     * @param {module:api/ApplianceApi~getNetworkApplianceWarmSpareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkApplianceWarmSpare(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceWarmSpare");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/warmSpare', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationApplianceSecurityEvents operation.
     * @callback module:api/ApplianceApi~getOrganizationApplianceSecurityEventsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the security events for an organization
     * List the security events for an organization
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. Data is gathered after the specified t0 value. The maximum lookback period is 365 days from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 365 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 365 days. The default is 31 days.
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:model/String} [sortOrder] Sorted order of security events based on event detection time. Order options are 'ascending' or 'descending'. Default is ascending order.
     * @param {module:api/ApplianceApi~getOrganizationApplianceSecurityEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getOrganizationApplianceSecurityEvents(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationApplianceSecurityEvents");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan'],
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        'sortOrder': opts['sortOrder']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/appliance/security/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationApplianceSecurityIntrusion operation.
     * @callback module:api/ApplianceApi~getOrganizationApplianceSecurityIntrusionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all supported intrusion settings for an organization
     * Returns all supported intrusion settings for an organization
     * @param {String} organizationId 
     * @param {module:api/ApplianceApi~getOrganizationApplianceSecurityIntrusionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getOrganizationApplianceSecurityIntrusion(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationApplianceSecurityIntrusion");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/appliance/security/intrusion', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationApplianceUplinkStatuses operation.
     * @callback module:api/ApplianceApi~getOrganizationApplianceUplinkStatusesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the uplink status of every Meraki MX and Z series appliances in the organization
     * List the uplink status of every Meraki MX and Z series appliances in the organization
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {Array.<String>} [networkIds] A list of network IDs. The returned devices will be filtered to only include these networks.
     * @param {Array.<String>} [serials] A list of serial numbers. The returned devices will be filtered to only include these serials.
     * @param {Array.<String>} [iccids] A list of ICCIDs. The returned devices will be filtered to only include these ICCIDs.
     * @param {module:api/ApplianceApi~getOrganizationApplianceUplinkStatusesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getOrganizationApplianceUplinkStatuses(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationApplianceUplinkStatuses");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        'networkIds': this.apiClient.buildCollectionParam(opts['networkIds'], 'csv'),
        'serials': this.apiClient.buildCollectionParam(opts['serials'], 'csv'),
        'iccids': this.apiClient.buildCollectionParam(opts['iccids'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/appliance/uplink/statuses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationApplianceVpnStats operation.
     * @callback module:api/ApplianceApi~getOrganizationApplianceVpnStatsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show VPN history stat for networks in an organization
     * Show VPN history stat for networks in an organization
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 300. Default is 300.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {Array.<String>} [networkIds] A list of Meraki network IDs to filter results to contain only specified networks. E.g.: networkIds[]=N_12345678&networkIds[]=L_3456
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
     * @param {module:api/ApplianceApi~getOrganizationApplianceVpnStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getOrganizationApplianceVpnStats(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationApplianceVpnStats");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        'networkIds': this.apiClient.buildCollectionParam(opts['networkIds'], 'csv'),
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/appliance/vpn/stats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationApplianceVpnStatuses operation.
     * @callback module:api/ApplianceApi~getOrganizationApplianceVpnStatusesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show VPN status for networks in an organization
     * Show VPN status for networks in an organization
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 300. Default is 300.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {Array.<String>} [networkIds] A list of Meraki network IDs to filter results to contain only specified networks. E.g.: networkIds[]=N_12345678&networkIds[]=L_3456
     * @param {module:api/ApplianceApi~getOrganizationApplianceVpnStatusesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getOrganizationApplianceVpnStatuses(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationApplianceVpnStatuses");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        'networkIds': this.apiClient.buildCollectionParam(opts['networkIds'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/appliance/vpn/statuses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationApplianceVpnThirdPartyVPNPeers operation.
     * @callback module:api/ApplianceApi~getOrganizationApplianceVpnThirdPartyVPNPeersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizationApplianceVpnThirdPartyVPNPeers200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the third party VPN peers for an organization
     * Return the third party VPN peers for an organization
     * @param {String} organizationId 
     * @param {module:api/ApplianceApi~getOrganizationApplianceVpnThirdPartyVPNPeersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizationApplianceVpnThirdPartyVPNPeers200Response}
     */
    getOrganizationApplianceVpnThirdPartyVPNPeers(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationApplianceVpnThirdPartyVPNPeers");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOrganizationApplianceVpnThirdPartyVPNPeers200Response;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/appliance/vpn/thirdPartyVPNPeers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationApplianceVpnVpnFirewallRules operation.
     * @callback module:api/ApplianceApi~getOrganizationApplianceVpnVpnFirewallRulesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the firewall rules for an organization's site-to-site VPN
     * Return the firewall rules for an organization's site-to-site VPN
     * @param {String} organizationId 
     * @param {module:api/ApplianceApi~getOrganizationApplianceVpnVpnFirewallRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getOrganizationApplianceVpnVpnFirewallRules(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationApplianceVpnVpnFirewallRules");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/appliance/vpn/vpnFirewallRules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the swapNetworkApplianceWarmSpare operation.
     * @callback module:api/ApplianceApi~swapNetworkApplianceWarmSpareCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Swap MX primary and warm spare appliances
     * Swap MX primary and warm spare appliances
     * @param {String} networkId 
     * @param {module:api/ApplianceApi~swapNetworkApplianceWarmSpareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    swapNetworkApplianceWarmSpare(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling swapNetworkApplianceWarmSpare");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/warmSpare/swap', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeviceApplianceUplinksSettings operation.
     * @callback module:api/ApplianceApi~updateDeviceApplianceUplinksSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDeviceApplianceUplinksSettings200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the uplink settings for an MX appliance
     * Update the uplink settings for an MX appliance
     * @param {String} serial 
     * @param {module:model/UpdateDeviceApplianceUplinksSettingsRequest} updateDeviceApplianceUplinksSettingsRequest 
     * @param {module:api/ApplianceApi~updateDeviceApplianceUplinksSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDeviceApplianceUplinksSettings200Response}
     */
    updateDeviceApplianceUplinksSettings(serial, updateDeviceApplianceUplinksSettingsRequest, callback) {
      let postBody = updateDeviceApplianceUplinksSettingsRequest;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling updateDeviceApplianceUplinksSettings");
      }
      // verify the required parameter 'updateDeviceApplianceUplinksSettingsRequest' is set
      if (updateDeviceApplianceUplinksSettingsRequest === undefined || updateDeviceApplianceUplinksSettingsRequest === null) {
        throw new Error("Missing the required parameter 'updateDeviceApplianceUplinksSettingsRequest' when calling updateDeviceApplianceUplinksSettings");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetDeviceApplianceUplinksSettings200Response;
      return this.apiClient.callApi(
        '/devices/{serial}/appliance/uplinks/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceConnectivityMonitoringDestinations operation.
     * @callback module:api/ApplianceApi~updateNetworkApplianceConnectivityMonitoringDestinationsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the connectivity testing destinations for an MX network
     * Update the connectivity testing destinations for an MX network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkApplianceConnectivityMonitoringDestinationsRequest} [updateNetworkApplianceConnectivityMonitoringDestinationsRequest] 
     * @param {module:api/ApplianceApi~updateNetworkApplianceConnectivityMonitoringDestinationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkApplianceConnectivityMonitoringDestinations(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkApplianceConnectivityMonitoringDestinationsRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceConnectivityMonitoringDestinations");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/connectivityMonitoringDestinations', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceContentFiltering operation.
     * @callback module:api/ApplianceApi~updateNetworkApplianceContentFilteringCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the content filtering settings for an MX network
     * Update the content filtering settings for an MX network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkApplianceContentFilteringRequest} [updateNetworkApplianceContentFilteringRequest] 
     * @param {module:api/ApplianceApi~updateNetworkApplianceContentFilteringCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkApplianceContentFiltering(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkApplianceContentFilteringRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceContentFiltering");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/contentFiltering', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceFirewallCellularFirewallRules operation.
     * @callback module:api/ApplianceApi~updateNetworkApplianceFirewallCellularFirewallRulesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the cellular firewall rules of an MX network
     * Update the cellular firewall rules of an MX network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkApplianceFirewallCellularFirewallRulesRequest} [updateNetworkApplianceFirewallCellularFirewallRulesRequest] 
     * @param {module:api/ApplianceApi~updateNetworkApplianceFirewallCellularFirewallRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkApplianceFirewallCellularFirewallRules(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkApplianceFirewallCellularFirewallRulesRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceFirewallCellularFirewallRules");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/cellularFirewallRules', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceFirewallFirewalledService operation.
     * @callback module:api/ApplianceApi~updateNetworkApplianceFirewallFirewalledServiceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the accessibility settings for the given service ('ICMP', 'web', or 'SNMP')
     * Updates the accessibility settings for the given service ('ICMP', 'web', or 'SNMP')
     * @param {String} networkId 
     * @param {String} service 
     * @param {module:model/UpdateNetworkApplianceFirewallFirewalledServiceRequest} updateNetworkApplianceFirewallFirewalledServiceRequest 
     * @param {module:api/ApplianceApi~updateNetworkApplianceFirewallFirewalledServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkApplianceFirewallFirewalledService(networkId, service, updateNetworkApplianceFirewallFirewalledServiceRequest, callback) {
      let postBody = updateNetworkApplianceFirewallFirewalledServiceRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceFirewallFirewalledService");
      }
      // verify the required parameter 'service' is set
      if (service === undefined || service === null) {
        throw new Error("Missing the required parameter 'service' when calling updateNetworkApplianceFirewallFirewalledService");
      }
      // verify the required parameter 'updateNetworkApplianceFirewallFirewalledServiceRequest' is set
      if (updateNetworkApplianceFirewallFirewalledServiceRequest === undefined || updateNetworkApplianceFirewallFirewalledServiceRequest === null) {
        throw new Error("Missing the required parameter 'updateNetworkApplianceFirewallFirewalledServiceRequest' when calling updateNetworkApplianceFirewallFirewalledService");
      }

      let pathParams = {
        'networkId': networkId,
        'service': service
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/firewalledServices/{service}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceFirewallInboundCellularFirewallRules operation.
     * @callback module:api/ApplianceApi~updateNetworkApplianceFirewallInboundCellularFirewallRulesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the inbound cellular firewall rules of an MX network
     * Update the inbound cellular firewall rules of an MX network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkApplianceFirewallCellularFirewallRulesRequest} [updateNetworkApplianceFirewallCellularFirewallRulesRequest] 
     * @param {module:api/ApplianceApi~updateNetworkApplianceFirewallInboundCellularFirewallRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    updateNetworkApplianceFirewallInboundCellularFirewallRules(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkApplianceFirewallCellularFirewallRulesRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceFirewallInboundCellularFirewallRules");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/inboundCellularFirewallRules', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceFirewallInboundFirewallRules operation.
     * @callback module:api/ApplianceApi~updateNetworkApplianceFirewallInboundFirewallRulesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the inbound firewall rules of an MX network
     * Update the inbound firewall rules of an MX network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkApplianceFirewallInboundFirewallRulesRequest} [updateNetworkApplianceFirewallInboundFirewallRulesRequest] 
     * @param {module:api/ApplianceApi~updateNetworkApplianceFirewallInboundFirewallRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkApplianceFirewallInboundFirewallRules(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkApplianceFirewallInboundFirewallRulesRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceFirewallInboundFirewallRules");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/inboundFirewallRules', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceFirewallL3FirewallRules operation.
     * @callback module:api/ApplianceApi~updateNetworkApplianceFirewallL3FirewallRulesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the L3 firewall rules of an MX network
     * Update the L3 firewall rules of an MX network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkApplianceFirewallInboundFirewallRulesRequest} [updateNetworkApplianceFirewallInboundFirewallRulesRequest] 
     * @param {module:api/ApplianceApi~updateNetworkApplianceFirewallL3FirewallRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkApplianceFirewallL3FirewallRules(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkApplianceFirewallInboundFirewallRulesRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceFirewallL3FirewallRules");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/l3FirewallRules', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceFirewallL7FirewallRules operation.
     * @callback module:api/ApplianceApi~updateNetworkApplianceFirewallL7FirewallRulesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the MX L7 firewall rules for an MX network
     * Update the MX L7 firewall rules for an MX network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkApplianceFirewallL7FirewallRulesRequest} [updateNetworkApplianceFirewallL7FirewallRulesRequest] 
     * @param {module:api/ApplianceApi~updateNetworkApplianceFirewallL7FirewallRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkApplianceFirewallL7FirewallRules(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkApplianceFirewallL7FirewallRulesRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceFirewallL7FirewallRules");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/l7FirewallRules', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceFirewallOneToManyNatRules operation.
     * @callback module:api/ApplianceApi~updateNetworkApplianceFirewallOneToManyNatRulesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the 1:Many NAT mapping rules for an MX network
     * Set the 1:Many NAT mapping rules for an MX network
     * @param {String} networkId 
     * @param {module:model/UpdateNetworkApplianceFirewallOneToManyNatRulesRequest} updateNetworkApplianceFirewallOneToManyNatRulesRequest 
     * @param {module:api/ApplianceApi~updateNetworkApplianceFirewallOneToManyNatRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkApplianceFirewallOneToManyNatRules(networkId, updateNetworkApplianceFirewallOneToManyNatRulesRequest, callback) {
      let postBody = updateNetworkApplianceFirewallOneToManyNatRulesRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceFirewallOneToManyNatRules");
      }
      // verify the required parameter 'updateNetworkApplianceFirewallOneToManyNatRulesRequest' is set
      if (updateNetworkApplianceFirewallOneToManyNatRulesRequest === undefined || updateNetworkApplianceFirewallOneToManyNatRulesRequest === null) {
        throw new Error("Missing the required parameter 'updateNetworkApplianceFirewallOneToManyNatRulesRequest' when calling updateNetworkApplianceFirewallOneToManyNatRules");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/oneToManyNatRules', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceFirewallOneToOneNatRules operation.
     * @callback module:api/ApplianceApi~updateNetworkApplianceFirewallOneToOneNatRulesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the 1:1 NAT mapping rules for an MX network
     * Set the 1:1 NAT mapping rules for an MX network
     * @param {String} networkId 
     * @param {module:model/UpdateNetworkApplianceFirewallOneToOneNatRulesRequest} updateNetworkApplianceFirewallOneToOneNatRulesRequest 
     * @param {module:api/ApplianceApi~updateNetworkApplianceFirewallOneToOneNatRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkApplianceFirewallOneToOneNatRules(networkId, updateNetworkApplianceFirewallOneToOneNatRulesRequest, callback) {
      let postBody = updateNetworkApplianceFirewallOneToOneNatRulesRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceFirewallOneToOneNatRules");
      }
      // verify the required parameter 'updateNetworkApplianceFirewallOneToOneNatRulesRequest' is set
      if (updateNetworkApplianceFirewallOneToOneNatRulesRequest === undefined || updateNetworkApplianceFirewallOneToOneNatRulesRequest === null) {
        throw new Error("Missing the required parameter 'updateNetworkApplianceFirewallOneToOneNatRulesRequest' when calling updateNetworkApplianceFirewallOneToOneNatRules");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/oneToOneNatRules', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceFirewallPortForwardingRules operation.
     * @callback module:api/ApplianceApi~updateNetworkApplianceFirewallPortForwardingRulesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the port forwarding rules for an MX network
     * Update the port forwarding rules for an MX network
     * @param {String} networkId 
     * @param {module:model/UpdateNetworkApplianceFirewallPortForwardingRulesRequest} updateNetworkApplianceFirewallPortForwardingRulesRequest 
     * @param {module:api/ApplianceApi~updateNetworkApplianceFirewallPortForwardingRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkApplianceFirewallPortForwardingRules(networkId, updateNetworkApplianceFirewallPortForwardingRulesRequest, callback) {
      let postBody = updateNetworkApplianceFirewallPortForwardingRulesRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceFirewallPortForwardingRules");
      }
      // verify the required parameter 'updateNetworkApplianceFirewallPortForwardingRulesRequest' is set
      if (updateNetworkApplianceFirewallPortForwardingRulesRequest === undefined || updateNetworkApplianceFirewallPortForwardingRulesRequest === null) {
        throw new Error("Missing the required parameter 'updateNetworkApplianceFirewallPortForwardingRulesRequest' when calling updateNetworkApplianceFirewallPortForwardingRules");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/portForwardingRules', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceFirewallSettings operation.
     * @callback module:api/ApplianceApi~updateNetworkApplianceFirewallSettingsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the firewall settings for this network
     * Update the firewall settings for this network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkApplianceFirewallSettingsRequest} [updateNetworkApplianceFirewallSettingsRequest] 
     * @param {module:api/ApplianceApi~updateNetworkApplianceFirewallSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkApplianceFirewallSettings(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkApplianceFirewallSettingsRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceFirewallSettings");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkAppliancePort operation.
     * @callback module:api/ApplianceApi~updateNetworkAppliancePortCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkAppliancePorts200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the per-port VLAN settings for a single MX port.
     * Update the per-port VLAN settings for a single MX port.
     * @param {String} networkId 
     * @param {String} portId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkAppliancePortRequest} [updateNetworkAppliancePortRequest] 
     * @param {module:api/ApplianceApi~updateNetworkAppliancePortCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkAppliancePorts200ResponseInner}
     */
    updateNetworkAppliancePort(networkId, portId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkAppliancePortRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkAppliancePort");
      }
      // verify the required parameter 'portId' is set
      if (portId === undefined || portId === null) {
        throw new Error("Missing the required parameter 'portId' when calling updateNetworkAppliancePort");
      }

      let pathParams = {
        'networkId': networkId,
        'portId': portId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkAppliancePorts200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/ports/{portId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkAppliancePrefixesDelegatedStatic operation.
     * @callback module:api/ApplianceApi~updateNetworkAppliancePrefixesDelegatedStaticCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a static delegated prefix from a network
     * Update a static delegated prefix from a network
     * @param {String} networkId 
     * @param {String} staticDelegatedPrefixId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkAppliancePrefixesDelegatedStaticRequest} [updateNetworkAppliancePrefixesDelegatedStaticRequest] 
     * @param {module:api/ApplianceApi~updateNetworkAppliancePrefixesDelegatedStaticCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkAppliancePrefixesDelegatedStatic(networkId, staticDelegatedPrefixId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkAppliancePrefixesDelegatedStaticRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkAppliancePrefixesDelegatedStatic");
      }
      // verify the required parameter 'staticDelegatedPrefixId' is set
      if (staticDelegatedPrefixId === undefined || staticDelegatedPrefixId === null) {
        throw new Error("Missing the required parameter 'staticDelegatedPrefixId' when calling updateNetworkAppliancePrefixesDelegatedStatic");
      }

      let pathParams = {
        'networkId': networkId,
        'staticDelegatedPrefixId': staticDelegatedPrefixId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/prefixes/delegated/statics/{staticDelegatedPrefixId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceSecurityIntrusion operation.
     * @callback module:api/ApplianceApi~updateNetworkApplianceSecurityIntrusionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the supported intrusion settings for an MX network
     * Set the supported intrusion settings for an MX network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkApplianceSecurityIntrusionRequest} [updateNetworkApplianceSecurityIntrusionRequest] 
     * @param {module:api/ApplianceApi~updateNetworkApplianceSecurityIntrusionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkApplianceSecurityIntrusion(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkApplianceSecurityIntrusionRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceSecurityIntrusion");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/security/intrusion', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceSecurityMalware operation.
     * @callback module:api/ApplianceApi~updateNetworkApplianceSecurityMalwareCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the supported malware settings for an MX network
     * Set the supported malware settings for an MX network
     * @param {String} networkId 
     * @param {module:model/UpdateNetworkApplianceSecurityMalwareRequest} updateNetworkApplianceSecurityMalwareRequest 
     * @param {module:api/ApplianceApi~updateNetworkApplianceSecurityMalwareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkApplianceSecurityMalware(networkId, updateNetworkApplianceSecurityMalwareRequest, callback) {
      let postBody = updateNetworkApplianceSecurityMalwareRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceSecurityMalware");
      }
      // verify the required parameter 'updateNetworkApplianceSecurityMalwareRequest' is set
      if (updateNetworkApplianceSecurityMalwareRequest === undefined || updateNetworkApplianceSecurityMalwareRequest === null) {
        throw new Error("Missing the required parameter 'updateNetworkApplianceSecurityMalwareRequest' when calling updateNetworkApplianceSecurityMalware");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/security/malware', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceSettings operation.
     * @callback module:api/ApplianceApi~updateNetworkApplianceSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkApplianceSettings200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the appliance settings for a network
     * Update the appliance settings for a network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkApplianceSettingsRequest} [updateNetworkApplianceSettingsRequest] 
     * @param {module:api/ApplianceApi~updateNetworkApplianceSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkApplianceSettings200Response}
     */
    updateNetworkApplianceSettings(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkApplianceSettingsRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceSettings");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkApplianceSettings200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceSingleLan operation.
     * @callback module:api/ApplianceApi~updateNetworkApplianceSingleLanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkApplianceSingleLan200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update single LAN configuration
     * Update single LAN configuration
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkApplianceSingleLanRequest} [updateNetworkApplianceSingleLanRequest] 
     * @param {module:api/ApplianceApi~updateNetworkApplianceSingleLanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkApplianceSingleLan200Response}
     */
    updateNetworkApplianceSingleLan(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkApplianceSingleLanRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceSingleLan");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkApplianceSingleLan200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/singleLan', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceSsid operation.
     * @callback module:api/ApplianceApi~updateNetworkApplianceSsidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkApplianceSsids200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the attributes of an MX SSID
     * Update the attributes of an MX SSID
     * @param {String} networkId 
     * @param {String} number 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkApplianceSsidRequest} [updateNetworkApplianceSsidRequest] 
     * @param {module:api/ApplianceApi~updateNetworkApplianceSsidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkApplianceSsids200ResponseInner}
     */
    updateNetworkApplianceSsid(networkId, number, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkApplianceSsidRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceSsid");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling updateNetworkApplianceSsid");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkApplianceSsids200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/ssids/{number}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceStaticRoute operation.
     * @callback module:api/ApplianceApi~updateNetworkApplianceStaticRouteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a static route for an MX or teleworker network
     * Update a static route for an MX or teleworker network
     * @param {String} networkId 
     * @param {String} staticRouteId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkApplianceStaticRouteRequest} [updateNetworkApplianceStaticRouteRequest] 
     * @param {module:api/ApplianceApi~updateNetworkApplianceStaticRouteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkApplianceStaticRoute(networkId, staticRouteId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkApplianceStaticRouteRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceStaticRoute");
      }
      // verify the required parameter 'staticRouteId' is set
      if (staticRouteId === undefined || staticRouteId === null) {
        throw new Error("Missing the required parameter 'staticRouteId' when calling updateNetworkApplianceStaticRoute");
      }

      let pathParams = {
        'networkId': networkId,
        'staticRouteId': staticRouteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/staticRoutes/{staticRouteId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceTrafficShaping operation.
     * @callback module:api/ApplianceApi~updateNetworkApplianceTrafficShapingCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the traffic shaping settings for an MX network
     * Update the traffic shaping settings for an MX network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkApplianceTrafficShapingRequest} [updateNetworkApplianceTrafficShapingRequest] 
     * @param {module:api/ApplianceApi~updateNetworkApplianceTrafficShapingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkApplianceTrafficShaping(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkApplianceTrafficShapingRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceTrafficShaping");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/trafficShaping', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceTrafficShapingCustomPerformanceClass operation.
     * @callback module:api/ApplianceApi~updateNetworkApplianceTrafficShapingCustomPerformanceClassCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a custom performance class for an MX network
     * Update a custom performance class for an MX network
     * @param {String} networkId 
     * @param {String} customPerformanceClassId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkApplianceTrafficShapingCustomPerformanceClassRequest} [updateNetworkApplianceTrafficShapingCustomPerformanceClassRequest] 
     * @param {module:api/ApplianceApi~updateNetworkApplianceTrafficShapingCustomPerformanceClassCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkApplianceTrafficShapingCustomPerformanceClass(networkId, customPerformanceClassId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkApplianceTrafficShapingCustomPerformanceClassRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceTrafficShapingCustomPerformanceClass");
      }
      // verify the required parameter 'customPerformanceClassId' is set
      if (customPerformanceClassId === undefined || customPerformanceClassId === null) {
        throw new Error("Missing the required parameter 'customPerformanceClassId' when calling updateNetworkApplianceTrafficShapingCustomPerformanceClass");
      }

      let pathParams = {
        'networkId': networkId,
        'customPerformanceClassId': customPerformanceClassId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/trafficShaping/customPerformanceClasses/{customPerformanceClassId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceTrafficShapingRules operation.
     * @callback module:api/ApplianceApi~updateNetworkApplianceTrafficShapingRulesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the traffic shaping settings rules for an MX network
     * Update the traffic shaping settings rules for an MX network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkApplianceTrafficShapingRulesRequest} [updateNetworkApplianceTrafficShapingRulesRequest] 
     * @param {module:api/ApplianceApi~updateNetworkApplianceTrafficShapingRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkApplianceTrafficShapingRules(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkApplianceTrafficShapingRulesRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceTrafficShapingRules");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/trafficShaping/rules', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceTrafficShapingUplinkBandwidth operation.
     * @callback module:api/ApplianceApi~updateNetworkApplianceTrafficShapingUplinkBandwidthCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the uplink bandwidth settings for your MX network.
     * Updates the uplink bandwidth settings for your MX network.
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkApplianceTrafficShapingUplinkBandwidthRequest} [updateNetworkApplianceTrafficShapingUplinkBandwidthRequest] 
     * @param {module:api/ApplianceApi~updateNetworkApplianceTrafficShapingUplinkBandwidthCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkApplianceTrafficShapingUplinkBandwidth(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkApplianceTrafficShapingUplinkBandwidthRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceTrafficShapingUplinkBandwidth");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/trafficShaping/uplinkBandwidth', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceTrafficShapingUplinkSelection operation.
     * @callback module:api/ApplianceApi~updateNetworkApplianceTrafficShapingUplinkSelectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkApplianceTrafficShapingUplinkSelection200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update uplink selection settings for an MX network
     * Update uplink selection settings for an MX network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest} [updateNetworkApplianceTrafficShapingUplinkSelectionRequest] 
     * @param {module:api/ApplianceApi~updateNetworkApplianceTrafficShapingUplinkSelectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkApplianceTrafficShapingUplinkSelection200Response}
     */
    updateNetworkApplianceTrafficShapingUplinkSelection(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkApplianceTrafficShapingUplinkSelectionRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceTrafficShapingUplinkSelection");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkApplianceTrafficShapingUplinkSelection200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/trafficShaping/uplinkSelection', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceVlan operation.
     * @callback module:api/ApplianceApi~updateNetworkApplianceVlanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkApplianceVlans200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a VLAN
     * Update a VLAN
     * @param {String} networkId 
     * @param {String} vlanId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkApplianceVlanRequest} [updateNetworkApplianceVlanRequest] 
     * @param {module:api/ApplianceApi~updateNetworkApplianceVlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkApplianceVlans200ResponseInner}
     */
    updateNetworkApplianceVlan(networkId, vlanId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkApplianceVlanRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceVlan");
      }
      // verify the required parameter 'vlanId' is set
      if (vlanId === undefined || vlanId === null) {
        throw new Error("Missing the required parameter 'vlanId' when calling updateNetworkApplianceVlan");
      }

      let pathParams = {
        'networkId': networkId,
        'vlanId': vlanId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkApplianceVlans200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/vlans/{vlanId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceVlansSettings operation.
     * @callback module:api/ApplianceApi~updateNetworkApplianceVlansSettingsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable/Disable VLANs for the given network
     * Enable/Disable VLANs for the given network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkApplianceVlansSettingsRequest} [updateNetworkApplianceVlansSettingsRequest] 
     * @param {module:api/ApplianceApi~updateNetworkApplianceVlansSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkApplianceVlansSettings(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkApplianceVlansSettingsRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceVlansSettings");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/vlans/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceVpnBgp operation.
     * @callback module:api/ApplianceApi~updateNetworkApplianceVpnBgpCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Hub BGP Configuration
     * Update a Hub BGP Configuration
     * @param {String} networkId 
     * @param {module:model/UpdateNetworkApplianceVpnBgpRequest} updateNetworkApplianceVpnBgpRequest 
     * @param {module:api/ApplianceApi~updateNetworkApplianceVpnBgpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkApplianceVpnBgp(networkId, updateNetworkApplianceVpnBgpRequest, callback) {
      let postBody = updateNetworkApplianceVpnBgpRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceVpnBgp");
      }
      // verify the required parameter 'updateNetworkApplianceVpnBgpRequest' is set
      if (updateNetworkApplianceVpnBgpRequest === undefined || updateNetworkApplianceVpnBgpRequest === null) {
        throw new Error("Missing the required parameter 'updateNetworkApplianceVpnBgpRequest' when calling updateNetworkApplianceVpnBgp");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/vpn/bgp', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceVpnSiteToSiteVpn operation.
     * @callback module:api/ApplianceApi~updateNetworkApplianceVpnSiteToSiteVpnCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkApplianceVpnSiteToSiteVpn200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the site-to-site VPN settings of a network
     * Update the site-to-site VPN settings of a network. Only valid for MX networks in NAT mode.
     * @param {String} networkId 
     * @param {module:model/UpdateNetworkApplianceVpnSiteToSiteVpnRequest} updateNetworkApplianceVpnSiteToSiteVpnRequest 
     * @param {module:api/ApplianceApi~updateNetworkApplianceVpnSiteToSiteVpnCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkApplianceVpnSiteToSiteVpn200Response}
     */
    updateNetworkApplianceVpnSiteToSiteVpn(networkId, updateNetworkApplianceVpnSiteToSiteVpnRequest, callback) {
      let postBody = updateNetworkApplianceVpnSiteToSiteVpnRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceVpnSiteToSiteVpn");
      }
      // verify the required parameter 'updateNetworkApplianceVpnSiteToSiteVpnRequest' is set
      if (updateNetworkApplianceVpnSiteToSiteVpnRequest === undefined || updateNetworkApplianceVpnSiteToSiteVpnRequest === null) {
        throw new Error("Missing the required parameter 'updateNetworkApplianceVpnSiteToSiteVpnRequest' when calling updateNetworkApplianceVpnSiteToSiteVpn");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkApplianceVpnSiteToSiteVpn200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/vpn/siteToSiteVpn', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceWarmSpare operation.
     * @callback module:api/ApplianceApi~updateNetworkApplianceWarmSpareCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update MX warm spare settings
     * Update MX warm spare settings
     * @param {String} networkId 
     * @param {module:model/UpdateNetworkApplianceWarmSpareRequest} updateNetworkApplianceWarmSpareRequest 
     * @param {module:api/ApplianceApi~updateNetworkApplianceWarmSpareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkApplianceWarmSpare(networkId, updateNetworkApplianceWarmSpareRequest, callback) {
      let postBody = updateNetworkApplianceWarmSpareRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceWarmSpare");
      }
      // verify the required parameter 'updateNetworkApplianceWarmSpareRequest' is set
      if (updateNetworkApplianceWarmSpareRequest === undefined || updateNetworkApplianceWarmSpareRequest === null) {
        throw new Error("Missing the required parameter 'updateNetworkApplianceWarmSpareRequest' when calling updateNetworkApplianceWarmSpare");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/warmSpare', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationApplianceSecurityIntrusion operation.
     * @callback module:api/ApplianceApi~updateOrganizationApplianceSecurityIntrusionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets supported intrusion settings for an organization
     * Sets supported intrusion settings for an organization
     * @param {String} organizationId 
     * @param {module:model/UpdateOrganizationApplianceSecurityIntrusionRequest} updateOrganizationApplianceSecurityIntrusionRequest 
     * @param {module:api/ApplianceApi~updateOrganizationApplianceSecurityIntrusionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateOrganizationApplianceSecurityIntrusion(organizationId, updateOrganizationApplianceSecurityIntrusionRequest, callback) {
      let postBody = updateOrganizationApplianceSecurityIntrusionRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationApplianceSecurityIntrusion");
      }
      // verify the required parameter 'updateOrganizationApplianceSecurityIntrusionRequest' is set
      if (updateOrganizationApplianceSecurityIntrusionRequest === undefined || updateOrganizationApplianceSecurityIntrusionRequest === null) {
        throw new Error("Missing the required parameter 'updateOrganizationApplianceSecurityIntrusionRequest' when calling updateOrganizationApplianceSecurityIntrusion");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/appliance/security/intrusion', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationApplianceVpnThirdPartyVPNPeers operation.
     * @callback module:api/ApplianceApi~updateOrganizationApplianceVpnThirdPartyVPNPeersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizationApplianceVpnThirdPartyVPNPeers200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the third party VPN peers for an organization
     * Update the third party VPN peers for an organization
     * @param {String} organizationId 
     * @param {module:model/UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequest} updateOrganizationApplianceVpnThirdPartyVPNPeersRequest 
     * @param {module:api/ApplianceApi~updateOrganizationApplianceVpnThirdPartyVPNPeersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizationApplianceVpnThirdPartyVPNPeers200Response}
     */
    updateOrganizationApplianceVpnThirdPartyVPNPeers(organizationId, updateOrganizationApplianceVpnThirdPartyVPNPeersRequest, callback) {
      let postBody = updateOrganizationApplianceVpnThirdPartyVPNPeersRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationApplianceVpnThirdPartyVPNPeers");
      }
      // verify the required parameter 'updateOrganizationApplianceVpnThirdPartyVPNPeersRequest' is set
      if (updateOrganizationApplianceVpnThirdPartyVPNPeersRequest === undefined || updateOrganizationApplianceVpnThirdPartyVPNPeersRequest === null) {
        throw new Error("Missing the required parameter 'updateOrganizationApplianceVpnThirdPartyVPNPeersRequest' when calling updateOrganizationApplianceVpnThirdPartyVPNPeers");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetOrganizationApplianceVpnThirdPartyVPNPeers200Response;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/appliance/vpn/thirdPartyVPNPeers', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationApplianceVpnVpnFirewallRules operation.
     * @callback module:api/ApplianceApi~updateOrganizationApplianceVpnVpnFirewallRulesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the firewall rules of an organization's site-to-site VPN
     * Update the firewall rules of an organization's site-to-site VPN
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationApplianceVpnVpnFirewallRulesRequest} [updateOrganizationApplianceVpnVpnFirewallRulesRequest] 
     * @param {module:api/ApplianceApi~updateOrganizationApplianceVpnVpnFirewallRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateOrganizationApplianceVpnVpnFirewallRules(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateOrganizationApplianceVpnVpnFirewallRulesRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationApplianceVpnVpnFirewallRules");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/appliance/vpn/vpnFirewallRules', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
