/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateNetworkCameraQualityRetentionProfileRequest from '../model/CreateNetworkCameraQualityRetentionProfileRequest';
import CreateNetworkCameraWirelessProfileRequest from '../model/CreateNetworkCameraWirelessProfileRequest';
import CreateOrganizationCameraCustomAnalyticsArtifactRequest from '../model/CreateOrganizationCameraCustomAnalyticsArtifactRequest';
import GenerateDeviceCameraSnapshotRequest from '../model/GenerateDeviceCameraSnapshotRequest';
import UpdateDeviceCameraCustomAnalyticsRequest from '../model/UpdateDeviceCameraCustomAnalyticsRequest';
import UpdateDeviceCameraQualityAndRetentionRequest from '../model/UpdateDeviceCameraQualityAndRetentionRequest';
import UpdateDeviceCameraSenseRequest from '../model/UpdateDeviceCameraSenseRequest';
import UpdateDeviceCameraVideoSettingsRequest from '../model/UpdateDeviceCameraVideoSettingsRequest';
import UpdateDeviceCameraWirelessProfilesRequest from '../model/UpdateDeviceCameraWirelessProfilesRequest';
import UpdateNetworkCameraQualityRetentionProfileRequest from '../model/UpdateNetworkCameraQualityRetentionProfileRequest';
import UpdateNetworkCameraWirelessProfileRequest from '../model/UpdateNetworkCameraWirelessProfileRequest';
import UpdateOrganizationCameraOnboardingStatusesRequest from '../model/UpdateOrganizationCameraOnboardingStatusesRequest';

/**
* Camera service.
* @module api/CameraApi
* @version 1.32.0
*/
export default class CameraApi {

    /**
    * Constructs a new CameraApi. 
    * @alias module:api/CameraApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createNetworkCameraQualityRetentionProfile operation.
     * @callback module:api/CameraApi~createNetworkCameraQualityRetentionProfileCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new quality retention profile for this network.
     * Creates new quality retention profile for this network.
     * @param {String} networkId 
     * @param {module:model/CreateNetworkCameraQualityRetentionProfileRequest} createNetworkCameraQualityRetentionProfileRequest 
     * @param {module:api/CameraApi~createNetworkCameraQualityRetentionProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNetworkCameraQualityRetentionProfile(networkId, createNetworkCameraQualityRetentionProfileRequest, callback) {
      let postBody = createNetworkCameraQualityRetentionProfileRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkCameraQualityRetentionProfile");
      }
      // verify the required parameter 'createNetworkCameraQualityRetentionProfileRequest' is set
      if (createNetworkCameraQualityRetentionProfileRequest === undefined || createNetworkCameraQualityRetentionProfileRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkCameraQualityRetentionProfileRequest' when calling createNetworkCameraQualityRetentionProfile");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/camera/qualityRetentionProfiles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkCameraWirelessProfile operation.
     * @callback module:api/CameraApi~createNetworkCameraWirelessProfileCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new camera wireless profile for this network.
     * Creates a new camera wireless profile for this network.
     * @param {String} networkId 
     * @param {module:model/CreateNetworkCameraWirelessProfileRequest} createNetworkCameraWirelessProfileRequest 
     * @param {module:api/CameraApi~createNetworkCameraWirelessProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNetworkCameraWirelessProfile(networkId, createNetworkCameraWirelessProfileRequest, callback) {
      let postBody = createNetworkCameraWirelessProfileRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkCameraWirelessProfile");
      }
      // verify the required parameter 'createNetworkCameraWirelessProfileRequest' is set
      if (createNetworkCameraWirelessProfileRequest === undefined || createNetworkCameraWirelessProfileRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkCameraWirelessProfileRequest' when calling createNetworkCameraWirelessProfile");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/camera/wirelessProfiles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrganizationCameraCustomAnalyticsArtifact operation.
     * @callback module:api/CameraApi~createOrganizationCameraCustomAnalyticsArtifactCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create custom analytics artifact
     * Create custom analytics artifact. Returns an artifact upload URL with expiry time. Upload the artifact file with a put request to the returned upload URL before its expiry.
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateOrganizationCameraCustomAnalyticsArtifactRequest} [createOrganizationCameraCustomAnalyticsArtifactRequest] 
     * @param {module:api/CameraApi~createOrganizationCameraCustomAnalyticsArtifactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createOrganizationCameraCustomAnalyticsArtifact(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = opts['createOrganizationCameraCustomAnalyticsArtifactRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createOrganizationCameraCustomAnalyticsArtifact");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/camera/customAnalytics/artifacts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkCameraQualityRetentionProfile operation.
     * @callback module:api/CameraApi~deleteNetworkCameraQualityRetentionProfileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an existing quality retention profile for this network.
     * Delete an existing quality retention profile for this network.
     * @param {String} networkId 
     * @param {String} qualityRetentionProfileId 
     * @param {module:api/CameraApi~deleteNetworkCameraQualityRetentionProfileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkCameraQualityRetentionProfile(networkId, qualityRetentionProfileId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkCameraQualityRetentionProfile");
      }
      // verify the required parameter 'qualityRetentionProfileId' is set
      if (qualityRetentionProfileId === undefined || qualityRetentionProfileId === null) {
        throw new Error("Missing the required parameter 'qualityRetentionProfileId' when calling deleteNetworkCameraQualityRetentionProfile");
      }

      let pathParams = {
        'networkId': networkId,
        'qualityRetentionProfileId': qualityRetentionProfileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/camera/qualityRetentionProfiles/{qualityRetentionProfileId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkCameraWirelessProfile operation.
     * @callback module:api/CameraApi~deleteNetworkCameraWirelessProfileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an existing camera wireless profile for this network.
     * Delete an existing camera wireless profile for this network.
     * @param {String} networkId 
     * @param {String} wirelessProfileId 
     * @param {module:api/CameraApi~deleteNetworkCameraWirelessProfileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkCameraWirelessProfile(networkId, wirelessProfileId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkCameraWirelessProfile");
      }
      // verify the required parameter 'wirelessProfileId' is set
      if (wirelessProfileId === undefined || wirelessProfileId === null) {
        throw new Error("Missing the required parameter 'wirelessProfileId' when calling deleteNetworkCameraWirelessProfile");
      }

      let pathParams = {
        'networkId': networkId,
        'wirelessProfileId': wirelessProfileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/camera/wirelessProfiles/{wirelessProfileId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganizationCameraCustomAnalyticsArtifact operation.
     * @callback module:api/CameraApi~deleteOrganizationCameraCustomAnalyticsArtifactCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Custom Analytics Artifact
     * Delete Custom Analytics Artifact
     * @param {String} organizationId 
     * @param {String} artifactId 
     * @param {module:api/CameraApi~deleteOrganizationCameraCustomAnalyticsArtifactCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganizationCameraCustomAnalyticsArtifact(organizationId, artifactId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteOrganizationCameraCustomAnalyticsArtifact");
      }
      // verify the required parameter 'artifactId' is set
      if (artifactId === undefined || artifactId === null) {
        throw new Error("Missing the required parameter 'artifactId' when calling deleteOrganizationCameraCustomAnalyticsArtifact");
      }

      let pathParams = {
        'organizationId': organizationId,
        'artifactId': artifactId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/camera/customAnalytics/artifacts/{artifactId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the generateDeviceCameraSnapshot operation.
     * @callback module:api/CameraApi~generateDeviceCameraSnapshotCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate a snapshot of what the camera sees at the specified time and return a link to that image.
     * Generate a snapshot of what the camera sees at the specified time and return a link to that image.
     * @param {String} serial 
     * @param {Object} opts Optional parameters
     * @param {module:model/GenerateDeviceCameraSnapshotRequest} [generateDeviceCameraSnapshotRequest] 
     * @param {module:api/CameraApi~generateDeviceCameraSnapshotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    generateDeviceCameraSnapshot(serial, opts, callback) {
      opts = opts || {};
      let postBody = opts['generateDeviceCameraSnapshotRequest'];
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling generateDeviceCameraSnapshot");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/camera/generateSnapshot', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceCameraAnalyticsLive operation.
     * @callback module:api/CameraApi~getDeviceCameraAnalyticsLiveCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns live state from camera of analytics zones
     * Returns live state from camera of analytics zones
     * @param {String} serial 
     * @param {module:api/CameraApi~getDeviceCameraAnalyticsLiveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getDeviceCameraAnalyticsLive(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceCameraAnalyticsLive");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/camera/analytics/live', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceCameraAnalyticsOverview operation.
     * @callback module:api/CameraApi~getDeviceCameraAnalyticsOverviewCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an overview of aggregate analytics data for a timespan
     * Returns an overview of aggregate analytics data for a timespan
     * @param {String} serial 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 365 days from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 7 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. The default is 1 hour.
     * @param {module:model/String} [objectType] [optional] The object type for which analytics will be retrieved. The default object type is person. The available types are [person, vehicle].
     * @param {module:api/CameraApi~getDeviceCameraAnalyticsOverviewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getDeviceCameraAnalyticsOverview(serial, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceCameraAnalyticsOverview");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan'],
        'objectType': opts['objectType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/devices/{serial}/camera/analytics/overview', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceCameraAnalyticsRecent operation.
     * @callback module:api/CameraApi~getDeviceCameraAnalyticsRecentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns most recent record for analytics zones
     * Returns most recent record for analytics zones
     * @param {String} serial 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [objectType] [optional] The object type for which analytics will be retrieved. The default object type is person. The available types are [person, vehicle].
     * @param {module:api/CameraApi~getDeviceCameraAnalyticsRecentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getDeviceCameraAnalyticsRecent(serial, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceCameraAnalyticsRecent");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
        'objectType': opts['objectType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/devices/{serial}/camera/analytics/recent', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceCameraAnalyticsZoneHistory operation.
     * @callback module:api/CameraApi~getDeviceCameraAnalyticsZoneHistoryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return historical records for analytic zones
     * Return historical records for analytic zones
     * @param {String} serial 
     * @param {String} zoneId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 365 days from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 14 hours after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 14 hours. The default is 1 hour.
     * @param {Number} [resolution] The time resolution in seconds for returned data. The valid resolutions are: 60. The default is 60.
     * @param {module:model/String} [objectType] [optional] The object type for which analytics will be retrieved. The default object type is person. The available types are [person, vehicle].
     * @param {module:api/CameraApi~getDeviceCameraAnalyticsZoneHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getDeviceCameraAnalyticsZoneHistory(serial, zoneId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceCameraAnalyticsZoneHistory");
      }
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling getDeviceCameraAnalyticsZoneHistory");
      }

      let pathParams = {
        'serial': serial,
        'zoneId': zoneId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan'],
        'resolution': opts['resolution'],
        'objectType': opts['objectType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/devices/{serial}/camera/analytics/zones/{zoneId}/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceCameraAnalyticsZones operation.
     * @callback module:api/CameraApi~getDeviceCameraAnalyticsZonesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all configured analytic zones for this camera
     * Returns all configured analytic zones for this camera
     * @param {String} serial 
     * @param {module:api/CameraApi~getDeviceCameraAnalyticsZonesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getDeviceCameraAnalyticsZones(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceCameraAnalyticsZones");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/devices/{serial}/camera/analytics/zones', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceCameraCustomAnalytics operation.
     * @callback module:api/CameraApi~getDeviceCameraCustomAnalyticsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return custom analytics settings for a camera
     * Return custom analytics settings for a camera
     * @param {String} serial 
     * @param {module:api/CameraApi~getDeviceCameraCustomAnalyticsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getDeviceCameraCustomAnalytics(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceCameraCustomAnalytics");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/camera/customAnalytics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceCameraQualityAndRetention operation.
     * @callback module:api/CameraApi~getDeviceCameraQualityAndRetentionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns quality and retention settings for the given camera
     * Returns quality and retention settings for the given camera
     * @param {String} serial 
     * @param {module:api/CameraApi~getDeviceCameraQualityAndRetentionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getDeviceCameraQualityAndRetention(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceCameraQualityAndRetention");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/camera/qualityAndRetention', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceCameraSense operation.
     * @callback module:api/CameraApi~getDeviceCameraSenseCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns sense settings for a given camera
     * Returns sense settings for a given camera
     * @param {String} serial 
     * @param {module:api/CameraApi~getDeviceCameraSenseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getDeviceCameraSense(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceCameraSense");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/camera/sense', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceCameraSenseObjectDetectionModels operation.
     * @callback module:api/CameraApi~getDeviceCameraSenseObjectDetectionModelsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the MV Sense object detection model list for the given camera
     * Returns the MV Sense object detection model list for the given camera
     * @param {String} serial 
     * @param {module:api/CameraApi~getDeviceCameraSenseObjectDetectionModelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getDeviceCameraSenseObjectDetectionModels(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceCameraSenseObjectDetectionModels");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/devices/{serial}/camera/sense/objectDetectionModels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceCameraVideoLink operation.
     * @callback module:api/CameraApi~getDeviceCameraVideoLinkCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns video link to the specified camera
     * Returns video link to the specified camera. If a timestamp is supplied, it links to that timestamp.
     * @param {String} serial 
     * @param {Object} opts Optional parameters
     * @param {Date} [timestamp] [optional] The video link will start at this time. The timestamp should be a string in ISO8601 format. If no timestamp is specified, we will assume current time.
     * @param {module:api/CameraApi~getDeviceCameraVideoLinkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getDeviceCameraVideoLink(serial, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceCameraVideoLink");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
        'timestamp': opts['timestamp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/camera/videoLink', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceCameraVideoSettings operation.
     * @callback module:api/CameraApi~getDeviceCameraVideoSettingsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns video settings for the given camera
     * Returns video settings for the given camera
     * @param {String} serial 
     * @param {module:api/CameraApi~getDeviceCameraVideoSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getDeviceCameraVideoSettings(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceCameraVideoSettings");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/camera/video/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceCameraWirelessProfiles operation.
     * @callback module:api/CameraApi~getDeviceCameraWirelessProfilesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns wireless profile assigned to the given camera
     * Returns wireless profile assigned to the given camera
     * @param {String} serial 
     * @param {module:api/CameraApi~getDeviceCameraWirelessProfilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getDeviceCameraWirelessProfiles(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceCameraWirelessProfiles");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/camera/wirelessProfiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkCameraQualityRetentionProfile operation.
     * @callback module:api/CameraApi~getNetworkCameraQualityRetentionProfileCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a single quality retention profile
     * Retrieve a single quality retention profile
     * @param {String} networkId 
     * @param {String} qualityRetentionProfileId 
     * @param {module:api/CameraApi~getNetworkCameraQualityRetentionProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkCameraQualityRetentionProfile(networkId, qualityRetentionProfileId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkCameraQualityRetentionProfile");
      }
      // verify the required parameter 'qualityRetentionProfileId' is set
      if (qualityRetentionProfileId === undefined || qualityRetentionProfileId === null) {
        throw new Error("Missing the required parameter 'qualityRetentionProfileId' when calling getNetworkCameraQualityRetentionProfile");
      }

      let pathParams = {
        'networkId': networkId,
        'qualityRetentionProfileId': qualityRetentionProfileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/camera/qualityRetentionProfiles/{qualityRetentionProfileId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkCameraQualityRetentionProfiles operation.
     * @callback module:api/CameraApi~getNetworkCameraQualityRetentionProfilesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the quality retention profiles for this network
     * List the quality retention profiles for this network
     * @param {String} networkId 
     * @param {module:api/CameraApi~getNetworkCameraQualityRetentionProfilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkCameraQualityRetentionProfiles(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkCameraQualityRetentionProfiles");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/camera/qualityRetentionProfiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkCameraSchedules operation.
     * @callback module:api/CameraApi~getNetworkCameraSchedulesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of all camera recording schedules.
     * Returns a list of all camera recording schedules.
     * @param {String} networkId 
     * @param {module:api/CameraApi~getNetworkCameraSchedulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkCameraSchedules(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkCameraSchedules");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/camera/schedules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkCameraWirelessProfile operation.
     * @callback module:api/CameraApi~getNetworkCameraWirelessProfileCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a single camera wireless profile.
     * Retrieve a single camera wireless profile.
     * @param {String} networkId 
     * @param {String} wirelessProfileId 
     * @param {module:api/CameraApi~getNetworkCameraWirelessProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkCameraWirelessProfile(networkId, wirelessProfileId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkCameraWirelessProfile");
      }
      // verify the required parameter 'wirelessProfileId' is set
      if (wirelessProfileId === undefined || wirelessProfileId === null) {
        throw new Error("Missing the required parameter 'wirelessProfileId' when calling getNetworkCameraWirelessProfile");
      }

      let pathParams = {
        'networkId': networkId,
        'wirelessProfileId': wirelessProfileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/camera/wirelessProfiles/{wirelessProfileId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkCameraWirelessProfiles operation.
     * @callback module:api/CameraApi~getNetworkCameraWirelessProfilesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the camera wireless profiles for this network.
     * List the camera wireless profiles for this network.
     * @param {String} networkId 
     * @param {module:api/CameraApi~getNetworkCameraWirelessProfilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkCameraWirelessProfiles(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkCameraWirelessProfiles");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/camera/wirelessProfiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationCameraCustomAnalyticsArtifact operation.
     * @callback module:api/CameraApi~getOrganizationCameraCustomAnalyticsArtifactCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Custom Analytics Artifact
     * Get Custom Analytics Artifact
     * @param {String} organizationId 
     * @param {String} artifactId 
     * @param {module:api/CameraApi~getOrganizationCameraCustomAnalyticsArtifactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getOrganizationCameraCustomAnalyticsArtifact(organizationId, artifactId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationCameraCustomAnalyticsArtifact");
      }
      // verify the required parameter 'artifactId' is set
      if (artifactId === undefined || artifactId === null) {
        throw new Error("Missing the required parameter 'artifactId' when calling getOrganizationCameraCustomAnalyticsArtifact");
      }

      let pathParams = {
        'organizationId': organizationId,
        'artifactId': artifactId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/camera/customAnalytics/artifacts/{artifactId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationCameraCustomAnalyticsArtifacts operation.
     * @callback module:api/CameraApi~getOrganizationCameraCustomAnalyticsArtifactsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Custom Analytics Artifacts
     * List Custom Analytics Artifacts
     * @param {String} organizationId 
     * @param {module:api/CameraApi~getOrganizationCameraCustomAnalyticsArtifactsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getOrganizationCameraCustomAnalyticsArtifacts(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationCameraCustomAnalyticsArtifacts");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/camera/customAnalytics/artifacts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationCameraOnboardingStatuses operation.
     * @callback module:api/CameraApi~getOrganizationCameraOnboardingStatusesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch onboarding status of cameras
     * Fetch onboarding status of cameras
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [serials] A list of serial numbers. The returned cameras will be filtered to only include these serials.
     * @param {Array.<String>} [networkIds] A list of network IDs. The returned cameras will be filtered to only include these networks.
     * @param {module:api/CameraApi~getOrganizationCameraOnboardingStatusesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getOrganizationCameraOnboardingStatuses(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationCameraOnboardingStatuses");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'serials': this.apiClient.buildCollectionParam(opts['serials'], 'csv'),
        'networkIds': this.apiClient.buildCollectionParam(opts['networkIds'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/camera/onboarding/statuses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeviceCameraCustomAnalytics operation.
     * @callback module:api/CameraApi~updateDeviceCameraCustomAnalyticsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update custom analytics settings for a camera
     * Update custom analytics settings for a camera
     * @param {String} serial 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateDeviceCameraCustomAnalyticsRequest} [updateDeviceCameraCustomAnalyticsRequest] 
     * @param {module:api/CameraApi~updateDeviceCameraCustomAnalyticsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateDeviceCameraCustomAnalytics(serial, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateDeviceCameraCustomAnalyticsRequest'];
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling updateDeviceCameraCustomAnalytics");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/camera/customAnalytics', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeviceCameraQualityAndRetention operation.
     * @callback module:api/CameraApi~updateDeviceCameraQualityAndRetentionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update quality and retention settings for the given camera
     * Update quality and retention settings for the given camera
     * @param {String} serial 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateDeviceCameraQualityAndRetentionRequest} [updateDeviceCameraQualityAndRetentionRequest] 
     * @param {module:api/CameraApi~updateDeviceCameraQualityAndRetentionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateDeviceCameraQualityAndRetention(serial, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateDeviceCameraQualityAndRetentionRequest'];
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling updateDeviceCameraQualityAndRetention");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/camera/qualityAndRetention', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeviceCameraSense operation.
     * @callback module:api/CameraApi~updateDeviceCameraSenseCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update sense settings for the given camera
     * Update sense settings for the given camera
     * @param {String} serial 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateDeviceCameraSenseRequest} [updateDeviceCameraSenseRequest] 
     * @param {module:api/CameraApi~updateDeviceCameraSenseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateDeviceCameraSense(serial, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateDeviceCameraSenseRequest'];
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling updateDeviceCameraSense");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/camera/sense', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeviceCameraVideoSettings operation.
     * @callback module:api/CameraApi~updateDeviceCameraVideoSettingsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update video settings for the given camera
     * Update video settings for the given camera
     * @param {String} serial 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateDeviceCameraVideoSettingsRequest} [updateDeviceCameraVideoSettingsRequest] 
     * @param {module:api/CameraApi~updateDeviceCameraVideoSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateDeviceCameraVideoSettings(serial, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateDeviceCameraVideoSettingsRequest'];
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling updateDeviceCameraVideoSettings");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/camera/video/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeviceCameraWirelessProfiles operation.
     * @callback module:api/CameraApi~updateDeviceCameraWirelessProfilesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assign wireless profiles to the given camera
     * Assign wireless profiles to the given camera. Incremental updates are not supported, all profile assignment need to be supplied at once.
     * @param {String} serial 
     * @param {module:model/UpdateDeviceCameraWirelessProfilesRequest} updateDeviceCameraWirelessProfilesRequest 
     * @param {module:api/CameraApi~updateDeviceCameraWirelessProfilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateDeviceCameraWirelessProfiles(serial, updateDeviceCameraWirelessProfilesRequest, callback) {
      let postBody = updateDeviceCameraWirelessProfilesRequest;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling updateDeviceCameraWirelessProfiles");
      }
      // verify the required parameter 'updateDeviceCameraWirelessProfilesRequest' is set
      if (updateDeviceCameraWirelessProfilesRequest === undefined || updateDeviceCameraWirelessProfilesRequest === null) {
        throw new Error("Missing the required parameter 'updateDeviceCameraWirelessProfilesRequest' when calling updateDeviceCameraWirelessProfiles");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/camera/wirelessProfiles', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkCameraQualityRetentionProfile operation.
     * @callback module:api/CameraApi~updateNetworkCameraQualityRetentionProfileCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing quality retention profile for this network.
     * Update an existing quality retention profile for this network.
     * @param {String} networkId 
     * @param {String} qualityRetentionProfileId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkCameraQualityRetentionProfileRequest} [updateNetworkCameraQualityRetentionProfileRequest] 
     * @param {module:api/CameraApi~updateNetworkCameraQualityRetentionProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkCameraQualityRetentionProfile(networkId, qualityRetentionProfileId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkCameraQualityRetentionProfileRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkCameraQualityRetentionProfile");
      }
      // verify the required parameter 'qualityRetentionProfileId' is set
      if (qualityRetentionProfileId === undefined || qualityRetentionProfileId === null) {
        throw new Error("Missing the required parameter 'qualityRetentionProfileId' when calling updateNetworkCameraQualityRetentionProfile");
      }

      let pathParams = {
        'networkId': networkId,
        'qualityRetentionProfileId': qualityRetentionProfileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/camera/qualityRetentionProfiles/{qualityRetentionProfileId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkCameraWirelessProfile operation.
     * @callback module:api/CameraApi~updateNetworkCameraWirelessProfileCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing camera wireless profile in this network.
     * Update an existing camera wireless profile in this network.
     * @param {String} networkId 
     * @param {String} wirelessProfileId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkCameraWirelessProfileRequest} [updateNetworkCameraWirelessProfileRequest] 
     * @param {module:api/CameraApi~updateNetworkCameraWirelessProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkCameraWirelessProfile(networkId, wirelessProfileId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkCameraWirelessProfileRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkCameraWirelessProfile");
      }
      // verify the required parameter 'wirelessProfileId' is set
      if (wirelessProfileId === undefined || wirelessProfileId === null) {
        throw new Error("Missing the required parameter 'wirelessProfileId' when calling updateNetworkCameraWirelessProfile");
      }

      let pathParams = {
        'networkId': networkId,
        'wirelessProfileId': wirelessProfileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/camera/wirelessProfiles/{wirelessProfileId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationCameraOnboardingStatuses operation.
     * @callback module:api/CameraApi~updateOrganizationCameraOnboardingStatusesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Notify that credential handoff to camera has completed
     * Notify that credential handoff to camera has completed
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationCameraOnboardingStatusesRequest} [updateOrganizationCameraOnboardingStatusesRequest] 
     * @param {module:api/CameraApi~updateOrganizationCameraOnboardingStatusesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateOrganizationCameraOnboardingStatuses(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateOrganizationCameraOnboardingStatusesRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationCameraOnboardingStatuses");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/camera/onboarding/statuses', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
