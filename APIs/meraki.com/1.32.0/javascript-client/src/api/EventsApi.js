/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateNetworkFirmwareUpgradesStagedEventRequest from '../model/CreateNetworkFirmwareUpgradesStagedEventRequest';
import GetNetworkEvents200Response from '../model/GetNetworkEvents200Response';
import GetNetworkEventsEventTypes200ResponseInner from '../model/GetNetworkEventsEventTypes200ResponseInner';
import GetNetworkFirmwareUpgradesStagedEvents200Response from '../model/GetNetworkFirmwareUpgradesStagedEvents200Response';
import RollbacksNetworkFirmwareUpgradesStagedEventsRequest from '../model/RollbacksNetworkFirmwareUpgradesStagedEventsRequest';
import UpdateNetworkFirmwareUpgradesStagedEventsRequest from '../model/UpdateNetworkFirmwareUpgradesStagedEventsRequest';

/**
* Events service.
* @module api/EventsApi
* @version 1.32.0
*/
export default class EventsApi {

    /**
    * Constructs a new EventsApi. 
    * @alias module:api/EventsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createNetworkFirmwareUpgradesStagedEvent_3 operation.
     * @callback module:api/EventsApi~createNetworkFirmwareUpgradesStagedEvent_3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkFirmwareUpgradesStagedEvents200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Staged Upgrade Event for a network
     * Create a Staged Upgrade Event for a network
     * @param {String} networkId 
     * @param {module:model/CreateNetworkFirmwareUpgradesStagedEventRequest} createNetworkFirmwareUpgradesStagedEventRequest 
     * @param {module:api/EventsApi~createNetworkFirmwareUpgradesStagedEvent_3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkFirmwareUpgradesStagedEvents200Response}
     */
    createNetworkFirmwareUpgradesStagedEvent_3(networkId, createNetworkFirmwareUpgradesStagedEventRequest, callback) {
      let postBody = createNetworkFirmwareUpgradesStagedEventRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkFirmwareUpgradesStagedEvent_3");
      }
      // verify the required parameter 'createNetworkFirmwareUpgradesStagedEventRequest' is set
      if (createNetworkFirmwareUpgradesStagedEventRequest === undefined || createNetworkFirmwareUpgradesStagedEventRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkFirmwareUpgradesStagedEventRequest' when calling createNetworkFirmwareUpgradesStagedEvent_3");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkFirmwareUpgradesStagedEvents200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/firmwareUpgrades/staged/events', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deferNetworkFirmwareUpgradesStagedEvents_3 operation.
     * @callback module:api/EventsApi~deferNetworkFirmwareUpgradesStagedEvents_3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkFirmwareUpgradesStagedEvents200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Postpone by 1 week all pending staged upgrade stages for a network
     * Postpone by 1 week all pending staged upgrade stages for a network
     * @param {String} networkId 
     * @param {module:api/EventsApi~deferNetworkFirmwareUpgradesStagedEvents_3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkFirmwareUpgradesStagedEvents200Response}
     */
    deferNetworkFirmwareUpgradesStagedEvents_3(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deferNetworkFirmwareUpgradesStagedEvents_3");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkFirmwareUpgradesStagedEvents200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/firmwareUpgrades/staged/events/defer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceClientSecurityEvents_3 operation.
     * @callback module:api/EventsApi~getNetworkApplianceClientSecurityEvents_3Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the security events for a client
     * List the security events for a client. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param {String} networkId 
     * @param {String} clientId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. Data is gathered after the specified t0 value. The maximum lookback period is 791 days from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 791 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 791 days. The default is 31 days.
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:model/String} [sortOrder] Sorted order of security events based on event detection time. Order options are 'ascending' or 'descending'. Default is ascending order.
     * @param {module:api/EventsApi~getNetworkApplianceClientSecurityEvents_3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkApplianceClientSecurityEvents_3(networkId, clientId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceClientSecurityEvents_3");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getNetworkApplianceClientSecurityEvents_3");
      }

      let pathParams = {
        'networkId': networkId,
        'clientId': clientId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan'],
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        'sortOrder': opts['sortOrder']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/clients/{clientId}/security/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceSecurityEvents_2 operation.
     * @callback module:api/EventsApi~getNetworkApplianceSecurityEvents_2Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the security events for a network
     * List the security events for a network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. Data is gathered after the specified t0 value. The maximum lookback period is 365 days from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 365 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 365 days. The default is 31 days.
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:model/String} [sortOrder] Sorted order of security events based on event detection time. Order options are 'ascending' or 'descending'. Default is ascending order.
     * @param {module:api/EventsApi~getNetworkApplianceSecurityEvents_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkApplianceSecurityEvents_2(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceSecurityEvents_2");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan'],
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        'sortOrder': opts['sortOrder']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/security/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkEventsEventTypes_1 operation.
     * @callback module:api/EventsApi~getNetworkEventsEventTypes_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkEventsEventTypes200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the event type to human-readable description
     * List the event type to human-readable description
     * @param {String} networkId 
     * @param {module:api/EventsApi~getNetworkEventsEventTypes_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkEventsEventTypes200ResponseInner>}
     */
    getNetworkEventsEventTypes_1(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkEventsEventTypes_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkEventsEventTypes200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/events/eventTypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkEvents_1 operation.
     * @callback module:api/EventsApi~getNetworkEvents_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkEvents200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the events for the network
     * List the events for the network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [productType] The product type to fetch events for. This parameter is required for networks with multiple device types. Valid types are wireless, appliance, switch, systemsManager, camera, and cellularGateway
     * @param {Array.<String>} [includedEventTypes] A list of event types. The returned events will be filtered to only include events with these types.
     * @param {Array.<String>} [excludedEventTypes] A list of event types. The returned events will be filtered to exclude events with these types.
     * @param {String} [deviceMac] The MAC address of the Meraki device which the list of events will be filtered with
     * @param {String} [deviceSerial] The serial of the Meraki device which the list of events will be filtered with
     * @param {String} [deviceName] The name of the Meraki device which the list of events will be filtered with
     * @param {String} [clientIp] The IP of the client which the list of events will be filtered with. Only supported for track-by-IP networks.
     * @param {String} [clientMac] The MAC address of the client which the list of events will be filtered with. Only supported for track-by-MAC networks.
     * @param {String} [clientName] The name, or partial name, of the client which the list of events will be filtered with
     * @param {String} [smDeviceMac] The MAC address of the Systems Manager device which the list of events will be filtered with
     * @param {String} [smDeviceName] The name of the Systems Manager device which the list of events will be filtered with
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 10.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:api/EventsApi~getNetworkEvents_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkEvents200Response}
     */
    getNetworkEvents_1(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkEvents_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        'productType': opts['productType'],
        'includedEventTypes': this.apiClient.buildCollectionParam(opts['includedEventTypes'], 'csv'),
        'excludedEventTypes': this.apiClient.buildCollectionParam(opts['excludedEventTypes'], 'csv'),
        'deviceMac': opts['deviceMac'],
        'deviceSerial': opts['deviceSerial'],
        'deviceName': opts['deviceName'],
        'clientIp': opts['clientIp'],
        'clientMac': opts['clientMac'],
        'clientName': opts['clientName'],
        'smDeviceMac': opts['smDeviceMac'],
        'smDeviceName': opts['smDeviceName'],
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkEvents200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkFirmwareUpgradesStagedEvents_3 operation.
     * @callback module:api/EventsApi~getNetworkFirmwareUpgradesStagedEvents_3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkFirmwareUpgradesStagedEvents200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the Staged Upgrade Event from a network
     * Get the Staged Upgrade Event from a network
     * @param {String} networkId 
     * @param {module:api/EventsApi~getNetworkFirmwareUpgradesStagedEvents_3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkFirmwareUpgradesStagedEvents200Response}
     */
    getNetworkFirmwareUpgradesStagedEvents_3(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkFirmwareUpgradesStagedEvents_3");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkFirmwareUpgradesStagedEvents200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/firmwareUpgrades/staged/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationApplianceSecurityEvents_2 operation.
     * @callback module:api/EventsApi~getOrganizationApplianceSecurityEvents_2Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the security events for an organization
     * List the security events for an organization
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. Data is gathered after the specified t0 value. The maximum lookback period is 365 days from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 365 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 365 days. The default is 31 days.
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:model/String} [sortOrder] Sorted order of security events based on event detection time. Order options are 'ascending' or 'descending'. Default is ascending order.
     * @param {module:api/EventsApi~getOrganizationApplianceSecurityEvents_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getOrganizationApplianceSecurityEvents_2(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationApplianceSecurityEvents_2");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan'],
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        'sortOrder': opts['sortOrder']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/appliance/security/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rollbacksNetworkFirmwareUpgradesStagedEvents_3 operation.
     * @callback module:api/EventsApi~rollbacksNetworkFirmwareUpgradesStagedEvents_3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkFirmwareUpgradesStagedEvents200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rollback a Staged Upgrade Event for a network
     * Rollback a Staged Upgrade Event for a network
     * @param {String} networkId 
     * @param {module:model/RollbacksNetworkFirmwareUpgradesStagedEventsRequest} rollbacksNetworkFirmwareUpgradesStagedEventsRequest 
     * @param {module:api/EventsApi~rollbacksNetworkFirmwareUpgradesStagedEvents_3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkFirmwareUpgradesStagedEvents200Response}
     */
    rollbacksNetworkFirmwareUpgradesStagedEvents_3(networkId, rollbacksNetworkFirmwareUpgradesStagedEventsRequest, callback) {
      let postBody = rollbacksNetworkFirmwareUpgradesStagedEventsRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling rollbacksNetworkFirmwareUpgradesStagedEvents_3");
      }
      // verify the required parameter 'rollbacksNetworkFirmwareUpgradesStagedEventsRequest' is set
      if (rollbacksNetworkFirmwareUpgradesStagedEventsRequest === undefined || rollbacksNetworkFirmwareUpgradesStagedEventsRequest === null) {
        throw new Error("Missing the required parameter 'rollbacksNetworkFirmwareUpgradesStagedEventsRequest' when calling rollbacksNetworkFirmwareUpgradesStagedEvents_3");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkFirmwareUpgradesStagedEvents200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/firmwareUpgrades/staged/events/rollbacks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkFirmwareUpgradesStagedEvents_3 operation.
     * @callback module:api/EventsApi~updateNetworkFirmwareUpgradesStagedEvents_3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkFirmwareUpgradesStagedEvents200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the Staged Upgrade Event for a network
     * Update the Staged Upgrade Event for a network
     * @param {String} networkId 
     * @param {module:model/UpdateNetworkFirmwareUpgradesStagedEventsRequest} updateNetworkFirmwareUpgradesStagedEventsRequest 
     * @param {module:api/EventsApi~updateNetworkFirmwareUpgradesStagedEvents_3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkFirmwareUpgradesStagedEvents200Response}
     */
    updateNetworkFirmwareUpgradesStagedEvents_3(networkId, updateNetworkFirmwareUpgradesStagedEventsRequest, callback) {
      let postBody = updateNetworkFirmwareUpgradesStagedEventsRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkFirmwareUpgradesStagedEvents_3");
      }
      // verify the required parameter 'updateNetworkFirmwareUpgradesStagedEventsRequest' is set
      if (updateNetworkFirmwareUpgradesStagedEventsRequest === undefined || updateNetworkFirmwareUpgradesStagedEventsRequest === null) {
        throw new Error("Missing the required parameter 'updateNetworkFirmwareUpgradesStagedEventsRequest' when calling updateNetworkFirmwareUpgradesStagedEvents_3");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkFirmwareUpgradesStagedEvents200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/firmwareUpgrades/staged/events', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
