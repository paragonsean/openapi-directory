/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateDeviceSwitchRoutingStaticRouteRequest from '../model/CreateDeviceSwitchRoutingStaticRouteRequest';
import CreateNetworkApplianceStaticRouteRequest from '../model/CreateNetworkApplianceStaticRouteRequest';
import GetDeviceSwitchRoutingStaticRoute200Response from '../model/GetDeviceSwitchRoutingStaticRoute200Response';
import UpdateDeviceSwitchRoutingStaticRouteRequest from '../model/UpdateDeviceSwitchRoutingStaticRouteRequest';
import UpdateNetworkApplianceStaticRouteRequest from '../model/UpdateNetworkApplianceStaticRouteRequest';

/**
* StaticRoutes service.
* @module api/StaticRoutesApi
* @version 1.32.0
*/
export default class StaticRoutesApi {

    /**
    * Constructs a new StaticRoutesApi. 
    * @alias module:api/StaticRoutesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createDeviceSwitchRoutingStaticRoute_2 operation.
     * @callback module:api/StaticRoutesApi~createDeviceSwitchRoutingStaticRoute_2Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a layer 3 static route for a switch
     * Create a layer 3 static route for a switch
     * @param {String} serial 
     * @param {module:model/CreateDeviceSwitchRoutingStaticRouteRequest} createDeviceSwitchRoutingStaticRouteRequest 
     * @param {module:api/StaticRoutesApi~createDeviceSwitchRoutingStaticRoute_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createDeviceSwitchRoutingStaticRoute_2(serial, createDeviceSwitchRoutingStaticRouteRequest, callback) {
      let postBody = createDeviceSwitchRoutingStaticRouteRequest;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling createDeviceSwitchRoutingStaticRoute_2");
      }
      // verify the required parameter 'createDeviceSwitchRoutingStaticRouteRequest' is set
      if (createDeviceSwitchRoutingStaticRouteRequest === undefined || createDeviceSwitchRoutingStaticRouteRequest === null) {
        throw new Error("Missing the required parameter 'createDeviceSwitchRoutingStaticRouteRequest' when calling createDeviceSwitchRoutingStaticRoute_2");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/switch/routing/staticRoutes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkApplianceStaticRoute_1 operation.
     * @callback module:api/StaticRoutesApi~createNetworkApplianceStaticRoute_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a static route for an MX or teleworker network
     * Add a static route for an MX or teleworker network
     * @param {String} networkId 
     * @param {module:model/CreateNetworkApplianceStaticRouteRequest} createNetworkApplianceStaticRouteRequest 
     * @param {module:api/StaticRoutesApi~createNetworkApplianceStaticRoute_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNetworkApplianceStaticRoute_1(networkId, createNetworkApplianceStaticRouteRequest, callback) {
      let postBody = createNetworkApplianceStaticRouteRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkApplianceStaticRoute_1");
      }
      // verify the required parameter 'createNetworkApplianceStaticRouteRequest' is set
      if (createNetworkApplianceStaticRouteRequest === undefined || createNetworkApplianceStaticRouteRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkApplianceStaticRouteRequest' when calling createNetworkApplianceStaticRoute_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/staticRoutes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkSwitchStackRoutingStaticRoute_3 operation.
     * @callback module:api/StaticRoutesApi~createNetworkSwitchStackRoutingStaticRoute_3Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a layer 3 static route for a switch stack
     * Create a layer 3 static route for a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {module:model/CreateDeviceSwitchRoutingStaticRouteRequest} createDeviceSwitchRoutingStaticRouteRequest 
     * @param {module:api/StaticRoutesApi~createNetworkSwitchStackRoutingStaticRoute_3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNetworkSwitchStackRoutingStaticRoute_3(networkId, switchStackId, createDeviceSwitchRoutingStaticRouteRequest, callback) {
      let postBody = createDeviceSwitchRoutingStaticRouteRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkSwitchStackRoutingStaticRoute_3");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling createNetworkSwitchStackRoutingStaticRoute_3");
      }
      // verify the required parameter 'createDeviceSwitchRoutingStaticRouteRequest' is set
      if (createDeviceSwitchRoutingStaticRouteRequest === undefined || createDeviceSwitchRoutingStaticRouteRequest === null) {
        throw new Error("Missing the required parameter 'createDeviceSwitchRoutingStaticRouteRequest' when calling createNetworkSwitchStackRoutingStaticRoute_3");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDeviceSwitchRoutingStaticRoute_2 operation.
     * @callback module:api/StaticRoutesApi~deleteDeviceSwitchRoutingStaticRoute_2Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a layer 3 static route for a switch
     * Delete a layer 3 static route for a switch
     * @param {String} serial 
     * @param {String} staticRouteId 
     * @param {module:api/StaticRoutesApi~deleteDeviceSwitchRoutingStaticRoute_2Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDeviceSwitchRoutingStaticRoute_2(serial, staticRouteId, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling deleteDeviceSwitchRoutingStaticRoute_2");
      }
      // verify the required parameter 'staticRouteId' is set
      if (staticRouteId === undefined || staticRouteId === null) {
        throw new Error("Missing the required parameter 'staticRouteId' when calling deleteDeviceSwitchRoutingStaticRoute_2");
      }

      let pathParams = {
        'serial': serial,
        'staticRouteId': staticRouteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/devices/{serial}/switch/routing/staticRoutes/{staticRouteId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkApplianceStaticRoute_1 operation.
     * @callback module:api/StaticRoutesApi~deleteNetworkApplianceStaticRoute_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a static route from an MX or teleworker network
     * Delete a static route from an MX or teleworker network
     * @param {String} networkId 
     * @param {String} staticRouteId 
     * @param {module:api/StaticRoutesApi~deleteNetworkApplianceStaticRoute_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkApplianceStaticRoute_1(networkId, staticRouteId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkApplianceStaticRoute_1");
      }
      // verify the required parameter 'staticRouteId' is set
      if (staticRouteId === undefined || staticRouteId === null) {
        throw new Error("Missing the required parameter 'staticRouteId' when calling deleteNetworkApplianceStaticRoute_1");
      }

      let pathParams = {
        'networkId': networkId,
        'staticRouteId': staticRouteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/staticRoutes/{staticRouteId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkSwitchStackRoutingStaticRoute_3 operation.
     * @callback module:api/StaticRoutesApi~deleteNetworkSwitchStackRoutingStaticRoute_3Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a layer 3 static route for a switch stack
     * Delete a layer 3 static route for a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {String} staticRouteId 
     * @param {module:api/StaticRoutesApi~deleteNetworkSwitchStackRoutingStaticRoute_3Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkSwitchStackRoutingStaticRoute_3(networkId, switchStackId, staticRouteId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkSwitchStackRoutingStaticRoute_3");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling deleteNetworkSwitchStackRoutingStaticRoute_3");
      }
      // verify the required parameter 'staticRouteId' is set
      if (staticRouteId === undefined || staticRouteId === null) {
        throw new Error("Missing the required parameter 'staticRouteId' when calling deleteNetworkSwitchStackRoutingStaticRoute_3");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId,
        'staticRouteId': staticRouteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes/{staticRouteId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceSwitchRoutingStaticRoute_2 operation.
     * @callback module:api/StaticRoutesApi~getDeviceSwitchRoutingStaticRoute_2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDeviceSwitchRoutingStaticRoute200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a layer 3 static route for a switch
     * Return a layer 3 static route for a switch
     * @param {String} serial 
     * @param {String} staticRouteId 
     * @param {module:api/StaticRoutesApi~getDeviceSwitchRoutingStaticRoute_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDeviceSwitchRoutingStaticRoute200Response}
     */
    getDeviceSwitchRoutingStaticRoute_2(serial, staticRouteId, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceSwitchRoutingStaticRoute_2");
      }
      // verify the required parameter 'staticRouteId' is set
      if (staticRouteId === undefined || staticRouteId === null) {
        throw new Error("Missing the required parameter 'staticRouteId' when calling getDeviceSwitchRoutingStaticRoute_2");
      }

      let pathParams = {
        'serial': serial,
        'staticRouteId': staticRouteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDeviceSwitchRoutingStaticRoute200Response;
      return this.apiClient.callApi(
        '/devices/{serial}/switch/routing/staticRoutes/{staticRouteId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceSwitchRoutingStaticRoutes_2 operation.
     * @callback module:api/StaticRoutesApi~getDeviceSwitchRoutingStaticRoutes_2Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List layer 3 static routes for a switch
     * List layer 3 static routes for a switch
     * @param {String} serial 
     * @param {module:api/StaticRoutesApi~getDeviceSwitchRoutingStaticRoutes_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getDeviceSwitchRoutingStaticRoutes_2(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceSwitchRoutingStaticRoutes_2");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/devices/{serial}/switch/routing/staticRoutes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceStaticRoute_1 operation.
     * @callback module:api/StaticRoutesApi~getNetworkApplianceStaticRoute_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a static route for an MX or teleworker network
     * Return a static route for an MX or teleworker network
     * @param {String} networkId 
     * @param {String} staticRouteId 
     * @param {module:api/StaticRoutesApi~getNetworkApplianceStaticRoute_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkApplianceStaticRoute_1(networkId, staticRouteId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceStaticRoute_1");
      }
      // verify the required parameter 'staticRouteId' is set
      if (staticRouteId === undefined || staticRouteId === null) {
        throw new Error("Missing the required parameter 'staticRouteId' when calling getNetworkApplianceStaticRoute_1");
      }

      let pathParams = {
        'networkId': networkId,
        'staticRouteId': staticRouteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/staticRoutes/{staticRouteId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceStaticRoutes_1 operation.
     * @callback module:api/StaticRoutesApi~getNetworkApplianceStaticRoutes_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the static routes for an MX or teleworker network
     * List the static routes for an MX or teleworker network
     * @param {String} networkId 
     * @param {module:api/StaticRoutesApi~getNetworkApplianceStaticRoutes_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkApplianceStaticRoutes_1(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceStaticRoutes_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/staticRoutes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchStackRoutingStaticRoute_3 operation.
     * @callback module:api/StaticRoutesApi~getNetworkSwitchStackRoutingStaticRoute_3Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a layer 3 static route for a switch stack
     * Return a layer 3 static route for a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {String} staticRouteId 
     * @param {module:api/StaticRoutesApi~getNetworkSwitchStackRoutingStaticRoute_3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkSwitchStackRoutingStaticRoute_3(networkId, switchStackId, staticRouteId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchStackRoutingStaticRoute_3");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling getNetworkSwitchStackRoutingStaticRoute_3");
      }
      // verify the required parameter 'staticRouteId' is set
      if (staticRouteId === undefined || staticRouteId === null) {
        throw new Error("Missing the required parameter 'staticRouteId' when calling getNetworkSwitchStackRoutingStaticRoute_3");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId,
        'staticRouteId': staticRouteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes/{staticRouteId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchStackRoutingStaticRoutes_3 operation.
     * @callback module:api/StaticRoutesApi~getNetworkSwitchStackRoutingStaticRoutes_3Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List layer 3 static routes for a switch stack
     * List layer 3 static routes for a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {module:api/StaticRoutesApi~getNetworkSwitchStackRoutingStaticRoutes_3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkSwitchStackRoutingStaticRoutes_3(networkId, switchStackId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchStackRoutingStaticRoutes_3");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling getNetworkSwitchStackRoutingStaticRoutes_3");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeviceSwitchRoutingStaticRoute_2 operation.
     * @callback module:api/StaticRoutesApi~updateDeviceSwitchRoutingStaticRoute_2Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a layer 3 static route for a switch
     * Update a layer 3 static route for a switch
     * @param {String} serial 
     * @param {String} staticRouteId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateDeviceSwitchRoutingStaticRouteRequest} [updateDeviceSwitchRoutingStaticRouteRequest] 
     * @param {module:api/StaticRoutesApi~updateDeviceSwitchRoutingStaticRoute_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateDeviceSwitchRoutingStaticRoute_2(serial, staticRouteId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateDeviceSwitchRoutingStaticRouteRequest'];
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling updateDeviceSwitchRoutingStaticRoute_2");
      }
      // verify the required parameter 'staticRouteId' is set
      if (staticRouteId === undefined || staticRouteId === null) {
        throw new Error("Missing the required parameter 'staticRouteId' when calling updateDeviceSwitchRoutingStaticRoute_2");
      }

      let pathParams = {
        'serial': serial,
        'staticRouteId': staticRouteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/switch/routing/staticRoutes/{staticRouteId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceStaticRoute_1 operation.
     * @callback module:api/StaticRoutesApi~updateNetworkApplianceStaticRoute_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a static route for an MX or teleworker network
     * Update a static route for an MX or teleworker network
     * @param {String} networkId 
     * @param {String} staticRouteId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkApplianceStaticRouteRequest} [updateNetworkApplianceStaticRouteRequest] 
     * @param {module:api/StaticRoutesApi~updateNetworkApplianceStaticRoute_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkApplianceStaticRoute_1(networkId, staticRouteId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkApplianceStaticRouteRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceStaticRoute_1");
      }
      // verify the required parameter 'staticRouteId' is set
      if (staticRouteId === undefined || staticRouteId === null) {
        throw new Error("Missing the required parameter 'staticRouteId' when calling updateNetworkApplianceStaticRoute_1");
      }

      let pathParams = {
        'networkId': networkId,
        'staticRouteId': staticRouteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/staticRoutes/{staticRouteId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSwitchStackRoutingStaticRoute_3 operation.
     * @callback module:api/StaticRoutesApi~updateNetworkSwitchStackRoutingStaticRoute_3Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a layer 3 static route for a switch stack
     * Update a layer 3 static route for a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {String} staticRouteId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateDeviceSwitchRoutingStaticRouteRequest} [updateDeviceSwitchRoutingStaticRouteRequest] 
     * @param {module:api/StaticRoutesApi~updateNetworkSwitchStackRoutingStaticRoute_3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkSwitchStackRoutingStaticRoute_3(networkId, switchStackId, staticRouteId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateDeviceSwitchRoutingStaticRouteRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSwitchStackRoutingStaticRoute_3");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling updateNetworkSwitchStackRoutingStaticRoute_3");
      }
      // verify the required parameter 'staticRouteId' is set
      if (staticRouteId === undefined || staticRouteId === null) {
        throw new Error("Missing the required parameter 'staticRouteId' when calling updateNetworkSwitchStackRoutingStaticRoute_3");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId,
        'staticRouteId': staticRouteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes/{staticRouteId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
