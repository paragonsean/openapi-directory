/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddNetworkSwitchStackRequest from '../model/AddNetworkSwitchStackRequest';
import CreateDeviceSwitchRoutingStaticRouteRequest from '../model/CreateDeviceSwitchRoutingStaticRouteRequest';
import CreateNetworkSwitchStackRequest from '../model/CreateNetworkSwitchStackRequest';
import CreateNetworkSwitchStackRoutingInterfaceRequest from '../model/CreateNetworkSwitchStackRoutingInterfaceRequest';
import GetNetworkSwitchStack200Response from '../model/GetNetworkSwitchStack200Response';
import RemoveNetworkSwitchStackRequest from '../model/RemoveNetworkSwitchStackRequest';
import UpdateDeviceSwitchRoutingStaticRouteRequest from '../model/UpdateDeviceSwitchRoutingStaticRouteRequest';
import UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest from '../model/UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest';
import UpdateNetworkSwitchStackRoutingInterfaceRequest from '../model/UpdateNetworkSwitchStackRoutingInterfaceRequest';

/**
* Stacks service.
* @module api/StacksApi
* @version 1.32.0
*/
export default class StacksApi {

    /**
    * Constructs a new StacksApi. 
    * @alias module:api/StacksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addNetworkSwitchStack_1 operation.
     * @callback module:api/StacksApi~addNetworkSwitchStack_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a switch to a stack
     * Add a switch to a stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {module:model/AddNetworkSwitchStackRequest} addNetworkSwitchStackRequest 
     * @param {module:api/StacksApi~addNetworkSwitchStack_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    addNetworkSwitchStack_1(networkId, switchStackId, addNetworkSwitchStackRequest, callback) {
      let postBody = addNetworkSwitchStackRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling addNetworkSwitchStack_1");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling addNetworkSwitchStack_1");
      }
      // verify the required parameter 'addNetworkSwitchStackRequest' is set
      if (addNetworkSwitchStackRequest === undefined || addNetworkSwitchStackRequest === null) {
        throw new Error("Missing the required parameter 'addNetworkSwitchStackRequest' when calling addNetworkSwitchStack_1");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkSwitchStackRoutingInterface_1 operation.
     * @callback module:api/StacksApi~createNetworkSwitchStackRoutingInterface_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a layer 3 interface for a switch stack
     * Create a layer 3 interface for a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {module:model/CreateNetworkSwitchStackRoutingInterfaceRequest} createNetworkSwitchStackRoutingInterfaceRequest 
     * @param {module:api/StacksApi~createNetworkSwitchStackRoutingInterface_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNetworkSwitchStackRoutingInterface_1(networkId, switchStackId, createNetworkSwitchStackRoutingInterfaceRequest, callback) {
      let postBody = createNetworkSwitchStackRoutingInterfaceRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkSwitchStackRoutingInterface_1");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling createNetworkSwitchStackRoutingInterface_1");
      }
      // verify the required parameter 'createNetworkSwitchStackRoutingInterfaceRequest' is set
      if (createNetworkSwitchStackRoutingInterfaceRequest === undefined || createNetworkSwitchStackRoutingInterfaceRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkSwitchStackRoutingInterfaceRequest' when calling createNetworkSwitchStackRoutingInterface_1");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkSwitchStackRoutingStaticRoute_1 operation.
     * @callback module:api/StacksApi~createNetworkSwitchStackRoutingStaticRoute_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a layer 3 static route for a switch stack
     * Create a layer 3 static route for a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {module:model/CreateDeviceSwitchRoutingStaticRouteRequest} createDeviceSwitchRoutingStaticRouteRequest 
     * @param {module:api/StacksApi~createNetworkSwitchStackRoutingStaticRoute_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNetworkSwitchStackRoutingStaticRoute_1(networkId, switchStackId, createDeviceSwitchRoutingStaticRouteRequest, callback) {
      let postBody = createDeviceSwitchRoutingStaticRouteRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkSwitchStackRoutingStaticRoute_1");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling createNetworkSwitchStackRoutingStaticRoute_1");
      }
      // verify the required parameter 'createDeviceSwitchRoutingStaticRouteRequest' is set
      if (createDeviceSwitchRoutingStaticRouteRequest === undefined || createDeviceSwitchRoutingStaticRouteRequest === null) {
        throw new Error("Missing the required parameter 'createDeviceSwitchRoutingStaticRouteRequest' when calling createNetworkSwitchStackRoutingStaticRoute_1");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkSwitchStack_1 operation.
     * @callback module:api/StacksApi~createNetworkSwitchStack_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a stack
     * Create a stack
     * @param {String} networkId 
     * @param {module:model/CreateNetworkSwitchStackRequest} createNetworkSwitchStackRequest 
     * @param {module:api/StacksApi~createNetworkSwitchStack_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNetworkSwitchStack_1(networkId, createNetworkSwitchStackRequest, callback) {
      let postBody = createNetworkSwitchStackRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkSwitchStack_1");
      }
      // verify the required parameter 'createNetworkSwitchStackRequest' is set
      if (createNetworkSwitchStackRequest === undefined || createNetworkSwitchStackRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkSwitchStackRequest' when calling createNetworkSwitchStack_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkSwitchStackRoutingInterface_1 operation.
     * @callback module:api/StacksApi~deleteNetworkSwitchStackRoutingInterface_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a layer 3 interface from a switch stack
     * Delete a layer 3 interface from a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {String} interfaceId 
     * @param {module:api/StacksApi~deleteNetworkSwitchStackRoutingInterface_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkSwitchStackRoutingInterface_1(networkId, switchStackId, interfaceId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkSwitchStackRoutingInterface_1");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling deleteNetworkSwitchStackRoutingInterface_1");
      }
      // verify the required parameter 'interfaceId' is set
      if (interfaceId === undefined || interfaceId === null) {
        throw new Error("Missing the required parameter 'interfaceId' when calling deleteNetworkSwitchStackRoutingInterface_1");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId,
        'interfaceId': interfaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkSwitchStackRoutingStaticRoute_1 operation.
     * @callback module:api/StacksApi~deleteNetworkSwitchStackRoutingStaticRoute_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a layer 3 static route for a switch stack
     * Delete a layer 3 static route for a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {String} staticRouteId 
     * @param {module:api/StacksApi~deleteNetworkSwitchStackRoutingStaticRoute_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkSwitchStackRoutingStaticRoute_1(networkId, switchStackId, staticRouteId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkSwitchStackRoutingStaticRoute_1");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling deleteNetworkSwitchStackRoutingStaticRoute_1");
      }
      // verify the required parameter 'staticRouteId' is set
      if (staticRouteId === undefined || staticRouteId === null) {
        throw new Error("Missing the required parameter 'staticRouteId' when calling deleteNetworkSwitchStackRoutingStaticRoute_1");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId,
        'staticRouteId': staticRouteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes/{staticRouteId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkSwitchStack_1 operation.
     * @callback module:api/StacksApi~deleteNetworkSwitchStack_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a stack
     * Delete a stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {module:api/StacksApi~deleteNetworkSwitchStack_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkSwitchStack_1(networkId, switchStackId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkSwitchStack_1");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling deleteNetworkSwitchStack_1");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchStackRoutingInterfaceDhcp_1 operation.
     * @callback module:api/StacksApi~getNetworkSwitchStackRoutingInterfaceDhcp_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a layer 3 interface DHCP configuration for a switch stack
     * Return a layer 3 interface DHCP configuration for a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {String} interfaceId 
     * @param {module:api/StacksApi~getNetworkSwitchStackRoutingInterfaceDhcp_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkSwitchStackRoutingInterfaceDhcp_1(networkId, switchStackId, interfaceId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchStackRoutingInterfaceDhcp_1");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling getNetworkSwitchStackRoutingInterfaceDhcp_1");
      }
      // verify the required parameter 'interfaceId' is set
      if (interfaceId === undefined || interfaceId === null) {
        throw new Error("Missing the required parameter 'interfaceId' when calling getNetworkSwitchStackRoutingInterfaceDhcp_1");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId,
        'interfaceId': interfaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}/dhcp', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchStackRoutingInterface_1 operation.
     * @callback module:api/StacksApi~getNetworkSwitchStackRoutingInterface_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a layer 3 interface from a switch stack
     * Return a layer 3 interface from a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {String} interfaceId 
     * @param {module:api/StacksApi~getNetworkSwitchStackRoutingInterface_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkSwitchStackRoutingInterface_1(networkId, switchStackId, interfaceId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchStackRoutingInterface_1");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling getNetworkSwitchStackRoutingInterface_1");
      }
      // verify the required parameter 'interfaceId' is set
      if (interfaceId === undefined || interfaceId === null) {
        throw new Error("Missing the required parameter 'interfaceId' when calling getNetworkSwitchStackRoutingInterface_1");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId,
        'interfaceId': interfaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchStackRoutingInterfaces_1 operation.
     * @callback module:api/StacksApi~getNetworkSwitchStackRoutingInterfaces_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List layer 3 interfaces for a switch stack
     * List layer 3 interfaces for a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {module:api/StacksApi~getNetworkSwitchStackRoutingInterfaces_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkSwitchStackRoutingInterfaces_1(networkId, switchStackId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchStackRoutingInterfaces_1");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling getNetworkSwitchStackRoutingInterfaces_1");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchStackRoutingStaticRoute_1 operation.
     * @callback module:api/StacksApi~getNetworkSwitchStackRoutingStaticRoute_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a layer 3 static route for a switch stack
     * Return a layer 3 static route for a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {String} staticRouteId 
     * @param {module:api/StacksApi~getNetworkSwitchStackRoutingStaticRoute_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkSwitchStackRoutingStaticRoute_1(networkId, switchStackId, staticRouteId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchStackRoutingStaticRoute_1");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling getNetworkSwitchStackRoutingStaticRoute_1");
      }
      // verify the required parameter 'staticRouteId' is set
      if (staticRouteId === undefined || staticRouteId === null) {
        throw new Error("Missing the required parameter 'staticRouteId' when calling getNetworkSwitchStackRoutingStaticRoute_1");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId,
        'staticRouteId': staticRouteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes/{staticRouteId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchStackRoutingStaticRoutes_1 operation.
     * @callback module:api/StacksApi~getNetworkSwitchStackRoutingStaticRoutes_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List layer 3 static routes for a switch stack
     * List layer 3 static routes for a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {module:api/StacksApi~getNetworkSwitchStackRoutingStaticRoutes_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkSwitchStackRoutingStaticRoutes_1(networkId, switchStackId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchStackRoutingStaticRoutes_1");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling getNetworkSwitchStackRoutingStaticRoutes_1");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchStack_1 operation.
     * @callback module:api/StacksApi~getNetworkSwitchStack_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkSwitchStack200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show a switch stack
     * Show a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {module:api/StacksApi~getNetworkSwitchStack_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkSwitchStack200Response}
     */
    getNetworkSwitchStack_1(networkId, switchStackId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchStack_1");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling getNetworkSwitchStack_1");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkSwitchStack200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchStacks_1 operation.
     * @callback module:api/StacksApi~getNetworkSwitchStacks_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the switch stacks in a network
     * List the switch stacks in a network
     * @param {String} networkId 
     * @param {module:api/StacksApi~getNetworkSwitchStacks_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkSwitchStacks_1(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchStacks_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeNetworkSwitchStack_1 operation.
     * @callback module:api/StacksApi~removeNetworkSwitchStack_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a switch from a stack
     * Remove a switch from a stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {module:model/RemoveNetworkSwitchStackRequest} removeNetworkSwitchStackRequest 
     * @param {module:api/StacksApi~removeNetworkSwitchStack_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    removeNetworkSwitchStack_1(networkId, switchStackId, removeNetworkSwitchStackRequest, callback) {
      let postBody = removeNetworkSwitchStackRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling removeNetworkSwitchStack_1");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling removeNetworkSwitchStack_1");
      }
      // verify the required parameter 'removeNetworkSwitchStackRequest' is set
      if (removeNetworkSwitchStackRequest === undefined || removeNetworkSwitchStackRequest === null) {
        throw new Error("Missing the required parameter 'removeNetworkSwitchStackRequest' when calling removeNetworkSwitchStack_1");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSwitchStackRoutingInterfaceDhcp_1 operation.
     * @callback module:api/StacksApi~updateNetworkSwitchStackRoutingInterfaceDhcp_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a layer 3 interface DHCP configuration for a switch stack
     * Update a layer 3 interface DHCP configuration for a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {String} interfaceId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest} [updateNetworkSwitchStackRoutingInterfaceDhcpRequest] 
     * @param {module:api/StacksApi~updateNetworkSwitchStackRoutingInterfaceDhcp_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkSwitchStackRoutingInterfaceDhcp_1(networkId, switchStackId, interfaceId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkSwitchStackRoutingInterfaceDhcpRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSwitchStackRoutingInterfaceDhcp_1");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling updateNetworkSwitchStackRoutingInterfaceDhcp_1");
      }
      // verify the required parameter 'interfaceId' is set
      if (interfaceId === undefined || interfaceId === null) {
        throw new Error("Missing the required parameter 'interfaceId' when calling updateNetworkSwitchStackRoutingInterfaceDhcp_1");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId,
        'interfaceId': interfaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}/dhcp', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSwitchStackRoutingInterface_1 operation.
     * @callback module:api/StacksApi~updateNetworkSwitchStackRoutingInterface_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a layer 3 interface for a switch stack
     * Update a layer 3 interface for a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {String} interfaceId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkSwitchStackRoutingInterfaceRequest} [updateNetworkSwitchStackRoutingInterfaceRequest] 
     * @param {module:api/StacksApi~updateNetworkSwitchStackRoutingInterface_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkSwitchStackRoutingInterface_1(networkId, switchStackId, interfaceId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkSwitchStackRoutingInterfaceRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSwitchStackRoutingInterface_1");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling updateNetworkSwitchStackRoutingInterface_1");
      }
      // verify the required parameter 'interfaceId' is set
      if (interfaceId === undefined || interfaceId === null) {
        throw new Error("Missing the required parameter 'interfaceId' when calling updateNetworkSwitchStackRoutingInterface_1");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId,
        'interfaceId': interfaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSwitchStackRoutingStaticRoute_1 operation.
     * @callback module:api/StacksApi~updateNetworkSwitchStackRoutingStaticRoute_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a layer 3 static route for a switch stack
     * Update a layer 3 static route for a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {String} staticRouteId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateDeviceSwitchRoutingStaticRouteRequest} [updateDeviceSwitchRoutingStaticRouteRequest] 
     * @param {module:api/StacksApi~updateNetworkSwitchStackRoutingStaticRoute_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkSwitchStackRoutingStaticRoute_1(networkId, switchStackId, staticRouteId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateDeviceSwitchRoutingStaticRouteRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSwitchStackRoutingStaticRoute_1");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling updateNetworkSwitchStackRoutingStaticRoute_1");
      }
      // verify the required parameter 'staticRouteId' is set
      if (staticRouteId === undefined || staticRouteId === null) {
        throw new Error("Missing the required parameter 'staticRouteId' when calling updateNetworkSwitchStackRoutingStaticRoute_1");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId,
        'staticRouteId': staticRouteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes/{staticRouteId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
