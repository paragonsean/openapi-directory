/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddNetworkSwitchStackRequest from '../model/AddNetworkSwitchStackRequest';
import CloneOrganizationSwitchDevicesRequest from '../model/CloneOrganizationSwitchDevicesRequest';
import CreateDeviceSwitchRoutingInterfaceRequest from '../model/CreateDeviceSwitchRoutingInterfaceRequest';
import CreateDeviceSwitchRoutingStaticRouteRequest from '../model/CreateDeviceSwitchRoutingStaticRouteRequest';
import CreateNetworkSwitchAccessPolicyRequest from '../model/CreateNetworkSwitchAccessPolicyRequest';
import CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest from '../model/CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest';
import CreateNetworkSwitchLinkAggregationRequest from '../model/CreateNetworkSwitchLinkAggregationRequest';
import CreateNetworkSwitchPortScheduleRequest from '../model/CreateNetworkSwitchPortScheduleRequest';
import CreateNetworkSwitchQosRuleRequest from '../model/CreateNetworkSwitchQosRuleRequest';
import CreateNetworkSwitchRoutingMulticastRendezvousPointRequest from '../model/CreateNetworkSwitchRoutingMulticastRendezvousPointRequest';
import CreateNetworkSwitchStackRequest from '../model/CreateNetworkSwitchStackRequest';
import CreateNetworkSwitchStackRoutingInterfaceRequest from '../model/CreateNetworkSwitchStackRoutingInterfaceRequest';
import CycleDeviceSwitchPortsRequest from '../model/CycleDeviceSwitchPortsRequest';
import GetDeviceSwitchPorts200ResponseInner from '../model/GetDeviceSwitchPorts200ResponseInner';
import GetDeviceSwitchPortsStatuses200ResponseInner from '../model/GetDeviceSwitchPortsStatuses200ResponseInner';
import GetDeviceSwitchRoutingInterfaces200ResponseInner from '../model/GetDeviceSwitchRoutingInterfaces200ResponseInner';
import GetDeviceSwitchRoutingStaticRoute200Response from '../model/GetDeviceSwitchRoutingStaticRoute200Response';
import GetNetworkSwitchAccessControlLists200Response from '../model/GetNetworkSwitchAccessControlLists200Response';
import GetNetworkSwitchAccessPolicies200ResponseInner from '../model/GetNetworkSwitchAccessPolicies200ResponseInner';
import GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner from '../model/GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner';
import GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner from '../model/GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner';
import GetNetworkSwitchDhcpV4ServersSeen200ResponseInner from '../model/GetNetworkSwitchDhcpV4ServersSeen200ResponseInner';
import GetNetworkSwitchMtu200Response from '../model/GetNetworkSwitchMtu200Response';
import GetNetworkSwitchSettings200Response from '../model/GetNetworkSwitchSettings200Response';
import GetNetworkSwitchStack200Response from '../model/GetNetworkSwitchStack200Response';
import GetNetworkSwitchStormControl200Response from '../model/GetNetworkSwitchStormControl200Response';
import GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner from '../model/GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner';
import GetOrganizationConfigTemplateSwitchProfiles200Response from '../model/GetOrganizationConfigTemplateSwitchProfiles200Response';
import GetOrganizationSwitchPortsBySwitch200ResponseInner from '../model/GetOrganizationSwitchPortsBySwitch200ResponseInner';
import RemoveNetworkSwitchStackRequest from '../model/RemoveNetworkSwitchStackRequest';
import UpdateDeviceSwitchPortRequest from '../model/UpdateDeviceSwitchPortRequest';
import UpdateDeviceSwitchRoutingInterfaceDhcpRequest from '../model/UpdateDeviceSwitchRoutingInterfaceDhcpRequest';
import UpdateDeviceSwitchRoutingStaticRouteRequest from '../model/UpdateDeviceSwitchRoutingStaticRouteRequest';
import UpdateDeviceSwitchWarmSpareRequest from '../model/UpdateDeviceSwitchWarmSpareRequest';
import UpdateNetworkSwitchAccessControlListsRequest from '../model/UpdateNetworkSwitchAccessControlListsRequest';
import UpdateNetworkSwitchAccessPolicyRequest from '../model/UpdateNetworkSwitchAccessPolicyRequest';
import UpdateNetworkSwitchAlternateManagementInterfaceRequest from '../model/UpdateNetworkSwitchAlternateManagementInterfaceRequest';
import UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest from '../model/UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest';
import UpdateNetworkSwitchDhcpServerPolicyRequest from '../model/UpdateNetworkSwitchDhcpServerPolicyRequest';
import UpdateNetworkSwitchDscpToCosMappingsRequest from '../model/UpdateNetworkSwitchDscpToCosMappingsRequest';
import UpdateNetworkSwitchLinkAggregationRequest from '../model/UpdateNetworkSwitchLinkAggregationRequest';
import UpdateNetworkSwitchMtuRequest from '../model/UpdateNetworkSwitchMtuRequest';
import UpdateNetworkSwitchPortScheduleRequest from '../model/UpdateNetworkSwitchPortScheduleRequest';
import UpdateNetworkSwitchQosRuleRequest from '../model/UpdateNetworkSwitchQosRuleRequest';
import UpdateNetworkSwitchQosRulesOrderRequest from '../model/UpdateNetworkSwitchQosRulesOrderRequest';
import UpdateNetworkSwitchRoutingMulticastRendezvousPointRequest from '../model/UpdateNetworkSwitchRoutingMulticastRendezvousPointRequest';
import UpdateNetworkSwitchRoutingMulticastRequest from '../model/UpdateNetworkSwitchRoutingMulticastRequest';
import UpdateNetworkSwitchRoutingOspfRequest from '../model/UpdateNetworkSwitchRoutingOspfRequest';
import UpdateNetworkSwitchSettingsRequest from '../model/UpdateNetworkSwitchSettingsRequest';
import UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest from '../model/UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest';
import UpdateNetworkSwitchStackRoutingInterfaceRequest from '../model/UpdateNetworkSwitchStackRoutingInterfaceRequest';
import UpdateNetworkSwitchStormControlRequest from '../model/UpdateNetworkSwitchStormControlRequest';
import UpdateNetworkSwitchStpRequest from '../model/UpdateNetworkSwitchStpRequest';
import UpdateOrganizationConfigTemplateSwitchProfilePortRequest from '../model/UpdateOrganizationConfigTemplateSwitchProfilePortRequest';

/**
* Switch service.
* @module api/SwitchApi
* @version 1.32.0
*/
export default class SwitchApi {

    /**
    * Constructs a new SwitchApi. 
    * @alias module:api/SwitchApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addNetworkSwitchStack operation.
     * @callback module:api/SwitchApi~addNetworkSwitchStackCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a switch to a stack
     * Add a switch to a stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {module:model/AddNetworkSwitchStackRequest} addNetworkSwitchStackRequest 
     * @param {module:api/SwitchApi~addNetworkSwitchStackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    addNetworkSwitchStack(networkId, switchStackId, addNetworkSwitchStackRequest, callback) {
      let postBody = addNetworkSwitchStackRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling addNetworkSwitchStack");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling addNetworkSwitchStack");
      }
      // verify the required parameter 'addNetworkSwitchStackRequest' is set
      if (addNetworkSwitchStackRequest === undefined || addNetworkSwitchStackRequest === null) {
        throw new Error("Missing the required parameter 'addNetworkSwitchStackRequest' when calling addNetworkSwitchStack");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloneOrganizationSwitchDevices operation.
     * @callback module:api/SwitchApi~cloneOrganizationSwitchDevicesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clone port-level and some switch-level configuration settings from a source switch to one or more target switches
     * Clone port-level and some switch-level configuration settings from a source switch to one or more target switches. Cloned settings include: Aggregation Groups, Power Settings, Multicast Settings, MTU Configuration, STP Bridge priority, Port Mirroring
     * @param {String} organizationId 
     * @param {module:model/CloneOrganizationSwitchDevicesRequest} cloneOrganizationSwitchDevicesRequest 
     * @param {module:api/SwitchApi~cloneOrganizationSwitchDevicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    cloneOrganizationSwitchDevices(organizationId, cloneOrganizationSwitchDevicesRequest, callback) {
      let postBody = cloneOrganizationSwitchDevicesRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling cloneOrganizationSwitchDevices");
      }
      // verify the required parameter 'cloneOrganizationSwitchDevicesRequest' is set
      if (cloneOrganizationSwitchDevicesRequest === undefined || cloneOrganizationSwitchDevicesRequest === null) {
        throw new Error("Missing the required parameter 'cloneOrganizationSwitchDevicesRequest' when calling cloneOrganizationSwitchDevices");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/switch/devices/clone', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDeviceSwitchRoutingInterface operation.
     * @callback module:api/SwitchApi~createDeviceSwitchRoutingInterfaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDeviceSwitchRoutingInterfaces200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a layer 3 interface for a switch
     * Create a layer 3 interface for a switch
     * @param {String} serial 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateDeviceSwitchRoutingInterfaceRequest} [createDeviceSwitchRoutingInterfaceRequest] 
     * @param {module:api/SwitchApi~createDeviceSwitchRoutingInterfaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDeviceSwitchRoutingInterfaces200ResponseInner}
     */
    createDeviceSwitchRoutingInterface(serial, opts, callback) {
      opts = opts || {};
      let postBody = opts['createDeviceSwitchRoutingInterfaceRequest'];
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling createDeviceSwitchRoutingInterface");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetDeviceSwitchRoutingInterfaces200ResponseInner;
      return this.apiClient.callApi(
        '/devices/{serial}/switch/routing/interfaces', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDeviceSwitchRoutingStaticRoute operation.
     * @callback module:api/SwitchApi~createDeviceSwitchRoutingStaticRouteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a layer 3 static route for a switch
     * Create a layer 3 static route for a switch
     * @param {String} serial 
     * @param {module:model/CreateDeviceSwitchRoutingStaticRouteRequest} createDeviceSwitchRoutingStaticRouteRequest 
     * @param {module:api/SwitchApi~createDeviceSwitchRoutingStaticRouteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createDeviceSwitchRoutingStaticRoute(serial, createDeviceSwitchRoutingStaticRouteRequest, callback) {
      let postBody = createDeviceSwitchRoutingStaticRouteRequest;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling createDeviceSwitchRoutingStaticRoute");
      }
      // verify the required parameter 'createDeviceSwitchRoutingStaticRouteRequest' is set
      if (createDeviceSwitchRoutingStaticRouteRequest === undefined || createDeviceSwitchRoutingStaticRouteRequest === null) {
        throw new Error("Missing the required parameter 'createDeviceSwitchRoutingStaticRouteRequest' when calling createDeviceSwitchRoutingStaticRoute");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/switch/routing/staticRoutes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkSwitchAccessPolicy operation.
     * @callback module:api/SwitchApi~createNetworkSwitchAccessPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkSwitchAccessPolicies200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an access policy for a switch network
     * Create an access policy for a switch network. If you would like to enable Meraki Authentication, set radiusServers to empty array.
     * @param {String} networkId 
     * @param {module:model/CreateNetworkSwitchAccessPolicyRequest} createNetworkSwitchAccessPolicyRequest 
     * @param {module:api/SwitchApi~createNetworkSwitchAccessPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkSwitchAccessPolicies200ResponseInner}
     */
    createNetworkSwitchAccessPolicy(networkId, createNetworkSwitchAccessPolicyRequest, callback) {
      let postBody = createNetworkSwitchAccessPolicyRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkSwitchAccessPolicy");
      }
      // verify the required parameter 'createNetworkSwitchAccessPolicyRequest' is set
      if (createNetworkSwitchAccessPolicyRequest === undefined || createNetworkSwitchAccessPolicyRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkSwitchAccessPolicyRequest' when calling createNetworkSwitchAccessPolicy");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkSwitchAccessPolicies200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/accessPolicies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer operation.
     * @callback module:api/SwitchApi~createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a server to be trusted by Dynamic ARP Inspection on this network
     * Add a server to be trusted by Dynamic ARP Inspection on this network
     * @param {String} networkId 
     * @param {module:model/CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest} createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest 
     * @param {module:api/SwitchApi~createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner}
     */
    createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer(networkId, createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest, callback) {
      let postBody = createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer");
      }
      // verify the required parameter 'createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest' is set
      if (createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest === undefined || createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest' when calling createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/dhcpServerPolicy/arpInspection/trustedServers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkSwitchLinkAggregation operation.
     * @callback module:api/SwitchApi~createNetworkSwitchLinkAggregationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a link aggregation group
     * Create a link aggregation group
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateNetworkSwitchLinkAggregationRequest} [createNetworkSwitchLinkAggregationRequest] 
     * @param {module:api/SwitchApi~createNetworkSwitchLinkAggregationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNetworkSwitchLinkAggregation(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['createNetworkSwitchLinkAggregationRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkSwitchLinkAggregation");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/linkAggregations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkSwitchPortSchedule operation.
     * @callback module:api/SwitchApi~createNetworkSwitchPortScheduleCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a switch port schedule
     * Add a switch port schedule
     * @param {String} networkId 
     * @param {module:model/CreateNetworkSwitchPortScheduleRequest} createNetworkSwitchPortScheduleRequest 
     * @param {module:api/SwitchApi~createNetworkSwitchPortScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNetworkSwitchPortSchedule(networkId, createNetworkSwitchPortScheduleRequest, callback) {
      let postBody = createNetworkSwitchPortScheduleRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkSwitchPortSchedule");
      }
      // verify the required parameter 'createNetworkSwitchPortScheduleRequest' is set
      if (createNetworkSwitchPortScheduleRequest === undefined || createNetworkSwitchPortScheduleRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkSwitchPortScheduleRequest' when calling createNetworkSwitchPortSchedule");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/portSchedules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkSwitchQosRule operation.
     * @callback module:api/SwitchApi~createNetworkSwitchQosRuleCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a quality of service rule
     * Add a quality of service rule
     * @param {String} networkId 
     * @param {module:model/CreateNetworkSwitchQosRuleRequest} createNetworkSwitchQosRuleRequest 
     * @param {module:api/SwitchApi~createNetworkSwitchQosRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNetworkSwitchQosRule(networkId, createNetworkSwitchQosRuleRequest, callback) {
      let postBody = createNetworkSwitchQosRuleRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkSwitchQosRule");
      }
      // verify the required parameter 'createNetworkSwitchQosRuleRequest' is set
      if (createNetworkSwitchQosRuleRequest === undefined || createNetworkSwitchQosRuleRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkSwitchQosRuleRequest' when calling createNetworkSwitchQosRule");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/qosRules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkSwitchRoutingMulticastRendezvousPoint operation.
     * @callback module:api/SwitchApi~createNetworkSwitchRoutingMulticastRendezvousPointCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a multicast rendezvous point
     * Create a multicast rendezvous point
     * @param {String} networkId 
     * @param {module:model/CreateNetworkSwitchRoutingMulticastRendezvousPointRequest} createNetworkSwitchRoutingMulticastRendezvousPointRequest 
     * @param {module:api/SwitchApi~createNetworkSwitchRoutingMulticastRendezvousPointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNetworkSwitchRoutingMulticastRendezvousPoint(networkId, createNetworkSwitchRoutingMulticastRendezvousPointRequest, callback) {
      let postBody = createNetworkSwitchRoutingMulticastRendezvousPointRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkSwitchRoutingMulticastRendezvousPoint");
      }
      // verify the required parameter 'createNetworkSwitchRoutingMulticastRendezvousPointRequest' is set
      if (createNetworkSwitchRoutingMulticastRendezvousPointRequest === undefined || createNetworkSwitchRoutingMulticastRendezvousPointRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkSwitchRoutingMulticastRendezvousPointRequest' when calling createNetworkSwitchRoutingMulticastRendezvousPoint");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/routing/multicast/rendezvousPoints', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkSwitchStack operation.
     * @callback module:api/SwitchApi~createNetworkSwitchStackCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a stack
     * Create a stack
     * @param {String} networkId 
     * @param {module:model/CreateNetworkSwitchStackRequest} createNetworkSwitchStackRequest 
     * @param {module:api/SwitchApi~createNetworkSwitchStackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNetworkSwitchStack(networkId, createNetworkSwitchStackRequest, callback) {
      let postBody = createNetworkSwitchStackRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkSwitchStack");
      }
      // verify the required parameter 'createNetworkSwitchStackRequest' is set
      if (createNetworkSwitchStackRequest === undefined || createNetworkSwitchStackRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkSwitchStackRequest' when calling createNetworkSwitchStack");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkSwitchStackRoutingInterface operation.
     * @callback module:api/SwitchApi~createNetworkSwitchStackRoutingInterfaceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a layer 3 interface for a switch stack
     * Create a layer 3 interface for a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {module:model/CreateNetworkSwitchStackRoutingInterfaceRequest} createNetworkSwitchStackRoutingInterfaceRequest 
     * @param {module:api/SwitchApi~createNetworkSwitchStackRoutingInterfaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNetworkSwitchStackRoutingInterface(networkId, switchStackId, createNetworkSwitchStackRoutingInterfaceRequest, callback) {
      let postBody = createNetworkSwitchStackRoutingInterfaceRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkSwitchStackRoutingInterface");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling createNetworkSwitchStackRoutingInterface");
      }
      // verify the required parameter 'createNetworkSwitchStackRoutingInterfaceRequest' is set
      if (createNetworkSwitchStackRoutingInterfaceRequest === undefined || createNetworkSwitchStackRoutingInterfaceRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkSwitchStackRoutingInterfaceRequest' when calling createNetworkSwitchStackRoutingInterface");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkSwitchStackRoutingStaticRoute operation.
     * @callback module:api/SwitchApi~createNetworkSwitchStackRoutingStaticRouteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a layer 3 static route for a switch stack
     * Create a layer 3 static route for a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {module:model/CreateDeviceSwitchRoutingStaticRouteRequest} createDeviceSwitchRoutingStaticRouteRequest 
     * @param {module:api/SwitchApi~createNetworkSwitchStackRoutingStaticRouteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNetworkSwitchStackRoutingStaticRoute(networkId, switchStackId, createDeviceSwitchRoutingStaticRouteRequest, callback) {
      let postBody = createDeviceSwitchRoutingStaticRouteRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkSwitchStackRoutingStaticRoute");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling createNetworkSwitchStackRoutingStaticRoute");
      }
      // verify the required parameter 'createDeviceSwitchRoutingStaticRouteRequest' is set
      if (createDeviceSwitchRoutingStaticRouteRequest === undefined || createDeviceSwitchRoutingStaticRouteRequest === null) {
        throw new Error("Missing the required parameter 'createDeviceSwitchRoutingStaticRouteRequest' when calling createNetworkSwitchStackRoutingStaticRoute");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cycleDeviceSwitchPorts operation.
     * @callback module:api/SwitchApi~cycleDeviceSwitchPortsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cycle a set of switch ports
     * Cycle a set of switch ports
     * @param {String} serial 
     * @param {module:model/CycleDeviceSwitchPortsRequest} cycleDeviceSwitchPortsRequest 
     * @param {module:api/SwitchApi~cycleDeviceSwitchPortsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    cycleDeviceSwitchPorts(serial, cycleDeviceSwitchPortsRequest, callback) {
      let postBody = cycleDeviceSwitchPortsRequest;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling cycleDeviceSwitchPorts");
      }
      // verify the required parameter 'cycleDeviceSwitchPortsRequest' is set
      if (cycleDeviceSwitchPortsRequest === undefined || cycleDeviceSwitchPortsRequest === null) {
        throw new Error("Missing the required parameter 'cycleDeviceSwitchPortsRequest' when calling cycleDeviceSwitchPorts");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/switch/ports/cycle', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDeviceSwitchRoutingInterface operation.
     * @callback module:api/SwitchApi~deleteDeviceSwitchRoutingInterfaceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a layer 3 interface from the switch
     * Delete a layer 3 interface from the switch
     * @param {String} serial 
     * @param {String} interfaceId 
     * @param {module:api/SwitchApi~deleteDeviceSwitchRoutingInterfaceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDeviceSwitchRoutingInterface(serial, interfaceId, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling deleteDeviceSwitchRoutingInterface");
      }
      // verify the required parameter 'interfaceId' is set
      if (interfaceId === undefined || interfaceId === null) {
        throw new Error("Missing the required parameter 'interfaceId' when calling deleteDeviceSwitchRoutingInterface");
      }

      let pathParams = {
        'serial': serial,
        'interfaceId': interfaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/devices/{serial}/switch/routing/interfaces/{interfaceId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDeviceSwitchRoutingStaticRoute operation.
     * @callback module:api/SwitchApi~deleteDeviceSwitchRoutingStaticRouteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a layer 3 static route for a switch
     * Delete a layer 3 static route for a switch
     * @param {String} serial 
     * @param {String} staticRouteId 
     * @param {module:api/SwitchApi~deleteDeviceSwitchRoutingStaticRouteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDeviceSwitchRoutingStaticRoute(serial, staticRouteId, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling deleteDeviceSwitchRoutingStaticRoute");
      }
      // verify the required parameter 'staticRouteId' is set
      if (staticRouteId === undefined || staticRouteId === null) {
        throw new Error("Missing the required parameter 'staticRouteId' when calling deleteDeviceSwitchRoutingStaticRoute");
      }

      let pathParams = {
        'serial': serial,
        'staticRouteId': staticRouteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/devices/{serial}/switch/routing/staticRoutes/{staticRouteId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkSwitchAccessPolicy operation.
     * @callback module:api/SwitchApi~deleteNetworkSwitchAccessPolicyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an access policy for a switch network
     * Delete an access policy for a switch network
     * @param {String} networkId 
     * @param {String} accessPolicyNumber 
     * @param {module:api/SwitchApi~deleteNetworkSwitchAccessPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkSwitchAccessPolicy(networkId, accessPolicyNumber, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkSwitchAccessPolicy");
      }
      // verify the required parameter 'accessPolicyNumber' is set
      if (accessPolicyNumber === undefined || accessPolicyNumber === null) {
        throw new Error("Missing the required parameter 'accessPolicyNumber' when calling deleteNetworkSwitchAccessPolicy");
      }

      let pathParams = {
        'networkId': networkId,
        'accessPolicyNumber': accessPolicyNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/accessPolicies/{accessPolicyNumber}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer operation.
     * @callback module:api/SwitchApi~deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a server from being trusted by Dynamic ARP Inspection on this network
     * Remove a server from being trusted by Dynamic ARP Inspection on this network
     * @param {String} networkId 
     * @param {String} trustedServerId 
     * @param {module:api/SwitchApi~deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer(networkId, trustedServerId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer");
      }
      // verify the required parameter 'trustedServerId' is set
      if (trustedServerId === undefined || trustedServerId === null) {
        throw new Error("Missing the required parameter 'trustedServerId' when calling deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer");
      }

      let pathParams = {
        'networkId': networkId,
        'trustedServerId': trustedServerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/dhcpServerPolicy/arpInspection/trustedServers/{trustedServerId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkSwitchLinkAggregation operation.
     * @callback module:api/SwitchApi~deleteNetworkSwitchLinkAggregationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Split a link aggregation group into separate ports
     * Split a link aggregation group into separate ports
     * @param {String} networkId 
     * @param {String} linkAggregationId 
     * @param {module:api/SwitchApi~deleteNetworkSwitchLinkAggregationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkSwitchLinkAggregation(networkId, linkAggregationId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkSwitchLinkAggregation");
      }
      // verify the required parameter 'linkAggregationId' is set
      if (linkAggregationId === undefined || linkAggregationId === null) {
        throw new Error("Missing the required parameter 'linkAggregationId' when calling deleteNetworkSwitchLinkAggregation");
      }

      let pathParams = {
        'networkId': networkId,
        'linkAggregationId': linkAggregationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/linkAggregations/{linkAggregationId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkSwitchPortSchedule operation.
     * @callback module:api/SwitchApi~deleteNetworkSwitchPortScheduleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a switch port schedule
     * Delete a switch port schedule
     * @param {String} networkId 
     * @param {String} portScheduleId 
     * @param {module:api/SwitchApi~deleteNetworkSwitchPortScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkSwitchPortSchedule(networkId, portScheduleId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkSwitchPortSchedule");
      }
      // verify the required parameter 'portScheduleId' is set
      if (portScheduleId === undefined || portScheduleId === null) {
        throw new Error("Missing the required parameter 'portScheduleId' when calling deleteNetworkSwitchPortSchedule");
      }

      let pathParams = {
        'networkId': networkId,
        'portScheduleId': portScheduleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/portSchedules/{portScheduleId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkSwitchQosRule operation.
     * @callback module:api/SwitchApi~deleteNetworkSwitchQosRuleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a quality of service rule
     * Delete a quality of service rule
     * @param {String} networkId 
     * @param {String} qosRuleId 
     * @param {module:api/SwitchApi~deleteNetworkSwitchQosRuleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkSwitchQosRule(networkId, qosRuleId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkSwitchQosRule");
      }
      // verify the required parameter 'qosRuleId' is set
      if (qosRuleId === undefined || qosRuleId === null) {
        throw new Error("Missing the required parameter 'qosRuleId' when calling deleteNetworkSwitchQosRule");
      }

      let pathParams = {
        'networkId': networkId,
        'qosRuleId': qosRuleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/qosRules/{qosRuleId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkSwitchRoutingMulticastRendezvousPoint operation.
     * @callback module:api/SwitchApi~deleteNetworkSwitchRoutingMulticastRendezvousPointCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a multicast rendezvous point
     * Delete a multicast rendezvous point
     * @param {String} networkId 
     * @param {String} rendezvousPointId 
     * @param {module:api/SwitchApi~deleteNetworkSwitchRoutingMulticastRendezvousPointCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkSwitchRoutingMulticastRendezvousPoint(networkId, rendezvousPointId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkSwitchRoutingMulticastRendezvousPoint");
      }
      // verify the required parameter 'rendezvousPointId' is set
      if (rendezvousPointId === undefined || rendezvousPointId === null) {
        throw new Error("Missing the required parameter 'rendezvousPointId' when calling deleteNetworkSwitchRoutingMulticastRendezvousPoint");
      }

      let pathParams = {
        'networkId': networkId,
        'rendezvousPointId': rendezvousPointId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/routing/multicast/rendezvousPoints/{rendezvousPointId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkSwitchStack operation.
     * @callback module:api/SwitchApi~deleteNetworkSwitchStackCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a stack
     * Delete a stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {module:api/SwitchApi~deleteNetworkSwitchStackCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkSwitchStack(networkId, switchStackId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkSwitchStack");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling deleteNetworkSwitchStack");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkSwitchStackRoutingInterface operation.
     * @callback module:api/SwitchApi~deleteNetworkSwitchStackRoutingInterfaceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a layer 3 interface from a switch stack
     * Delete a layer 3 interface from a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {String} interfaceId 
     * @param {module:api/SwitchApi~deleteNetworkSwitchStackRoutingInterfaceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkSwitchStackRoutingInterface(networkId, switchStackId, interfaceId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkSwitchStackRoutingInterface");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling deleteNetworkSwitchStackRoutingInterface");
      }
      // verify the required parameter 'interfaceId' is set
      if (interfaceId === undefined || interfaceId === null) {
        throw new Error("Missing the required parameter 'interfaceId' when calling deleteNetworkSwitchStackRoutingInterface");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId,
        'interfaceId': interfaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkSwitchStackRoutingStaticRoute operation.
     * @callback module:api/SwitchApi~deleteNetworkSwitchStackRoutingStaticRouteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a layer 3 static route for a switch stack
     * Delete a layer 3 static route for a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {String} staticRouteId 
     * @param {module:api/SwitchApi~deleteNetworkSwitchStackRoutingStaticRouteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkSwitchStackRoutingStaticRoute(networkId, switchStackId, staticRouteId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkSwitchStackRoutingStaticRoute");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling deleteNetworkSwitchStackRoutingStaticRoute");
      }
      // verify the required parameter 'staticRouteId' is set
      if (staticRouteId === undefined || staticRouteId === null) {
        throw new Error("Missing the required parameter 'staticRouteId' when calling deleteNetworkSwitchStackRoutingStaticRoute");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId,
        'staticRouteId': staticRouteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes/{staticRouteId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceSwitchPort operation.
     * @callback module:api/SwitchApi~getDeviceSwitchPortCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDeviceSwitchPorts200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a switch port
     * Return a switch port
     * @param {String} serial 
     * @param {String} portId 
     * @param {module:api/SwitchApi~getDeviceSwitchPortCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDeviceSwitchPorts200ResponseInner}
     */
    getDeviceSwitchPort(serial, portId, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceSwitchPort");
      }
      // verify the required parameter 'portId' is set
      if (portId === undefined || portId === null) {
        throw new Error("Missing the required parameter 'portId' when calling getDeviceSwitchPort");
      }

      let pathParams = {
        'serial': serial,
        'portId': portId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDeviceSwitchPorts200ResponseInner;
      return this.apiClient.callApi(
        '/devices/{serial}/switch/ports/{portId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceSwitchPorts operation.
     * @callback module:api/SwitchApi~getDeviceSwitchPortsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetDeviceSwitchPorts200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the switch ports for a switch
     * List the switch ports for a switch
     * @param {String} serial 
     * @param {module:api/SwitchApi~getDeviceSwitchPortsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetDeviceSwitchPorts200ResponseInner>}
     */
    getDeviceSwitchPorts(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceSwitchPorts");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetDeviceSwitchPorts200ResponseInner];
      return this.apiClient.callApi(
        '/devices/{serial}/switch/ports', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceSwitchPortsStatuses operation.
     * @callback module:api/SwitchApi~getDeviceSwitchPortsStatusesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetDeviceSwitchPortsStatuses200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the status for all the ports of a switch
     * Return the status for all the ports of a switch
     * @param {String} serial 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
     * @param {module:api/SwitchApi~getDeviceSwitchPortsStatusesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetDeviceSwitchPortsStatuses200ResponseInner>}
     */
    getDeviceSwitchPortsStatuses(serial, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceSwitchPortsStatuses");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
        't0': opts['t0'],
        'timespan': opts['timespan']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetDeviceSwitchPortsStatuses200ResponseInner];
      return this.apiClient.callApi(
        '/devices/{serial}/switch/ports/statuses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceSwitchPortsStatusesPackets operation.
     * @callback module:api/SwitchApi~getDeviceSwitchPortsStatusesPacketsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the packet counters for all the ports of a switch
     * Return the packet counters for all the ports of a switch
     * @param {String} serial 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 1 day from today.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 1 day. The default is 1 day.
     * @param {module:api/SwitchApi~getDeviceSwitchPortsStatusesPacketsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getDeviceSwitchPortsStatusesPackets(serial, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceSwitchPortsStatusesPackets");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
        't0': opts['t0'],
        'timespan': opts['timespan']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/devices/{serial}/switch/ports/statuses/packets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceSwitchRoutingInterface operation.
     * @callback module:api/SwitchApi~getDeviceSwitchRoutingInterfaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDeviceSwitchRoutingInterfaces200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a layer 3 interface for a switch
     * Return a layer 3 interface for a switch
     * @param {String} serial 
     * @param {String} interfaceId 
     * @param {module:api/SwitchApi~getDeviceSwitchRoutingInterfaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDeviceSwitchRoutingInterfaces200ResponseInner}
     */
    getDeviceSwitchRoutingInterface(serial, interfaceId, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceSwitchRoutingInterface");
      }
      // verify the required parameter 'interfaceId' is set
      if (interfaceId === undefined || interfaceId === null) {
        throw new Error("Missing the required parameter 'interfaceId' when calling getDeviceSwitchRoutingInterface");
      }

      let pathParams = {
        'serial': serial,
        'interfaceId': interfaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDeviceSwitchRoutingInterfaces200ResponseInner;
      return this.apiClient.callApi(
        '/devices/{serial}/switch/routing/interfaces/{interfaceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceSwitchRoutingInterfaceDhcp operation.
     * @callback module:api/SwitchApi~getDeviceSwitchRoutingInterfaceDhcpCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a layer 3 interface DHCP configuration for a switch
     * Return a layer 3 interface DHCP configuration for a switch
     * @param {String} serial 
     * @param {String} interfaceId 
     * @param {module:api/SwitchApi~getDeviceSwitchRoutingInterfaceDhcpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getDeviceSwitchRoutingInterfaceDhcp(serial, interfaceId, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceSwitchRoutingInterfaceDhcp");
      }
      // verify the required parameter 'interfaceId' is set
      if (interfaceId === undefined || interfaceId === null) {
        throw new Error("Missing the required parameter 'interfaceId' when calling getDeviceSwitchRoutingInterfaceDhcp");
      }

      let pathParams = {
        'serial': serial,
        'interfaceId': interfaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/switch/routing/interfaces/{interfaceId}/dhcp', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceSwitchRoutingInterfaces operation.
     * @callback module:api/SwitchApi~getDeviceSwitchRoutingInterfacesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetDeviceSwitchRoutingInterfaces200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List layer 3 interfaces for a switch
     * List layer 3 interfaces for a switch. Those for a stack may be found under switch stack routing.
     * @param {String} serial 
     * @param {module:api/SwitchApi~getDeviceSwitchRoutingInterfacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetDeviceSwitchRoutingInterfaces200ResponseInner>}
     */
    getDeviceSwitchRoutingInterfaces(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceSwitchRoutingInterfaces");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetDeviceSwitchRoutingInterfaces200ResponseInner];
      return this.apiClient.callApi(
        '/devices/{serial}/switch/routing/interfaces', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceSwitchRoutingStaticRoute operation.
     * @callback module:api/SwitchApi~getDeviceSwitchRoutingStaticRouteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDeviceSwitchRoutingStaticRoute200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a layer 3 static route for a switch
     * Return a layer 3 static route for a switch
     * @param {String} serial 
     * @param {String} staticRouteId 
     * @param {module:api/SwitchApi~getDeviceSwitchRoutingStaticRouteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDeviceSwitchRoutingStaticRoute200Response}
     */
    getDeviceSwitchRoutingStaticRoute(serial, staticRouteId, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceSwitchRoutingStaticRoute");
      }
      // verify the required parameter 'staticRouteId' is set
      if (staticRouteId === undefined || staticRouteId === null) {
        throw new Error("Missing the required parameter 'staticRouteId' when calling getDeviceSwitchRoutingStaticRoute");
      }

      let pathParams = {
        'serial': serial,
        'staticRouteId': staticRouteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDeviceSwitchRoutingStaticRoute200Response;
      return this.apiClient.callApi(
        '/devices/{serial}/switch/routing/staticRoutes/{staticRouteId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceSwitchRoutingStaticRoutes operation.
     * @callback module:api/SwitchApi~getDeviceSwitchRoutingStaticRoutesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List layer 3 static routes for a switch
     * List layer 3 static routes for a switch
     * @param {String} serial 
     * @param {module:api/SwitchApi~getDeviceSwitchRoutingStaticRoutesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getDeviceSwitchRoutingStaticRoutes(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceSwitchRoutingStaticRoutes");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/devices/{serial}/switch/routing/staticRoutes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceSwitchWarmSpare operation.
     * @callback module:api/SwitchApi~getDeviceSwitchWarmSpareCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return warm spare configuration for a switch
     * Return warm spare configuration for a switch
     * @param {String} serial 
     * @param {module:api/SwitchApi~getDeviceSwitchWarmSpareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getDeviceSwitchWarmSpare(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceSwitchWarmSpare");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/switch/warmSpare', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchAccessControlLists operation.
     * @callback module:api/SwitchApi~getNetworkSwitchAccessControlListsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkSwitchAccessControlLists200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the access control lists for a MS network
     * Return the access control lists for a MS network
     * @param {String} networkId 
     * @param {module:api/SwitchApi~getNetworkSwitchAccessControlListsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkSwitchAccessControlLists200Response}
     */
    getNetworkSwitchAccessControlLists(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchAccessControlLists");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkSwitchAccessControlLists200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/accessControlLists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchAccessPolicies operation.
     * @callback module:api/SwitchApi~getNetworkSwitchAccessPoliciesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSwitchAccessPolicies200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the access policies for a switch network
     * List the access policies for a switch network. Only returns access policies with 'my RADIUS server' as authentication method
     * @param {String} networkId 
     * @param {module:api/SwitchApi~getNetworkSwitchAccessPoliciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSwitchAccessPolicies200ResponseInner>}
     */
    getNetworkSwitchAccessPolicies(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchAccessPolicies");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSwitchAccessPolicies200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/accessPolicies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchAccessPolicy operation.
     * @callback module:api/SwitchApi~getNetworkSwitchAccessPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkSwitchAccessPolicies200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a specific access policy for a switch network
     * Return a specific access policy for a switch network
     * @param {String} networkId 
     * @param {String} accessPolicyNumber 
     * @param {module:api/SwitchApi~getNetworkSwitchAccessPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkSwitchAccessPolicies200ResponseInner}
     */
    getNetworkSwitchAccessPolicy(networkId, accessPolicyNumber, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchAccessPolicy");
      }
      // verify the required parameter 'accessPolicyNumber' is set
      if (accessPolicyNumber === undefined || accessPolicyNumber === null) {
        throw new Error("Missing the required parameter 'accessPolicyNumber' when calling getNetworkSwitchAccessPolicy");
      }

      let pathParams = {
        'networkId': networkId,
        'accessPolicyNumber': accessPolicyNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkSwitchAccessPolicies200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/accessPolicies/{accessPolicyNumber}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchAlternateManagementInterface operation.
     * @callback module:api/SwitchApi~getNetworkSwitchAlternateManagementInterfaceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the switch alternate management interface for the network
     * Return the switch alternate management interface for the network
     * @param {String} networkId 
     * @param {module:api/SwitchApi~getNetworkSwitchAlternateManagementInterfaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkSwitchAlternateManagementInterface(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchAlternateManagementInterface");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/alternateManagementInterface', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchDhcpServerPolicy operation.
     * @callback module:api/SwitchApi~getNetworkSwitchDhcpServerPolicyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the DHCP server settings
     * Return the DHCP server settings. Blocked/allowed servers are only applied when default policy is allow/block, respectively
     * @param {String} networkId 
     * @param {module:api/SwitchApi~getNetworkSwitchDhcpServerPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkSwitchDhcpServerPolicy(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchDhcpServerPolicy");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/dhcpServerPolicy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers operation.
     * @callback module:api/SwitchApi~getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the list of servers trusted by Dynamic ARP Inspection on this network
     * Return the list of servers trusted by Dynamic ARP Inspection on this network. These are also known as whitelisted snoop entries
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:api/SwitchApi~getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner>}
     */
    getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/dhcpServerPolicy/arpInspection/trustedServers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice operation.
     * @callback module:api/SwitchApi~getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the devices that have a Dynamic ARP Inspection warning and their warnings
     * Return the devices that have a Dynamic ARP Inspection warning and their warnings
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:api/SwitchApi~getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner>}
     */
    getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/dhcpServerPolicy/arpInspection/warnings/byDevice', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchDhcpV4ServersSeen operation.
     * @callback module:api/SwitchApi~getNetworkSwitchDhcpV4ServersSeenCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSwitchDhcpV4ServersSeen200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the network's DHCPv4 servers seen within the selected timeframe (default 1 day)
     * Return the network's DHCPv4 servers seen within the selected timeframe (default 1 day)
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:api/SwitchApi~getNetworkSwitchDhcpV4ServersSeenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSwitchDhcpV4ServersSeen200ResponseInner>}
     */
    getNetworkSwitchDhcpV4ServersSeen(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchDhcpV4ServersSeen");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        't0': opts['t0'],
        'timespan': opts['timespan'],
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSwitchDhcpV4ServersSeen200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/dhcp/v4/servers/seen', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchDscpToCosMappings operation.
     * @callback module:api/SwitchApi~getNetworkSwitchDscpToCosMappingsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the DSCP to CoS mappings
     * Return the DSCP to CoS mappings
     * @param {String} networkId 
     * @param {module:api/SwitchApi~getNetworkSwitchDscpToCosMappingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkSwitchDscpToCosMappings(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchDscpToCosMappings");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/dscpToCosMappings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchLinkAggregations operation.
     * @callback module:api/SwitchApi~getNetworkSwitchLinkAggregationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List link aggregation groups
     * List link aggregation groups
     * @param {String} networkId 
     * @param {module:api/SwitchApi~getNetworkSwitchLinkAggregationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkSwitchLinkAggregations(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchLinkAggregations");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/linkAggregations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchMtu operation.
     * @callback module:api/SwitchApi~getNetworkSwitchMtuCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkSwitchMtu200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the MTU configuration
     * Return the MTU configuration
     * @param {String} networkId 
     * @param {module:api/SwitchApi~getNetworkSwitchMtuCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkSwitchMtu200Response}
     */
    getNetworkSwitchMtu(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchMtu");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkSwitchMtu200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/mtu', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchPortSchedules operation.
     * @callback module:api/SwitchApi~getNetworkSwitchPortSchedulesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List switch port schedules
     * List switch port schedules
     * @param {String} networkId 
     * @param {module:api/SwitchApi~getNetworkSwitchPortSchedulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkSwitchPortSchedules(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchPortSchedules");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/portSchedules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchQosRule operation.
     * @callback module:api/SwitchApi~getNetworkSwitchQosRuleCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a quality of service rule
     * Return a quality of service rule
     * @param {String} networkId 
     * @param {String} qosRuleId 
     * @param {module:api/SwitchApi~getNetworkSwitchQosRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkSwitchQosRule(networkId, qosRuleId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchQosRule");
      }
      // verify the required parameter 'qosRuleId' is set
      if (qosRuleId === undefined || qosRuleId === null) {
        throw new Error("Missing the required parameter 'qosRuleId' when calling getNetworkSwitchQosRule");
      }

      let pathParams = {
        'networkId': networkId,
        'qosRuleId': qosRuleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/qosRules/{qosRuleId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchQosRules operation.
     * @callback module:api/SwitchApi~getNetworkSwitchQosRulesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List quality of service rules
     * List quality of service rules
     * @param {String} networkId 
     * @param {module:api/SwitchApi~getNetworkSwitchQosRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkSwitchQosRules(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchQosRules");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/qosRules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchQosRulesOrder operation.
     * @callback module:api/SwitchApi~getNetworkSwitchQosRulesOrderCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the quality of service rule IDs by order in which they will be processed by the switch
     * Return the quality of service rule IDs by order in which they will be processed by the switch
     * @param {String} networkId 
     * @param {module:api/SwitchApi~getNetworkSwitchQosRulesOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkSwitchQosRulesOrder(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchQosRulesOrder");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/qosRules/order', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchRoutingMulticast operation.
     * @callback module:api/SwitchApi~getNetworkSwitchRoutingMulticastCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return multicast settings for a network
     * Return multicast settings for a network
     * @param {String} networkId 
     * @param {module:api/SwitchApi~getNetworkSwitchRoutingMulticastCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkSwitchRoutingMulticast(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchRoutingMulticast");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/routing/multicast', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchRoutingMulticastRendezvousPoint operation.
     * @callback module:api/SwitchApi~getNetworkSwitchRoutingMulticastRendezvousPointCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a multicast rendezvous point
     * Return a multicast rendezvous point
     * @param {String} networkId 
     * @param {String} rendezvousPointId 
     * @param {module:api/SwitchApi~getNetworkSwitchRoutingMulticastRendezvousPointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkSwitchRoutingMulticastRendezvousPoint(networkId, rendezvousPointId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchRoutingMulticastRendezvousPoint");
      }
      // verify the required parameter 'rendezvousPointId' is set
      if (rendezvousPointId === undefined || rendezvousPointId === null) {
        throw new Error("Missing the required parameter 'rendezvousPointId' when calling getNetworkSwitchRoutingMulticastRendezvousPoint");
      }

      let pathParams = {
        'networkId': networkId,
        'rendezvousPointId': rendezvousPointId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/routing/multicast/rendezvousPoints/{rendezvousPointId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchRoutingMulticastRendezvousPoints operation.
     * @callback module:api/SwitchApi~getNetworkSwitchRoutingMulticastRendezvousPointsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<[Object]>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List multicast rendezvous points
     * List multicast rendezvous points
     * @param {String} networkId 
     * @param {module:api/SwitchApi~getNetworkSwitchRoutingMulticastRendezvousPointsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<[Object]>}
     */
    getNetworkSwitchRoutingMulticastRendezvousPoints(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchRoutingMulticastRendezvousPoints");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [[Object]];
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/routing/multicast/rendezvousPoints', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchRoutingOspf operation.
     * @callback module:api/SwitchApi~getNetworkSwitchRoutingOspfCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return layer 3 OSPF routing configuration
     * Return layer 3 OSPF routing configuration
     * @param {String} networkId 
     * @param {module:api/SwitchApi~getNetworkSwitchRoutingOspfCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkSwitchRoutingOspf(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchRoutingOspf");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/routing/ospf', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchSettings operation.
     * @callback module:api/SwitchApi~getNetworkSwitchSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkSwitchSettings200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the switch network settings
     * Returns the switch network settings
     * @param {String} networkId 
     * @param {module:api/SwitchApi~getNetworkSwitchSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkSwitchSettings200Response}
     */
    getNetworkSwitchSettings(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchSettings");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkSwitchSettings200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchStack operation.
     * @callback module:api/SwitchApi~getNetworkSwitchStackCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkSwitchStack200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show a switch stack
     * Show a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {module:api/SwitchApi~getNetworkSwitchStackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkSwitchStack200Response}
     */
    getNetworkSwitchStack(networkId, switchStackId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchStack");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling getNetworkSwitchStack");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkSwitchStack200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchStackRoutingInterface operation.
     * @callback module:api/SwitchApi~getNetworkSwitchStackRoutingInterfaceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a layer 3 interface from a switch stack
     * Return a layer 3 interface from a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {String} interfaceId 
     * @param {module:api/SwitchApi~getNetworkSwitchStackRoutingInterfaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkSwitchStackRoutingInterface(networkId, switchStackId, interfaceId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchStackRoutingInterface");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling getNetworkSwitchStackRoutingInterface");
      }
      // verify the required parameter 'interfaceId' is set
      if (interfaceId === undefined || interfaceId === null) {
        throw new Error("Missing the required parameter 'interfaceId' when calling getNetworkSwitchStackRoutingInterface");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId,
        'interfaceId': interfaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchStackRoutingInterfaceDhcp operation.
     * @callback module:api/SwitchApi~getNetworkSwitchStackRoutingInterfaceDhcpCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a layer 3 interface DHCP configuration for a switch stack
     * Return a layer 3 interface DHCP configuration for a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {String} interfaceId 
     * @param {module:api/SwitchApi~getNetworkSwitchStackRoutingInterfaceDhcpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkSwitchStackRoutingInterfaceDhcp(networkId, switchStackId, interfaceId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchStackRoutingInterfaceDhcp");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling getNetworkSwitchStackRoutingInterfaceDhcp");
      }
      // verify the required parameter 'interfaceId' is set
      if (interfaceId === undefined || interfaceId === null) {
        throw new Error("Missing the required parameter 'interfaceId' when calling getNetworkSwitchStackRoutingInterfaceDhcp");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId,
        'interfaceId': interfaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}/dhcp', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchStackRoutingInterfaces operation.
     * @callback module:api/SwitchApi~getNetworkSwitchStackRoutingInterfacesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List layer 3 interfaces for a switch stack
     * List layer 3 interfaces for a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {module:api/SwitchApi~getNetworkSwitchStackRoutingInterfacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkSwitchStackRoutingInterfaces(networkId, switchStackId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchStackRoutingInterfaces");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling getNetworkSwitchStackRoutingInterfaces");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchStackRoutingStaticRoute operation.
     * @callback module:api/SwitchApi~getNetworkSwitchStackRoutingStaticRouteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a layer 3 static route for a switch stack
     * Return a layer 3 static route for a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {String} staticRouteId 
     * @param {module:api/SwitchApi~getNetworkSwitchStackRoutingStaticRouteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkSwitchStackRoutingStaticRoute(networkId, switchStackId, staticRouteId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchStackRoutingStaticRoute");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling getNetworkSwitchStackRoutingStaticRoute");
      }
      // verify the required parameter 'staticRouteId' is set
      if (staticRouteId === undefined || staticRouteId === null) {
        throw new Error("Missing the required parameter 'staticRouteId' when calling getNetworkSwitchStackRoutingStaticRoute");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId,
        'staticRouteId': staticRouteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes/{staticRouteId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchStackRoutingStaticRoutes operation.
     * @callback module:api/SwitchApi~getNetworkSwitchStackRoutingStaticRoutesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List layer 3 static routes for a switch stack
     * List layer 3 static routes for a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {module:api/SwitchApi~getNetworkSwitchStackRoutingStaticRoutesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkSwitchStackRoutingStaticRoutes(networkId, switchStackId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchStackRoutingStaticRoutes");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling getNetworkSwitchStackRoutingStaticRoutes");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchStacks operation.
     * @callback module:api/SwitchApi~getNetworkSwitchStacksCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the switch stacks in a network
     * List the switch stacks in a network
     * @param {String} networkId 
     * @param {module:api/SwitchApi~getNetworkSwitchStacksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkSwitchStacks(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchStacks");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchStormControl operation.
     * @callback module:api/SwitchApi~getNetworkSwitchStormControlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkSwitchStormControl200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the storm control configuration for a switch network
     * Return the storm control configuration for a switch network
     * @param {String} networkId 
     * @param {module:api/SwitchApi~getNetworkSwitchStormControlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkSwitchStormControl200Response}
     */
    getNetworkSwitchStormControl(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchStormControl");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkSwitchStormControl200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stormControl', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchStp operation.
     * @callback module:api/SwitchApi~getNetworkSwitchStpCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns STP settings
     * Returns STP settings
     * @param {String} networkId 
     * @param {module:api/SwitchApi~getNetworkSwitchStpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkSwitchStp(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchStp");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stp', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationConfigTemplateSwitchProfilePort operation.
     * @callback module:api/SwitchApi~getOrganizationConfigTemplateSwitchProfilePortCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a switch profile port
     * Return a switch profile port
     * @param {String} organizationId 
     * @param {String} configTemplateId 
     * @param {String} profileId 
     * @param {String} portId 
     * @param {module:api/SwitchApi~getOrganizationConfigTemplateSwitchProfilePortCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner}
     */
    getOrganizationConfigTemplateSwitchProfilePort(organizationId, configTemplateId, profileId, portId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationConfigTemplateSwitchProfilePort");
      }
      // verify the required parameter 'configTemplateId' is set
      if (configTemplateId === undefined || configTemplateId === null) {
        throw new Error("Missing the required parameter 'configTemplateId' when calling getOrganizationConfigTemplateSwitchProfilePort");
      }
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling getOrganizationConfigTemplateSwitchProfilePort");
      }
      // verify the required parameter 'portId' is set
      if (portId === undefined || portId === null) {
        throw new Error("Missing the required parameter 'portId' when calling getOrganizationConfigTemplateSwitchProfilePort");
      }

      let pathParams = {
        'organizationId': organizationId,
        'configTemplateId': configTemplateId,
        'profileId': profileId,
        'portId': portId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/configTemplates/{configTemplateId}/switch/profiles/{profileId}/ports/{portId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationConfigTemplateSwitchProfilePorts operation.
     * @callback module:api/SwitchApi~getOrganizationConfigTemplateSwitchProfilePortsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return all the ports of a switch profile
     * Return all the ports of a switch profile
     * @param {String} organizationId 
     * @param {String} configTemplateId 
     * @param {String} profileId 
     * @param {module:api/SwitchApi~getOrganizationConfigTemplateSwitchProfilePortsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner>}
     */
    getOrganizationConfigTemplateSwitchProfilePorts(organizationId, configTemplateId, profileId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationConfigTemplateSwitchProfilePorts");
      }
      // verify the required parameter 'configTemplateId' is set
      if (configTemplateId === undefined || configTemplateId === null) {
        throw new Error("Missing the required parameter 'configTemplateId' when calling getOrganizationConfigTemplateSwitchProfilePorts");
      }
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling getOrganizationConfigTemplateSwitchProfilePorts");
      }

      let pathParams = {
        'organizationId': organizationId,
        'configTemplateId': configTemplateId,
        'profileId': profileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/configTemplates/{configTemplateId}/switch/profiles/{profileId}/ports', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationConfigTemplateSwitchProfiles operation.
     * @callback module:api/SwitchApi~getOrganizationConfigTemplateSwitchProfilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizationConfigTemplateSwitchProfiles200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the switch profiles for your switch template configuration
     * List the switch profiles for your switch template configuration
     * @param {String} organizationId 
     * @param {String} configTemplateId 
     * @param {module:api/SwitchApi~getOrganizationConfigTemplateSwitchProfilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizationConfigTemplateSwitchProfiles200Response}
     */
    getOrganizationConfigTemplateSwitchProfiles(organizationId, configTemplateId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationConfigTemplateSwitchProfiles");
      }
      // verify the required parameter 'configTemplateId' is set
      if (configTemplateId === undefined || configTemplateId === null) {
        throw new Error("Missing the required parameter 'configTemplateId' when calling getOrganizationConfigTemplateSwitchProfiles");
      }

      let pathParams = {
        'organizationId': organizationId,
        'configTemplateId': configTemplateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOrganizationConfigTemplateSwitchProfiles200Response;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/configTemplates/{configTemplateId}/switch/profiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationSwitchPortsBySwitch operation.
     * @callback module:api/SwitchApi~getOrganizationSwitchPortsBySwitchCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationSwitchPortsBySwitch200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the switchports in an organization by switch
     * List the switchports in an organization by switch
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 50. Default is 50.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {Array.<String>} [networkIds] Optional parameter to filter switchports by network.
     * @param {Array.<String>} [portProfileIds] Optional parameter to filter switchports belonging to the specified switchport profiles.
     * @param {String} [name] Optional parameter to filter switchports belonging to switches by name. All returned switches will have a name that contains the search term or is an exact match.
     * @param {String} [mac] Optional parameter to filter switchports belonging to switches by MAC address. All returned switches will have a MAC address that contains the search term or is an exact match.
     * @param {Array.<String>} [macs] Optional parameter to filter switchports by one or more MAC addresses belonging to devices. All switchports returned belong to MAC addresses of switches that are an exact match.
     * @param {String} [serial] Optional parameter to filter switchports belonging to switches by serial number. All returned switches will have a serial number that contains the search term or is an exact match.
     * @param {Array.<String>} [serials] Optional parameter to filter switchports belonging to switches with one or more serial numbers. All switchports returned belong to serial numbers of switches that are an exact match.
     * @param {String} [configurationUpdatedAfter] Optional parameter to filter results by switches where the configuration has been updated after the given timestamp.
     * @param {module:api/SwitchApi~getOrganizationSwitchPortsBySwitchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationSwitchPortsBySwitch200ResponseInner>}
     */
    getOrganizationSwitchPortsBySwitch(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationSwitchPortsBySwitch");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        'networkIds': this.apiClient.buildCollectionParam(opts['networkIds'], 'csv'),
        'portProfileIds': this.apiClient.buildCollectionParam(opts['portProfileIds'], 'csv'),
        'name': opts['name'],
        'mac': opts['mac'],
        'macs': this.apiClient.buildCollectionParam(opts['macs'], 'csv'),
        'serial': opts['serial'],
        'serials': this.apiClient.buildCollectionParam(opts['serials'], 'csv'),
        'configurationUpdatedAfter': opts['configurationUpdatedAfter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationSwitchPortsBySwitch200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/switch/ports/bySwitch', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeNetworkSwitchStack operation.
     * @callback module:api/SwitchApi~removeNetworkSwitchStackCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a switch from a stack
     * Remove a switch from a stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {module:model/RemoveNetworkSwitchStackRequest} removeNetworkSwitchStackRequest 
     * @param {module:api/SwitchApi~removeNetworkSwitchStackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    removeNetworkSwitchStack(networkId, switchStackId, removeNetworkSwitchStackRequest, callback) {
      let postBody = removeNetworkSwitchStackRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling removeNetworkSwitchStack");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling removeNetworkSwitchStack");
      }
      // verify the required parameter 'removeNetworkSwitchStackRequest' is set
      if (removeNetworkSwitchStackRequest === undefined || removeNetworkSwitchStackRequest === null) {
        throw new Error("Missing the required parameter 'removeNetworkSwitchStackRequest' when calling removeNetworkSwitchStack");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeviceSwitchPort operation.
     * @callback module:api/SwitchApi~updateDeviceSwitchPortCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDeviceSwitchPorts200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a switch port
     * Update a switch port
     * @param {String} serial 
     * @param {String} portId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateDeviceSwitchPortRequest} [updateDeviceSwitchPortRequest] 
     * @param {module:api/SwitchApi~updateDeviceSwitchPortCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDeviceSwitchPorts200ResponseInner}
     */
    updateDeviceSwitchPort(serial, portId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateDeviceSwitchPortRequest'];
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling updateDeviceSwitchPort");
      }
      // verify the required parameter 'portId' is set
      if (portId === undefined || portId === null) {
        throw new Error("Missing the required parameter 'portId' when calling updateDeviceSwitchPort");
      }

      let pathParams = {
        'serial': serial,
        'portId': portId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetDeviceSwitchPorts200ResponseInner;
      return this.apiClient.callApi(
        '/devices/{serial}/switch/ports/{portId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeviceSwitchRoutingInterface operation.
     * @callback module:api/SwitchApi~updateDeviceSwitchRoutingInterfaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDeviceSwitchRoutingInterfaces200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a layer 3 interface for a switch
     * Update a layer 3 interface for a switch
     * @param {String} serial 
     * @param {String} interfaceId 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateDeviceSwitchRoutingInterfaceRequest} [createDeviceSwitchRoutingInterfaceRequest] 
     * @param {module:api/SwitchApi~updateDeviceSwitchRoutingInterfaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDeviceSwitchRoutingInterfaces200ResponseInner}
     */
    updateDeviceSwitchRoutingInterface(serial, interfaceId, opts, callback) {
      opts = opts || {};
      let postBody = opts['createDeviceSwitchRoutingInterfaceRequest'];
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling updateDeviceSwitchRoutingInterface");
      }
      // verify the required parameter 'interfaceId' is set
      if (interfaceId === undefined || interfaceId === null) {
        throw new Error("Missing the required parameter 'interfaceId' when calling updateDeviceSwitchRoutingInterface");
      }

      let pathParams = {
        'serial': serial,
        'interfaceId': interfaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetDeviceSwitchRoutingInterfaces200ResponseInner;
      return this.apiClient.callApi(
        '/devices/{serial}/switch/routing/interfaces/{interfaceId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeviceSwitchRoutingInterfaceDhcp operation.
     * @callback module:api/SwitchApi~updateDeviceSwitchRoutingInterfaceDhcpCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a layer 3 interface DHCP configuration for a switch
     * Update a layer 3 interface DHCP configuration for a switch
     * @param {String} serial 
     * @param {String} interfaceId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateDeviceSwitchRoutingInterfaceDhcpRequest} [updateDeviceSwitchRoutingInterfaceDhcpRequest] 
     * @param {module:api/SwitchApi~updateDeviceSwitchRoutingInterfaceDhcpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateDeviceSwitchRoutingInterfaceDhcp(serial, interfaceId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateDeviceSwitchRoutingInterfaceDhcpRequest'];
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling updateDeviceSwitchRoutingInterfaceDhcp");
      }
      // verify the required parameter 'interfaceId' is set
      if (interfaceId === undefined || interfaceId === null) {
        throw new Error("Missing the required parameter 'interfaceId' when calling updateDeviceSwitchRoutingInterfaceDhcp");
      }

      let pathParams = {
        'serial': serial,
        'interfaceId': interfaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/switch/routing/interfaces/{interfaceId}/dhcp', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeviceSwitchRoutingStaticRoute operation.
     * @callback module:api/SwitchApi~updateDeviceSwitchRoutingStaticRouteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a layer 3 static route for a switch
     * Update a layer 3 static route for a switch
     * @param {String} serial 
     * @param {String} staticRouteId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateDeviceSwitchRoutingStaticRouteRequest} [updateDeviceSwitchRoutingStaticRouteRequest] 
     * @param {module:api/SwitchApi~updateDeviceSwitchRoutingStaticRouteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateDeviceSwitchRoutingStaticRoute(serial, staticRouteId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateDeviceSwitchRoutingStaticRouteRequest'];
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling updateDeviceSwitchRoutingStaticRoute");
      }
      // verify the required parameter 'staticRouteId' is set
      if (staticRouteId === undefined || staticRouteId === null) {
        throw new Error("Missing the required parameter 'staticRouteId' when calling updateDeviceSwitchRoutingStaticRoute");
      }

      let pathParams = {
        'serial': serial,
        'staticRouteId': staticRouteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/switch/routing/staticRoutes/{staticRouteId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeviceSwitchWarmSpare operation.
     * @callback module:api/SwitchApi~updateDeviceSwitchWarmSpareCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update warm spare configuration for a switch
     * Update warm spare configuration for a switch. The spare will use the same L3 configuration as the primary. Note that this will irreversibly destroy any existing L3 configuration on the spare.
     * @param {String} serial 
     * @param {module:model/UpdateDeviceSwitchWarmSpareRequest} updateDeviceSwitchWarmSpareRequest 
     * @param {module:api/SwitchApi~updateDeviceSwitchWarmSpareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateDeviceSwitchWarmSpare(serial, updateDeviceSwitchWarmSpareRequest, callback) {
      let postBody = updateDeviceSwitchWarmSpareRequest;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling updateDeviceSwitchWarmSpare");
      }
      // verify the required parameter 'updateDeviceSwitchWarmSpareRequest' is set
      if (updateDeviceSwitchWarmSpareRequest === undefined || updateDeviceSwitchWarmSpareRequest === null) {
        throw new Error("Missing the required parameter 'updateDeviceSwitchWarmSpareRequest' when calling updateDeviceSwitchWarmSpare");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/switch/warmSpare', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSwitchAccessControlLists operation.
     * @callback module:api/SwitchApi~updateNetworkSwitchAccessControlListsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkSwitchAccessControlLists200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the access control lists for a MS network
     * Update the access control lists for a MS network
     * @param {String} networkId 
     * @param {module:model/UpdateNetworkSwitchAccessControlListsRequest} updateNetworkSwitchAccessControlListsRequest 
     * @param {module:api/SwitchApi~updateNetworkSwitchAccessControlListsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkSwitchAccessControlLists200Response}
     */
    updateNetworkSwitchAccessControlLists(networkId, updateNetworkSwitchAccessControlListsRequest, callback) {
      let postBody = updateNetworkSwitchAccessControlListsRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSwitchAccessControlLists");
      }
      // verify the required parameter 'updateNetworkSwitchAccessControlListsRequest' is set
      if (updateNetworkSwitchAccessControlListsRequest === undefined || updateNetworkSwitchAccessControlListsRequest === null) {
        throw new Error("Missing the required parameter 'updateNetworkSwitchAccessControlListsRequest' when calling updateNetworkSwitchAccessControlLists");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkSwitchAccessControlLists200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/accessControlLists', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSwitchAccessPolicy operation.
     * @callback module:api/SwitchApi~updateNetworkSwitchAccessPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkSwitchAccessPolicies200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an access policy for a switch network
     * Update an access policy for a switch network. If you would like to enable Meraki Authentication, set radiusServers to empty array.
     * @param {String} networkId 
     * @param {String} accessPolicyNumber 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkSwitchAccessPolicyRequest} [updateNetworkSwitchAccessPolicyRequest] 
     * @param {module:api/SwitchApi~updateNetworkSwitchAccessPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkSwitchAccessPolicies200ResponseInner}
     */
    updateNetworkSwitchAccessPolicy(networkId, accessPolicyNumber, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkSwitchAccessPolicyRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSwitchAccessPolicy");
      }
      // verify the required parameter 'accessPolicyNumber' is set
      if (accessPolicyNumber === undefined || accessPolicyNumber === null) {
        throw new Error("Missing the required parameter 'accessPolicyNumber' when calling updateNetworkSwitchAccessPolicy");
      }

      let pathParams = {
        'networkId': networkId,
        'accessPolicyNumber': accessPolicyNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkSwitchAccessPolicies200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/accessPolicies/{accessPolicyNumber}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSwitchAlternateManagementInterface operation.
     * @callback module:api/SwitchApi~updateNetworkSwitchAlternateManagementInterfaceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the switch alternate management interface for the network
     * Update the switch alternate management interface for the network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkSwitchAlternateManagementInterfaceRequest} [updateNetworkSwitchAlternateManagementInterfaceRequest] 
     * @param {module:api/SwitchApi~updateNetworkSwitchAlternateManagementInterfaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkSwitchAlternateManagementInterface(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkSwitchAlternateManagementInterfaceRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSwitchAlternateManagementInterface");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/alternateManagementInterface', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSwitchDhcpServerPolicy operation.
     * @callback module:api/SwitchApi~updateNetworkSwitchDhcpServerPolicyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the DHCP server settings
     * Update the DHCP server settings. Blocked/allowed servers are only applied when default policy is allow/block, respectively
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkSwitchDhcpServerPolicyRequest} [updateNetworkSwitchDhcpServerPolicyRequest] 
     * @param {module:api/SwitchApi~updateNetworkSwitchDhcpServerPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkSwitchDhcpServerPolicy(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkSwitchDhcpServerPolicyRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSwitchDhcpServerPolicy");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/dhcpServerPolicy', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer operation.
     * @callback module:api/SwitchApi~updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a server that is trusted by Dynamic ARP Inspection on this network
     * Update a server that is trusted by Dynamic ARP Inspection on this network
     * @param {String} networkId 
     * @param {String} trustedServerId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest} [updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest] 
     * @param {module:api/SwitchApi~updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner}
     */
    updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer(networkId, trustedServerId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer");
      }
      // verify the required parameter 'trustedServerId' is set
      if (trustedServerId === undefined || trustedServerId === null) {
        throw new Error("Missing the required parameter 'trustedServerId' when calling updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer");
      }

      let pathParams = {
        'networkId': networkId,
        'trustedServerId': trustedServerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/dhcpServerPolicy/arpInspection/trustedServers/{trustedServerId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSwitchDscpToCosMappings operation.
     * @callback module:api/SwitchApi~updateNetworkSwitchDscpToCosMappingsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the DSCP to CoS mappings
     * Update the DSCP to CoS mappings
     * @param {String} networkId 
     * @param {module:model/UpdateNetworkSwitchDscpToCosMappingsRequest} updateNetworkSwitchDscpToCosMappingsRequest 
     * @param {module:api/SwitchApi~updateNetworkSwitchDscpToCosMappingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkSwitchDscpToCosMappings(networkId, updateNetworkSwitchDscpToCosMappingsRequest, callback) {
      let postBody = updateNetworkSwitchDscpToCosMappingsRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSwitchDscpToCosMappings");
      }
      // verify the required parameter 'updateNetworkSwitchDscpToCosMappingsRequest' is set
      if (updateNetworkSwitchDscpToCosMappingsRequest === undefined || updateNetworkSwitchDscpToCosMappingsRequest === null) {
        throw new Error("Missing the required parameter 'updateNetworkSwitchDscpToCosMappingsRequest' when calling updateNetworkSwitchDscpToCosMappings");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/dscpToCosMappings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSwitchLinkAggregation operation.
     * @callback module:api/SwitchApi~updateNetworkSwitchLinkAggregationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a link aggregation group
     * Update a link aggregation group
     * @param {String} networkId 
     * @param {String} linkAggregationId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkSwitchLinkAggregationRequest} [updateNetworkSwitchLinkAggregationRequest] 
     * @param {module:api/SwitchApi~updateNetworkSwitchLinkAggregationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkSwitchLinkAggregation(networkId, linkAggregationId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkSwitchLinkAggregationRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSwitchLinkAggregation");
      }
      // verify the required parameter 'linkAggregationId' is set
      if (linkAggregationId === undefined || linkAggregationId === null) {
        throw new Error("Missing the required parameter 'linkAggregationId' when calling updateNetworkSwitchLinkAggregation");
      }

      let pathParams = {
        'networkId': networkId,
        'linkAggregationId': linkAggregationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/linkAggregations/{linkAggregationId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSwitchMtu operation.
     * @callback module:api/SwitchApi~updateNetworkSwitchMtuCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the MTU configuration
     * Update the MTU configuration
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkSwitchMtuRequest} [updateNetworkSwitchMtuRequest] 
     * @param {module:api/SwitchApi~updateNetworkSwitchMtuCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkSwitchMtu(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkSwitchMtuRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSwitchMtu");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/mtu', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSwitchPortSchedule operation.
     * @callback module:api/SwitchApi~updateNetworkSwitchPortScheduleCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a switch port schedule
     * Update a switch port schedule
     * @param {String} networkId 
     * @param {String} portScheduleId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkSwitchPortScheduleRequest} [updateNetworkSwitchPortScheduleRequest] 
     * @param {module:api/SwitchApi~updateNetworkSwitchPortScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkSwitchPortSchedule(networkId, portScheduleId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkSwitchPortScheduleRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSwitchPortSchedule");
      }
      // verify the required parameter 'portScheduleId' is set
      if (portScheduleId === undefined || portScheduleId === null) {
        throw new Error("Missing the required parameter 'portScheduleId' when calling updateNetworkSwitchPortSchedule");
      }

      let pathParams = {
        'networkId': networkId,
        'portScheduleId': portScheduleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/portSchedules/{portScheduleId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSwitchQosRule operation.
     * @callback module:api/SwitchApi~updateNetworkSwitchQosRuleCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a quality of service rule
     * Update a quality of service rule
     * @param {String} networkId 
     * @param {String} qosRuleId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkSwitchQosRuleRequest} [updateNetworkSwitchQosRuleRequest] 
     * @param {module:api/SwitchApi~updateNetworkSwitchQosRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkSwitchQosRule(networkId, qosRuleId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkSwitchQosRuleRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSwitchQosRule");
      }
      // verify the required parameter 'qosRuleId' is set
      if (qosRuleId === undefined || qosRuleId === null) {
        throw new Error("Missing the required parameter 'qosRuleId' when calling updateNetworkSwitchQosRule");
      }

      let pathParams = {
        'networkId': networkId,
        'qosRuleId': qosRuleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/qosRules/{qosRuleId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSwitchQosRulesOrder operation.
     * @callback module:api/SwitchApi~updateNetworkSwitchQosRulesOrderCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the order in which the rules should be processed by the switch
     * Update the order in which the rules should be processed by the switch
     * @param {String} networkId 
     * @param {module:model/UpdateNetworkSwitchQosRulesOrderRequest} updateNetworkSwitchQosRulesOrderRequest 
     * @param {module:api/SwitchApi~updateNetworkSwitchQosRulesOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkSwitchQosRulesOrder(networkId, updateNetworkSwitchQosRulesOrderRequest, callback) {
      let postBody = updateNetworkSwitchQosRulesOrderRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSwitchQosRulesOrder");
      }
      // verify the required parameter 'updateNetworkSwitchQosRulesOrderRequest' is set
      if (updateNetworkSwitchQosRulesOrderRequest === undefined || updateNetworkSwitchQosRulesOrderRequest === null) {
        throw new Error("Missing the required parameter 'updateNetworkSwitchQosRulesOrderRequest' when calling updateNetworkSwitchQosRulesOrder");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/qosRules/order', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSwitchRoutingMulticast operation.
     * @callback module:api/SwitchApi~updateNetworkSwitchRoutingMulticastCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update multicast settings for a network
     * Update multicast settings for a network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkSwitchRoutingMulticastRequest} [updateNetworkSwitchRoutingMulticastRequest] 
     * @param {module:api/SwitchApi~updateNetworkSwitchRoutingMulticastCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkSwitchRoutingMulticast(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkSwitchRoutingMulticastRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSwitchRoutingMulticast");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/routing/multicast', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSwitchRoutingMulticastRendezvousPoint operation.
     * @callback module:api/SwitchApi~updateNetworkSwitchRoutingMulticastRendezvousPointCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a multicast rendezvous point
     * Update a multicast rendezvous point
     * @param {String} networkId 
     * @param {String} rendezvousPointId 
     * @param {module:model/UpdateNetworkSwitchRoutingMulticastRendezvousPointRequest} updateNetworkSwitchRoutingMulticastRendezvousPointRequest 
     * @param {module:api/SwitchApi~updateNetworkSwitchRoutingMulticastRendezvousPointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkSwitchRoutingMulticastRendezvousPoint(networkId, rendezvousPointId, updateNetworkSwitchRoutingMulticastRendezvousPointRequest, callback) {
      let postBody = updateNetworkSwitchRoutingMulticastRendezvousPointRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSwitchRoutingMulticastRendezvousPoint");
      }
      // verify the required parameter 'rendezvousPointId' is set
      if (rendezvousPointId === undefined || rendezvousPointId === null) {
        throw new Error("Missing the required parameter 'rendezvousPointId' when calling updateNetworkSwitchRoutingMulticastRendezvousPoint");
      }
      // verify the required parameter 'updateNetworkSwitchRoutingMulticastRendezvousPointRequest' is set
      if (updateNetworkSwitchRoutingMulticastRendezvousPointRequest === undefined || updateNetworkSwitchRoutingMulticastRendezvousPointRequest === null) {
        throw new Error("Missing the required parameter 'updateNetworkSwitchRoutingMulticastRendezvousPointRequest' when calling updateNetworkSwitchRoutingMulticastRendezvousPoint");
      }

      let pathParams = {
        'networkId': networkId,
        'rendezvousPointId': rendezvousPointId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/routing/multicast/rendezvousPoints/{rendezvousPointId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSwitchRoutingOspf operation.
     * @callback module:api/SwitchApi~updateNetworkSwitchRoutingOspfCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update layer 3 OSPF routing configuration
     * Update layer 3 OSPF routing configuration
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkSwitchRoutingOspfRequest} [updateNetworkSwitchRoutingOspfRequest] 
     * @param {module:api/SwitchApi~updateNetworkSwitchRoutingOspfCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkSwitchRoutingOspf(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkSwitchRoutingOspfRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSwitchRoutingOspf");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/routing/ospf', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSwitchSettings operation.
     * @callback module:api/SwitchApi~updateNetworkSwitchSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkSwitchSettings200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update switch network settings
     * Update switch network settings
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkSwitchSettingsRequest} [updateNetworkSwitchSettingsRequest] 
     * @param {module:api/SwitchApi~updateNetworkSwitchSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkSwitchSettings200Response}
     */
    updateNetworkSwitchSettings(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkSwitchSettingsRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSwitchSettings");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkSwitchSettings200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSwitchStackRoutingInterface operation.
     * @callback module:api/SwitchApi~updateNetworkSwitchStackRoutingInterfaceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a layer 3 interface for a switch stack
     * Update a layer 3 interface for a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {String} interfaceId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkSwitchStackRoutingInterfaceRequest} [updateNetworkSwitchStackRoutingInterfaceRequest] 
     * @param {module:api/SwitchApi~updateNetworkSwitchStackRoutingInterfaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkSwitchStackRoutingInterface(networkId, switchStackId, interfaceId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkSwitchStackRoutingInterfaceRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSwitchStackRoutingInterface");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling updateNetworkSwitchStackRoutingInterface");
      }
      // verify the required parameter 'interfaceId' is set
      if (interfaceId === undefined || interfaceId === null) {
        throw new Error("Missing the required parameter 'interfaceId' when calling updateNetworkSwitchStackRoutingInterface");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId,
        'interfaceId': interfaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSwitchStackRoutingInterfaceDhcp operation.
     * @callback module:api/SwitchApi~updateNetworkSwitchStackRoutingInterfaceDhcpCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a layer 3 interface DHCP configuration for a switch stack
     * Update a layer 3 interface DHCP configuration for a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {String} interfaceId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest} [updateNetworkSwitchStackRoutingInterfaceDhcpRequest] 
     * @param {module:api/SwitchApi~updateNetworkSwitchStackRoutingInterfaceDhcpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkSwitchStackRoutingInterfaceDhcp(networkId, switchStackId, interfaceId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkSwitchStackRoutingInterfaceDhcpRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSwitchStackRoutingInterfaceDhcp");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling updateNetworkSwitchStackRoutingInterfaceDhcp");
      }
      // verify the required parameter 'interfaceId' is set
      if (interfaceId === undefined || interfaceId === null) {
        throw new Error("Missing the required parameter 'interfaceId' when calling updateNetworkSwitchStackRoutingInterfaceDhcp");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId,
        'interfaceId': interfaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}/dhcp', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSwitchStackRoutingStaticRoute operation.
     * @callback module:api/SwitchApi~updateNetworkSwitchStackRoutingStaticRouteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a layer 3 static route for a switch stack
     * Update a layer 3 static route for a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {String} staticRouteId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateDeviceSwitchRoutingStaticRouteRequest} [updateDeviceSwitchRoutingStaticRouteRequest] 
     * @param {module:api/SwitchApi~updateNetworkSwitchStackRoutingStaticRouteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkSwitchStackRoutingStaticRoute(networkId, switchStackId, staticRouteId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateDeviceSwitchRoutingStaticRouteRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSwitchStackRoutingStaticRoute");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling updateNetworkSwitchStackRoutingStaticRoute");
      }
      // verify the required parameter 'staticRouteId' is set
      if (staticRouteId === undefined || staticRouteId === null) {
        throw new Error("Missing the required parameter 'staticRouteId' when calling updateNetworkSwitchStackRoutingStaticRoute");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId,
        'staticRouteId': staticRouteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes/{staticRouteId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSwitchStormControl operation.
     * @callback module:api/SwitchApi~updateNetworkSwitchStormControlCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the storm control configuration for a switch network
     * Update the storm control configuration for a switch network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkSwitchStormControlRequest} [updateNetworkSwitchStormControlRequest] 
     * @param {module:api/SwitchApi~updateNetworkSwitchStormControlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkSwitchStormControl(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkSwitchStormControlRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSwitchStormControl");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stormControl', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSwitchStp operation.
     * @callback module:api/SwitchApi~updateNetworkSwitchStpCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates STP settings
     * Updates STP settings
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkSwitchStpRequest} [updateNetworkSwitchStpRequest] 
     * @param {module:api/SwitchApi~updateNetworkSwitchStpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkSwitchStp(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkSwitchStpRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSwitchStp");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stp', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationConfigTemplateSwitchProfilePort operation.
     * @callback module:api/SwitchApi~updateOrganizationConfigTemplateSwitchProfilePortCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a switch profile port
     * Update a switch profile port
     * @param {String} organizationId 
     * @param {String} configTemplateId 
     * @param {String} profileId 
     * @param {String} portId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationConfigTemplateSwitchProfilePortRequest} [updateOrganizationConfigTemplateSwitchProfilePortRequest] 
     * @param {module:api/SwitchApi~updateOrganizationConfigTemplateSwitchProfilePortCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner}
     */
    updateOrganizationConfigTemplateSwitchProfilePort(organizationId, configTemplateId, profileId, portId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateOrganizationConfigTemplateSwitchProfilePortRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationConfigTemplateSwitchProfilePort");
      }
      // verify the required parameter 'configTemplateId' is set
      if (configTemplateId === undefined || configTemplateId === null) {
        throw new Error("Missing the required parameter 'configTemplateId' when calling updateOrganizationConfigTemplateSwitchProfilePort");
      }
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling updateOrganizationConfigTemplateSwitchProfilePort");
      }
      // verify the required parameter 'portId' is set
      if (portId === undefined || portId === null) {
        throw new Error("Missing the required parameter 'portId' when calling updateOrganizationConfigTemplateSwitchProfilePort");
      }

      let pathParams = {
        'organizationId': organizationId,
        'configTemplateId': configTemplateId,
        'profileId': profileId,
        'portId': portId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/configTemplates/{configTemplateId}/switch/profiles/{profileId}/ports/{portId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
