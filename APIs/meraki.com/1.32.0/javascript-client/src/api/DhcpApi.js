/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetNetworkCellularGatewayDhcp200Response from '../model/GetNetworkCellularGatewayDhcp200Response';
import GetNetworkSwitchDhcpV4ServersSeen200ResponseInner from '../model/GetNetworkSwitchDhcpV4ServersSeen200ResponseInner';
import UpdateDeviceSwitchRoutingInterfaceDhcpRequest from '../model/UpdateDeviceSwitchRoutingInterfaceDhcpRequest';
import UpdateNetworkCellularGatewayDhcpRequest from '../model/UpdateNetworkCellularGatewayDhcpRequest';
import UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest from '../model/UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest';

/**
* Dhcp service.
* @module api/DhcpApi
* @version 1.32.0
*/
export default class DhcpApi {

    /**
    * Constructs a new DhcpApi. 
    * @alias module:api/DhcpApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getDeviceApplianceDhcpSubnets_1 operation.
     * @callback module:api/DhcpApi~getDeviceApplianceDhcpSubnets_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the DHCP subnet information for an appliance
     * Return the DHCP subnet information for an appliance
     * @param {String} serial 
     * @param {module:api/DhcpApi~getDeviceApplianceDhcpSubnets_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getDeviceApplianceDhcpSubnets_1(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceApplianceDhcpSubnets_1");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/devices/{serial}/appliance/dhcp/subnets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceSwitchRoutingInterfaceDhcp_3 operation.
     * @callback module:api/DhcpApi~getDeviceSwitchRoutingInterfaceDhcp_3Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a layer 3 interface DHCP configuration for a switch
     * Return a layer 3 interface DHCP configuration for a switch
     * @param {String} serial 
     * @param {String} interfaceId 
     * @param {module:api/DhcpApi~getDeviceSwitchRoutingInterfaceDhcp_3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getDeviceSwitchRoutingInterfaceDhcp_3(serial, interfaceId, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceSwitchRoutingInterfaceDhcp_3");
      }
      // verify the required parameter 'interfaceId' is set
      if (interfaceId === undefined || interfaceId === null) {
        throw new Error("Missing the required parameter 'interfaceId' when calling getDeviceSwitchRoutingInterfaceDhcp_3");
      }

      let pathParams = {
        'serial': serial,
        'interfaceId': interfaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/switch/routing/interfaces/{interfaceId}/dhcp', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkCellularGatewayDhcp_1 operation.
     * @callback module:api/DhcpApi~getNetworkCellularGatewayDhcp_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkCellularGatewayDhcp200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List common DHCP settings of MGs
     * List common DHCP settings of MGs
     * @param {String} networkId 
     * @param {module:api/DhcpApi~getNetworkCellularGatewayDhcp_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkCellularGatewayDhcp200Response}
     */
    getNetworkCellularGatewayDhcp_1(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkCellularGatewayDhcp_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkCellularGatewayDhcp200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/cellularGateway/dhcp', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchDhcpV4ServersSeen_1 operation.
     * @callback module:api/DhcpApi~getNetworkSwitchDhcpV4ServersSeen_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSwitchDhcpV4ServersSeen200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the network's DHCPv4 servers seen within the selected timeframe (default 1 day)
     * Return the network's DHCPv4 servers seen within the selected timeframe (default 1 day)
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:api/DhcpApi~getNetworkSwitchDhcpV4ServersSeen_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSwitchDhcpV4ServersSeen200ResponseInner>}
     */
    getNetworkSwitchDhcpV4ServersSeen_1(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchDhcpV4ServersSeen_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        't0': opts['t0'],
        'timespan': opts['timespan'],
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSwitchDhcpV4ServersSeen200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/dhcp/v4/servers/seen', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchStackRoutingInterfaceDhcp_4 operation.
     * @callback module:api/DhcpApi~getNetworkSwitchStackRoutingInterfaceDhcp_4Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a layer 3 interface DHCP configuration for a switch stack
     * Return a layer 3 interface DHCP configuration for a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {String} interfaceId 
     * @param {module:api/DhcpApi~getNetworkSwitchStackRoutingInterfaceDhcp_4Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkSwitchStackRoutingInterfaceDhcp_4(networkId, switchStackId, interfaceId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchStackRoutingInterfaceDhcp_4");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling getNetworkSwitchStackRoutingInterfaceDhcp_4");
      }
      // verify the required parameter 'interfaceId' is set
      if (interfaceId === undefined || interfaceId === null) {
        throw new Error("Missing the required parameter 'interfaceId' when calling getNetworkSwitchStackRoutingInterfaceDhcp_4");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId,
        'interfaceId': interfaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}/dhcp', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeviceSwitchRoutingInterfaceDhcp_3 operation.
     * @callback module:api/DhcpApi~updateDeviceSwitchRoutingInterfaceDhcp_3Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a layer 3 interface DHCP configuration for a switch
     * Update a layer 3 interface DHCP configuration for a switch
     * @param {String} serial 
     * @param {String} interfaceId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateDeviceSwitchRoutingInterfaceDhcpRequest} [updateDeviceSwitchRoutingInterfaceDhcpRequest] 
     * @param {module:api/DhcpApi~updateDeviceSwitchRoutingInterfaceDhcp_3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateDeviceSwitchRoutingInterfaceDhcp_3(serial, interfaceId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateDeviceSwitchRoutingInterfaceDhcpRequest'];
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling updateDeviceSwitchRoutingInterfaceDhcp_3");
      }
      // verify the required parameter 'interfaceId' is set
      if (interfaceId === undefined || interfaceId === null) {
        throw new Error("Missing the required parameter 'interfaceId' when calling updateDeviceSwitchRoutingInterfaceDhcp_3");
      }

      let pathParams = {
        'serial': serial,
        'interfaceId': interfaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/switch/routing/interfaces/{interfaceId}/dhcp', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkCellularGatewayDhcp_1 operation.
     * @callback module:api/DhcpApi~updateNetworkCellularGatewayDhcp_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkCellularGatewayDhcp200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update common DHCP settings of MGs
     * Update common DHCP settings of MGs
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkCellularGatewayDhcpRequest} [updateNetworkCellularGatewayDhcpRequest] 
     * @param {module:api/DhcpApi~updateNetworkCellularGatewayDhcp_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkCellularGatewayDhcp200Response}
     */
    updateNetworkCellularGatewayDhcp_1(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkCellularGatewayDhcpRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkCellularGatewayDhcp_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkCellularGatewayDhcp200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/cellularGateway/dhcp', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSwitchStackRoutingInterfaceDhcp_4 operation.
     * @callback module:api/DhcpApi~updateNetworkSwitchStackRoutingInterfaceDhcp_4Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a layer 3 interface DHCP configuration for a switch stack
     * Update a layer 3 interface DHCP configuration for a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {String} interfaceId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest} [updateNetworkSwitchStackRoutingInterfaceDhcpRequest] 
     * @param {module:api/DhcpApi~updateNetworkSwitchStackRoutingInterfaceDhcp_4Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkSwitchStackRoutingInterfaceDhcp_4(networkId, switchStackId, interfaceId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkSwitchStackRoutingInterfaceDhcpRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSwitchStackRoutingInterfaceDhcp_4");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling updateNetworkSwitchStackRoutingInterfaceDhcp_4");
      }
      // verify the required parameter 'interfaceId' is set
      if (interfaceId === undefined || interfaceId === null) {
        throw new Error("Missing the required parameter 'interfaceId' when calling updateNetworkSwitchStackRoutingInterfaceDhcp_4");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId,
        'interfaceId': interfaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}/dhcp', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
