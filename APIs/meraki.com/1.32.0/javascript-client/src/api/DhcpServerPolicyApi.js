/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest from '../model/CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest';
import GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner from '../model/GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner';
import GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner from '../model/GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner';
import UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest from '../model/UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest';
import UpdateNetworkSwitchDhcpServerPolicyRequest from '../model/UpdateNetworkSwitchDhcpServerPolicyRequest';

/**
* DhcpServerPolicy service.
* @module api/DhcpServerPolicyApi
* @version 1.32.0
*/
export default class DhcpServerPolicyApi {

    /**
    * Constructs a new DhcpServerPolicyApi. 
    * @alias module:api/DhcpServerPolicyApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_1 operation.
     * @callback module:api/DhcpServerPolicyApi~createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a server to be trusted by Dynamic ARP Inspection on this network
     * Add a server to be trusted by Dynamic ARP Inspection on this network
     * @param {String} networkId 
     * @param {module:model/CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest} createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest 
     * @param {module:api/DhcpServerPolicyApi~createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner}
     */
    createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_1(networkId, createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest, callback) {
      let postBody = createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_1");
      }
      // verify the required parameter 'createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest' is set
      if (createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest === undefined || createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest' when calling createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/dhcpServerPolicy/arpInspection/trustedServers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_1 operation.
     * @callback module:api/DhcpServerPolicyApi~deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a server from being trusted by Dynamic ARP Inspection on this network
     * Remove a server from being trusted by Dynamic ARP Inspection on this network
     * @param {String} networkId 
     * @param {String} trustedServerId 
     * @param {module:api/DhcpServerPolicyApi~deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_1(networkId, trustedServerId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_1");
      }
      // verify the required parameter 'trustedServerId' is set
      if (trustedServerId === undefined || trustedServerId === null) {
        throw new Error("Missing the required parameter 'trustedServerId' when calling deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_1");
      }

      let pathParams = {
        'networkId': networkId,
        'trustedServerId': trustedServerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/dhcpServerPolicy/arpInspection/trustedServers/{trustedServerId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_1 operation.
     * @callback module:api/DhcpServerPolicyApi~getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the list of servers trusted by Dynamic ARP Inspection on this network
     * Return the list of servers trusted by Dynamic ARP Inspection on this network. These are also known as whitelisted snoop entries
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:api/DhcpServerPolicyApi~getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner>}
     */
    getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_1(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/dhcpServerPolicy/arpInspection/trustedServers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice_1 operation.
     * @callback module:api/DhcpServerPolicyApi~getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the devices that have a Dynamic ARP Inspection warning and their warnings
     * Return the devices that have a Dynamic ARP Inspection warning and their warnings
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:api/DhcpServerPolicyApi~getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner>}
     */
    getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice_1(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/dhcpServerPolicy/arpInspection/warnings/byDevice', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchDhcpServerPolicy_1 operation.
     * @callback module:api/DhcpServerPolicyApi~getNetworkSwitchDhcpServerPolicy_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the DHCP server settings
     * Return the DHCP server settings. Blocked/allowed servers are only applied when default policy is allow/block, respectively
     * @param {String} networkId 
     * @param {module:api/DhcpServerPolicyApi~getNetworkSwitchDhcpServerPolicy_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkSwitchDhcpServerPolicy_1(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchDhcpServerPolicy_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/dhcpServerPolicy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_1 operation.
     * @callback module:api/DhcpServerPolicyApi~updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a server that is trusted by Dynamic ARP Inspection on this network
     * Update a server that is trusted by Dynamic ARP Inspection on this network
     * @param {String} networkId 
     * @param {String} trustedServerId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest} [updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest] 
     * @param {module:api/DhcpServerPolicyApi~updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner}
     */
    updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_1(networkId, trustedServerId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_1");
      }
      // verify the required parameter 'trustedServerId' is set
      if (trustedServerId === undefined || trustedServerId === null) {
        throw new Error("Missing the required parameter 'trustedServerId' when calling updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_1");
      }

      let pathParams = {
        'networkId': networkId,
        'trustedServerId': trustedServerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/dhcpServerPolicy/arpInspection/trustedServers/{trustedServerId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSwitchDhcpServerPolicy_1 operation.
     * @callback module:api/DhcpServerPolicyApi~updateNetworkSwitchDhcpServerPolicy_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the DHCP server settings
     * Update the DHCP server settings. Blocked/allowed servers are only applied when default policy is allow/block, respectively
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkSwitchDhcpServerPolicyRequest} [updateNetworkSwitchDhcpServerPolicyRequest] 
     * @param {module:api/DhcpServerPolicyApi~updateNetworkSwitchDhcpServerPolicy_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkSwitchDhcpServerPolicy_1(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkSwitchDhcpServerPolicyRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSwitchDhcpServerPolicy_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/dhcpServerPolicy', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
