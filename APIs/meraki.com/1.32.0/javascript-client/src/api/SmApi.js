/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CheckinNetworkSmDevices200Response from '../model/CheckinNetworkSmDevices200Response';
import CheckinNetworkSmDevicesRequest from '../model/CheckinNetworkSmDevicesRequest';
import CreateNetworkSmBypassActivationLockAttemptRequest from '../model/CreateNetworkSmBypassActivationLockAttemptRequest';
import CreateNetworkSmTargetGroupRequest from '../model/CreateNetworkSmTargetGroupRequest';
import GetNetworkSmDeviceCellularUsageHistory200ResponseInner from '../model/GetNetworkSmDeviceCellularUsageHistory200ResponseInner';
import GetNetworkSmDeviceCerts200ResponseInner from '../model/GetNetworkSmDeviceCerts200ResponseInner';
import GetNetworkSmDeviceConnectivity200ResponseInner from '../model/GetNetworkSmDeviceConnectivity200ResponseInner';
import GetNetworkSmDeviceDesktopLogs200ResponseInner from '../model/GetNetworkSmDeviceDesktopLogs200ResponseInner';
import GetNetworkSmDeviceDeviceCommandLogs200ResponseInner from '../model/GetNetworkSmDeviceDeviceCommandLogs200ResponseInner';
import GetNetworkSmDeviceDeviceProfiles200ResponseInner from '../model/GetNetworkSmDeviceDeviceProfiles200ResponseInner';
import GetNetworkSmDeviceNetworkAdapters200ResponseInner from '../model/GetNetworkSmDeviceNetworkAdapters200ResponseInner';
import GetNetworkSmDevicePerformanceHistory200ResponseInner from '../model/GetNetworkSmDevicePerformanceHistory200ResponseInner';
import GetNetworkSmDeviceSecurityCenters200ResponseInner from '../model/GetNetworkSmDeviceSecurityCenters200ResponseInner';
import GetNetworkSmDeviceSoftwares200ResponseInner from '../model/GetNetworkSmDeviceSoftwares200ResponseInner';
import GetNetworkSmDeviceWlanLists200ResponseInner from '../model/GetNetworkSmDeviceWlanLists200ResponseInner';
import GetNetworkSmDevices200ResponseInner from '../model/GetNetworkSmDevices200ResponseInner';
import GetNetworkSmProfiles200ResponseInner from '../model/GetNetworkSmProfiles200ResponseInner';
import GetNetworkSmTrustedAccessConfigs200ResponseInner from '../model/GetNetworkSmTrustedAccessConfigs200ResponseInner';
import GetNetworkSmUserAccessDevices200ResponseInner from '../model/GetNetworkSmUserAccessDevices200ResponseInner';
import GetNetworkSmUsers200ResponseInner from '../model/GetNetworkSmUsers200ResponseInner';
import GetOrganizationSmApnsCert200Response from '../model/GetOrganizationSmApnsCert200Response';
import GetOrganizationSmVppAccounts200ResponseInner from '../model/GetOrganizationSmVppAccounts200ResponseInner';
import LockNetworkSmDevicesRequest from '../model/LockNetworkSmDevicesRequest';
import ModifyNetworkSmDevicesTags200ResponseInner from '../model/ModifyNetworkSmDevicesTags200ResponseInner';
import ModifyNetworkSmDevicesTagsRequest from '../model/ModifyNetworkSmDevicesTagsRequest';
import MoveNetworkSmDevices200Response from '../model/MoveNetworkSmDevices200Response';
import MoveNetworkSmDevicesRequest from '../model/MoveNetworkSmDevicesRequest';
import UpdateNetworkSmDevicesFields200ResponseInner from '../model/UpdateNetworkSmDevicesFields200ResponseInner';
import UpdateNetworkSmDevicesFieldsRequest from '../model/UpdateNetworkSmDevicesFieldsRequest';
import WipeNetworkSmDevices200Response from '../model/WipeNetworkSmDevices200Response';
import WipeNetworkSmDevicesRequest from '../model/WipeNetworkSmDevicesRequest';

/**
* Sm service.
* @module api/SmApi
* @version 1.32.0
*/
export default class SmApi {

    /**
    * Constructs a new SmApi. 
    * @alias module:api/SmApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the checkinNetworkSmDevices operation.
     * @callback module:api/SmApi~checkinNetworkSmDevicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckinNetworkSmDevices200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Force check-in a set of devices
     * Force check-in a set of devices
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/CheckinNetworkSmDevicesRequest} [checkinNetworkSmDevicesRequest] 
     * @param {module:api/SmApi~checkinNetworkSmDevicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckinNetworkSmDevices200Response}
     */
    checkinNetworkSmDevices(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['checkinNetworkSmDevicesRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling checkinNetworkSmDevices");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CheckinNetworkSmDevices200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/devices/checkin', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkSmBypassActivationLockAttempt operation.
     * @callback module:api/SmApi~createNetworkSmBypassActivationLockAttemptCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bypass activation lock attempt
     * Bypass activation lock attempt
     * @param {String} networkId 
     * @param {module:model/CreateNetworkSmBypassActivationLockAttemptRequest} createNetworkSmBypassActivationLockAttemptRequest 
     * @param {module:api/SmApi~createNetworkSmBypassActivationLockAttemptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNetworkSmBypassActivationLockAttempt(networkId, createNetworkSmBypassActivationLockAttemptRequest, callback) {
      let postBody = createNetworkSmBypassActivationLockAttemptRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkSmBypassActivationLockAttempt");
      }
      // verify the required parameter 'createNetworkSmBypassActivationLockAttemptRequest' is set
      if (createNetworkSmBypassActivationLockAttemptRequest === undefined || createNetworkSmBypassActivationLockAttemptRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkSmBypassActivationLockAttemptRequest' when calling createNetworkSmBypassActivationLockAttempt");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/bypassActivationLockAttempts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkSmTargetGroup operation.
     * @callback module:api/SmApi~createNetworkSmTargetGroupCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a target group
     * Add a target group
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateNetworkSmTargetGroupRequest} [createNetworkSmTargetGroupRequest] 
     * @param {module:api/SmApi~createNetworkSmTargetGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNetworkSmTargetGroup(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['createNetworkSmTargetGroupRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkSmTargetGroup");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/targetGroups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkSmTargetGroup operation.
     * @callback module:api/SmApi~deleteNetworkSmTargetGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a target group from a network
     * Delete a target group from a network
     * @param {String} networkId 
     * @param {String} targetGroupId 
     * @param {module:api/SmApi~deleteNetworkSmTargetGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkSmTargetGroup(networkId, targetGroupId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkSmTargetGroup");
      }
      // verify the required parameter 'targetGroupId' is set
      if (targetGroupId === undefined || targetGroupId === null) {
        throw new Error("Missing the required parameter 'targetGroupId' when calling deleteNetworkSmTargetGroup");
      }

      let pathParams = {
        'networkId': networkId,
        'targetGroupId': targetGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/targetGroups/{targetGroupId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkSmUserAccessDevice operation.
     * @callback module:api/SmApi~deleteNetworkSmUserAccessDeviceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a User Access Device
     * Delete a User Access Device
     * @param {String} networkId 
     * @param {String} userAccessDeviceId 
     * @param {module:api/SmApi~deleteNetworkSmUserAccessDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkSmUserAccessDevice(networkId, userAccessDeviceId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkSmUserAccessDevice");
      }
      // verify the required parameter 'userAccessDeviceId' is set
      if (userAccessDeviceId === undefined || userAccessDeviceId === null) {
        throw new Error("Missing the required parameter 'userAccessDeviceId' when calling deleteNetworkSmUserAccessDevice");
      }

      let pathParams = {
        'networkId': networkId,
        'userAccessDeviceId': userAccessDeviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/userAccessDevices/{userAccessDeviceId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSmBypassActivationLockAttempt operation.
     * @callback module:api/SmApi~getNetworkSmBypassActivationLockAttemptCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bypass activation lock attempt status
     * Bypass activation lock attempt status
     * @param {String} networkId 
     * @param {String} attemptId 
     * @param {module:api/SmApi~getNetworkSmBypassActivationLockAttemptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkSmBypassActivationLockAttempt(networkId, attemptId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSmBypassActivationLockAttempt");
      }
      // verify the required parameter 'attemptId' is set
      if (attemptId === undefined || attemptId === null) {
        throw new Error("Missing the required parameter 'attemptId' when calling getNetworkSmBypassActivationLockAttempt");
      }

      let pathParams = {
        'networkId': networkId,
        'attemptId': attemptId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/bypassActivationLockAttempts/{attemptId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSmDeviceCellularUsageHistory operation.
     * @callback module:api/SmApi~getNetworkSmDeviceCellularUsageHistoryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSmDeviceCellularUsageHistory200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the client's daily cellular data usage history
     * Return the client's daily cellular data usage history. Usage data is in kilobytes.
     * @param {String} networkId 
     * @param {String} deviceId 
     * @param {module:api/SmApi~getNetworkSmDeviceCellularUsageHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSmDeviceCellularUsageHistory200ResponseInner>}
     */
    getNetworkSmDeviceCellularUsageHistory(networkId, deviceId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSmDeviceCellularUsageHistory");
      }
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling getNetworkSmDeviceCellularUsageHistory");
      }

      let pathParams = {
        'networkId': networkId,
        'deviceId': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSmDeviceCellularUsageHistory200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/devices/{deviceId}/cellularUsageHistory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSmDeviceCerts operation.
     * @callback module:api/SmApi~getNetworkSmDeviceCertsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSmDeviceCerts200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the certs on a device
     * List the certs on a device
     * @param {String} networkId 
     * @param {String} deviceId 
     * @param {module:api/SmApi~getNetworkSmDeviceCertsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSmDeviceCerts200ResponseInner>}
     */
    getNetworkSmDeviceCerts(networkId, deviceId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSmDeviceCerts");
      }
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling getNetworkSmDeviceCerts");
      }

      let pathParams = {
        'networkId': networkId,
        'deviceId': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSmDeviceCerts200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/devices/{deviceId}/certs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSmDeviceConnectivity operation.
     * @callback module:api/SmApi~getNetworkSmDeviceConnectivityCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSmDeviceConnectivity200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns historical connectivity data (whether a device is regularly checking in to Dashboard).
     * Returns historical connectivity data (whether a device is regularly checking in to Dashboard).
     * @param {String} networkId 
     * @param {String} deviceId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:api/SmApi~getNetworkSmDeviceConnectivityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSmDeviceConnectivity200ResponseInner>}
     */
    getNetworkSmDeviceConnectivity(networkId, deviceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSmDeviceConnectivity");
      }
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling getNetworkSmDeviceConnectivity");
      }

      let pathParams = {
        'networkId': networkId,
        'deviceId': deviceId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSmDeviceConnectivity200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/devices/{deviceId}/connectivity', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSmDeviceDesktopLogs operation.
     * @callback module:api/SmApi~getNetworkSmDeviceDesktopLogsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSmDeviceDesktopLogs200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return historical records of various Systems Manager network connection details for desktop devices.
     * Return historical records of various Systems Manager network connection details for desktop devices.
     * @param {String} networkId 
     * @param {String} deviceId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:api/SmApi~getNetworkSmDeviceDesktopLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSmDeviceDesktopLogs200ResponseInner>}
     */
    getNetworkSmDeviceDesktopLogs(networkId, deviceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSmDeviceDesktopLogs");
      }
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling getNetworkSmDeviceDesktopLogs");
      }

      let pathParams = {
        'networkId': networkId,
        'deviceId': deviceId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSmDeviceDesktopLogs200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/devices/{deviceId}/desktopLogs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSmDeviceDeviceCommandLogs operation.
     * @callback module:api/SmApi~getNetworkSmDeviceDeviceCommandLogsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSmDeviceDeviceCommandLogs200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return historical records of commands sent to Systems Manager devices
     * Return historical records of commands sent to Systems Manager devices. Note that this will include the name of the Dashboard user who initiated the command if it was generated by a Dashboard admin rather than the automatic behavior of the system; you may wish to filter this out of any reports.
     * @param {String} networkId 
     * @param {String} deviceId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:api/SmApi~getNetworkSmDeviceDeviceCommandLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSmDeviceDeviceCommandLogs200ResponseInner>}
     */
    getNetworkSmDeviceDeviceCommandLogs(networkId, deviceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSmDeviceDeviceCommandLogs");
      }
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling getNetworkSmDeviceDeviceCommandLogs");
      }

      let pathParams = {
        'networkId': networkId,
        'deviceId': deviceId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSmDeviceDeviceCommandLogs200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/devices/{deviceId}/deviceCommandLogs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSmDeviceDeviceProfiles operation.
     * @callback module:api/SmApi~getNetworkSmDeviceDeviceProfilesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSmDeviceDeviceProfiles200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the installed profiles associated with a device
     * Get the installed profiles associated with a device
     * @param {String} networkId 
     * @param {String} deviceId 
     * @param {module:api/SmApi~getNetworkSmDeviceDeviceProfilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSmDeviceDeviceProfiles200ResponseInner>}
     */
    getNetworkSmDeviceDeviceProfiles(networkId, deviceId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSmDeviceDeviceProfiles");
      }
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling getNetworkSmDeviceDeviceProfiles");
      }

      let pathParams = {
        'networkId': networkId,
        'deviceId': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSmDeviceDeviceProfiles200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/devices/{deviceId}/deviceProfiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSmDeviceNetworkAdapters operation.
     * @callback module:api/SmApi~getNetworkSmDeviceNetworkAdaptersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSmDeviceNetworkAdapters200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the network adapters of a device
     * List the network adapters of a device
     * @param {String} networkId 
     * @param {String} deviceId 
     * @param {module:api/SmApi~getNetworkSmDeviceNetworkAdaptersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSmDeviceNetworkAdapters200ResponseInner>}
     */
    getNetworkSmDeviceNetworkAdapters(networkId, deviceId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSmDeviceNetworkAdapters");
      }
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling getNetworkSmDeviceNetworkAdapters");
      }

      let pathParams = {
        'networkId': networkId,
        'deviceId': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSmDeviceNetworkAdapters200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/devices/{deviceId}/networkAdapters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSmDevicePerformanceHistory operation.
     * @callback module:api/SmApi~getNetworkSmDevicePerformanceHistoryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSmDevicePerformanceHistory200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return historical records of various Systems Manager client metrics for desktop devices.
     * Return historical records of various Systems Manager client metrics for desktop devices.
     * @param {String} networkId 
     * @param {String} deviceId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:api/SmApi~getNetworkSmDevicePerformanceHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSmDevicePerformanceHistory200ResponseInner>}
     */
    getNetworkSmDevicePerformanceHistory(networkId, deviceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSmDevicePerformanceHistory");
      }
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling getNetworkSmDevicePerformanceHistory");
      }

      let pathParams = {
        'networkId': networkId,
        'deviceId': deviceId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSmDevicePerformanceHistory200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/devices/{deviceId}/performanceHistory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSmDeviceRestrictions operation.
     * @callback module:api/SmApi~getNetworkSmDeviceRestrictionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the restrictions on a device
     * List the restrictions on a device
     * @param {String} networkId 
     * @param {String} deviceId 
     * @param {module:api/SmApi~getNetworkSmDeviceRestrictionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkSmDeviceRestrictions(networkId, deviceId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSmDeviceRestrictions");
      }
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling getNetworkSmDeviceRestrictions");
      }

      let pathParams = {
        'networkId': networkId,
        'deviceId': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/devices/{deviceId}/restrictions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSmDeviceSecurityCenters operation.
     * @callback module:api/SmApi~getNetworkSmDeviceSecurityCentersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSmDeviceSecurityCenters200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the security centers on a device
     * List the security centers on a device
     * @param {String} networkId 
     * @param {String} deviceId 
     * @param {module:api/SmApi~getNetworkSmDeviceSecurityCentersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSmDeviceSecurityCenters200ResponseInner>}
     */
    getNetworkSmDeviceSecurityCenters(networkId, deviceId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSmDeviceSecurityCenters");
      }
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling getNetworkSmDeviceSecurityCenters");
      }

      let pathParams = {
        'networkId': networkId,
        'deviceId': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSmDeviceSecurityCenters200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/devices/{deviceId}/securityCenters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSmDeviceSoftwares operation.
     * @callback module:api/SmApi~getNetworkSmDeviceSoftwaresCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSmDeviceSoftwares200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of softwares associated with a device
     * Get a list of softwares associated with a device
     * @param {String} networkId 
     * @param {String} deviceId 
     * @param {module:api/SmApi~getNetworkSmDeviceSoftwaresCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSmDeviceSoftwares200ResponseInner>}
     */
    getNetworkSmDeviceSoftwares(networkId, deviceId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSmDeviceSoftwares");
      }
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling getNetworkSmDeviceSoftwares");
      }

      let pathParams = {
        'networkId': networkId,
        'deviceId': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSmDeviceSoftwares200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/devices/{deviceId}/softwares', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSmDeviceWlanLists operation.
     * @callback module:api/SmApi~getNetworkSmDeviceWlanListsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSmDeviceWlanLists200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the saved SSID names on a device
     * List the saved SSID names on a device
     * @param {String} networkId 
     * @param {String} deviceId 
     * @param {module:api/SmApi~getNetworkSmDeviceWlanListsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSmDeviceWlanLists200ResponseInner>}
     */
    getNetworkSmDeviceWlanLists(networkId, deviceId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSmDeviceWlanLists");
      }
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling getNetworkSmDeviceWlanLists");
      }

      let pathParams = {
        'networkId': networkId,
        'deviceId': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSmDeviceWlanLists200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/devices/{deviceId}/wlanLists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSmDevices operation.
     * @callback module:api/SmApi~getNetworkSmDevicesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSmDevices200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the devices enrolled in an SM network with various specified fields and filters
     * List the devices enrolled in an SM network with various specified fields and filters
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [fields] Additional fields that will be displayed for each device.     The default fields are: id, name, tags, ssid, wifiMac, osName, systemModel, uuid, and serialNumber. The additional fields are: ip,     systemType, availableDeviceCapacity, kioskAppName, biosVersion, lastConnected, missingAppsCount, userSuppliedAddress, location, lastUser,     ownerEmail, ownerUsername, osBuild, publicIp, phoneNumber, diskInfoJson, deviceCapacity, isManaged, hadMdm, isSupervised, meid, imei, iccid,     simCarrierNetwork, cellularDataUsed, isHotspotEnabled, createdAt, batteryEstCharge, quarantined, avName, avRunning, asName, fwName,     isRooted, loginRequired, screenLockEnabled, screenLockDelay, autoLoginDisabled, autoTags, hasMdm, hasDesktopAgent, diskEncryptionEnabled,     hardwareEncryptionCaps, passCodeLock, usesHardwareKeystore, androidSecurityPatchVersion, and url.
     * @param {Array.<String>} [wifiMacs] Filter devices by wifi mac(s).
     * @param {Array.<String>} [serials] Filter devices by serial(s).
     * @param {Array.<String>} [ids] Filter devices by id(s).
     * @param {Array.<String>} [scope] Specify a scope (one of all, none, withAny, withAll, withoutAny, or withoutAll) and a set of tags.
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:api/SmApi~getNetworkSmDevicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSmDevices200ResponseInner>}
     */
    getNetworkSmDevices(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSmDevices");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),
        'wifiMacs': this.apiClient.buildCollectionParam(opts['wifiMacs'], 'csv'),
        'serials': this.apiClient.buildCollectionParam(opts['serials'], 'csv'),
        'ids': this.apiClient.buildCollectionParam(opts['ids'], 'csv'),
        'scope': this.apiClient.buildCollectionParam(opts['scope'], 'csv'),
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSmDevices200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/devices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSmProfiles operation.
     * @callback module:api/SmApi~getNetworkSmProfilesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSmProfiles200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all profiles in a network
     * List all profiles in a network
     * @param {String} networkId 
     * @param {module:api/SmApi~getNetworkSmProfilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSmProfiles200ResponseInner>}
     */
    getNetworkSmProfiles(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSmProfiles");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSmProfiles200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/profiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSmTargetGroup operation.
     * @callback module:api/SmApi~getNetworkSmTargetGroupCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a target group
     * Return a target group
     * @param {String} networkId 
     * @param {String} targetGroupId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [withDetails] Boolean indicating if the the ids of the devices or users scoped by the target group should be included in the response
     * @param {module:api/SmApi~getNetworkSmTargetGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkSmTargetGroup(networkId, targetGroupId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSmTargetGroup");
      }
      // verify the required parameter 'targetGroupId' is set
      if (targetGroupId === undefined || targetGroupId === null) {
        throw new Error("Missing the required parameter 'targetGroupId' when calling getNetworkSmTargetGroup");
      }

      let pathParams = {
        'networkId': networkId,
        'targetGroupId': targetGroupId
      };
      let queryParams = {
        'withDetails': opts['withDetails']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/targetGroups/{targetGroupId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSmTargetGroups operation.
     * @callback module:api/SmApi~getNetworkSmTargetGroupsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the target groups in this network
     * List the target groups in this network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [withDetails] Boolean indicating if the the ids of the devices or users scoped by the target group should be included in the response
     * @param {module:api/SmApi~getNetworkSmTargetGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkSmTargetGroups(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSmTargetGroups");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        'withDetails': opts['withDetails']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/targetGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSmTrustedAccessConfigs operation.
     * @callback module:api/SmApi~getNetworkSmTrustedAccessConfigsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSmTrustedAccessConfigs200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Trusted Access Configs
     * List Trusted Access Configs
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:api/SmApi~getNetworkSmTrustedAccessConfigsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSmTrustedAccessConfigs200ResponseInner>}
     */
    getNetworkSmTrustedAccessConfigs(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSmTrustedAccessConfigs");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSmTrustedAccessConfigs200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/trustedAccessConfigs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSmUserAccessDevices operation.
     * @callback module:api/SmApi~getNetworkSmUserAccessDevicesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSmUserAccessDevices200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List User Access Devices and its Trusted Access Connections
     * List User Access Devices and its Trusted Access Connections
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:api/SmApi~getNetworkSmUserAccessDevicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSmUserAccessDevices200ResponseInner>}
     */
    getNetworkSmUserAccessDevices(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSmUserAccessDevices");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSmUserAccessDevices200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/userAccessDevices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSmUserDeviceProfiles operation.
     * @callback module:api/SmApi~getNetworkSmUserDeviceProfilesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSmDeviceDeviceProfiles200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the profiles associated with a user
     * Get the profiles associated with a user
     * @param {String} networkId 
     * @param {String} userId 
     * @param {module:api/SmApi~getNetworkSmUserDeviceProfilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSmDeviceDeviceProfiles200ResponseInner>}
     */
    getNetworkSmUserDeviceProfiles(networkId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSmUserDeviceProfiles");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getNetworkSmUserDeviceProfiles");
      }

      let pathParams = {
        'networkId': networkId,
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSmDeviceDeviceProfiles200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/users/{userId}/deviceProfiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSmUserSoftwares operation.
     * @callback module:api/SmApi~getNetworkSmUserSoftwaresCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSmDeviceSoftwares200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of softwares associated with a user
     * Get a list of softwares associated with a user
     * @param {String} networkId 
     * @param {String} userId 
     * @param {module:api/SmApi~getNetworkSmUserSoftwaresCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSmDeviceSoftwares200ResponseInner>}
     */
    getNetworkSmUserSoftwares(networkId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSmUserSoftwares");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getNetworkSmUserSoftwares");
      }

      let pathParams = {
        'networkId': networkId,
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSmDeviceSoftwares200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/users/{userId}/softwares', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSmUsers operation.
     * @callback module:api/SmApi~getNetworkSmUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSmUsers200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the owners in an SM network with various specified fields and filters
     * List the owners in an SM network with various specified fields and filters
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [ids] Filter users by id(s).
     * @param {Array.<String>} [usernames] Filter users by username(s).
     * @param {Array.<String>} [emails] Filter users by email(s).
     * @param {Array.<String>} [scope] Specifiy a scope (one of all, none, withAny, withAll, withoutAny, withoutAll) and a set of tags.
     * @param {module:api/SmApi~getNetworkSmUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSmUsers200ResponseInner>}
     */
    getNetworkSmUsers(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSmUsers");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(opts['ids'], 'csv'),
        'usernames': this.apiClient.buildCollectionParam(opts['usernames'], 'csv'),
        'emails': this.apiClient.buildCollectionParam(opts['emails'], 'csv'),
        'scope': this.apiClient.buildCollectionParam(opts['scope'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSmUsers200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationSmApnsCert operation.
     * @callback module:api/SmApi~getOrganizationSmApnsCertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizationSmApnsCert200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the organization's APNS certificate
     * Get the organization's APNS certificate
     * @param {String} organizationId 
     * @param {module:api/SmApi~getOrganizationSmApnsCertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizationSmApnsCert200Response}
     */
    getOrganizationSmApnsCert(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationSmApnsCert");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOrganizationSmApnsCert200Response;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/sm/apnsCert', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationSmVppAccount operation.
     * @callback module:api/SmApi~getOrganizationSmVppAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizationSmVppAccounts200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a hash containing the unparsed token of the VPP account with the given ID
     * Get a hash containing the unparsed token of the VPP account with the given ID
     * @param {String} organizationId 
     * @param {String} vppAccountId 
     * @param {module:api/SmApi~getOrganizationSmVppAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizationSmVppAccounts200ResponseInner}
     */
    getOrganizationSmVppAccount(organizationId, vppAccountId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationSmVppAccount");
      }
      // verify the required parameter 'vppAccountId' is set
      if (vppAccountId === undefined || vppAccountId === null) {
        throw new Error("Missing the required parameter 'vppAccountId' when calling getOrganizationSmVppAccount");
      }

      let pathParams = {
        'organizationId': organizationId,
        'vppAccountId': vppAccountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOrganizationSmVppAccounts200ResponseInner;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/sm/vppAccounts/{vppAccountId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationSmVppAccounts operation.
     * @callback module:api/SmApi~getOrganizationSmVppAccountsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationSmVppAccounts200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the VPP accounts in the organization
     * List the VPP accounts in the organization
     * @param {String} organizationId 
     * @param {module:api/SmApi~getOrganizationSmVppAccountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationSmVppAccounts200ResponseInner>}
     */
    getOrganizationSmVppAccounts(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationSmVppAccounts");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationSmVppAccounts200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/sm/vppAccounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lockNetworkSmDevices operation.
     * @callback module:api/SmApi~lockNetworkSmDevicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckinNetworkSmDevices200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lock a set of devices
     * Lock a set of devices
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/LockNetworkSmDevicesRequest} [lockNetworkSmDevicesRequest] 
     * @param {module:api/SmApi~lockNetworkSmDevicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckinNetworkSmDevices200Response}
     */
    lockNetworkSmDevices(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['lockNetworkSmDevicesRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling lockNetworkSmDevices");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CheckinNetworkSmDevices200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/devices/lock', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modifyNetworkSmDevicesTags operation.
     * @callback module:api/SmApi~modifyNetworkSmDevicesTagsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModifyNetworkSmDevicesTags200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add, delete, or update the tags of a set of devices
     * Add, delete, or update the tags of a set of devices
     * @param {String} networkId 
     * @param {module:model/ModifyNetworkSmDevicesTagsRequest} modifyNetworkSmDevicesTagsRequest 
     * @param {module:api/SmApi~modifyNetworkSmDevicesTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModifyNetworkSmDevicesTags200ResponseInner>}
     */
    modifyNetworkSmDevicesTags(networkId, modifyNetworkSmDevicesTagsRequest, callback) {
      let postBody = modifyNetworkSmDevicesTagsRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling modifyNetworkSmDevicesTags");
      }
      // verify the required parameter 'modifyNetworkSmDevicesTagsRequest' is set
      if (modifyNetworkSmDevicesTagsRequest === undefined || modifyNetworkSmDevicesTagsRequest === null) {
        throw new Error("Missing the required parameter 'modifyNetworkSmDevicesTagsRequest' when calling modifyNetworkSmDevicesTags");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ModifyNetworkSmDevicesTags200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/devices/modifyTags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the moveNetworkSmDevices operation.
     * @callback module:api/SmApi~moveNetworkSmDevicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MoveNetworkSmDevices200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Move a set of devices to a new network
     * Move a set of devices to a new network
     * @param {String} networkId 
     * @param {module:model/MoveNetworkSmDevicesRequest} moveNetworkSmDevicesRequest 
     * @param {module:api/SmApi~moveNetworkSmDevicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MoveNetworkSmDevices200Response}
     */
    moveNetworkSmDevices(networkId, moveNetworkSmDevicesRequest, callback) {
      let postBody = moveNetworkSmDevicesRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling moveNetworkSmDevices");
      }
      // verify the required parameter 'moveNetworkSmDevicesRequest' is set
      if (moveNetworkSmDevicesRequest === undefined || moveNetworkSmDevicesRequest === null) {
        throw new Error("Missing the required parameter 'moveNetworkSmDevicesRequest' when calling moveNetworkSmDevices");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MoveNetworkSmDevices200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/devices/move', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the refreshNetworkSmDeviceDetails operation.
     * @callback module:api/SmApi~refreshNetworkSmDeviceDetailsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refresh the details of a device
     * Refresh the details of a device
     * @param {String} networkId 
     * @param {String} deviceId 
     * @param {module:api/SmApi~refreshNetworkSmDeviceDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    refreshNetworkSmDeviceDetails(networkId, deviceId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling refreshNetworkSmDeviceDetails");
      }
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling refreshNetworkSmDeviceDetails");
      }

      let pathParams = {
        'networkId': networkId,
        'deviceId': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/devices/{deviceId}/refreshDetails', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unenrollNetworkSmDevice operation.
     * @callback module:api/SmApi~unenrollNetworkSmDeviceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unenroll a device
     * Unenroll a device
     * @param {String} networkId 
     * @param {String} deviceId 
     * @param {module:api/SmApi~unenrollNetworkSmDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    unenrollNetworkSmDevice(networkId, deviceId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling unenrollNetworkSmDevice");
      }
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling unenrollNetworkSmDevice");
      }

      let pathParams = {
        'networkId': networkId,
        'deviceId': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/devices/{deviceId}/unenroll', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSmDevicesFields operation.
     * @callback module:api/SmApi~updateNetworkSmDevicesFieldsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UpdateNetworkSmDevicesFields200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify the fields of a device
     * Modify the fields of a device
     * @param {String} networkId 
     * @param {module:model/UpdateNetworkSmDevicesFieldsRequest} updateNetworkSmDevicesFieldsRequest 
     * @param {module:api/SmApi~updateNetworkSmDevicesFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UpdateNetworkSmDevicesFields200ResponseInner>}
     */
    updateNetworkSmDevicesFields(networkId, updateNetworkSmDevicesFieldsRequest, callback) {
      let postBody = updateNetworkSmDevicesFieldsRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSmDevicesFields");
      }
      // verify the required parameter 'updateNetworkSmDevicesFieldsRequest' is set
      if (updateNetworkSmDevicesFieldsRequest === undefined || updateNetworkSmDevicesFieldsRequest === null) {
        throw new Error("Missing the required parameter 'updateNetworkSmDevicesFieldsRequest' when calling updateNetworkSmDevicesFields");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [UpdateNetworkSmDevicesFields200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/devices/fields', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSmTargetGroup operation.
     * @callback module:api/SmApi~updateNetworkSmTargetGroupCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a target group
     * Update a target group
     * @param {String} networkId 
     * @param {String} targetGroupId 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateNetworkSmTargetGroupRequest} [createNetworkSmTargetGroupRequest] 
     * @param {module:api/SmApi~updateNetworkSmTargetGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkSmTargetGroup(networkId, targetGroupId, opts, callback) {
      opts = opts || {};
      let postBody = opts['createNetworkSmTargetGroupRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSmTargetGroup");
      }
      // verify the required parameter 'targetGroupId' is set
      if (targetGroupId === undefined || targetGroupId === null) {
        throw new Error("Missing the required parameter 'targetGroupId' when calling updateNetworkSmTargetGroup");
      }

      let pathParams = {
        'networkId': networkId,
        'targetGroupId': targetGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/targetGroups/{targetGroupId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the wipeNetworkSmDevices operation.
     * @callback module:api/SmApi~wipeNetworkSmDevicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WipeNetworkSmDevices200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Wipe a device
     * Wipe a device
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/WipeNetworkSmDevicesRequest} [wipeNetworkSmDevicesRequest] 
     * @param {module:api/SmApi~wipeNetworkSmDevicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WipeNetworkSmDevices200Response}
     */
    wipeNetworkSmDevices(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['wipeNetworkSmDevicesRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling wipeNetworkSmDevices");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WipeNetworkSmDevices200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/devices/wipe', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
