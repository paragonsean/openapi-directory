/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateNetworkSensorAlertsProfileRequest from '../model/CreateNetworkSensorAlertsProfileRequest';
import CreateOrganizationAlertsProfileRequest from '../model/CreateOrganizationAlertsProfileRequest';
import GetNetworkAlertsHistory200ResponseInner from '../model/GetNetworkAlertsHistory200ResponseInner';
import GetNetworkHealthAlerts200ResponseInner from '../model/GetNetworkHealthAlerts200ResponseInner';
import GetNetworkSensorAlertsCurrentOverviewByMetric200Response from '../model/GetNetworkSensorAlertsCurrentOverviewByMetric200Response';
import GetNetworkSensorAlertsOverviewByMetric200ResponseInner from '../model/GetNetworkSensorAlertsOverviewByMetric200ResponseInner';
import GetNetworkSensorAlertsProfiles200ResponseInner from '../model/GetNetworkSensorAlertsProfiles200ResponseInner';
import UpdateNetworkAlertsSettingsRequest from '../model/UpdateNetworkAlertsSettingsRequest';
import UpdateNetworkSensorAlertsProfileRequest from '../model/UpdateNetworkSensorAlertsProfileRequest';
import UpdateOrganizationAlertsProfileRequest from '../model/UpdateOrganizationAlertsProfileRequest';

/**
* Alerts service.
* @module api/AlertsApi
* @version 1.32.0
*/
export default class AlertsApi {

    /**
    * Constructs a new AlertsApi. 
    * @alias module:api/AlertsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createNetworkSensorAlertsProfile_1 operation.
     * @callback module:api/AlertsApi~createNetworkSensorAlertsProfile_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkSensorAlertsProfiles200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a sensor alert profile for a network.
     * Creates a sensor alert profile for a network.
     * @param {String} networkId 
     * @param {module:model/CreateNetworkSensorAlertsProfileRequest} createNetworkSensorAlertsProfileRequest 
     * @param {module:api/AlertsApi~createNetworkSensorAlertsProfile_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkSensorAlertsProfiles200ResponseInner}
     */
    createNetworkSensorAlertsProfile_1(networkId, createNetworkSensorAlertsProfileRequest, callback) {
      let postBody = createNetworkSensorAlertsProfileRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkSensorAlertsProfile_1");
      }
      // verify the required parameter 'createNetworkSensorAlertsProfileRequest' is set
      if (createNetworkSensorAlertsProfileRequest === undefined || createNetworkSensorAlertsProfileRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkSensorAlertsProfileRequest' when calling createNetworkSensorAlertsProfile_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkSensorAlertsProfiles200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/sensor/alerts/profiles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrganizationAlertsProfile_1 operation.
     * @callback module:api/AlertsApi~createOrganizationAlertsProfile_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an organization-wide alert configuration
     * Create an organization-wide alert configuration
     * @param {String} organizationId 
     * @param {module:model/CreateOrganizationAlertsProfileRequest} createOrganizationAlertsProfileRequest 
     * @param {module:api/AlertsApi~createOrganizationAlertsProfile_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createOrganizationAlertsProfile_1(organizationId, createOrganizationAlertsProfileRequest, callback) {
      let postBody = createOrganizationAlertsProfileRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createOrganizationAlertsProfile_1");
      }
      // verify the required parameter 'createOrganizationAlertsProfileRequest' is set
      if (createOrganizationAlertsProfileRequest === undefined || createOrganizationAlertsProfileRequest === null) {
        throw new Error("Missing the required parameter 'createOrganizationAlertsProfileRequest' when calling createOrganizationAlertsProfile_1");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/alerts/profiles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkSensorAlertsProfile_1 operation.
     * @callback module:api/AlertsApi~deleteNetworkSensorAlertsProfile_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a sensor alert profile from a network.
     * Deletes a sensor alert profile from a network.
     * @param {String} networkId 
     * @param {String} id 
     * @param {module:api/AlertsApi~deleteNetworkSensorAlertsProfile_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkSensorAlertsProfile_1(networkId, id, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkSensorAlertsProfile_1");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteNetworkSensorAlertsProfile_1");
      }

      let pathParams = {
        'networkId': networkId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/sensor/alerts/profiles/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganizationAlertsProfile_1 operation.
     * @callback module:api/AlertsApi~deleteOrganizationAlertsProfile_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes an organization-wide alert config
     * Removes an organization-wide alert config
     * @param {String} organizationId 
     * @param {String} alertConfigId 
     * @param {module:api/AlertsApi~deleteOrganizationAlertsProfile_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganizationAlertsProfile_1(organizationId, alertConfigId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteOrganizationAlertsProfile_1");
      }
      // verify the required parameter 'alertConfigId' is set
      if (alertConfigId === undefined || alertConfigId === null) {
        throw new Error("Missing the required parameter 'alertConfigId' when calling deleteOrganizationAlertsProfile_1");
      }

      let pathParams = {
        'organizationId': organizationId,
        'alertConfigId': alertConfigId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/alerts/profiles/{alertConfigId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkAlertsHistory_1 operation.
     * @callback module:api/AlertsApi~getNetworkAlertsHistory_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkAlertsHistory200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the alert history for this network
     * Return the alert history for this network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:api/AlertsApi~getNetworkAlertsHistory_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkAlertsHistory200ResponseInner>}
     */
    getNetworkAlertsHistory_1(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkAlertsHistory_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkAlertsHistory200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/alerts/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkAlertsSettings_1 operation.
     * @callback module:api/AlertsApi~getNetworkAlertsSettings_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the alert configuration for this network
     * Return the alert configuration for this network
     * @param {String} networkId 
     * @param {module:api/AlertsApi~getNetworkAlertsSettings_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkAlertsSettings_1(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkAlertsSettings_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/alerts/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkHealthAlerts_2 operation.
     * @callback module:api/AlertsApi~getNetworkHealthAlerts_2Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkHealthAlerts200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return all global alerts on this network
     * Return all global alerts on this network
     * @param {String} networkId 
     * @param {module:api/AlertsApi~getNetworkHealthAlerts_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkHealthAlerts200ResponseInner>}
     */
    getNetworkHealthAlerts_2(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkHealthAlerts_2");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkHealthAlerts200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/health/alerts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSensorAlertsCurrentOverviewByMetric_1 operation.
     * @callback module:api/AlertsApi~getNetworkSensorAlertsCurrentOverviewByMetric_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkSensorAlertsCurrentOverviewByMetric200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return an overview of currently alerting sensors by metric
     * Return an overview of currently alerting sensors by metric
     * @param {String} networkId 
     * @param {module:api/AlertsApi~getNetworkSensorAlertsCurrentOverviewByMetric_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkSensorAlertsCurrentOverviewByMetric200Response}
     */
    getNetworkSensorAlertsCurrentOverviewByMetric_1(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSensorAlertsCurrentOverviewByMetric_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkSensorAlertsCurrentOverviewByMetric200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/sensor/alerts/current/overview/byMetric', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSensorAlertsOverviewByMetric_1 operation.
     * @callback module:api/AlertsApi~getNetworkSensorAlertsOverviewByMetric_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSensorAlertsOverviewByMetric200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return an overview of alert occurrences over a timespan, by metric
     * Return an overview of alert occurrences over a timespan, by metric
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 365 days from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 7 days.
     * @param {Number} [interval] The time interval in seconds for returned data. The valid intervals are: 86400, 604800. The default is 604800.
     * @param {module:api/AlertsApi~getNetworkSensorAlertsOverviewByMetric_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSensorAlertsOverviewByMetric200ResponseInner>}
     */
    getNetworkSensorAlertsOverviewByMetric_1(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSensorAlertsOverviewByMetric_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan'],
        'interval': opts['interval']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSensorAlertsOverviewByMetric200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/sensor/alerts/overview/byMetric', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSensorAlertsProfile_1 operation.
     * @callback module:api/AlertsApi~getNetworkSensorAlertsProfile_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkSensorAlertsProfiles200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show details of a sensor alert profile for a network.
     * Show details of a sensor alert profile for a network.
     * @param {String} networkId 
     * @param {String} id 
     * @param {module:api/AlertsApi~getNetworkSensorAlertsProfile_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkSensorAlertsProfiles200ResponseInner}
     */
    getNetworkSensorAlertsProfile_1(networkId, id, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSensorAlertsProfile_1");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNetworkSensorAlertsProfile_1");
      }

      let pathParams = {
        'networkId': networkId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkSensorAlertsProfiles200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/sensor/alerts/profiles/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSensorAlertsProfiles_1 operation.
     * @callback module:api/AlertsApi~getNetworkSensorAlertsProfiles_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSensorAlertsProfiles200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all sensor alert profiles for a network.
     * Lists all sensor alert profiles for a network.
     * @param {String} networkId 
     * @param {module:api/AlertsApi~getNetworkSensorAlertsProfiles_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSensorAlertsProfiles200ResponseInner>}
     */
    getNetworkSensorAlertsProfiles_1(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSensorAlertsProfiles_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSensorAlertsProfiles200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/sensor/alerts/profiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationAlertsProfiles_1 operation.
     * @callback module:api/AlertsApi~getOrganizationAlertsProfiles_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all organization-wide alert configurations
     * List all organization-wide alert configurations
     * @param {String} organizationId 
     * @param {module:api/AlertsApi~getOrganizationAlertsProfiles_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getOrganizationAlertsProfiles_1(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationAlertsProfiles_1");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/alerts/profiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkAlertsSettings_1 operation.
     * @callback module:api/AlertsApi~updateNetworkAlertsSettings_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the alert configuration for this network
     * Update the alert configuration for this network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkAlertsSettingsRequest} [updateNetworkAlertsSettingsRequest] 
     * @param {module:api/AlertsApi~updateNetworkAlertsSettings_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkAlertsSettings_1(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkAlertsSettingsRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkAlertsSettings_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/alerts/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSensorAlertsProfile_1 operation.
     * @callback module:api/AlertsApi~updateNetworkSensorAlertsProfile_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkSensorAlertsProfiles200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a sensor alert profile for a network.
     * Updates a sensor alert profile for a network.
     * @param {String} networkId 
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkSensorAlertsProfileRequest} [updateNetworkSensorAlertsProfileRequest] 
     * @param {module:api/AlertsApi~updateNetworkSensorAlertsProfile_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkSensorAlertsProfiles200ResponseInner}
     */
    updateNetworkSensorAlertsProfile_1(networkId, id, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkSensorAlertsProfileRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSensorAlertsProfile_1");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateNetworkSensorAlertsProfile_1");
      }

      let pathParams = {
        'networkId': networkId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkSensorAlertsProfiles200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/sensor/alerts/profiles/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationAlertsProfile_1 operation.
     * @callback module:api/AlertsApi~updateOrganizationAlertsProfile_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an organization-wide alert config
     * Update an organization-wide alert config
     * @param {String} organizationId 
     * @param {String} alertConfigId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationAlertsProfileRequest} [updateOrganizationAlertsProfileRequest] 
     * @param {module:api/AlertsApi~updateOrganizationAlertsProfile_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateOrganizationAlertsProfile_1(organizationId, alertConfigId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateOrganizationAlertsProfileRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationAlertsProfile_1");
      }
      // verify the required parameter 'alertConfigId' is set
      if (alertConfigId === undefined || alertConfigId === null) {
        throw new Error("Missing the required parameter 'alertConfigId' when calling updateOrganizationAlertsProfile_1");
      }

      let pathParams = {
        'organizationId': organizationId,
        'alertConfigId': alertConfigId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/alerts/profiles/{alertConfigId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
