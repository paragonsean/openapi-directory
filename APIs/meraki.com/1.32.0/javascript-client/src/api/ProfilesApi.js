/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateNetworkSensorAlertsProfileRequest from '../model/CreateNetworkSensorAlertsProfileRequest';
import CreateOrganizationAlertsProfileRequest from '../model/CreateOrganizationAlertsProfileRequest';
import GetNetworkSensorAlertsProfiles200ResponseInner from '../model/GetNetworkSensorAlertsProfiles200ResponseInner';
import GetNetworkSmProfiles200ResponseInner from '../model/GetNetworkSmProfiles200ResponseInner';
import GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner from '../model/GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner';
import GetOrganizationConfigTemplateSwitchProfiles200Response from '../model/GetOrganizationConfigTemplateSwitchProfiles200Response';
import UpdateNetworkSensorAlertsProfileRequest from '../model/UpdateNetworkSensorAlertsProfileRequest';
import UpdateOrganizationAlertsProfileRequest from '../model/UpdateOrganizationAlertsProfileRequest';
import UpdateOrganizationConfigTemplateSwitchProfilePortRequest from '../model/UpdateOrganizationConfigTemplateSwitchProfilePortRequest';

/**
* Profiles service.
* @module api/ProfilesApi
* @version 1.32.0
*/
export default class ProfilesApi {

    /**
    * Constructs a new ProfilesApi. 
    * @alias module:api/ProfilesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createNetworkSensorAlertsProfile_2 operation.
     * @callback module:api/ProfilesApi~createNetworkSensorAlertsProfile_2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkSensorAlertsProfiles200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a sensor alert profile for a network.
     * Creates a sensor alert profile for a network.
     * @param {String} networkId 
     * @param {module:model/CreateNetworkSensorAlertsProfileRequest} createNetworkSensorAlertsProfileRequest 
     * @param {module:api/ProfilesApi~createNetworkSensorAlertsProfile_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkSensorAlertsProfiles200ResponseInner}
     */
    createNetworkSensorAlertsProfile_2(networkId, createNetworkSensorAlertsProfileRequest, callback) {
      let postBody = createNetworkSensorAlertsProfileRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkSensorAlertsProfile_2");
      }
      // verify the required parameter 'createNetworkSensorAlertsProfileRequest' is set
      if (createNetworkSensorAlertsProfileRequest === undefined || createNetworkSensorAlertsProfileRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkSensorAlertsProfileRequest' when calling createNetworkSensorAlertsProfile_2");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkSensorAlertsProfiles200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/sensor/alerts/profiles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrganizationAlertsProfile_2 operation.
     * @callback module:api/ProfilesApi~createOrganizationAlertsProfile_2Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an organization-wide alert configuration
     * Create an organization-wide alert configuration
     * @param {String} organizationId 
     * @param {module:model/CreateOrganizationAlertsProfileRequest} createOrganizationAlertsProfileRequest 
     * @param {module:api/ProfilesApi~createOrganizationAlertsProfile_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createOrganizationAlertsProfile_2(organizationId, createOrganizationAlertsProfileRequest, callback) {
      let postBody = createOrganizationAlertsProfileRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createOrganizationAlertsProfile_2");
      }
      // verify the required parameter 'createOrganizationAlertsProfileRequest' is set
      if (createOrganizationAlertsProfileRequest === undefined || createOrganizationAlertsProfileRequest === null) {
        throw new Error("Missing the required parameter 'createOrganizationAlertsProfileRequest' when calling createOrganizationAlertsProfile_2");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/alerts/profiles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkSensorAlertsProfile_2 operation.
     * @callback module:api/ProfilesApi~deleteNetworkSensorAlertsProfile_2Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a sensor alert profile from a network.
     * Deletes a sensor alert profile from a network.
     * @param {String} networkId 
     * @param {String} id 
     * @param {module:api/ProfilesApi~deleteNetworkSensorAlertsProfile_2Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkSensorAlertsProfile_2(networkId, id, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkSensorAlertsProfile_2");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteNetworkSensorAlertsProfile_2");
      }

      let pathParams = {
        'networkId': networkId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/sensor/alerts/profiles/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganizationAlertsProfile_2 operation.
     * @callback module:api/ProfilesApi~deleteOrganizationAlertsProfile_2Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes an organization-wide alert config
     * Removes an organization-wide alert config
     * @param {String} organizationId 
     * @param {String} alertConfigId 
     * @param {module:api/ProfilesApi~deleteOrganizationAlertsProfile_2Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganizationAlertsProfile_2(organizationId, alertConfigId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteOrganizationAlertsProfile_2");
      }
      // verify the required parameter 'alertConfigId' is set
      if (alertConfigId === undefined || alertConfigId === null) {
        throw new Error("Missing the required parameter 'alertConfigId' when calling deleteOrganizationAlertsProfile_2");
      }

      let pathParams = {
        'organizationId': organizationId,
        'alertConfigId': alertConfigId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/alerts/profiles/{alertConfigId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSensorAlertsProfile_2 operation.
     * @callback module:api/ProfilesApi~getNetworkSensorAlertsProfile_2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkSensorAlertsProfiles200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show details of a sensor alert profile for a network.
     * Show details of a sensor alert profile for a network.
     * @param {String} networkId 
     * @param {String} id 
     * @param {module:api/ProfilesApi~getNetworkSensorAlertsProfile_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkSensorAlertsProfiles200ResponseInner}
     */
    getNetworkSensorAlertsProfile_2(networkId, id, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSensorAlertsProfile_2");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNetworkSensorAlertsProfile_2");
      }

      let pathParams = {
        'networkId': networkId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkSensorAlertsProfiles200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/sensor/alerts/profiles/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSensorAlertsProfiles_2 operation.
     * @callback module:api/ProfilesApi~getNetworkSensorAlertsProfiles_2Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSensorAlertsProfiles200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all sensor alert profiles for a network.
     * Lists all sensor alert profiles for a network.
     * @param {String} networkId 
     * @param {module:api/ProfilesApi~getNetworkSensorAlertsProfiles_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSensorAlertsProfiles200ResponseInner>}
     */
    getNetworkSensorAlertsProfiles_2(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSensorAlertsProfiles_2");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSensorAlertsProfiles200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/sensor/alerts/profiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSmProfiles_1 operation.
     * @callback module:api/ProfilesApi~getNetworkSmProfiles_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSmProfiles200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all profiles in a network
     * List all profiles in a network
     * @param {String} networkId 
     * @param {module:api/ProfilesApi~getNetworkSmProfiles_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSmProfiles200ResponseInner>}
     */
    getNetworkSmProfiles_1(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSmProfiles_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSmProfiles200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/profiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationAlertsProfiles_2 operation.
     * @callback module:api/ProfilesApi~getOrganizationAlertsProfiles_2Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all organization-wide alert configurations
     * List all organization-wide alert configurations
     * @param {String} organizationId 
     * @param {module:api/ProfilesApi~getOrganizationAlertsProfiles_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getOrganizationAlertsProfiles_2(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationAlertsProfiles_2");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/alerts/profiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationConfigTemplateSwitchProfilePort_2 operation.
     * @callback module:api/ProfilesApi~getOrganizationConfigTemplateSwitchProfilePort_2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a switch profile port
     * Return a switch profile port
     * @param {String} organizationId 
     * @param {String} configTemplateId 
     * @param {String} profileId 
     * @param {String} portId 
     * @param {module:api/ProfilesApi~getOrganizationConfigTemplateSwitchProfilePort_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner}
     */
    getOrganizationConfigTemplateSwitchProfilePort_2(organizationId, configTemplateId, profileId, portId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationConfigTemplateSwitchProfilePort_2");
      }
      // verify the required parameter 'configTemplateId' is set
      if (configTemplateId === undefined || configTemplateId === null) {
        throw new Error("Missing the required parameter 'configTemplateId' when calling getOrganizationConfigTemplateSwitchProfilePort_2");
      }
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling getOrganizationConfigTemplateSwitchProfilePort_2");
      }
      // verify the required parameter 'portId' is set
      if (portId === undefined || portId === null) {
        throw new Error("Missing the required parameter 'portId' when calling getOrganizationConfigTemplateSwitchProfilePort_2");
      }

      let pathParams = {
        'organizationId': organizationId,
        'configTemplateId': configTemplateId,
        'profileId': profileId,
        'portId': portId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/configTemplates/{configTemplateId}/switch/profiles/{profileId}/ports/{portId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationConfigTemplateSwitchProfilePorts_2 operation.
     * @callback module:api/ProfilesApi~getOrganizationConfigTemplateSwitchProfilePorts_2Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return all the ports of a switch profile
     * Return all the ports of a switch profile
     * @param {String} organizationId 
     * @param {String} configTemplateId 
     * @param {String} profileId 
     * @param {module:api/ProfilesApi~getOrganizationConfigTemplateSwitchProfilePorts_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner>}
     */
    getOrganizationConfigTemplateSwitchProfilePorts_2(organizationId, configTemplateId, profileId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationConfigTemplateSwitchProfilePorts_2");
      }
      // verify the required parameter 'configTemplateId' is set
      if (configTemplateId === undefined || configTemplateId === null) {
        throw new Error("Missing the required parameter 'configTemplateId' when calling getOrganizationConfigTemplateSwitchProfilePorts_2");
      }
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling getOrganizationConfigTemplateSwitchProfilePorts_2");
      }

      let pathParams = {
        'organizationId': organizationId,
        'configTemplateId': configTemplateId,
        'profileId': profileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/configTemplates/{configTemplateId}/switch/profiles/{profileId}/ports', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationConfigTemplateSwitchProfiles_2 operation.
     * @callback module:api/ProfilesApi~getOrganizationConfigTemplateSwitchProfiles_2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizationConfigTemplateSwitchProfiles200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the switch profiles for your switch template configuration
     * List the switch profiles for your switch template configuration
     * @param {String} organizationId 
     * @param {String} configTemplateId 
     * @param {module:api/ProfilesApi~getOrganizationConfigTemplateSwitchProfiles_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizationConfigTemplateSwitchProfiles200Response}
     */
    getOrganizationConfigTemplateSwitchProfiles_2(organizationId, configTemplateId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationConfigTemplateSwitchProfiles_2");
      }
      // verify the required parameter 'configTemplateId' is set
      if (configTemplateId === undefined || configTemplateId === null) {
        throw new Error("Missing the required parameter 'configTemplateId' when calling getOrganizationConfigTemplateSwitchProfiles_2");
      }

      let pathParams = {
        'organizationId': organizationId,
        'configTemplateId': configTemplateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOrganizationConfigTemplateSwitchProfiles200Response;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/configTemplates/{configTemplateId}/switch/profiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSensorAlertsProfile_2 operation.
     * @callback module:api/ProfilesApi~updateNetworkSensorAlertsProfile_2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkSensorAlertsProfiles200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a sensor alert profile for a network.
     * Updates a sensor alert profile for a network.
     * @param {String} networkId 
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkSensorAlertsProfileRequest} [updateNetworkSensorAlertsProfileRequest] 
     * @param {module:api/ProfilesApi~updateNetworkSensorAlertsProfile_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkSensorAlertsProfiles200ResponseInner}
     */
    updateNetworkSensorAlertsProfile_2(networkId, id, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkSensorAlertsProfileRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSensorAlertsProfile_2");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateNetworkSensorAlertsProfile_2");
      }

      let pathParams = {
        'networkId': networkId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkSensorAlertsProfiles200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/sensor/alerts/profiles/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationAlertsProfile_2 operation.
     * @callback module:api/ProfilesApi~updateOrganizationAlertsProfile_2Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an organization-wide alert config
     * Update an organization-wide alert config
     * @param {String} organizationId 
     * @param {String} alertConfigId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationAlertsProfileRequest} [updateOrganizationAlertsProfileRequest] 
     * @param {module:api/ProfilesApi~updateOrganizationAlertsProfile_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateOrganizationAlertsProfile_2(organizationId, alertConfigId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateOrganizationAlertsProfileRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationAlertsProfile_2");
      }
      // verify the required parameter 'alertConfigId' is set
      if (alertConfigId === undefined || alertConfigId === null) {
        throw new Error("Missing the required parameter 'alertConfigId' when calling updateOrganizationAlertsProfile_2");
      }

      let pathParams = {
        'organizationId': organizationId,
        'alertConfigId': alertConfigId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/alerts/profiles/{alertConfigId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationConfigTemplateSwitchProfilePort_2 operation.
     * @callback module:api/ProfilesApi~updateOrganizationConfigTemplateSwitchProfilePort_2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a switch profile port
     * Update a switch profile port
     * @param {String} organizationId 
     * @param {String} configTemplateId 
     * @param {String} profileId 
     * @param {String} portId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationConfigTemplateSwitchProfilePortRequest} [updateOrganizationConfigTemplateSwitchProfilePortRequest] 
     * @param {module:api/ProfilesApi~updateOrganizationConfigTemplateSwitchProfilePort_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner}
     */
    updateOrganizationConfigTemplateSwitchProfilePort_2(organizationId, configTemplateId, profileId, portId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateOrganizationConfigTemplateSwitchProfilePortRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationConfigTemplateSwitchProfilePort_2");
      }
      // verify the required parameter 'configTemplateId' is set
      if (configTemplateId === undefined || configTemplateId === null) {
        throw new Error("Missing the required parameter 'configTemplateId' when calling updateOrganizationConfigTemplateSwitchProfilePort_2");
      }
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling updateOrganizationConfigTemplateSwitchProfilePort_2");
      }
      // verify the required parameter 'portId' is set
      if (portId === undefined || portId === null) {
        throw new Error("Missing the required parameter 'portId' when calling updateOrganizationConfigTemplateSwitchProfilePort_2");
      }

      let pathParams = {
        'organizationId': organizationId,
        'configTemplateId': configTemplateId,
        'profileId': profileId,
        'portId': portId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/configTemplates/{configTemplateId}/switch/profiles/{profileId}/ports/{portId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
