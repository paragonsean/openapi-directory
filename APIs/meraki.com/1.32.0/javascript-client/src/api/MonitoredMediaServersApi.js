/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateOrganizationInsightMonitoredMediaServerRequest from '../model/CreateOrganizationInsightMonitoredMediaServerRequest';
import GetOrganizationInsightMonitoredMediaServers200ResponseInner from '../model/GetOrganizationInsightMonitoredMediaServers200ResponseInner';
import UpdateOrganizationInsightMonitoredMediaServerRequest from '../model/UpdateOrganizationInsightMonitoredMediaServerRequest';

/**
* MonitoredMediaServers service.
* @module api/MonitoredMediaServersApi
* @version 1.32.0
*/
export default class MonitoredMediaServersApi {

    /**
    * Constructs a new MonitoredMediaServersApi. 
    * @alias module:api/MonitoredMediaServersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createOrganizationInsightMonitoredMediaServer_1 operation.
     * @callback module:api/MonitoredMediaServersApi~createOrganizationInsightMonitoredMediaServer_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a media server to be monitored for this organization
     * Add a media server to be monitored for this organization. Only valid for organizations with Meraki Insight.
     * @param {String} organizationId 
     * @param {module:model/CreateOrganizationInsightMonitoredMediaServerRequest} createOrganizationInsightMonitoredMediaServerRequest 
     * @param {module:api/MonitoredMediaServersApi~createOrganizationInsightMonitoredMediaServer_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createOrganizationInsightMonitoredMediaServer_1(organizationId, createOrganizationInsightMonitoredMediaServerRequest, callback) {
      let postBody = createOrganizationInsightMonitoredMediaServerRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createOrganizationInsightMonitoredMediaServer_1");
      }
      // verify the required parameter 'createOrganizationInsightMonitoredMediaServerRequest' is set
      if (createOrganizationInsightMonitoredMediaServerRequest === undefined || createOrganizationInsightMonitoredMediaServerRequest === null) {
        throw new Error("Missing the required parameter 'createOrganizationInsightMonitoredMediaServerRequest' when calling createOrganizationInsightMonitoredMediaServer_1");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/insight/monitoredMediaServers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganizationInsightMonitoredMediaServer_1 operation.
     * @callback module:api/MonitoredMediaServersApi~deleteOrganizationInsightMonitoredMediaServer_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a monitored media server from this organization
     * Delete a monitored media server from this organization. Only valid for organizations with Meraki Insight.
     * @param {String} organizationId 
     * @param {String} monitoredMediaServerId 
     * @param {module:api/MonitoredMediaServersApi~deleteOrganizationInsightMonitoredMediaServer_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganizationInsightMonitoredMediaServer_1(organizationId, monitoredMediaServerId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteOrganizationInsightMonitoredMediaServer_1");
      }
      // verify the required parameter 'monitoredMediaServerId' is set
      if (monitoredMediaServerId === undefined || monitoredMediaServerId === null) {
        throw new Error("Missing the required parameter 'monitoredMediaServerId' when calling deleteOrganizationInsightMonitoredMediaServer_1");
      }

      let pathParams = {
        'organizationId': organizationId,
        'monitoredMediaServerId': monitoredMediaServerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/insight/monitoredMediaServers/{monitoredMediaServerId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationInsightMonitoredMediaServer_1 operation.
     * @callback module:api/MonitoredMediaServersApi~getOrganizationInsightMonitoredMediaServer_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a monitored media server for this organization
     * Return a monitored media server for this organization. Only valid for organizations with Meraki Insight.
     * @param {String} organizationId 
     * @param {String} monitoredMediaServerId 
     * @param {module:api/MonitoredMediaServersApi~getOrganizationInsightMonitoredMediaServer_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getOrganizationInsightMonitoredMediaServer_1(organizationId, monitoredMediaServerId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationInsightMonitoredMediaServer_1");
      }
      // verify the required parameter 'monitoredMediaServerId' is set
      if (monitoredMediaServerId === undefined || monitoredMediaServerId === null) {
        throw new Error("Missing the required parameter 'monitoredMediaServerId' when calling getOrganizationInsightMonitoredMediaServer_1");
      }

      let pathParams = {
        'organizationId': organizationId,
        'monitoredMediaServerId': monitoredMediaServerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/insight/monitoredMediaServers/{monitoredMediaServerId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationInsightMonitoredMediaServers_1 operation.
     * @callback module:api/MonitoredMediaServersApi~getOrganizationInsightMonitoredMediaServers_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationInsightMonitoredMediaServers200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the monitored media servers for this organization
     * List the monitored media servers for this organization. Only valid for organizations with Meraki Insight.
     * @param {String} organizationId 
     * @param {module:api/MonitoredMediaServersApi~getOrganizationInsightMonitoredMediaServers_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationInsightMonitoredMediaServers200ResponseInner>}
     */
    getOrganizationInsightMonitoredMediaServers_1(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationInsightMonitoredMediaServers_1");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationInsightMonitoredMediaServers200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/insight/monitoredMediaServers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationInsightMonitoredMediaServer_1 operation.
     * @callback module:api/MonitoredMediaServersApi~updateOrganizationInsightMonitoredMediaServer_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a monitored media server for this organization
     * Update a monitored media server for this organization. Only valid for organizations with Meraki Insight.
     * @param {String} organizationId 
     * @param {String} monitoredMediaServerId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationInsightMonitoredMediaServerRequest} [updateOrganizationInsightMonitoredMediaServerRequest] 
     * @param {module:api/MonitoredMediaServersApi~updateOrganizationInsightMonitoredMediaServer_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateOrganizationInsightMonitoredMediaServer_1(organizationId, monitoredMediaServerId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateOrganizationInsightMonitoredMediaServerRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationInsightMonitoredMediaServer_1");
      }
      // verify the required parameter 'monitoredMediaServerId' is set
      if (monitoredMediaServerId === undefined || monitoredMediaServerId === null) {
        throw new Error("Missing the required parameter 'monitoredMediaServerId' when calling updateOrganizationInsightMonitoredMediaServer_1");
      }

      let pathParams = {
        'organizationId': organizationId,
        'monitoredMediaServerId': monitoredMediaServerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/insight/monitoredMediaServers/{monitoredMediaServerId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
