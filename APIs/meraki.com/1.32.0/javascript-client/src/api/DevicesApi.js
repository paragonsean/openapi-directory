/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BlinkDeviceLedsRequest from '../model/BlinkDeviceLedsRequest';
import CheckinNetworkSmDevices200Response from '../model/CheckinNetworkSmDevices200Response';
import CheckinNetworkSmDevicesRequest from '../model/CheckinNetworkSmDevicesRequest';
import ClaimNetworkDevicesRequest from '../model/ClaimNetworkDevicesRequest';
import CloneOrganizationSwitchDevicesRequest from '../model/CloneOrganizationSwitchDevicesRequest';
import CreateDeviceLiveToolsPing201Response from '../model/CreateDeviceLiveToolsPing201Response';
import CreateDeviceLiveToolsPingDeviceRequest from '../model/CreateDeviceLiveToolsPingDeviceRequest';
import CreateDeviceLiveToolsPingRequest from '../model/CreateDeviceLiveToolsPingRequest';
import GetDeviceLiveToolsPing200Response from '../model/GetDeviceLiveToolsPing200Response';
import GetDeviceWirelessConnectionStats200Response from '../model/GetDeviceWirelessConnectionStats200Response';
import GetNetworkSmDeviceCellularUsageHistory200ResponseInner from '../model/GetNetworkSmDeviceCellularUsageHistory200ResponseInner';
import GetNetworkSmDeviceCerts200ResponseInner from '../model/GetNetworkSmDeviceCerts200ResponseInner';
import GetNetworkSmDeviceConnectivity200ResponseInner from '../model/GetNetworkSmDeviceConnectivity200ResponseInner';
import GetNetworkSmDeviceDesktopLogs200ResponseInner from '../model/GetNetworkSmDeviceDesktopLogs200ResponseInner';
import GetNetworkSmDeviceDeviceCommandLogs200ResponseInner from '../model/GetNetworkSmDeviceDeviceCommandLogs200ResponseInner';
import GetNetworkSmDeviceDeviceProfiles200ResponseInner from '../model/GetNetworkSmDeviceDeviceProfiles200ResponseInner';
import GetNetworkSmDeviceNetworkAdapters200ResponseInner from '../model/GetNetworkSmDeviceNetworkAdapters200ResponseInner';
import GetNetworkSmDevicePerformanceHistory200ResponseInner from '../model/GetNetworkSmDevicePerformanceHistory200ResponseInner';
import GetNetworkSmDeviceSecurityCenters200ResponseInner from '../model/GetNetworkSmDeviceSecurityCenters200ResponseInner';
import GetNetworkSmDeviceSoftwares200ResponseInner from '../model/GetNetworkSmDeviceSoftwares200ResponseInner';
import GetNetworkSmDeviceWlanLists200ResponseInner from '../model/GetNetworkSmDeviceWlanLists200ResponseInner';
import GetNetworkSmDevices200ResponseInner from '../model/GetNetworkSmDevices200ResponseInner';
import GetOrganizationDevices200ResponseInner from '../model/GetOrganizationDevices200ResponseInner';
import GetOrganizationDevicesAvailabilities200ResponseInner from '../model/GetOrganizationDevicesAvailabilities200ResponseInner';
import GetOrganizationDevicesPowerModulesStatusesByDevice200ResponseInner from '../model/GetOrganizationDevicesPowerModulesStatusesByDevice200ResponseInner';
import GetOrganizationDevicesStatuses200Response from '../model/GetOrganizationDevicesStatuses200Response';
import GetOrganizationDevicesStatusesOverview200Response from '../model/GetOrganizationDevicesStatusesOverview200Response';
import GetOrganizationDevicesUplinksAddressesByDevice200ResponseInner from '../model/GetOrganizationDevicesUplinksAddressesByDevice200ResponseInner';
import GetOrganizationDevicesUplinksLossAndLatency200ResponseInner from '../model/GetOrganizationDevicesUplinksLossAndLatency200ResponseInner';
import GetOrganizationInventoryDevices200ResponseInner from '../model/GetOrganizationInventoryDevices200ResponseInner';
import GetOrganizationSummaryTopDevicesByUsage200ResponseInner from '../model/GetOrganizationSummaryTopDevicesByUsage200ResponseInner';
import GetOrganizationSummaryTopDevicesModelsByUsage200ResponseInner from '../model/GetOrganizationSummaryTopDevicesModelsByUsage200ResponseInner';
import GetOrganizationWirelessDevicesEthernetStatuses200ResponseInner from '../model/GetOrganizationWirelessDevicesEthernetStatuses200ResponseInner';
import LockNetworkSmDevicesRequest from '../model/LockNetworkSmDevicesRequest';
import ModifyNetworkSmDevicesTags200ResponseInner from '../model/ModifyNetworkSmDevicesTags200ResponseInner';
import ModifyNetworkSmDevicesTagsRequest from '../model/ModifyNetworkSmDevicesTagsRequest';
import MoveNetworkSmDevices200Response from '../model/MoveNetworkSmDevices200Response';
import MoveNetworkSmDevicesRequest from '../model/MoveNetworkSmDevicesRequest';
import RemoveNetworkDevicesRequest from '../model/RemoveNetworkDevicesRequest';
import UpdateDeviceCellularSimsRequest from '../model/UpdateDeviceCellularSimsRequest';
import UpdateDeviceManagementInterfaceRequest from '../model/UpdateDeviceManagementInterfaceRequest';
import UpdateDeviceRequest from '../model/UpdateDeviceRequest';
import UpdateNetworkSmDevicesFields200ResponseInner from '../model/UpdateNetworkSmDevicesFields200ResponseInner';
import UpdateNetworkSmDevicesFieldsRequest from '../model/UpdateNetworkSmDevicesFieldsRequest';
import VmxNetworkDevicesClaimRequest from '../model/VmxNetworkDevicesClaimRequest';
import WipeNetworkSmDevices200Response from '../model/WipeNetworkSmDevices200Response';
import WipeNetworkSmDevicesRequest from '../model/WipeNetworkSmDevicesRequest';

/**
* Devices service.
* @module api/DevicesApi
* @version 1.32.0
*/
export default class DevicesApi {

    /**
    * Constructs a new DevicesApi. 
    * @alias module:api/DevicesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the blinkDeviceLeds operation.
     * @callback module:api/DevicesApi~blinkDeviceLedsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Blink the LEDs on a device
     * Blink the LEDs on a device
     * @param {String} serial 
     * @param {Object} opts Optional parameters
     * @param {module:model/BlinkDeviceLedsRequest} [blinkDeviceLedsRequest] 
     * @param {module:api/DevicesApi~blinkDeviceLedsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    blinkDeviceLeds(serial, opts, callback) {
      opts = opts || {};
      let postBody = opts['blinkDeviceLedsRequest'];
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling blinkDeviceLeds");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/blinkLeds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the checkinNetworkSmDevices_1 operation.
     * @callback module:api/DevicesApi~checkinNetworkSmDevices_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckinNetworkSmDevices200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Force check-in a set of devices
     * Force check-in a set of devices
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/CheckinNetworkSmDevicesRequest} [checkinNetworkSmDevicesRequest] 
     * @param {module:api/DevicesApi~checkinNetworkSmDevices_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckinNetworkSmDevices200Response}
     */
    checkinNetworkSmDevices_1(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['checkinNetworkSmDevicesRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling checkinNetworkSmDevices_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CheckinNetworkSmDevices200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/devices/checkin', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the claimNetworkDevices_1 operation.
     * @callback module:api/DevicesApi~claimNetworkDevices_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Claim devices into a network. (Note: for recently claimed devices, it may take a few minutes for API requsts against that device to succeed)
     * Claim devices into a network. (Note: for recently claimed devices, it may take a few minutes for API requsts against that device to succeed)
     * @param {String} networkId 
     * @param {module:model/ClaimNetworkDevicesRequest} claimNetworkDevicesRequest 
     * @param {module:api/DevicesApi~claimNetworkDevices_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    claimNetworkDevices_1(networkId, claimNetworkDevicesRequest, callback) {
      let postBody = claimNetworkDevicesRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling claimNetworkDevices_1");
      }
      // verify the required parameter 'claimNetworkDevicesRequest' is set
      if (claimNetworkDevicesRequest === undefined || claimNetworkDevicesRequest === null) {
        throw new Error("Missing the required parameter 'claimNetworkDevicesRequest' when calling claimNetworkDevices_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/devices/claim', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloneOrganizationSwitchDevices_1 operation.
     * @callback module:api/DevicesApi~cloneOrganizationSwitchDevices_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clone port-level and some switch-level configuration settings from a source switch to one or more target switches
     * Clone port-level and some switch-level configuration settings from a source switch to one or more target switches. Cloned settings include: Aggregation Groups, Power Settings, Multicast Settings, MTU Configuration, STP Bridge priority, Port Mirroring
     * @param {String} organizationId 
     * @param {module:model/CloneOrganizationSwitchDevicesRequest} cloneOrganizationSwitchDevicesRequest 
     * @param {module:api/DevicesApi~cloneOrganizationSwitchDevices_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    cloneOrganizationSwitchDevices_1(organizationId, cloneOrganizationSwitchDevicesRequest, callback) {
      let postBody = cloneOrganizationSwitchDevicesRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling cloneOrganizationSwitchDevices_1");
      }
      // verify the required parameter 'cloneOrganizationSwitchDevicesRequest' is set
      if (cloneOrganizationSwitchDevicesRequest === undefined || cloneOrganizationSwitchDevicesRequest === null) {
        throw new Error("Missing the required parameter 'cloneOrganizationSwitchDevicesRequest' when calling cloneOrganizationSwitchDevices_1");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/switch/devices/clone', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDeviceLiveToolsPing operation.
     * @callback module:api/DevicesApi~createDeviceLiveToolsPingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDeviceLiveToolsPing201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enqueue a job to ping a target host from the device
     * Enqueue a job to ping a target host from the device
     * @param {String} serial 
     * @param {module:model/CreateDeviceLiveToolsPingRequest} createDeviceLiveToolsPingRequest 
     * @param {module:api/DevicesApi~createDeviceLiveToolsPingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDeviceLiveToolsPing201Response}
     */
    createDeviceLiveToolsPing(serial, createDeviceLiveToolsPingRequest, callback) {
      let postBody = createDeviceLiveToolsPingRequest;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling createDeviceLiveToolsPing");
      }
      // verify the required parameter 'createDeviceLiveToolsPingRequest' is set
      if (createDeviceLiveToolsPingRequest === undefined || createDeviceLiveToolsPingRequest === null) {
        throw new Error("Missing the required parameter 'createDeviceLiveToolsPingRequest' when calling createDeviceLiveToolsPing");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateDeviceLiveToolsPing201Response;
      return this.apiClient.callApi(
        '/devices/{serial}/liveTools/ping', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDeviceLiveToolsPingDevice operation.
     * @callback module:api/DevicesApi~createDeviceLiveToolsPingDeviceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDeviceLiveToolsPing201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enqueue a job to check connectivity status to the device
     * Enqueue a job to check connectivity status to the device
     * @param {String} serial 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateDeviceLiveToolsPingDeviceRequest} [createDeviceLiveToolsPingDeviceRequest] 
     * @param {module:api/DevicesApi~createDeviceLiveToolsPingDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDeviceLiveToolsPing201Response}
     */
    createDeviceLiveToolsPingDevice(serial, opts, callback) {
      opts = opts || {};
      let postBody = opts['createDeviceLiveToolsPingDeviceRequest'];
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling createDeviceLiveToolsPingDevice");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateDeviceLiveToolsPing201Response;
      return this.apiClient.callApi(
        '/devices/{serial}/liveTools/pingDevice', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDevice operation.
     * @callback module:api/DevicesApi~getDeviceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a single device
     * Return a single device
     * @param {String} serial 
     * @param {module:api/DevicesApi~getDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getDevice(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDevice");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceCellularSims operation.
     * @callback module:api/DevicesApi~getDeviceCellularSimsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the SIM and APN configurations for a cellular device.
     * Return the SIM and APN configurations for a cellular device.
     * @param {String} serial 
     * @param {module:api/DevicesApi~getDeviceCellularSimsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getDeviceCellularSims(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceCellularSims");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/cellular/sims', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceClients operation.
     * @callback module:api/DevicesApi~getDeviceClientsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the clients of a device, up to a maximum of a month ago
     * List the clients of a device, up to a maximum of a month ago. The usage of each client is returned in kilobytes. If the device is a switch, the switchport is returned; otherwise the switchport field is null.
     * @param {String} serial 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
     * @param {module:api/DevicesApi~getDeviceClientsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getDeviceClients(serial, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceClients");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
        't0': opts['t0'],
        'timespan': opts['timespan']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/devices/{serial}/clients', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceLiveToolsPing operation.
     * @callback module:api/DevicesApi~getDeviceLiveToolsPingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDeviceLiveToolsPing200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a ping job
     * Return a ping job. Latency unit in response is in milliseconds. Size is in bytes.
     * @param {String} serial 
     * @param {String} id 
     * @param {module:api/DevicesApi~getDeviceLiveToolsPingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDeviceLiveToolsPing200Response}
     */
    getDeviceLiveToolsPing(serial, id, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceLiveToolsPing");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDeviceLiveToolsPing");
      }

      let pathParams = {
        'serial': serial,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDeviceLiveToolsPing200Response;
      return this.apiClient.callApi(
        '/devices/{serial}/liveTools/ping/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceLiveToolsPingDevice operation.
     * @callback module:api/DevicesApi~getDeviceLiveToolsPingDeviceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDeviceLiveToolsPing200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a ping device job
     * Return a ping device job. Latency unit in response is in milliseconds. Size is in bytes.
     * @param {String} serial 
     * @param {String} id 
     * @param {module:api/DevicesApi~getDeviceLiveToolsPingDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDeviceLiveToolsPing200Response}
     */
    getDeviceLiveToolsPingDevice(serial, id, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceLiveToolsPingDevice");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDeviceLiveToolsPingDevice");
      }

      let pathParams = {
        'serial': serial,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDeviceLiveToolsPing200Response;
      return this.apiClient.callApi(
        '/devices/{serial}/liveTools/pingDevice/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceLldpCdp operation.
     * @callback module:api/DevicesApi~getDeviceLldpCdpCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List LLDP and CDP information for a device
     * List LLDP and CDP information for a device
     * @param {String} serial 
     * @param {module:api/DevicesApi~getDeviceLldpCdpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getDeviceLldpCdp(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceLldpCdp");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/lldpCdp', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceLossAndLatencyHistory operation.
     * @callback module:api/DevicesApi~getDeviceLossAndLatencyHistoryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the uplink loss percentage and latency in milliseconds, and goodput in kilobits per second for a wired network device.
     * Get the uplink loss percentage and latency in milliseconds, and goodput in kilobits per second for a wired network device.
     * @param {String} serial 
     * @param {String} ip The destination IP used to obtain the requested stats. This is required.
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 60 days from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
     * @param {Number} [resolution] The time resolution in seconds for returned data. The valid resolutions are: 60, 600, 3600, 86400. The default is 60.
     * @param {module:model/String} [uplink] The WAN uplink used to obtain the requested stats. Valid uplinks are wan1, wan2, cellular. The default is wan1.
     * @param {module:api/DevicesApi~getDeviceLossAndLatencyHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getDeviceLossAndLatencyHistory(serial, ip, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceLossAndLatencyHistory");
      }
      // verify the required parameter 'ip' is set
      if (ip === undefined || ip === null) {
        throw new Error("Missing the required parameter 'ip' when calling getDeviceLossAndLatencyHistory");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan'],
        'resolution': opts['resolution'],
        'uplink': opts['uplink'],
        'ip': ip
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/devices/{serial}/lossAndLatencyHistory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceManagementInterface operation.
     * @callback module:api/DevicesApi~getDeviceManagementInterfaceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the management interface settings for a device
     * Return the management interface settings for a device
     * @param {String} serial 
     * @param {module:api/DevicesApi~getDeviceManagementInterfaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getDeviceManagementInterface(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceManagementInterface");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/managementInterface', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkDevices_1 operation.
     * @callback module:api/DevicesApi~getNetworkDevices_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the devices in a network
     * List the devices in a network
     * @param {String} networkId 
     * @param {module:api/DevicesApi~getNetworkDevices_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkDevices_1(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkDevices_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/devices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSmDeviceCellularUsageHistory_1 operation.
     * @callback module:api/DevicesApi~getNetworkSmDeviceCellularUsageHistory_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSmDeviceCellularUsageHistory200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the client's daily cellular data usage history
     * Return the client's daily cellular data usage history. Usage data is in kilobytes.
     * @param {String} networkId 
     * @param {String} deviceId 
     * @param {module:api/DevicesApi~getNetworkSmDeviceCellularUsageHistory_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSmDeviceCellularUsageHistory200ResponseInner>}
     */
    getNetworkSmDeviceCellularUsageHistory_1(networkId, deviceId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSmDeviceCellularUsageHistory_1");
      }
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling getNetworkSmDeviceCellularUsageHistory_1");
      }

      let pathParams = {
        'networkId': networkId,
        'deviceId': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSmDeviceCellularUsageHistory200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/devices/{deviceId}/cellularUsageHistory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSmDeviceCerts_1 operation.
     * @callback module:api/DevicesApi~getNetworkSmDeviceCerts_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSmDeviceCerts200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the certs on a device
     * List the certs on a device
     * @param {String} networkId 
     * @param {String} deviceId 
     * @param {module:api/DevicesApi~getNetworkSmDeviceCerts_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSmDeviceCerts200ResponseInner>}
     */
    getNetworkSmDeviceCerts_1(networkId, deviceId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSmDeviceCerts_1");
      }
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling getNetworkSmDeviceCerts_1");
      }

      let pathParams = {
        'networkId': networkId,
        'deviceId': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSmDeviceCerts200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/devices/{deviceId}/certs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSmDeviceConnectivity_1 operation.
     * @callback module:api/DevicesApi~getNetworkSmDeviceConnectivity_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSmDeviceConnectivity200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns historical connectivity data (whether a device is regularly checking in to Dashboard).
     * Returns historical connectivity data (whether a device is regularly checking in to Dashboard).
     * @param {String} networkId 
     * @param {String} deviceId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:api/DevicesApi~getNetworkSmDeviceConnectivity_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSmDeviceConnectivity200ResponseInner>}
     */
    getNetworkSmDeviceConnectivity_1(networkId, deviceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSmDeviceConnectivity_1");
      }
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling getNetworkSmDeviceConnectivity_1");
      }

      let pathParams = {
        'networkId': networkId,
        'deviceId': deviceId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSmDeviceConnectivity200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/devices/{deviceId}/connectivity', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSmDeviceDesktopLogs_1 operation.
     * @callback module:api/DevicesApi~getNetworkSmDeviceDesktopLogs_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSmDeviceDesktopLogs200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return historical records of various Systems Manager network connection details for desktop devices.
     * Return historical records of various Systems Manager network connection details for desktop devices.
     * @param {String} networkId 
     * @param {String} deviceId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:api/DevicesApi~getNetworkSmDeviceDesktopLogs_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSmDeviceDesktopLogs200ResponseInner>}
     */
    getNetworkSmDeviceDesktopLogs_1(networkId, deviceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSmDeviceDesktopLogs_1");
      }
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling getNetworkSmDeviceDesktopLogs_1");
      }

      let pathParams = {
        'networkId': networkId,
        'deviceId': deviceId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSmDeviceDesktopLogs200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/devices/{deviceId}/desktopLogs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSmDeviceDeviceCommandLogs_1 operation.
     * @callback module:api/DevicesApi~getNetworkSmDeviceDeviceCommandLogs_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSmDeviceDeviceCommandLogs200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return historical records of commands sent to Systems Manager devices
     * Return historical records of commands sent to Systems Manager devices. Note that this will include the name of the Dashboard user who initiated the command if it was generated by a Dashboard admin rather than the automatic behavior of the system; you may wish to filter this out of any reports.
     * @param {String} networkId 
     * @param {String} deviceId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:api/DevicesApi~getNetworkSmDeviceDeviceCommandLogs_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSmDeviceDeviceCommandLogs200ResponseInner>}
     */
    getNetworkSmDeviceDeviceCommandLogs_1(networkId, deviceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSmDeviceDeviceCommandLogs_1");
      }
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling getNetworkSmDeviceDeviceCommandLogs_1");
      }

      let pathParams = {
        'networkId': networkId,
        'deviceId': deviceId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSmDeviceDeviceCommandLogs200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/devices/{deviceId}/deviceCommandLogs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSmDeviceDeviceProfiles_1 operation.
     * @callback module:api/DevicesApi~getNetworkSmDeviceDeviceProfiles_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSmDeviceDeviceProfiles200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the installed profiles associated with a device
     * Get the installed profiles associated with a device
     * @param {String} networkId 
     * @param {String} deviceId 
     * @param {module:api/DevicesApi~getNetworkSmDeviceDeviceProfiles_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSmDeviceDeviceProfiles200ResponseInner>}
     */
    getNetworkSmDeviceDeviceProfiles_1(networkId, deviceId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSmDeviceDeviceProfiles_1");
      }
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling getNetworkSmDeviceDeviceProfiles_1");
      }

      let pathParams = {
        'networkId': networkId,
        'deviceId': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSmDeviceDeviceProfiles200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/devices/{deviceId}/deviceProfiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSmDeviceNetworkAdapters_1 operation.
     * @callback module:api/DevicesApi~getNetworkSmDeviceNetworkAdapters_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSmDeviceNetworkAdapters200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the network adapters of a device
     * List the network adapters of a device
     * @param {String} networkId 
     * @param {String} deviceId 
     * @param {module:api/DevicesApi~getNetworkSmDeviceNetworkAdapters_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSmDeviceNetworkAdapters200ResponseInner>}
     */
    getNetworkSmDeviceNetworkAdapters_1(networkId, deviceId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSmDeviceNetworkAdapters_1");
      }
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling getNetworkSmDeviceNetworkAdapters_1");
      }

      let pathParams = {
        'networkId': networkId,
        'deviceId': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSmDeviceNetworkAdapters200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/devices/{deviceId}/networkAdapters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSmDevicePerformanceHistory_1 operation.
     * @callback module:api/DevicesApi~getNetworkSmDevicePerformanceHistory_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSmDevicePerformanceHistory200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return historical records of various Systems Manager client metrics for desktop devices.
     * Return historical records of various Systems Manager client metrics for desktop devices.
     * @param {String} networkId 
     * @param {String} deviceId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:api/DevicesApi~getNetworkSmDevicePerformanceHistory_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSmDevicePerformanceHistory200ResponseInner>}
     */
    getNetworkSmDevicePerformanceHistory_1(networkId, deviceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSmDevicePerformanceHistory_1");
      }
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling getNetworkSmDevicePerformanceHistory_1");
      }

      let pathParams = {
        'networkId': networkId,
        'deviceId': deviceId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSmDevicePerformanceHistory200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/devices/{deviceId}/performanceHistory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSmDeviceRestrictions_1 operation.
     * @callback module:api/DevicesApi~getNetworkSmDeviceRestrictions_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the restrictions on a device
     * List the restrictions on a device
     * @param {String} networkId 
     * @param {String} deviceId 
     * @param {module:api/DevicesApi~getNetworkSmDeviceRestrictions_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkSmDeviceRestrictions_1(networkId, deviceId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSmDeviceRestrictions_1");
      }
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling getNetworkSmDeviceRestrictions_1");
      }

      let pathParams = {
        'networkId': networkId,
        'deviceId': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/devices/{deviceId}/restrictions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSmDeviceSecurityCenters_1 operation.
     * @callback module:api/DevicesApi~getNetworkSmDeviceSecurityCenters_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSmDeviceSecurityCenters200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the security centers on a device
     * List the security centers on a device
     * @param {String} networkId 
     * @param {String} deviceId 
     * @param {module:api/DevicesApi~getNetworkSmDeviceSecurityCenters_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSmDeviceSecurityCenters200ResponseInner>}
     */
    getNetworkSmDeviceSecurityCenters_1(networkId, deviceId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSmDeviceSecurityCenters_1");
      }
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling getNetworkSmDeviceSecurityCenters_1");
      }

      let pathParams = {
        'networkId': networkId,
        'deviceId': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSmDeviceSecurityCenters200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/devices/{deviceId}/securityCenters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSmDeviceSoftwares_1 operation.
     * @callback module:api/DevicesApi~getNetworkSmDeviceSoftwares_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSmDeviceSoftwares200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of softwares associated with a device
     * Get a list of softwares associated with a device
     * @param {String} networkId 
     * @param {String} deviceId 
     * @param {module:api/DevicesApi~getNetworkSmDeviceSoftwares_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSmDeviceSoftwares200ResponseInner>}
     */
    getNetworkSmDeviceSoftwares_1(networkId, deviceId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSmDeviceSoftwares_1");
      }
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling getNetworkSmDeviceSoftwares_1");
      }

      let pathParams = {
        'networkId': networkId,
        'deviceId': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSmDeviceSoftwares200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/devices/{deviceId}/softwares', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSmDeviceWlanLists_1 operation.
     * @callback module:api/DevicesApi~getNetworkSmDeviceWlanLists_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSmDeviceWlanLists200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the saved SSID names on a device
     * List the saved SSID names on a device
     * @param {String} networkId 
     * @param {String} deviceId 
     * @param {module:api/DevicesApi~getNetworkSmDeviceWlanLists_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSmDeviceWlanLists200ResponseInner>}
     */
    getNetworkSmDeviceWlanLists_1(networkId, deviceId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSmDeviceWlanLists_1");
      }
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling getNetworkSmDeviceWlanLists_1");
      }

      let pathParams = {
        'networkId': networkId,
        'deviceId': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSmDeviceWlanLists200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/devices/{deviceId}/wlanLists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSmDevices_1 operation.
     * @callback module:api/DevicesApi~getNetworkSmDevices_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSmDevices200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the devices enrolled in an SM network with various specified fields and filters
     * List the devices enrolled in an SM network with various specified fields and filters
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [fields] Additional fields that will be displayed for each device.     The default fields are: id, name, tags, ssid, wifiMac, osName, systemModel, uuid, and serialNumber. The additional fields are: ip,     systemType, availableDeviceCapacity, kioskAppName, biosVersion, lastConnected, missingAppsCount, userSuppliedAddress, location, lastUser,     ownerEmail, ownerUsername, osBuild, publicIp, phoneNumber, diskInfoJson, deviceCapacity, isManaged, hadMdm, isSupervised, meid, imei, iccid,     simCarrierNetwork, cellularDataUsed, isHotspotEnabled, createdAt, batteryEstCharge, quarantined, avName, avRunning, asName, fwName,     isRooted, loginRequired, screenLockEnabled, screenLockDelay, autoLoginDisabled, autoTags, hasMdm, hasDesktopAgent, diskEncryptionEnabled,     hardwareEncryptionCaps, passCodeLock, usesHardwareKeystore, androidSecurityPatchVersion, and url.
     * @param {Array.<String>} [wifiMacs] Filter devices by wifi mac(s).
     * @param {Array.<String>} [serials] Filter devices by serial(s).
     * @param {Array.<String>} [ids] Filter devices by id(s).
     * @param {Array.<String>} [scope] Specify a scope (one of all, none, withAny, withAll, withoutAny, or withoutAll) and a set of tags.
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:api/DevicesApi~getNetworkSmDevices_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSmDevices200ResponseInner>}
     */
    getNetworkSmDevices_1(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSmDevices_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),
        'wifiMacs': this.apiClient.buildCollectionParam(opts['wifiMacs'], 'csv'),
        'serials': this.apiClient.buildCollectionParam(opts['serials'], 'csv'),
        'ids': this.apiClient.buildCollectionParam(opts['ids'], 'csv'),
        'scope': this.apiClient.buildCollectionParam(opts['scope'], 'csv'),
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSmDevices200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/devices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessDevicesConnectionStats_1 operation.
     * @callback module:api/DevicesApi~getNetworkWirelessDevicesConnectionStats_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetDeviceWirelessConnectionStats200Response>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Aggregated connectivity info for this network, grouped by node
     * Aggregated connectivity info for this network, grouped by node
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 180 days from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 7 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days.
     * @param {module:model/String} [band] Filter results by band (either '2.4', '5' or '6'). Note that data prior to February 2020 will not have band information.
     * @param {Number} [ssid] Filter results by SSID
     * @param {Number} [vlan] Filter results by VLAN
     * @param {String} [apTag] Filter results by AP Tag
     * @param {module:api/DevicesApi~getNetworkWirelessDevicesConnectionStats_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetDeviceWirelessConnectionStats200Response>}
     */
    getNetworkWirelessDevicesConnectionStats_1(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessDevicesConnectionStats_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan'],
        'band': opts['band'],
        'ssid': opts['ssid'],
        'vlan': opts['vlan'],
        'apTag': opts['apTag']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetDeviceWirelessConnectionStats200Response];
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/devices/connectionStats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessDevicesLatencyStats_1 operation.
     * @callback module:api/DevicesApi~getNetworkWirelessDevicesLatencyStats_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Aggregated latency info for this network, grouped by node
     * Aggregated latency info for this network, grouped by node
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 180 days from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 7 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days.
     * @param {module:model/String} [band] Filter results by band (either '2.4', '5' or '6'). Note that data prior to February 2020 will not have band information.
     * @param {Number} [ssid] Filter results by SSID
     * @param {Number} [vlan] Filter results by VLAN
     * @param {String} [apTag] Filter results by AP Tag
     * @param {String} [fields] Partial selection: If present, this call will return only the selected fields of [\"rawDistribution\", \"avg\"]. All fields will be returned by default. Selected fields must be entered as a comma separated string.
     * @param {module:api/DevicesApi~getNetworkWirelessDevicesLatencyStats_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkWirelessDevicesLatencyStats_1(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessDevicesLatencyStats_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan'],
        'band': opts['band'],
        'ssid': opts['ssid'],
        'vlan': opts['vlan'],
        'apTag': opts['apTag'],
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/devices/latencyStats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationDevicesAvailabilities_1 operation.
     * @callback module:api/DevicesApi~getOrganizationDevicesAvailabilities_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationDevicesAvailabilities200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the availability information for devices in an organization
     * List the availability information for devices in an organization. The data returned by this endpoint is updated every 5 minutes.
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {Array.<String>} [networkIds] Optional parameter to filter device availabilities by network ID. This filter uses multiple exact matches.
     * @param {Array.<String>} [productTypes] Optional parameter to filter device availabilities by device product types. This filter uses multiple exact matches.
     * @param {Array.<String>} [serials] Optional parameter to filter device availabilities by device serial numbers. This filter uses multiple exact matches.
     * @param {Array.<String>} [tags] An optional parameter to filter devices by tags. The filtering is case-sensitive. If tags are included, 'tagsFilterType' should also be included (see below). This filter uses multiple exact matches.
     * @param {module:model/String} [tagsFilterType] An optional parameter of value 'withAnyTags' or 'withAllTags' to indicate whether to return devices which contain ANY or ALL of the included tags. If no type is included, 'withAnyTags' will be selected.
     * @param {module:api/DevicesApi~getOrganizationDevicesAvailabilities_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationDevicesAvailabilities200ResponseInner>}
     */
    getOrganizationDevicesAvailabilities_1(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationDevicesAvailabilities_1");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        'networkIds': this.apiClient.buildCollectionParam(opts['networkIds'], 'csv'),
        'productTypes': this.apiClient.buildCollectionParam(opts['productTypes'], 'csv'),
        'serials': this.apiClient.buildCollectionParam(opts['serials'], 'csv'),
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'csv'),
        'tagsFilterType': opts['tagsFilterType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationDevicesAvailabilities200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/devices/availabilities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationDevicesPowerModulesStatusesByDevice_1 operation.
     * @callback module:api/DevicesApi~getOrganizationDevicesPowerModulesStatusesByDevice_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationDevicesPowerModulesStatusesByDevice200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the power status information for devices in an organization
     * List the power status information for devices in an organization. The data returned by this endpoint is updated every 5 minutes.
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {Array.<String>} [networkIds] Optional parameter to filter device availabilities by network ID. This filter uses multiple exact matches.
     * @param {Array.<String>} [productTypes] Optional parameter to filter device availabilities by device product types. This filter uses multiple exact matches.
     * @param {Array.<String>} [serials] Optional parameter to filter device availabilities by device serial numbers. This filter uses multiple exact matches.
     * @param {Array.<String>} [tags] An optional parameter to filter devices by tags. The filtering is case-sensitive. If tags are included, 'tagsFilterType' should also be included (see below). This filter uses multiple exact matches.
     * @param {module:model/String} [tagsFilterType] An optional parameter of value 'withAnyTags' or 'withAllTags' to indicate whether to return devices which contain ANY or ALL of the included tags. If no type is included, 'withAnyTags' will be selected.
     * @param {module:api/DevicesApi~getOrganizationDevicesPowerModulesStatusesByDevice_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationDevicesPowerModulesStatusesByDevice200ResponseInner>}
     */
    getOrganizationDevicesPowerModulesStatusesByDevice_1(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationDevicesPowerModulesStatusesByDevice_1");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        'networkIds': this.apiClient.buildCollectionParam(opts['networkIds'], 'csv'),
        'productTypes': this.apiClient.buildCollectionParam(opts['productTypes'], 'csv'),
        'serials': this.apiClient.buildCollectionParam(opts['serials'], 'csv'),
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'csv'),
        'tagsFilterType': opts['tagsFilterType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationDevicesPowerModulesStatusesByDevice200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/devices/powerModules/statuses/byDevice', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationDevicesStatusesOverview_1 operation.
     * @callback module:api/DevicesApi~getOrganizationDevicesStatusesOverview_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizationDevicesStatusesOverview200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return an overview of current device statuses
     * Return an overview of current device statuses
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [productTypes] An optional parameter to filter device statuses by product type. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, and sensor.
     * @param {Array.<String>} [networkIds] An optional parameter to filter device statuses by network.
     * @param {module:api/DevicesApi~getOrganizationDevicesStatusesOverview_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizationDevicesStatusesOverview200Response}
     */
    getOrganizationDevicesStatusesOverview_1(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationDevicesStatusesOverview_1");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'productTypes': this.apiClient.buildCollectionParam(opts['productTypes'], 'csv'),
        'networkIds': this.apiClient.buildCollectionParam(opts['networkIds'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOrganizationDevicesStatusesOverview200Response;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/devices/statuses/overview', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationDevicesStatuses_1 operation.
     * @callback module:api/DevicesApi~getOrganizationDevicesStatuses_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizationDevicesStatuses200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the status of every Meraki device in the organization
     * List the status of every Meraki device in the organization
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {Array.<String>} [networkIds] Optional parameter to filter devices by network ids.
     * @param {Array.<String>} [serials] Optional parameter to filter devices by serials.
     * @param {Array.<module:model/String>} [statuses] Optional parameter to filter devices by statuses. Valid statuses are [\"online\", \"alerting\", \"offline\", \"dormant\"].
     * @param {Array.<module:model/String>} [productTypes] An optional parameter to filter device statuses by product type. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, and sensor.
     * @param {Array.<String>} [models] Optional parameter to filter devices by models.
     * @param {Array.<String>} [tags] An optional parameter to filter devices by tags. The filtering is case-sensitive. If tags are included, 'tagsFilterType' should also be included (see below).
     * @param {module:model/String} [tagsFilterType] An optional parameter of value 'withAnyTags' or 'withAllTags' to indicate whether to return devices which contain ANY or ALL of the included tags. If no type is included, 'withAnyTags' will be selected.
     * @param {module:api/DevicesApi~getOrganizationDevicesStatuses_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizationDevicesStatuses200Response}
     */
    getOrganizationDevicesStatuses_1(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationDevicesStatuses_1");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        'networkIds': this.apiClient.buildCollectionParam(opts['networkIds'], 'csv'),
        'serials': this.apiClient.buildCollectionParam(opts['serials'], 'csv'),
        'statuses': this.apiClient.buildCollectionParam(opts['statuses'], 'csv'),
        'productTypes': this.apiClient.buildCollectionParam(opts['productTypes'], 'csv'),
        'models': this.apiClient.buildCollectionParam(opts['models'], 'csv'),
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'csv'),
        'tagsFilterType': opts['tagsFilterType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOrganizationDevicesStatuses200Response;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/devices/statuses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationDevicesUplinksAddressesByDevice_1 operation.
     * @callback module:api/DevicesApi~getOrganizationDevicesUplinksAddressesByDevice_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationDevicesUplinksAddressesByDevice200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the current uplink addresses for devices in an organization.
     * List the current uplink addresses for devices in an organization.
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {Array.<String>} [networkIds] Optional parameter to filter device uplinks by network ID. This filter uses multiple exact matches.
     * @param {Array.<String>} [productTypes] Optional parameter to filter device uplinks by device product types. This filter uses multiple exact matches.
     * @param {Array.<String>} [serials] Optional parameter to filter device availabilities by device serial numbers. This filter uses multiple exact matches.
     * @param {Array.<String>} [tags] An optional parameter to filter devices by tags. The filtering is case-sensitive. If tags are included, 'tagsFilterType' should also be included (see below). This filter uses multiple exact matches.
     * @param {module:model/String} [tagsFilterType] An optional parameter of value 'withAnyTags' or 'withAllTags' to indicate whether to return devices which contain ANY or ALL of the included tags. If no type is included, 'withAnyTags' will be selected.
     * @param {module:api/DevicesApi~getOrganizationDevicesUplinksAddressesByDevice_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationDevicesUplinksAddressesByDevice200ResponseInner>}
     */
    getOrganizationDevicesUplinksAddressesByDevice_1(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationDevicesUplinksAddressesByDevice_1");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        'networkIds': this.apiClient.buildCollectionParam(opts['networkIds'], 'csv'),
        'productTypes': this.apiClient.buildCollectionParam(opts['productTypes'], 'csv'),
        'serials': this.apiClient.buildCollectionParam(opts['serials'], 'csv'),
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'csv'),
        'tagsFilterType': opts['tagsFilterType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationDevicesUplinksAddressesByDevice200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/devices/uplinks/addresses/byDevice', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationDevicesUplinksLossAndLatency_1 operation.
     * @callback module:api/DevicesApi~getOrganizationDevicesUplinksLossAndLatency_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationDevicesUplinksLossAndLatency200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the uplink loss and latency for every MX in the organization from at latest 2 minutes ago
     * Return the uplink loss and latency for every MX in the organization from at latest 2 minutes ago
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 60 days from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 5 minutes after t0. The latest possible time that t1 can be is 2 minutes into the past.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 5 minutes. The default is 5 minutes.
     * @param {module:model/String} [uplink] Optional filter for a specific WAN uplink. Valid uplinks are wan1, wan2, cellular. Default will return all uplinks.
     * @param {String} [ip] Optional filter for a specific destination IP. Default will return all destination IPs.
     * @param {module:api/DevicesApi~getOrganizationDevicesUplinksLossAndLatency_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationDevicesUplinksLossAndLatency200ResponseInner>}
     */
    getOrganizationDevicesUplinksLossAndLatency_1(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationDevicesUplinksLossAndLatency_1");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan'],
        'uplink': opts['uplink'],
        'ip': opts['ip']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationDevicesUplinksLossAndLatency200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/devices/uplinksLossAndLatency', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationDevices_1 operation.
     * @callback module:api/DevicesApi~getOrganizationDevices_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationDevices200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the devices in an organization
     * List the devices in an organization
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [configurationUpdatedAfter] Filter results by whether or not the device's configuration has been updated after the given timestamp
     * @param {Array.<String>} [networkIds] Optional parameter to filter devices by network.
     * @param {Array.<module:model/String>} [productTypes] Optional parameter to filter devices by product type. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, and sensor.
     * @param {Array.<String>} [tags] Optional parameter to filter devices by tags.
     * @param {module:model/String} [tagsFilterType] Optional parameter of value 'withAnyTags' or 'withAllTags' to indicate whether to return networks which contain ANY or ALL of the included tags. If no type is included, 'withAnyTags' will be selected.
     * @param {String} [name] Optional parameter to filter devices by name. All returned devices will have a name that contains the search term or is an exact match.
     * @param {String} [mac] Optional parameter to filter devices by MAC address. All returned devices will have a MAC address that contains the search term or is an exact match.
     * @param {String} [serial] Optional parameter to filter devices by serial number. All returned devices will have a serial number that contains the search term or is an exact match.
     * @param {String} [model] Optional parameter to filter devices by model. All returned devices will have a model that contains the search term or is an exact match.
     * @param {Array.<String>} [macs] Optional parameter to filter devices by one or more MAC addresses. All returned devices will have a MAC address that is an exact match.
     * @param {Array.<String>} [serials] Optional parameter to filter devices by one or more serial numbers. All returned devices will have a serial number that is an exact match.
     * @param {Array.<String>} [sensorMetrics] Optional parameter to filter devices by the metrics that they provide. Only applies to sensor devices.
     * @param {Array.<String>} [sensorAlertProfileIds] Optional parameter to filter devices by the alert profiles that are bound to them. Only applies to sensor devices.
     * @param {Array.<String>} [models] Optional parameter to filter devices by one or more models. All returned devices will have a model that is an exact match.
     * @param {module:api/DevicesApi~getOrganizationDevices_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationDevices200ResponseInner>}
     */
    getOrganizationDevices_1(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationDevices_1");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        'configurationUpdatedAfter': opts['configurationUpdatedAfter'],
        'networkIds': this.apiClient.buildCollectionParam(opts['networkIds'], 'csv'),
        'productTypes': this.apiClient.buildCollectionParam(opts['productTypes'], 'csv'),
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'csv'),
        'tagsFilterType': opts['tagsFilterType'],
        'name': opts['name'],
        'mac': opts['mac'],
        'serial': opts['serial'],
        'model': opts['model'],
        'macs': this.apiClient.buildCollectionParam(opts['macs'], 'csv'),
        'serials': this.apiClient.buildCollectionParam(opts['serials'], 'csv'),
        'sensorMetrics': this.apiClient.buildCollectionParam(opts['sensorMetrics'], 'csv'),
        'sensorAlertProfileIds': this.apiClient.buildCollectionParam(opts['sensorAlertProfileIds'], 'csv'),
        'models': this.apiClient.buildCollectionParam(opts['models'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationDevices200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/devices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationInventoryDevice_2 operation.
     * @callback module:api/DevicesApi~getOrganizationInventoryDevice_2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizationInventoryDevices200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a single device from the inventory of an organization
     * Return a single device from the inventory of an organization
     * @param {String} organizationId 
     * @param {String} serial 
     * @param {module:api/DevicesApi~getOrganizationInventoryDevice_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizationInventoryDevices200ResponseInner}
     */
    getOrganizationInventoryDevice_2(organizationId, serial, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationInventoryDevice_2");
      }
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getOrganizationInventoryDevice_2");
      }

      let pathParams = {
        'organizationId': organizationId,
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOrganizationInventoryDevices200ResponseInner;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/inventory/devices/{serial}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationInventoryDevices_2 operation.
     * @callback module:api/DevicesApi~getOrganizationInventoryDevices_2Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationInventoryDevices200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the device inventory for an organization
     * Return the device inventory for an organization
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:model/String} [usedState] Filter results by used or unused inventory. Accepted values are 'used' or 'unused'.
     * @param {String} [search] Search for devices in inventory based on serial number, mac address, or model.
     * @param {Array.<String>} [macs] Search for devices in inventory based on mac addresses.
     * @param {Array.<String>} [networkIds] Search for devices in inventory based on network ids.
     * @param {Array.<String>} [serials] Search for devices in inventory based on serials.
     * @param {Array.<String>} [models] Search for devices in inventory based on model.
     * @param {Array.<String>} [orderNumbers] Search for devices in inventory based on order numbers.
     * @param {Array.<String>} [tags] Filter devices by tags. The filtering is case-sensitive. If tags are included, 'tagsFilterType' should also be included (see below).
     * @param {module:model/String} [tagsFilterType] To use with 'tags' parameter, to filter devices which contain ANY or ALL given tags. Accepted values are 'withAnyTags' or 'withAllTags', default is 'withAnyTags'.
     * @param {Array.<module:model/String>} [productTypes] Filter devices by product type. Accepted values are appliance, camera, cellularGateway, sensor, switch, systemsManager, and wireless.
     * @param {module:api/DevicesApi~getOrganizationInventoryDevices_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationInventoryDevices200ResponseInner>}
     */
    getOrganizationInventoryDevices_2(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationInventoryDevices_2");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        'usedState': opts['usedState'],
        'search': opts['search'],
        'macs': this.apiClient.buildCollectionParam(opts['macs'], 'csv'),
        'networkIds': this.apiClient.buildCollectionParam(opts['networkIds'], 'csv'),
        'serials': this.apiClient.buildCollectionParam(opts['serials'], 'csv'),
        'models': this.apiClient.buildCollectionParam(opts['models'], 'csv'),
        'orderNumbers': this.apiClient.buildCollectionParam(opts['orderNumbers'], 'csv'),
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'csv'),
        'tagsFilterType': opts['tagsFilterType'],
        'productTypes': this.apiClient.buildCollectionParam(opts['productTypes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationInventoryDevices200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/inventory/devices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationSummaryTopDevicesByUsage_3 operation.
     * @callback module:api/DevicesApi~getOrganizationSummaryTopDevicesByUsage_3Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationSummaryTopDevicesByUsage200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return metrics for organization's top 10 devices sorted by data usage over given time range
     * Return metrics for organization's top 10 devices sorted by data usage over given time range. Default unit is megabytes.
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
     * @param {module:api/DevicesApi~getOrganizationSummaryTopDevicesByUsage_3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationSummaryTopDevicesByUsage200ResponseInner>}
     */
    getOrganizationSummaryTopDevicesByUsage_3(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationSummaryTopDevicesByUsage_3");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationSummaryTopDevicesByUsage200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/summary/top/devices/byUsage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationSummaryTopDevicesModelsByUsage_3 operation.
     * @callback module:api/DevicesApi~getOrganizationSummaryTopDevicesModelsByUsage_3Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationSummaryTopDevicesModelsByUsage200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return metrics for organization's top 10 device models sorted by data usage over given time range
     * Return metrics for organization's top 10 device models sorted by data usage over given time range. Default unit is megabytes.
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
     * @param {module:api/DevicesApi~getOrganizationSummaryTopDevicesModelsByUsage_3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationSummaryTopDevicesModelsByUsage200ResponseInner>}
     */
    getOrganizationSummaryTopDevicesModelsByUsage_3(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationSummaryTopDevicesModelsByUsage_3");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationSummaryTopDevicesModelsByUsage200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/summary/top/devices/models/byUsage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationWirelessDevicesEthernetStatuses_1 operation.
     * @callback module:api/DevicesApi~getOrganizationWirelessDevicesEthernetStatuses_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationWirelessDevicesEthernetStatuses200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Endpoint to see power status for wireless devices
     * Endpoint to see power status for wireless devices
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {Array.<String>} [networkIds] A list of Meraki network IDs to filter results to contain only specified networks. E.g.: networkIds[]=N_12345678&networkIds[]=L_3456
     * @param {module:api/DevicesApi~getOrganizationWirelessDevicesEthernetStatuses_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationWirelessDevicesEthernetStatuses200ResponseInner>}
     */
    getOrganizationWirelessDevicesEthernetStatuses_1(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationWirelessDevicesEthernetStatuses_1");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        'networkIds': this.apiClient.buildCollectionParam(opts['networkIds'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationWirelessDevicesEthernetStatuses200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/wireless/devices/ethernet/statuses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lockNetworkSmDevices_1 operation.
     * @callback module:api/DevicesApi~lockNetworkSmDevices_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckinNetworkSmDevices200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lock a set of devices
     * Lock a set of devices
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/LockNetworkSmDevicesRequest} [lockNetworkSmDevicesRequest] 
     * @param {module:api/DevicesApi~lockNetworkSmDevices_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckinNetworkSmDevices200Response}
     */
    lockNetworkSmDevices_1(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['lockNetworkSmDevicesRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling lockNetworkSmDevices_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CheckinNetworkSmDevices200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/devices/lock', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modifyNetworkSmDevicesTags_1 operation.
     * @callback module:api/DevicesApi~modifyNetworkSmDevicesTags_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModifyNetworkSmDevicesTags200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add, delete, or update the tags of a set of devices
     * Add, delete, or update the tags of a set of devices
     * @param {String} networkId 
     * @param {module:model/ModifyNetworkSmDevicesTagsRequest} modifyNetworkSmDevicesTagsRequest 
     * @param {module:api/DevicesApi~modifyNetworkSmDevicesTags_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModifyNetworkSmDevicesTags200ResponseInner>}
     */
    modifyNetworkSmDevicesTags_1(networkId, modifyNetworkSmDevicesTagsRequest, callback) {
      let postBody = modifyNetworkSmDevicesTagsRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling modifyNetworkSmDevicesTags_1");
      }
      // verify the required parameter 'modifyNetworkSmDevicesTagsRequest' is set
      if (modifyNetworkSmDevicesTagsRequest === undefined || modifyNetworkSmDevicesTagsRequest === null) {
        throw new Error("Missing the required parameter 'modifyNetworkSmDevicesTagsRequest' when calling modifyNetworkSmDevicesTags_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ModifyNetworkSmDevicesTags200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/devices/modifyTags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the moveNetworkSmDevices_1 operation.
     * @callback module:api/DevicesApi~moveNetworkSmDevices_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/MoveNetworkSmDevices200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Move a set of devices to a new network
     * Move a set of devices to a new network
     * @param {String} networkId 
     * @param {module:model/MoveNetworkSmDevicesRequest} moveNetworkSmDevicesRequest 
     * @param {module:api/DevicesApi~moveNetworkSmDevices_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MoveNetworkSmDevices200Response}
     */
    moveNetworkSmDevices_1(networkId, moveNetworkSmDevicesRequest, callback) {
      let postBody = moveNetworkSmDevicesRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling moveNetworkSmDevices_1");
      }
      // verify the required parameter 'moveNetworkSmDevicesRequest' is set
      if (moveNetworkSmDevicesRequest === undefined || moveNetworkSmDevicesRequest === null) {
        throw new Error("Missing the required parameter 'moveNetworkSmDevicesRequest' when calling moveNetworkSmDevices_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MoveNetworkSmDevices200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/devices/move', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rebootDevice operation.
     * @callback module:api/DevicesApi~rebootDeviceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reboot a device
     * Reboot a device
     * @param {String} serial 
     * @param {module:api/DevicesApi~rebootDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    rebootDevice(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling rebootDevice");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/reboot', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the refreshNetworkSmDeviceDetails_1 operation.
     * @callback module:api/DevicesApi~refreshNetworkSmDeviceDetails_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refresh the details of a device
     * Refresh the details of a device
     * @param {String} networkId 
     * @param {String} deviceId 
     * @param {module:api/DevicesApi~refreshNetworkSmDeviceDetails_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    refreshNetworkSmDeviceDetails_1(networkId, deviceId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling refreshNetworkSmDeviceDetails_1");
      }
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling refreshNetworkSmDeviceDetails_1");
      }

      let pathParams = {
        'networkId': networkId,
        'deviceId': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/devices/{deviceId}/refreshDetails', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeNetworkDevices_1 operation.
     * @callback module:api/DevicesApi~removeNetworkDevices_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a single device
     * Remove a single device
     * @param {String} networkId 
     * @param {module:model/RemoveNetworkDevicesRequest} removeNetworkDevicesRequest 
     * @param {module:api/DevicesApi~removeNetworkDevices_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    removeNetworkDevices_1(networkId, removeNetworkDevicesRequest, callback) {
      let postBody = removeNetworkDevicesRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling removeNetworkDevices_1");
      }
      // verify the required parameter 'removeNetworkDevicesRequest' is set
      if (removeNetworkDevicesRequest === undefined || removeNetworkDevicesRequest === null) {
        throw new Error("Missing the required parameter 'removeNetworkDevicesRequest' when calling removeNetworkDevices_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/devices/remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unenrollNetworkSmDevice_1 operation.
     * @callback module:api/DevicesApi~unenrollNetworkSmDevice_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unenroll a device
     * Unenroll a device
     * @param {String} networkId 
     * @param {String} deviceId 
     * @param {module:api/DevicesApi~unenrollNetworkSmDevice_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    unenrollNetworkSmDevice_1(networkId, deviceId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling unenrollNetworkSmDevice_1");
      }
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling unenrollNetworkSmDevice_1");
      }

      let pathParams = {
        'networkId': networkId,
        'deviceId': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/devices/{deviceId}/unenroll', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDevice operation.
     * @callback module:api/DevicesApi~updateDeviceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the attributes of a device
     * Update the attributes of a device
     * @param {String} serial 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateDeviceRequest} [updateDeviceRequest] 
     * @param {module:api/DevicesApi~updateDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateDevice(serial, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateDeviceRequest'];
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling updateDevice");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeviceCellularSims operation.
     * @callback module:api/DevicesApi~updateDeviceCellularSimsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the SIM and APN configurations for a cellular device.
     * Updates the SIM and APN configurations for a cellular device.
     * @param {String} serial 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateDeviceCellularSimsRequest} [updateDeviceCellularSimsRequest] 
     * @param {module:api/DevicesApi~updateDeviceCellularSimsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateDeviceCellularSims(serial, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateDeviceCellularSimsRequest'];
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling updateDeviceCellularSims");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/cellular/sims', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeviceManagementInterface operation.
     * @callback module:api/DevicesApi~updateDeviceManagementInterfaceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the management interface settings for a device
     * Update the management interface settings for a device
     * @param {String} serial 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateDeviceManagementInterfaceRequest} [updateDeviceManagementInterfaceRequest] 
     * @param {module:api/DevicesApi~updateDeviceManagementInterfaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateDeviceManagementInterface(serial, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateDeviceManagementInterfaceRequest'];
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling updateDeviceManagementInterface");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/managementInterface', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSmDevicesFields_1 operation.
     * @callback module:api/DevicesApi~updateNetworkSmDevicesFields_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UpdateNetworkSmDevicesFields200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify the fields of a device
     * Modify the fields of a device
     * @param {String} networkId 
     * @param {module:model/UpdateNetworkSmDevicesFieldsRequest} updateNetworkSmDevicesFieldsRequest 
     * @param {module:api/DevicesApi~updateNetworkSmDevicesFields_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UpdateNetworkSmDevicesFields200ResponseInner>}
     */
    updateNetworkSmDevicesFields_1(networkId, updateNetworkSmDevicesFieldsRequest, callback) {
      let postBody = updateNetworkSmDevicesFieldsRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSmDevicesFields_1");
      }
      // verify the required parameter 'updateNetworkSmDevicesFieldsRequest' is set
      if (updateNetworkSmDevicesFieldsRequest === undefined || updateNetworkSmDevicesFieldsRequest === null) {
        throw new Error("Missing the required parameter 'updateNetworkSmDevicesFieldsRequest' when calling updateNetworkSmDevicesFields_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [UpdateNetworkSmDevicesFields200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/devices/fields', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vmxNetworkDevicesClaim_1 operation.
     * @callback module:api/DevicesApi~vmxNetworkDevicesClaim_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Claim a vMX into a network
     * Claim a vMX into a network
     * @param {String} networkId 
     * @param {module:model/VmxNetworkDevicesClaimRequest} vmxNetworkDevicesClaimRequest 
     * @param {module:api/DevicesApi~vmxNetworkDevicesClaim_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    vmxNetworkDevicesClaim_1(networkId, vmxNetworkDevicesClaimRequest, callback) {
      let postBody = vmxNetworkDevicesClaimRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling vmxNetworkDevicesClaim_1");
      }
      // verify the required parameter 'vmxNetworkDevicesClaimRequest' is set
      if (vmxNetworkDevicesClaimRequest === undefined || vmxNetworkDevicesClaimRequest === null) {
        throw new Error("Missing the required parameter 'vmxNetworkDevicesClaimRequest' when calling vmxNetworkDevicesClaim_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/devices/claim/vmx', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the wipeNetworkSmDevices_1 operation.
     * @callback module:api/DevicesApi~wipeNetworkSmDevices_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/WipeNetworkSmDevices200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Wipe a device
     * Wipe a device
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/WipeNetworkSmDevicesRequest} [wipeNetworkSmDevicesRequest] 
     * @param {module:api/DevicesApi~wipeNetworkSmDevices_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WipeNetworkSmDevices200Response}
     */
    wipeNetworkSmDevices_1(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['wipeNetworkSmDevicesRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling wipeNetworkSmDevices_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WipeNetworkSmDevices200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/devices/wipe', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
