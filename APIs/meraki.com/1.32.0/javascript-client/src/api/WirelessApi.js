/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateNetworkWirelessRfProfile201Response from '../model/CreateNetworkWirelessRfProfile201Response';
import CreateNetworkWirelessRfProfileRequest from '../model/CreateNetworkWirelessRfProfileRequest';
import CreateNetworkWirelessSsidIdentityPskRequest from '../model/CreateNetworkWirelessSsidIdentityPskRequest';
import GetDeviceWirelessBluetoothSettings200Response from '../model/GetDeviceWirelessBluetoothSettings200Response';
import GetDeviceWirelessConnectionStats200Response from '../model/GetDeviceWirelessConnectionStats200Response';
import GetNetworkWirelessBluetoothSettings200Response from '../model/GetNetworkWirelessBluetoothSettings200Response';
import GetNetworkWirelessChannelUtilizationHistory200ResponseInner from '../model/GetNetworkWirelessChannelUtilizationHistory200ResponseInner';
import GetNetworkWirelessClientCountHistory200ResponseInner from '../model/GetNetworkWirelessClientCountHistory200ResponseInner';
import GetNetworkWirelessConnectionStats200Response from '../model/GetNetworkWirelessConnectionStats200Response';
import GetNetworkWirelessDataRateHistory200ResponseInner from '../model/GetNetworkWirelessDataRateHistory200ResponseInner';
import GetNetworkWirelessFailedConnections200ResponseInner from '../model/GetNetworkWirelessFailedConnections200ResponseInner';
import GetNetworkWirelessLatencyHistory200ResponseInner from '../model/GetNetworkWirelessLatencyHistory200ResponseInner';
import GetNetworkWirelessSettings200Response from '../model/GetNetworkWirelessSettings200Response';
import GetNetworkWirelessSignalQualityHistory200ResponseInner from '../model/GetNetworkWirelessSignalQualityHistory200ResponseInner';
import GetNetworkWirelessSsidEapOverride200Response from '../model/GetNetworkWirelessSsidEapOverride200Response';
import GetNetworkWirelessSsidIdentityPsks200ResponseInner from '../model/GetNetworkWirelessSsidIdentityPsks200ResponseInner';
import GetNetworkWirelessSsidSplashSettings200Response from '../model/GetNetworkWirelessSsidSplashSettings200Response';
import GetNetworkWirelessUsageHistory200ResponseInner from '../model/GetNetworkWirelessUsageHistory200ResponseInner';
import GetOrganizationWirelessDevicesEthernetStatuses200ResponseInner from '../model/GetOrganizationWirelessDevicesEthernetStatuses200ResponseInner';
import UpdateDeviceWirelessBluetoothSettingsRequest from '../model/UpdateDeviceWirelessBluetoothSettingsRequest';
import UpdateDeviceWirelessRadioSettingsRequest from '../model/UpdateDeviceWirelessRadioSettingsRequest';
import UpdateNetworkWirelessAlternateManagementInterfaceRequest from '../model/UpdateNetworkWirelessAlternateManagementInterfaceRequest';
import UpdateNetworkWirelessBillingRequest from '../model/UpdateNetworkWirelessBillingRequest';
import UpdateNetworkWirelessBluetoothSettingsRequest from '../model/UpdateNetworkWirelessBluetoothSettingsRequest';
import UpdateNetworkWirelessRfProfileRequest from '../model/UpdateNetworkWirelessRfProfileRequest';
import UpdateNetworkWirelessSettingsRequest from '../model/UpdateNetworkWirelessSettingsRequest';
import UpdateNetworkWirelessSsidBonjourForwardingRequest from '../model/UpdateNetworkWirelessSsidBonjourForwardingRequest';
import UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesRequest from '../model/UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesRequest';
import UpdateNetworkWirelessSsidEapOverrideRequest from '../model/UpdateNetworkWirelessSsidEapOverrideRequest';
import UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequest from '../model/UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequest';
import UpdateNetworkWirelessSsidFirewallL7FirewallRulesRequest from '../model/UpdateNetworkWirelessSsidFirewallL7FirewallRulesRequest';
import UpdateNetworkWirelessSsidHotspot20Request from '../model/UpdateNetworkWirelessSsidHotspot20Request';
import UpdateNetworkWirelessSsidIdentityPskRequest from '../model/UpdateNetworkWirelessSsidIdentityPskRequest';
import UpdateNetworkWirelessSsidRequest from '../model/UpdateNetworkWirelessSsidRequest';
import UpdateNetworkWirelessSsidSchedulesRequest from '../model/UpdateNetworkWirelessSsidSchedulesRequest';
import UpdateNetworkWirelessSsidSplashSettingsRequest from '../model/UpdateNetworkWirelessSsidSplashSettingsRequest';
import UpdateNetworkWirelessSsidTrafficShapingRulesRequest from '../model/UpdateNetworkWirelessSsidTrafficShapingRulesRequest';
import UpdateNetworkWirelessSsidVpnRequest from '../model/UpdateNetworkWirelessSsidVpnRequest';

/**
* Wireless service.
* @module api/WirelessApi
* @version 1.32.0
*/
export default class WirelessApi {

    /**
    * Constructs a new WirelessApi. 
    * @alias module:api/WirelessApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createNetworkWirelessRfProfile operation.
     * @callback module:api/WirelessApi~createNetworkWirelessRfProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateNetworkWirelessRfProfile201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new RF profile for this network
     * Creates new RF profile for this network
     * @param {String} networkId 
     * @param {module:model/CreateNetworkWirelessRfProfileRequest} createNetworkWirelessRfProfileRequest 
     * @param {module:api/WirelessApi~createNetworkWirelessRfProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateNetworkWirelessRfProfile201Response}
     */
    createNetworkWirelessRfProfile(networkId, createNetworkWirelessRfProfileRequest, callback) {
      let postBody = createNetworkWirelessRfProfileRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkWirelessRfProfile");
      }
      // verify the required parameter 'createNetworkWirelessRfProfileRequest' is set
      if (createNetworkWirelessRfProfileRequest === undefined || createNetworkWirelessRfProfileRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkWirelessRfProfileRequest' when calling createNetworkWirelessRfProfile");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateNetworkWirelessRfProfile201Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/rfProfiles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkWirelessSsidIdentityPsk operation.
     * @callback module:api/WirelessApi~createNetworkWirelessSsidIdentityPskCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an Identity PSK
     * Create an Identity PSK
     * @param {String} networkId 
     * @param {String} number 
     * @param {module:model/CreateNetworkWirelessSsidIdentityPskRequest} createNetworkWirelessSsidIdentityPskRequest 
     * @param {module:api/WirelessApi~createNetworkWirelessSsidIdentityPskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNetworkWirelessSsidIdentityPsk(networkId, number, createNetworkWirelessSsidIdentityPskRequest, callback) {
      let postBody = createNetworkWirelessSsidIdentityPskRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkWirelessSsidIdentityPsk");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling createNetworkWirelessSsidIdentityPsk");
      }
      // verify the required parameter 'createNetworkWirelessSsidIdentityPskRequest' is set
      if (createNetworkWirelessSsidIdentityPskRequest === undefined || createNetworkWirelessSsidIdentityPskRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkWirelessSsidIdentityPskRequest' when calling createNetworkWirelessSsidIdentityPsk");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/identityPsks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkWirelessRfProfile operation.
     * @callback module:api/WirelessApi~deleteNetworkWirelessRfProfileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a RF Profile
     * Delete a RF Profile
     * @param {String} networkId 
     * @param {String} rfProfileId 
     * @param {module:api/WirelessApi~deleteNetworkWirelessRfProfileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkWirelessRfProfile(networkId, rfProfileId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkWirelessRfProfile");
      }
      // verify the required parameter 'rfProfileId' is set
      if (rfProfileId === undefined || rfProfileId === null) {
        throw new Error("Missing the required parameter 'rfProfileId' when calling deleteNetworkWirelessRfProfile");
      }

      let pathParams = {
        'networkId': networkId,
        'rfProfileId': rfProfileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/rfProfiles/{rfProfileId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkWirelessSsidIdentityPsk operation.
     * @callback module:api/WirelessApi~deleteNetworkWirelessSsidIdentityPskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an Identity PSK
     * Delete an Identity PSK
     * @param {String} networkId 
     * @param {String} number 
     * @param {String} identityPskId 
     * @param {module:api/WirelessApi~deleteNetworkWirelessSsidIdentityPskCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkWirelessSsidIdentityPsk(networkId, number, identityPskId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkWirelessSsidIdentityPsk");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling deleteNetworkWirelessSsidIdentityPsk");
      }
      // verify the required parameter 'identityPskId' is set
      if (identityPskId === undefined || identityPskId === null) {
        throw new Error("Missing the required parameter 'identityPskId' when calling deleteNetworkWirelessSsidIdentityPsk");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number,
        'identityPskId': identityPskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/identityPsks/{identityPskId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceWirelessBluetoothSettings operation.
     * @callback module:api/WirelessApi~getDeviceWirelessBluetoothSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDeviceWirelessBluetoothSettings200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the bluetooth settings for a wireless device
     * Return the bluetooth settings for a wireless device
     * @param {String} serial 
     * @param {module:api/WirelessApi~getDeviceWirelessBluetoothSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDeviceWirelessBluetoothSettings200Response}
     */
    getDeviceWirelessBluetoothSettings(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceWirelessBluetoothSettings");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDeviceWirelessBluetoothSettings200Response;
      return this.apiClient.callApi(
        '/devices/{serial}/wireless/bluetooth/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceWirelessConnectionStats operation.
     * @callback module:api/WirelessApi~getDeviceWirelessConnectionStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDeviceWirelessConnectionStats200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Aggregated connectivity info for a given AP on this network
     * Aggregated connectivity info for a given AP on this network
     * @param {String} serial 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 180 days from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 7 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days.
     * @param {module:model/String} [band] Filter results by band (either '2.4', '5' or '6'). Note that data prior to February 2020 will not have band information.
     * @param {Number} [ssid] Filter results by SSID
     * @param {Number} [vlan] Filter results by VLAN
     * @param {String} [apTag] Filter results by AP Tag
     * @param {module:api/WirelessApi~getDeviceWirelessConnectionStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDeviceWirelessConnectionStats200Response}
     */
    getDeviceWirelessConnectionStats(serial, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceWirelessConnectionStats");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan'],
        'band': opts['band'],
        'ssid': opts['ssid'],
        'vlan': opts['vlan'],
        'apTag': opts['apTag']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDeviceWirelessConnectionStats200Response;
      return this.apiClient.callApi(
        '/devices/{serial}/wireless/connectionStats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceWirelessLatencyStats operation.
     * @callback module:api/WirelessApi~getDeviceWirelessLatencyStatsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Aggregated latency info for a given AP on this network
     * Aggregated latency info for a given AP on this network
     * @param {String} serial 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 180 days from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 7 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days.
     * @param {module:model/String} [band] Filter results by band (either '2.4', '5' or '6'). Note that data prior to February 2020 will not have band information.
     * @param {Number} [ssid] Filter results by SSID
     * @param {Number} [vlan] Filter results by VLAN
     * @param {String} [apTag] Filter results by AP Tag
     * @param {String} [fields] Partial selection: If present, this call will return only the selected fields of [\"rawDistribution\", \"avg\"]. All fields will be returned by default. Selected fields must be entered as a comma separated string.
     * @param {module:api/WirelessApi~getDeviceWirelessLatencyStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getDeviceWirelessLatencyStats(serial, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceWirelessLatencyStats");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan'],
        'band': opts['band'],
        'ssid': opts['ssid'],
        'vlan': opts['vlan'],
        'apTag': opts['apTag'],
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/wireless/latencyStats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceWirelessRadioSettings operation.
     * @callback module:api/WirelessApi~getDeviceWirelessRadioSettingsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the radio settings of a device
     * Return the radio settings of a device
     * @param {String} serial 
     * @param {module:api/WirelessApi~getDeviceWirelessRadioSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getDeviceWirelessRadioSettings(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceWirelessRadioSettings");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/wireless/radio/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceWirelessStatus operation.
     * @callback module:api/WirelessApi~getDeviceWirelessStatusCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the SSID statuses of an access point
     * Return the SSID statuses of an access point
     * @param {String} serial 
     * @param {module:api/WirelessApi~getDeviceWirelessStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getDeviceWirelessStatus(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceWirelessStatus");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/wireless/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessAirMarshal operation.
     * @callback module:api/WirelessApi~getNetworkWirelessAirMarshalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Air Marshal scan results from a network
     * List Air Marshal scan results from a network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 7 days.
     * @param {module:api/WirelessApi~getNetworkWirelessAirMarshalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkWirelessAirMarshal(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessAirMarshal");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        't0': opts['t0'],
        'timespan': opts['timespan']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/airMarshal', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessAlternateManagementInterface operation.
     * @callback module:api/WirelessApi~getNetworkWirelessAlternateManagementInterfaceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return alternate management interface and devices with IP assigned
     * Return alternate management interface and devices with IP assigned
     * @param {String} networkId 
     * @param {module:api/WirelessApi~getNetworkWirelessAlternateManagementInterfaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkWirelessAlternateManagementInterface(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessAlternateManagementInterface");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/alternateManagementInterface', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessBilling operation.
     * @callback module:api/WirelessApi~getNetworkWirelessBillingCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the billing settings of this network
     * Return the billing settings of this network
     * @param {String} networkId 
     * @param {module:api/WirelessApi~getNetworkWirelessBillingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkWirelessBilling(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessBilling");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/billing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessBluetoothSettings operation.
     * @callback module:api/WirelessApi~getNetworkWirelessBluetoothSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkWirelessBluetoothSettings200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the Bluetooth settings for a network. <a href=\"https://documentation.meraki.com/MR/Bluetooth/Bluetooth_Low_Energy_(BLE)\">Bluetooth settings</a> must be enabled on the network.
     * Return the Bluetooth settings for a network. <a href=\"https://documentation.meraki.com/MR/Bluetooth/Bluetooth_Low_Energy_(BLE)\">Bluetooth settings</a> must be enabled on the network.
     * @param {String} networkId 
     * @param {module:api/WirelessApi~getNetworkWirelessBluetoothSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkWirelessBluetoothSettings200Response}
     */
    getNetworkWirelessBluetoothSettings(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessBluetoothSettings");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkWirelessBluetoothSettings200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/bluetooth/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessChannelUtilizationHistory operation.
     * @callback module:api/WirelessApi~getNetworkWirelessChannelUtilizationHistoryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkWirelessChannelUtilizationHistory200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return AP channel utilization over time for a device or network client
     * Return AP channel utilization over time for a device or network client
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 7 days.
     * @param {Number} [resolution] The time resolution in seconds for returned data. The valid resolutions are: 600, 1200, 3600, 14400, 86400. The default is 86400.
     * @param {Boolean} [autoResolution] Automatically select a data resolution based on the given timespan; this overrides the value specified by the 'resolution' parameter. The default setting is false.
     * @param {String} [clientId] Filter results by network client to return per-device, per-band AP channel utilization metrics inner joined by the queried client's connection history.
     * @param {String} [deviceSerial] Filter results by device to return AP channel utilization metrics for the queried device; either :band or :clientId must be jointly specified.
     * @param {String} [apTag] Filter results by AP tag to return AP channel utilization metrics for devices labeled with the given tag; either :clientId or :deviceSerial must be jointly specified.
     * @param {module:model/String} [band] Filter results by band (either '2.4', '5' or '6').
     * @param {module:api/WirelessApi~getNetworkWirelessChannelUtilizationHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkWirelessChannelUtilizationHistory200ResponseInner>}
     */
    getNetworkWirelessChannelUtilizationHistory(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessChannelUtilizationHistory");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan'],
        'resolution': opts['resolution'],
        'autoResolution': opts['autoResolution'],
        'clientId': opts['clientId'],
        'deviceSerial': opts['deviceSerial'],
        'apTag': opts['apTag'],
        'band': opts['band']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkWirelessChannelUtilizationHistory200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/channelUtilizationHistory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessClientConnectionStats operation.
     * @callback module:api/WirelessApi~getNetworkWirelessClientConnectionStatsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Aggregated connectivity info for a given client on this network
     * Aggregated connectivity info for a given client on this network. Clients are identified by their MAC.
     * @param {String} networkId 
     * @param {String} clientId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 180 days from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 7 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days.
     * @param {module:model/String} [band] Filter results by band (either '2.4', '5' or '6'). Note that data prior to February 2020 will not have band information.
     * @param {Number} [ssid] Filter results by SSID
     * @param {Number} [vlan] Filter results by VLAN
     * @param {String} [apTag] Filter results by AP Tag
     * @param {module:api/WirelessApi~getNetworkWirelessClientConnectionStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkWirelessClientConnectionStats(networkId, clientId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessClientConnectionStats");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getNetworkWirelessClientConnectionStats");
      }

      let pathParams = {
        'networkId': networkId,
        'clientId': clientId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan'],
        'band': opts['band'],
        'ssid': opts['ssid'],
        'vlan': opts['vlan'],
        'apTag': opts['apTag']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/clients/{clientId}/connectionStats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessClientConnectivityEvents operation.
     * @callback module:api/WirelessApi~getNetworkWirelessClientConnectivityEventsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the wireless connectivity events for a client within a network in the timespan.
     * List the wireless connectivity events for a client within a network in the timespan.
     * @param {String} networkId 
     * @param {String} clientId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
     * @param {Array.<module:model/String>} [types] A list of event types to include. If not specified, events of all types will be returned. Valid types are 'assoc', 'disassoc', 'auth', 'deauth', 'dns', 'dhcp', 'roam', 'connection' and/or 'sticky'.
     * @param {Array.<module:model/String>} [includedSeverities] A list of severities to include. If not specified, events of all severities will be returned. Valid severities are 'good', 'info', 'warn' and/or 'bad'.
     * @param {module:model/String} [band] Filter results by band (either '2.4', '5', '6').
     * @param {module:model/Number} [ssidNumber] An SSID number to include. If not specified, events for all SSIDs will be returned.
     * @param {String} [deviceSerial] Filter results by an AP's serial number.
     * @param {module:api/WirelessApi~getNetworkWirelessClientConnectivityEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkWirelessClientConnectivityEvents(networkId, clientId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessClientConnectivityEvents");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getNetworkWirelessClientConnectivityEvents");
      }

      let pathParams = {
        'networkId': networkId,
        'clientId': clientId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan'],
        'types': this.apiClient.buildCollectionParam(opts['types'], 'csv'),
        'includedSeverities': this.apiClient.buildCollectionParam(opts['includedSeverities'], 'csv'),
        'band': opts['band'],
        'ssidNumber': opts['ssidNumber'],
        'deviceSerial': opts['deviceSerial']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/clients/{clientId}/connectivityEvents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessClientCountHistory operation.
     * @callback module:api/WirelessApi~getNetworkWirelessClientCountHistoryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkWirelessClientCountHistory200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return wireless client counts over time for a network, device, or network client
     * Return wireless client counts over time for a network, device, or network client
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 7 days.
     * @param {Number} [resolution] The time resolution in seconds for returned data. The valid resolutions are: 300, 600, 1200, 3600, 14400, 86400. The default is 86400.
     * @param {Boolean} [autoResolution] Automatically select a data resolution based on the given timespan; this overrides the value specified by the 'resolution' parameter. The default setting is false.
     * @param {String} [clientId] Filter results by network client to return per-device client counts over time inner joined by the queried client's connection history.
     * @param {String} [deviceSerial] Filter results by device.
     * @param {String} [apTag] Filter results by AP tag.
     * @param {module:model/String} [band] Filter results by band (either '2.4', '5' or '6').
     * @param {Number} [ssid] Filter results by SSID number.
     * @param {module:api/WirelessApi~getNetworkWirelessClientCountHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkWirelessClientCountHistory200ResponseInner>}
     */
    getNetworkWirelessClientCountHistory(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessClientCountHistory");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan'],
        'resolution': opts['resolution'],
        'autoResolution': opts['autoResolution'],
        'clientId': opts['clientId'],
        'deviceSerial': opts['deviceSerial'],
        'apTag': opts['apTag'],
        'band': opts['band'],
        'ssid': opts['ssid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkWirelessClientCountHistory200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/clientCountHistory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessClientLatencyHistory operation.
     * @callback module:api/WirelessApi~getNetworkWirelessClientLatencyHistoryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the latency history for a client
     * Return the latency history for a client. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP. The latency data is from a sample of 2% of packets and is grouped into 4 traffic categories: background, best effort, video, voice. Within these categories the sampled packet counters are bucketed by latency in milliseconds.
     * @param {String} networkId 
     * @param {String} clientId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 791 days from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 791 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 791 days. The default is 1 day.
     * @param {Number} [resolution] The time resolution in seconds for returned data. The valid resolutions are: 86400. The default is 86400.
     * @param {module:api/WirelessApi~getNetworkWirelessClientLatencyHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkWirelessClientLatencyHistory(networkId, clientId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessClientLatencyHistory");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getNetworkWirelessClientLatencyHistory");
      }

      let pathParams = {
        'networkId': networkId,
        'clientId': clientId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan'],
        'resolution': opts['resolution']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/clients/{clientId}/latencyHistory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessClientLatencyStats operation.
     * @callback module:api/WirelessApi~getNetworkWirelessClientLatencyStatsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Aggregated latency info for a given client on this network
     * Aggregated latency info for a given client on this network. Clients are identified by their MAC.
     * @param {String} networkId 
     * @param {String} clientId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 180 days from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 7 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days.
     * @param {module:model/String} [band] Filter results by band (either '2.4', '5' or '6'). Note that data prior to February 2020 will not have band information.
     * @param {Number} [ssid] Filter results by SSID
     * @param {Number} [vlan] Filter results by VLAN
     * @param {String} [apTag] Filter results by AP Tag
     * @param {String} [fields] Partial selection: If present, this call will return only the selected fields of [\"rawDistribution\", \"avg\"]. All fields will be returned by default. Selected fields must be entered as a comma separated string.
     * @param {module:api/WirelessApi~getNetworkWirelessClientLatencyStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkWirelessClientLatencyStats(networkId, clientId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessClientLatencyStats");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getNetworkWirelessClientLatencyStats");
      }

      let pathParams = {
        'networkId': networkId,
        'clientId': clientId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan'],
        'band': opts['band'],
        'ssid': opts['ssid'],
        'vlan': opts['vlan'],
        'apTag': opts['apTag'],
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/clients/{clientId}/latencyStats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessClientsConnectionStats operation.
     * @callback module:api/WirelessApi~getNetworkWirelessClientsConnectionStatsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Aggregated connectivity info for this network, grouped by clients
     * Aggregated connectivity info for this network, grouped by clients
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 180 days from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 7 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days.
     * @param {module:model/String} [band] Filter results by band (either '2.4', '5' or '6'). Note that data prior to February 2020 will not have band information.
     * @param {Number} [ssid] Filter results by SSID
     * @param {Number} [vlan] Filter results by VLAN
     * @param {String} [apTag] Filter results by AP Tag
     * @param {module:api/WirelessApi~getNetworkWirelessClientsConnectionStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkWirelessClientsConnectionStats(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessClientsConnectionStats");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan'],
        'band': opts['band'],
        'ssid': opts['ssid'],
        'vlan': opts['vlan'],
        'apTag': opts['apTag']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/clients/connectionStats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessClientsLatencyStats operation.
     * @callback module:api/WirelessApi~getNetworkWirelessClientsLatencyStatsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Aggregated latency info for this network, grouped by clients
     * Aggregated latency info for this network, grouped by clients
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 180 days from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 7 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days.
     * @param {module:model/String} [band] Filter results by band (either '2.4', '5' or '6'). Note that data prior to February 2020 will not have band information.
     * @param {Number} [ssid] Filter results by SSID
     * @param {Number} [vlan] Filter results by VLAN
     * @param {String} [apTag] Filter results by AP Tag
     * @param {String} [fields] Partial selection: If present, this call will return only the selected fields of [\"rawDistribution\", \"avg\"]. All fields will be returned by default. Selected fields must be entered as a comma separated string.
     * @param {module:api/WirelessApi~getNetworkWirelessClientsLatencyStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkWirelessClientsLatencyStats(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessClientsLatencyStats");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan'],
        'band': opts['band'],
        'ssid': opts['ssid'],
        'vlan': opts['vlan'],
        'apTag': opts['apTag'],
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/clients/latencyStats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessConnectionStats operation.
     * @callback module:api/WirelessApi~getNetworkWirelessConnectionStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkWirelessConnectionStats200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Aggregated connectivity info for this network
     * Aggregated connectivity info for this network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 180 days from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 7 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days.
     * @param {module:model/String} [band] Filter results by band (either '2.4', '5' or '6'). Note that data prior to February 2020 will not have band information.
     * @param {Number} [ssid] Filter results by SSID
     * @param {Number} [vlan] Filter results by VLAN
     * @param {String} [apTag] Filter results by AP Tag
     * @param {module:api/WirelessApi~getNetworkWirelessConnectionStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkWirelessConnectionStats200Response}
     */
    getNetworkWirelessConnectionStats(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessConnectionStats");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan'],
        'band': opts['band'],
        'ssid': opts['ssid'],
        'vlan': opts['vlan'],
        'apTag': opts['apTag']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkWirelessConnectionStats200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/connectionStats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessDataRateHistory operation.
     * @callback module:api/WirelessApi~getNetworkWirelessDataRateHistoryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkWirelessDataRateHistory200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return PHY data rates over time for a network, device, or network client
     * Return PHY data rates over time for a network, device, or network client
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 7 days.
     * @param {Number} [resolution] The time resolution in seconds for returned data. The valid resolutions are: 300, 600, 1200, 3600, 14400, 86400. The default is 86400.
     * @param {Boolean} [autoResolution] Automatically select a data resolution based on the given timespan; this overrides the value specified by the 'resolution' parameter. The default setting is false.
     * @param {String} [clientId] Filter results by network client.
     * @param {String} [deviceSerial] Filter results by device.
     * @param {String} [apTag] Filter results by AP tag.
     * @param {module:model/String} [band] Filter results by band (either '2.4', '5' or '6').
     * @param {Number} [ssid] Filter results by SSID number.
     * @param {module:api/WirelessApi~getNetworkWirelessDataRateHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkWirelessDataRateHistory200ResponseInner>}
     */
    getNetworkWirelessDataRateHistory(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessDataRateHistory");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan'],
        'resolution': opts['resolution'],
        'autoResolution': opts['autoResolution'],
        'clientId': opts['clientId'],
        'deviceSerial': opts['deviceSerial'],
        'apTag': opts['apTag'],
        'band': opts['band'],
        'ssid': opts['ssid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkWirelessDataRateHistory200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/dataRateHistory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessDevicesConnectionStats operation.
     * @callback module:api/WirelessApi~getNetworkWirelessDevicesConnectionStatsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetDeviceWirelessConnectionStats200Response>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Aggregated connectivity info for this network, grouped by node
     * Aggregated connectivity info for this network, grouped by node
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 180 days from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 7 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days.
     * @param {module:model/String} [band] Filter results by band (either '2.4', '5' or '6'). Note that data prior to February 2020 will not have band information.
     * @param {Number} [ssid] Filter results by SSID
     * @param {Number} [vlan] Filter results by VLAN
     * @param {String} [apTag] Filter results by AP Tag
     * @param {module:api/WirelessApi~getNetworkWirelessDevicesConnectionStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetDeviceWirelessConnectionStats200Response>}
     */
    getNetworkWirelessDevicesConnectionStats(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessDevicesConnectionStats");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan'],
        'band': opts['band'],
        'ssid': opts['ssid'],
        'vlan': opts['vlan'],
        'apTag': opts['apTag']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetDeviceWirelessConnectionStats200Response];
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/devices/connectionStats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessDevicesLatencyStats operation.
     * @callback module:api/WirelessApi~getNetworkWirelessDevicesLatencyStatsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Aggregated latency info for this network, grouped by node
     * Aggregated latency info for this network, grouped by node
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 180 days from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 7 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days.
     * @param {module:model/String} [band] Filter results by band (either '2.4', '5' or '6'). Note that data prior to February 2020 will not have band information.
     * @param {Number} [ssid] Filter results by SSID
     * @param {Number} [vlan] Filter results by VLAN
     * @param {String} [apTag] Filter results by AP Tag
     * @param {String} [fields] Partial selection: If present, this call will return only the selected fields of [\"rawDistribution\", \"avg\"]. All fields will be returned by default. Selected fields must be entered as a comma separated string.
     * @param {module:api/WirelessApi~getNetworkWirelessDevicesLatencyStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkWirelessDevicesLatencyStats(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessDevicesLatencyStats");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan'],
        'band': opts['band'],
        'ssid': opts['ssid'],
        'vlan': opts['vlan'],
        'apTag': opts['apTag'],
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/devices/latencyStats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessFailedConnections operation.
     * @callback module:api/WirelessApi~getNetworkWirelessFailedConnectionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkWirelessFailedConnections200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of all failed client connection events on this network in a given time range
     * List of all failed client connection events on this network in a given time range
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 180 days from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 7 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days.
     * @param {module:model/String} [band] Filter results by band (either '2.4', '5' or '6'). Note that data prior to February 2020 will not have band information.
     * @param {Number} [ssid] Filter results by SSID
     * @param {Number} [vlan] Filter results by VLAN
     * @param {String} [apTag] Filter results by AP Tag
     * @param {String} [serial] Filter by AP
     * @param {String} [clientId] Filter by client MAC
     * @param {module:api/WirelessApi~getNetworkWirelessFailedConnectionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkWirelessFailedConnections200ResponseInner>}
     */
    getNetworkWirelessFailedConnections(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessFailedConnections");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan'],
        'band': opts['band'],
        'ssid': opts['ssid'],
        'vlan': opts['vlan'],
        'apTag': opts['apTag'],
        'serial': opts['serial'],
        'clientId': opts['clientId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkWirelessFailedConnections200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/failedConnections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessLatencyHistory operation.
     * @callback module:api/WirelessApi~getNetworkWirelessLatencyHistoryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkWirelessLatencyHistory200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return average wireless latency over time for a network, device, or network client
     * Return average wireless latency over time for a network, device, or network client
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 7 days.
     * @param {Number} [resolution] The time resolution in seconds for returned data. The valid resolutions are: 300, 600, 1200, 3600, 14400, 86400. The default is 86400.
     * @param {Boolean} [autoResolution] Automatically select a data resolution based on the given timespan; this overrides the value specified by the 'resolution' parameter. The default setting is false.
     * @param {String} [clientId] Filter results by network client.
     * @param {String} [deviceSerial] Filter results by device.
     * @param {String} [apTag] Filter results by AP tag.
     * @param {module:model/String} [band] Filter results by band (either '2.4', '5' or '6').
     * @param {Number} [ssid] Filter results by SSID number.
     * @param {module:model/String} [accessCategory] Filter by access category.
     * @param {module:api/WirelessApi~getNetworkWirelessLatencyHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkWirelessLatencyHistory200ResponseInner>}
     */
    getNetworkWirelessLatencyHistory(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessLatencyHistory");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan'],
        'resolution': opts['resolution'],
        'autoResolution': opts['autoResolution'],
        'clientId': opts['clientId'],
        'deviceSerial': opts['deviceSerial'],
        'apTag': opts['apTag'],
        'band': opts['band'],
        'ssid': opts['ssid'],
        'accessCategory': opts['accessCategory']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkWirelessLatencyHistory200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/latencyHistory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessLatencyStats operation.
     * @callback module:api/WirelessApi~getNetworkWirelessLatencyStatsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Aggregated latency info for this network
     * Aggregated latency info for this network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 180 days from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 7 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days.
     * @param {module:model/String} [band] Filter results by band (either '2.4', '5' or '6'). Note that data prior to February 2020 will not have band information.
     * @param {Number} [ssid] Filter results by SSID
     * @param {Number} [vlan] Filter results by VLAN
     * @param {String} [apTag] Filter results by AP Tag
     * @param {String} [fields] Partial selection: If present, this call will return only the selected fields of [\"rawDistribution\", \"avg\"]. All fields will be returned by default. Selected fields must be entered as a comma separated string.
     * @param {module:api/WirelessApi~getNetworkWirelessLatencyStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkWirelessLatencyStats(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessLatencyStats");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan'],
        'band': opts['band'],
        'ssid': opts['ssid'],
        'vlan': opts['vlan'],
        'apTag': opts['apTag'],
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/latencyStats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessMeshStatuses operation.
     * @callback module:api/WirelessApi~getNetworkWirelessMeshStatusesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List wireless mesh statuses for repeaters
     * List wireless mesh statuses for repeaters
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 500. Default is 50.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:api/WirelessApi~getNetworkWirelessMeshStatusesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkWirelessMeshStatuses(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessMeshStatuses");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/meshStatuses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessRfProfile operation.
     * @callback module:api/WirelessApi~getNetworkWirelessRfProfileCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a RF profile
     * Return a RF profile
     * @param {String} networkId 
     * @param {String} rfProfileId 
     * @param {module:api/WirelessApi~getNetworkWirelessRfProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkWirelessRfProfile(networkId, rfProfileId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessRfProfile");
      }
      // verify the required parameter 'rfProfileId' is set
      if (rfProfileId === undefined || rfProfileId === null) {
        throw new Error("Missing the required parameter 'rfProfileId' when calling getNetworkWirelessRfProfile");
      }

      let pathParams = {
        'networkId': networkId,
        'rfProfileId': rfProfileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/rfProfiles/{rfProfileId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessRfProfiles operation.
     * @callback module:api/WirelessApi~getNetworkWirelessRfProfilesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the non-basic RF profiles for this network
     * List the non-basic RF profiles for this network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeTemplateProfiles] If the network is bound to a template, this parameter controls whether or not the non-basic RF profiles defined on the template should be included in the response alongside the non-basic profiles defined on the bound network. Defaults to false.
     * @param {module:api/WirelessApi~getNetworkWirelessRfProfilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkWirelessRfProfiles(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessRfProfiles");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        'includeTemplateProfiles': opts['includeTemplateProfiles']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/rfProfiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessSettings operation.
     * @callback module:api/WirelessApi~getNetworkWirelessSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkWirelessSettings200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the wireless settings for a network
     * Return the wireless settings for a network
     * @param {String} networkId 
     * @param {module:api/WirelessApi~getNetworkWirelessSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkWirelessSettings200Response}
     */
    getNetworkWirelessSettings(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessSettings");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkWirelessSettings200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessSignalQualityHistory operation.
     * @callback module:api/WirelessApi~getNetworkWirelessSignalQualityHistoryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkWirelessSignalQualityHistory200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return signal quality (SNR/RSSI) over time for a device or network client
     * Return signal quality (SNR/RSSI) over time for a device or network client
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 7 days.
     * @param {Number} [resolution] The time resolution in seconds for returned data. The valid resolutions are: 300, 600, 1200, 3600, 14400, 86400. The default is 86400.
     * @param {Boolean} [autoResolution] Automatically select a data resolution based on the given timespan; this overrides the value specified by the 'resolution' parameter. The default setting is false.
     * @param {String} [clientId] Filter results by network client.
     * @param {String} [deviceSerial] Filter results by device.
     * @param {String} [apTag] Filter results by AP tag; either :clientId or :deviceSerial must be jointly specified.
     * @param {module:model/String} [band] Filter results by band (either '2.4', '5' or '6').
     * @param {Number} [ssid] Filter results by SSID number.
     * @param {module:api/WirelessApi~getNetworkWirelessSignalQualityHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkWirelessSignalQualityHistory200ResponseInner>}
     */
    getNetworkWirelessSignalQualityHistory(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessSignalQualityHistory");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan'],
        'resolution': opts['resolution'],
        'autoResolution': opts['autoResolution'],
        'clientId': opts['clientId'],
        'deviceSerial': opts['deviceSerial'],
        'apTag': opts['apTag'],
        'band': opts['band'],
        'ssid': opts['ssid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkWirelessSignalQualityHistory200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/signalQualityHistory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessSsid operation.
     * @callback module:api/WirelessApi~getNetworkWirelessSsidCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a single MR SSID
     * Return a single MR SSID
     * @param {String} networkId 
     * @param {String} number 
     * @param {module:api/WirelessApi~getNetworkWirelessSsidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkWirelessSsid(networkId, number, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessSsid");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling getNetworkWirelessSsid");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessSsidBonjourForwarding operation.
     * @callback module:api/WirelessApi~getNetworkWirelessSsidBonjourForwardingCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the Bonjour forwarding setting and rules for the SSID
     * List the Bonjour forwarding setting and rules for the SSID
     * @param {String} networkId 
     * @param {String} number 
     * @param {module:api/WirelessApi~getNetworkWirelessSsidBonjourForwardingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkWirelessSsidBonjourForwarding(networkId, number, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessSsidBonjourForwarding");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling getNetworkWirelessSsidBonjourForwarding");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/bonjourForwarding', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessSsidDeviceTypeGroupPolicies operation.
     * @callback module:api/WirelessApi~getNetworkWirelessSsidDeviceTypeGroupPoliciesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the device type group policies for the SSID
     * List the device type group policies for the SSID
     * @param {String} networkId 
     * @param {String} number 
     * @param {module:api/WirelessApi~getNetworkWirelessSsidDeviceTypeGroupPoliciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkWirelessSsidDeviceTypeGroupPolicies(networkId, number, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessSsidDeviceTypeGroupPolicies");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling getNetworkWirelessSsidDeviceTypeGroupPolicies");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/deviceTypeGroupPolicies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessSsidEapOverride operation.
     * @callback module:api/WirelessApi~getNetworkWirelessSsidEapOverrideCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkWirelessSsidEapOverride200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the EAP overridden parameters for an SSID
     * Return the EAP overridden parameters for an SSID
     * @param {String} networkId 
     * @param {String} number 
     * @param {module:api/WirelessApi~getNetworkWirelessSsidEapOverrideCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkWirelessSsidEapOverride200Response}
     */
    getNetworkWirelessSsidEapOverride(networkId, number, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessSsidEapOverride");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling getNetworkWirelessSsidEapOverride");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkWirelessSsidEapOverride200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/eapOverride', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessSsidFirewallL3FirewallRules operation.
     * @callback module:api/WirelessApi~getNetworkWirelessSsidFirewallL3FirewallRulesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the L3 firewall rules for an SSID on an MR network
     * Return the L3 firewall rules for an SSID on an MR network
     * @param {String} networkId 
     * @param {String} number 
     * @param {module:api/WirelessApi~getNetworkWirelessSsidFirewallL3FirewallRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkWirelessSsidFirewallL3FirewallRules(networkId, number, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessSsidFirewallL3FirewallRules");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling getNetworkWirelessSsidFirewallL3FirewallRules");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/firewall/l3FirewallRules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessSsidFirewallL7FirewallRules operation.
     * @callback module:api/WirelessApi~getNetworkWirelessSsidFirewallL7FirewallRulesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the L7 firewall rules for an SSID on an MR network
     * Return the L7 firewall rules for an SSID on an MR network
     * @param {String} networkId 
     * @param {String} number 
     * @param {module:api/WirelessApi~getNetworkWirelessSsidFirewallL7FirewallRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkWirelessSsidFirewallL7FirewallRules(networkId, number, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessSsidFirewallL7FirewallRules");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling getNetworkWirelessSsidFirewallL7FirewallRules");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/firewall/l7FirewallRules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessSsidHotspot20 operation.
     * @callback module:api/WirelessApi~getNetworkWirelessSsidHotspot20Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the Hotspot 2.0 settings for an SSID
     * Return the Hotspot 2.0 settings for an SSID
     * @param {String} networkId 
     * @param {String} number 
     * @param {module:api/WirelessApi~getNetworkWirelessSsidHotspot20Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkWirelessSsidHotspot20(networkId, number, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessSsidHotspot20");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling getNetworkWirelessSsidHotspot20");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/hotspot20', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessSsidIdentityPsk operation.
     * @callback module:api/WirelessApi~getNetworkWirelessSsidIdentityPskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkWirelessSsidIdentityPsks200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return an Identity PSK
     * Return an Identity PSK
     * @param {String} networkId 
     * @param {String} number 
     * @param {String} identityPskId 
     * @param {module:api/WirelessApi~getNetworkWirelessSsidIdentityPskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkWirelessSsidIdentityPsks200ResponseInner}
     */
    getNetworkWirelessSsidIdentityPsk(networkId, number, identityPskId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessSsidIdentityPsk");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling getNetworkWirelessSsidIdentityPsk");
      }
      // verify the required parameter 'identityPskId' is set
      if (identityPskId === undefined || identityPskId === null) {
        throw new Error("Missing the required parameter 'identityPskId' when calling getNetworkWirelessSsidIdentityPsk");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number,
        'identityPskId': identityPskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkWirelessSsidIdentityPsks200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/identityPsks/{identityPskId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessSsidIdentityPsks operation.
     * @callback module:api/WirelessApi~getNetworkWirelessSsidIdentityPsksCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkWirelessSsidIdentityPsks200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all Identity PSKs in a wireless network
     * List all Identity PSKs in a wireless network
     * @param {String} networkId 
     * @param {String} number 
     * @param {module:api/WirelessApi~getNetworkWirelessSsidIdentityPsksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkWirelessSsidIdentityPsks200ResponseInner>}
     */
    getNetworkWirelessSsidIdentityPsks(networkId, number, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessSsidIdentityPsks");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling getNetworkWirelessSsidIdentityPsks");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkWirelessSsidIdentityPsks200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/identityPsks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessSsidSchedules operation.
     * @callback module:api/WirelessApi~getNetworkWirelessSsidSchedulesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the outage schedule for the SSID
     * List the outage schedule for the SSID
     * @param {String} networkId 
     * @param {String} number 
     * @param {module:api/WirelessApi~getNetworkWirelessSsidSchedulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkWirelessSsidSchedules(networkId, number, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessSsidSchedules");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling getNetworkWirelessSsidSchedules");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/schedules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessSsidSplashSettings operation.
     * @callback module:api/WirelessApi~getNetworkWirelessSsidSplashSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkWirelessSsidSplashSettings200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Display the splash page settings for the given SSID
     * Display the splash page settings for the given SSID
     * @param {String} networkId 
     * @param {String} number 
     * @param {module:api/WirelessApi~getNetworkWirelessSsidSplashSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkWirelessSsidSplashSettings200Response}
     */
    getNetworkWirelessSsidSplashSettings(networkId, number, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessSsidSplashSettings");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling getNetworkWirelessSsidSplashSettings");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkWirelessSsidSplashSettings200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/splash/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessSsidTrafficShapingRules operation.
     * @callback module:api/WirelessApi~getNetworkWirelessSsidTrafficShapingRulesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Display the traffic shaping settings for a SSID on an MR network
     * Display the traffic shaping settings for a SSID on an MR network
     * @param {String} networkId 
     * @param {String} number 
     * @param {module:api/WirelessApi~getNetworkWirelessSsidTrafficShapingRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkWirelessSsidTrafficShapingRules(networkId, number, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessSsidTrafficShapingRules");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling getNetworkWirelessSsidTrafficShapingRules");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/trafficShaping/rules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessSsidVpn operation.
     * @callback module:api/WirelessApi~getNetworkWirelessSsidVpnCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the VPN settings for the SSID.
     * List the VPN settings for the SSID.
     * @param {String} networkId 
     * @param {String} number 
     * @param {module:api/WirelessApi~getNetworkWirelessSsidVpnCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkWirelessSsidVpn(networkId, number, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessSsidVpn");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling getNetworkWirelessSsidVpn");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/vpn', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessSsids operation.
     * @callback module:api/WirelessApi~getNetworkWirelessSsidsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the MR SSIDs in a network
     * List the MR SSIDs in a network
     * @param {String} networkId 
     * @param {module:api/WirelessApi~getNetworkWirelessSsidsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkWirelessSsids(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessSsids");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessUsageHistory operation.
     * @callback module:api/WirelessApi~getNetworkWirelessUsageHistoryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkWirelessUsageHistory200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return AP usage over time for a device or network client
     * Return AP usage over time for a device or network client
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 7 days.
     * @param {Number} [resolution] The time resolution in seconds for returned data. The valid resolutions are: 300, 600, 1200, 3600, 14400, 86400. The default is 86400.
     * @param {Boolean} [autoResolution] Automatically select a data resolution based on the given timespan; this overrides the value specified by the 'resolution' parameter. The default setting is false.
     * @param {String} [clientId] Filter results by network client to return per-device AP usage over time inner joined by the queried client's connection history.
     * @param {String} [deviceSerial] Filter results by device. Requires :band.
     * @param {String} [apTag] Filter results by AP tag; either :clientId or :deviceSerial must be jointly specified.
     * @param {module:model/String} [band] Filter results by band (either '2.4', '5' or '6').
     * @param {Number} [ssid] Filter results by SSID number.
     * @param {module:api/WirelessApi~getNetworkWirelessUsageHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkWirelessUsageHistory200ResponseInner>}
     */
    getNetworkWirelessUsageHistory(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessUsageHistory");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan'],
        'resolution': opts['resolution'],
        'autoResolution': opts['autoResolution'],
        'clientId': opts['clientId'],
        'deviceSerial': opts['deviceSerial'],
        'apTag': opts['apTag'],
        'band': opts['band'],
        'ssid': opts['ssid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkWirelessUsageHistory200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/usageHistory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationWirelessDevicesEthernetStatuses operation.
     * @callback module:api/WirelessApi~getOrganizationWirelessDevicesEthernetStatusesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationWirelessDevicesEthernetStatuses200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Endpoint to see power status for wireless devices
     * Endpoint to see power status for wireless devices
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {Array.<String>} [networkIds] A list of Meraki network IDs to filter results to contain only specified networks. E.g.: networkIds[]=N_12345678&networkIds[]=L_3456
     * @param {module:api/WirelessApi~getOrganizationWirelessDevicesEthernetStatusesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationWirelessDevicesEthernetStatuses200ResponseInner>}
     */
    getOrganizationWirelessDevicesEthernetStatuses(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationWirelessDevicesEthernetStatuses");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        'networkIds': this.apiClient.buildCollectionParam(opts['networkIds'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationWirelessDevicesEthernetStatuses200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/wireless/devices/ethernet/statuses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeviceWirelessBluetoothSettings operation.
     * @callback module:api/WirelessApi~updateDeviceWirelessBluetoothSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDeviceWirelessBluetoothSettings200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the bluetooth settings for a wireless device
     * Update the bluetooth settings for a wireless device
     * @param {String} serial 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateDeviceWirelessBluetoothSettingsRequest} [updateDeviceWirelessBluetoothSettingsRequest] 
     * @param {module:api/WirelessApi~updateDeviceWirelessBluetoothSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDeviceWirelessBluetoothSettings200Response}
     */
    updateDeviceWirelessBluetoothSettings(serial, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateDeviceWirelessBluetoothSettingsRequest'];
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling updateDeviceWirelessBluetoothSettings");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetDeviceWirelessBluetoothSettings200Response;
      return this.apiClient.callApi(
        '/devices/{serial}/wireless/bluetooth/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeviceWirelessRadioSettings operation.
     * @callback module:api/WirelessApi~updateDeviceWirelessRadioSettingsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the radio settings of a device
     * Update the radio settings of a device
     * @param {String} serial 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateDeviceWirelessRadioSettingsRequest} [updateDeviceWirelessRadioSettingsRequest] 
     * @param {module:api/WirelessApi~updateDeviceWirelessRadioSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateDeviceWirelessRadioSettings(serial, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateDeviceWirelessRadioSettingsRequest'];
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling updateDeviceWirelessRadioSettings");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/wireless/radio/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkWirelessAlternateManagementInterface operation.
     * @callback module:api/WirelessApi~updateNetworkWirelessAlternateManagementInterfaceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update alternate management interface and device static IP
     * Update alternate management interface and device static IP
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkWirelessAlternateManagementInterfaceRequest} [updateNetworkWirelessAlternateManagementInterfaceRequest] 
     * @param {module:api/WirelessApi~updateNetworkWirelessAlternateManagementInterfaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkWirelessAlternateManagementInterface(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkWirelessAlternateManagementInterfaceRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkWirelessAlternateManagementInterface");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/alternateManagementInterface', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkWirelessBilling operation.
     * @callback module:api/WirelessApi~updateNetworkWirelessBillingCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the billing settings
     * Update the billing settings
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkWirelessBillingRequest} [updateNetworkWirelessBillingRequest] 
     * @param {module:api/WirelessApi~updateNetworkWirelessBillingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkWirelessBilling(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkWirelessBillingRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkWirelessBilling");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/billing', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkWirelessBluetoothSettings operation.
     * @callback module:api/WirelessApi~updateNetworkWirelessBluetoothSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkWirelessBluetoothSettings200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the Bluetooth settings for a network
     * Update the Bluetooth settings for a network. See the docs page for <a href=\"https://documentation.meraki.com/MR/Bluetooth/Bluetooth_Low_Energy_(BLE)\">Bluetooth settings</a>.
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkWirelessBluetoothSettingsRequest} [updateNetworkWirelessBluetoothSettingsRequest] 
     * @param {module:api/WirelessApi~updateNetworkWirelessBluetoothSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkWirelessBluetoothSettings200Response}
     */
    updateNetworkWirelessBluetoothSettings(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkWirelessBluetoothSettingsRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkWirelessBluetoothSettings");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkWirelessBluetoothSettings200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/bluetooth/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkWirelessRfProfile operation.
     * @callback module:api/WirelessApi~updateNetworkWirelessRfProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateNetworkWirelessRfProfile201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates specified RF profile for this network
     * Updates specified RF profile for this network
     * @param {String} networkId 
     * @param {String} rfProfileId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkWirelessRfProfileRequest} [updateNetworkWirelessRfProfileRequest] 
     * @param {module:api/WirelessApi~updateNetworkWirelessRfProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateNetworkWirelessRfProfile201Response}
     */
    updateNetworkWirelessRfProfile(networkId, rfProfileId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkWirelessRfProfileRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkWirelessRfProfile");
      }
      // verify the required parameter 'rfProfileId' is set
      if (rfProfileId === undefined || rfProfileId === null) {
        throw new Error("Missing the required parameter 'rfProfileId' when calling updateNetworkWirelessRfProfile");
      }

      let pathParams = {
        'networkId': networkId,
        'rfProfileId': rfProfileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateNetworkWirelessRfProfile201Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/rfProfiles/{rfProfileId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkWirelessSettings operation.
     * @callback module:api/WirelessApi~updateNetworkWirelessSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkWirelessSettings200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the wireless settings for a network
     * Update the wireless settings for a network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkWirelessSettingsRequest} [updateNetworkWirelessSettingsRequest] 
     * @param {module:api/WirelessApi~updateNetworkWirelessSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkWirelessSettings200Response}
     */
    updateNetworkWirelessSettings(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkWirelessSettingsRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkWirelessSettings");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkWirelessSettings200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkWirelessSsid operation.
     * @callback module:api/WirelessApi~updateNetworkWirelessSsidCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the attributes of an MR SSID
     * Update the attributes of an MR SSID
     * @param {String} networkId 
     * @param {String} number 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkWirelessSsidRequest} [updateNetworkWirelessSsidRequest] 
     * @param {module:api/WirelessApi~updateNetworkWirelessSsidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkWirelessSsid(networkId, number, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkWirelessSsidRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkWirelessSsid");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling updateNetworkWirelessSsid");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkWirelessSsidBonjourForwarding operation.
     * @callback module:api/WirelessApi~updateNetworkWirelessSsidBonjourForwardingCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the bonjour forwarding setting and rules for the SSID
     * Update the bonjour forwarding setting and rules for the SSID
     * @param {String} networkId 
     * @param {String} number 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkWirelessSsidBonjourForwardingRequest} [updateNetworkWirelessSsidBonjourForwardingRequest] 
     * @param {module:api/WirelessApi~updateNetworkWirelessSsidBonjourForwardingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkWirelessSsidBonjourForwarding(networkId, number, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkWirelessSsidBonjourForwardingRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkWirelessSsidBonjourForwarding");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling updateNetworkWirelessSsidBonjourForwarding");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/bonjourForwarding', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkWirelessSsidDeviceTypeGroupPolicies operation.
     * @callback module:api/WirelessApi~updateNetworkWirelessSsidDeviceTypeGroupPoliciesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the device type group policies for the SSID
     * Update the device type group policies for the SSID
     * @param {String} networkId 
     * @param {String} number 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesRequest} [updateNetworkWirelessSsidDeviceTypeGroupPoliciesRequest] 
     * @param {module:api/WirelessApi~updateNetworkWirelessSsidDeviceTypeGroupPoliciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkWirelessSsidDeviceTypeGroupPolicies(networkId, number, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkWirelessSsidDeviceTypeGroupPoliciesRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkWirelessSsidDeviceTypeGroupPolicies");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling updateNetworkWirelessSsidDeviceTypeGroupPolicies");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/deviceTypeGroupPolicies', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkWirelessSsidEapOverride operation.
     * @callback module:api/WirelessApi~updateNetworkWirelessSsidEapOverrideCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkWirelessSsidEapOverride200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the EAP overridden parameters for an SSID.
     * Update the EAP overridden parameters for an SSID.
     * @param {String} networkId 
     * @param {String} number 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkWirelessSsidEapOverrideRequest} [updateNetworkWirelessSsidEapOverrideRequest] 
     * @param {module:api/WirelessApi~updateNetworkWirelessSsidEapOverrideCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkWirelessSsidEapOverride200Response}
     */
    updateNetworkWirelessSsidEapOverride(networkId, number, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkWirelessSsidEapOverrideRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkWirelessSsidEapOverride");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling updateNetworkWirelessSsidEapOverride");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkWirelessSsidEapOverride200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/eapOverride', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkWirelessSsidFirewallL3FirewallRules operation.
     * @callback module:api/WirelessApi~updateNetworkWirelessSsidFirewallL3FirewallRulesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the L3 firewall rules of an SSID on an MR network
     * Update the L3 firewall rules of an SSID on an MR network
     * @param {String} networkId 
     * @param {String} number 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequest} [updateNetworkWirelessSsidFirewallL3FirewallRulesRequest] 
     * @param {module:api/WirelessApi~updateNetworkWirelessSsidFirewallL3FirewallRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkWirelessSsidFirewallL3FirewallRules(networkId, number, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkWirelessSsidFirewallL3FirewallRulesRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkWirelessSsidFirewallL3FirewallRules");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling updateNetworkWirelessSsidFirewallL3FirewallRules");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/firewall/l3FirewallRules', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkWirelessSsidFirewallL7FirewallRules operation.
     * @callback module:api/WirelessApi~updateNetworkWirelessSsidFirewallL7FirewallRulesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the L7 firewall rules of an SSID on an MR network
     * Update the L7 firewall rules of an SSID on an MR network
     * @param {String} networkId 
     * @param {String} number 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkWirelessSsidFirewallL7FirewallRulesRequest} [updateNetworkWirelessSsidFirewallL7FirewallRulesRequest] 
     * @param {module:api/WirelessApi~updateNetworkWirelessSsidFirewallL7FirewallRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkWirelessSsidFirewallL7FirewallRules(networkId, number, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkWirelessSsidFirewallL7FirewallRulesRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkWirelessSsidFirewallL7FirewallRules");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling updateNetworkWirelessSsidFirewallL7FirewallRules");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/firewall/l7FirewallRules', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkWirelessSsidHotspot20 operation.
     * @callback module:api/WirelessApi~updateNetworkWirelessSsidHotspot20Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the Hotspot 2.0 settings of an SSID
     * Update the Hotspot 2.0 settings of an SSID
     * @param {String} networkId 
     * @param {String} number 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkWirelessSsidHotspot20Request} [updateNetworkWirelessSsidHotspot20Request] 
     * @param {module:api/WirelessApi~updateNetworkWirelessSsidHotspot20Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkWirelessSsidHotspot20(networkId, number, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkWirelessSsidHotspot20Request'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkWirelessSsidHotspot20");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling updateNetworkWirelessSsidHotspot20");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/hotspot20', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkWirelessSsidIdentityPsk operation.
     * @callback module:api/WirelessApi~updateNetworkWirelessSsidIdentityPskCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an Identity PSK
     * Update an Identity PSK
     * @param {String} networkId 
     * @param {String} number 
     * @param {String} identityPskId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkWirelessSsidIdentityPskRequest} [updateNetworkWirelessSsidIdentityPskRequest] 
     * @param {module:api/WirelessApi~updateNetworkWirelessSsidIdentityPskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkWirelessSsidIdentityPsk(networkId, number, identityPskId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkWirelessSsidIdentityPskRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkWirelessSsidIdentityPsk");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling updateNetworkWirelessSsidIdentityPsk");
      }
      // verify the required parameter 'identityPskId' is set
      if (identityPskId === undefined || identityPskId === null) {
        throw new Error("Missing the required parameter 'identityPskId' when calling updateNetworkWirelessSsidIdentityPsk");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number,
        'identityPskId': identityPskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/identityPsks/{identityPskId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkWirelessSsidSchedules operation.
     * @callback module:api/WirelessApi~updateNetworkWirelessSsidSchedulesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the outage schedule for the SSID
     * Update the outage schedule for the SSID
     * @param {String} networkId 
     * @param {String} number 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkWirelessSsidSchedulesRequest} [updateNetworkWirelessSsidSchedulesRequest] 
     * @param {module:api/WirelessApi~updateNetworkWirelessSsidSchedulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkWirelessSsidSchedules(networkId, number, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkWirelessSsidSchedulesRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkWirelessSsidSchedules");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling updateNetworkWirelessSsidSchedules");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/schedules', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkWirelessSsidSplashSettings operation.
     * @callback module:api/WirelessApi~updateNetworkWirelessSsidSplashSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkWirelessSsidSplashSettings200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify the splash page settings for the given SSID
     * Modify the splash page settings for the given SSID
     * @param {String} networkId 
     * @param {String} number 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkWirelessSsidSplashSettingsRequest} [updateNetworkWirelessSsidSplashSettingsRequest] 
     * @param {module:api/WirelessApi~updateNetworkWirelessSsidSplashSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkWirelessSsidSplashSettings200Response}
     */
    updateNetworkWirelessSsidSplashSettings(networkId, number, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkWirelessSsidSplashSettingsRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkWirelessSsidSplashSettings");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling updateNetworkWirelessSsidSplashSettings");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkWirelessSsidSplashSettings200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/splash/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkWirelessSsidTrafficShapingRules operation.
     * @callback module:api/WirelessApi~updateNetworkWirelessSsidTrafficShapingRulesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the traffic shaping settings for an SSID on an MR network
     * Update the traffic shaping settings for an SSID on an MR network
     * @param {String} networkId 
     * @param {String} number 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkWirelessSsidTrafficShapingRulesRequest} [updateNetworkWirelessSsidTrafficShapingRulesRequest] 
     * @param {module:api/WirelessApi~updateNetworkWirelessSsidTrafficShapingRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkWirelessSsidTrafficShapingRules(networkId, number, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkWirelessSsidTrafficShapingRulesRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkWirelessSsidTrafficShapingRules");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling updateNetworkWirelessSsidTrafficShapingRules");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/trafficShaping/rules', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkWirelessSsidVpn operation.
     * @callback module:api/WirelessApi~updateNetworkWirelessSsidVpnCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the VPN settings for the SSID
     * Update the VPN settings for the SSID
     * @param {String} networkId 
     * @param {String} number 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkWirelessSsidVpnRequest} [updateNetworkWirelessSsidVpnRequest] 
     * @param {module:api/WirelessApi~updateNetworkWirelessSsidVpnCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkWirelessSsidVpn(networkId, number, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkWirelessSsidVpnRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkWirelessSsidVpn");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling updateNetworkWirelessSsidVpn");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/vpn', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
