/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UpdateNetworkApplianceFirewallCellularFirewallRulesRequest from '../model/UpdateNetworkApplianceFirewallCellularFirewallRulesRequest';
import UpdateNetworkApplianceFirewallFirewalledServiceRequest from '../model/UpdateNetworkApplianceFirewallFirewalledServiceRequest';
import UpdateNetworkApplianceFirewallInboundFirewallRulesRequest from '../model/UpdateNetworkApplianceFirewallInboundFirewallRulesRequest';
import UpdateNetworkApplianceFirewallL7FirewallRulesRequest from '../model/UpdateNetworkApplianceFirewallL7FirewallRulesRequest';
import UpdateNetworkApplianceFirewallOneToManyNatRulesRequest from '../model/UpdateNetworkApplianceFirewallOneToManyNatRulesRequest';
import UpdateNetworkApplianceFirewallOneToOneNatRulesRequest from '../model/UpdateNetworkApplianceFirewallOneToOneNatRulesRequest';
import UpdateNetworkApplianceFirewallPortForwardingRulesRequest from '../model/UpdateNetworkApplianceFirewallPortForwardingRulesRequest';
import UpdateNetworkApplianceFirewallSettingsRequest from '../model/UpdateNetworkApplianceFirewallSettingsRequest';
import UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequest from '../model/UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequest';
import UpdateNetworkWirelessSsidFirewallL7FirewallRulesRequest from '../model/UpdateNetworkWirelessSsidFirewallL7FirewallRulesRequest';

/**
* Firewall service.
* @module api/FirewallApi
* @version 1.32.0
*/
export default class FirewallApi {

    /**
    * Constructs a new FirewallApi. 
    * @alias module:api/FirewallApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getNetworkApplianceFirewallCellularFirewallRules_1 operation.
     * @callback module:api/FirewallApi~getNetworkApplianceFirewallCellularFirewallRules_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the cellular firewall rules for an MX network
     * Return the cellular firewall rules for an MX network
     * @param {String} networkId 
     * @param {module:api/FirewallApi~getNetworkApplianceFirewallCellularFirewallRules_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkApplianceFirewallCellularFirewallRules_1(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceFirewallCellularFirewallRules_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/cellularFirewallRules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceFirewallFirewalledService_1 operation.
     * @callback module:api/FirewallApi~getNetworkApplianceFirewallFirewalledService_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the accessibility settings of the given service ('ICMP', 'web', or 'SNMP')
     * Return the accessibility settings of the given service ('ICMP', 'web', or 'SNMP')
     * @param {String} networkId 
     * @param {String} service 
     * @param {module:api/FirewallApi~getNetworkApplianceFirewallFirewalledService_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkApplianceFirewallFirewalledService_1(networkId, service, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceFirewallFirewalledService_1");
      }
      // verify the required parameter 'service' is set
      if (service === undefined || service === null) {
        throw new Error("Missing the required parameter 'service' when calling getNetworkApplianceFirewallFirewalledService_1");
      }

      let pathParams = {
        'networkId': networkId,
        'service': service
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/firewalledServices/{service}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceFirewallFirewalledServices_1 operation.
     * @callback module:api/FirewallApi~getNetworkApplianceFirewallFirewalledServices_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the appliance services and their accessibility rules
     * List the appliance services and their accessibility rules
     * @param {String} networkId 
     * @param {module:api/FirewallApi~getNetworkApplianceFirewallFirewalledServices_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkApplianceFirewallFirewalledServices_1(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceFirewallFirewalledServices_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/firewalledServices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceFirewallInboundCellularFirewallRules_1 operation.
     * @callback module:api/FirewallApi~getNetworkApplianceFirewallInboundCellularFirewallRules_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the inbound cellular firewall rules for an MX network
     * Return the inbound cellular firewall rules for an MX network
     * @param {String} networkId 
     * @param {module:api/FirewallApi~getNetworkApplianceFirewallInboundCellularFirewallRules_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkApplianceFirewallInboundCellularFirewallRules_1(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceFirewallInboundCellularFirewallRules_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/inboundCellularFirewallRules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceFirewallInboundFirewallRules_1 operation.
     * @callback module:api/FirewallApi~getNetworkApplianceFirewallInboundFirewallRules_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the inbound firewall rules for an MX network
     * Return the inbound firewall rules for an MX network
     * @param {String} networkId 
     * @param {module:api/FirewallApi~getNetworkApplianceFirewallInboundFirewallRules_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkApplianceFirewallInboundFirewallRules_1(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceFirewallInboundFirewallRules_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/inboundFirewallRules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceFirewallL3FirewallRules_1 operation.
     * @callback module:api/FirewallApi~getNetworkApplianceFirewallL3FirewallRules_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the L3 firewall rules for an MX network
     * Return the L3 firewall rules for an MX network
     * @param {String} networkId 
     * @param {module:api/FirewallApi~getNetworkApplianceFirewallL3FirewallRules_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkApplianceFirewallL3FirewallRules_1(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceFirewallL3FirewallRules_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/l3FirewallRules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceFirewallL7FirewallRulesApplicationCategories_1 operation.
     * @callback module:api/FirewallApi~getNetworkApplianceFirewallL7FirewallRulesApplicationCategories_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the L7 firewall application categories and their associated applications for an MX network
     * Return the L7 firewall application categories and their associated applications for an MX network
     * @param {String} networkId 
     * @param {module:api/FirewallApi~getNetworkApplianceFirewallL7FirewallRulesApplicationCategories_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkApplianceFirewallL7FirewallRulesApplicationCategories_1(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceFirewallL7FirewallRulesApplicationCategories_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/l7FirewallRules/applicationCategories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceFirewallL7FirewallRules_1 operation.
     * @callback module:api/FirewallApi~getNetworkApplianceFirewallL7FirewallRules_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the MX L7 firewall rules for an MX network
     * List the MX L7 firewall rules for an MX network
     * @param {String} networkId 
     * @param {module:api/FirewallApi~getNetworkApplianceFirewallL7FirewallRules_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkApplianceFirewallL7FirewallRules_1(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceFirewallL7FirewallRules_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/l7FirewallRules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceFirewallOneToManyNatRules_1 operation.
     * @callback module:api/FirewallApi~getNetworkApplianceFirewallOneToManyNatRules_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the 1:Many NAT mapping rules for an MX network
     * Return the 1:Many NAT mapping rules for an MX network
     * @param {String} networkId 
     * @param {module:api/FirewallApi~getNetworkApplianceFirewallOneToManyNatRules_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkApplianceFirewallOneToManyNatRules_1(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceFirewallOneToManyNatRules_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/oneToManyNatRules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceFirewallOneToOneNatRules_1 operation.
     * @callback module:api/FirewallApi~getNetworkApplianceFirewallOneToOneNatRules_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the 1:1 NAT mapping rules for an MX network
     * Return the 1:1 NAT mapping rules for an MX network
     * @param {String} networkId 
     * @param {module:api/FirewallApi~getNetworkApplianceFirewallOneToOneNatRules_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkApplianceFirewallOneToOneNatRules_1(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceFirewallOneToOneNatRules_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/oneToOneNatRules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceFirewallPortForwardingRules_1 operation.
     * @callback module:api/FirewallApi~getNetworkApplianceFirewallPortForwardingRules_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the port forwarding rules for an MX network
     * Return the port forwarding rules for an MX network
     * @param {String} networkId 
     * @param {module:api/FirewallApi~getNetworkApplianceFirewallPortForwardingRules_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkApplianceFirewallPortForwardingRules_1(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceFirewallPortForwardingRules_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/portForwardingRules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceFirewallSettings_1 operation.
     * @callback module:api/FirewallApi~getNetworkApplianceFirewallSettings_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the firewall settings for this network
     * Return the firewall settings for this network
     * @param {String} networkId 
     * @param {module:api/FirewallApi~getNetworkApplianceFirewallSettings_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkApplianceFirewallSettings_1(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceFirewallSettings_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessSsidFirewallL3FirewallRules_2 operation.
     * @callback module:api/FirewallApi~getNetworkWirelessSsidFirewallL3FirewallRules_2Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the L3 firewall rules for an SSID on an MR network
     * Return the L3 firewall rules for an SSID on an MR network
     * @param {String} networkId 
     * @param {String} number 
     * @param {module:api/FirewallApi~getNetworkWirelessSsidFirewallL3FirewallRules_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkWirelessSsidFirewallL3FirewallRules_2(networkId, number, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessSsidFirewallL3FirewallRules_2");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling getNetworkWirelessSsidFirewallL3FirewallRules_2");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/firewall/l3FirewallRules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessSsidFirewallL7FirewallRules_2 operation.
     * @callback module:api/FirewallApi~getNetworkWirelessSsidFirewallL7FirewallRules_2Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the L7 firewall rules for an SSID on an MR network
     * Return the L7 firewall rules for an SSID on an MR network
     * @param {String} networkId 
     * @param {String} number 
     * @param {module:api/FirewallApi~getNetworkWirelessSsidFirewallL7FirewallRules_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkWirelessSsidFirewallL7FirewallRules_2(networkId, number, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessSsidFirewallL7FirewallRules_2");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling getNetworkWirelessSsidFirewallL7FirewallRules_2");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/firewall/l7FirewallRules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceFirewallCellularFirewallRules_1 operation.
     * @callback module:api/FirewallApi~updateNetworkApplianceFirewallCellularFirewallRules_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the cellular firewall rules of an MX network
     * Update the cellular firewall rules of an MX network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkApplianceFirewallCellularFirewallRulesRequest} [updateNetworkApplianceFirewallCellularFirewallRulesRequest] 
     * @param {module:api/FirewallApi~updateNetworkApplianceFirewallCellularFirewallRules_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkApplianceFirewallCellularFirewallRules_1(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkApplianceFirewallCellularFirewallRulesRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceFirewallCellularFirewallRules_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/cellularFirewallRules', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceFirewallFirewalledService_1 operation.
     * @callback module:api/FirewallApi~updateNetworkApplianceFirewallFirewalledService_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the accessibility settings for the given service ('ICMP', 'web', or 'SNMP')
     * Updates the accessibility settings for the given service ('ICMP', 'web', or 'SNMP')
     * @param {String} networkId 
     * @param {String} service 
     * @param {module:model/UpdateNetworkApplianceFirewallFirewalledServiceRequest} updateNetworkApplianceFirewallFirewalledServiceRequest 
     * @param {module:api/FirewallApi~updateNetworkApplianceFirewallFirewalledService_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkApplianceFirewallFirewalledService_1(networkId, service, updateNetworkApplianceFirewallFirewalledServiceRequest, callback) {
      let postBody = updateNetworkApplianceFirewallFirewalledServiceRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceFirewallFirewalledService_1");
      }
      // verify the required parameter 'service' is set
      if (service === undefined || service === null) {
        throw new Error("Missing the required parameter 'service' when calling updateNetworkApplianceFirewallFirewalledService_1");
      }
      // verify the required parameter 'updateNetworkApplianceFirewallFirewalledServiceRequest' is set
      if (updateNetworkApplianceFirewallFirewalledServiceRequest === undefined || updateNetworkApplianceFirewallFirewalledServiceRequest === null) {
        throw new Error("Missing the required parameter 'updateNetworkApplianceFirewallFirewalledServiceRequest' when calling updateNetworkApplianceFirewallFirewalledService_1");
      }

      let pathParams = {
        'networkId': networkId,
        'service': service
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/firewalledServices/{service}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceFirewallInboundCellularFirewallRules_1 operation.
     * @callback module:api/FirewallApi~updateNetworkApplianceFirewallInboundCellularFirewallRules_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the inbound cellular firewall rules of an MX network
     * Update the inbound cellular firewall rules of an MX network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkApplianceFirewallCellularFirewallRulesRequest} [updateNetworkApplianceFirewallCellularFirewallRulesRequest] 
     * @param {module:api/FirewallApi~updateNetworkApplianceFirewallInboundCellularFirewallRules_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    updateNetworkApplianceFirewallInboundCellularFirewallRules_1(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkApplianceFirewallCellularFirewallRulesRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceFirewallInboundCellularFirewallRules_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/inboundCellularFirewallRules', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceFirewallInboundFirewallRules_1 operation.
     * @callback module:api/FirewallApi~updateNetworkApplianceFirewallInboundFirewallRules_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the inbound firewall rules of an MX network
     * Update the inbound firewall rules of an MX network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkApplianceFirewallInboundFirewallRulesRequest} [updateNetworkApplianceFirewallInboundFirewallRulesRequest] 
     * @param {module:api/FirewallApi~updateNetworkApplianceFirewallInboundFirewallRules_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkApplianceFirewallInboundFirewallRules_1(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkApplianceFirewallInboundFirewallRulesRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceFirewallInboundFirewallRules_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/inboundFirewallRules', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceFirewallL3FirewallRules_1 operation.
     * @callback module:api/FirewallApi~updateNetworkApplianceFirewallL3FirewallRules_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the L3 firewall rules of an MX network
     * Update the L3 firewall rules of an MX network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkApplianceFirewallInboundFirewallRulesRequest} [updateNetworkApplianceFirewallInboundFirewallRulesRequest] 
     * @param {module:api/FirewallApi~updateNetworkApplianceFirewallL3FirewallRules_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkApplianceFirewallL3FirewallRules_1(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkApplianceFirewallInboundFirewallRulesRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceFirewallL3FirewallRules_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/l3FirewallRules', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceFirewallL7FirewallRules_1 operation.
     * @callback module:api/FirewallApi~updateNetworkApplianceFirewallL7FirewallRules_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the MX L7 firewall rules for an MX network
     * Update the MX L7 firewall rules for an MX network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkApplianceFirewallL7FirewallRulesRequest} [updateNetworkApplianceFirewallL7FirewallRulesRequest] 
     * @param {module:api/FirewallApi~updateNetworkApplianceFirewallL7FirewallRules_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkApplianceFirewallL7FirewallRules_1(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkApplianceFirewallL7FirewallRulesRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceFirewallL7FirewallRules_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/l7FirewallRules', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceFirewallOneToManyNatRules_1 operation.
     * @callback module:api/FirewallApi~updateNetworkApplianceFirewallOneToManyNatRules_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the 1:Many NAT mapping rules for an MX network
     * Set the 1:Many NAT mapping rules for an MX network
     * @param {String} networkId 
     * @param {module:model/UpdateNetworkApplianceFirewallOneToManyNatRulesRequest} updateNetworkApplianceFirewallOneToManyNatRulesRequest 
     * @param {module:api/FirewallApi~updateNetworkApplianceFirewallOneToManyNatRules_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkApplianceFirewallOneToManyNatRules_1(networkId, updateNetworkApplianceFirewallOneToManyNatRulesRequest, callback) {
      let postBody = updateNetworkApplianceFirewallOneToManyNatRulesRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceFirewallOneToManyNatRules_1");
      }
      // verify the required parameter 'updateNetworkApplianceFirewallOneToManyNatRulesRequest' is set
      if (updateNetworkApplianceFirewallOneToManyNatRulesRequest === undefined || updateNetworkApplianceFirewallOneToManyNatRulesRequest === null) {
        throw new Error("Missing the required parameter 'updateNetworkApplianceFirewallOneToManyNatRulesRequest' when calling updateNetworkApplianceFirewallOneToManyNatRules_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/oneToManyNatRules', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceFirewallOneToOneNatRules_1 operation.
     * @callback module:api/FirewallApi~updateNetworkApplianceFirewallOneToOneNatRules_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the 1:1 NAT mapping rules for an MX network
     * Set the 1:1 NAT mapping rules for an MX network
     * @param {String} networkId 
     * @param {module:model/UpdateNetworkApplianceFirewallOneToOneNatRulesRequest} updateNetworkApplianceFirewallOneToOneNatRulesRequest 
     * @param {module:api/FirewallApi~updateNetworkApplianceFirewallOneToOneNatRules_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkApplianceFirewallOneToOneNatRules_1(networkId, updateNetworkApplianceFirewallOneToOneNatRulesRequest, callback) {
      let postBody = updateNetworkApplianceFirewallOneToOneNatRulesRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceFirewallOneToOneNatRules_1");
      }
      // verify the required parameter 'updateNetworkApplianceFirewallOneToOneNatRulesRequest' is set
      if (updateNetworkApplianceFirewallOneToOneNatRulesRequest === undefined || updateNetworkApplianceFirewallOneToOneNatRulesRequest === null) {
        throw new Error("Missing the required parameter 'updateNetworkApplianceFirewallOneToOneNatRulesRequest' when calling updateNetworkApplianceFirewallOneToOneNatRules_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/oneToOneNatRules', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceFirewallPortForwardingRules_1 operation.
     * @callback module:api/FirewallApi~updateNetworkApplianceFirewallPortForwardingRules_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the port forwarding rules for an MX network
     * Update the port forwarding rules for an MX network
     * @param {String} networkId 
     * @param {module:model/UpdateNetworkApplianceFirewallPortForwardingRulesRequest} updateNetworkApplianceFirewallPortForwardingRulesRequest 
     * @param {module:api/FirewallApi~updateNetworkApplianceFirewallPortForwardingRules_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkApplianceFirewallPortForwardingRules_1(networkId, updateNetworkApplianceFirewallPortForwardingRulesRequest, callback) {
      let postBody = updateNetworkApplianceFirewallPortForwardingRulesRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceFirewallPortForwardingRules_1");
      }
      // verify the required parameter 'updateNetworkApplianceFirewallPortForwardingRulesRequest' is set
      if (updateNetworkApplianceFirewallPortForwardingRulesRequest === undefined || updateNetworkApplianceFirewallPortForwardingRulesRequest === null) {
        throw new Error("Missing the required parameter 'updateNetworkApplianceFirewallPortForwardingRulesRequest' when calling updateNetworkApplianceFirewallPortForwardingRules_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/portForwardingRules', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceFirewallSettings_1 operation.
     * @callback module:api/FirewallApi~updateNetworkApplianceFirewallSettings_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the firewall settings for this network
     * Update the firewall settings for this network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkApplianceFirewallSettingsRequest} [updateNetworkApplianceFirewallSettingsRequest] 
     * @param {module:api/FirewallApi~updateNetworkApplianceFirewallSettings_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkApplianceFirewallSettings_1(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkApplianceFirewallSettingsRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceFirewallSettings_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkWirelessSsidFirewallL3FirewallRules_2 operation.
     * @callback module:api/FirewallApi~updateNetworkWirelessSsidFirewallL3FirewallRules_2Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the L3 firewall rules of an SSID on an MR network
     * Update the L3 firewall rules of an SSID on an MR network
     * @param {String} networkId 
     * @param {String} number 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequest} [updateNetworkWirelessSsidFirewallL3FirewallRulesRequest] 
     * @param {module:api/FirewallApi~updateNetworkWirelessSsidFirewallL3FirewallRules_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkWirelessSsidFirewallL3FirewallRules_2(networkId, number, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkWirelessSsidFirewallL3FirewallRulesRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkWirelessSsidFirewallL3FirewallRules_2");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling updateNetworkWirelessSsidFirewallL3FirewallRules_2");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/firewall/l3FirewallRules', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkWirelessSsidFirewallL7FirewallRules_2 operation.
     * @callback module:api/FirewallApi~updateNetworkWirelessSsidFirewallL7FirewallRules_2Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the L7 firewall rules of an SSID on an MR network
     * Update the L7 firewall rules of an SSID on an MR network
     * @param {String} networkId 
     * @param {String} number 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkWirelessSsidFirewallL7FirewallRulesRequest} [updateNetworkWirelessSsidFirewallL7FirewallRulesRequest] 
     * @param {module:api/FirewallApi~updateNetworkWirelessSsidFirewallL7FirewallRules_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkWirelessSsidFirewallL7FirewallRules_2(networkId, number, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkWirelessSsidFirewallL7FirewallRulesRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkWirelessSsidFirewallL7FirewallRules_2");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling updateNetworkWirelessSsidFirewallL7FirewallRules_2");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/firewall/l7FirewallRules', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
