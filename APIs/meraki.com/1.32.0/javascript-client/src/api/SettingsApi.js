/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetDeviceApplianceUplinksSettings200Response from '../model/GetDeviceApplianceUplinksSettings200Response';
import GetDeviceWirelessBluetoothSettings200Response from '../model/GetDeviceWirelessBluetoothSettings200Response';
import GetNetworkApplianceSettings200Response from '../model/GetNetworkApplianceSettings200Response';
import GetNetworkSettings200Response from '../model/GetNetworkSettings200Response';
import GetNetworkSwitchSettings200Response from '../model/GetNetworkSwitchSettings200Response';
import GetNetworkWirelessBluetoothSettings200Response from '../model/GetNetworkWirelessBluetoothSettings200Response';
import GetNetworkWirelessSettings200Response from '../model/GetNetworkWirelessSettings200Response';
import GetNetworkWirelessSsidSplashSettings200Response from '../model/GetNetworkWirelessSsidSplashSettings200Response';
import UpdateDeviceApplianceUplinksSettingsRequest from '../model/UpdateDeviceApplianceUplinksSettingsRequest';
import UpdateDeviceCameraVideoSettingsRequest from '../model/UpdateDeviceCameraVideoSettingsRequest';
import UpdateDeviceWirelessBluetoothSettingsRequest from '../model/UpdateDeviceWirelessBluetoothSettingsRequest';
import UpdateDeviceWirelessRadioSettingsRequest from '../model/UpdateDeviceWirelessRadioSettingsRequest';
import UpdateNetworkAlertsSettingsRequest from '../model/UpdateNetworkAlertsSettingsRequest';
import UpdateNetworkApplianceFirewallSettingsRequest from '../model/UpdateNetworkApplianceFirewallSettingsRequest';
import UpdateNetworkApplianceSettingsRequest from '../model/UpdateNetworkApplianceSettingsRequest';
import UpdateNetworkApplianceVlansSettingsRequest from '../model/UpdateNetworkApplianceVlansSettingsRequest';
import UpdateNetworkSettingsRequest from '../model/UpdateNetworkSettingsRequest';
import UpdateNetworkSwitchSettingsRequest from '../model/UpdateNetworkSwitchSettingsRequest';
import UpdateNetworkWirelessBluetoothSettingsRequest from '../model/UpdateNetworkWirelessBluetoothSettingsRequest';
import UpdateNetworkWirelessSettingsRequest from '../model/UpdateNetworkWirelessSettingsRequest';
import UpdateNetworkWirelessSsidSplashSettingsRequest from '../model/UpdateNetworkWirelessSsidSplashSettingsRequest';
import UpdateOrganizationAdaptivePolicySettingsRequest from '../model/UpdateOrganizationAdaptivePolicySettingsRequest';

/**
* Settings service.
* @module api/SettingsApi
* @version 1.32.0
*/
export default class SettingsApi {

    /**
    * Constructs a new SettingsApi. 
    * @alias module:api/SettingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getDeviceApplianceUplinksSettings_2 operation.
     * @callback module:api/SettingsApi~getDeviceApplianceUplinksSettings_2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDeviceApplianceUplinksSettings200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the uplink settings for an MX appliance
     * Return the uplink settings for an MX appliance
     * @param {String} serial 
     * @param {module:api/SettingsApi~getDeviceApplianceUplinksSettings_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDeviceApplianceUplinksSettings200Response}
     */
    getDeviceApplianceUplinksSettings_2(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceApplianceUplinksSettings_2");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDeviceApplianceUplinksSettings200Response;
      return this.apiClient.callApi(
        '/devices/{serial}/appliance/uplinks/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceCameraVideoSettings_2 operation.
     * @callback module:api/SettingsApi~getDeviceCameraVideoSettings_2Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns video settings for the given camera
     * Returns video settings for the given camera
     * @param {String} serial 
     * @param {module:api/SettingsApi~getDeviceCameraVideoSettings_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getDeviceCameraVideoSettings_2(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceCameraVideoSettings_2");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/camera/video/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceWirelessBluetoothSettings_2 operation.
     * @callback module:api/SettingsApi~getDeviceWirelessBluetoothSettings_2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDeviceWirelessBluetoothSettings200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the bluetooth settings for a wireless device
     * Return the bluetooth settings for a wireless device
     * @param {String} serial 
     * @param {module:api/SettingsApi~getDeviceWirelessBluetoothSettings_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDeviceWirelessBluetoothSettings200Response}
     */
    getDeviceWirelessBluetoothSettings_2(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceWirelessBluetoothSettings_2");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDeviceWirelessBluetoothSettings200Response;
      return this.apiClient.callApi(
        '/devices/{serial}/wireless/bluetooth/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceWirelessRadioSettings_2 operation.
     * @callback module:api/SettingsApi~getDeviceWirelessRadioSettings_2Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the radio settings of a device
     * Return the radio settings of a device
     * @param {String} serial 
     * @param {module:api/SettingsApi~getDeviceWirelessRadioSettings_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getDeviceWirelessRadioSettings_2(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceWirelessRadioSettings_2");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/wireless/radio/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkAlertsSettings_2 operation.
     * @callback module:api/SettingsApi~getNetworkAlertsSettings_2Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the alert configuration for this network
     * Return the alert configuration for this network
     * @param {String} networkId 
     * @param {module:api/SettingsApi~getNetworkAlertsSettings_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkAlertsSettings_2(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkAlertsSettings_2");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/alerts/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceFirewallSettings_2 operation.
     * @callback module:api/SettingsApi~getNetworkApplianceFirewallSettings_2Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the firewall settings for this network
     * Return the firewall settings for this network
     * @param {String} networkId 
     * @param {module:api/SettingsApi~getNetworkApplianceFirewallSettings_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkApplianceFirewallSettings_2(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceFirewallSettings_2");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceSettings_1 operation.
     * @callback module:api/SettingsApi~getNetworkApplianceSettings_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkApplianceSettings200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the appliance settings for a network
     * Return the appliance settings for a network
     * @param {String} networkId 
     * @param {module:api/SettingsApi~getNetworkApplianceSettings_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkApplianceSettings200Response}
     */
    getNetworkApplianceSettings_1(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceSettings_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkApplianceSettings200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceVlansSettings_2 operation.
     * @callback module:api/SettingsApi~getNetworkApplianceVlansSettings_2Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the enabled status of VLANs for the network
     * Returns the enabled status of VLANs for the network
     * @param {String} networkId 
     * @param {module:api/SettingsApi~getNetworkApplianceVlansSettings_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkApplianceVlansSettings_2(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceVlansSettings_2");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/vlans/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSettings_1 operation.
     * @callback module:api/SettingsApi~getNetworkSettings_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkSettings200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the settings for a network
     * Return the settings for a network
     * @param {String} networkId 
     * @param {module:api/SettingsApi~getNetworkSettings_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkSettings200Response}
     */
    getNetworkSettings_1(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSettings_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkSettings200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchSettings_1 operation.
     * @callback module:api/SettingsApi~getNetworkSwitchSettings_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkSwitchSettings200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the switch network settings
     * Returns the switch network settings
     * @param {String} networkId 
     * @param {module:api/SettingsApi~getNetworkSwitchSettings_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkSwitchSettings200Response}
     */
    getNetworkSwitchSettings_1(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchSettings_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkSwitchSettings200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessBluetoothSettings_2 operation.
     * @callback module:api/SettingsApi~getNetworkWirelessBluetoothSettings_2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkWirelessBluetoothSettings200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the Bluetooth settings for a network. <a href=\"https://documentation.meraki.com/MR/Bluetooth/Bluetooth_Low_Energy_(BLE)\">Bluetooth settings</a> must be enabled on the network.
     * Return the Bluetooth settings for a network. <a href=\"https://documentation.meraki.com/MR/Bluetooth/Bluetooth_Low_Energy_(BLE)\">Bluetooth settings</a> must be enabled on the network.
     * @param {String} networkId 
     * @param {module:api/SettingsApi~getNetworkWirelessBluetoothSettings_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkWirelessBluetoothSettings200Response}
     */
    getNetworkWirelessBluetoothSettings_2(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessBluetoothSettings_2");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkWirelessBluetoothSettings200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/bluetooth/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessSettings_1 operation.
     * @callback module:api/SettingsApi~getNetworkWirelessSettings_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkWirelessSettings200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the wireless settings for a network
     * Return the wireless settings for a network
     * @param {String} networkId 
     * @param {module:api/SettingsApi~getNetworkWirelessSettings_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkWirelessSettings200Response}
     */
    getNetworkWirelessSettings_1(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessSettings_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkWirelessSettings200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessSsidSplashSettings_3 operation.
     * @callback module:api/SettingsApi~getNetworkWirelessSsidSplashSettings_3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkWirelessSsidSplashSettings200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Display the splash page settings for the given SSID
     * Display the splash page settings for the given SSID
     * @param {String} networkId 
     * @param {String} number 
     * @param {module:api/SettingsApi~getNetworkWirelessSsidSplashSettings_3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkWirelessSsidSplashSettings200Response}
     */
    getNetworkWirelessSsidSplashSettings_3(networkId, number, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessSsidSplashSettings_3");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling getNetworkWirelessSsidSplashSettings_3");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkWirelessSsidSplashSettings200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/splash/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationAdaptivePolicySettings_2 operation.
     * @callback module:api/SettingsApi~getOrganizationAdaptivePolicySettings_2Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns global adaptive policy settings in an organization
     * Returns global adaptive policy settings in an organization
     * @param {String} organizationId 
     * @param {module:api/SettingsApi~getOrganizationAdaptivePolicySettings_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getOrganizationAdaptivePolicySettings_2(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationAdaptivePolicySettings_2");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/adaptivePolicy/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeviceApplianceUplinksSettings_2 operation.
     * @callback module:api/SettingsApi~updateDeviceApplianceUplinksSettings_2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDeviceApplianceUplinksSettings200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the uplink settings for an MX appliance
     * Update the uplink settings for an MX appliance
     * @param {String} serial 
     * @param {module:model/UpdateDeviceApplianceUplinksSettingsRequest} updateDeviceApplianceUplinksSettingsRequest 
     * @param {module:api/SettingsApi~updateDeviceApplianceUplinksSettings_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDeviceApplianceUplinksSettings200Response}
     */
    updateDeviceApplianceUplinksSettings_2(serial, updateDeviceApplianceUplinksSettingsRequest, callback) {
      let postBody = updateDeviceApplianceUplinksSettingsRequest;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling updateDeviceApplianceUplinksSettings_2");
      }
      // verify the required parameter 'updateDeviceApplianceUplinksSettingsRequest' is set
      if (updateDeviceApplianceUplinksSettingsRequest === undefined || updateDeviceApplianceUplinksSettingsRequest === null) {
        throw new Error("Missing the required parameter 'updateDeviceApplianceUplinksSettingsRequest' when calling updateDeviceApplianceUplinksSettings_2");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetDeviceApplianceUplinksSettings200Response;
      return this.apiClient.callApi(
        '/devices/{serial}/appliance/uplinks/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeviceCameraVideoSettings_2 operation.
     * @callback module:api/SettingsApi~updateDeviceCameraVideoSettings_2Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update video settings for the given camera
     * Update video settings for the given camera
     * @param {String} serial 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateDeviceCameraVideoSettingsRequest} [updateDeviceCameraVideoSettingsRequest] 
     * @param {module:api/SettingsApi~updateDeviceCameraVideoSettings_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateDeviceCameraVideoSettings_2(serial, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateDeviceCameraVideoSettingsRequest'];
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling updateDeviceCameraVideoSettings_2");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/camera/video/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeviceWirelessBluetoothSettings_2 operation.
     * @callback module:api/SettingsApi~updateDeviceWirelessBluetoothSettings_2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDeviceWirelessBluetoothSettings200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the bluetooth settings for a wireless device
     * Update the bluetooth settings for a wireless device
     * @param {String} serial 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateDeviceWirelessBluetoothSettingsRequest} [updateDeviceWirelessBluetoothSettingsRequest] 
     * @param {module:api/SettingsApi~updateDeviceWirelessBluetoothSettings_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDeviceWirelessBluetoothSettings200Response}
     */
    updateDeviceWirelessBluetoothSettings_2(serial, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateDeviceWirelessBluetoothSettingsRequest'];
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling updateDeviceWirelessBluetoothSettings_2");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetDeviceWirelessBluetoothSettings200Response;
      return this.apiClient.callApi(
        '/devices/{serial}/wireless/bluetooth/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeviceWirelessRadioSettings_2 operation.
     * @callback module:api/SettingsApi~updateDeviceWirelessRadioSettings_2Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the radio settings of a device
     * Update the radio settings of a device
     * @param {String} serial 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateDeviceWirelessRadioSettingsRequest} [updateDeviceWirelessRadioSettingsRequest] 
     * @param {module:api/SettingsApi~updateDeviceWirelessRadioSettings_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateDeviceWirelessRadioSettings_2(serial, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateDeviceWirelessRadioSettingsRequest'];
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling updateDeviceWirelessRadioSettings_2");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/wireless/radio/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkAlertsSettings_2 operation.
     * @callback module:api/SettingsApi~updateNetworkAlertsSettings_2Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the alert configuration for this network
     * Update the alert configuration for this network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkAlertsSettingsRequest} [updateNetworkAlertsSettingsRequest] 
     * @param {module:api/SettingsApi~updateNetworkAlertsSettings_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkAlertsSettings_2(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkAlertsSettingsRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkAlertsSettings_2");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/alerts/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceFirewallSettings_2 operation.
     * @callback module:api/SettingsApi~updateNetworkApplianceFirewallSettings_2Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the firewall settings for this network
     * Update the firewall settings for this network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkApplianceFirewallSettingsRequest} [updateNetworkApplianceFirewallSettingsRequest] 
     * @param {module:api/SettingsApi~updateNetworkApplianceFirewallSettings_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkApplianceFirewallSettings_2(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkApplianceFirewallSettingsRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceFirewallSettings_2");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceSettings_1 operation.
     * @callback module:api/SettingsApi~updateNetworkApplianceSettings_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkApplianceSettings200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the appliance settings for a network
     * Update the appliance settings for a network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkApplianceSettingsRequest} [updateNetworkApplianceSettingsRequest] 
     * @param {module:api/SettingsApi~updateNetworkApplianceSettings_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkApplianceSettings200Response}
     */
    updateNetworkApplianceSettings_1(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkApplianceSettingsRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceSettings_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkApplianceSettings200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceVlansSettings_2 operation.
     * @callback module:api/SettingsApi~updateNetworkApplianceVlansSettings_2Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable/Disable VLANs for the given network
     * Enable/Disable VLANs for the given network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkApplianceVlansSettingsRequest} [updateNetworkApplianceVlansSettingsRequest] 
     * @param {module:api/SettingsApi~updateNetworkApplianceVlansSettings_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkApplianceVlansSettings_2(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkApplianceVlansSettingsRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceVlansSettings_2");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/vlans/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSettings_1 operation.
     * @callback module:api/SettingsApi~updateNetworkSettings_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkSettings200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the settings for a network
     * Update the settings for a network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkSettingsRequest} [updateNetworkSettingsRequest] 
     * @param {module:api/SettingsApi~updateNetworkSettings_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkSettings200Response}
     */
    updateNetworkSettings_1(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkSettingsRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSettings_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkSettings200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSwitchSettings_1 operation.
     * @callback module:api/SettingsApi~updateNetworkSwitchSettings_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkSwitchSettings200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update switch network settings
     * Update switch network settings
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkSwitchSettingsRequest} [updateNetworkSwitchSettingsRequest] 
     * @param {module:api/SettingsApi~updateNetworkSwitchSettings_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkSwitchSettings200Response}
     */
    updateNetworkSwitchSettings_1(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkSwitchSettingsRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSwitchSettings_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkSwitchSettings200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkWirelessBluetoothSettings_2 operation.
     * @callback module:api/SettingsApi~updateNetworkWirelessBluetoothSettings_2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkWirelessBluetoothSettings200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the Bluetooth settings for a network
     * Update the Bluetooth settings for a network. See the docs page for <a href=\"https://documentation.meraki.com/MR/Bluetooth/Bluetooth_Low_Energy_(BLE)\">Bluetooth settings</a>.
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkWirelessBluetoothSettingsRequest} [updateNetworkWirelessBluetoothSettingsRequest] 
     * @param {module:api/SettingsApi~updateNetworkWirelessBluetoothSettings_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkWirelessBluetoothSettings200Response}
     */
    updateNetworkWirelessBluetoothSettings_2(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkWirelessBluetoothSettingsRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkWirelessBluetoothSettings_2");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkWirelessBluetoothSettings200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/bluetooth/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkWirelessSettings_1 operation.
     * @callback module:api/SettingsApi~updateNetworkWirelessSettings_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkWirelessSettings200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the wireless settings for a network
     * Update the wireless settings for a network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkWirelessSettingsRequest} [updateNetworkWirelessSettingsRequest] 
     * @param {module:api/SettingsApi~updateNetworkWirelessSettings_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkWirelessSettings200Response}
     */
    updateNetworkWirelessSettings_1(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkWirelessSettingsRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkWirelessSettings_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkWirelessSettings200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkWirelessSsidSplashSettings_3 operation.
     * @callback module:api/SettingsApi~updateNetworkWirelessSsidSplashSettings_3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkWirelessSsidSplashSettings200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify the splash page settings for the given SSID
     * Modify the splash page settings for the given SSID
     * @param {String} networkId 
     * @param {String} number 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkWirelessSsidSplashSettingsRequest} [updateNetworkWirelessSsidSplashSettingsRequest] 
     * @param {module:api/SettingsApi~updateNetworkWirelessSsidSplashSettings_3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkWirelessSsidSplashSettings200Response}
     */
    updateNetworkWirelessSsidSplashSettings_3(networkId, number, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkWirelessSsidSplashSettingsRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkWirelessSsidSplashSettings_3");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling updateNetworkWirelessSsidSplashSettings_3");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkWirelessSsidSplashSettings200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/splash/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationAdaptivePolicySettings_2 operation.
     * @callback module:api/SettingsApi~updateOrganizationAdaptivePolicySettings_2Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update global adaptive policy settings
     * Update global adaptive policy settings
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationAdaptivePolicySettingsRequest} [updateOrganizationAdaptivePolicySettingsRequest] 
     * @param {module:api/SettingsApi~updateOrganizationAdaptivePolicySettings_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateOrganizationAdaptivePolicySettings_2(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateOrganizationAdaptivePolicySettingsRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationAdaptivePolicySettings_2");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/adaptivePolicy/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
