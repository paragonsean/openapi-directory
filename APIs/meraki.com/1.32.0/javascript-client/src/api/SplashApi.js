/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetNetworkWirelessSsidSplashSettings200Response from '../model/GetNetworkWirelessSsidSplashSettings200Response';
import UpdateNetworkWirelessSsidSplashSettingsRequest from '../model/UpdateNetworkWirelessSsidSplashSettingsRequest';

/**
* Splash service.
* @module api/SplashApi
* @version 1.32.0
*/
export default class SplashApi {

    /**
    * Constructs a new SplashApi. 
    * @alias module:api/SplashApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getNetworkWirelessSsidSplashSettings_2 operation.
     * @callback module:api/SplashApi~getNetworkWirelessSsidSplashSettings_2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkWirelessSsidSplashSettings200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Display the splash page settings for the given SSID
     * Display the splash page settings for the given SSID
     * @param {String} networkId 
     * @param {String} number 
     * @param {module:api/SplashApi~getNetworkWirelessSsidSplashSettings_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkWirelessSsidSplashSettings200Response}
     */
    getNetworkWirelessSsidSplashSettings_2(networkId, number, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessSsidSplashSettings_2");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling getNetworkWirelessSsidSplashSettings_2");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkWirelessSsidSplashSettings200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/splash/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkWirelessSsidSplashSettings_2 operation.
     * @callback module:api/SplashApi~updateNetworkWirelessSsidSplashSettings_2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkWirelessSsidSplashSettings200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify the splash page settings for the given SSID
     * Modify the splash page settings for the given SSID
     * @param {String} networkId 
     * @param {String} number 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkWirelessSsidSplashSettingsRequest} [updateNetworkWirelessSsidSplashSettingsRequest] 
     * @param {module:api/SplashApi~updateNetworkWirelessSsidSplashSettings_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkWirelessSsidSplashSettings200Response}
     */
    updateNetworkWirelessSsidSplashSettings_2(networkId, number, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkWirelessSsidSplashSettingsRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkWirelessSsidSplashSettings_2");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling updateNetworkWirelessSsidSplashSettings_2");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkWirelessSsidSplashSettings200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/splash/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
