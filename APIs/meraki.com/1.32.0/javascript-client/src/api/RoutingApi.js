/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateDeviceSwitchRoutingInterfaceRequest from '../model/CreateDeviceSwitchRoutingInterfaceRequest';
import CreateDeviceSwitchRoutingStaticRouteRequest from '../model/CreateDeviceSwitchRoutingStaticRouteRequest';
import CreateNetworkSwitchRoutingMulticastRendezvousPointRequest from '../model/CreateNetworkSwitchRoutingMulticastRendezvousPointRequest';
import CreateNetworkSwitchStackRoutingInterfaceRequest from '../model/CreateNetworkSwitchStackRoutingInterfaceRequest';
import GetDeviceSwitchRoutingInterfaces200ResponseInner from '../model/GetDeviceSwitchRoutingInterfaces200ResponseInner';
import GetDeviceSwitchRoutingStaticRoute200Response from '../model/GetDeviceSwitchRoutingStaticRoute200Response';
import UpdateDeviceSwitchRoutingInterfaceDhcpRequest from '../model/UpdateDeviceSwitchRoutingInterfaceDhcpRequest';
import UpdateDeviceSwitchRoutingStaticRouteRequest from '../model/UpdateDeviceSwitchRoutingStaticRouteRequest';
import UpdateNetworkSwitchRoutingMulticastRendezvousPointRequest from '../model/UpdateNetworkSwitchRoutingMulticastRendezvousPointRequest';
import UpdateNetworkSwitchRoutingMulticastRequest from '../model/UpdateNetworkSwitchRoutingMulticastRequest';
import UpdateNetworkSwitchRoutingOspfRequest from '../model/UpdateNetworkSwitchRoutingOspfRequest';
import UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest from '../model/UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest';
import UpdateNetworkSwitchStackRoutingInterfaceRequest from '../model/UpdateNetworkSwitchStackRoutingInterfaceRequest';

/**
* Routing service.
* @module api/RoutingApi
* @version 1.32.0
*/
export default class RoutingApi {

    /**
    * Constructs a new RoutingApi. 
    * @alias module:api/RoutingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createDeviceSwitchRoutingInterface_1 operation.
     * @callback module:api/RoutingApi~createDeviceSwitchRoutingInterface_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDeviceSwitchRoutingInterfaces200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a layer 3 interface for a switch
     * Create a layer 3 interface for a switch
     * @param {String} serial 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateDeviceSwitchRoutingInterfaceRequest} [createDeviceSwitchRoutingInterfaceRequest] 
     * @param {module:api/RoutingApi~createDeviceSwitchRoutingInterface_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDeviceSwitchRoutingInterfaces200ResponseInner}
     */
    createDeviceSwitchRoutingInterface_1(serial, opts, callback) {
      opts = opts || {};
      let postBody = opts['createDeviceSwitchRoutingInterfaceRequest'];
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling createDeviceSwitchRoutingInterface_1");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetDeviceSwitchRoutingInterfaces200ResponseInner;
      return this.apiClient.callApi(
        '/devices/{serial}/switch/routing/interfaces', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDeviceSwitchRoutingStaticRoute_1 operation.
     * @callback module:api/RoutingApi~createDeviceSwitchRoutingStaticRoute_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a layer 3 static route for a switch
     * Create a layer 3 static route for a switch
     * @param {String} serial 
     * @param {module:model/CreateDeviceSwitchRoutingStaticRouteRequest} createDeviceSwitchRoutingStaticRouteRequest 
     * @param {module:api/RoutingApi~createDeviceSwitchRoutingStaticRoute_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createDeviceSwitchRoutingStaticRoute_1(serial, createDeviceSwitchRoutingStaticRouteRequest, callback) {
      let postBody = createDeviceSwitchRoutingStaticRouteRequest;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling createDeviceSwitchRoutingStaticRoute_1");
      }
      // verify the required parameter 'createDeviceSwitchRoutingStaticRouteRequest' is set
      if (createDeviceSwitchRoutingStaticRouteRequest === undefined || createDeviceSwitchRoutingStaticRouteRequest === null) {
        throw new Error("Missing the required parameter 'createDeviceSwitchRoutingStaticRouteRequest' when calling createDeviceSwitchRoutingStaticRoute_1");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/switch/routing/staticRoutes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkSwitchRoutingMulticastRendezvousPoint_1 operation.
     * @callback module:api/RoutingApi~createNetworkSwitchRoutingMulticastRendezvousPoint_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a multicast rendezvous point
     * Create a multicast rendezvous point
     * @param {String} networkId 
     * @param {module:model/CreateNetworkSwitchRoutingMulticastRendezvousPointRequest} createNetworkSwitchRoutingMulticastRendezvousPointRequest 
     * @param {module:api/RoutingApi~createNetworkSwitchRoutingMulticastRendezvousPoint_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNetworkSwitchRoutingMulticastRendezvousPoint_1(networkId, createNetworkSwitchRoutingMulticastRendezvousPointRequest, callback) {
      let postBody = createNetworkSwitchRoutingMulticastRendezvousPointRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkSwitchRoutingMulticastRendezvousPoint_1");
      }
      // verify the required parameter 'createNetworkSwitchRoutingMulticastRendezvousPointRequest' is set
      if (createNetworkSwitchRoutingMulticastRendezvousPointRequest === undefined || createNetworkSwitchRoutingMulticastRendezvousPointRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkSwitchRoutingMulticastRendezvousPointRequest' when calling createNetworkSwitchRoutingMulticastRendezvousPoint_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/routing/multicast/rendezvousPoints', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkSwitchStackRoutingInterface_2 operation.
     * @callback module:api/RoutingApi~createNetworkSwitchStackRoutingInterface_2Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a layer 3 interface for a switch stack
     * Create a layer 3 interface for a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {module:model/CreateNetworkSwitchStackRoutingInterfaceRequest} createNetworkSwitchStackRoutingInterfaceRequest 
     * @param {module:api/RoutingApi~createNetworkSwitchStackRoutingInterface_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNetworkSwitchStackRoutingInterface_2(networkId, switchStackId, createNetworkSwitchStackRoutingInterfaceRequest, callback) {
      let postBody = createNetworkSwitchStackRoutingInterfaceRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkSwitchStackRoutingInterface_2");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling createNetworkSwitchStackRoutingInterface_2");
      }
      // verify the required parameter 'createNetworkSwitchStackRoutingInterfaceRequest' is set
      if (createNetworkSwitchStackRoutingInterfaceRequest === undefined || createNetworkSwitchStackRoutingInterfaceRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkSwitchStackRoutingInterfaceRequest' when calling createNetworkSwitchStackRoutingInterface_2");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkSwitchStackRoutingStaticRoute_2 operation.
     * @callback module:api/RoutingApi~createNetworkSwitchStackRoutingStaticRoute_2Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a layer 3 static route for a switch stack
     * Create a layer 3 static route for a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {module:model/CreateDeviceSwitchRoutingStaticRouteRequest} createDeviceSwitchRoutingStaticRouteRequest 
     * @param {module:api/RoutingApi~createNetworkSwitchStackRoutingStaticRoute_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNetworkSwitchStackRoutingStaticRoute_2(networkId, switchStackId, createDeviceSwitchRoutingStaticRouteRequest, callback) {
      let postBody = createDeviceSwitchRoutingStaticRouteRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkSwitchStackRoutingStaticRoute_2");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling createNetworkSwitchStackRoutingStaticRoute_2");
      }
      // verify the required parameter 'createDeviceSwitchRoutingStaticRouteRequest' is set
      if (createDeviceSwitchRoutingStaticRouteRequest === undefined || createDeviceSwitchRoutingStaticRouteRequest === null) {
        throw new Error("Missing the required parameter 'createDeviceSwitchRoutingStaticRouteRequest' when calling createNetworkSwitchStackRoutingStaticRoute_2");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDeviceSwitchRoutingInterface_1 operation.
     * @callback module:api/RoutingApi~deleteDeviceSwitchRoutingInterface_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a layer 3 interface from the switch
     * Delete a layer 3 interface from the switch
     * @param {String} serial 
     * @param {String} interfaceId 
     * @param {module:api/RoutingApi~deleteDeviceSwitchRoutingInterface_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDeviceSwitchRoutingInterface_1(serial, interfaceId, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling deleteDeviceSwitchRoutingInterface_1");
      }
      // verify the required parameter 'interfaceId' is set
      if (interfaceId === undefined || interfaceId === null) {
        throw new Error("Missing the required parameter 'interfaceId' when calling deleteDeviceSwitchRoutingInterface_1");
      }

      let pathParams = {
        'serial': serial,
        'interfaceId': interfaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/devices/{serial}/switch/routing/interfaces/{interfaceId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDeviceSwitchRoutingStaticRoute_1 operation.
     * @callback module:api/RoutingApi~deleteDeviceSwitchRoutingStaticRoute_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a layer 3 static route for a switch
     * Delete a layer 3 static route for a switch
     * @param {String} serial 
     * @param {String} staticRouteId 
     * @param {module:api/RoutingApi~deleteDeviceSwitchRoutingStaticRoute_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDeviceSwitchRoutingStaticRoute_1(serial, staticRouteId, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling deleteDeviceSwitchRoutingStaticRoute_1");
      }
      // verify the required parameter 'staticRouteId' is set
      if (staticRouteId === undefined || staticRouteId === null) {
        throw new Error("Missing the required parameter 'staticRouteId' when calling deleteDeviceSwitchRoutingStaticRoute_1");
      }

      let pathParams = {
        'serial': serial,
        'staticRouteId': staticRouteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/devices/{serial}/switch/routing/staticRoutes/{staticRouteId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkSwitchRoutingMulticastRendezvousPoint_1 operation.
     * @callback module:api/RoutingApi~deleteNetworkSwitchRoutingMulticastRendezvousPoint_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a multicast rendezvous point
     * Delete a multicast rendezvous point
     * @param {String} networkId 
     * @param {String} rendezvousPointId 
     * @param {module:api/RoutingApi~deleteNetworkSwitchRoutingMulticastRendezvousPoint_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkSwitchRoutingMulticastRendezvousPoint_1(networkId, rendezvousPointId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkSwitchRoutingMulticastRendezvousPoint_1");
      }
      // verify the required parameter 'rendezvousPointId' is set
      if (rendezvousPointId === undefined || rendezvousPointId === null) {
        throw new Error("Missing the required parameter 'rendezvousPointId' when calling deleteNetworkSwitchRoutingMulticastRendezvousPoint_1");
      }

      let pathParams = {
        'networkId': networkId,
        'rendezvousPointId': rendezvousPointId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/routing/multicast/rendezvousPoints/{rendezvousPointId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkSwitchStackRoutingInterface_2 operation.
     * @callback module:api/RoutingApi~deleteNetworkSwitchStackRoutingInterface_2Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a layer 3 interface from a switch stack
     * Delete a layer 3 interface from a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {String} interfaceId 
     * @param {module:api/RoutingApi~deleteNetworkSwitchStackRoutingInterface_2Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkSwitchStackRoutingInterface_2(networkId, switchStackId, interfaceId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkSwitchStackRoutingInterface_2");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling deleteNetworkSwitchStackRoutingInterface_2");
      }
      // verify the required parameter 'interfaceId' is set
      if (interfaceId === undefined || interfaceId === null) {
        throw new Error("Missing the required parameter 'interfaceId' when calling deleteNetworkSwitchStackRoutingInterface_2");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId,
        'interfaceId': interfaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkSwitchStackRoutingStaticRoute_2 operation.
     * @callback module:api/RoutingApi~deleteNetworkSwitchStackRoutingStaticRoute_2Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a layer 3 static route for a switch stack
     * Delete a layer 3 static route for a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {String} staticRouteId 
     * @param {module:api/RoutingApi~deleteNetworkSwitchStackRoutingStaticRoute_2Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkSwitchStackRoutingStaticRoute_2(networkId, switchStackId, staticRouteId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkSwitchStackRoutingStaticRoute_2");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling deleteNetworkSwitchStackRoutingStaticRoute_2");
      }
      // verify the required parameter 'staticRouteId' is set
      if (staticRouteId === undefined || staticRouteId === null) {
        throw new Error("Missing the required parameter 'staticRouteId' when calling deleteNetworkSwitchStackRoutingStaticRoute_2");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId,
        'staticRouteId': staticRouteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes/{staticRouteId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceSwitchRoutingInterfaceDhcp_1 operation.
     * @callback module:api/RoutingApi~getDeviceSwitchRoutingInterfaceDhcp_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a layer 3 interface DHCP configuration for a switch
     * Return a layer 3 interface DHCP configuration for a switch
     * @param {String} serial 
     * @param {String} interfaceId 
     * @param {module:api/RoutingApi~getDeviceSwitchRoutingInterfaceDhcp_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getDeviceSwitchRoutingInterfaceDhcp_1(serial, interfaceId, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceSwitchRoutingInterfaceDhcp_1");
      }
      // verify the required parameter 'interfaceId' is set
      if (interfaceId === undefined || interfaceId === null) {
        throw new Error("Missing the required parameter 'interfaceId' when calling getDeviceSwitchRoutingInterfaceDhcp_1");
      }

      let pathParams = {
        'serial': serial,
        'interfaceId': interfaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/switch/routing/interfaces/{interfaceId}/dhcp', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceSwitchRoutingInterface_1 operation.
     * @callback module:api/RoutingApi~getDeviceSwitchRoutingInterface_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDeviceSwitchRoutingInterfaces200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a layer 3 interface for a switch
     * Return a layer 3 interface for a switch
     * @param {String} serial 
     * @param {String} interfaceId 
     * @param {module:api/RoutingApi~getDeviceSwitchRoutingInterface_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDeviceSwitchRoutingInterfaces200ResponseInner}
     */
    getDeviceSwitchRoutingInterface_1(serial, interfaceId, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceSwitchRoutingInterface_1");
      }
      // verify the required parameter 'interfaceId' is set
      if (interfaceId === undefined || interfaceId === null) {
        throw new Error("Missing the required parameter 'interfaceId' when calling getDeviceSwitchRoutingInterface_1");
      }

      let pathParams = {
        'serial': serial,
        'interfaceId': interfaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDeviceSwitchRoutingInterfaces200ResponseInner;
      return this.apiClient.callApi(
        '/devices/{serial}/switch/routing/interfaces/{interfaceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceSwitchRoutingInterfaces_1 operation.
     * @callback module:api/RoutingApi~getDeviceSwitchRoutingInterfaces_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetDeviceSwitchRoutingInterfaces200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List layer 3 interfaces for a switch
     * List layer 3 interfaces for a switch. Those for a stack may be found under switch stack routing.
     * @param {String} serial 
     * @param {module:api/RoutingApi~getDeviceSwitchRoutingInterfaces_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetDeviceSwitchRoutingInterfaces200ResponseInner>}
     */
    getDeviceSwitchRoutingInterfaces_1(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceSwitchRoutingInterfaces_1");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetDeviceSwitchRoutingInterfaces200ResponseInner];
      return this.apiClient.callApi(
        '/devices/{serial}/switch/routing/interfaces', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceSwitchRoutingStaticRoute_1 operation.
     * @callback module:api/RoutingApi~getDeviceSwitchRoutingStaticRoute_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDeviceSwitchRoutingStaticRoute200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a layer 3 static route for a switch
     * Return a layer 3 static route for a switch
     * @param {String} serial 
     * @param {String} staticRouteId 
     * @param {module:api/RoutingApi~getDeviceSwitchRoutingStaticRoute_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDeviceSwitchRoutingStaticRoute200Response}
     */
    getDeviceSwitchRoutingStaticRoute_1(serial, staticRouteId, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceSwitchRoutingStaticRoute_1");
      }
      // verify the required parameter 'staticRouteId' is set
      if (staticRouteId === undefined || staticRouteId === null) {
        throw new Error("Missing the required parameter 'staticRouteId' when calling getDeviceSwitchRoutingStaticRoute_1");
      }

      let pathParams = {
        'serial': serial,
        'staticRouteId': staticRouteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDeviceSwitchRoutingStaticRoute200Response;
      return this.apiClient.callApi(
        '/devices/{serial}/switch/routing/staticRoutes/{staticRouteId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceSwitchRoutingStaticRoutes_1 operation.
     * @callback module:api/RoutingApi~getDeviceSwitchRoutingStaticRoutes_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List layer 3 static routes for a switch
     * List layer 3 static routes for a switch
     * @param {String} serial 
     * @param {module:api/RoutingApi~getDeviceSwitchRoutingStaticRoutes_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getDeviceSwitchRoutingStaticRoutes_1(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceSwitchRoutingStaticRoutes_1");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/devices/{serial}/switch/routing/staticRoutes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchRoutingMulticastRendezvousPoint_1 operation.
     * @callback module:api/RoutingApi~getNetworkSwitchRoutingMulticastRendezvousPoint_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a multicast rendezvous point
     * Return a multicast rendezvous point
     * @param {String} networkId 
     * @param {String} rendezvousPointId 
     * @param {module:api/RoutingApi~getNetworkSwitchRoutingMulticastRendezvousPoint_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkSwitchRoutingMulticastRendezvousPoint_1(networkId, rendezvousPointId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchRoutingMulticastRendezvousPoint_1");
      }
      // verify the required parameter 'rendezvousPointId' is set
      if (rendezvousPointId === undefined || rendezvousPointId === null) {
        throw new Error("Missing the required parameter 'rendezvousPointId' when calling getNetworkSwitchRoutingMulticastRendezvousPoint_1");
      }

      let pathParams = {
        'networkId': networkId,
        'rendezvousPointId': rendezvousPointId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/routing/multicast/rendezvousPoints/{rendezvousPointId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchRoutingMulticastRendezvousPoints_1 operation.
     * @callback module:api/RoutingApi~getNetworkSwitchRoutingMulticastRendezvousPoints_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<[Object]>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List multicast rendezvous points
     * List multicast rendezvous points
     * @param {String} networkId 
     * @param {module:api/RoutingApi~getNetworkSwitchRoutingMulticastRendezvousPoints_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<[Object]>}
     */
    getNetworkSwitchRoutingMulticastRendezvousPoints_1(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchRoutingMulticastRendezvousPoints_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [[Object]];
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/routing/multicast/rendezvousPoints', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchRoutingMulticast_1 operation.
     * @callback module:api/RoutingApi~getNetworkSwitchRoutingMulticast_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return multicast settings for a network
     * Return multicast settings for a network
     * @param {String} networkId 
     * @param {module:api/RoutingApi~getNetworkSwitchRoutingMulticast_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkSwitchRoutingMulticast_1(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchRoutingMulticast_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/routing/multicast', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchRoutingOspf_1 operation.
     * @callback module:api/RoutingApi~getNetworkSwitchRoutingOspf_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return layer 3 OSPF routing configuration
     * Return layer 3 OSPF routing configuration
     * @param {String} networkId 
     * @param {module:api/RoutingApi~getNetworkSwitchRoutingOspf_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkSwitchRoutingOspf_1(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchRoutingOspf_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/routing/ospf', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchStackRoutingInterfaceDhcp_2 operation.
     * @callback module:api/RoutingApi~getNetworkSwitchStackRoutingInterfaceDhcp_2Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a layer 3 interface DHCP configuration for a switch stack
     * Return a layer 3 interface DHCP configuration for a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {String} interfaceId 
     * @param {module:api/RoutingApi~getNetworkSwitchStackRoutingInterfaceDhcp_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkSwitchStackRoutingInterfaceDhcp_2(networkId, switchStackId, interfaceId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchStackRoutingInterfaceDhcp_2");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling getNetworkSwitchStackRoutingInterfaceDhcp_2");
      }
      // verify the required parameter 'interfaceId' is set
      if (interfaceId === undefined || interfaceId === null) {
        throw new Error("Missing the required parameter 'interfaceId' when calling getNetworkSwitchStackRoutingInterfaceDhcp_2");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId,
        'interfaceId': interfaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}/dhcp', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchStackRoutingInterface_2 operation.
     * @callback module:api/RoutingApi~getNetworkSwitchStackRoutingInterface_2Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a layer 3 interface from a switch stack
     * Return a layer 3 interface from a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {String} interfaceId 
     * @param {module:api/RoutingApi~getNetworkSwitchStackRoutingInterface_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkSwitchStackRoutingInterface_2(networkId, switchStackId, interfaceId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchStackRoutingInterface_2");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling getNetworkSwitchStackRoutingInterface_2");
      }
      // verify the required parameter 'interfaceId' is set
      if (interfaceId === undefined || interfaceId === null) {
        throw new Error("Missing the required parameter 'interfaceId' when calling getNetworkSwitchStackRoutingInterface_2");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId,
        'interfaceId': interfaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchStackRoutingInterfaces_2 operation.
     * @callback module:api/RoutingApi~getNetworkSwitchStackRoutingInterfaces_2Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List layer 3 interfaces for a switch stack
     * List layer 3 interfaces for a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {module:api/RoutingApi~getNetworkSwitchStackRoutingInterfaces_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkSwitchStackRoutingInterfaces_2(networkId, switchStackId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchStackRoutingInterfaces_2");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling getNetworkSwitchStackRoutingInterfaces_2");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchStackRoutingStaticRoute_2 operation.
     * @callback module:api/RoutingApi~getNetworkSwitchStackRoutingStaticRoute_2Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a layer 3 static route for a switch stack
     * Return a layer 3 static route for a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {String} staticRouteId 
     * @param {module:api/RoutingApi~getNetworkSwitchStackRoutingStaticRoute_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkSwitchStackRoutingStaticRoute_2(networkId, switchStackId, staticRouteId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchStackRoutingStaticRoute_2");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling getNetworkSwitchStackRoutingStaticRoute_2");
      }
      // verify the required parameter 'staticRouteId' is set
      if (staticRouteId === undefined || staticRouteId === null) {
        throw new Error("Missing the required parameter 'staticRouteId' when calling getNetworkSwitchStackRoutingStaticRoute_2");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId,
        'staticRouteId': staticRouteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes/{staticRouteId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchStackRoutingStaticRoutes_2 operation.
     * @callback module:api/RoutingApi~getNetworkSwitchStackRoutingStaticRoutes_2Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List layer 3 static routes for a switch stack
     * List layer 3 static routes for a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {module:api/RoutingApi~getNetworkSwitchStackRoutingStaticRoutes_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkSwitchStackRoutingStaticRoutes_2(networkId, switchStackId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchStackRoutingStaticRoutes_2");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling getNetworkSwitchStackRoutingStaticRoutes_2");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeviceSwitchRoutingInterfaceDhcp_1 operation.
     * @callback module:api/RoutingApi~updateDeviceSwitchRoutingInterfaceDhcp_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a layer 3 interface DHCP configuration for a switch
     * Update a layer 3 interface DHCP configuration for a switch
     * @param {String} serial 
     * @param {String} interfaceId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateDeviceSwitchRoutingInterfaceDhcpRequest} [updateDeviceSwitchRoutingInterfaceDhcpRequest] 
     * @param {module:api/RoutingApi~updateDeviceSwitchRoutingInterfaceDhcp_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateDeviceSwitchRoutingInterfaceDhcp_1(serial, interfaceId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateDeviceSwitchRoutingInterfaceDhcpRequest'];
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling updateDeviceSwitchRoutingInterfaceDhcp_1");
      }
      // verify the required parameter 'interfaceId' is set
      if (interfaceId === undefined || interfaceId === null) {
        throw new Error("Missing the required parameter 'interfaceId' when calling updateDeviceSwitchRoutingInterfaceDhcp_1");
      }

      let pathParams = {
        'serial': serial,
        'interfaceId': interfaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/switch/routing/interfaces/{interfaceId}/dhcp', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeviceSwitchRoutingInterface_1 operation.
     * @callback module:api/RoutingApi~updateDeviceSwitchRoutingInterface_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDeviceSwitchRoutingInterfaces200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a layer 3 interface for a switch
     * Update a layer 3 interface for a switch
     * @param {String} serial 
     * @param {String} interfaceId 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateDeviceSwitchRoutingInterfaceRequest} [createDeviceSwitchRoutingInterfaceRequest] 
     * @param {module:api/RoutingApi~updateDeviceSwitchRoutingInterface_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDeviceSwitchRoutingInterfaces200ResponseInner}
     */
    updateDeviceSwitchRoutingInterface_1(serial, interfaceId, opts, callback) {
      opts = opts || {};
      let postBody = opts['createDeviceSwitchRoutingInterfaceRequest'];
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling updateDeviceSwitchRoutingInterface_1");
      }
      // verify the required parameter 'interfaceId' is set
      if (interfaceId === undefined || interfaceId === null) {
        throw new Error("Missing the required parameter 'interfaceId' when calling updateDeviceSwitchRoutingInterface_1");
      }

      let pathParams = {
        'serial': serial,
        'interfaceId': interfaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetDeviceSwitchRoutingInterfaces200ResponseInner;
      return this.apiClient.callApi(
        '/devices/{serial}/switch/routing/interfaces/{interfaceId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeviceSwitchRoutingStaticRoute_1 operation.
     * @callback module:api/RoutingApi~updateDeviceSwitchRoutingStaticRoute_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a layer 3 static route for a switch
     * Update a layer 3 static route for a switch
     * @param {String} serial 
     * @param {String} staticRouteId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateDeviceSwitchRoutingStaticRouteRequest} [updateDeviceSwitchRoutingStaticRouteRequest] 
     * @param {module:api/RoutingApi~updateDeviceSwitchRoutingStaticRoute_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateDeviceSwitchRoutingStaticRoute_1(serial, staticRouteId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateDeviceSwitchRoutingStaticRouteRequest'];
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling updateDeviceSwitchRoutingStaticRoute_1");
      }
      // verify the required parameter 'staticRouteId' is set
      if (staticRouteId === undefined || staticRouteId === null) {
        throw new Error("Missing the required parameter 'staticRouteId' when calling updateDeviceSwitchRoutingStaticRoute_1");
      }

      let pathParams = {
        'serial': serial,
        'staticRouteId': staticRouteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/switch/routing/staticRoutes/{staticRouteId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSwitchRoutingMulticastRendezvousPoint_1 operation.
     * @callback module:api/RoutingApi~updateNetworkSwitchRoutingMulticastRendezvousPoint_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a multicast rendezvous point
     * Update a multicast rendezvous point
     * @param {String} networkId 
     * @param {String} rendezvousPointId 
     * @param {module:model/UpdateNetworkSwitchRoutingMulticastRendezvousPointRequest} updateNetworkSwitchRoutingMulticastRendezvousPointRequest 
     * @param {module:api/RoutingApi~updateNetworkSwitchRoutingMulticastRendezvousPoint_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkSwitchRoutingMulticastRendezvousPoint_1(networkId, rendezvousPointId, updateNetworkSwitchRoutingMulticastRendezvousPointRequest, callback) {
      let postBody = updateNetworkSwitchRoutingMulticastRendezvousPointRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSwitchRoutingMulticastRendezvousPoint_1");
      }
      // verify the required parameter 'rendezvousPointId' is set
      if (rendezvousPointId === undefined || rendezvousPointId === null) {
        throw new Error("Missing the required parameter 'rendezvousPointId' when calling updateNetworkSwitchRoutingMulticastRendezvousPoint_1");
      }
      // verify the required parameter 'updateNetworkSwitchRoutingMulticastRendezvousPointRequest' is set
      if (updateNetworkSwitchRoutingMulticastRendezvousPointRequest === undefined || updateNetworkSwitchRoutingMulticastRendezvousPointRequest === null) {
        throw new Error("Missing the required parameter 'updateNetworkSwitchRoutingMulticastRendezvousPointRequest' when calling updateNetworkSwitchRoutingMulticastRendezvousPoint_1");
      }

      let pathParams = {
        'networkId': networkId,
        'rendezvousPointId': rendezvousPointId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/routing/multicast/rendezvousPoints/{rendezvousPointId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSwitchRoutingMulticast_1 operation.
     * @callback module:api/RoutingApi~updateNetworkSwitchRoutingMulticast_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update multicast settings for a network
     * Update multicast settings for a network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkSwitchRoutingMulticastRequest} [updateNetworkSwitchRoutingMulticastRequest] 
     * @param {module:api/RoutingApi~updateNetworkSwitchRoutingMulticast_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkSwitchRoutingMulticast_1(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkSwitchRoutingMulticastRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSwitchRoutingMulticast_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/routing/multicast', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSwitchRoutingOspf_1 operation.
     * @callback module:api/RoutingApi~updateNetworkSwitchRoutingOspf_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update layer 3 OSPF routing configuration
     * Update layer 3 OSPF routing configuration
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkSwitchRoutingOspfRequest} [updateNetworkSwitchRoutingOspfRequest] 
     * @param {module:api/RoutingApi~updateNetworkSwitchRoutingOspf_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkSwitchRoutingOspf_1(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkSwitchRoutingOspfRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSwitchRoutingOspf_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/routing/ospf', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSwitchStackRoutingInterfaceDhcp_2 operation.
     * @callback module:api/RoutingApi~updateNetworkSwitchStackRoutingInterfaceDhcp_2Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a layer 3 interface DHCP configuration for a switch stack
     * Update a layer 3 interface DHCP configuration for a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {String} interfaceId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest} [updateNetworkSwitchStackRoutingInterfaceDhcpRequest] 
     * @param {module:api/RoutingApi~updateNetworkSwitchStackRoutingInterfaceDhcp_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkSwitchStackRoutingInterfaceDhcp_2(networkId, switchStackId, interfaceId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkSwitchStackRoutingInterfaceDhcpRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSwitchStackRoutingInterfaceDhcp_2");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling updateNetworkSwitchStackRoutingInterfaceDhcp_2");
      }
      // verify the required parameter 'interfaceId' is set
      if (interfaceId === undefined || interfaceId === null) {
        throw new Error("Missing the required parameter 'interfaceId' when calling updateNetworkSwitchStackRoutingInterfaceDhcp_2");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId,
        'interfaceId': interfaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}/dhcp', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSwitchStackRoutingInterface_2 operation.
     * @callback module:api/RoutingApi~updateNetworkSwitchStackRoutingInterface_2Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a layer 3 interface for a switch stack
     * Update a layer 3 interface for a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {String} interfaceId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkSwitchStackRoutingInterfaceRequest} [updateNetworkSwitchStackRoutingInterfaceRequest] 
     * @param {module:api/RoutingApi~updateNetworkSwitchStackRoutingInterface_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkSwitchStackRoutingInterface_2(networkId, switchStackId, interfaceId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkSwitchStackRoutingInterfaceRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSwitchStackRoutingInterface_2");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling updateNetworkSwitchStackRoutingInterface_2");
      }
      // verify the required parameter 'interfaceId' is set
      if (interfaceId === undefined || interfaceId === null) {
        throw new Error("Missing the required parameter 'interfaceId' when calling updateNetworkSwitchStackRoutingInterface_2");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId,
        'interfaceId': interfaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSwitchStackRoutingStaticRoute_2 operation.
     * @callback module:api/RoutingApi~updateNetworkSwitchStackRoutingStaticRoute_2Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a layer 3 static route for a switch stack
     * Update a layer 3 static route for a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {String} staticRouteId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateDeviceSwitchRoutingStaticRouteRequest} [updateDeviceSwitchRoutingStaticRouteRequest] 
     * @param {module:api/RoutingApi~updateNetworkSwitchStackRoutingStaticRoute_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkSwitchStackRoutingStaticRoute_2(networkId, switchStackId, staticRouteId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateDeviceSwitchRoutingStaticRouteRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSwitchStackRoutingStaticRoute_2");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling updateNetworkSwitchStackRoutingStaticRoute_2");
      }
      // verify the required parameter 'staticRouteId' is set
      if (staticRouteId === undefined || staticRouteId === null) {
        throw new Error("Missing the required parameter 'staticRouteId' when calling updateNetworkSwitchStackRoutingStaticRoute_2");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId,
        'staticRouteId': staticRouteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes/{staticRouteId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
