/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddNetworkSwitchStackRequest from '../model/AddNetworkSwitchStackRequest';
import AssignOrganizationLicensesSeats200Response from '../model/AssignOrganizationLicensesSeats200Response';
import AssignOrganizationLicensesSeatsRequest from '../model/AssignOrganizationLicensesSeatsRequest';
import BindNetworkRequest from '../model/BindNetworkRequest';
import CheckinNetworkSmDevices200Response from '../model/CheckinNetworkSmDevices200Response';
import CheckinNetworkSmDevicesRequest from '../model/CheckinNetworkSmDevicesRequest';
import ClaimIntoOrganizationInventoryRequest from '../model/ClaimIntoOrganizationInventoryRequest';
import ClaimIntoOrganizationRequest from '../model/ClaimIntoOrganizationRequest';
import ClaimNetworkDevicesRequest from '../model/ClaimNetworkDevicesRequest';
import CloneOrganizationRequest from '../model/CloneOrganizationRequest';
import CloneOrganizationSwitchDevicesRequest from '../model/CloneOrganizationSwitchDevicesRequest';
import CombineOrganizationNetworks200Response from '../model/CombineOrganizationNetworks200Response';
import CombineOrganizationNetworksRequest from '../model/CombineOrganizationNetworksRequest';
import CreateDeviceApplianceVmxAuthenticationToken201Response from '../model/CreateDeviceApplianceVmxAuthenticationToken201Response';
import CreateDeviceSwitchRoutingInterfaceRequest from '../model/CreateDeviceSwitchRoutingInterfaceRequest';
import CreateDeviceSwitchRoutingStaticRouteRequest from '../model/CreateDeviceSwitchRoutingStaticRouteRequest';
import CreateNetworkAppliancePrefixesDelegatedStaticRequest from '../model/CreateNetworkAppliancePrefixesDelegatedStaticRequest';
import CreateNetworkApplianceStaticRouteRequest from '../model/CreateNetworkApplianceStaticRouteRequest';
import CreateNetworkApplianceTrafficShapingCustomPerformanceClassRequest from '../model/CreateNetworkApplianceTrafficShapingCustomPerformanceClassRequest';
import CreateNetworkApplianceVlan201Response from '../model/CreateNetworkApplianceVlan201Response';
import CreateNetworkApplianceVlanRequest from '../model/CreateNetworkApplianceVlanRequest';
import CreateNetworkCameraQualityRetentionProfileRequest from '../model/CreateNetworkCameraQualityRetentionProfileRequest';
import CreateNetworkCameraWirelessProfileRequest from '../model/CreateNetworkCameraWirelessProfileRequest';
import CreateNetworkFirmwareUpgradesRollback200Response from '../model/CreateNetworkFirmwareUpgradesRollback200Response';
import CreateNetworkFirmwareUpgradesRollbackRequest from '../model/CreateNetworkFirmwareUpgradesRollbackRequest';
import CreateNetworkFirmwareUpgradesStagedEventRequest from '../model/CreateNetworkFirmwareUpgradesStagedEventRequest';
import CreateNetworkFirmwareUpgradesStagedGroupRequest from '../model/CreateNetworkFirmwareUpgradesStagedGroupRequest';
import CreateNetworkFloorPlanRequest from '../model/CreateNetworkFloorPlanRequest';
import CreateNetworkGroupPolicyRequest from '../model/CreateNetworkGroupPolicyRequest';
import CreateNetworkMerakiAuthUserRequest from '../model/CreateNetworkMerakiAuthUserRequest';
import CreateNetworkMqttBrokerRequest from '../model/CreateNetworkMqttBrokerRequest';
import CreateNetworkPiiRequestRequest from '../model/CreateNetworkPiiRequestRequest';
import CreateNetworkSensorAlertsProfileRequest from '../model/CreateNetworkSensorAlertsProfileRequest';
import CreateNetworkSmBypassActivationLockAttemptRequest from '../model/CreateNetworkSmBypassActivationLockAttemptRequest';
import CreateNetworkSmTargetGroupRequest from '../model/CreateNetworkSmTargetGroupRequest';
import CreateNetworkSwitchAccessPolicyRequest from '../model/CreateNetworkSwitchAccessPolicyRequest';
import CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest from '../model/CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest';
import CreateNetworkSwitchLinkAggregationRequest from '../model/CreateNetworkSwitchLinkAggregationRequest';
import CreateNetworkSwitchPortScheduleRequest from '../model/CreateNetworkSwitchPortScheduleRequest';
import CreateNetworkSwitchQosRuleRequest from '../model/CreateNetworkSwitchQosRuleRequest';
import CreateNetworkSwitchRoutingMulticastRendezvousPointRequest from '../model/CreateNetworkSwitchRoutingMulticastRendezvousPointRequest';
import CreateNetworkSwitchStackRequest from '../model/CreateNetworkSwitchStackRequest';
import CreateNetworkSwitchStackRoutingInterfaceRequest from '../model/CreateNetworkSwitchStackRoutingInterfaceRequest';
import CreateNetworkWebhooksHttpServerRequest from '../model/CreateNetworkWebhooksHttpServerRequest';
import CreateNetworkWebhooksPayloadTemplateRequest from '../model/CreateNetworkWebhooksPayloadTemplateRequest';
import CreateNetworkWebhooksWebhookTest201Response from '../model/CreateNetworkWebhooksWebhookTest201Response';
import CreateNetworkWebhooksWebhookTestRequest from '../model/CreateNetworkWebhooksWebhookTestRequest';
import CreateNetworkWirelessRfProfile201Response from '../model/CreateNetworkWirelessRfProfile201Response';
import CreateNetworkWirelessRfProfileRequest from '../model/CreateNetworkWirelessRfProfileRequest';
import CreateNetworkWirelessSsidIdentityPskRequest from '../model/CreateNetworkWirelessSsidIdentityPskRequest';
import CreateOrganizationActionBatch201Response from '../model/CreateOrganizationActionBatch201Response';
import CreateOrganizationActionBatchRequest from '../model/CreateOrganizationActionBatchRequest';
import CreateOrganizationAdaptivePolicyAclRequest from '../model/CreateOrganizationAdaptivePolicyAclRequest';
import CreateOrganizationAdaptivePolicyGroupRequest from '../model/CreateOrganizationAdaptivePolicyGroupRequest';
import CreateOrganizationAdaptivePolicyPolicyRequest from '../model/CreateOrganizationAdaptivePolicyPolicyRequest';
import CreateOrganizationAdminRequest from '../model/CreateOrganizationAdminRequest';
import CreateOrganizationAlertsProfileRequest from '../model/CreateOrganizationAlertsProfileRequest';
import CreateOrganizationBrandingPolicy201Response from '../model/CreateOrganizationBrandingPolicy201Response';
import CreateOrganizationBrandingPolicyRequest from '../model/CreateOrganizationBrandingPolicyRequest';
import CreateOrganizationCameraCustomAnalyticsArtifactRequest from '../model/CreateOrganizationCameraCustomAnalyticsArtifactRequest';
import CreateOrganizationConfigTemplateRequest from '../model/CreateOrganizationConfigTemplateRequest';
import CreateOrganizationEarlyAccessFeaturesOptInRequest from '../model/CreateOrganizationEarlyAccessFeaturesOptInRequest';
import CreateOrganizationInsightMonitoredMediaServerRequest from '../model/CreateOrganizationInsightMonitoredMediaServerRequest';
import CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest from '../model/CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest';
import CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner from '../model/CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner';
import CreateOrganizationInventoryOnboardingCloudMonitoringImportRequest from '../model/CreateOrganizationInventoryOnboardingCloudMonitoringImportRequest';
import CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner from '../model/CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner';
import CreateOrganizationInventoryOnboardingCloudMonitoringPrepareRequest from '../model/CreateOrganizationInventoryOnboardingCloudMonitoringPrepareRequest';
import CreateOrganizationNetworkRequest from '../model/CreateOrganizationNetworkRequest';
import CreateOrganizationPolicyObjectRequest from '../model/CreateOrganizationPolicyObjectRequest';
import CreateOrganizationPolicyObjectsGroupRequest from '../model/CreateOrganizationPolicyObjectsGroupRequest';
import CreateOrganizationRequest from '../model/CreateOrganizationRequest';
import CreateOrganizationSamlIdpRequest from '../model/CreateOrganizationSamlIdpRequest';
import CreateOrganizationSamlRoleRequest from '../model/CreateOrganizationSamlRoleRequest';
import GetDeviceApplianceUplinksSettings200Response from '../model/GetDeviceApplianceUplinksSettings200Response';
import GetDeviceSensorRelationships200ResponseInner from '../model/GetDeviceSensorRelationships200ResponseInner';
import GetDeviceSwitchPorts200ResponseInner from '../model/GetDeviceSwitchPorts200ResponseInner';
import GetDeviceSwitchRoutingInterfaces200ResponseInner from '../model/GetDeviceSwitchRoutingInterfaces200ResponseInner';
import GetDeviceSwitchRoutingStaticRoute200Response from '../model/GetDeviceSwitchRoutingStaticRoute200Response';
import GetDeviceWirelessBluetoothSettings200Response from '../model/GetDeviceWirelessBluetoothSettings200Response';
import GetNetwork200Response from '../model/GetNetwork200Response';
import GetNetworkAppliancePorts200ResponseInner from '../model/GetNetworkAppliancePorts200ResponseInner';
import GetNetworkAppliancePrefixesDelegatedStatics200ResponseInner from '../model/GetNetworkAppliancePrefixesDelegatedStatics200ResponseInner';
import GetNetworkApplianceSettings200Response from '../model/GetNetworkApplianceSettings200Response';
import GetNetworkApplianceSingleLan200Response from '../model/GetNetworkApplianceSingleLan200Response';
import GetNetworkApplianceSsids200ResponseInner from '../model/GetNetworkApplianceSsids200ResponseInner';
import GetNetworkApplianceTrafficShapingUplinkBandwidth200Response from '../model/GetNetworkApplianceTrafficShapingUplinkBandwidth200Response';
import GetNetworkApplianceTrafficShapingUplinkSelection200Response from '../model/GetNetworkApplianceTrafficShapingUplinkSelection200Response';
import GetNetworkApplianceVlans200ResponseInner from '../model/GetNetworkApplianceVlans200ResponseInner';
import GetNetworkApplianceVpnSiteToSiteVpn200Response from '../model/GetNetworkApplianceVpnSiteToSiteVpn200Response';
import GetNetworkCellularGatewayDhcp200Response from '../model/GetNetworkCellularGatewayDhcp200Response';
import GetNetworkFirmwareUpgrades200Response from '../model/GetNetworkFirmwareUpgrades200Response';
import GetNetworkFirmwareUpgradesStagedEvents200Response from '../model/GetNetworkFirmwareUpgradesStagedEvents200Response';
import GetNetworkFirmwareUpgradesStagedGroups200ResponseInner from '../model/GetNetworkFirmwareUpgradesStagedGroups200ResponseInner';
import GetNetworkFirmwareUpgradesStagedStages200ResponseInner from '../model/GetNetworkFirmwareUpgradesStagedStages200ResponseInner';
import GetNetworkHealthAlerts200ResponseInner from '../model/GetNetworkHealthAlerts200ResponseInner';
import GetNetworkMerakiAuthUsers200ResponseInner from '../model/GetNetworkMerakiAuthUsers200ResponseInner';
import GetNetworkPoliciesByClient200ResponseInner from '../model/GetNetworkPoliciesByClient200ResponseInner';
import GetNetworkSensorAlertsProfiles200ResponseInner from '../model/GetNetworkSensorAlertsProfiles200ResponseInner';
import GetNetworkSensorRelationships200ResponseInner from '../model/GetNetworkSensorRelationships200ResponseInner';
import GetNetworkSettings200Response from '../model/GetNetworkSettings200Response';
import GetNetworkSmDeviceCerts200ResponseInner from '../model/GetNetworkSmDeviceCerts200ResponseInner';
import GetNetworkSmDeviceDeviceProfiles200ResponseInner from '../model/GetNetworkSmDeviceDeviceProfiles200ResponseInner';
import GetNetworkSmDeviceNetworkAdapters200ResponseInner from '../model/GetNetworkSmDeviceNetworkAdapters200ResponseInner';
import GetNetworkSmDeviceSecurityCenters200ResponseInner from '../model/GetNetworkSmDeviceSecurityCenters200ResponseInner';
import GetNetworkSmDeviceSoftwares200ResponseInner from '../model/GetNetworkSmDeviceSoftwares200ResponseInner';
import GetNetworkSmDeviceWlanLists200ResponseInner from '../model/GetNetworkSmDeviceWlanLists200ResponseInner';
import GetNetworkSmDevices200ResponseInner from '../model/GetNetworkSmDevices200ResponseInner';
import GetNetworkSmProfiles200ResponseInner from '../model/GetNetworkSmProfiles200ResponseInner';
import GetNetworkSmTrustedAccessConfigs200ResponseInner from '../model/GetNetworkSmTrustedAccessConfigs200ResponseInner';
import GetNetworkSmUserAccessDevices200ResponseInner from '../model/GetNetworkSmUserAccessDevices200ResponseInner';
import GetNetworkSmUsers200ResponseInner from '../model/GetNetworkSmUsers200ResponseInner';
import GetNetworkSwitchAccessControlLists200Response from '../model/GetNetworkSwitchAccessControlLists200Response';
import GetNetworkSwitchAccessPolicies200ResponseInner from '../model/GetNetworkSwitchAccessPolicies200ResponseInner';
import GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner from '../model/GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner';
import GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner from '../model/GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner';
import GetNetworkSwitchDhcpV4ServersSeen200ResponseInner from '../model/GetNetworkSwitchDhcpV4ServersSeen200ResponseInner';
import GetNetworkSwitchMtu200Response from '../model/GetNetworkSwitchMtu200Response';
import GetNetworkSwitchSettings200Response from '../model/GetNetworkSwitchSettings200Response';
import GetNetworkSwitchStack200Response from '../model/GetNetworkSwitchStack200Response';
import GetNetworkSwitchStormControl200Response from '../model/GetNetworkSwitchStormControl200Response';
import GetNetworkSyslogServers200Response from '../model/GetNetworkSyslogServers200Response';
import GetNetworkWebhooksHttpServers200ResponseInner from '../model/GetNetworkWebhooksHttpServers200ResponseInner';
import GetNetworkWebhooksPayloadTemplates200ResponseInner from '../model/GetNetworkWebhooksPayloadTemplates200ResponseInner';
import GetNetworkWirelessBluetoothSettings200Response from '../model/GetNetworkWirelessBluetoothSettings200Response';
import GetNetworkWirelessSettings200Response from '../model/GetNetworkWirelessSettings200Response';
import GetNetworkWirelessSsidEapOverride200Response from '../model/GetNetworkWirelessSsidEapOverride200Response';
import GetNetworkWirelessSsidIdentityPsks200ResponseInner from '../model/GetNetworkWirelessSsidIdentityPsks200ResponseInner';
import GetNetworkWirelessSsidSplashSettings200Response from '../model/GetNetworkWirelessSsidSplashSettings200Response';
import GetOrganizationApplianceVpnThirdPartyVPNPeers200Response from '../model/GetOrganizationApplianceVpnThirdPartyVPNPeers200Response';
import GetOrganizationBrandingPolicies200ResponseInner from '../model/GetOrganizationBrandingPolicies200ResponseInner';
import GetOrganizationBrandingPoliciesPriorities200Response from '../model/GetOrganizationBrandingPoliciesPriorities200Response';
import GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner from '../model/GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner';
import GetOrganizationConfigTemplateSwitchProfiles200Response from '../model/GetOrganizationConfigTemplateSwitchProfiles200Response';
import GetOrganizationDevices200ResponseInner from '../model/GetOrganizationDevices200ResponseInner';
import GetOrganizationFirmwareUpgrades200ResponseInner from '../model/GetOrganizationFirmwareUpgrades200ResponseInner';
import GetOrganizationFirmwareUpgradesByDevice200ResponseInner from '../model/GetOrganizationFirmwareUpgradesByDevice200ResponseInner';
import GetOrganizationInsightApplications200ResponseInner from '../model/GetOrganizationInsightApplications200ResponseInner';
import GetOrganizationInsightMonitoredMediaServers200ResponseInner from '../model/GetOrganizationInsightMonitoredMediaServers200ResponseInner';
import GetOrganizationInventoryDevices200ResponseInner from '../model/GetOrganizationInventoryDevices200ResponseInner';
import GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner from '../model/GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner';
import GetOrganizationLicenses200ResponseInner from '../model/GetOrganizationLicenses200ResponseInner';
import GetOrganizationLicensingCotermLicenses200ResponseInner from '../model/GetOrganizationLicensingCotermLicenses200ResponseInner';
import GetOrganizationLoginSecurity200Response from '../model/GetOrganizationLoginSecurity200Response';
import GetOrganizationSaml200Response from '../model/GetOrganizationSaml200Response';
import GetOrganizationSamlIdps200ResponseInner from '../model/GetOrganizationSamlIdps200ResponseInner';
import GetOrganizationSmApnsCert200Response from '../model/GetOrganizationSmApnsCert200Response';
import GetOrganizationSmVppAccounts200ResponseInner from '../model/GetOrganizationSmVppAccounts200ResponseInner';
import GetOrganizationSwitchPortsBySwitch200ResponseInner from '../model/GetOrganizationSwitchPortsBySwitch200ResponseInner';
import GetOrganizationWirelessDevicesEthernetStatuses200ResponseInner from '../model/GetOrganizationWirelessDevicesEthernetStatuses200ResponseInner';
import GetOrganizations200ResponseInner from '../model/GetOrganizations200ResponseInner';
import LockNetworkSmDevicesRequest from '../model/LockNetworkSmDevicesRequest';
import ModifyNetworkSmDevicesTags200ResponseInner from '../model/ModifyNetworkSmDevicesTags200ResponseInner';
import ModifyNetworkSmDevicesTagsRequest from '../model/ModifyNetworkSmDevicesTagsRequest';
import MoveNetworkSmDevices200Response from '../model/MoveNetworkSmDevices200Response';
import MoveNetworkSmDevicesRequest from '../model/MoveNetworkSmDevicesRequest';
import MoveOrganizationLicenses200Response from '../model/MoveOrganizationLicenses200Response';
import MoveOrganizationLicensesRequest from '../model/MoveOrganizationLicensesRequest';
import MoveOrganizationLicensesSeats200Response from '../model/MoveOrganizationLicensesSeats200Response';
import MoveOrganizationLicensesSeatsRequest from '../model/MoveOrganizationLicensesSeatsRequest';
import MoveOrganizationLicensingCotermLicenses200Response from '../model/MoveOrganizationLicensingCotermLicenses200Response';
import MoveOrganizationLicensingCotermLicensesRequest from '../model/MoveOrganizationLicensingCotermLicensesRequest';
import ProvisionNetworkClientsRequest from '../model/ProvisionNetworkClientsRequest';
import ReleaseFromOrganizationInventoryRequest from '../model/ReleaseFromOrganizationInventoryRequest';
import RemoveNetworkDevicesRequest from '../model/RemoveNetworkDevicesRequest';
import RemoveNetworkSwitchStackRequest from '../model/RemoveNetworkSwitchStackRequest';
import RenewOrganizationLicensesSeatsRequest from '../model/RenewOrganizationLicensesSeatsRequest';
import RollbacksNetworkFirmwareUpgradesStagedEventsRequest from '../model/RollbacksNetworkFirmwareUpgradesStagedEventsRequest';
import SplitNetwork200Response from '../model/SplitNetwork200Response';
import UnbindNetworkRequest from '../model/UnbindNetworkRequest';
import UpdateDeviceApplianceUplinksSettingsRequest from '../model/UpdateDeviceApplianceUplinksSettingsRequest';
import UpdateDeviceCameraCustomAnalyticsRequest from '../model/UpdateDeviceCameraCustomAnalyticsRequest';
import UpdateDeviceCameraQualityAndRetentionRequest from '../model/UpdateDeviceCameraQualityAndRetentionRequest';
import UpdateDeviceCameraSenseRequest from '../model/UpdateDeviceCameraSenseRequest';
import UpdateDeviceCameraVideoSettingsRequest from '../model/UpdateDeviceCameraVideoSettingsRequest';
import UpdateDeviceCameraWirelessProfilesRequest from '../model/UpdateDeviceCameraWirelessProfilesRequest';
import UpdateDeviceCellularGatewayLanRequest from '../model/UpdateDeviceCellularGatewayLanRequest';
import UpdateDeviceCellularGatewayPortForwardingRulesRequest from '../model/UpdateDeviceCellularGatewayPortForwardingRulesRequest';
import UpdateDeviceCellularSimsRequest from '../model/UpdateDeviceCellularSimsRequest';
import UpdateDeviceManagementInterfaceRequest from '../model/UpdateDeviceManagementInterfaceRequest';
import UpdateDeviceRequest from '../model/UpdateDeviceRequest';
import UpdateDeviceSensorRelationshipsRequest from '../model/UpdateDeviceSensorRelationshipsRequest';
import UpdateDeviceSwitchPortRequest from '../model/UpdateDeviceSwitchPortRequest';
import UpdateDeviceSwitchRoutingInterfaceDhcpRequest from '../model/UpdateDeviceSwitchRoutingInterfaceDhcpRequest';
import UpdateDeviceSwitchRoutingStaticRouteRequest from '../model/UpdateDeviceSwitchRoutingStaticRouteRequest';
import UpdateDeviceSwitchWarmSpareRequest from '../model/UpdateDeviceSwitchWarmSpareRequest';
import UpdateDeviceWirelessBluetoothSettingsRequest from '../model/UpdateDeviceWirelessBluetoothSettingsRequest';
import UpdateDeviceWirelessRadioSettingsRequest from '../model/UpdateDeviceWirelessRadioSettingsRequest';
import UpdateNetworkAlertsSettingsRequest from '../model/UpdateNetworkAlertsSettingsRequest';
import UpdateNetworkApplianceConnectivityMonitoringDestinationsRequest from '../model/UpdateNetworkApplianceConnectivityMonitoringDestinationsRequest';
import UpdateNetworkApplianceContentFilteringRequest from '../model/UpdateNetworkApplianceContentFilteringRequest';
import UpdateNetworkApplianceFirewallCellularFirewallRulesRequest from '../model/UpdateNetworkApplianceFirewallCellularFirewallRulesRequest';
import UpdateNetworkApplianceFirewallFirewalledServiceRequest from '../model/UpdateNetworkApplianceFirewallFirewalledServiceRequest';
import UpdateNetworkApplianceFirewallInboundFirewallRulesRequest from '../model/UpdateNetworkApplianceFirewallInboundFirewallRulesRequest';
import UpdateNetworkApplianceFirewallL7FirewallRulesRequest from '../model/UpdateNetworkApplianceFirewallL7FirewallRulesRequest';
import UpdateNetworkApplianceFirewallOneToManyNatRulesRequest from '../model/UpdateNetworkApplianceFirewallOneToManyNatRulesRequest';
import UpdateNetworkApplianceFirewallOneToOneNatRulesRequest from '../model/UpdateNetworkApplianceFirewallOneToOneNatRulesRequest';
import UpdateNetworkApplianceFirewallPortForwardingRulesRequest from '../model/UpdateNetworkApplianceFirewallPortForwardingRulesRequest';
import UpdateNetworkApplianceFirewallSettingsRequest from '../model/UpdateNetworkApplianceFirewallSettingsRequest';
import UpdateNetworkAppliancePortRequest from '../model/UpdateNetworkAppliancePortRequest';
import UpdateNetworkAppliancePrefixesDelegatedStaticRequest from '../model/UpdateNetworkAppliancePrefixesDelegatedStaticRequest';
import UpdateNetworkApplianceSecurityIntrusionRequest from '../model/UpdateNetworkApplianceSecurityIntrusionRequest';
import UpdateNetworkApplianceSecurityMalwareRequest from '../model/UpdateNetworkApplianceSecurityMalwareRequest';
import UpdateNetworkApplianceSettingsRequest from '../model/UpdateNetworkApplianceSettingsRequest';
import UpdateNetworkApplianceSingleLanRequest from '../model/UpdateNetworkApplianceSingleLanRequest';
import UpdateNetworkApplianceSsidRequest from '../model/UpdateNetworkApplianceSsidRequest';
import UpdateNetworkApplianceStaticRouteRequest from '../model/UpdateNetworkApplianceStaticRouteRequest';
import UpdateNetworkApplianceTrafficShapingCustomPerformanceClassRequest from '../model/UpdateNetworkApplianceTrafficShapingCustomPerformanceClassRequest';
import UpdateNetworkApplianceTrafficShapingRequest from '../model/UpdateNetworkApplianceTrafficShapingRequest';
import UpdateNetworkApplianceTrafficShapingRulesRequest from '../model/UpdateNetworkApplianceTrafficShapingRulesRequest';
import UpdateNetworkApplianceTrafficShapingUplinkBandwidthRequest from '../model/UpdateNetworkApplianceTrafficShapingUplinkBandwidthRequest';
import UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest from '../model/UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest';
import UpdateNetworkApplianceVlanRequest from '../model/UpdateNetworkApplianceVlanRequest';
import UpdateNetworkApplianceVlansSettingsRequest from '../model/UpdateNetworkApplianceVlansSettingsRequest';
import UpdateNetworkApplianceVpnBgpRequest from '../model/UpdateNetworkApplianceVpnBgpRequest';
import UpdateNetworkApplianceVpnSiteToSiteVpnRequest from '../model/UpdateNetworkApplianceVpnSiteToSiteVpnRequest';
import UpdateNetworkApplianceWarmSpareRequest from '../model/UpdateNetworkApplianceWarmSpareRequest';
import UpdateNetworkCameraQualityRetentionProfileRequest from '../model/UpdateNetworkCameraQualityRetentionProfileRequest';
import UpdateNetworkCameraWirelessProfileRequest from '../model/UpdateNetworkCameraWirelessProfileRequest';
import UpdateNetworkCellularGatewayConnectivityMonitoringDestinationsRequest from '../model/UpdateNetworkCellularGatewayConnectivityMonitoringDestinationsRequest';
import UpdateNetworkCellularGatewayDhcpRequest from '../model/UpdateNetworkCellularGatewayDhcpRequest';
import UpdateNetworkCellularGatewaySubnetPoolRequest from '../model/UpdateNetworkCellularGatewaySubnetPoolRequest';
import UpdateNetworkCellularGatewayUplinkRequest from '../model/UpdateNetworkCellularGatewayUplinkRequest';
import UpdateNetworkClientPolicyRequest from '../model/UpdateNetworkClientPolicyRequest';
import UpdateNetworkClientSplashAuthorizationStatusRequest from '../model/UpdateNetworkClientSplashAuthorizationStatusRequest';
import UpdateNetworkFirmwareUpgradesRequest from '../model/UpdateNetworkFirmwareUpgradesRequest';
import UpdateNetworkFirmwareUpgradesStagedEventsRequest from '../model/UpdateNetworkFirmwareUpgradesStagedEventsRequest';
import UpdateNetworkFirmwareUpgradesStagedStagesRequest from '../model/UpdateNetworkFirmwareUpgradesStagedStagesRequest';
import UpdateNetworkFloorPlanRequest from '../model/UpdateNetworkFloorPlanRequest';
import UpdateNetworkGroupPolicyRequest from '../model/UpdateNetworkGroupPolicyRequest';
import UpdateNetworkMerakiAuthUserRequest from '../model/UpdateNetworkMerakiAuthUserRequest';
import UpdateNetworkMqttBrokerRequest from '../model/UpdateNetworkMqttBrokerRequest';
import UpdateNetworkNetflowRequest from '../model/UpdateNetworkNetflowRequest';
import UpdateNetworkRequest from '../model/UpdateNetworkRequest';
import UpdateNetworkSensorAlertsProfileRequest from '../model/UpdateNetworkSensorAlertsProfileRequest';
import UpdateNetworkSettingsRequest from '../model/UpdateNetworkSettingsRequest';
import UpdateNetworkSmDevicesFields200ResponseInner from '../model/UpdateNetworkSmDevicesFields200ResponseInner';
import UpdateNetworkSmDevicesFieldsRequest from '../model/UpdateNetworkSmDevicesFieldsRequest';
import UpdateNetworkSnmpRequest from '../model/UpdateNetworkSnmpRequest';
import UpdateNetworkSwitchAccessControlListsRequest from '../model/UpdateNetworkSwitchAccessControlListsRequest';
import UpdateNetworkSwitchAccessPolicyRequest from '../model/UpdateNetworkSwitchAccessPolicyRequest';
import UpdateNetworkSwitchAlternateManagementInterfaceRequest from '../model/UpdateNetworkSwitchAlternateManagementInterfaceRequest';
import UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest from '../model/UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest';
import UpdateNetworkSwitchDhcpServerPolicyRequest from '../model/UpdateNetworkSwitchDhcpServerPolicyRequest';
import UpdateNetworkSwitchDscpToCosMappingsRequest from '../model/UpdateNetworkSwitchDscpToCosMappingsRequest';
import UpdateNetworkSwitchLinkAggregationRequest from '../model/UpdateNetworkSwitchLinkAggregationRequest';
import UpdateNetworkSwitchMtuRequest from '../model/UpdateNetworkSwitchMtuRequest';
import UpdateNetworkSwitchPortScheduleRequest from '../model/UpdateNetworkSwitchPortScheduleRequest';
import UpdateNetworkSwitchQosRuleRequest from '../model/UpdateNetworkSwitchQosRuleRequest';
import UpdateNetworkSwitchQosRulesOrderRequest from '../model/UpdateNetworkSwitchQosRulesOrderRequest';
import UpdateNetworkSwitchRoutingMulticastRendezvousPointRequest from '../model/UpdateNetworkSwitchRoutingMulticastRendezvousPointRequest';
import UpdateNetworkSwitchRoutingMulticastRequest from '../model/UpdateNetworkSwitchRoutingMulticastRequest';
import UpdateNetworkSwitchRoutingOspfRequest from '../model/UpdateNetworkSwitchRoutingOspfRequest';
import UpdateNetworkSwitchSettingsRequest from '../model/UpdateNetworkSwitchSettingsRequest';
import UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest from '../model/UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest';
import UpdateNetworkSwitchStackRoutingInterfaceRequest from '../model/UpdateNetworkSwitchStackRoutingInterfaceRequest';
import UpdateNetworkSwitchStormControlRequest from '../model/UpdateNetworkSwitchStormControlRequest';
import UpdateNetworkSwitchStpRequest from '../model/UpdateNetworkSwitchStpRequest';
import UpdateNetworkSyslogServersRequest from '../model/UpdateNetworkSyslogServersRequest';
import UpdateNetworkTrafficAnalysisRequest from '../model/UpdateNetworkTrafficAnalysisRequest';
import UpdateNetworkWebhooksHttpServerRequest from '../model/UpdateNetworkWebhooksHttpServerRequest';
import UpdateNetworkWebhooksPayloadTemplateRequest from '../model/UpdateNetworkWebhooksPayloadTemplateRequest';
import UpdateNetworkWirelessAlternateManagementInterfaceRequest from '../model/UpdateNetworkWirelessAlternateManagementInterfaceRequest';
import UpdateNetworkWirelessBillingRequest from '../model/UpdateNetworkWirelessBillingRequest';
import UpdateNetworkWirelessBluetoothSettingsRequest from '../model/UpdateNetworkWirelessBluetoothSettingsRequest';
import UpdateNetworkWirelessRfProfileRequest from '../model/UpdateNetworkWirelessRfProfileRequest';
import UpdateNetworkWirelessSettingsRequest from '../model/UpdateNetworkWirelessSettingsRequest';
import UpdateNetworkWirelessSsidBonjourForwardingRequest from '../model/UpdateNetworkWirelessSsidBonjourForwardingRequest';
import UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesRequest from '../model/UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesRequest';
import UpdateNetworkWirelessSsidEapOverrideRequest from '../model/UpdateNetworkWirelessSsidEapOverrideRequest';
import UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequest from '../model/UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequest';
import UpdateNetworkWirelessSsidFirewallL7FirewallRulesRequest from '../model/UpdateNetworkWirelessSsidFirewallL7FirewallRulesRequest';
import UpdateNetworkWirelessSsidHotspot20Request from '../model/UpdateNetworkWirelessSsidHotspot20Request';
import UpdateNetworkWirelessSsidIdentityPskRequest from '../model/UpdateNetworkWirelessSsidIdentityPskRequest';
import UpdateNetworkWirelessSsidRequest from '../model/UpdateNetworkWirelessSsidRequest';
import UpdateNetworkWirelessSsidSchedulesRequest from '../model/UpdateNetworkWirelessSsidSchedulesRequest';
import UpdateNetworkWirelessSsidSplashSettingsRequest from '../model/UpdateNetworkWirelessSsidSplashSettingsRequest';
import UpdateNetworkWirelessSsidTrafficShapingRulesRequest from '../model/UpdateNetworkWirelessSsidTrafficShapingRulesRequest';
import UpdateNetworkWirelessSsidVpnRequest from '../model/UpdateNetworkWirelessSsidVpnRequest';
import UpdateOrganizationActionBatchRequest from '../model/UpdateOrganizationActionBatchRequest';
import UpdateOrganizationAdaptivePolicyAclRequest from '../model/UpdateOrganizationAdaptivePolicyAclRequest';
import UpdateOrganizationAdaptivePolicyGroupRequest from '../model/UpdateOrganizationAdaptivePolicyGroupRequest';
import UpdateOrganizationAdaptivePolicyPolicyRequest from '../model/UpdateOrganizationAdaptivePolicyPolicyRequest';
import UpdateOrganizationAdaptivePolicySettingsRequest from '../model/UpdateOrganizationAdaptivePolicySettingsRequest';
import UpdateOrganizationAdminRequest from '../model/UpdateOrganizationAdminRequest';
import UpdateOrganizationAlertsProfileRequest from '../model/UpdateOrganizationAlertsProfileRequest';
import UpdateOrganizationApplianceSecurityIntrusionRequest from '../model/UpdateOrganizationApplianceSecurityIntrusionRequest';
import UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequest from '../model/UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequest';
import UpdateOrganizationApplianceVpnVpnFirewallRulesRequest from '../model/UpdateOrganizationApplianceVpnVpnFirewallRulesRequest';
import UpdateOrganizationBrandingPoliciesPrioritiesRequest from '../model/UpdateOrganizationBrandingPoliciesPrioritiesRequest';
import UpdateOrganizationBrandingPolicyRequest from '../model/UpdateOrganizationBrandingPolicyRequest';
import UpdateOrganizationCameraOnboardingStatusesRequest from '../model/UpdateOrganizationCameraOnboardingStatusesRequest';
import UpdateOrganizationConfigTemplateRequest from '../model/UpdateOrganizationConfigTemplateRequest';
import UpdateOrganizationConfigTemplateSwitchProfilePortRequest from '../model/UpdateOrganizationConfigTemplateSwitchProfilePortRequest';
import UpdateOrganizationEarlyAccessFeaturesOptInRequest from '../model/UpdateOrganizationEarlyAccessFeaturesOptInRequest';
import UpdateOrganizationInsightMonitoredMediaServerRequest from '../model/UpdateOrganizationInsightMonitoredMediaServerRequest';
import UpdateOrganizationLicenseRequest from '../model/UpdateOrganizationLicenseRequest';
import UpdateOrganizationLoginSecurityRequest from '../model/UpdateOrganizationLoginSecurityRequest';
import UpdateOrganizationPolicyObjectRequest from '../model/UpdateOrganizationPolicyObjectRequest';
import UpdateOrganizationPolicyObjectsGroupRequest from '../model/UpdateOrganizationPolicyObjectsGroupRequest';
import UpdateOrganizationRequest from '../model/UpdateOrganizationRequest';
import UpdateOrganizationSamlIdpRequest from '../model/UpdateOrganizationSamlIdpRequest';
import UpdateOrganizationSamlRequest from '../model/UpdateOrganizationSamlRequest';
import UpdateOrganizationSamlRole200Response from '../model/UpdateOrganizationSamlRole200Response';
import UpdateOrganizationSamlRoleRequest from '../model/UpdateOrganizationSamlRoleRequest';
import UpdateOrganizationSnmpRequest from '../model/UpdateOrganizationSnmpRequest';
import VmxNetworkDevicesClaimRequest from '../model/VmxNetworkDevicesClaimRequest';
import WipeNetworkSmDevices200Response from '../model/WipeNetworkSmDevices200Response';
import WipeNetworkSmDevicesRequest from '../model/WipeNetworkSmDevicesRequest';

/**
* Configure service.
* @module api/ConfigureApi
* @version 1.32.0
*/
export default class ConfigureApi {

    /**
    * Constructs a new ConfigureApi. 
    * @alias module:api/ConfigureApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addNetworkSwitchStack_0 operation.
     * @callback module:api/ConfigureApi~addNetworkSwitchStack_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a switch to a stack
     * Add a switch to a stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {module:model/AddNetworkSwitchStackRequest} addNetworkSwitchStackRequest 
     * @param {module:api/ConfigureApi~addNetworkSwitchStack_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    addNetworkSwitchStack_0(networkId, switchStackId, addNetworkSwitchStackRequest, callback) {
      let postBody = addNetworkSwitchStackRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling addNetworkSwitchStack_0");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling addNetworkSwitchStack_0");
      }
      // verify the required parameter 'addNetworkSwitchStackRequest' is set
      if (addNetworkSwitchStackRequest === undefined || addNetworkSwitchStackRequest === null) {
        throw new Error("Missing the required parameter 'addNetworkSwitchStackRequest' when calling addNetworkSwitchStack_0");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assignOrganizationLicensesSeats_0 operation.
     * @callback module:api/ConfigureApi~assignOrganizationLicensesSeats_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/AssignOrganizationLicensesSeats200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assign SM seats to a network
     * Assign SM seats to a network. This will increase the managed SM device limit of the network
     * @param {String} organizationId 
     * @param {module:model/AssignOrganizationLicensesSeatsRequest} assignOrganizationLicensesSeatsRequest 
     * @param {module:api/ConfigureApi~assignOrganizationLicensesSeats_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssignOrganizationLicensesSeats200Response}
     */
    assignOrganizationLicensesSeats_0(organizationId, assignOrganizationLicensesSeatsRequest, callback) {
      let postBody = assignOrganizationLicensesSeatsRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling assignOrganizationLicensesSeats_0");
      }
      // verify the required parameter 'assignOrganizationLicensesSeatsRequest' is set
      if (assignOrganizationLicensesSeatsRequest === undefined || assignOrganizationLicensesSeatsRequest === null) {
        throw new Error("Missing the required parameter 'assignOrganizationLicensesSeatsRequest' when calling assignOrganizationLicensesSeats_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssignOrganizationLicensesSeats200Response;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/licenses/assignSeats', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bindNetwork_0 operation.
     * @callback module:api/ConfigureApi~bindNetwork_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bind a network to a template.
     * Bind a network to a template.
     * @param {String} networkId 
     * @param {module:model/BindNetworkRequest} bindNetworkRequest 
     * @param {module:api/ConfigureApi~bindNetwork_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    bindNetwork_0(networkId, bindNetworkRequest, callback) {
      let postBody = bindNetworkRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling bindNetwork_0");
      }
      // verify the required parameter 'bindNetworkRequest' is set
      if (bindNetworkRequest === undefined || bindNetworkRequest === null) {
        throw new Error("Missing the required parameter 'bindNetworkRequest' when calling bindNetwork_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/bind', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the checkinNetworkSmDevices_0 operation.
     * @callback module:api/ConfigureApi~checkinNetworkSmDevices_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckinNetworkSmDevices200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Force check-in a set of devices
     * Force check-in a set of devices
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/CheckinNetworkSmDevicesRequest} [checkinNetworkSmDevicesRequest] 
     * @param {module:api/ConfigureApi~checkinNetworkSmDevices_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckinNetworkSmDevices200Response}
     */
    checkinNetworkSmDevices_0(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['checkinNetworkSmDevicesRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling checkinNetworkSmDevices_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CheckinNetworkSmDevices200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/devices/checkin', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the claimIntoOrganizationInventory_0 operation.
     * @callback module:api/ConfigureApi~claimIntoOrganizationInventory_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Claim a list of devices, licenses, and/or orders into an organization inventory
     * Claim a list of devices, licenses, and/or orders into an organization inventory. When claiming by order, all devices and licenses in the order will be claimed; licenses will be added to the organization and devices will be placed in the organization's inventory. Use /organizations/{organizationId}/inventory/release to release devices from an organization.
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ClaimIntoOrganizationInventoryRequest} [claimIntoOrganizationInventoryRequest] 
     * @param {module:api/ConfigureApi~claimIntoOrganizationInventory_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    claimIntoOrganizationInventory_0(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = opts['claimIntoOrganizationInventoryRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling claimIntoOrganizationInventory_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/inventory/claim', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the claimIntoOrganization_0 operation.
     * @callback module:api/ConfigureApi~claimIntoOrganization_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Claim a list of devices, licenses, and/or orders into an organization
     * Claim a list of devices, licenses, and/or orders into an organization. When claiming by order, all devices and licenses in the order will be claimed; licenses will be added to the organization and devices will be placed in the organization's inventory.
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ClaimIntoOrganizationRequest} [claimIntoOrganizationRequest] 
     * @param {module:api/ConfigureApi~claimIntoOrganization_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    claimIntoOrganization_0(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = opts['claimIntoOrganizationRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling claimIntoOrganization_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/claim', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the claimNetworkDevices_0 operation.
     * @callback module:api/ConfigureApi~claimNetworkDevices_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Claim devices into a network. (Note: for recently claimed devices, it may take a few minutes for API requsts against that device to succeed)
     * Claim devices into a network. (Note: for recently claimed devices, it may take a few minutes for API requsts against that device to succeed)
     * @param {String} networkId 
     * @param {module:model/ClaimNetworkDevicesRequest} claimNetworkDevicesRequest 
     * @param {module:api/ConfigureApi~claimNetworkDevices_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    claimNetworkDevices_0(networkId, claimNetworkDevicesRequest, callback) {
      let postBody = claimNetworkDevicesRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling claimNetworkDevices_0");
      }
      // verify the required parameter 'claimNetworkDevicesRequest' is set
      if (claimNetworkDevicesRequest === undefined || claimNetworkDevicesRequest === null) {
        throw new Error("Missing the required parameter 'claimNetworkDevicesRequest' when calling claimNetworkDevices_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/devices/claim', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloneOrganizationSwitchDevices_0 operation.
     * @callback module:api/ConfigureApi~cloneOrganizationSwitchDevices_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clone port-level and some switch-level configuration settings from a source switch to one or more target switches
     * Clone port-level and some switch-level configuration settings from a source switch to one or more target switches. Cloned settings include: Aggregation Groups, Power Settings, Multicast Settings, MTU Configuration, STP Bridge priority, Port Mirroring
     * @param {String} organizationId 
     * @param {module:model/CloneOrganizationSwitchDevicesRequest} cloneOrganizationSwitchDevicesRequest 
     * @param {module:api/ConfigureApi~cloneOrganizationSwitchDevices_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    cloneOrganizationSwitchDevices_0(organizationId, cloneOrganizationSwitchDevicesRequest, callback) {
      let postBody = cloneOrganizationSwitchDevicesRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling cloneOrganizationSwitchDevices_0");
      }
      // verify the required parameter 'cloneOrganizationSwitchDevicesRequest' is set
      if (cloneOrganizationSwitchDevicesRequest === undefined || cloneOrganizationSwitchDevicesRequest === null) {
        throw new Error("Missing the required parameter 'cloneOrganizationSwitchDevicesRequest' when calling cloneOrganizationSwitchDevices_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/switch/devices/clone', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloneOrganization_0 operation.
     * @callback module:api/ConfigureApi~cloneOrganization_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizations200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new organization by cloning the addressed organization
     * Create a new organization by cloning the addressed organization
     * @param {String} organizationId 
     * @param {module:model/CloneOrganizationRequest} cloneOrganizationRequest 
     * @param {module:api/ConfigureApi~cloneOrganization_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizations200ResponseInner}
     */
    cloneOrganization_0(organizationId, cloneOrganizationRequest, callback) {
      let postBody = cloneOrganizationRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling cloneOrganization_0");
      }
      // verify the required parameter 'cloneOrganizationRequest' is set
      if (cloneOrganizationRequest === undefined || cloneOrganizationRequest === null) {
        throw new Error("Missing the required parameter 'cloneOrganizationRequest' when calling cloneOrganization_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetOrganizations200ResponseInner;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/clone', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the combineOrganizationNetworks_0 operation.
     * @callback module:api/ConfigureApi~combineOrganizationNetworks_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CombineOrganizationNetworks200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Combine multiple networks into a single network
     * Combine multiple networks into a single network
     * @param {String} organizationId 
     * @param {module:model/CombineOrganizationNetworksRequest} combineOrganizationNetworksRequest 
     * @param {module:api/ConfigureApi~combineOrganizationNetworks_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CombineOrganizationNetworks200Response}
     */
    combineOrganizationNetworks_0(organizationId, combineOrganizationNetworksRequest, callback) {
      let postBody = combineOrganizationNetworksRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling combineOrganizationNetworks_0");
      }
      // verify the required parameter 'combineOrganizationNetworksRequest' is set
      if (combineOrganizationNetworksRequest === undefined || combineOrganizationNetworksRequest === null) {
        throw new Error("Missing the required parameter 'combineOrganizationNetworksRequest' when calling combineOrganizationNetworks_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CombineOrganizationNetworks200Response;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/networks/combine', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDeviceApplianceVmxAuthenticationToken_0 operation.
     * @callback module:api/ConfigureApi~createDeviceApplianceVmxAuthenticationToken_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDeviceApplianceVmxAuthenticationToken201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate a new vMX authentication token
     * Generate a new vMX authentication token
     * @param {String} serial 
     * @param {module:api/ConfigureApi~createDeviceApplianceVmxAuthenticationToken_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDeviceApplianceVmxAuthenticationToken201Response}
     */
    createDeviceApplianceVmxAuthenticationToken_0(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling createDeviceApplianceVmxAuthenticationToken_0");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreateDeviceApplianceVmxAuthenticationToken201Response;
      return this.apiClient.callApi(
        '/devices/{serial}/appliance/vmx/authenticationToken', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDeviceSwitchRoutingInterface_0 operation.
     * @callback module:api/ConfigureApi~createDeviceSwitchRoutingInterface_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDeviceSwitchRoutingInterfaces200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a layer 3 interface for a switch
     * Create a layer 3 interface for a switch
     * @param {String} serial 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateDeviceSwitchRoutingInterfaceRequest} [createDeviceSwitchRoutingInterfaceRequest] 
     * @param {module:api/ConfigureApi~createDeviceSwitchRoutingInterface_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDeviceSwitchRoutingInterfaces200ResponseInner}
     */
    createDeviceSwitchRoutingInterface_0(serial, opts, callback) {
      opts = opts || {};
      let postBody = opts['createDeviceSwitchRoutingInterfaceRequest'];
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling createDeviceSwitchRoutingInterface_0");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetDeviceSwitchRoutingInterfaces200ResponseInner;
      return this.apiClient.callApi(
        '/devices/{serial}/switch/routing/interfaces', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDeviceSwitchRoutingStaticRoute_0 operation.
     * @callback module:api/ConfigureApi~createDeviceSwitchRoutingStaticRoute_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a layer 3 static route for a switch
     * Create a layer 3 static route for a switch
     * @param {String} serial 
     * @param {module:model/CreateDeviceSwitchRoutingStaticRouteRequest} createDeviceSwitchRoutingStaticRouteRequest 
     * @param {module:api/ConfigureApi~createDeviceSwitchRoutingStaticRoute_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createDeviceSwitchRoutingStaticRoute_0(serial, createDeviceSwitchRoutingStaticRouteRequest, callback) {
      let postBody = createDeviceSwitchRoutingStaticRouteRequest;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling createDeviceSwitchRoutingStaticRoute_0");
      }
      // verify the required parameter 'createDeviceSwitchRoutingStaticRouteRequest' is set
      if (createDeviceSwitchRoutingStaticRouteRequest === undefined || createDeviceSwitchRoutingStaticRouteRequest === null) {
        throw new Error("Missing the required parameter 'createDeviceSwitchRoutingStaticRouteRequest' when calling createDeviceSwitchRoutingStaticRoute_0");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/switch/routing/staticRoutes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkAppliancePrefixesDelegatedStatic_0 operation.
     * @callback module:api/ConfigureApi~createNetworkAppliancePrefixesDelegatedStatic_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a static delegated prefix from a network
     * Add a static delegated prefix from a network
     * @param {String} networkId 
     * @param {module:model/CreateNetworkAppliancePrefixesDelegatedStaticRequest} createNetworkAppliancePrefixesDelegatedStaticRequest 
     * @param {module:api/ConfigureApi~createNetworkAppliancePrefixesDelegatedStatic_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNetworkAppliancePrefixesDelegatedStatic_0(networkId, createNetworkAppliancePrefixesDelegatedStaticRequest, callback) {
      let postBody = createNetworkAppliancePrefixesDelegatedStaticRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkAppliancePrefixesDelegatedStatic_0");
      }
      // verify the required parameter 'createNetworkAppliancePrefixesDelegatedStaticRequest' is set
      if (createNetworkAppliancePrefixesDelegatedStaticRequest === undefined || createNetworkAppliancePrefixesDelegatedStaticRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkAppliancePrefixesDelegatedStaticRequest' when calling createNetworkAppliancePrefixesDelegatedStatic_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/prefixes/delegated/statics', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkApplianceStaticRoute_0 operation.
     * @callback module:api/ConfigureApi~createNetworkApplianceStaticRoute_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a static route for an MX or teleworker network
     * Add a static route for an MX or teleworker network
     * @param {String} networkId 
     * @param {module:model/CreateNetworkApplianceStaticRouteRequest} createNetworkApplianceStaticRouteRequest 
     * @param {module:api/ConfigureApi~createNetworkApplianceStaticRoute_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNetworkApplianceStaticRoute_0(networkId, createNetworkApplianceStaticRouteRequest, callback) {
      let postBody = createNetworkApplianceStaticRouteRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkApplianceStaticRoute_0");
      }
      // verify the required parameter 'createNetworkApplianceStaticRouteRequest' is set
      if (createNetworkApplianceStaticRouteRequest === undefined || createNetworkApplianceStaticRouteRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkApplianceStaticRouteRequest' when calling createNetworkApplianceStaticRoute_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/staticRoutes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkApplianceTrafficShapingCustomPerformanceClass_0 operation.
     * @callback module:api/ConfigureApi~createNetworkApplianceTrafficShapingCustomPerformanceClass_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a custom performance class for an MX network
     * Add a custom performance class for an MX network
     * @param {String} networkId 
     * @param {module:model/CreateNetworkApplianceTrafficShapingCustomPerformanceClassRequest} createNetworkApplianceTrafficShapingCustomPerformanceClassRequest 
     * @param {module:api/ConfigureApi~createNetworkApplianceTrafficShapingCustomPerformanceClass_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNetworkApplianceTrafficShapingCustomPerformanceClass_0(networkId, createNetworkApplianceTrafficShapingCustomPerformanceClassRequest, callback) {
      let postBody = createNetworkApplianceTrafficShapingCustomPerformanceClassRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkApplianceTrafficShapingCustomPerformanceClass_0");
      }
      // verify the required parameter 'createNetworkApplianceTrafficShapingCustomPerformanceClassRequest' is set
      if (createNetworkApplianceTrafficShapingCustomPerformanceClassRequest === undefined || createNetworkApplianceTrafficShapingCustomPerformanceClassRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkApplianceTrafficShapingCustomPerformanceClassRequest' when calling createNetworkApplianceTrafficShapingCustomPerformanceClass_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/trafficShaping/customPerformanceClasses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkApplianceVlan_0 operation.
     * @callback module:api/ConfigureApi~createNetworkApplianceVlan_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateNetworkApplianceVlan201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a VLAN
     * Add a VLAN
     * @param {String} networkId 
     * @param {module:model/CreateNetworkApplianceVlanRequest} createNetworkApplianceVlanRequest 
     * @param {module:api/ConfigureApi~createNetworkApplianceVlan_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateNetworkApplianceVlan201Response}
     */
    createNetworkApplianceVlan_0(networkId, createNetworkApplianceVlanRequest, callback) {
      let postBody = createNetworkApplianceVlanRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkApplianceVlan_0");
      }
      // verify the required parameter 'createNetworkApplianceVlanRequest' is set
      if (createNetworkApplianceVlanRequest === undefined || createNetworkApplianceVlanRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkApplianceVlanRequest' when calling createNetworkApplianceVlan_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateNetworkApplianceVlan201Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/vlans', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkCameraQualityRetentionProfile_0 operation.
     * @callback module:api/ConfigureApi~createNetworkCameraQualityRetentionProfile_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new quality retention profile for this network.
     * Creates new quality retention profile for this network.
     * @param {String} networkId 
     * @param {module:model/CreateNetworkCameraQualityRetentionProfileRequest} createNetworkCameraQualityRetentionProfileRequest 
     * @param {module:api/ConfigureApi~createNetworkCameraQualityRetentionProfile_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNetworkCameraQualityRetentionProfile_0(networkId, createNetworkCameraQualityRetentionProfileRequest, callback) {
      let postBody = createNetworkCameraQualityRetentionProfileRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkCameraQualityRetentionProfile_0");
      }
      // verify the required parameter 'createNetworkCameraQualityRetentionProfileRequest' is set
      if (createNetworkCameraQualityRetentionProfileRequest === undefined || createNetworkCameraQualityRetentionProfileRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkCameraQualityRetentionProfileRequest' when calling createNetworkCameraQualityRetentionProfile_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/camera/qualityRetentionProfiles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkCameraWirelessProfile_0 operation.
     * @callback module:api/ConfigureApi~createNetworkCameraWirelessProfile_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new camera wireless profile for this network.
     * Creates a new camera wireless profile for this network.
     * @param {String} networkId 
     * @param {module:model/CreateNetworkCameraWirelessProfileRequest} createNetworkCameraWirelessProfileRequest 
     * @param {module:api/ConfigureApi~createNetworkCameraWirelessProfile_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNetworkCameraWirelessProfile_0(networkId, createNetworkCameraWirelessProfileRequest, callback) {
      let postBody = createNetworkCameraWirelessProfileRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkCameraWirelessProfile_0");
      }
      // verify the required parameter 'createNetworkCameraWirelessProfileRequest' is set
      if (createNetworkCameraWirelessProfileRequest === undefined || createNetworkCameraWirelessProfileRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkCameraWirelessProfileRequest' when calling createNetworkCameraWirelessProfile_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/camera/wirelessProfiles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkFirmwareUpgradesRollback_0 operation.
     * @callback module:api/ConfigureApi~createNetworkFirmwareUpgradesRollback_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateNetworkFirmwareUpgradesRollback200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rollback a Firmware Upgrade For A Network
     * Rollback a Firmware Upgrade For A Network
     * @param {String} networkId 
     * @param {module:model/CreateNetworkFirmwareUpgradesRollbackRequest} createNetworkFirmwareUpgradesRollbackRequest 
     * @param {module:api/ConfigureApi~createNetworkFirmwareUpgradesRollback_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateNetworkFirmwareUpgradesRollback200Response}
     */
    createNetworkFirmwareUpgradesRollback_0(networkId, createNetworkFirmwareUpgradesRollbackRequest, callback) {
      let postBody = createNetworkFirmwareUpgradesRollbackRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkFirmwareUpgradesRollback_0");
      }
      // verify the required parameter 'createNetworkFirmwareUpgradesRollbackRequest' is set
      if (createNetworkFirmwareUpgradesRollbackRequest === undefined || createNetworkFirmwareUpgradesRollbackRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkFirmwareUpgradesRollbackRequest' when calling createNetworkFirmwareUpgradesRollback_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateNetworkFirmwareUpgradesRollback200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/firmwareUpgrades/rollbacks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkFirmwareUpgradesStagedEvent_0 operation.
     * @callback module:api/ConfigureApi~createNetworkFirmwareUpgradesStagedEvent_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkFirmwareUpgradesStagedEvents200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Staged Upgrade Event for a network
     * Create a Staged Upgrade Event for a network
     * @param {String} networkId 
     * @param {module:model/CreateNetworkFirmwareUpgradesStagedEventRequest} createNetworkFirmwareUpgradesStagedEventRequest 
     * @param {module:api/ConfigureApi~createNetworkFirmwareUpgradesStagedEvent_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkFirmwareUpgradesStagedEvents200Response}
     */
    createNetworkFirmwareUpgradesStagedEvent_0(networkId, createNetworkFirmwareUpgradesStagedEventRequest, callback) {
      let postBody = createNetworkFirmwareUpgradesStagedEventRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkFirmwareUpgradesStagedEvent_0");
      }
      // verify the required parameter 'createNetworkFirmwareUpgradesStagedEventRequest' is set
      if (createNetworkFirmwareUpgradesStagedEventRequest === undefined || createNetworkFirmwareUpgradesStagedEventRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkFirmwareUpgradesStagedEventRequest' when calling createNetworkFirmwareUpgradesStagedEvent_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkFirmwareUpgradesStagedEvents200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/firmwareUpgrades/staged/events', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkFirmwareUpgradesStagedGroup_0 operation.
     * @callback module:api/ConfigureApi~createNetworkFirmwareUpgradesStagedGroup_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Staged Upgrade Group for a network
     * Create a Staged Upgrade Group for a network
     * @param {String} networkId 
     * @param {module:model/CreateNetworkFirmwareUpgradesStagedGroupRequest} createNetworkFirmwareUpgradesStagedGroupRequest 
     * @param {module:api/ConfigureApi~createNetworkFirmwareUpgradesStagedGroup_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNetworkFirmwareUpgradesStagedGroup_0(networkId, createNetworkFirmwareUpgradesStagedGroupRequest, callback) {
      let postBody = createNetworkFirmwareUpgradesStagedGroupRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkFirmwareUpgradesStagedGroup_0");
      }
      // verify the required parameter 'createNetworkFirmwareUpgradesStagedGroupRequest' is set
      if (createNetworkFirmwareUpgradesStagedGroupRequest === undefined || createNetworkFirmwareUpgradesStagedGroupRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkFirmwareUpgradesStagedGroupRequest' when calling createNetworkFirmwareUpgradesStagedGroup_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/firmwareUpgrades/staged/groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkFloorPlan_0 operation.
     * @callback module:api/ConfigureApi~createNetworkFloorPlan_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload a floor plan
     * Upload a floor plan
     * @param {String} networkId 
     * @param {module:model/CreateNetworkFloorPlanRequest} createNetworkFloorPlanRequest 
     * @param {module:api/ConfigureApi~createNetworkFloorPlan_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNetworkFloorPlan_0(networkId, createNetworkFloorPlanRequest, callback) {
      let postBody = createNetworkFloorPlanRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkFloorPlan_0");
      }
      // verify the required parameter 'createNetworkFloorPlanRequest' is set
      if (createNetworkFloorPlanRequest === undefined || createNetworkFloorPlanRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkFloorPlanRequest' when calling createNetworkFloorPlan_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/floorPlans', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkGroupPolicy_0 operation.
     * @callback module:api/ConfigureApi~createNetworkGroupPolicy_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a group policy
     * Create a group policy
     * @param {String} networkId 
     * @param {module:model/CreateNetworkGroupPolicyRequest} createNetworkGroupPolicyRequest 
     * @param {module:api/ConfigureApi~createNetworkGroupPolicy_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNetworkGroupPolicy_0(networkId, createNetworkGroupPolicyRequest, callback) {
      let postBody = createNetworkGroupPolicyRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkGroupPolicy_0");
      }
      // verify the required parameter 'createNetworkGroupPolicyRequest' is set
      if (createNetworkGroupPolicyRequest === undefined || createNetworkGroupPolicyRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkGroupPolicyRequest' when calling createNetworkGroupPolicy_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/groupPolicies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkMerakiAuthUser_0 operation.
     * @callback module:api/ConfigureApi~createNetworkMerakiAuthUser_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkMerakiAuthUsers200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Authorize a user configured with Meraki Authentication for a network (currently supports 802.1X, splash guest, and client VPN users, and currently, organizations have a 50,000 user cap)
     * Authorize a user configured with Meraki Authentication for a network (currently supports 802.1X, splash guest, and client VPN users, and currently, organizations have a 50,000 user cap)
     * @param {String} networkId 
     * @param {module:model/CreateNetworkMerakiAuthUserRequest} createNetworkMerakiAuthUserRequest 
     * @param {module:api/ConfigureApi~createNetworkMerakiAuthUser_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkMerakiAuthUsers200ResponseInner}
     */
    createNetworkMerakiAuthUser_0(networkId, createNetworkMerakiAuthUserRequest, callback) {
      let postBody = createNetworkMerakiAuthUserRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkMerakiAuthUser_0");
      }
      // verify the required parameter 'createNetworkMerakiAuthUserRequest' is set
      if (createNetworkMerakiAuthUserRequest === undefined || createNetworkMerakiAuthUserRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkMerakiAuthUserRequest' when calling createNetworkMerakiAuthUser_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkMerakiAuthUsers200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/merakiAuthUsers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkMqttBroker_0 operation.
     * @callback module:api/ConfigureApi~createNetworkMqttBroker_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an MQTT broker
     * Add an MQTT broker
     * @param {String} networkId 
     * @param {module:model/CreateNetworkMqttBrokerRequest} createNetworkMqttBrokerRequest 
     * @param {module:api/ConfigureApi~createNetworkMqttBroker_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNetworkMqttBroker_0(networkId, createNetworkMqttBrokerRequest, callback) {
      let postBody = createNetworkMqttBrokerRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkMqttBroker_0");
      }
      // verify the required parameter 'createNetworkMqttBrokerRequest' is set
      if (createNetworkMqttBrokerRequest === undefined || createNetworkMqttBrokerRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkMqttBrokerRequest' when calling createNetworkMqttBroker_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/mqttBrokers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkPiiRequest_0 operation.
     * @callback module:api/ConfigureApi~createNetworkPiiRequest_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit a new delete or restrict processing PII request
     * Submit a new delete or restrict processing PII request  ## ALTERNATE PATH  ``` /organizations/{organizationId}/pii/requests ```
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateNetworkPiiRequestRequest} [createNetworkPiiRequestRequest] 
     * @param {module:api/ConfigureApi~createNetworkPiiRequest_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNetworkPiiRequest_0(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['createNetworkPiiRequestRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkPiiRequest_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/pii/requests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkSensorAlertsProfile_0 operation.
     * @callback module:api/ConfigureApi~createNetworkSensorAlertsProfile_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkSensorAlertsProfiles200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a sensor alert profile for a network.
     * Creates a sensor alert profile for a network.
     * @param {String} networkId 
     * @param {module:model/CreateNetworkSensorAlertsProfileRequest} createNetworkSensorAlertsProfileRequest 
     * @param {module:api/ConfigureApi~createNetworkSensorAlertsProfile_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkSensorAlertsProfiles200ResponseInner}
     */
    createNetworkSensorAlertsProfile_0(networkId, createNetworkSensorAlertsProfileRequest, callback) {
      let postBody = createNetworkSensorAlertsProfileRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkSensorAlertsProfile_0");
      }
      // verify the required parameter 'createNetworkSensorAlertsProfileRequest' is set
      if (createNetworkSensorAlertsProfileRequest === undefined || createNetworkSensorAlertsProfileRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkSensorAlertsProfileRequest' when calling createNetworkSensorAlertsProfile_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkSensorAlertsProfiles200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/sensor/alerts/profiles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkSmBypassActivationLockAttempt_0 operation.
     * @callback module:api/ConfigureApi~createNetworkSmBypassActivationLockAttempt_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bypass activation lock attempt
     * Bypass activation lock attempt
     * @param {String} networkId 
     * @param {module:model/CreateNetworkSmBypassActivationLockAttemptRequest} createNetworkSmBypassActivationLockAttemptRequest 
     * @param {module:api/ConfigureApi~createNetworkSmBypassActivationLockAttempt_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNetworkSmBypassActivationLockAttempt_0(networkId, createNetworkSmBypassActivationLockAttemptRequest, callback) {
      let postBody = createNetworkSmBypassActivationLockAttemptRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkSmBypassActivationLockAttempt_0");
      }
      // verify the required parameter 'createNetworkSmBypassActivationLockAttemptRequest' is set
      if (createNetworkSmBypassActivationLockAttemptRequest === undefined || createNetworkSmBypassActivationLockAttemptRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkSmBypassActivationLockAttemptRequest' when calling createNetworkSmBypassActivationLockAttempt_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/bypassActivationLockAttempts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkSmTargetGroup_0 operation.
     * @callback module:api/ConfigureApi~createNetworkSmTargetGroup_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a target group
     * Add a target group
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateNetworkSmTargetGroupRequest} [createNetworkSmTargetGroupRequest] 
     * @param {module:api/ConfigureApi~createNetworkSmTargetGroup_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNetworkSmTargetGroup_0(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['createNetworkSmTargetGroupRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkSmTargetGroup_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/targetGroups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkSwitchAccessPolicy_0 operation.
     * @callback module:api/ConfigureApi~createNetworkSwitchAccessPolicy_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkSwitchAccessPolicies200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an access policy for a switch network
     * Create an access policy for a switch network. If you would like to enable Meraki Authentication, set radiusServers to empty array.
     * @param {String} networkId 
     * @param {module:model/CreateNetworkSwitchAccessPolicyRequest} createNetworkSwitchAccessPolicyRequest 
     * @param {module:api/ConfigureApi~createNetworkSwitchAccessPolicy_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkSwitchAccessPolicies200ResponseInner}
     */
    createNetworkSwitchAccessPolicy_0(networkId, createNetworkSwitchAccessPolicyRequest, callback) {
      let postBody = createNetworkSwitchAccessPolicyRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkSwitchAccessPolicy_0");
      }
      // verify the required parameter 'createNetworkSwitchAccessPolicyRequest' is set
      if (createNetworkSwitchAccessPolicyRequest === undefined || createNetworkSwitchAccessPolicyRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkSwitchAccessPolicyRequest' when calling createNetworkSwitchAccessPolicy_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkSwitchAccessPolicies200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/accessPolicies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_0 operation.
     * @callback module:api/ConfigureApi~createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a server to be trusted by Dynamic ARP Inspection on this network
     * Add a server to be trusted by Dynamic ARP Inspection on this network
     * @param {String} networkId 
     * @param {module:model/CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest} createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest 
     * @param {module:api/ConfigureApi~createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner}
     */
    createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_0(networkId, createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest, callback) {
      let postBody = createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_0");
      }
      // verify the required parameter 'createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest' is set
      if (createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest === undefined || createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest' when calling createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/dhcpServerPolicy/arpInspection/trustedServers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkSwitchLinkAggregation_0 operation.
     * @callback module:api/ConfigureApi~createNetworkSwitchLinkAggregation_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a link aggregation group
     * Create a link aggregation group
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateNetworkSwitchLinkAggregationRequest} [createNetworkSwitchLinkAggregationRequest] 
     * @param {module:api/ConfigureApi~createNetworkSwitchLinkAggregation_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNetworkSwitchLinkAggregation_0(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['createNetworkSwitchLinkAggregationRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkSwitchLinkAggregation_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/linkAggregations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkSwitchPortSchedule_0 operation.
     * @callback module:api/ConfigureApi~createNetworkSwitchPortSchedule_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a switch port schedule
     * Add a switch port schedule
     * @param {String} networkId 
     * @param {module:model/CreateNetworkSwitchPortScheduleRequest} createNetworkSwitchPortScheduleRequest 
     * @param {module:api/ConfigureApi~createNetworkSwitchPortSchedule_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNetworkSwitchPortSchedule_0(networkId, createNetworkSwitchPortScheduleRequest, callback) {
      let postBody = createNetworkSwitchPortScheduleRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkSwitchPortSchedule_0");
      }
      // verify the required parameter 'createNetworkSwitchPortScheduleRequest' is set
      if (createNetworkSwitchPortScheduleRequest === undefined || createNetworkSwitchPortScheduleRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkSwitchPortScheduleRequest' when calling createNetworkSwitchPortSchedule_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/portSchedules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkSwitchQosRule_0 operation.
     * @callback module:api/ConfigureApi~createNetworkSwitchQosRule_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a quality of service rule
     * Add a quality of service rule
     * @param {String} networkId 
     * @param {module:model/CreateNetworkSwitchQosRuleRequest} createNetworkSwitchQosRuleRequest 
     * @param {module:api/ConfigureApi~createNetworkSwitchQosRule_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNetworkSwitchQosRule_0(networkId, createNetworkSwitchQosRuleRequest, callback) {
      let postBody = createNetworkSwitchQosRuleRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkSwitchQosRule_0");
      }
      // verify the required parameter 'createNetworkSwitchQosRuleRequest' is set
      if (createNetworkSwitchQosRuleRequest === undefined || createNetworkSwitchQosRuleRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkSwitchQosRuleRequest' when calling createNetworkSwitchQosRule_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/qosRules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkSwitchRoutingMulticastRendezvousPoint_0 operation.
     * @callback module:api/ConfigureApi~createNetworkSwitchRoutingMulticastRendezvousPoint_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a multicast rendezvous point
     * Create a multicast rendezvous point
     * @param {String} networkId 
     * @param {module:model/CreateNetworkSwitchRoutingMulticastRendezvousPointRequest} createNetworkSwitchRoutingMulticastRendezvousPointRequest 
     * @param {module:api/ConfigureApi~createNetworkSwitchRoutingMulticastRendezvousPoint_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNetworkSwitchRoutingMulticastRendezvousPoint_0(networkId, createNetworkSwitchRoutingMulticastRendezvousPointRequest, callback) {
      let postBody = createNetworkSwitchRoutingMulticastRendezvousPointRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkSwitchRoutingMulticastRendezvousPoint_0");
      }
      // verify the required parameter 'createNetworkSwitchRoutingMulticastRendezvousPointRequest' is set
      if (createNetworkSwitchRoutingMulticastRendezvousPointRequest === undefined || createNetworkSwitchRoutingMulticastRendezvousPointRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkSwitchRoutingMulticastRendezvousPointRequest' when calling createNetworkSwitchRoutingMulticastRendezvousPoint_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/routing/multicast/rendezvousPoints', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkSwitchStackRoutingInterface_0 operation.
     * @callback module:api/ConfigureApi~createNetworkSwitchStackRoutingInterface_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a layer 3 interface for a switch stack
     * Create a layer 3 interface for a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {module:model/CreateNetworkSwitchStackRoutingInterfaceRequest} createNetworkSwitchStackRoutingInterfaceRequest 
     * @param {module:api/ConfigureApi~createNetworkSwitchStackRoutingInterface_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNetworkSwitchStackRoutingInterface_0(networkId, switchStackId, createNetworkSwitchStackRoutingInterfaceRequest, callback) {
      let postBody = createNetworkSwitchStackRoutingInterfaceRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkSwitchStackRoutingInterface_0");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling createNetworkSwitchStackRoutingInterface_0");
      }
      // verify the required parameter 'createNetworkSwitchStackRoutingInterfaceRequest' is set
      if (createNetworkSwitchStackRoutingInterfaceRequest === undefined || createNetworkSwitchStackRoutingInterfaceRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkSwitchStackRoutingInterfaceRequest' when calling createNetworkSwitchStackRoutingInterface_0");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkSwitchStackRoutingStaticRoute_0 operation.
     * @callback module:api/ConfigureApi~createNetworkSwitchStackRoutingStaticRoute_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a layer 3 static route for a switch stack
     * Create a layer 3 static route for a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {module:model/CreateDeviceSwitchRoutingStaticRouteRequest} createDeviceSwitchRoutingStaticRouteRequest 
     * @param {module:api/ConfigureApi~createNetworkSwitchStackRoutingStaticRoute_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNetworkSwitchStackRoutingStaticRoute_0(networkId, switchStackId, createDeviceSwitchRoutingStaticRouteRequest, callback) {
      let postBody = createDeviceSwitchRoutingStaticRouteRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkSwitchStackRoutingStaticRoute_0");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling createNetworkSwitchStackRoutingStaticRoute_0");
      }
      // verify the required parameter 'createDeviceSwitchRoutingStaticRouteRequest' is set
      if (createDeviceSwitchRoutingStaticRouteRequest === undefined || createDeviceSwitchRoutingStaticRouteRequest === null) {
        throw new Error("Missing the required parameter 'createDeviceSwitchRoutingStaticRouteRequest' when calling createNetworkSwitchStackRoutingStaticRoute_0");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkSwitchStack_0 operation.
     * @callback module:api/ConfigureApi~createNetworkSwitchStack_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a stack
     * Create a stack
     * @param {String} networkId 
     * @param {module:model/CreateNetworkSwitchStackRequest} createNetworkSwitchStackRequest 
     * @param {module:api/ConfigureApi~createNetworkSwitchStack_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNetworkSwitchStack_0(networkId, createNetworkSwitchStackRequest, callback) {
      let postBody = createNetworkSwitchStackRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkSwitchStack_0");
      }
      // verify the required parameter 'createNetworkSwitchStackRequest' is set
      if (createNetworkSwitchStackRequest === undefined || createNetworkSwitchStackRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkSwitchStackRequest' when calling createNetworkSwitchStack_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkWebhooksHttpServer_0 operation.
     * @callback module:api/ConfigureApi~createNetworkWebhooksHttpServer_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkWebhooksHttpServers200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an HTTP server to a network
     * Add an HTTP server to a network
     * @param {String} networkId 
     * @param {module:model/CreateNetworkWebhooksHttpServerRequest} createNetworkWebhooksHttpServerRequest 
     * @param {module:api/ConfigureApi~createNetworkWebhooksHttpServer_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkWebhooksHttpServers200ResponseInner}
     */
    createNetworkWebhooksHttpServer_0(networkId, createNetworkWebhooksHttpServerRequest, callback) {
      let postBody = createNetworkWebhooksHttpServerRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkWebhooksHttpServer_0");
      }
      // verify the required parameter 'createNetworkWebhooksHttpServerRequest' is set
      if (createNetworkWebhooksHttpServerRequest === undefined || createNetworkWebhooksHttpServerRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkWebhooksHttpServerRequest' when calling createNetworkWebhooksHttpServer_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkWebhooksHttpServers200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/webhooks/httpServers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkWebhooksPayloadTemplate_0 operation.
     * @callback module:api/ConfigureApi~createNetworkWebhooksPayloadTemplate_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkWebhooksPayloadTemplates200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a webhook payload template for a network
     * Create a webhook payload template for a network
     * @param {String} networkId 
     * @param {module:model/CreateNetworkWebhooksPayloadTemplateRequest} createNetworkWebhooksPayloadTemplateRequest 
     * @param {module:api/ConfigureApi~createNetworkWebhooksPayloadTemplate_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkWebhooksPayloadTemplates200ResponseInner}
     */
    createNetworkWebhooksPayloadTemplate_0(networkId, createNetworkWebhooksPayloadTemplateRequest, callback) {
      let postBody = createNetworkWebhooksPayloadTemplateRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkWebhooksPayloadTemplate_0");
      }
      // verify the required parameter 'createNetworkWebhooksPayloadTemplateRequest' is set
      if (createNetworkWebhooksPayloadTemplateRequest === undefined || createNetworkWebhooksPayloadTemplateRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkWebhooksPayloadTemplateRequest' when calling createNetworkWebhooksPayloadTemplate_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkWebhooksPayloadTemplates200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/webhooks/payloadTemplates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkWebhooksWebhookTest_0 operation.
     * @callback module:api/ConfigureApi~createNetworkWebhooksWebhookTest_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateNetworkWebhooksWebhookTest201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send a test webhook for a network
     * Send a test webhook for a network
     * @param {String} networkId 
     * @param {module:model/CreateNetworkWebhooksWebhookTestRequest} createNetworkWebhooksWebhookTestRequest 
     * @param {module:api/ConfigureApi~createNetworkWebhooksWebhookTest_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateNetworkWebhooksWebhookTest201Response}
     */
    createNetworkWebhooksWebhookTest_0(networkId, createNetworkWebhooksWebhookTestRequest, callback) {
      let postBody = createNetworkWebhooksWebhookTestRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkWebhooksWebhookTest_0");
      }
      // verify the required parameter 'createNetworkWebhooksWebhookTestRequest' is set
      if (createNetworkWebhooksWebhookTestRequest === undefined || createNetworkWebhooksWebhookTestRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkWebhooksWebhookTestRequest' when calling createNetworkWebhooksWebhookTest_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateNetworkWebhooksWebhookTest201Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/webhooks/webhookTests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkWirelessRfProfile_0 operation.
     * @callback module:api/ConfigureApi~createNetworkWirelessRfProfile_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateNetworkWirelessRfProfile201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new RF profile for this network
     * Creates new RF profile for this network
     * @param {String} networkId 
     * @param {module:model/CreateNetworkWirelessRfProfileRequest} createNetworkWirelessRfProfileRequest 
     * @param {module:api/ConfigureApi~createNetworkWirelessRfProfile_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateNetworkWirelessRfProfile201Response}
     */
    createNetworkWirelessRfProfile_0(networkId, createNetworkWirelessRfProfileRequest, callback) {
      let postBody = createNetworkWirelessRfProfileRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkWirelessRfProfile_0");
      }
      // verify the required parameter 'createNetworkWirelessRfProfileRequest' is set
      if (createNetworkWirelessRfProfileRequest === undefined || createNetworkWirelessRfProfileRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkWirelessRfProfileRequest' when calling createNetworkWirelessRfProfile_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateNetworkWirelessRfProfile201Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/rfProfiles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkWirelessSsidIdentityPsk_0 operation.
     * @callback module:api/ConfigureApi~createNetworkWirelessSsidIdentityPsk_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an Identity PSK
     * Create an Identity PSK
     * @param {String} networkId 
     * @param {String} number 
     * @param {module:model/CreateNetworkWirelessSsidIdentityPskRequest} createNetworkWirelessSsidIdentityPskRequest 
     * @param {module:api/ConfigureApi~createNetworkWirelessSsidIdentityPsk_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNetworkWirelessSsidIdentityPsk_0(networkId, number, createNetworkWirelessSsidIdentityPskRequest, callback) {
      let postBody = createNetworkWirelessSsidIdentityPskRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkWirelessSsidIdentityPsk_0");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling createNetworkWirelessSsidIdentityPsk_0");
      }
      // verify the required parameter 'createNetworkWirelessSsidIdentityPskRequest' is set
      if (createNetworkWirelessSsidIdentityPskRequest === undefined || createNetworkWirelessSsidIdentityPskRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkWirelessSsidIdentityPskRequest' when calling createNetworkWirelessSsidIdentityPsk_0");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/identityPsks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrganizationActionBatch_0 operation.
     * @callback module:api/ConfigureApi~createOrganizationActionBatch_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateOrganizationActionBatch201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an action batch
     * Create an action batch
     * @param {String} organizationId 
     * @param {module:model/CreateOrganizationActionBatchRequest} createOrganizationActionBatchRequest 
     * @param {module:api/ConfigureApi~createOrganizationActionBatch_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateOrganizationActionBatch201Response}
     */
    createOrganizationActionBatch_0(organizationId, createOrganizationActionBatchRequest, callback) {
      let postBody = createOrganizationActionBatchRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createOrganizationActionBatch_0");
      }
      // verify the required parameter 'createOrganizationActionBatchRequest' is set
      if (createOrganizationActionBatchRequest === undefined || createOrganizationActionBatchRequest === null) {
        throw new Error("Missing the required parameter 'createOrganizationActionBatchRequest' when calling createOrganizationActionBatch_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateOrganizationActionBatch201Response;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/actionBatches', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrganizationAdaptivePolicyAcl_0 operation.
     * @callback module:api/ConfigureApi~createOrganizationAdaptivePolicyAcl_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new adaptive policy ACL
     * Creates new adaptive policy ACL
     * @param {String} organizationId 
     * @param {module:model/CreateOrganizationAdaptivePolicyAclRequest} createOrganizationAdaptivePolicyAclRequest 
     * @param {module:api/ConfigureApi~createOrganizationAdaptivePolicyAcl_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createOrganizationAdaptivePolicyAcl_0(organizationId, createOrganizationAdaptivePolicyAclRequest, callback) {
      let postBody = createOrganizationAdaptivePolicyAclRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createOrganizationAdaptivePolicyAcl_0");
      }
      // verify the required parameter 'createOrganizationAdaptivePolicyAclRequest' is set
      if (createOrganizationAdaptivePolicyAclRequest === undefined || createOrganizationAdaptivePolicyAclRequest === null) {
        throw new Error("Missing the required parameter 'createOrganizationAdaptivePolicyAclRequest' when calling createOrganizationAdaptivePolicyAcl_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/adaptivePolicy/acls', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrganizationAdaptivePolicyGroup_0 operation.
     * @callback module:api/ConfigureApi~createOrganizationAdaptivePolicyGroup_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new adaptive policy group
     * Creates a new adaptive policy group
     * @param {String} organizationId 
     * @param {module:model/CreateOrganizationAdaptivePolicyGroupRequest} createOrganizationAdaptivePolicyGroupRequest 
     * @param {module:api/ConfigureApi~createOrganizationAdaptivePolicyGroup_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createOrganizationAdaptivePolicyGroup_0(organizationId, createOrganizationAdaptivePolicyGroupRequest, callback) {
      let postBody = createOrganizationAdaptivePolicyGroupRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createOrganizationAdaptivePolicyGroup_0");
      }
      // verify the required parameter 'createOrganizationAdaptivePolicyGroupRequest' is set
      if (createOrganizationAdaptivePolicyGroupRequest === undefined || createOrganizationAdaptivePolicyGroupRequest === null) {
        throw new Error("Missing the required parameter 'createOrganizationAdaptivePolicyGroupRequest' when calling createOrganizationAdaptivePolicyGroup_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/adaptivePolicy/groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrganizationAdaptivePolicyPolicy_0 operation.
     * @callback module:api/ConfigureApi~createOrganizationAdaptivePolicyPolicy_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an Adaptive Policy
     * Add an Adaptive Policy
     * @param {String} organizationId 
     * @param {module:model/CreateOrganizationAdaptivePolicyPolicyRequest} createOrganizationAdaptivePolicyPolicyRequest 
     * @param {module:api/ConfigureApi~createOrganizationAdaptivePolicyPolicy_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createOrganizationAdaptivePolicyPolicy_0(organizationId, createOrganizationAdaptivePolicyPolicyRequest, callback) {
      let postBody = createOrganizationAdaptivePolicyPolicyRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createOrganizationAdaptivePolicyPolicy_0");
      }
      // verify the required parameter 'createOrganizationAdaptivePolicyPolicyRequest' is set
      if (createOrganizationAdaptivePolicyPolicyRequest === undefined || createOrganizationAdaptivePolicyPolicyRequest === null) {
        throw new Error("Missing the required parameter 'createOrganizationAdaptivePolicyPolicyRequest' when calling createOrganizationAdaptivePolicyPolicy_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/adaptivePolicy/policies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrganizationAdmin_0 operation.
     * @callback module:api/ConfigureApi~createOrganizationAdmin_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new dashboard administrator
     * Create a new dashboard administrator
     * @param {String} organizationId 
     * @param {module:model/CreateOrganizationAdminRequest} createOrganizationAdminRequest 
     * @param {module:api/ConfigureApi~createOrganizationAdmin_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createOrganizationAdmin_0(organizationId, createOrganizationAdminRequest, callback) {
      let postBody = createOrganizationAdminRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createOrganizationAdmin_0");
      }
      // verify the required parameter 'createOrganizationAdminRequest' is set
      if (createOrganizationAdminRequest === undefined || createOrganizationAdminRequest === null) {
        throw new Error("Missing the required parameter 'createOrganizationAdminRequest' when calling createOrganizationAdmin_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/admins', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrganizationAlertsProfile_0 operation.
     * @callback module:api/ConfigureApi~createOrganizationAlertsProfile_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an organization-wide alert configuration
     * Create an organization-wide alert configuration
     * @param {String} organizationId 
     * @param {module:model/CreateOrganizationAlertsProfileRequest} createOrganizationAlertsProfileRequest 
     * @param {module:api/ConfigureApi~createOrganizationAlertsProfile_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createOrganizationAlertsProfile_0(organizationId, createOrganizationAlertsProfileRequest, callback) {
      let postBody = createOrganizationAlertsProfileRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createOrganizationAlertsProfile_0");
      }
      // verify the required parameter 'createOrganizationAlertsProfileRequest' is set
      if (createOrganizationAlertsProfileRequest === undefined || createOrganizationAlertsProfileRequest === null) {
        throw new Error("Missing the required parameter 'createOrganizationAlertsProfileRequest' when calling createOrganizationAlertsProfile_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/alerts/profiles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrganizationBrandingPolicy_0 operation.
     * @callback module:api/ConfigureApi~createOrganizationBrandingPolicy_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateOrganizationBrandingPolicy201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new branding policy to an organization
     * Add a new branding policy to an organization
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateOrganizationBrandingPolicyRequest} [createOrganizationBrandingPolicyRequest] 
     * @param {module:api/ConfigureApi~createOrganizationBrandingPolicy_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateOrganizationBrandingPolicy201Response}
     */
    createOrganizationBrandingPolicy_0(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = opts['createOrganizationBrandingPolicyRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createOrganizationBrandingPolicy_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateOrganizationBrandingPolicy201Response;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/brandingPolicies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrganizationCameraCustomAnalyticsArtifact_0 operation.
     * @callback module:api/ConfigureApi~createOrganizationCameraCustomAnalyticsArtifact_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create custom analytics artifact
     * Create custom analytics artifact. Returns an artifact upload URL with expiry time. Upload the artifact file with a put request to the returned upload URL before its expiry.
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateOrganizationCameraCustomAnalyticsArtifactRequest} [createOrganizationCameraCustomAnalyticsArtifactRequest] 
     * @param {module:api/ConfigureApi~createOrganizationCameraCustomAnalyticsArtifact_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createOrganizationCameraCustomAnalyticsArtifact_0(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = opts['createOrganizationCameraCustomAnalyticsArtifactRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createOrganizationCameraCustomAnalyticsArtifact_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/camera/customAnalytics/artifacts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrganizationConfigTemplate_0 operation.
     * @callback module:api/ConfigureApi~createOrganizationConfigTemplate_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new configuration template
     * Create a new configuration template
     * @param {String} organizationId 
     * @param {module:model/CreateOrganizationConfigTemplateRequest} createOrganizationConfigTemplateRequest 
     * @param {module:api/ConfigureApi~createOrganizationConfigTemplate_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createOrganizationConfigTemplate_0(organizationId, createOrganizationConfigTemplateRequest, callback) {
      let postBody = createOrganizationConfigTemplateRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createOrganizationConfigTemplate_0");
      }
      // verify the required parameter 'createOrganizationConfigTemplateRequest' is set
      if (createOrganizationConfigTemplateRequest === undefined || createOrganizationConfigTemplateRequest === null) {
        throw new Error("Missing the required parameter 'createOrganizationConfigTemplateRequest' when calling createOrganizationConfigTemplate_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/configTemplates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrganizationEarlyAccessFeaturesOptIn_0 operation.
     * @callback module:api/ConfigureApi~createOrganizationEarlyAccessFeaturesOptIn_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new early access feature opt-in for an organization
     * Create a new early access feature opt-in for an organization
     * @param {String} organizationId 
     * @param {module:model/CreateOrganizationEarlyAccessFeaturesOptInRequest} createOrganizationEarlyAccessFeaturesOptInRequest 
     * @param {module:api/ConfigureApi~createOrganizationEarlyAccessFeaturesOptIn_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createOrganizationEarlyAccessFeaturesOptIn_0(organizationId, createOrganizationEarlyAccessFeaturesOptInRequest, callback) {
      let postBody = createOrganizationEarlyAccessFeaturesOptInRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createOrganizationEarlyAccessFeaturesOptIn_0");
      }
      // verify the required parameter 'createOrganizationEarlyAccessFeaturesOptInRequest' is set
      if (createOrganizationEarlyAccessFeaturesOptInRequest === undefined || createOrganizationEarlyAccessFeaturesOptInRequest === null) {
        throw new Error("Missing the required parameter 'createOrganizationEarlyAccessFeaturesOptInRequest' when calling createOrganizationEarlyAccessFeaturesOptIn_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/earlyAccess/features/optIns', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrganizationInsightMonitoredMediaServer_0 operation.
     * @callback module:api/ConfigureApi~createOrganizationInsightMonitoredMediaServer_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a media server to be monitored for this organization
     * Add a media server to be monitored for this organization. Only valid for organizations with Meraki Insight.
     * @param {String} organizationId 
     * @param {module:model/CreateOrganizationInsightMonitoredMediaServerRequest} createOrganizationInsightMonitoredMediaServerRequest 
     * @param {module:api/ConfigureApi~createOrganizationInsightMonitoredMediaServer_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createOrganizationInsightMonitoredMediaServer_0(organizationId, createOrganizationInsightMonitoredMediaServerRequest, callback) {
      let postBody = createOrganizationInsightMonitoredMediaServerRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createOrganizationInsightMonitoredMediaServer_0");
      }
      // verify the required parameter 'createOrganizationInsightMonitoredMediaServerRequest' is set
      if (createOrganizationInsightMonitoredMediaServerRequest === undefined || createOrganizationInsightMonitoredMediaServerRequest === null) {
        throw new Error("Missing the required parameter 'createOrganizationInsightMonitoredMediaServerRequest' when calling createOrganizationInsightMonitoredMediaServer_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/insight/monitoredMediaServers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrganizationInventoryOnboardingCloudMonitoringExportEvent_0 operation.
     * @callback module:api/ConfigureApi~createOrganizationInventoryOnboardingCloudMonitoringExportEvent_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Imports event logs related to the onboarding app into elastisearch
     * Imports event logs related to the onboarding app into elastisearch
     * @param {String} organizationId 
     * @param {module:model/CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest} createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest 
     * @param {module:api/ConfigureApi~createOrganizationInventoryOnboardingCloudMonitoringExportEvent_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createOrganizationInventoryOnboardingCloudMonitoringExportEvent_0(organizationId, createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest, callback) {
      let postBody = createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createOrganizationInventoryOnboardingCloudMonitoringExportEvent_0");
      }
      // verify the required parameter 'createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest' is set
      if (createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest === undefined || createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest === null) {
        throw new Error("Missing the required parameter 'createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest' when calling createOrganizationInventoryOnboardingCloudMonitoringExportEvent_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/exportEvents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrganizationInventoryOnboardingCloudMonitoringImport_0 operation.
     * @callback module:api/ConfigureApi~createOrganizationInventoryOnboardingCloudMonitoringImport_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Commits the import operation to complete the onboarding of a device into Dashboard for monitoring.
     * Commits the import operation to complete the onboarding of a device into Dashboard for monitoring.
     * @param {String} organizationId 
     * @param {module:model/CreateOrganizationInventoryOnboardingCloudMonitoringImportRequest} createOrganizationInventoryOnboardingCloudMonitoringImportRequest 
     * @param {module:api/ConfigureApi~createOrganizationInventoryOnboardingCloudMonitoringImport_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner>}
     */
    createOrganizationInventoryOnboardingCloudMonitoringImport_0(organizationId, createOrganizationInventoryOnboardingCloudMonitoringImportRequest, callback) {
      let postBody = createOrganizationInventoryOnboardingCloudMonitoringImportRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createOrganizationInventoryOnboardingCloudMonitoringImport_0");
      }
      // verify the required parameter 'createOrganizationInventoryOnboardingCloudMonitoringImportRequest' is set
      if (createOrganizationInventoryOnboardingCloudMonitoringImportRequest === undefined || createOrganizationInventoryOnboardingCloudMonitoringImportRequest === null) {
        throw new Error("Missing the required parameter 'createOrganizationInventoryOnboardingCloudMonitoringImportRequest' when calling createOrganizationInventoryOnboardingCloudMonitoringImport_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/imports', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrganizationInventoryOnboardingCloudMonitoringPrepare_0 operation.
     * @callback module:api/ConfigureApi~createOrganizationInventoryOnboardingCloudMonitoringPrepare_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiates or updates an import session
     * Initiates or updates an import session. An import ID will be generated and used when you are ready to commit the import.
     * @param {String} organizationId 
     * @param {module:model/CreateOrganizationInventoryOnboardingCloudMonitoringPrepareRequest} createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest 
     * @param {module:api/ConfigureApi~createOrganizationInventoryOnboardingCloudMonitoringPrepare_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner>}
     */
    createOrganizationInventoryOnboardingCloudMonitoringPrepare_0(organizationId, createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest, callback) {
      let postBody = createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createOrganizationInventoryOnboardingCloudMonitoringPrepare_0");
      }
      // verify the required parameter 'createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest' is set
      if (createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest === undefined || createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest === null) {
        throw new Error("Missing the required parameter 'createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest' when calling createOrganizationInventoryOnboardingCloudMonitoringPrepare_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/prepare', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrganizationNetwork_0 operation.
     * @callback module:api/ConfigureApi~createOrganizationNetwork_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetwork200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a network
     * Create a network
     * @param {String} organizationId 
     * @param {module:model/CreateOrganizationNetworkRequest} createOrganizationNetworkRequest 
     * @param {module:api/ConfigureApi~createOrganizationNetwork_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetwork200Response}
     */
    createOrganizationNetwork_0(organizationId, createOrganizationNetworkRequest, callback) {
      let postBody = createOrganizationNetworkRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createOrganizationNetwork_0");
      }
      // verify the required parameter 'createOrganizationNetworkRequest' is set
      if (createOrganizationNetworkRequest === undefined || createOrganizationNetworkRequest === null) {
        throw new Error("Missing the required parameter 'createOrganizationNetworkRequest' when calling createOrganizationNetwork_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetwork200Response;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/networks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrganizationPolicyObject_0 operation.
     * @callback module:api/ConfigureApi~createOrganizationPolicyObject_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new Policy Object.
     * Creates a new Policy Object.
     * @param {String} organizationId 
     * @param {module:model/CreateOrganizationPolicyObjectRequest} createOrganizationPolicyObjectRequest 
     * @param {module:api/ConfigureApi~createOrganizationPolicyObject_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createOrganizationPolicyObject_0(organizationId, createOrganizationPolicyObjectRequest, callback) {
      let postBody = createOrganizationPolicyObjectRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createOrganizationPolicyObject_0");
      }
      // verify the required parameter 'createOrganizationPolicyObjectRequest' is set
      if (createOrganizationPolicyObjectRequest === undefined || createOrganizationPolicyObjectRequest === null) {
        throw new Error("Missing the required parameter 'createOrganizationPolicyObjectRequest' when calling createOrganizationPolicyObject_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/policyObjects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrganizationPolicyObjectsGroup_0 operation.
     * @callback module:api/ConfigureApi~createOrganizationPolicyObjectsGroup_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new Policy Object Group.
     * Creates a new Policy Object Group.
     * @param {String} organizationId 
     * @param {module:model/CreateOrganizationPolicyObjectsGroupRequest} createOrganizationPolicyObjectsGroupRequest 
     * @param {module:api/ConfigureApi~createOrganizationPolicyObjectsGroup_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createOrganizationPolicyObjectsGroup_0(organizationId, createOrganizationPolicyObjectsGroupRequest, callback) {
      let postBody = createOrganizationPolicyObjectsGroupRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createOrganizationPolicyObjectsGroup_0");
      }
      // verify the required parameter 'createOrganizationPolicyObjectsGroupRequest' is set
      if (createOrganizationPolicyObjectsGroupRequest === undefined || createOrganizationPolicyObjectsGroupRequest === null) {
        throw new Error("Missing the required parameter 'createOrganizationPolicyObjectsGroupRequest' when calling createOrganizationPolicyObjectsGroup_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/policyObjects/groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrganizationSamlIdp_0 operation.
     * @callback module:api/ConfigureApi~createOrganizationSamlIdp_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationSamlIdps200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a SAML IdP for your organization.
     * Create a SAML IdP for your organization.
     * @param {String} organizationId 
     * @param {module:model/CreateOrganizationSamlIdpRequest} createOrganizationSamlIdpRequest 
     * @param {module:api/ConfigureApi~createOrganizationSamlIdp_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationSamlIdps200ResponseInner>}
     */
    createOrganizationSamlIdp_0(organizationId, createOrganizationSamlIdpRequest, callback) {
      let postBody = createOrganizationSamlIdpRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createOrganizationSamlIdp_0");
      }
      // verify the required parameter 'createOrganizationSamlIdpRequest' is set
      if (createOrganizationSamlIdpRequest === undefined || createOrganizationSamlIdpRequest === null) {
        throw new Error("Missing the required parameter 'createOrganizationSamlIdpRequest' when calling createOrganizationSamlIdp_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationSamlIdps200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/saml/idps', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrganizationSamlRole_0 operation.
     * @callback module:api/ConfigureApi~createOrganizationSamlRole_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a SAML role
     * Create a SAML role
     * @param {String} organizationId 
     * @param {module:model/CreateOrganizationSamlRoleRequest} createOrganizationSamlRoleRequest 
     * @param {module:api/ConfigureApi~createOrganizationSamlRole_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createOrganizationSamlRole_0(organizationId, createOrganizationSamlRoleRequest, callback) {
      let postBody = createOrganizationSamlRoleRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createOrganizationSamlRole_0");
      }
      // verify the required parameter 'createOrganizationSamlRoleRequest' is set
      if (createOrganizationSamlRoleRequest === undefined || createOrganizationSamlRoleRequest === null) {
        throw new Error("Missing the required parameter 'createOrganizationSamlRoleRequest' when calling createOrganizationSamlRole_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/samlRoles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrganization_0 operation.
     * @callback module:api/ConfigureApi~createOrganization_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizations200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new organization
     * Create a new organization
     * @param {module:model/CreateOrganizationRequest} createOrganizationRequest 
     * @param {module:api/ConfigureApi~createOrganization_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizations200ResponseInner}
     */
    createOrganization_0(createOrganizationRequest, callback) {
      let postBody = createOrganizationRequest;
      // verify the required parameter 'createOrganizationRequest' is set
      if (createOrganizationRequest === undefined || createOrganizationRequest === null) {
        throw new Error("Missing the required parameter 'createOrganizationRequest' when calling createOrganization_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetOrganizations200ResponseInner;
      return this.apiClient.callApi(
        '/organizations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deferNetworkFirmwareUpgradesStagedEvents_0 operation.
     * @callback module:api/ConfigureApi~deferNetworkFirmwareUpgradesStagedEvents_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkFirmwareUpgradesStagedEvents200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Postpone by 1 week all pending staged upgrade stages for a network
     * Postpone by 1 week all pending staged upgrade stages for a network
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~deferNetworkFirmwareUpgradesStagedEvents_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkFirmwareUpgradesStagedEvents200Response}
     */
    deferNetworkFirmwareUpgradesStagedEvents_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deferNetworkFirmwareUpgradesStagedEvents_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkFirmwareUpgradesStagedEvents200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/firmwareUpgrades/staged/events/defer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDeviceSwitchRoutingInterface_0 operation.
     * @callback module:api/ConfigureApi~deleteDeviceSwitchRoutingInterface_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a layer 3 interface from the switch
     * Delete a layer 3 interface from the switch
     * @param {String} serial 
     * @param {String} interfaceId 
     * @param {module:api/ConfigureApi~deleteDeviceSwitchRoutingInterface_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDeviceSwitchRoutingInterface_0(serial, interfaceId, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling deleteDeviceSwitchRoutingInterface_0");
      }
      // verify the required parameter 'interfaceId' is set
      if (interfaceId === undefined || interfaceId === null) {
        throw new Error("Missing the required parameter 'interfaceId' when calling deleteDeviceSwitchRoutingInterface_0");
      }

      let pathParams = {
        'serial': serial,
        'interfaceId': interfaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/devices/{serial}/switch/routing/interfaces/{interfaceId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDeviceSwitchRoutingStaticRoute_0 operation.
     * @callback module:api/ConfigureApi~deleteDeviceSwitchRoutingStaticRoute_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a layer 3 static route for a switch
     * Delete a layer 3 static route for a switch
     * @param {String} serial 
     * @param {String} staticRouteId 
     * @param {module:api/ConfigureApi~deleteDeviceSwitchRoutingStaticRoute_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDeviceSwitchRoutingStaticRoute_0(serial, staticRouteId, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling deleteDeviceSwitchRoutingStaticRoute_0");
      }
      // verify the required parameter 'staticRouteId' is set
      if (staticRouteId === undefined || staticRouteId === null) {
        throw new Error("Missing the required parameter 'staticRouteId' when calling deleteDeviceSwitchRoutingStaticRoute_0");
      }

      let pathParams = {
        'serial': serial,
        'staticRouteId': staticRouteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/devices/{serial}/switch/routing/staticRoutes/{staticRouteId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkAppliancePrefixesDelegatedStatic_0 operation.
     * @callback module:api/ConfigureApi~deleteNetworkAppliancePrefixesDelegatedStatic_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a static delegated prefix from a network
     * Delete a static delegated prefix from a network
     * @param {String} networkId 
     * @param {String} staticDelegatedPrefixId 
     * @param {module:api/ConfigureApi~deleteNetworkAppliancePrefixesDelegatedStatic_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkAppliancePrefixesDelegatedStatic_0(networkId, staticDelegatedPrefixId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkAppliancePrefixesDelegatedStatic_0");
      }
      // verify the required parameter 'staticDelegatedPrefixId' is set
      if (staticDelegatedPrefixId === undefined || staticDelegatedPrefixId === null) {
        throw new Error("Missing the required parameter 'staticDelegatedPrefixId' when calling deleteNetworkAppliancePrefixesDelegatedStatic_0");
      }

      let pathParams = {
        'networkId': networkId,
        'staticDelegatedPrefixId': staticDelegatedPrefixId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/prefixes/delegated/statics/{staticDelegatedPrefixId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkApplianceStaticRoute_0 operation.
     * @callback module:api/ConfigureApi~deleteNetworkApplianceStaticRoute_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a static route from an MX or teleworker network
     * Delete a static route from an MX or teleworker network
     * @param {String} networkId 
     * @param {String} staticRouteId 
     * @param {module:api/ConfigureApi~deleteNetworkApplianceStaticRoute_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkApplianceStaticRoute_0(networkId, staticRouteId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkApplianceStaticRoute_0");
      }
      // verify the required parameter 'staticRouteId' is set
      if (staticRouteId === undefined || staticRouteId === null) {
        throw new Error("Missing the required parameter 'staticRouteId' when calling deleteNetworkApplianceStaticRoute_0");
      }

      let pathParams = {
        'networkId': networkId,
        'staticRouteId': staticRouteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/staticRoutes/{staticRouteId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkApplianceTrafficShapingCustomPerformanceClass_0 operation.
     * @callback module:api/ConfigureApi~deleteNetworkApplianceTrafficShapingCustomPerformanceClass_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a custom performance class from an MX network
     * Delete a custom performance class from an MX network
     * @param {String} networkId 
     * @param {String} customPerformanceClassId 
     * @param {module:api/ConfigureApi~deleteNetworkApplianceTrafficShapingCustomPerformanceClass_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkApplianceTrafficShapingCustomPerformanceClass_0(networkId, customPerformanceClassId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkApplianceTrafficShapingCustomPerformanceClass_0");
      }
      // verify the required parameter 'customPerformanceClassId' is set
      if (customPerformanceClassId === undefined || customPerformanceClassId === null) {
        throw new Error("Missing the required parameter 'customPerformanceClassId' when calling deleteNetworkApplianceTrafficShapingCustomPerformanceClass_0");
      }

      let pathParams = {
        'networkId': networkId,
        'customPerformanceClassId': customPerformanceClassId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/trafficShaping/customPerformanceClasses/{customPerformanceClassId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkApplianceVlan_0 operation.
     * @callback module:api/ConfigureApi~deleteNetworkApplianceVlan_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a VLAN from a network
     * Delete a VLAN from a network
     * @param {String} networkId 
     * @param {String} vlanId 
     * @param {module:api/ConfigureApi~deleteNetworkApplianceVlan_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkApplianceVlan_0(networkId, vlanId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkApplianceVlan_0");
      }
      // verify the required parameter 'vlanId' is set
      if (vlanId === undefined || vlanId === null) {
        throw new Error("Missing the required parameter 'vlanId' when calling deleteNetworkApplianceVlan_0");
      }

      let pathParams = {
        'networkId': networkId,
        'vlanId': vlanId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/vlans/{vlanId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkCameraQualityRetentionProfile_0 operation.
     * @callback module:api/ConfigureApi~deleteNetworkCameraQualityRetentionProfile_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an existing quality retention profile for this network.
     * Delete an existing quality retention profile for this network.
     * @param {String} networkId 
     * @param {String} qualityRetentionProfileId 
     * @param {module:api/ConfigureApi~deleteNetworkCameraQualityRetentionProfile_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkCameraQualityRetentionProfile_0(networkId, qualityRetentionProfileId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkCameraQualityRetentionProfile_0");
      }
      // verify the required parameter 'qualityRetentionProfileId' is set
      if (qualityRetentionProfileId === undefined || qualityRetentionProfileId === null) {
        throw new Error("Missing the required parameter 'qualityRetentionProfileId' when calling deleteNetworkCameraQualityRetentionProfile_0");
      }

      let pathParams = {
        'networkId': networkId,
        'qualityRetentionProfileId': qualityRetentionProfileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/camera/qualityRetentionProfiles/{qualityRetentionProfileId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkCameraWirelessProfile_0 operation.
     * @callback module:api/ConfigureApi~deleteNetworkCameraWirelessProfile_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an existing camera wireless profile for this network.
     * Delete an existing camera wireless profile for this network.
     * @param {String} networkId 
     * @param {String} wirelessProfileId 
     * @param {module:api/ConfigureApi~deleteNetworkCameraWirelessProfile_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkCameraWirelessProfile_0(networkId, wirelessProfileId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkCameraWirelessProfile_0");
      }
      // verify the required parameter 'wirelessProfileId' is set
      if (wirelessProfileId === undefined || wirelessProfileId === null) {
        throw new Error("Missing the required parameter 'wirelessProfileId' when calling deleteNetworkCameraWirelessProfile_0");
      }

      let pathParams = {
        'networkId': networkId,
        'wirelessProfileId': wirelessProfileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/camera/wirelessProfiles/{wirelessProfileId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkFirmwareUpgradesStagedGroup_0 operation.
     * @callback module:api/ConfigureApi~deleteNetworkFirmwareUpgradesStagedGroup_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Staged Upgrade Group
     * Delete a Staged Upgrade Group
     * @param {String} networkId 
     * @param {String} groupId 
     * @param {module:api/ConfigureApi~deleteNetworkFirmwareUpgradesStagedGroup_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkFirmwareUpgradesStagedGroup_0(networkId, groupId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkFirmwareUpgradesStagedGroup_0");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling deleteNetworkFirmwareUpgradesStagedGroup_0");
      }

      let pathParams = {
        'networkId': networkId,
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/firmwareUpgrades/staged/groups/{groupId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkFloorPlan_0 operation.
     * @callback module:api/ConfigureApi~deleteNetworkFloorPlan_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Destroy a floor plan
     * Destroy a floor plan
     * @param {String} networkId 
     * @param {String} floorPlanId 
     * @param {module:api/ConfigureApi~deleteNetworkFloorPlan_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkFloorPlan_0(networkId, floorPlanId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkFloorPlan_0");
      }
      // verify the required parameter 'floorPlanId' is set
      if (floorPlanId === undefined || floorPlanId === null) {
        throw new Error("Missing the required parameter 'floorPlanId' when calling deleteNetworkFloorPlan_0");
      }

      let pathParams = {
        'networkId': networkId,
        'floorPlanId': floorPlanId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/floorPlans/{floorPlanId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkGroupPolicy_0 operation.
     * @callback module:api/ConfigureApi~deleteNetworkGroupPolicy_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a group policy
     * Delete a group policy
     * @param {String} networkId 
     * @param {String} groupPolicyId 
     * @param {module:api/ConfigureApi~deleteNetworkGroupPolicy_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkGroupPolicy_0(networkId, groupPolicyId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkGroupPolicy_0");
      }
      // verify the required parameter 'groupPolicyId' is set
      if (groupPolicyId === undefined || groupPolicyId === null) {
        throw new Error("Missing the required parameter 'groupPolicyId' when calling deleteNetworkGroupPolicy_0");
      }

      let pathParams = {
        'networkId': networkId,
        'groupPolicyId': groupPolicyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/groupPolicies/{groupPolicyId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkMerakiAuthUser_0 operation.
     * @callback module:api/ConfigureApi~deleteNetworkMerakiAuthUser_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deauthorize a user
     * Deauthorize a user. To reauthorize a user after deauthorizing them, POST to this endpoint. (Currently, 802.1X RADIUS, splash guest, and client VPN users can be deauthorized.)
     * @param {String} networkId 
     * @param {String} merakiAuthUserId 
     * @param {module:api/ConfigureApi~deleteNetworkMerakiAuthUser_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkMerakiAuthUser_0(networkId, merakiAuthUserId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkMerakiAuthUser_0");
      }
      // verify the required parameter 'merakiAuthUserId' is set
      if (merakiAuthUserId === undefined || merakiAuthUserId === null) {
        throw new Error("Missing the required parameter 'merakiAuthUserId' when calling deleteNetworkMerakiAuthUser_0");
      }

      let pathParams = {
        'networkId': networkId,
        'merakiAuthUserId': merakiAuthUserId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/merakiAuthUsers/{merakiAuthUserId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkMqttBroker_0 operation.
     * @callback module:api/ConfigureApi~deleteNetworkMqttBroker_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an MQTT broker
     * Delete an MQTT broker
     * @param {String} networkId 
     * @param {String} mqttBrokerId 
     * @param {module:api/ConfigureApi~deleteNetworkMqttBroker_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkMqttBroker_0(networkId, mqttBrokerId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkMqttBroker_0");
      }
      // verify the required parameter 'mqttBrokerId' is set
      if (mqttBrokerId === undefined || mqttBrokerId === null) {
        throw new Error("Missing the required parameter 'mqttBrokerId' when calling deleteNetworkMqttBroker_0");
      }

      let pathParams = {
        'networkId': networkId,
        'mqttBrokerId': mqttBrokerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/mqttBrokers/{mqttBrokerId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkPiiRequest_0 operation.
     * @callback module:api/ConfigureApi~deleteNetworkPiiRequest_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a restrict processing PII request
     * Delete a restrict processing PII request  ## ALTERNATE PATH  ``` /organizations/{organizationId}/pii/requests/{requestId} ```
     * @param {String} networkId 
     * @param {String} requestId 
     * @param {module:api/ConfigureApi~deleteNetworkPiiRequest_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkPiiRequest_0(networkId, requestId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkPiiRequest_0");
      }
      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling deleteNetworkPiiRequest_0");
      }

      let pathParams = {
        'networkId': networkId,
        'requestId': requestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/pii/requests/{requestId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkSensorAlertsProfile_0 operation.
     * @callback module:api/ConfigureApi~deleteNetworkSensorAlertsProfile_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a sensor alert profile from a network.
     * Deletes a sensor alert profile from a network.
     * @param {String} networkId 
     * @param {String} id 
     * @param {module:api/ConfigureApi~deleteNetworkSensorAlertsProfile_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkSensorAlertsProfile_0(networkId, id, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkSensorAlertsProfile_0");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteNetworkSensorAlertsProfile_0");
      }

      let pathParams = {
        'networkId': networkId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/sensor/alerts/profiles/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkSmTargetGroup_0 operation.
     * @callback module:api/ConfigureApi~deleteNetworkSmTargetGroup_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a target group from a network
     * Delete a target group from a network
     * @param {String} networkId 
     * @param {String} targetGroupId 
     * @param {module:api/ConfigureApi~deleteNetworkSmTargetGroup_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkSmTargetGroup_0(networkId, targetGroupId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkSmTargetGroup_0");
      }
      // verify the required parameter 'targetGroupId' is set
      if (targetGroupId === undefined || targetGroupId === null) {
        throw new Error("Missing the required parameter 'targetGroupId' when calling deleteNetworkSmTargetGroup_0");
      }

      let pathParams = {
        'networkId': networkId,
        'targetGroupId': targetGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/targetGroups/{targetGroupId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkSmUserAccessDevice_0 operation.
     * @callback module:api/ConfigureApi~deleteNetworkSmUserAccessDevice_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a User Access Device
     * Delete a User Access Device
     * @param {String} networkId 
     * @param {String} userAccessDeviceId 
     * @param {module:api/ConfigureApi~deleteNetworkSmUserAccessDevice_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkSmUserAccessDevice_0(networkId, userAccessDeviceId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkSmUserAccessDevice_0");
      }
      // verify the required parameter 'userAccessDeviceId' is set
      if (userAccessDeviceId === undefined || userAccessDeviceId === null) {
        throw new Error("Missing the required parameter 'userAccessDeviceId' when calling deleteNetworkSmUserAccessDevice_0");
      }

      let pathParams = {
        'networkId': networkId,
        'userAccessDeviceId': userAccessDeviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/userAccessDevices/{userAccessDeviceId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkSwitchAccessPolicy_0 operation.
     * @callback module:api/ConfigureApi~deleteNetworkSwitchAccessPolicy_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an access policy for a switch network
     * Delete an access policy for a switch network
     * @param {String} networkId 
     * @param {String} accessPolicyNumber 
     * @param {module:api/ConfigureApi~deleteNetworkSwitchAccessPolicy_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkSwitchAccessPolicy_0(networkId, accessPolicyNumber, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkSwitchAccessPolicy_0");
      }
      // verify the required parameter 'accessPolicyNumber' is set
      if (accessPolicyNumber === undefined || accessPolicyNumber === null) {
        throw new Error("Missing the required parameter 'accessPolicyNumber' when calling deleteNetworkSwitchAccessPolicy_0");
      }

      let pathParams = {
        'networkId': networkId,
        'accessPolicyNumber': accessPolicyNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/accessPolicies/{accessPolicyNumber}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_0 operation.
     * @callback module:api/ConfigureApi~deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a server from being trusted by Dynamic ARP Inspection on this network
     * Remove a server from being trusted by Dynamic ARP Inspection on this network
     * @param {String} networkId 
     * @param {String} trustedServerId 
     * @param {module:api/ConfigureApi~deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_0(networkId, trustedServerId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_0");
      }
      // verify the required parameter 'trustedServerId' is set
      if (trustedServerId === undefined || trustedServerId === null) {
        throw new Error("Missing the required parameter 'trustedServerId' when calling deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_0");
      }

      let pathParams = {
        'networkId': networkId,
        'trustedServerId': trustedServerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/dhcpServerPolicy/arpInspection/trustedServers/{trustedServerId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkSwitchLinkAggregation_0 operation.
     * @callback module:api/ConfigureApi~deleteNetworkSwitchLinkAggregation_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Split a link aggregation group into separate ports
     * Split a link aggregation group into separate ports
     * @param {String} networkId 
     * @param {String} linkAggregationId 
     * @param {module:api/ConfigureApi~deleteNetworkSwitchLinkAggregation_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkSwitchLinkAggregation_0(networkId, linkAggregationId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkSwitchLinkAggregation_0");
      }
      // verify the required parameter 'linkAggregationId' is set
      if (linkAggregationId === undefined || linkAggregationId === null) {
        throw new Error("Missing the required parameter 'linkAggregationId' when calling deleteNetworkSwitchLinkAggregation_0");
      }

      let pathParams = {
        'networkId': networkId,
        'linkAggregationId': linkAggregationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/linkAggregations/{linkAggregationId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkSwitchPortSchedule_0 operation.
     * @callback module:api/ConfigureApi~deleteNetworkSwitchPortSchedule_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a switch port schedule
     * Delete a switch port schedule
     * @param {String} networkId 
     * @param {String} portScheduleId 
     * @param {module:api/ConfigureApi~deleteNetworkSwitchPortSchedule_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkSwitchPortSchedule_0(networkId, portScheduleId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkSwitchPortSchedule_0");
      }
      // verify the required parameter 'portScheduleId' is set
      if (portScheduleId === undefined || portScheduleId === null) {
        throw new Error("Missing the required parameter 'portScheduleId' when calling deleteNetworkSwitchPortSchedule_0");
      }

      let pathParams = {
        'networkId': networkId,
        'portScheduleId': portScheduleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/portSchedules/{portScheduleId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkSwitchQosRule_0 operation.
     * @callback module:api/ConfigureApi~deleteNetworkSwitchQosRule_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a quality of service rule
     * Delete a quality of service rule
     * @param {String} networkId 
     * @param {String} qosRuleId 
     * @param {module:api/ConfigureApi~deleteNetworkSwitchQosRule_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkSwitchQosRule_0(networkId, qosRuleId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkSwitchQosRule_0");
      }
      // verify the required parameter 'qosRuleId' is set
      if (qosRuleId === undefined || qosRuleId === null) {
        throw new Error("Missing the required parameter 'qosRuleId' when calling deleteNetworkSwitchQosRule_0");
      }

      let pathParams = {
        'networkId': networkId,
        'qosRuleId': qosRuleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/qosRules/{qosRuleId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkSwitchRoutingMulticastRendezvousPoint_0 operation.
     * @callback module:api/ConfigureApi~deleteNetworkSwitchRoutingMulticastRendezvousPoint_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a multicast rendezvous point
     * Delete a multicast rendezvous point
     * @param {String} networkId 
     * @param {String} rendezvousPointId 
     * @param {module:api/ConfigureApi~deleteNetworkSwitchRoutingMulticastRendezvousPoint_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkSwitchRoutingMulticastRendezvousPoint_0(networkId, rendezvousPointId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkSwitchRoutingMulticastRendezvousPoint_0");
      }
      // verify the required parameter 'rendezvousPointId' is set
      if (rendezvousPointId === undefined || rendezvousPointId === null) {
        throw new Error("Missing the required parameter 'rendezvousPointId' when calling deleteNetworkSwitchRoutingMulticastRendezvousPoint_0");
      }

      let pathParams = {
        'networkId': networkId,
        'rendezvousPointId': rendezvousPointId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/routing/multicast/rendezvousPoints/{rendezvousPointId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkSwitchStackRoutingInterface_0 operation.
     * @callback module:api/ConfigureApi~deleteNetworkSwitchStackRoutingInterface_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a layer 3 interface from a switch stack
     * Delete a layer 3 interface from a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {String} interfaceId 
     * @param {module:api/ConfigureApi~deleteNetworkSwitchStackRoutingInterface_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkSwitchStackRoutingInterface_0(networkId, switchStackId, interfaceId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkSwitchStackRoutingInterface_0");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling deleteNetworkSwitchStackRoutingInterface_0");
      }
      // verify the required parameter 'interfaceId' is set
      if (interfaceId === undefined || interfaceId === null) {
        throw new Error("Missing the required parameter 'interfaceId' when calling deleteNetworkSwitchStackRoutingInterface_0");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId,
        'interfaceId': interfaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkSwitchStackRoutingStaticRoute_0 operation.
     * @callback module:api/ConfigureApi~deleteNetworkSwitchStackRoutingStaticRoute_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a layer 3 static route for a switch stack
     * Delete a layer 3 static route for a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {String} staticRouteId 
     * @param {module:api/ConfigureApi~deleteNetworkSwitchStackRoutingStaticRoute_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkSwitchStackRoutingStaticRoute_0(networkId, switchStackId, staticRouteId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkSwitchStackRoutingStaticRoute_0");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling deleteNetworkSwitchStackRoutingStaticRoute_0");
      }
      // verify the required parameter 'staticRouteId' is set
      if (staticRouteId === undefined || staticRouteId === null) {
        throw new Error("Missing the required parameter 'staticRouteId' when calling deleteNetworkSwitchStackRoutingStaticRoute_0");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId,
        'staticRouteId': staticRouteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes/{staticRouteId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkSwitchStack_0 operation.
     * @callback module:api/ConfigureApi~deleteNetworkSwitchStack_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a stack
     * Delete a stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {module:api/ConfigureApi~deleteNetworkSwitchStack_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkSwitchStack_0(networkId, switchStackId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkSwitchStack_0");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling deleteNetworkSwitchStack_0");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkWebhooksHttpServer_0 operation.
     * @callback module:api/ConfigureApi~deleteNetworkWebhooksHttpServer_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an HTTP server from a network
     * Delete an HTTP server from a network
     * @param {String} networkId 
     * @param {String} httpServerId 
     * @param {module:api/ConfigureApi~deleteNetworkWebhooksHttpServer_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkWebhooksHttpServer_0(networkId, httpServerId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkWebhooksHttpServer_0");
      }
      // verify the required parameter 'httpServerId' is set
      if (httpServerId === undefined || httpServerId === null) {
        throw new Error("Missing the required parameter 'httpServerId' when calling deleteNetworkWebhooksHttpServer_0");
      }

      let pathParams = {
        'networkId': networkId,
        'httpServerId': httpServerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/webhooks/httpServers/{httpServerId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkWebhooksPayloadTemplate_0 operation.
     * @callback module:api/ConfigureApi~deleteNetworkWebhooksPayloadTemplate_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Destroy a webhook payload template for a network
     * Destroy a webhook payload template for a network. Does not work for included templates ('wpt_00001', 'wpt_00002', 'wpt_00003', 'wpt_00004', 'wpt_00005' or 'wpt_00006')
     * @param {String} networkId 
     * @param {String} payloadTemplateId 
     * @param {module:api/ConfigureApi~deleteNetworkWebhooksPayloadTemplate_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkWebhooksPayloadTemplate_0(networkId, payloadTemplateId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkWebhooksPayloadTemplate_0");
      }
      // verify the required parameter 'payloadTemplateId' is set
      if (payloadTemplateId === undefined || payloadTemplateId === null) {
        throw new Error("Missing the required parameter 'payloadTemplateId' when calling deleteNetworkWebhooksPayloadTemplate_0");
      }

      let pathParams = {
        'networkId': networkId,
        'payloadTemplateId': payloadTemplateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/webhooks/payloadTemplates/{payloadTemplateId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkWirelessRfProfile_0 operation.
     * @callback module:api/ConfigureApi~deleteNetworkWirelessRfProfile_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a RF Profile
     * Delete a RF Profile
     * @param {String} networkId 
     * @param {String} rfProfileId 
     * @param {module:api/ConfigureApi~deleteNetworkWirelessRfProfile_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkWirelessRfProfile_0(networkId, rfProfileId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkWirelessRfProfile_0");
      }
      // verify the required parameter 'rfProfileId' is set
      if (rfProfileId === undefined || rfProfileId === null) {
        throw new Error("Missing the required parameter 'rfProfileId' when calling deleteNetworkWirelessRfProfile_0");
      }

      let pathParams = {
        'networkId': networkId,
        'rfProfileId': rfProfileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/rfProfiles/{rfProfileId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkWirelessSsidIdentityPsk_0 operation.
     * @callback module:api/ConfigureApi~deleteNetworkWirelessSsidIdentityPsk_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an Identity PSK
     * Delete an Identity PSK
     * @param {String} networkId 
     * @param {String} number 
     * @param {String} identityPskId 
     * @param {module:api/ConfigureApi~deleteNetworkWirelessSsidIdentityPsk_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkWirelessSsidIdentityPsk_0(networkId, number, identityPskId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkWirelessSsidIdentityPsk_0");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling deleteNetworkWirelessSsidIdentityPsk_0");
      }
      // verify the required parameter 'identityPskId' is set
      if (identityPskId === undefined || identityPskId === null) {
        throw new Error("Missing the required parameter 'identityPskId' when calling deleteNetworkWirelessSsidIdentityPsk_0");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number,
        'identityPskId': identityPskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/identityPsks/{identityPskId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetwork_0 operation.
     * @callback module:api/ConfigureApi~deleteNetwork_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a network
     * Delete a network
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~deleteNetwork_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetwork_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetwork_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganizationActionBatch_0 operation.
     * @callback module:api/ConfigureApi~deleteOrganizationActionBatch_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an action batch
     * Delete an action batch
     * @param {String} organizationId 
     * @param {String} actionBatchId 
     * @param {module:api/ConfigureApi~deleteOrganizationActionBatch_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganizationActionBatch_0(organizationId, actionBatchId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteOrganizationActionBatch_0");
      }
      // verify the required parameter 'actionBatchId' is set
      if (actionBatchId === undefined || actionBatchId === null) {
        throw new Error("Missing the required parameter 'actionBatchId' when calling deleteOrganizationActionBatch_0");
      }

      let pathParams = {
        'organizationId': organizationId,
        'actionBatchId': actionBatchId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/actionBatches/{actionBatchId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganizationAdaptivePolicyAcl_0 operation.
     * @callback module:api/ConfigureApi~deleteOrganizationAdaptivePolicyAcl_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified adaptive policy ACL
     * Deletes the specified adaptive policy ACL. Note this adaptive policy ACL will also be removed from policies using it.
     * @param {String} organizationId 
     * @param {String} aclId 
     * @param {module:api/ConfigureApi~deleteOrganizationAdaptivePolicyAcl_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganizationAdaptivePolicyAcl_0(organizationId, aclId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteOrganizationAdaptivePolicyAcl_0");
      }
      // verify the required parameter 'aclId' is set
      if (aclId === undefined || aclId === null) {
        throw new Error("Missing the required parameter 'aclId' when calling deleteOrganizationAdaptivePolicyAcl_0");
      }

      let pathParams = {
        'organizationId': organizationId,
        'aclId': aclId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/adaptivePolicy/acls/{aclId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganizationAdaptivePolicyGroup_0 operation.
     * @callback module:api/ConfigureApi~deleteOrganizationAdaptivePolicyGroup_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified adaptive policy group and any associated policies and references
     * Deletes the specified adaptive policy group and any associated policies and references
     * @param {String} organizationId 
     * @param {String} id 
     * @param {module:api/ConfigureApi~deleteOrganizationAdaptivePolicyGroup_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganizationAdaptivePolicyGroup_0(organizationId, id, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteOrganizationAdaptivePolicyGroup_0");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOrganizationAdaptivePolicyGroup_0");
      }

      let pathParams = {
        'organizationId': organizationId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/adaptivePolicy/groups/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganizationAdaptivePolicyPolicy_0 operation.
     * @callback module:api/ConfigureApi~deleteOrganizationAdaptivePolicyPolicy_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an Adaptive Policy
     * Delete an Adaptive Policy
     * @param {String} organizationId 
     * @param {String} id 
     * @param {module:api/ConfigureApi~deleteOrganizationAdaptivePolicyPolicy_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganizationAdaptivePolicyPolicy_0(organizationId, id, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteOrganizationAdaptivePolicyPolicy_0");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOrganizationAdaptivePolicyPolicy_0");
      }

      let pathParams = {
        'organizationId': organizationId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/adaptivePolicy/policies/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganizationAdmin_0 operation.
     * @callback module:api/ConfigureApi~deleteOrganizationAdmin_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Revoke all access for a dashboard administrator within this organization
     * Revoke all access for a dashboard administrator within this organization
     * @param {String} organizationId 
     * @param {String} adminId 
     * @param {module:api/ConfigureApi~deleteOrganizationAdmin_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganizationAdmin_0(organizationId, adminId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteOrganizationAdmin_0");
      }
      // verify the required parameter 'adminId' is set
      if (adminId === undefined || adminId === null) {
        throw new Error("Missing the required parameter 'adminId' when calling deleteOrganizationAdmin_0");
      }

      let pathParams = {
        'organizationId': organizationId,
        'adminId': adminId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/admins/{adminId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganizationAlertsProfile_0 operation.
     * @callback module:api/ConfigureApi~deleteOrganizationAlertsProfile_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes an organization-wide alert config
     * Removes an organization-wide alert config
     * @param {String} organizationId 
     * @param {String} alertConfigId 
     * @param {module:api/ConfigureApi~deleteOrganizationAlertsProfile_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganizationAlertsProfile_0(organizationId, alertConfigId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteOrganizationAlertsProfile_0");
      }
      // verify the required parameter 'alertConfigId' is set
      if (alertConfigId === undefined || alertConfigId === null) {
        throw new Error("Missing the required parameter 'alertConfigId' when calling deleteOrganizationAlertsProfile_0");
      }

      let pathParams = {
        'organizationId': organizationId,
        'alertConfigId': alertConfigId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/alerts/profiles/{alertConfigId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganizationBrandingPolicy_0 operation.
     * @callback module:api/ConfigureApi~deleteOrganizationBrandingPolicy_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a branding policy
     * Delete a branding policy
     * @param {String} organizationId 
     * @param {String} brandingPolicyId 
     * @param {module:api/ConfigureApi~deleteOrganizationBrandingPolicy_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganizationBrandingPolicy_0(organizationId, brandingPolicyId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteOrganizationBrandingPolicy_0");
      }
      // verify the required parameter 'brandingPolicyId' is set
      if (brandingPolicyId === undefined || brandingPolicyId === null) {
        throw new Error("Missing the required parameter 'brandingPolicyId' when calling deleteOrganizationBrandingPolicy_0");
      }

      let pathParams = {
        'organizationId': organizationId,
        'brandingPolicyId': brandingPolicyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/brandingPolicies/{brandingPolicyId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganizationCameraCustomAnalyticsArtifact_0 operation.
     * @callback module:api/ConfigureApi~deleteOrganizationCameraCustomAnalyticsArtifact_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Custom Analytics Artifact
     * Delete Custom Analytics Artifact
     * @param {String} organizationId 
     * @param {String} artifactId 
     * @param {module:api/ConfigureApi~deleteOrganizationCameraCustomAnalyticsArtifact_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganizationCameraCustomAnalyticsArtifact_0(organizationId, artifactId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteOrganizationCameraCustomAnalyticsArtifact_0");
      }
      // verify the required parameter 'artifactId' is set
      if (artifactId === undefined || artifactId === null) {
        throw new Error("Missing the required parameter 'artifactId' when calling deleteOrganizationCameraCustomAnalyticsArtifact_0");
      }

      let pathParams = {
        'organizationId': organizationId,
        'artifactId': artifactId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/camera/customAnalytics/artifacts/{artifactId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganizationConfigTemplate_0 operation.
     * @callback module:api/ConfigureApi~deleteOrganizationConfigTemplate_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a configuration template
     * Remove a configuration template
     * @param {String} organizationId 
     * @param {String} configTemplateId 
     * @param {module:api/ConfigureApi~deleteOrganizationConfigTemplate_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganizationConfigTemplate_0(organizationId, configTemplateId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteOrganizationConfigTemplate_0");
      }
      // verify the required parameter 'configTemplateId' is set
      if (configTemplateId === undefined || configTemplateId === null) {
        throw new Error("Missing the required parameter 'configTemplateId' when calling deleteOrganizationConfigTemplate_0");
      }

      let pathParams = {
        'organizationId': organizationId,
        'configTemplateId': configTemplateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/configTemplates/{configTemplateId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganizationEarlyAccessFeaturesOptIn_0 operation.
     * @callback module:api/ConfigureApi~deleteOrganizationEarlyAccessFeaturesOptIn_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an early access feature opt-in
     * Delete an early access feature opt-in
     * @param {String} organizationId 
     * @param {String} optInId 
     * @param {module:api/ConfigureApi~deleteOrganizationEarlyAccessFeaturesOptIn_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganizationEarlyAccessFeaturesOptIn_0(organizationId, optInId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteOrganizationEarlyAccessFeaturesOptIn_0");
      }
      // verify the required parameter 'optInId' is set
      if (optInId === undefined || optInId === null) {
        throw new Error("Missing the required parameter 'optInId' when calling deleteOrganizationEarlyAccessFeaturesOptIn_0");
      }

      let pathParams = {
        'organizationId': organizationId,
        'optInId': optInId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/earlyAccess/features/optIns/{optInId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganizationInsightMonitoredMediaServer_0 operation.
     * @callback module:api/ConfigureApi~deleteOrganizationInsightMonitoredMediaServer_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a monitored media server from this organization
     * Delete a monitored media server from this organization. Only valid for organizations with Meraki Insight.
     * @param {String} organizationId 
     * @param {String} monitoredMediaServerId 
     * @param {module:api/ConfigureApi~deleteOrganizationInsightMonitoredMediaServer_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganizationInsightMonitoredMediaServer_0(organizationId, monitoredMediaServerId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteOrganizationInsightMonitoredMediaServer_0");
      }
      // verify the required parameter 'monitoredMediaServerId' is set
      if (monitoredMediaServerId === undefined || monitoredMediaServerId === null) {
        throw new Error("Missing the required parameter 'monitoredMediaServerId' when calling deleteOrganizationInsightMonitoredMediaServer_0");
      }

      let pathParams = {
        'organizationId': organizationId,
        'monitoredMediaServerId': monitoredMediaServerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/insight/monitoredMediaServers/{monitoredMediaServerId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganizationPolicyObject_0 operation.
     * @callback module:api/ConfigureApi~deleteOrganizationPolicyObject_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Policy Object.
     * Deletes a Policy Object.
     * @param {String} organizationId 
     * @param {String} policyObjectId 
     * @param {module:api/ConfigureApi~deleteOrganizationPolicyObject_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganizationPolicyObject_0(organizationId, policyObjectId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteOrganizationPolicyObject_0");
      }
      // verify the required parameter 'policyObjectId' is set
      if (policyObjectId === undefined || policyObjectId === null) {
        throw new Error("Missing the required parameter 'policyObjectId' when calling deleteOrganizationPolicyObject_0");
      }

      let pathParams = {
        'organizationId': organizationId,
        'policyObjectId': policyObjectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/policyObjects/{policyObjectId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganizationPolicyObjectsGroup_0 operation.
     * @callback module:api/ConfigureApi~deleteOrganizationPolicyObjectsGroup_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Policy Object Group.
     * Deletes a Policy Object Group.
     * @param {String} organizationId 
     * @param {String} policyObjectGroupId 
     * @param {module:api/ConfigureApi~deleteOrganizationPolicyObjectsGroup_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganizationPolicyObjectsGroup_0(organizationId, policyObjectGroupId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteOrganizationPolicyObjectsGroup_0");
      }
      // verify the required parameter 'policyObjectGroupId' is set
      if (policyObjectGroupId === undefined || policyObjectGroupId === null) {
        throw new Error("Missing the required parameter 'policyObjectGroupId' when calling deleteOrganizationPolicyObjectsGroup_0");
      }

      let pathParams = {
        'organizationId': organizationId,
        'policyObjectGroupId': policyObjectGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/policyObjects/groups/{policyObjectGroupId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganizationSamlIdp_0 operation.
     * @callback module:api/ConfigureApi~deleteOrganizationSamlIdp_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a SAML IdP in your organization.
     * Remove a SAML IdP in your organization.
     * @param {String} organizationId 
     * @param {String} idpId 
     * @param {module:api/ConfigureApi~deleteOrganizationSamlIdp_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganizationSamlIdp_0(organizationId, idpId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteOrganizationSamlIdp_0");
      }
      // verify the required parameter 'idpId' is set
      if (idpId === undefined || idpId === null) {
        throw new Error("Missing the required parameter 'idpId' when calling deleteOrganizationSamlIdp_0");
      }

      let pathParams = {
        'organizationId': organizationId,
        'idpId': idpId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/saml/idps/{idpId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganizationSamlRole_0 operation.
     * @callback module:api/ConfigureApi~deleteOrganizationSamlRole_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a SAML role
     * Remove a SAML role
     * @param {String} organizationId 
     * @param {String} samlRoleId 
     * @param {module:api/ConfigureApi~deleteOrganizationSamlRole_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganizationSamlRole_0(organizationId, samlRoleId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteOrganizationSamlRole_0");
      }
      // verify the required parameter 'samlRoleId' is set
      if (samlRoleId === undefined || samlRoleId === null) {
        throw new Error("Missing the required parameter 'samlRoleId' when calling deleteOrganizationSamlRole_0");
      }

      let pathParams = {
        'organizationId': organizationId,
        'samlRoleId': samlRoleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/samlRoles/{samlRoleId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganizationUser_0 operation.
     * @callback module:api/ConfigureApi~deleteOrganizationUser_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a user and all of its authentication methods.
     * Delete a user and all of its authentication methods.
     * @param {String} organizationId 
     * @param {String} userId 
     * @param {module:api/ConfigureApi~deleteOrganizationUser_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganizationUser_0(organizationId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteOrganizationUser_0");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteOrganizationUser_0");
      }

      let pathParams = {
        'organizationId': organizationId,
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/users/{userId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganization_0 operation.
     * @callback module:api/ConfigureApi~deleteOrganization_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an organization
     * Delete an organization
     * @param {String} organizationId 
     * @param {module:api/ConfigureApi~deleteOrganization_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganization_0(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteOrganization_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{organizationId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceApplianceUplinksSettings_0 operation.
     * @callback module:api/ConfigureApi~getDeviceApplianceUplinksSettings_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDeviceApplianceUplinksSettings200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the uplink settings for an MX appliance
     * Return the uplink settings for an MX appliance
     * @param {String} serial 
     * @param {module:api/ConfigureApi~getDeviceApplianceUplinksSettings_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDeviceApplianceUplinksSettings200Response}
     */
    getDeviceApplianceUplinksSettings_0(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceApplianceUplinksSettings_0");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDeviceApplianceUplinksSettings200Response;
      return this.apiClient.callApi(
        '/devices/{serial}/appliance/uplinks/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceCameraCustomAnalytics_0 operation.
     * @callback module:api/ConfigureApi~getDeviceCameraCustomAnalytics_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return custom analytics settings for a camera
     * Return custom analytics settings for a camera
     * @param {String} serial 
     * @param {module:api/ConfigureApi~getDeviceCameraCustomAnalytics_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getDeviceCameraCustomAnalytics_0(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceCameraCustomAnalytics_0");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/camera/customAnalytics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceCameraQualityAndRetention_0 operation.
     * @callback module:api/ConfigureApi~getDeviceCameraQualityAndRetention_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns quality and retention settings for the given camera
     * Returns quality and retention settings for the given camera
     * @param {String} serial 
     * @param {module:api/ConfigureApi~getDeviceCameraQualityAndRetention_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getDeviceCameraQualityAndRetention_0(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceCameraQualityAndRetention_0");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/camera/qualityAndRetention', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceCameraSenseObjectDetectionModels_0 operation.
     * @callback module:api/ConfigureApi~getDeviceCameraSenseObjectDetectionModels_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the MV Sense object detection model list for the given camera
     * Returns the MV Sense object detection model list for the given camera
     * @param {String} serial 
     * @param {module:api/ConfigureApi~getDeviceCameraSenseObjectDetectionModels_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getDeviceCameraSenseObjectDetectionModels_0(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceCameraSenseObjectDetectionModels_0");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/devices/{serial}/camera/sense/objectDetectionModels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceCameraSense_0 operation.
     * @callback module:api/ConfigureApi~getDeviceCameraSense_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns sense settings for a given camera
     * Returns sense settings for a given camera
     * @param {String} serial 
     * @param {module:api/ConfigureApi~getDeviceCameraSense_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getDeviceCameraSense_0(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceCameraSense_0");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/camera/sense', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceCameraVideoLink_0 operation.
     * @callback module:api/ConfigureApi~getDeviceCameraVideoLink_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns video link to the specified camera
     * Returns video link to the specified camera. If a timestamp is supplied, it links to that timestamp.
     * @param {String} serial 
     * @param {Object} opts Optional parameters
     * @param {Date} [timestamp] [optional] The video link will start at this time. The timestamp should be a string in ISO8601 format. If no timestamp is specified, we will assume current time.
     * @param {module:api/ConfigureApi~getDeviceCameraVideoLink_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getDeviceCameraVideoLink_0(serial, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceCameraVideoLink_0");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
        'timestamp': opts['timestamp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/camera/videoLink', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceCameraVideoSettings_0 operation.
     * @callback module:api/ConfigureApi~getDeviceCameraVideoSettings_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns video settings for the given camera
     * Returns video settings for the given camera
     * @param {String} serial 
     * @param {module:api/ConfigureApi~getDeviceCameraVideoSettings_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getDeviceCameraVideoSettings_0(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceCameraVideoSettings_0");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/camera/video/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceCameraWirelessProfiles_0 operation.
     * @callback module:api/ConfigureApi~getDeviceCameraWirelessProfiles_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns wireless profile assigned to the given camera
     * Returns wireless profile assigned to the given camera
     * @param {String} serial 
     * @param {module:api/ConfigureApi~getDeviceCameraWirelessProfiles_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getDeviceCameraWirelessProfiles_0(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceCameraWirelessProfiles_0");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/camera/wirelessProfiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceCellularGatewayLan_0 operation.
     * @callback module:api/ConfigureApi~getDeviceCellularGatewayLan_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show the LAN Settings of a MG
     * Show the LAN Settings of a MG
     * @param {String} serial 
     * @param {module:api/ConfigureApi~getDeviceCellularGatewayLan_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getDeviceCellularGatewayLan_0(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceCellularGatewayLan_0");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/cellularGateway/lan', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceCellularGatewayPortForwardingRules_0 operation.
     * @callback module:api/ConfigureApi~getDeviceCellularGatewayPortForwardingRules_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the port forwarding rules for a single MG.
     * Returns the port forwarding rules for a single MG.
     * @param {String} serial 
     * @param {module:api/ConfigureApi~getDeviceCellularGatewayPortForwardingRules_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getDeviceCellularGatewayPortForwardingRules_0(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceCellularGatewayPortForwardingRules_0");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/cellularGateway/portForwardingRules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceCellularSims_0 operation.
     * @callback module:api/ConfigureApi~getDeviceCellularSims_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the SIM and APN configurations for a cellular device.
     * Return the SIM and APN configurations for a cellular device.
     * @param {String} serial 
     * @param {module:api/ConfigureApi~getDeviceCellularSims_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getDeviceCellularSims_0(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceCellularSims_0");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/cellular/sims', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceManagementInterface_0 operation.
     * @callback module:api/ConfigureApi~getDeviceManagementInterface_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the management interface settings for a device
     * Return the management interface settings for a device
     * @param {String} serial 
     * @param {module:api/ConfigureApi~getDeviceManagementInterface_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getDeviceManagementInterface_0(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceManagementInterface_0");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/managementInterface', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceSensorRelationships_0 operation.
     * @callback module:api/ConfigureApi~getDeviceSensorRelationships_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetDeviceSensorRelationships200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the sensor roles for a given sensor or camera device.
     * List the sensor roles for a given sensor or camera device.
     * @param {String} serial 
     * @param {module:api/ConfigureApi~getDeviceSensorRelationships_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetDeviceSensorRelationships200ResponseInner>}
     */
    getDeviceSensorRelationships_0(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceSensorRelationships_0");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetDeviceSensorRelationships200ResponseInner];
      return this.apiClient.callApi(
        '/devices/{serial}/sensor/relationships', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceSwitchPort_0 operation.
     * @callback module:api/ConfigureApi~getDeviceSwitchPort_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDeviceSwitchPorts200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a switch port
     * Return a switch port
     * @param {String} serial 
     * @param {String} portId 
     * @param {module:api/ConfigureApi~getDeviceSwitchPort_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDeviceSwitchPorts200ResponseInner}
     */
    getDeviceSwitchPort_0(serial, portId, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceSwitchPort_0");
      }
      // verify the required parameter 'portId' is set
      if (portId === undefined || portId === null) {
        throw new Error("Missing the required parameter 'portId' when calling getDeviceSwitchPort_0");
      }

      let pathParams = {
        'serial': serial,
        'portId': portId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDeviceSwitchPorts200ResponseInner;
      return this.apiClient.callApi(
        '/devices/{serial}/switch/ports/{portId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceSwitchPorts_0 operation.
     * @callback module:api/ConfigureApi~getDeviceSwitchPorts_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetDeviceSwitchPorts200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the switch ports for a switch
     * List the switch ports for a switch
     * @param {String} serial 
     * @param {module:api/ConfigureApi~getDeviceSwitchPorts_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetDeviceSwitchPorts200ResponseInner>}
     */
    getDeviceSwitchPorts_0(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceSwitchPorts_0");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetDeviceSwitchPorts200ResponseInner];
      return this.apiClient.callApi(
        '/devices/{serial}/switch/ports', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceSwitchRoutingInterfaceDhcp_0 operation.
     * @callback module:api/ConfigureApi~getDeviceSwitchRoutingInterfaceDhcp_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a layer 3 interface DHCP configuration for a switch
     * Return a layer 3 interface DHCP configuration for a switch
     * @param {String} serial 
     * @param {String} interfaceId 
     * @param {module:api/ConfigureApi~getDeviceSwitchRoutingInterfaceDhcp_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getDeviceSwitchRoutingInterfaceDhcp_0(serial, interfaceId, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceSwitchRoutingInterfaceDhcp_0");
      }
      // verify the required parameter 'interfaceId' is set
      if (interfaceId === undefined || interfaceId === null) {
        throw new Error("Missing the required parameter 'interfaceId' when calling getDeviceSwitchRoutingInterfaceDhcp_0");
      }

      let pathParams = {
        'serial': serial,
        'interfaceId': interfaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/switch/routing/interfaces/{interfaceId}/dhcp', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceSwitchRoutingInterface_0 operation.
     * @callback module:api/ConfigureApi~getDeviceSwitchRoutingInterface_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDeviceSwitchRoutingInterfaces200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a layer 3 interface for a switch
     * Return a layer 3 interface for a switch
     * @param {String} serial 
     * @param {String} interfaceId 
     * @param {module:api/ConfigureApi~getDeviceSwitchRoutingInterface_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDeviceSwitchRoutingInterfaces200ResponseInner}
     */
    getDeviceSwitchRoutingInterface_0(serial, interfaceId, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceSwitchRoutingInterface_0");
      }
      // verify the required parameter 'interfaceId' is set
      if (interfaceId === undefined || interfaceId === null) {
        throw new Error("Missing the required parameter 'interfaceId' when calling getDeviceSwitchRoutingInterface_0");
      }

      let pathParams = {
        'serial': serial,
        'interfaceId': interfaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDeviceSwitchRoutingInterfaces200ResponseInner;
      return this.apiClient.callApi(
        '/devices/{serial}/switch/routing/interfaces/{interfaceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceSwitchRoutingInterfaces_0 operation.
     * @callback module:api/ConfigureApi~getDeviceSwitchRoutingInterfaces_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetDeviceSwitchRoutingInterfaces200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List layer 3 interfaces for a switch
     * List layer 3 interfaces for a switch. Those for a stack may be found under switch stack routing.
     * @param {String} serial 
     * @param {module:api/ConfigureApi~getDeviceSwitchRoutingInterfaces_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetDeviceSwitchRoutingInterfaces200ResponseInner>}
     */
    getDeviceSwitchRoutingInterfaces_0(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceSwitchRoutingInterfaces_0");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetDeviceSwitchRoutingInterfaces200ResponseInner];
      return this.apiClient.callApi(
        '/devices/{serial}/switch/routing/interfaces', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceSwitchRoutingStaticRoute_0 operation.
     * @callback module:api/ConfigureApi~getDeviceSwitchRoutingStaticRoute_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDeviceSwitchRoutingStaticRoute200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a layer 3 static route for a switch
     * Return a layer 3 static route for a switch
     * @param {String} serial 
     * @param {String} staticRouteId 
     * @param {module:api/ConfigureApi~getDeviceSwitchRoutingStaticRoute_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDeviceSwitchRoutingStaticRoute200Response}
     */
    getDeviceSwitchRoutingStaticRoute_0(serial, staticRouteId, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceSwitchRoutingStaticRoute_0");
      }
      // verify the required parameter 'staticRouteId' is set
      if (staticRouteId === undefined || staticRouteId === null) {
        throw new Error("Missing the required parameter 'staticRouteId' when calling getDeviceSwitchRoutingStaticRoute_0");
      }

      let pathParams = {
        'serial': serial,
        'staticRouteId': staticRouteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDeviceSwitchRoutingStaticRoute200Response;
      return this.apiClient.callApi(
        '/devices/{serial}/switch/routing/staticRoutes/{staticRouteId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceSwitchRoutingStaticRoutes_0 operation.
     * @callback module:api/ConfigureApi~getDeviceSwitchRoutingStaticRoutes_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List layer 3 static routes for a switch
     * List layer 3 static routes for a switch
     * @param {String} serial 
     * @param {module:api/ConfigureApi~getDeviceSwitchRoutingStaticRoutes_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getDeviceSwitchRoutingStaticRoutes_0(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceSwitchRoutingStaticRoutes_0");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/devices/{serial}/switch/routing/staticRoutes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceSwitchWarmSpare_0 operation.
     * @callback module:api/ConfigureApi~getDeviceSwitchWarmSpare_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return warm spare configuration for a switch
     * Return warm spare configuration for a switch
     * @param {String} serial 
     * @param {module:api/ConfigureApi~getDeviceSwitchWarmSpare_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getDeviceSwitchWarmSpare_0(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceSwitchWarmSpare_0");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/switch/warmSpare', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceWirelessBluetoothSettings_0 operation.
     * @callback module:api/ConfigureApi~getDeviceWirelessBluetoothSettings_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDeviceWirelessBluetoothSettings200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the bluetooth settings for a wireless device
     * Return the bluetooth settings for a wireless device
     * @param {String} serial 
     * @param {module:api/ConfigureApi~getDeviceWirelessBluetoothSettings_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDeviceWirelessBluetoothSettings200Response}
     */
    getDeviceWirelessBluetoothSettings_0(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceWirelessBluetoothSettings_0");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDeviceWirelessBluetoothSettings200Response;
      return this.apiClient.callApi(
        '/devices/{serial}/wireless/bluetooth/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceWirelessRadioSettings_0 operation.
     * @callback module:api/ConfigureApi~getDeviceWirelessRadioSettings_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the radio settings of a device
     * Return the radio settings of a device
     * @param {String} serial 
     * @param {module:api/ConfigureApi~getDeviceWirelessRadioSettings_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getDeviceWirelessRadioSettings_0(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceWirelessRadioSettings_0");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/wireless/radio/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDevice_0 operation.
     * @callback module:api/ConfigureApi~getDevice_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a single device
     * Return a single device
     * @param {String} serial 
     * @param {module:api/ConfigureApi~getDevice_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getDevice_0(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDevice_0");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkAlertsSettings_0 operation.
     * @callback module:api/ConfigureApi~getNetworkAlertsSettings_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the alert configuration for this network
     * Return the alert configuration for this network
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkAlertsSettings_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkAlertsSettings_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkAlertsSettings_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/alerts/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceConnectivityMonitoringDestinations_0 operation.
     * @callback module:api/ConfigureApi~getNetworkApplianceConnectivityMonitoringDestinations_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the connectivity testing destinations for an MX network
     * Return the connectivity testing destinations for an MX network
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkApplianceConnectivityMonitoringDestinations_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkApplianceConnectivityMonitoringDestinations_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceConnectivityMonitoringDestinations_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/connectivityMonitoringDestinations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceContentFilteringCategories_0 operation.
     * @callback module:api/ConfigureApi~getNetworkApplianceContentFilteringCategories_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all available content filtering categories for an MX network
     * List all available content filtering categories for an MX network
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkApplianceContentFilteringCategories_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkApplianceContentFilteringCategories_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceContentFilteringCategories_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/contentFiltering/categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceContentFiltering_0 operation.
     * @callback module:api/ConfigureApi~getNetworkApplianceContentFiltering_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the content filtering settings for an MX network
     * Return the content filtering settings for an MX network
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkApplianceContentFiltering_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkApplianceContentFiltering_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceContentFiltering_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/contentFiltering', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceFirewallCellularFirewallRules_0 operation.
     * @callback module:api/ConfigureApi~getNetworkApplianceFirewallCellularFirewallRules_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the cellular firewall rules for an MX network
     * Return the cellular firewall rules for an MX network
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkApplianceFirewallCellularFirewallRules_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkApplianceFirewallCellularFirewallRules_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceFirewallCellularFirewallRules_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/cellularFirewallRules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceFirewallFirewalledService_0 operation.
     * @callback module:api/ConfigureApi~getNetworkApplianceFirewallFirewalledService_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the accessibility settings of the given service ('ICMP', 'web', or 'SNMP')
     * Return the accessibility settings of the given service ('ICMP', 'web', or 'SNMP')
     * @param {String} networkId 
     * @param {String} service 
     * @param {module:api/ConfigureApi~getNetworkApplianceFirewallFirewalledService_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkApplianceFirewallFirewalledService_0(networkId, service, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceFirewallFirewalledService_0");
      }
      // verify the required parameter 'service' is set
      if (service === undefined || service === null) {
        throw new Error("Missing the required parameter 'service' when calling getNetworkApplianceFirewallFirewalledService_0");
      }

      let pathParams = {
        'networkId': networkId,
        'service': service
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/firewalledServices/{service}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceFirewallFirewalledServices_0 operation.
     * @callback module:api/ConfigureApi~getNetworkApplianceFirewallFirewalledServices_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the appliance services and their accessibility rules
     * List the appliance services and their accessibility rules
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkApplianceFirewallFirewalledServices_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkApplianceFirewallFirewalledServices_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceFirewallFirewalledServices_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/firewalledServices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceFirewallInboundCellularFirewallRules_0 operation.
     * @callback module:api/ConfigureApi~getNetworkApplianceFirewallInboundCellularFirewallRules_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the inbound cellular firewall rules for an MX network
     * Return the inbound cellular firewall rules for an MX network
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkApplianceFirewallInboundCellularFirewallRules_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkApplianceFirewallInboundCellularFirewallRules_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceFirewallInboundCellularFirewallRules_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/inboundCellularFirewallRules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceFirewallInboundFirewallRules_0 operation.
     * @callback module:api/ConfigureApi~getNetworkApplianceFirewallInboundFirewallRules_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the inbound firewall rules for an MX network
     * Return the inbound firewall rules for an MX network
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkApplianceFirewallInboundFirewallRules_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkApplianceFirewallInboundFirewallRules_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceFirewallInboundFirewallRules_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/inboundFirewallRules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceFirewallL3FirewallRules_0 operation.
     * @callback module:api/ConfigureApi~getNetworkApplianceFirewallL3FirewallRules_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the L3 firewall rules for an MX network
     * Return the L3 firewall rules for an MX network
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkApplianceFirewallL3FirewallRules_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkApplianceFirewallL3FirewallRules_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceFirewallL3FirewallRules_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/l3FirewallRules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceFirewallL7FirewallRulesApplicationCategories_0 operation.
     * @callback module:api/ConfigureApi~getNetworkApplianceFirewallL7FirewallRulesApplicationCategories_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the L7 firewall application categories and their associated applications for an MX network
     * Return the L7 firewall application categories and their associated applications for an MX network
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkApplianceFirewallL7FirewallRulesApplicationCategories_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkApplianceFirewallL7FirewallRulesApplicationCategories_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceFirewallL7FirewallRulesApplicationCategories_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/l7FirewallRules/applicationCategories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceFirewallL7FirewallRules_0 operation.
     * @callback module:api/ConfigureApi~getNetworkApplianceFirewallL7FirewallRules_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the MX L7 firewall rules for an MX network
     * List the MX L7 firewall rules for an MX network
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkApplianceFirewallL7FirewallRules_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkApplianceFirewallL7FirewallRules_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceFirewallL7FirewallRules_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/l7FirewallRules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceFirewallOneToManyNatRules_0 operation.
     * @callback module:api/ConfigureApi~getNetworkApplianceFirewallOneToManyNatRules_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the 1:Many NAT mapping rules for an MX network
     * Return the 1:Many NAT mapping rules for an MX network
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkApplianceFirewallOneToManyNatRules_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkApplianceFirewallOneToManyNatRules_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceFirewallOneToManyNatRules_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/oneToManyNatRules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceFirewallOneToOneNatRules_0 operation.
     * @callback module:api/ConfigureApi~getNetworkApplianceFirewallOneToOneNatRules_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the 1:1 NAT mapping rules for an MX network
     * Return the 1:1 NAT mapping rules for an MX network
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkApplianceFirewallOneToOneNatRules_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkApplianceFirewallOneToOneNatRules_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceFirewallOneToOneNatRules_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/oneToOneNatRules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceFirewallPortForwardingRules_0 operation.
     * @callback module:api/ConfigureApi~getNetworkApplianceFirewallPortForwardingRules_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the port forwarding rules for an MX network
     * Return the port forwarding rules for an MX network
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkApplianceFirewallPortForwardingRules_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkApplianceFirewallPortForwardingRules_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceFirewallPortForwardingRules_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/portForwardingRules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceFirewallSettings_0 operation.
     * @callback module:api/ConfigureApi~getNetworkApplianceFirewallSettings_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the firewall settings for this network
     * Return the firewall settings for this network
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkApplianceFirewallSettings_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkApplianceFirewallSettings_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceFirewallSettings_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkAppliancePort_0 operation.
     * @callback module:api/ConfigureApi~getNetworkAppliancePort_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkAppliancePorts200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return per-port VLAN settings for a single MX port.
     * Return per-port VLAN settings for a single MX port.
     * @param {String} networkId 
     * @param {String} portId 
     * @param {module:api/ConfigureApi~getNetworkAppliancePort_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkAppliancePorts200ResponseInner}
     */
    getNetworkAppliancePort_0(networkId, portId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkAppliancePort_0");
      }
      // verify the required parameter 'portId' is set
      if (portId === undefined || portId === null) {
        throw new Error("Missing the required parameter 'portId' when calling getNetworkAppliancePort_0");
      }

      let pathParams = {
        'networkId': networkId,
        'portId': portId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkAppliancePorts200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/ports/{portId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkAppliancePorts_0 operation.
     * @callback module:api/ConfigureApi~getNetworkAppliancePorts_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkAppliancePorts200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List per-port VLAN settings for all ports of a MX.
     * List per-port VLAN settings for all ports of a MX.
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkAppliancePorts_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkAppliancePorts200ResponseInner>}
     */
    getNetworkAppliancePorts_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkAppliancePorts_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkAppliancePorts200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/ports', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkAppliancePrefixesDelegatedStatic_0 operation.
     * @callback module:api/ConfigureApi~getNetworkAppliancePrefixesDelegatedStatic_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkAppliancePrefixesDelegatedStatics200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a static delegated prefix from a network
     * Return a static delegated prefix from a network
     * @param {String} networkId 
     * @param {String} staticDelegatedPrefixId 
     * @param {module:api/ConfigureApi~getNetworkAppliancePrefixesDelegatedStatic_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkAppliancePrefixesDelegatedStatics200ResponseInner}
     */
    getNetworkAppliancePrefixesDelegatedStatic_0(networkId, staticDelegatedPrefixId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkAppliancePrefixesDelegatedStatic_0");
      }
      // verify the required parameter 'staticDelegatedPrefixId' is set
      if (staticDelegatedPrefixId === undefined || staticDelegatedPrefixId === null) {
        throw new Error("Missing the required parameter 'staticDelegatedPrefixId' when calling getNetworkAppliancePrefixesDelegatedStatic_0");
      }

      let pathParams = {
        'networkId': networkId,
        'staticDelegatedPrefixId': staticDelegatedPrefixId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkAppliancePrefixesDelegatedStatics200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/prefixes/delegated/statics/{staticDelegatedPrefixId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkAppliancePrefixesDelegatedStatics_0 operation.
     * @callback module:api/ConfigureApi~getNetworkAppliancePrefixesDelegatedStatics_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkAppliancePrefixesDelegatedStatics200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List static delegated prefixes for a network
     * List static delegated prefixes for a network
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkAppliancePrefixesDelegatedStatics_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkAppliancePrefixesDelegatedStatics200ResponseInner>}
     */
    getNetworkAppliancePrefixesDelegatedStatics_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkAppliancePrefixesDelegatedStatics_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkAppliancePrefixesDelegatedStatics200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/prefixes/delegated/statics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceSecurityIntrusion_0 operation.
     * @callback module:api/ConfigureApi~getNetworkApplianceSecurityIntrusion_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all supported intrusion settings for an MX network
     * Returns all supported intrusion settings for an MX network
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkApplianceSecurityIntrusion_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkApplianceSecurityIntrusion_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceSecurityIntrusion_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/security/intrusion', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceSecurityMalware_0 operation.
     * @callback module:api/ConfigureApi~getNetworkApplianceSecurityMalware_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all supported malware settings for an MX network
     * Returns all supported malware settings for an MX network
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkApplianceSecurityMalware_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkApplianceSecurityMalware_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceSecurityMalware_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/security/malware', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceSettings_0 operation.
     * @callback module:api/ConfigureApi~getNetworkApplianceSettings_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkApplianceSettings200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the appliance settings for a network
     * Return the appliance settings for a network
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkApplianceSettings_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkApplianceSettings200Response}
     */
    getNetworkApplianceSettings_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceSettings_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkApplianceSettings200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceSingleLan_0 operation.
     * @callback module:api/ConfigureApi~getNetworkApplianceSingleLan_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkApplianceSingleLan200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return single LAN configuration
     * Return single LAN configuration
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkApplianceSingleLan_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkApplianceSingleLan200Response}
     */
    getNetworkApplianceSingleLan_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceSingleLan_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkApplianceSingleLan200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/singleLan', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceSsid_0 operation.
     * @callback module:api/ConfigureApi~getNetworkApplianceSsid_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkApplianceSsids200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a single MX SSID
     * Return a single MX SSID
     * @param {String} networkId 
     * @param {String} number 
     * @param {module:api/ConfigureApi~getNetworkApplianceSsid_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkApplianceSsids200ResponseInner}
     */
    getNetworkApplianceSsid_0(networkId, number, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceSsid_0");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling getNetworkApplianceSsid_0");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkApplianceSsids200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/ssids/{number}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceSsids_0 operation.
     * @callback module:api/ConfigureApi~getNetworkApplianceSsids_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkApplianceSsids200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the MX SSIDs in a network
     * List the MX SSIDs in a network
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkApplianceSsids_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkApplianceSsids200ResponseInner>}
     */
    getNetworkApplianceSsids_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceSsids_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkApplianceSsids200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/ssids', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceStaticRoute_0 operation.
     * @callback module:api/ConfigureApi~getNetworkApplianceStaticRoute_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a static route for an MX or teleworker network
     * Return a static route for an MX or teleworker network
     * @param {String} networkId 
     * @param {String} staticRouteId 
     * @param {module:api/ConfigureApi~getNetworkApplianceStaticRoute_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkApplianceStaticRoute_0(networkId, staticRouteId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceStaticRoute_0");
      }
      // verify the required parameter 'staticRouteId' is set
      if (staticRouteId === undefined || staticRouteId === null) {
        throw new Error("Missing the required parameter 'staticRouteId' when calling getNetworkApplianceStaticRoute_0");
      }

      let pathParams = {
        'networkId': networkId,
        'staticRouteId': staticRouteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/staticRoutes/{staticRouteId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceStaticRoutes_0 operation.
     * @callback module:api/ConfigureApi~getNetworkApplianceStaticRoutes_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the static routes for an MX or teleworker network
     * List the static routes for an MX or teleworker network
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkApplianceStaticRoutes_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkApplianceStaticRoutes_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceStaticRoutes_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/staticRoutes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceTrafficShapingCustomPerformanceClass_0 operation.
     * @callback module:api/ConfigureApi~getNetworkApplianceTrafficShapingCustomPerformanceClass_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a custom performance class for an MX network
     * Return a custom performance class for an MX network
     * @param {String} networkId 
     * @param {String} customPerformanceClassId 
     * @param {module:api/ConfigureApi~getNetworkApplianceTrafficShapingCustomPerformanceClass_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkApplianceTrafficShapingCustomPerformanceClass_0(networkId, customPerformanceClassId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceTrafficShapingCustomPerformanceClass_0");
      }
      // verify the required parameter 'customPerformanceClassId' is set
      if (customPerformanceClassId === undefined || customPerformanceClassId === null) {
        throw new Error("Missing the required parameter 'customPerformanceClassId' when calling getNetworkApplianceTrafficShapingCustomPerformanceClass_0");
      }

      let pathParams = {
        'networkId': networkId,
        'customPerformanceClassId': customPerformanceClassId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/trafficShaping/customPerformanceClasses/{customPerformanceClassId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceTrafficShapingCustomPerformanceClasses_0 operation.
     * @callback module:api/ConfigureApi~getNetworkApplianceTrafficShapingCustomPerformanceClasses_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all custom performance classes for an MX network
     * List all custom performance classes for an MX network
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkApplianceTrafficShapingCustomPerformanceClasses_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkApplianceTrafficShapingCustomPerformanceClasses_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceTrafficShapingCustomPerformanceClasses_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/trafficShaping/customPerformanceClasses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceTrafficShapingRules_0 operation.
     * @callback module:api/ConfigureApi~getNetworkApplianceTrafficShapingRules_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Display the traffic shaping settings rules for an MX network
     * Display the traffic shaping settings rules for an MX network
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkApplianceTrafficShapingRules_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkApplianceTrafficShapingRules_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceTrafficShapingRules_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/trafficShaping/rules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceTrafficShapingUplinkBandwidth_0 operation.
     * @callback module:api/ConfigureApi~getNetworkApplianceTrafficShapingUplinkBandwidth_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkApplianceTrafficShapingUplinkBandwidth200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the uplink bandwidth limits for your MX network
     * Returns the uplink bandwidth limits for your MX network. This may not reflect the affected device's hardware capabilities.  For more information on your device's hardware capabilities, please consult our MX Family Datasheet - [https://meraki.cisco.com/product-collateral/mx-family-datasheet/?file]
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkApplianceTrafficShapingUplinkBandwidth_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkApplianceTrafficShapingUplinkBandwidth200Response}
     */
    getNetworkApplianceTrafficShapingUplinkBandwidth_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceTrafficShapingUplinkBandwidth_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkApplianceTrafficShapingUplinkBandwidth200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/trafficShaping/uplinkBandwidth', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceTrafficShapingUplinkSelection_0 operation.
     * @callback module:api/ConfigureApi~getNetworkApplianceTrafficShapingUplinkSelection_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkApplianceTrafficShapingUplinkSelection200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show uplink selection settings for an MX network
     * Show uplink selection settings for an MX network
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkApplianceTrafficShapingUplinkSelection_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkApplianceTrafficShapingUplinkSelection200Response}
     */
    getNetworkApplianceTrafficShapingUplinkSelection_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceTrafficShapingUplinkSelection_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkApplianceTrafficShapingUplinkSelection200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/trafficShaping/uplinkSelection', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceTrafficShaping_0 operation.
     * @callback module:api/ConfigureApi~getNetworkApplianceTrafficShaping_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Display the traffic shaping settings for an MX network
     * Display the traffic shaping settings for an MX network
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkApplianceTrafficShaping_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkApplianceTrafficShaping_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceTrafficShaping_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/trafficShaping', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceVlan_0 operation.
     * @callback module:api/ConfigureApi~getNetworkApplianceVlan_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkApplianceVlans200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a VLAN
     * Return a VLAN
     * @param {String} networkId 
     * @param {String} vlanId 
     * @param {module:api/ConfigureApi~getNetworkApplianceVlan_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkApplianceVlans200ResponseInner}
     */
    getNetworkApplianceVlan_0(networkId, vlanId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceVlan_0");
      }
      // verify the required parameter 'vlanId' is set
      if (vlanId === undefined || vlanId === null) {
        throw new Error("Missing the required parameter 'vlanId' when calling getNetworkApplianceVlan_0");
      }

      let pathParams = {
        'networkId': networkId,
        'vlanId': vlanId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkApplianceVlans200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/vlans/{vlanId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceVlansSettings_0 operation.
     * @callback module:api/ConfigureApi~getNetworkApplianceVlansSettings_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the enabled status of VLANs for the network
     * Returns the enabled status of VLANs for the network
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkApplianceVlansSettings_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkApplianceVlansSettings_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceVlansSettings_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/vlans/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceVlans_0 operation.
     * @callback module:api/ConfigureApi~getNetworkApplianceVlans_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkApplianceVlans200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the VLANs for an MX network
     * List the VLANs for an MX network
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkApplianceVlans_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkApplianceVlans200ResponseInner>}
     */
    getNetworkApplianceVlans_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceVlans_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkApplianceVlans200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/vlans', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceVpnBgp_0 operation.
     * @callback module:api/ConfigureApi~getNetworkApplianceVpnBgp_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a Hub BGP Configuration
     * Return a Hub BGP Configuration
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkApplianceVpnBgp_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkApplianceVpnBgp_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceVpnBgp_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/vpn/bgp', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceVpnSiteToSiteVpn_0 operation.
     * @callback module:api/ConfigureApi~getNetworkApplianceVpnSiteToSiteVpn_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkApplianceVpnSiteToSiteVpn200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the site-to-site VPN settings of a network
     * Return the site-to-site VPN settings of a network. Only valid for MX networks.
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkApplianceVpnSiteToSiteVpn_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkApplianceVpnSiteToSiteVpn200Response}
     */
    getNetworkApplianceVpnSiteToSiteVpn_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceVpnSiteToSiteVpn_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkApplianceVpnSiteToSiteVpn200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/vpn/siteToSiteVpn', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceWarmSpare_0 operation.
     * @callback module:api/ConfigureApi~getNetworkApplianceWarmSpare_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return MX warm spare settings
     * Return MX warm spare settings
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkApplianceWarmSpare_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkApplianceWarmSpare_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceWarmSpare_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/warmSpare', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkCameraQualityRetentionProfile_0 operation.
     * @callback module:api/ConfigureApi~getNetworkCameraQualityRetentionProfile_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a single quality retention profile
     * Retrieve a single quality retention profile
     * @param {String} networkId 
     * @param {String} qualityRetentionProfileId 
     * @param {module:api/ConfigureApi~getNetworkCameraQualityRetentionProfile_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkCameraQualityRetentionProfile_0(networkId, qualityRetentionProfileId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkCameraQualityRetentionProfile_0");
      }
      // verify the required parameter 'qualityRetentionProfileId' is set
      if (qualityRetentionProfileId === undefined || qualityRetentionProfileId === null) {
        throw new Error("Missing the required parameter 'qualityRetentionProfileId' when calling getNetworkCameraQualityRetentionProfile_0");
      }

      let pathParams = {
        'networkId': networkId,
        'qualityRetentionProfileId': qualityRetentionProfileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/camera/qualityRetentionProfiles/{qualityRetentionProfileId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkCameraQualityRetentionProfiles_0 operation.
     * @callback module:api/ConfigureApi~getNetworkCameraQualityRetentionProfiles_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the quality retention profiles for this network
     * List the quality retention profiles for this network
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkCameraQualityRetentionProfiles_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkCameraQualityRetentionProfiles_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkCameraQualityRetentionProfiles_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/camera/qualityRetentionProfiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkCameraSchedules_0 operation.
     * @callback module:api/ConfigureApi~getNetworkCameraSchedules_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of all camera recording schedules.
     * Returns a list of all camera recording schedules.
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkCameraSchedules_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkCameraSchedules_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkCameraSchedules_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/camera/schedules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkCameraWirelessProfile_0 operation.
     * @callback module:api/ConfigureApi~getNetworkCameraWirelessProfile_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a single camera wireless profile.
     * Retrieve a single camera wireless profile.
     * @param {String} networkId 
     * @param {String} wirelessProfileId 
     * @param {module:api/ConfigureApi~getNetworkCameraWirelessProfile_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkCameraWirelessProfile_0(networkId, wirelessProfileId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkCameraWirelessProfile_0");
      }
      // verify the required parameter 'wirelessProfileId' is set
      if (wirelessProfileId === undefined || wirelessProfileId === null) {
        throw new Error("Missing the required parameter 'wirelessProfileId' when calling getNetworkCameraWirelessProfile_0");
      }

      let pathParams = {
        'networkId': networkId,
        'wirelessProfileId': wirelessProfileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/camera/wirelessProfiles/{wirelessProfileId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkCameraWirelessProfiles_0 operation.
     * @callback module:api/ConfigureApi~getNetworkCameraWirelessProfiles_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the camera wireless profiles for this network.
     * List the camera wireless profiles for this network.
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkCameraWirelessProfiles_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkCameraWirelessProfiles_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkCameraWirelessProfiles_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/camera/wirelessProfiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkCellularGatewayConnectivityMonitoringDestinations_0 operation.
     * @callback module:api/ConfigureApi~getNetworkCellularGatewayConnectivityMonitoringDestinations_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the connectivity testing destinations for an MG network
     * Return the connectivity testing destinations for an MG network
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkCellularGatewayConnectivityMonitoringDestinations_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkCellularGatewayConnectivityMonitoringDestinations_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkCellularGatewayConnectivityMonitoringDestinations_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/cellularGateway/connectivityMonitoringDestinations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkCellularGatewayDhcp_0 operation.
     * @callback module:api/ConfigureApi~getNetworkCellularGatewayDhcp_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkCellularGatewayDhcp200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List common DHCP settings of MGs
     * List common DHCP settings of MGs
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkCellularGatewayDhcp_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkCellularGatewayDhcp200Response}
     */
    getNetworkCellularGatewayDhcp_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkCellularGatewayDhcp_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkCellularGatewayDhcp200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/cellularGateway/dhcp', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkCellularGatewaySubnetPool_0 operation.
     * @callback module:api/ConfigureApi~getNetworkCellularGatewaySubnetPool_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the subnet pool and mask configured for MGs in the network.
     * Return the subnet pool and mask configured for MGs in the network.
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkCellularGatewaySubnetPool_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkCellularGatewaySubnetPool_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkCellularGatewaySubnetPool_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/cellularGateway/subnetPool', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkCellularGatewayUplink_0 operation.
     * @callback module:api/ConfigureApi~getNetworkCellularGatewayUplink_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the uplink settings for your MG network.
     * Returns the uplink settings for your MG network.
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkCellularGatewayUplink_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkCellularGatewayUplink_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkCellularGatewayUplink_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/cellularGateway/uplink', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkClientPolicy_0 operation.
     * @callback module:api/ConfigureApi~getNetworkClientPolicy_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the policy assigned to a client on the network
     * Return the policy assigned to a client on the network. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param {String} networkId 
     * @param {String} clientId 
     * @param {module:api/ConfigureApi~getNetworkClientPolicy_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkClientPolicy_0(networkId, clientId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkClientPolicy_0");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getNetworkClientPolicy_0");
      }

      let pathParams = {
        'networkId': networkId,
        'clientId': clientId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/clients/{clientId}/policy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkClientSplashAuthorizationStatus_0 operation.
     * @callback module:api/ConfigureApi~getNetworkClientSplashAuthorizationStatus_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the splash authorization for a client, for each SSID they've associated with through splash
     * Return the splash authorization for a client, for each SSID they've associated with through splash. Only enabled SSIDs with Click-through splash enabled will be included. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param {String} networkId 
     * @param {String} clientId 
     * @param {module:api/ConfigureApi~getNetworkClientSplashAuthorizationStatus_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkClientSplashAuthorizationStatus_0(networkId, clientId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkClientSplashAuthorizationStatus_0");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getNetworkClientSplashAuthorizationStatus_0");
      }

      let pathParams = {
        'networkId': networkId,
        'clientId': clientId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/clients/{clientId}/splashAuthorizationStatus', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkDevices_0 operation.
     * @callback module:api/ConfigureApi~getNetworkDevices_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the devices in a network
     * List the devices in a network
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkDevices_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkDevices_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkDevices_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/devices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkFirmwareUpgradesStagedEvents_0 operation.
     * @callback module:api/ConfigureApi~getNetworkFirmwareUpgradesStagedEvents_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkFirmwareUpgradesStagedEvents200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the Staged Upgrade Event from a network
     * Get the Staged Upgrade Event from a network
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkFirmwareUpgradesStagedEvents_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkFirmwareUpgradesStagedEvents200Response}
     */
    getNetworkFirmwareUpgradesStagedEvents_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkFirmwareUpgradesStagedEvents_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkFirmwareUpgradesStagedEvents200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/firmwareUpgrades/staged/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkFirmwareUpgradesStagedGroup_0 operation.
     * @callback module:api/ConfigureApi~getNetworkFirmwareUpgradesStagedGroup_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkFirmwareUpgradesStagedGroups200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Staged Upgrade Group from a network
     * Get a Staged Upgrade Group from a network
     * @param {String} networkId 
     * @param {String} groupId 
     * @param {module:api/ConfigureApi~getNetworkFirmwareUpgradesStagedGroup_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkFirmwareUpgradesStagedGroups200ResponseInner}
     */
    getNetworkFirmwareUpgradesStagedGroup_0(networkId, groupId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkFirmwareUpgradesStagedGroup_0");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling getNetworkFirmwareUpgradesStagedGroup_0");
      }

      let pathParams = {
        'networkId': networkId,
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkFirmwareUpgradesStagedGroups200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/firmwareUpgrades/staged/groups/{groupId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkFirmwareUpgradesStagedGroups_0 operation.
     * @callback module:api/ConfigureApi~getNetworkFirmwareUpgradesStagedGroups_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkFirmwareUpgradesStagedGroups200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of Staged Upgrade Groups in a network
     * List of Staged Upgrade Groups in a network
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkFirmwareUpgradesStagedGroups_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkFirmwareUpgradesStagedGroups200ResponseInner>}
     */
    getNetworkFirmwareUpgradesStagedGroups_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkFirmwareUpgradesStagedGroups_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkFirmwareUpgradesStagedGroups200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/firmwareUpgrades/staged/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkFirmwareUpgradesStagedStages_0 operation.
     * @callback module:api/ConfigureApi~getNetworkFirmwareUpgradesStagedStages_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkFirmwareUpgradesStagedStages200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Order of Staged Upgrade Groups in a network
     * Order of Staged Upgrade Groups in a network
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkFirmwareUpgradesStagedStages_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkFirmwareUpgradesStagedStages200ResponseInner>}
     */
    getNetworkFirmwareUpgradesStagedStages_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkFirmwareUpgradesStagedStages_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkFirmwareUpgradesStagedStages200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/firmwareUpgrades/staged/stages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkFirmwareUpgrades_0 operation.
     * @callback module:api/ConfigureApi~getNetworkFirmwareUpgrades_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkFirmwareUpgrades200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get firmware upgrade information for a network
     * Get firmware upgrade information for a network
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkFirmwareUpgrades_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkFirmwareUpgrades200Response}
     */
    getNetworkFirmwareUpgrades_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkFirmwareUpgrades_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkFirmwareUpgrades200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/firmwareUpgrades', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkFloorPlan_0 operation.
     * @callback module:api/ConfigureApi~getNetworkFloorPlan_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find a floor plan by ID
     * Find a floor plan by ID
     * @param {String} networkId 
     * @param {String} floorPlanId 
     * @param {module:api/ConfigureApi~getNetworkFloorPlan_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkFloorPlan_0(networkId, floorPlanId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkFloorPlan_0");
      }
      // verify the required parameter 'floorPlanId' is set
      if (floorPlanId === undefined || floorPlanId === null) {
        throw new Error("Missing the required parameter 'floorPlanId' when calling getNetworkFloorPlan_0");
      }

      let pathParams = {
        'networkId': networkId,
        'floorPlanId': floorPlanId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/floorPlans/{floorPlanId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkFloorPlans_0 operation.
     * @callback module:api/ConfigureApi~getNetworkFloorPlans_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the floor plans that belong to your network
     * List the floor plans that belong to your network
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkFloorPlans_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkFloorPlans_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkFloorPlans_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/floorPlans', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkGroupPolicies_0 operation.
     * @callback module:api/ConfigureApi~getNetworkGroupPolicies_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the group policies in a network
     * List the group policies in a network
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkGroupPolicies_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkGroupPolicies_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkGroupPolicies_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/groupPolicies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkGroupPolicy_0 operation.
     * @callback module:api/ConfigureApi~getNetworkGroupPolicy_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Display a group policy
     * Display a group policy
     * @param {String} networkId 
     * @param {String} groupPolicyId 
     * @param {module:api/ConfigureApi~getNetworkGroupPolicy_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkGroupPolicy_0(networkId, groupPolicyId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkGroupPolicy_0");
      }
      // verify the required parameter 'groupPolicyId' is set
      if (groupPolicyId === undefined || groupPolicyId === null) {
        throw new Error("Missing the required parameter 'groupPolicyId' when calling getNetworkGroupPolicy_0");
      }

      let pathParams = {
        'networkId': networkId,
        'groupPolicyId': groupPolicyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/groupPolicies/{groupPolicyId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkHealthAlerts_0 operation.
     * @callback module:api/ConfigureApi~getNetworkHealthAlerts_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkHealthAlerts200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return all global alerts on this network
     * Return all global alerts on this network
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkHealthAlerts_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkHealthAlerts200ResponseInner>}
     */
    getNetworkHealthAlerts_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkHealthAlerts_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkHealthAlerts200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/health/alerts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkMerakiAuthUser_0 operation.
     * @callback module:api/ConfigureApi~getNetworkMerakiAuthUser_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkMerakiAuthUsers200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the Meraki Auth splash guest, RADIUS, or client VPN user
     * Return the Meraki Auth splash guest, RADIUS, or client VPN user
     * @param {String} networkId 
     * @param {String} merakiAuthUserId 
     * @param {module:api/ConfigureApi~getNetworkMerakiAuthUser_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkMerakiAuthUsers200ResponseInner}
     */
    getNetworkMerakiAuthUser_0(networkId, merakiAuthUserId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkMerakiAuthUser_0");
      }
      // verify the required parameter 'merakiAuthUserId' is set
      if (merakiAuthUserId === undefined || merakiAuthUserId === null) {
        throw new Error("Missing the required parameter 'merakiAuthUserId' when calling getNetworkMerakiAuthUser_0");
      }

      let pathParams = {
        'networkId': networkId,
        'merakiAuthUserId': merakiAuthUserId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkMerakiAuthUsers200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/merakiAuthUsers/{merakiAuthUserId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkMerakiAuthUsers_0 operation.
     * @callback module:api/ConfigureApi~getNetworkMerakiAuthUsers_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkMerakiAuthUsers200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the users configured under Meraki Authentication for a network (splash guest or RADIUS users for a wireless network, or client VPN users for a wired network)
     * List the users configured under Meraki Authentication for a network (splash guest or RADIUS users for a wireless network, or client VPN users for a wired network)
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkMerakiAuthUsers_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkMerakiAuthUsers200ResponseInner>}
     */
    getNetworkMerakiAuthUsers_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkMerakiAuthUsers_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkMerakiAuthUsers200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/merakiAuthUsers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkMqttBroker_0 operation.
     * @callback module:api/ConfigureApi~getNetworkMqttBroker_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return an MQTT broker
     * Return an MQTT broker
     * @param {String} networkId 
     * @param {String} mqttBrokerId 
     * @param {module:api/ConfigureApi~getNetworkMqttBroker_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkMqttBroker_0(networkId, mqttBrokerId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkMqttBroker_0");
      }
      // verify the required parameter 'mqttBrokerId' is set
      if (mqttBrokerId === undefined || mqttBrokerId === null) {
        throw new Error("Missing the required parameter 'mqttBrokerId' when calling getNetworkMqttBroker_0");
      }

      let pathParams = {
        'networkId': networkId,
        'mqttBrokerId': mqttBrokerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/mqttBrokers/{mqttBrokerId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkMqttBrokers_0 operation.
     * @callback module:api/ConfigureApi~getNetworkMqttBrokers_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the MQTT brokers for this network
     * List the MQTT brokers for this network
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkMqttBrokers_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkMqttBrokers_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkMqttBrokers_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/mqttBrokers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkNetflow_0 operation.
     * @callback module:api/ConfigureApi~getNetworkNetflow_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the NetFlow traffic reporting settings for a network
     * Return the NetFlow traffic reporting settings for a network
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkNetflow_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkNetflow_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkNetflow_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/netflow', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkPiiPiiKeys_0 operation.
     * @callback module:api/ConfigureApi~getNetworkPiiPiiKeys_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the keys required to access Personally Identifiable Information (PII) for a given identifier
     * List the keys required to access Personally Identifiable Information (PII) for a given identifier. Exactly one identifier will be accepted. If the organization contains org-wide Systems Manager users matching the key provided then there will be an entry with the key \"0\" containing the applicable keys.  ## ALTERNATE PATH  ``` /organizations/{organizationId}/pii/piiKeys ```
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {String} [username] The username of a Systems Manager user
     * @param {String} [email] The email of a network user account or a Systems Manager device
     * @param {String} [mac] The MAC of a network client device or a Systems Manager device
     * @param {String} [serial] The serial of a Systems Manager device
     * @param {String} [imei] The IMEI of a Systems Manager device
     * @param {String} [bluetoothMac] The MAC of a Bluetooth client
     * @param {module:api/ConfigureApi~getNetworkPiiPiiKeys_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkPiiPiiKeys_0(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkPiiPiiKeys_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        'username': opts['username'],
        'email': opts['email'],
        'mac': opts['mac'],
        'serial': opts['serial'],
        'imei': opts['imei'],
        'bluetoothMac': opts['bluetoothMac']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/pii/piiKeys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkPiiRequest_0 operation.
     * @callback module:api/ConfigureApi~getNetworkPiiRequest_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a PII request
     * Return a PII request  ## ALTERNATE PATH  ``` /organizations/{organizationId}/pii/requests/{requestId} ```
     * @param {String} networkId 
     * @param {String} requestId 
     * @param {module:api/ConfigureApi~getNetworkPiiRequest_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkPiiRequest_0(networkId, requestId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkPiiRequest_0");
      }
      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling getNetworkPiiRequest_0");
      }

      let pathParams = {
        'networkId': networkId,
        'requestId': requestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/pii/requests/{requestId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkPiiRequests_0 operation.
     * @callback module:api/ConfigureApi~getNetworkPiiRequests_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the PII requests for this network or organization
     * List the PII requests for this network or organization  ## ALTERNATE PATH  ``` /organizations/{organizationId}/pii/requests ```
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkPiiRequests_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkPiiRequests_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkPiiRequests_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/pii/requests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkPiiSmDevicesForKey_0 operation.
     * @callback module:api/ConfigureApi~getNetworkPiiSmDevicesForKey_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Given a piece of Personally Identifiable Information (PII), return the Systems Manager device ID(s) associated with that identifier
     * Given a piece of Personally Identifiable Information (PII), return the Systems Manager device ID(s) associated with that identifier. These device IDs can be used with the Systems Manager API endpoints to retrieve device details. Exactly one identifier will be accepted.  ## ALTERNATE PATH  ``` /organizations/{organizationId}/pii/smDevicesForKey ```
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {String} [username] The username of a Systems Manager user
     * @param {String} [email] The email of a network user account or a Systems Manager device
     * @param {String} [mac] The MAC of a network client device or a Systems Manager device
     * @param {String} [serial] The serial of a Systems Manager device
     * @param {String} [imei] The IMEI of a Systems Manager device
     * @param {String} [bluetoothMac] The MAC of a Bluetooth client
     * @param {module:api/ConfigureApi~getNetworkPiiSmDevicesForKey_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkPiiSmDevicesForKey_0(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkPiiSmDevicesForKey_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        'username': opts['username'],
        'email': opts['email'],
        'mac': opts['mac'],
        'serial': opts['serial'],
        'imei': opts['imei'],
        'bluetoothMac': opts['bluetoothMac']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/pii/smDevicesForKey', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkPiiSmOwnersForKey_0 operation.
     * @callback module:api/ConfigureApi~getNetworkPiiSmOwnersForKey_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Given a piece of Personally Identifiable Information (PII), return the Systems Manager owner ID(s) associated with that identifier
     * Given a piece of Personally Identifiable Information (PII), return the Systems Manager owner ID(s) associated with that identifier. These owner IDs can be used with the Systems Manager API endpoints to retrieve owner details. Exactly one identifier will be accepted.  ## ALTERNATE PATH  ``` /organizations/{organizationId}/pii/smOwnersForKey ```
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {String} [username] The username of a Systems Manager user
     * @param {String} [email] The email of a network user account or a Systems Manager device
     * @param {String} [mac] The MAC of a network client device or a Systems Manager device
     * @param {String} [serial] The serial of a Systems Manager device
     * @param {String} [imei] The IMEI of a Systems Manager device
     * @param {String} [bluetoothMac] The MAC of a Bluetooth client
     * @param {module:api/ConfigureApi~getNetworkPiiSmOwnersForKey_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkPiiSmOwnersForKey_0(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkPiiSmOwnersForKey_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        'username': opts['username'],
        'email': opts['email'],
        'mac': opts['mac'],
        'serial': opts['serial'],
        'imei': opts['imei'],
        'bluetoothMac': opts['bluetoothMac']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/pii/smOwnersForKey', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkPoliciesByClient_0 operation.
     * @callback module:api/ConfigureApi~getNetworkPoliciesByClient_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkPoliciesByClient200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get policies for all clients with policies
     * Get policies for all clients with policies
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 50.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
     * @param {module:api/ConfigureApi~getNetworkPoliciesByClient_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkPoliciesByClient200ResponseInner>}
     */
    getNetworkPoliciesByClient_0(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkPoliciesByClient_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        't0': opts['t0'],
        'timespan': opts['timespan']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkPoliciesByClient200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/policies/byClient', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSensorAlertsProfile_0 operation.
     * @callback module:api/ConfigureApi~getNetworkSensorAlertsProfile_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkSensorAlertsProfiles200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show details of a sensor alert profile for a network.
     * Show details of a sensor alert profile for a network.
     * @param {String} networkId 
     * @param {String} id 
     * @param {module:api/ConfigureApi~getNetworkSensorAlertsProfile_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkSensorAlertsProfiles200ResponseInner}
     */
    getNetworkSensorAlertsProfile_0(networkId, id, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSensorAlertsProfile_0");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNetworkSensorAlertsProfile_0");
      }

      let pathParams = {
        'networkId': networkId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkSensorAlertsProfiles200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/sensor/alerts/profiles/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSensorAlertsProfiles_0 operation.
     * @callback module:api/ConfigureApi~getNetworkSensorAlertsProfiles_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSensorAlertsProfiles200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all sensor alert profiles for a network.
     * Lists all sensor alert profiles for a network.
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkSensorAlertsProfiles_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSensorAlertsProfiles200ResponseInner>}
     */
    getNetworkSensorAlertsProfiles_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSensorAlertsProfiles_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSensorAlertsProfiles200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/sensor/alerts/profiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSensorRelationships_0 operation.
     * @callback module:api/ConfigureApi~getNetworkSensorRelationships_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSensorRelationships200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the sensor roles for devices in a given network
     * List the sensor roles for devices in a given network
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkSensorRelationships_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSensorRelationships200ResponseInner>}
     */
    getNetworkSensorRelationships_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSensorRelationships_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSensorRelationships200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/sensor/relationships', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSettings_0 operation.
     * @callback module:api/ConfigureApi~getNetworkSettings_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkSettings200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the settings for a network
     * Return the settings for a network
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkSettings_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkSettings200Response}
     */
    getNetworkSettings_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSettings_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkSettings200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSmBypassActivationLockAttempt_0 operation.
     * @callback module:api/ConfigureApi~getNetworkSmBypassActivationLockAttempt_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bypass activation lock attempt status
     * Bypass activation lock attempt status
     * @param {String} networkId 
     * @param {String} attemptId 
     * @param {module:api/ConfigureApi~getNetworkSmBypassActivationLockAttempt_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkSmBypassActivationLockAttempt_0(networkId, attemptId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSmBypassActivationLockAttempt_0");
      }
      // verify the required parameter 'attemptId' is set
      if (attemptId === undefined || attemptId === null) {
        throw new Error("Missing the required parameter 'attemptId' when calling getNetworkSmBypassActivationLockAttempt_0");
      }

      let pathParams = {
        'networkId': networkId,
        'attemptId': attemptId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/bypassActivationLockAttempts/{attemptId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSmDeviceCerts_0 operation.
     * @callback module:api/ConfigureApi~getNetworkSmDeviceCerts_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSmDeviceCerts200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the certs on a device
     * List the certs on a device
     * @param {String} networkId 
     * @param {String} deviceId 
     * @param {module:api/ConfigureApi~getNetworkSmDeviceCerts_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSmDeviceCerts200ResponseInner>}
     */
    getNetworkSmDeviceCerts_0(networkId, deviceId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSmDeviceCerts_0");
      }
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling getNetworkSmDeviceCerts_0");
      }

      let pathParams = {
        'networkId': networkId,
        'deviceId': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSmDeviceCerts200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/devices/{deviceId}/certs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSmDeviceDeviceProfiles_0 operation.
     * @callback module:api/ConfigureApi~getNetworkSmDeviceDeviceProfiles_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSmDeviceDeviceProfiles200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the installed profiles associated with a device
     * Get the installed profiles associated with a device
     * @param {String} networkId 
     * @param {String} deviceId 
     * @param {module:api/ConfigureApi~getNetworkSmDeviceDeviceProfiles_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSmDeviceDeviceProfiles200ResponseInner>}
     */
    getNetworkSmDeviceDeviceProfiles_0(networkId, deviceId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSmDeviceDeviceProfiles_0");
      }
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling getNetworkSmDeviceDeviceProfiles_0");
      }

      let pathParams = {
        'networkId': networkId,
        'deviceId': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSmDeviceDeviceProfiles200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/devices/{deviceId}/deviceProfiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSmDeviceNetworkAdapters_0 operation.
     * @callback module:api/ConfigureApi~getNetworkSmDeviceNetworkAdapters_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSmDeviceNetworkAdapters200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the network adapters of a device
     * List the network adapters of a device
     * @param {String} networkId 
     * @param {String} deviceId 
     * @param {module:api/ConfigureApi~getNetworkSmDeviceNetworkAdapters_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSmDeviceNetworkAdapters200ResponseInner>}
     */
    getNetworkSmDeviceNetworkAdapters_0(networkId, deviceId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSmDeviceNetworkAdapters_0");
      }
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling getNetworkSmDeviceNetworkAdapters_0");
      }

      let pathParams = {
        'networkId': networkId,
        'deviceId': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSmDeviceNetworkAdapters200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/devices/{deviceId}/networkAdapters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSmDeviceRestrictions_0 operation.
     * @callback module:api/ConfigureApi~getNetworkSmDeviceRestrictions_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the restrictions on a device
     * List the restrictions on a device
     * @param {String} networkId 
     * @param {String} deviceId 
     * @param {module:api/ConfigureApi~getNetworkSmDeviceRestrictions_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkSmDeviceRestrictions_0(networkId, deviceId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSmDeviceRestrictions_0");
      }
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling getNetworkSmDeviceRestrictions_0");
      }

      let pathParams = {
        'networkId': networkId,
        'deviceId': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/devices/{deviceId}/restrictions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSmDeviceSecurityCenters_0 operation.
     * @callback module:api/ConfigureApi~getNetworkSmDeviceSecurityCenters_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSmDeviceSecurityCenters200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the security centers on a device
     * List the security centers on a device
     * @param {String} networkId 
     * @param {String} deviceId 
     * @param {module:api/ConfigureApi~getNetworkSmDeviceSecurityCenters_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSmDeviceSecurityCenters200ResponseInner>}
     */
    getNetworkSmDeviceSecurityCenters_0(networkId, deviceId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSmDeviceSecurityCenters_0");
      }
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling getNetworkSmDeviceSecurityCenters_0");
      }

      let pathParams = {
        'networkId': networkId,
        'deviceId': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSmDeviceSecurityCenters200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/devices/{deviceId}/securityCenters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSmDeviceSoftwares_0 operation.
     * @callback module:api/ConfigureApi~getNetworkSmDeviceSoftwares_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSmDeviceSoftwares200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of softwares associated with a device
     * Get a list of softwares associated with a device
     * @param {String} networkId 
     * @param {String} deviceId 
     * @param {module:api/ConfigureApi~getNetworkSmDeviceSoftwares_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSmDeviceSoftwares200ResponseInner>}
     */
    getNetworkSmDeviceSoftwares_0(networkId, deviceId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSmDeviceSoftwares_0");
      }
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling getNetworkSmDeviceSoftwares_0");
      }

      let pathParams = {
        'networkId': networkId,
        'deviceId': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSmDeviceSoftwares200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/devices/{deviceId}/softwares', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSmDeviceWlanLists_0 operation.
     * @callback module:api/ConfigureApi~getNetworkSmDeviceWlanLists_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSmDeviceWlanLists200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the saved SSID names on a device
     * List the saved SSID names on a device
     * @param {String} networkId 
     * @param {String} deviceId 
     * @param {module:api/ConfigureApi~getNetworkSmDeviceWlanLists_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSmDeviceWlanLists200ResponseInner>}
     */
    getNetworkSmDeviceWlanLists_0(networkId, deviceId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSmDeviceWlanLists_0");
      }
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling getNetworkSmDeviceWlanLists_0");
      }

      let pathParams = {
        'networkId': networkId,
        'deviceId': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSmDeviceWlanLists200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/devices/{deviceId}/wlanLists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSmDevices_0 operation.
     * @callback module:api/ConfigureApi~getNetworkSmDevices_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSmDevices200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the devices enrolled in an SM network with various specified fields and filters
     * List the devices enrolled in an SM network with various specified fields and filters
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [fields] Additional fields that will be displayed for each device.     The default fields are: id, name, tags, ssid, wifiMac, osName, systemModel, uuid, and serialNumber. The additional fields are: ip,     systemType, availableDeviceCapacity, kioskAppName, biosVersion, lastConnected, missingAppsCount, userSuppliedAddress, location, lastUser,     ownerEmail, ownerUsername, osBuild, publicIp, phoneNumber, diskInfoJson, deviceCapacity, isManaged, hadMdm, isSupervised, meid, imei, iccid,     simCarrierNetwork, cellularDataUsed, isHotspotEnabled, createdAt, batteryEstCharge, quarantined, avName, avRunning, asName, fwName,     isRooted, loginRequired, screenLockEnabled, screenLockDelay, autoLoginDisabled, autoTags, hasMdm, hasDesktopAgent, diskEncryptionEnabled,     hardwareEncryptionCaps, passCodeLock, usesHardwareKeystore, androidSecurityPatchVersion, and url.
     * @param {Array.<String>} [wifiMacs] Filter devices by wifi mac(s).
     * @param {Array.<String>} [serials] Filter devices by serial(s).
     * @param {Array.<String>} [ids] Filter devices by id(s).
     * @param {Array.<String>} [scope] Specify a scope (one of all, none, withAny, withAll, withoutAny, or withoutAll) and a set of tags.
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:api/ConfigureApi~getNetworkSmDevices_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSmDevices200ResponseInner>}
     */
    getNetworkSmDevices_0(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSmDevices_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),
        'wifiMacs': this.apiClient.buildCollectionParam(opts['wifiMacs'], 'csv'),
        'serials': this.apiClient.buildCollectionParam(opts['serials'], 'csv'),
        'ids': this.apiClient.buildCollectionParam(opts['ids'], 'csv'),
        'scope': this.apiClient.buildCollectionParam(opts['scope'], 'csv'),
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSmDevices200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/devices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSmProfiles_0 operation.
     * @callback module:api/ConfigureApi~getNetworkSmProfiles_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSmProfiles200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all profiles in a network
     * List all profiles in a network
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkSmProfiles_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSmProfiles200ResponseInner>}
     */
    getNetworkSmProfiles_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSmProfiles_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSmProfiles200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/profiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSmTargetGroup_0 operation.
     * @callback module:api/ConfigureApi~getNetworkSmTargetGroup_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a target group
     * Return a target group
     * @param {String} networkId 
     * @param {String} targetGroupId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [withDetails] Boolean indicating if the the ids of the devices or users scoped by the target group should be included in the response
     * @param {module:api/ConfigureApi~getNetworkSmTargetGroup_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkSmTargetGroup_0(networkId, targetGroupId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSmTargetGroup_0");
      }
      // verify the required parameter 'targetGroupId' is set
      if (targetGroupId === undefined || targetGroupId === null) {
        throw new Error("Missing the required parameter 'targetGroupId' when calling getNetworkSmTargetGroup_0");
      }

      let pathParams = {
        'networkId': networkId,
        'targetGroupId': targetGroupId
      };
      let queryParams = {
        'withDetails': opts['withDetails']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/targetGroups/{targetGroupId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSmTargetGroups_0 operation.
     * @callback module:api/ConfigureApi~getNetworkSmTargetGroups_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the target groups in this network
     * List the target groups in this network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [withDetails] Boolean indicating if the the ids of the devices or users scoped by the target group should be included in the response
     * @param {module:api/ConfigureApi~getNetworkSmTargetGroups_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkSmTargetGroups_0(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSmTargetGroups_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        'withDetails': opts['withDetails']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/targetGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSmTrustedAccessConfigs_0 operation.
     * @callback module:api/ConfigureApi~getNetworkSmTrustedAccessConfigs_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSmTrustedAccessConfigs200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Trusted Access Configs
     * List Trusted Access Configs
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:api/ConfigureApi~getNetworkSmTrustedAccessConfigs_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSmTrustedAccessConfigs200ResponseInner>}
     */
    getNetworkSmTrustedAccessConfigs_0(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSmTrustedAccessConfigs_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSmTrustedAccessConfigs200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/trustedAccessConfigs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSmUserAccessDevices_0 operation.
     * @callback module:api/ConfigureApi~getNetworkSmUserAccessDevices_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSmUserAccessDevices200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List User Access Devices and its Trusted Access Connections
     * List User Access Devices and its Trusted Access Connections
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:api/ConfigureApi~getNetworkSmUserAccessDevices_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSmUserAccessDevices200ResponseInner>}
     */
    getNetworkSmUserAccessDevices_0(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSmUserAccessDevices_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSmUserAccessDevices200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/userAccessDevices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSmUserDeviceProfiles_0 operation.
     * @callback module:api/ConfigureApi~getNetworkSmUserDeviceProfiles_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSmDeviceDeviceProfiles200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the profiles associated with a user
     * Get the profiles associated with a user
     * @param {String} networkId 
     * @param {String} userId 
     * @param {module:api/ConfigureApi~getNetworkSmUserDeviceProfiles_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSmDeviceDeviceProfiles200ResponseInner>}
     */
    getNetworkSmUserDeviceProfiles_0(networkId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSmUserDeviceProfiles_0");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getNetworkSmUserDeviceProfiles_0");
      }

      let pathParams = {
        'networkId': networkId,
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSmDeviceDeviceProfiles200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/users/{userId}/deviceProfiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSmUserSoftwares_0 operation.
     * @callback module:api/ConfigureApi~getNetworkSmUserSoftwares_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSmDeviceSoftwares200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of softwares associated with a user
     * Get a list of softwares associated with a user
     * @param {String} networkId 
     * @param {String} userId 
     * @param {module:api/ConfigureApi~getNetworkSmUserSoftwares_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSmDeviceSoftwares200ResponseInner>}
     */
    getNetworkSmUserSoftwares_0(networkId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSmUserSoftwares_0");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getNetworkSmUserSoftwares_0");
      }

      let pathParams = {
        'networkId': networkId,
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSmDeviceSoftwares200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/users/{userId}/softwares', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSmUsers_0 operation.
     * @callback module:api/ConfigureApi~getNetworkSmUsers_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSmUsers200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the owners in an SM network with various specified fields and filters
     * List the owners in an SM network with various specified fields and filters
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [ids] Filter users by id(s).
     * @param {Array.<String>} [usernames] Filter users by username(s).
     * @param {Array.<String>} [emails] Filter users by email(s).
     * @param {Array.<String>} [scope] Specifiy a scope (one of all, none, withAny, withAll, withoutAny, withoutAll) and a set of tags.
     * @param {module:api/ConfigureApi~getNetworkSmUsers_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSmUsers200ResponseInner>}
     */
    getNetworkSmUsers_0(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSmUsers_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(opts['ids'], 'csv'),
        'usernames': this.apiClient.buildCollectionParam(opts['usernames'], 'csv'),
        'emails': this.apiClient.buildCollectionParam(opts['emails'], 'csv'),
        'scope': this.apiClient.buildCollectionParam(opts['scope'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSmUsers200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSnmp_0 operation.
     * @callback module:api/ConfigureApi~getNetworkSnmp_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the SNMP settings for a network
     * Return the SNMP settings for a network
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkSnmp_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkSnmp_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSnmp_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/snmp', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchAccessControlLists_0 operation.
     * @callback module:api/ConfigureApi~getNetworkSwitchAccessControlLists_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkSwitchAccessControlLists200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the access control lists for a MS network
     * Return the access control lists for a MS network
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkSwitchAccessControlLists_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkSwitchAccessControlLists200Response}
     */
    getNetworkSwitchAccessControlLists_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchAccessControlLists_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkSwitchAccessControlLists200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/accessControlLists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchAccessPolicies_0 operation.
     * @callback module:api/ConfigureApi~getNetworkSwitchAccessPolicies_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSwitchAccessPolicies200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the access policies for a switch network
     * List the access policies for a switch network. Only returns access policies with 'my RADIUS server' as authentication method
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkSwitchAccessPolicies_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSwitchAccessPolicies200ResponseInner>}
     */
    getNetworkSwitchAccessPolicies_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchAccessPolicies_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSwitchAccessPolicies200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/accessPolicies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchAccessPolicy_0 operation.
     * @callback module:api/ConfigureApi~getNetworkSwitchAccessPolicy_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkSwitchAccessPolicies200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a specific access policy for a switch network
     * Return a specific access policy for a switch network
     * @param {String} networkId 
     * @param {String} accessPolicyNumber 
     * @param {module:api/ConfigureApi~getNetworkSwitchAccessPolicy_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkSwitchAccessPolicies200ResponseInner}
     */
    getNetworkSwitchAccessPolicy_0(networkId, accessPolicyNumber, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchAccessPolicy_0");
      }
      // verify the required parameter 'accessPolicyNumber' is set
      if (accessPolicyNumber === undefined || accessPolicyNumber === null) {
        throw new Error("Missing the required parameter 'accessPolicyNumber' when calling getNetworkSwitchAccessPolicy_0");
      }

      let pathParams = {
        'networkId': networkId,
        'accessPolicyNumber': accessPolicyNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkSwitchAccessPolicies200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/accessPolicies/{accessPolicyNumber}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchAlternateManagementInterface_0 operation.
     * @callback module:api/ConfigureApi~getNetworkSwitchAlternateManagementInterface_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the switch alternate management interface for the network
     * Return the switch alternate management interface for the network
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkSwitchAlternateManagementInterface_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkSwitchAlternateManagementInterface_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchAlternateManagementInterface_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/alternateManagementInterface', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_0 operation.
     * @callback module:api/ConfigureApi~getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the list of servers trusted by Dynamic ARP Inspection on this network
     * Return the list of servers trusted by Dynamic ARP Inspection on this network. These are also known as whitelisted snoop entries
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:api/ConfigureApi~getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner>}
     */
    getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_0(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/dhcpServerPolicy/arpInspection/trustedServers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice_0 operation.
     * @callback module:api/ConfigureApi~getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the devices that have a Dynamic ARP Inspection warning and their warnings
     * Return the devices that have a Dynamic ARP Inspection warning and their warnings
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:api/ConfigureApi~getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner>}
     */
    getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice_0(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/dhcpServerPolicy/arpInspection/warnings/byDevice', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchDhcpServerPolicy_0 operation.
     * @callback module:api/ConfigureApi~getNetworkSwitchDhcpServerPolicy_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the DHCP server settings
     * Return the DHCP server settings. Blocked/allowed servers are only applied when default policy is allow/block, respectively
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkSwitchDhcpServerPolicy_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkSwitchDhcpServerPolicy_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchDhcpServerPolicy_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/dhcpServerPolicy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchDhcpV4ServersSeen_0 operation.
     * @callback module:api/ConfigureApi~getNetworkSwitchDhcpV4ServersSeen_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSwitchDhcpV4ServersSeen200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the network's DHCPv4 servers seen within the selected timeframe (default 1 day)
     * Return the network's DHCPv4 servers seen within the selected timeframe (default 1 day)
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:api/ConfigureApi~getNetworkSwitchDhcpV4ServersSeen_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSwitchDhcpV4ServersSeen200ResponseInner>}
     */
    getNetworkSwitchDhcpV4ServersSeen_0(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchDhcpV4ServersSeen_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        't0': opts['t0'],
        'timespan': opts['timespan'],
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSwitchDhcpV4ServersSeen200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/dhcp/v4/servers/seen', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchDscpToCosMappings_0 operation.
     * @callback module:api/ConfigureApi~getNetworkSwitchDscpToCosMappings_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the DSCP to CoS mappings
     * Return the DSCP to CoS mappings
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkSwitchDscpToCosMappings_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkSwitchDscpToCosMappings_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchDscpToCosMappings_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/dscpToCosMappings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchLinkAggregations_0 operation.
     * @callback module:api/ConfigureApi~getNetworkSwitchLinkAggregations_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List link aggregation groups
     * List link aggregation groups
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkSwitchLinkAggregations_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkSwitchLinkAggregations_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchLinkAggregations_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/linkAggregations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchMtu_0 operation.
     * @callback module:api/ConfigureApi~getNetworkSwitchMtu_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkSwitchMtu200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the MTU configuration
     * Return the MTU configuration
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkSwitchMtu_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkSwitchMtu200Response}
     */
    getNetworkSwitchMtu_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchMtu_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkSwitchMtu200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/mtu', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchPortSchedules_0 operation.
     * @callback module:api/ConfigureApi~getNetworkSwitchPortSchedules_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List switch port schedules
     * List switch port schedules
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkSwitchPortSchedules_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkSwitchPortSchedules_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchPortSchedules_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/portSchedules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchQosRule_0 operation.
     * @callback module:api/ConfigureApi~getNetworkSwitchQosRule_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a quality of service rule
     * Return a quality of service rule
     * @param {String} networkId 
     * @param {String} qosRuleId 
     * @param {module:api/ConfigureApi~getNetworkSwitchQosRule_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkSwitchQosRule_0(networkId, qosRuleId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchQosRule_0");
      }
      // verify the required parameter 'qosRuleId' is set
      if (qosRuleId === undefined || qosRuleId === null) {
        throw new Error("Missing the required parameter 'qosRuleId' when calling getNetworkSwitchQosRule_0");
      }

      let pathParams = {
        'networkId': networkId,
        'qosRuleId': qosRuleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/qosRules/{qosRuleId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchQosRulesOrder_0 operation.
     * @callback module:api/ConfigureApi~getNetworkSwitchQosRulesOrder_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the quality of service rule IDs by order in which they will be processed by the switch
     * Return the quality of service rule IDs by order in which they will be processed by the switch
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkSwitchQosRulesOrder_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkSwitchQosRulesOrder_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchQosRulesOrder_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/qosRules/order', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchQosRules_0 operation.
     * @callback module:api/ConfigureApi~getNetworkSwitchQosRules_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List quality of service rules
     * List quality of service rules
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkSwitchQosRules_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkSwitchQosRules_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchQosRules_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/qosRules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchRoutingMulticastRendezvousPoint_0 operation.
     * @callback module:api/ConfigureApi~getNetworkSwitchRoutingMulticastRendezvousPoint_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a multicast rendezvous point
     * Return a multicast rendezvous point
     * @param {String} networkId 
     * @param {String} rendezvousPointId 
     * @param {module:api/ConfigureApi~getNetworkSwitchRoutingMulticastRendezvousPoint_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkSwitchRoutingMulticastRendezvousPoint_0(networkId, rendezvousPointId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchRoutingMulticastRendezvousPoint_0");
      }
      // verify the required parameter 'rendezvousPointId' is set
      if (rendezvousPointId === undefined || rendezvousPointId === null) {
        throw new Error("Missing the required parameter 'rendezvousPointId' when calling getNetworkSwitchRoutingMulticastRendezvousPoint_0");
      }

      let pathParams = {
        'networkId': networkId,
        'rendezvousPointId': rendezvousPointId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/routing/multicast/rendezvousPoints/{rendezvousPointId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchRoutingMulticastRendezvousPoints_0 operation.
     * @callback module:api/ConfigureApi~getNetworkSwitchRoutingMulticastRendezvousPoints_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<[Object]>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List multicast rendezvous points
     * List multicast rendezvous points
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkSwitchRoutingMulticastRendezvousPoints_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<[Object]>}
     */
    getNetworkSwitchRoutingMulticastRendezvousPoints_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchRoutingMulticastRendezvousPoints_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [[Object]];
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/routing/multicast/rendezvousPoints', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchRoutingMulticast_0 operation.
     * @callback module:api/ConfigureApi~getNetworkSwitchRoutingMulticast_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return multicast settings for a network
     * Return multicast settings for a network
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkSwitchRoutingMulticast_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkSwitchRoutingMulticast_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchRoutingMulticast_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/routing/multicast', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchRoutingOspf_0 operation.
     * @callback module:api/ConfigureApi~getNetworkSwitchRoutingOspf_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return layer 3 OSPF routing configuration
     * Return layer 3 OSPF routing configuration
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkSwitchRoutingOspf_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkSwitchRoutingOspf_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchRoutingOspf_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/routing/ospf', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchSettings_0 operation.
     * @callback module:api/ConfigureApi~getNetworkSwitchSettings_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkSwitchSettings200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the switch network settings
     * Returns the switch network settings
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkSwitchSettings_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkSwitchSettings200Response}
     */
    getNetworkSwitchSettings_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchSettings_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkSwitchSettings200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchStackRoutingInterfaceDhcp_0 operation.
     * @callback module:api/ConfigureApi~getNetworkSwitchStackRoutingInterfaceDhcp_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a layer 3 interface DHCP configuration for a switch stack
     * Return a layer 3 interface DHCP configuration for a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {String} interfaceId 
     * @param {module:api/ConfigureApi~getNetworkSwitchStackRoutingInterfaceDhcp_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkSwitchStackRoutingInterfaceDhcp_0(networkId, switchStackId, interfaceId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchStackRoutingInterfaceDhcp_0");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling getNetworkSwitchStackRoutingInterfaceDhcp_0");
      }
      // verify the required parameter 'interfaceId' is set
      if (interfaceId === undefined || interfaceId === null) {
        throw new Error("Missing the required parameter 'interfaceId' when calling getNetworkSwitchStackRoutingInterfaceDhcp_0");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId,
        'interfaceId': interfaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}/dhcp', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchStackRoutingInterface_0 operation.
     * @callback module:api/ConfigureApi~getNetworkSwitchStackRoutingInterface_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a layer 3 interface from a switch stack
     * Return a layer 3 interface from a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {String} interfaceId 
     * @param {module:api/ConfigureApi~getNetworkSwitchStackRoutingInterface_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkSwitchStackRoutingInterface_0(networkId, switchStackId, interfaceId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchStackRoutingInterface_0");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling getNetworkSwitchStackRoutingInterface_0");
      }
      // verify the required parameter 'interfaceId' is set
      if (interfaceId === undefined || interfaceId === null) {
        throw new Error("Missing the required parameter 'interfaceId' when calling getNetworkSwitchStackRoutingInterface_0");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId,
        'interfaceId': interfaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchStackRoutingInterfaces_0 operation.
     * @callback module:api/ConfigureApi~getNetworkSwitchStackRoutingInterfaces_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List layer 3 interfaces for a switch stack
     * List layer 3 interfaces for a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {module:api/ConfigureApi~getNetworkSwitchStackRoutingInterfaces_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkSwitchStackRoutingInterfaces_0(networkId, switchStackId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchStackRoutingInterfaces_0");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling getNetworkSwitchStackRoutingInterfaces_0");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchStackRoutingStaticRoute_0 operation.
     * @callback module:api/ConfigureApi~getNetworkSwitchStackRoutingStaticRoute_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a layer 3 static route for a switch stack
     * Return a layer 3 static route for a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {String} staticRouteId 
     * @param {module:api/ConfigureApi~getNetworkSwitchStackRoutingStaticRoute_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkSwitchStackRoutingStaticRoute_0(networkId, switchStackId, staticRouteId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchStackRoutingStaticRoute_0");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling getNetworkSwitchStackRoutingStaticRoute_0");
      }
      // verify the required parameter 'staticRouteId' is set
      if (staticRouteId === undefined || staticRouteId === null) {
        throw new Error("Missing the required parameter 'staticRouteId' when calling getNetworkSwitchStackRoutingStaticRoute_0");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId,
        'staticRouteId': staticRouteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes/{staticRouteId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchStackRoutingStaticRoutes_0 operation.
     * @callback module:api/ConfigureApi~getNetworkSwitchStackRoutingStaticRoutes_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List layer 3 static routes for a switch stack
     * List layer 3 static routes for a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {module:api/ConfigureApi~getNetworkSwitchStackRoutingStaticRoutes_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkSwitchStackRoutingStaticRoutes_0(networkId, switchStackId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchStackRoutingStaticRoutes_0");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling getNetworkSwitchStackRoutingStaticRoutes_0");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchStack_0 operation.
     * @callback module:api/ConfigureApi~getNetworkSwitchStack_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkSwitchStack200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show a switch stack
     * Show a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {module:api/ConfigureApi~getNetworkSwitchStack_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkSwitchStack200Response}
     */
    getNetworkSwitchStack_0(networkId, switchStackId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchStack_0");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling getNetworkSwitchStack_0");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkSwitchStack200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchStacks_0 operation.
     * @callback module:api/ConfigureApi~getNetworkSwitchStacks_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the switch stacks in a network
     * List the switch stacks in a network
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkSwitchStacks_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkSwitchStacks_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchStacks_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchStormControl_0 operation.
     * @callback module:api/ConfigureApi~getNetworkSwitchStormControl_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkSwitchStormControl200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the storm control configuration for a switch network
     * Return the storm control configuration for a switch network
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkSwitchStormControl_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkSwitchStormControl200Response}
     */
    getNetworkSwitchStormControl_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchStormControl_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkSwitchStormControl200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stormControl', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchStp_0 operation.
     * @callback module:api/ConfigureApi~getNetworkSwitchStp_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns STP settings
     * Returns STP settings
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkSwitchStp_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkSwitchStp_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchStp_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stp', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSyslogServers_0 operation.
     * @callback module:api/ConfigureApi~getNetworkSyslogServers_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkSyslogServers200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the syslog servers for a network
     * List the syslog servers for a network
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkSyslogServers_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkSyslogServers200Response}
     */
    getNetworkSyslogServers_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSyslogServers_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkSyslogServers200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/syslogServers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkTrafficAnalysis_0 operation.
     * @callback module:api/ConfigureApi~getNetworkTrafficAnalysis_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the traffic analysis settings for a network
     * Return the traffic analysis settings for a network
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkTrafficAnalysis_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkTrafficAnalysis_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkTrafficAnalysis_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/trafficAnalysis', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkTrafficShapingApplicationCategories_0 operation.
     * @callback module:api/ConfigureApi~getNetworkTrafficShapingApplicationCategories_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the application categories for traffic shaping rules.
     * Returns the application categories for traffic shaping rules.
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkTrafficShapingApplicationCategories_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkTrafficShapingApplicationCategories_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkTrafficShapingApplicationCategories_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/trafficShaping/applicationCategories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkTrafficShapingDscpTaggingOptions_0 operation.
     * @callback module:api/ConfigureApi~getNetworkTrafficShapingDscpTaggingOptions_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the available DSCP tagging options for your traffic shaping rules.
     * Returns the available DSCP tagging options for your traffic shaping rules.
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkTrafficShapingDscpTaggingOptions_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkTrafficShapingDscpTaggingOptions_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkTrafficShapingDscpTaggingOptions_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/trafficShaping/dscpTaggingOptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWebhooksHttpServer_0 operation.
     * @callback module:api/ConfigureApi~getNetworkWebhooksHttpServer_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkWebhooksHttpServers200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return an HTTP server for a network
     * Return an HTTP server for a network
     * @param {String} networkId 
     * @param {String} httpServerId 
     * @param {module:api/ConfigureApi~getNetworkWebhooksHttpServer_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkWebhooksHttpServers200ResponseInner}
     */
    getNetworkWebhooksHttpServer_0(networkId, httpServerId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWebhooksHttpServer_0");
      }
      // verify the required parameter 'httpServerId' is set
      if (httpServerId === undefined || httpServerId === null) {
        throw new Error("Missing the required parameter 'httpServerId' when calling getNetworkWebhooksHttpServer_0");
      }

      let pathParams = {
        'networkId': networkId,
        'httpServerId': httpServerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkWebhooksHttpServers200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/webhooks/httpServers/{httpServerId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWebhooksHttpServers_0 operation.
     * @callback module:api/ConfigureApi~getNetworkWebhooksHttpServers_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkWebhooksHttpServers200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the HTTP servers for a network
     * List the HTTP servers for a network
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkWebhooksHttpServers_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkWebhooksHttpServers200ResponseInner>}
     */
    getNetworkWebhooksHttpServers_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWebhooksHttpServers_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkWebhooksHttpServers200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/webhooks/httpServers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWebhooksPayloadTemplate_0 operation.
     * @callback module:api/ConfigureApi~getNetworkWebhooksPayloadTemplate_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkWebhooksPayloadTemplates200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the webhook payload template for a network
     * Get the webhook payload template for a network
     * @param {String} networkId 
     * @param {String} payloadTemplateId 
     * @param {module:api/ConfigureApi~getNetworkWebhooksPayloadTemplate_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkWebhooksPayloadTemplates200ResponseInner}
     */
    getNetworkWebhooksPayloadTemplate_0(networkId, payloadTemplateId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWebhooksPayloadTemplate_0");
      }
      // verify the required parameter 'payloadTemplateId' is set
      if (payloadTemplateId === undefined || payloadTemplateId === null) {
        throw new Error("Missing the required parameter 'payloadTemplateId' when calling getNetworkWebhooksPayloadTemplate_0");
      }

      let pathParams = {
        'networkId': networkId,
        'payloadTemplateId': payloadTemplateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkWebhooksPayloadTemplates200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/webhooks/payloadTemplates/{payloadTemplateId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWebhooksPayloadTemplates_0 operation.
     * @callback module:api/ConfigureApi~getNetworkWebhooksPayloadTemplates_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkWebhooksPayloadTemplates200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the webhook payload templates for a network
     * List the webhook payload templates for a network
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkWebhooksPayloadTemplates_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkWebhooksPayloadTemplates200ResponseInner>}
     */
    getNetworkWebhooksPayloadTemplates_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWebhooksPayloadTemplates_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkWebhooksPayloadTemplates200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/webhooks/payloadTemplates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWebhooksWebhookTest_0 operation.
     * @callback module:api/ConfigureApi~getNetworkWebhooksWebhookTest_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateNetworkWebhooksWebhookTest201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the status of a webhook test for a network
     * Return the status of a webhook test for a network
     * @param {String} networkId 
     * @param {String} webhookTestId 
     * @param {module:api/ConfigureApi~getNetworkWebhooksWebhookTest_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateNetworkWebhooksWebhookTest201Response}
     */
    getNetworkWebhooksWebhookTest_0(networkId, webhookTestId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWebhooksWebhookTest_0");
      }
      // verify the required parameter 'webhookTestId' is set
      if (webhookTestId === undefined || webhookTestId === null) {
        throw new Error("Missing the required parameter 'webhookTestId' when calling getNetworkWebhooksWebhookTest_0");
      }

      let pathParams = {
        'networkId': networkId,
        'webhookTestId': webhookTestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreateNetworkWebhooksWebhookTest201Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/webhooks/webhookTests/{webhookTestId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessAlternateManagementInterface_0 operation.
     * @callback module:api/ConfigureApi~getNetworkWirelessAlternateManagementInterface_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return alternate management interface and devices with IP assigned
     * Return alternate management interface and devices with IP assigned
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkWirelessAlternateManagementInterface_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkWirelessAlternateManagementInterface_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessAlternateManagementInterface_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/alternateManagementInterface', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessBilling_0 operation.
     * @callback module:api/ConfigureApi~getNetworkWirelessBilling_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the billing settings of this network
     * Return the billing settings of this network
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkWirelessBilling_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkWirelessBilling_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessBilling_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/billing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessBluetoothSettings_0 operation.
     * @callback module:api/ConfigureApi~getNetworkWirelessBluetoothSettings_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkWirelessBluetoothSettings200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the Bluetooth settings for a network. <a href=\"https://documentation.meraki.com/MR/Bluetooth/Bluetooth_Low_Energy_(BLE)\">Bluetooth settings</a> must be enabled on the network.
     * Return the Bluetooth settings for a network. <a href=\"https://documentation.meraki.com/MR/Bluetooth/Bluetooth_Low_Energy_(BLE)\">Bluetooth settings</a> must be enabled on the network.
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkWirelessBluetoothSettings_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkWirelessBluetoothSettings200Response}
     */
    getNetworkWirelessBluetoothSettings_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessBluetoothSettings_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkWirelessBluetoothSettings200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/bluetooth/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessRfProfile_0 operation.
     * @callback module:api/ConfigureApi~getNetworkWirelessRfProfile_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a RF profile
     * Return a RF profile
     * @param {String} networkId 
     * @param {String} rfProfileId 
     * @param {module:api/ConfigureApi~getNetworkWirelessRfProfile_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkWirelessRfProfile_0(networkId, rfProfileId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessRfProfile_0");
      }
      // verify the required parameter 'rfProfileId' is set
      if (rfProfileId === undefined || rfProfileId === null) {
        throw new Error("Missing the required parameter 'rfProfileId' when calling getNetworkWirelessRfProfile_0");
      }

      let pathParams = {
        'networkId': networkId,
        'rfProfileId': rfProfileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/rfProfiles/{rfProfileId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessRfProfiles_0 operation.
     * @callback module:api/ConfigureApi~getNetworkWirelessRfProfiles_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the non-basic RF profiles for this network
     * List the non-basic RF profiles for this network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeTemplateProfiles] If the network is bound to a template, this parameter controls whether or not the non-basic RF profiles defined on the template should be included in the response alongside the non-basic profiles defined on the bound network. Defaults to false.
     * @param {module:api/ConfigureApi~getNetworkWirelessRfProfiles_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkWirelessRfProfiles_0(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessRfProfiles_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        'includeTemplateProfiles': opts['includeTemplateProfiles']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/rfProfiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessSettings_0 operation.
     * @callback module:api/ConfigureApi~getNetworkWirelessSettings_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkWirelessSettings200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the wireless settings for a network
     * Return the wireless settings for a network
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkWirelessSettings_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkWirelessSettings200Response}
     */
    getNetworkWirelessSettings_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessSettings_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkWirelessSettings200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessSsidBonjourForwarding_0 operation.
     * @callback module:api/ConfigureApi~getNetworkWirelessSsidBonjourForwarding_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the Bonjour forwarding setting and rules for the SSID
     * List the Bonjour forwarding setting and rules for the SSID
     * @param {String} networkId 
     * @param {String} number 
     * @param {module:api/ConfigureApi~getNetworkWirelessSsidBonjourForwarding_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkWirelessSsidBonjourForwarding_0(networkId, number, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessSsidBonjourForwarding_0");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling getNetworkWirelessSsidBonjourForwarding_0");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/bonjourForwarding', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessSsidDeviceTypeGroupPolicies_0 operation.
     * @callback module:api/ConfigureApi~getNetworkWirelessSsidDeviceTypeGroupPolicies_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the device type group policies for the SSID
     * List the device type group policies for the SSID
     * @param {String} networkId 
     * @param {String} number 
     * @param {module:api/ConfigureApi~getNetworkWirelessSsidDeviceTypeGroupPolicies_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkWirelessSsidDeviceTypeGroupPolicies_0(networkId, number, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessSsidDeviceTypeGroupPolicies_0");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling getNetworkWirelessSsidDeviceTypeGroupPolicies_0");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/deviceTypeGroupPolicies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessSsidEapOverride_0 operation.
     * @callback module:api/ConfigureApi~getNetworkWirelessSsidEapOverride_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkWirelessSsidEapOverride200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the EAP overridden parameters for an SSID
     * Return the EAP overridden parameters for an SSID
     * @param {String} networkId 
     * @param {String} number 
     * @param {module:api/ConfigureApi~getNetworkWirelessSsidEapOverride_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkWirelessSsidEapOverride200Response}
     */
    getNetworkWirelessSsidEapOverride_0(networkId, number, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessSsidEapOverride_0");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling getNetworkWirelessSsidEapOverride_0");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkWirelessSsidEapOverride200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/eapOverride', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessSsidFirewallL3FirewallRules_0 operation.
     * @callback module:api/ConfigureApi~getNetworkWirelessSsidFirewallL3FirewallRules_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the L3 firewall rules for an SSID on an MR network
     * Return the L3 firewall rules for an SSID on an MR network
     * @param {String} networkId 
     * @param {String} number 
     * @param {module:api/ConfigureApi~getNetworkWirelessSsidFirewallL3FirewallRules_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkWirelessSsidFirewallL3FirewallRules_0(networkId, number, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessSsidFirewallL3FirewallRules_0");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling getNetworkWirelessSsidFirewallL3FirewallRules_0");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/firewall/l3FirewallRules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessSsidFirewallL7FirewallRules_0 operation.
     * @callback module:api/ConfigureApi~getNetworkWirelessSsidFirewallL7FirewallRules_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the L7 firewall rules for an SSID on an MR network
     * Return the L7 firewall rules for an SSID on an MR network
     * @param {String} networkId 
     * @param {String} number 
     * @param {module:api/ConfigureApi~getNetworkWirelessSsidFirewallL7FirewallRules_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkWirelessSsidFirewallL7FirewallRules_0(networkId, number, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessSsidFirewallL7FirewallRules_0");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling getNetworkWirelessSsidFirewallL7FirewallRules_0");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/firewall/l7FirewallRules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessSsidHotspot20_0 operation.
     * @callback module:api/ConfigureApi~getNetworkWirelessSsidHotspot20_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the Hotspot 2.0 settings for an SSID
     * Return the Hotspot 2.0 settings for an SSID
     * @param {String} networkId 
     * @param {String} number 
     * @param {module:api/ConfigureApi~getNetworkWirelessSsidHotspot20_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkWirelessSsidHotspot20_0(networkId, number, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessSsidHotspot20_0");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling getNetworkWirelessSsidHotspot20_0");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/hotspot20', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessSsidIdentityPsk_0 operation.
     * @callback module:api/ConfigureApi~getNetworkWirelessSsidIdentityPsk_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkWirelessSsidIdentityPsks200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return an Identity PSK
     * Return an Identity PSK
     * @param {String} networkId 
     * @param {String} number 
     * @param {String} identityPskId 
     * @param {module:api/ConfigureApi~getNetworkWirelessSsidIdentityPsk_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkWirelessSsidIdentityPsks200ResponseInner}
     */
    getNetworkWirelessSsidIdentityPsk_0(networkId, number, identityPskId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessSsidIdentityPsk_0");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling getNetworkWirelessSsidIdentityPsk_0");
      }
      // verify the required parameter 'identityPskId' is set
      if (identityPskId === undefined || identityPskId === null) {
        throw new Error("Missing the required parameter 'identityPskId' when calling getNetworkWirelessSsidIdentityPsk_0");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number,
        'identityPskId': identityPskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkWirelessSsidIdentityPsks200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/identityPsks/{identityPskId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessSsidIdentityPsks_0 operation.
     * @callback module:api/ConfigureApi~getNetworkWirelessSsidIdentityPsks_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkWirelessSsidIdentityPsks200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all Identity PSKs in a wireless network
     * List all Identity PSKs in a wireless network
     * @param {String} networkId 
     * @param {String} number 
     * @param {module:api/ConfigureApi~getNetworkWirelessSsidIdentityPsks_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkWirelessSsidIdentityPsks200ResponseInner>}
     */
    getNetworkWirelessSsidIdentityPsks_0(networkId, number, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessSsidIdentityPsks_0");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling getNetworkWirelessSsidIdentityPsks_0");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkWirelessSsidIdentityPsks200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/identityPsks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessSsidSchedules_0 operation.
     * @callback module:api/ConfigureApi~getNetworkWirelessSsidSchedules_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the outage schedule for the SSID
     * List the outage schedule for the SSID
     * @param {String} networkId 
     * @param {String} number 
     * @param {module:api/ConfigureApi~getNetworkWirelessSsidSchedules_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkWirelessSsidSchedules_0(networkId, number, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessSsidSchedules_0");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling getNetworkWirelessSsidSchedules_0");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/schedules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessSsidSplashSettings_0 operation.
     * @callback module:api/ConfigureApi~getNetworkWirelessSsidSplashSettings_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkWirelessSsidSplashSettings200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Display the splash page settings for the given SSID
     * Display the splash page settings for the given SSID
     * @param {String} networkId 
     * @param {String} number 
     * @param {module:api/ConfigureApi~getNetworkWirelessSsidSplashSettings_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkWirelessSsidSplashSettings200Response}
     */
    getNetworkWirelessSsidSplashSettings_0(networkId, number, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessSsidSplashSettings_0");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling getNetworkWirelessSsidSplashSettings_0");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkWirelessSsidSplashSettings200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/splash/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessSsidTrafficShapingRules_0 operation.
     * @callback module:api/ConfigureApi~getNetworkWirelessSsidTrafficShapingRules_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Display the traffic shaping settings for a SSID on an MR network
     * Display the traffic shaping settings for a SSID on an MR network
     * @param {String} networkId 
     * @param {String} number 
     * @param {module:api/ConfigureApi~getNetworkWirelessSsidTrafficShapingRules_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkWirelessSsidTrafficShapingRules_0(networkId, number, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessSsidTrafficShapingRules_0");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling getNetworkWirelessSsidTrafficShapingRules_0");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/trafficShaping/rules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessSsidVpn_0 operation.
     * @callback module:api/ConfigureApi~getNetworkWirelessSsidVpn_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the VPN settings for the SSID.
     * List the VPN settings for the SSID.
     * @param {String} networkId 
     * @param {String} number 
     * @param {module:api/ConfigureApi~getNetworkWirelessSsidVpn_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkWirelessSsidVpn_0(networkId, number, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessSsidVpn_0");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling getNetworkWirelessSsidVpn_0");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/vpn', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessSsid_0 operation.
     * @callback module:api/ConfigureApi~getNetworkWirelessSsid_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a single MR SSID
     * Return a single MR SSID
     * @param {String} networkId 
     * @param {String} number 
     * @param {module:api/ConfigureApi~getNetworkWirelessSsid_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkWirelessSsid_0(networkId, number, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessSsid_0");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling getNetworkWirelessSsid_0");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessSsids_0 operation.
     * @callback module:api/ConfigureApi~getNetworkWirelessSsids_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the MR SSIDs in a network
     * List the MR SSIDs in a network
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetworkWirelessSsids_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkWirelessSsids_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessSsids_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetwork_0 operation.
     * @callback module:api/ConfigureApi~getNetwork_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetwork200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a network
     * Return a network
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~getNetwork_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetwork200Response}
     */
    getNetwork_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetwork_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetwork200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationActionBatch_0 operation.
     * @callback module:api/ConfigureApi~getOrganizationActionBatch_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateOrganizationActionBatch201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return an action batch
     * Return an action batch
     * @param {String} organizationId 
     * @param {String} actionBatchId 
     * @param {module:api/ConfigureApi~getOrganizationActionBatch_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateOrganizationActionBatch201Response}
     */
    getOrganizationActionBatch_0(organizationId, actionBatchId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationActionBatch_0");
      }
      // verify the required parameter 'actionBatchId' is set
      if (actionBatchId === undefined || actionBatchId === null) {
        throw new Error("Missing the required parameter 'actionBatchId' when calling getOrganizationActionBatch_0");
      }

      let pathParams = {
        'organizationId': organizationId,
        'actionBatchId': actionBatchId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreateOrganizationActionBatch201Response;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/actionBatches/{actionBatchId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationActionBatches_0 operation.
     * @callback module:api/ConfigureApi~getOrganizationActionBatches_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the list of action batches in the organization
     * Return the list of action batches in the organization
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [status] Filter batches by status. Valid types are pending, completed, and failed.
     * @param {module:api/ConfigureApi~getOrganizationActionBatches_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getOrganizationActionBatches_0(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationActionBatches_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'status': opts['status']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/actionBatches', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationAdaptivePolicyAcl_0 operation.
     * @callback module:api/ConfigureApi~getOrganizationAdaptivePolicyAcl_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the adaptive policy ACL information
     * Returns the adaptive policy ACL information
     * @param {String} organizationId 
     * @param {String} aclId 
     * @param {module:api/ConfigureApi~getOrganizationAdaptivePolicyAcl_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getOrganizationAdaptivePolicyAcl_0(organizationId, aclId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationAdaptivePolicyAcl_0");
      }
      // verify the required parameter 'aclId' is set
      if (aclId === undefined || aclId === null) {
        throw new Error("Missing the required parameter 'aclId' when calling getOrganizationAdaptivePolicyAcl_0");
      }

      let pathParams = {
        'organizationId': organizationId,
        'aclId': aclId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/adaptivePolicy/acls/{aclId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationAdaptivePolicyAcls_0 operation.
     * @callback module:api/ConfigureApi~getOrganizationAdaptivePolicyAcls_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List adaptive policy ACLs in a organization
     * List adaptive policy ACLs in a organization
     * @param {String} organizationId 
     * @param {module:api/ConfigureApi~getOrganizationAdaptivePolicyAcls_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getOrganizationAdaptivePolicyAcls_0(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationAdaptivePolicyAcls_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/adaptivePolicy/acls', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationAdaptivePolicyGroup_0 operation.
     * @callback module:api/ConfigureApi~getOrganizationAdaptivePolicyGroup_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an adaptive policy group
     * Returns an adaptive policy group
     * @param {String} organizationId 
     * @param {String} id 
     * @param {module:api/ConfigureApi~getOrganizationAdaptivePolicyGroup_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getOrganizationAdaptivePolicyGroup_0(organizationId, id, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationAdaptivePolicyGroup_0");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganizationAdaptivePolicyGroup_0");
      }

      let pathParams = {
        'organizationId': organizationId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/adaptivePolicy/groups/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationAdaptivePolicyGroups_0 operation.
     * @callback module:api/ConfigureApi~getOrganizationAdaptivePolicyGroups_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List adaptive policy groups in a organization
     * List adaptive policy groups in a organization
     * @param {String} organizationId 
     * @param {module:api/ConfigureApi~getOrganizationAdaptivePolicyGroups_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getOrganizationAdaptivePolicyGroups_0(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationAdaptivePolicyGroups_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/adaptivePolicy/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationAdaptivePolicyPolicies_0 operation.
     * @callback module:api/ConfigureApi~getOrganizationAdaptivePolicyPolicies_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List adaptive policies in an organization
     * List adaptive policies in an organization
     * @param {String} organizationId 
     * @param {module:api/ConfigureApi~getOrganizationAdaptivePolicyPolicies_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getOrganizationAdaptivePolicyPolicies_0(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationAdaptivePolicyPolicies_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/adaptivePolicy/policies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationAdaptivePolicyPolicy_0 operation.
     * @callback module:api/ConfigureApi~getOrganizationAdaptivePolicyPolicy_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return an adaptive policy
     * Return an adaptive policy
     * @param {String} organizationId 
     * @param {String} id 
     * @param {module:api/ConfigureApi~getOrganizationAdaptivePolicyPolicy_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getOrganizationAdaptivePolicyPolicy_0(organizationId, id, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationAdaptivePolicyPolicy_0");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganizationAdaptivePolicyPolicy_0");
      }

      let pathParams = {
        'organizationId': organizationId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/adaptivePolicy/policies/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationAdaptivePolicySettings_0 operation.
     * @callback module:api/ConfigureApi~getOrganizationAdaptivePolicySettings_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns global adaptive policy settings in an organization
     * Returns global adaptive policy settings in an organization
     * @param {String} organizationId 
     * @param {module:api/ConfigureApi~getOrganizationAdaptivePolicySettings_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getOrganizationAdaptivePolicySettings_0(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationAdaptivePolicySettings_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/adaptivePolicy/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationAdmins_0 operation.
     * @callback module:api/ConfigureApi~getOrganizationAdmins_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the dashboard administrators in this organization
     * List the dashboard administrators in this organization
     * @param {String} organizationId 
     * @param {module:api/ConfigureApi~getOrganizationAdmins_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getOrganizationAdmins_0(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationAdmins_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/admins', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationAlertsProfiles_0 operation.
     * @callback module:api/ConfigureApi~getOrganizationAlertsProfiles_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all organization-wide alert configurations
     * List all organization-wide alert configurations
     * @param {String} organizationId 
     * @param {module:api/ConfigureApi~getOrganizationAlertsProfiles_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getOrganizationAlertsProfiles_0(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationAlertsProfiles_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/alerts/profiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationApplianceSecurityIntrusion_0 operation.
     * @callback module:api/ConfigureApi~getOrganizationApplianceSecurityIntrusion_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all supported intrusion settings for an organization
     * Returns all supported intrusion settings for an organization
     * @param {String} organizationId 
     * @param {module:api/ConfigureApi~getOrganizationApplianceSecurityIntrusion_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getOrganizationApplianceSecurityIntrusion_0(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationApplianceSecurityIntrusion_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/appliance/security/intrusion', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationApplianceVpnThirdPartyVPNPeers_0 operation.
     * @callback module:api/ConfigureApi~getOrganizationApplianceVpnThirdPartyVPNPeers_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizationApplianceVpnThirdPartyVPNPeers200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the third party VPN peers for an organization
     * Return the third party VPN peers for an organization
     * @param {String} organizationId 
     * @param {module:api/ConfigureApi~getOrganizationApplianceVpnThirdPartyVPNPeers_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizationApplianceVpnThirdPartyVPNPeers200Response}
     */
    getOrganizationApplianceVpnThirdPartyVPNPeers_0(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationApplianceVpnThirdPartyVPNPeers_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOrganizationApplianceVpnThirdPartyVPNPeers200Response;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/appliance/vpn/thirdPartyVPNPeers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationApplianceVpnVpnFirewallRules_0 operation.
     * @callback module:api/ConfigureApi~getOrganizationApplianceVpnVpnFirewallRules_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the firewall rules for an organization's site-to-site VPN
     * Return the firewall rules for an organization's site-to-site VPN
     * @param {String} organizationId 
     * @param {module:api/ConfigureApi~getOrganizationApplianceVpnVpnFirewallRules_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getOrganizationApplianceVpnVpnFirewallRules_0(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationApplianceVpnVpnFirewallRules_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/appliance/vpn/vpnFirewallRules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationBrandingPoliciesPriorities_0 operation.
     * @callback module:api/ConfigureApi~getOrganizationBrandingPoliciesPriorities_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizationBrandingPoliciesPriorities200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the branding policy IDs of an organization in priority order
     * Return the branding policy IDs of an organization in priority order. IDs are ordered in ascending order of priority (IDs later in the array have higher priority).
     * @param {String} organizationId 
     * @param {module:api/ConfigureApi~getOrganizationBrandingPoliciesPriorities_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizationBrandingPoliciesPriorities200Response}
     */
    getOrganizationBrandingPoliciesPriorities_0(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationBrandingPoliciesPriorities_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOrganizationBrandingPoliciesPriorities200Response;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/brandingPolicies/priorities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationBrandingPolicies_0 operation.
     * @callback module:api/ConfigureApi~getOrganizationBrandingPolicies_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationBrandingPolicies200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the branding policies of an organization
     * List the branding policies of an organization
     * @param {String} organizationId 
     * @param {module:api/ConfigureApi~getOrganizationBrandingPolicies_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationBrandingPolicies200ResponseInner>}
     */
    getOrganizationBrandingPolicies_0(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationBrandingPolicies_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationBrandingPolicies200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/brandingPolicies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationBrandingPolicy_0 operation.
     * @callback module:api/ConfigureApi~getOrganizationBrandingPolicy_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizationBrandingPolicies200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a branding policy
     * Return a branding policy
     * @param {String} organizationId 
     * @param {String} brandingPolicyId 
     * @param {module:api/ConfigureApi~getOrganizationBrandingPolicy_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizationBrandingPolicies200ResponseInner}
     */
    getOrganizationBrandingPolicy_0(organizationId, brandingPolicyId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationBrandingPolicy_0");
      }
      // verify the required parameter 'brandingPolicyId' is set
      if (brandingPolicyId === undefined || brandingPolicyId === null) {
        throw new Error("Missing the required parameter 'brandingPolicyId' when calling getOrganizationBrandingPolicy_0");
      }

      let pathParams = {
        'organizationId': organizationId,
        'brandingPolicyId': brandingPolicyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOrganizationBrandingPolicies200ResponseInner;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/brandingPolicies/{brandingPolicyId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationCameraCustomAnalyticsArtifact_0 operation.
     * @callback module:api/ConfigureApi~getOrganizationCameraCustomAnalyticsArtifact_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Custom Analytics Artifact
     * Get Custom Analytics Artifact
     * @param {String} organizationId 
     * @param {String} artifactId 
     * @param {module:api/ConfigureApi~getOrganizationCameraCustomAnalyticsArtifact_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getOrganizationCameraCustomAnalyticsArtifact_0(organizationId, artifactId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationCameraCustomAnalyticsArtifact_0");
      }
      // verify the required parameter 'artifactId' is set
      if (artifactId === undefined || artifactId === null) {
        throw new Error("Missing the required parameter 'artifactId' when calling getOrganizationCameraCustomAnalyticsArtifact_0");
      }

      let pathParams = {
        'organizationId': organizationId,
        'artifactId': artifactId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/camera/customAnalytics/artifacts/{artifactId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationCameraCustomAnalyticsArtifacts_0 operation.
     * @callback module:api/ConfigureApi~getOrganizationCameraCustomAnalyticsArtifacts_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Custom Analytics Artifacts
     * List Custom Analytics Artifacts
     * @param {String} organizationId 
     * @param {module:api/ConfigureApi~getOrganizationCameraCustomAnalyticsArtifacts_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getOrganizationCameraCustomAnalyticsArtifacts_0(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationCameraCustomAnalyticsArtifacts_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/camera/customAnalytics/artifacts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationCameraOnboardingStatuses_0 operation.
     * @callback module:api/ConfigureApi~getOrganizationCameraOnboardingStatuses_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch onboarding status of cameras
     * Fetch onboarding status of cameras
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [serials] A list of serial numbers. The returned cameras will be filtered to only include these serials.
     * @param {Array.<String>} [networkIds] A list of network IDs. The returned cameras will be filtered to only include these networks.
     * @param {module:api/ConfigureApi~getOrganizationCameraOnboardingStatuses_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getOrganizationCameraOnboardingStatuses_0(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationCameraOnboardingStatuses_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'serials': this.apiClient.buildCollectionParam(opts['serials'], 'csv'),
        'networkIds': this.apiClient.buildCollectionParam(opts['networkIds'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/camera/onboarding/statuses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationClientsSearch_0 operation.
     * @callback module:api/ConfigureApi~getOrganizationClientsSearch_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the client details in an organization
     * Return the client details in an organization
     * @param {String} organizationId 
     * @param {String} mac The MAC address of the client. Required.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 5. Default is 5.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:api/ConfigureApi~getOrganizationClientsSearch_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getOrganizationClientsSearch_0(organizationId, mac, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationClientsSearch_0");
      }
      // verify the required parameter 'mac' is set
      if (mac === undefined || mac === null) {
        throw new Error("Missing the required parameter 'mac' when calling getOrganizationClientsSearch_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'mac': mac,
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/clients/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationConfigTemplateSwitchProfilePort_0 operation.
     * @callback module:api/ConfigureApi~getOrganizationConfigTemplateSwitchProfilePort_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a switch profile port
     * Return a switch profile port
     * @param {String} organizationId 
     * @param {String} configTemplateId 
     * @param {String} profileId 
     * @param {String} portId 
     * @param {module:api/ConfigureApi~getOrganizationConfigTemplateSwitchProfilePort_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner}
     */
    getOrganizationConfigTemplateSwitchProfilePort_0(organizationId, configTemplateId, profileId, portId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationConfigTemplateSwitchProfilePort_0");
      }
      // verify the required parameter 'configTemplateId' is set
      if (configTemplateId === undefined || configTemplateId === null) {
        throw new Error("Missing the required parameter 'configTemplateId' when calling getOrganizationConfigTemplateSwitchProfilePort_0");
      }
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling getOrganizationConfigTemplateSwitchProfilePort_0");
      }
      // verify the required parameter 'portId' is set
      if (portId === undefined || portId === null) {
        throw new Error("Missing the required parameter 'portId' when calling getOrganizationConfigTemplateSwitchProfilePort_0");
      }

      let pathParams = {
        'organizationId': organizationId,
        'configTemplateId': configTemplateId,
        'profileId': profileId,
        'portId': portId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/configTemplates/{configTemplateId}/switch/profiles/{profileId}/ports/{portId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationConfigTemplateSwitchProfilePorts_0 operation.
     * @callback module:api/ConfigureApi~getOrganizationConfigTemplateSwitchProfilePorts_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return all the ports of a switch profile
     * Return all the ports of a switch profile
     * @param {String} organizationId 
     * @param {String} configTemplateId 
     * @param {String} profileId 
     * @param {module:api/ConfigureApi~getOrganizationConfigTemplateSwitchProfilePorts_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner>}
     */
    getOrganizationConfigTemplateSwitchProfilePorts_0(organizationId, configTemplateId, profileId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationConfigTemplateSwitchProfilePorts_0");
      }
      // verify the required parameter 'configTemplateId' is set
      if (configTemplateId === undefined || configTemplateId === null) {
        throw new Error("Missing the required parameter 'configTemplateId' when calling getOrganizationConfigTemplateSwitchProfilePorts_0");
      }
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling getOrganizationConfigTemplateSwitchProfilePorts_0");
      }

      let pathParams = {
        'organizationId': organizationId,
        'configTemplateId': configTemplateId,
        'profileId': profileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/configTemplates/{configTemplateId}/switch/profiles/{profileId}/ports', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationConfigTemplateSwitchProfiles_0 operation.
     * @callback module:api/ConfigureApi~getOrganizationConfigTemplateSwitchProfiles_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizationConfigTemplateSwitchProfiles200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the switch profiles for your switch template configuration
     * List the switch profiles for your switch template configuration
     * @param {String} organizationId 
     * @param {String} configTemplateId 
     * @param {module:api/ConfigureApi~getOrganizationConfigTemplateSwitchProfiles_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizationConfigTemplateSwitchProfiles200Response}
     */
    getOrganizationConfigTemplateSwitchProfiles_0(organizationId, configTemplateId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationConfigTemplateSwitchProfiles_0");
      }
      // verify the required parameter 'configTemplateId' is set
      if (configTemplateId === undefined || configTemplateId === null) {
        throw new Error("Missing the required parameter 'configTemplateId' when calling getOrganizationConfigTemplateSwitchProfiles_0");
      }

      let pathParams = {
        'organizationId': organizationId,
        'configTemplateId': configTemplateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOrganizationConfigTemplateSwitchProfiles200Response;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/configTemplates/{configTemplateId}/switch/profiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationConfigTemplate_0 operation.
     * @callback module:api/ConfigureApi~getOrganizationConfigTemplate_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a single configuration template
     * Return a single configuration template
     * @param {String} organizationId 
     * @param {String} configTemplateId 
     * @param {module:api/ConfigureApi~getOrganizationConfigTemplate_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getOrganizationConfigTemplate_0(organizationId, configTemplateId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationConfigTemplate_0");
      }
      // verify the required parameter 'configTemplateId' is set
      if (configTemplateId === undefined || configTemplateId === null) {
        throw new Error("Missing the required parameter 'configTemplateId' when calling getOrganizationConfigTemplate_0");
      }

      let pathParams = {
        'organizationId': organizationId,
        'configTemplateId': configTemplateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/configTemplates/{configTemplateId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationConfigTemplates_0 operation.
     * @callback module:api/ConfigureApi~getOrganizationConfigTemplates_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the configuration templates for this organization
     * List the configuration templates for this organization
     * @param {String} organizationId 
     * @param {module:api/ConfigureApi~getOrganizationConfigTemplates_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getOrganizationConfigTemplates_0(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationConfigTemplates_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/configTemplates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationDevices_0 operation.
     * @callback module:api/ConfigureApi~getOrganizationDevices_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationDevices200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the devices in an organization
     * List the devices in an organization
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [configurationUpdatedAfter] Filter results by whether or not the device's configuration has been updated after the given timestamp
     * @param {Array.<String>} [networkIds] Optional parameter to filter devices by network.
     * @param {Array.<module:model/String>} [productTypes] Optional parameter to filter devices by product type. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, and sensor.
     * @param {Array.<String>} [tags] Optional parameter to filter devices by tags.
     * @param {module:model/String} [tagsFilterType] Optional parameter of value 'withAnyTags' or 'withAllTags' to indicate whether to return networks which contain ANY or ALL of the included tags. If no type is included, 'withAnyTags' will be selected.
     * @param {String} [name] Optional parameter to filter devices by name. All returned devices will have a name that contains the search term or is an exact match.
     * @param {String} [mac] Optional parameter to filter devices by MAC address. All returned devices will have a MAC address that contains the search term or is an exact match.
     * @param {String} [serial] Optional parameter to filter devices by serial number. All returned devices will have a serial number that contains the search term or is an exact match.
     * @param {String} [model] Optional parameter to filter devices by model. All returned devices will have a model that contains the search term or is an exact match.
     * @param {Array.<String>} [macs] Optional parameter to filter devices by one or more MAC addresses. All returned devices will have a MAC address that is an exact match.
     * @param {Array.<String>} [serials] Optional parameter to filter devices by one or more serial numbers. All returned devices will have a serial number that is an exact match.
     * @param {Array.<String>} [sensorMetrics] Optional parameter to filter devices by the metrics that they provide. Only applies to sensor devices.
     * @param {Array.<String>} [sensorAlertProfileIds] Optional parameter to filter devices by the alert profiles that are bound to them. Only applies to sensor devices.
     * @param {Array.<String>} [models] Optional parameter to filter devices by one or more models. All returned devices will have a model that is an exact match.
     * @param {module:api/ConfigureApi~getOrganizationDevices_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationDevices200ResponseInner>}
     */
    getOrganizationDevices_0(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationDevices_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        'configurationUpdatedAfter': opts['configurationUpdatedAfter'],
        'networkIds': this.apiClient.buildCollectionParam(opts['networkIds'], 'csv'),
        'productTypes': this.apiClient.buildCollectionParam(opts['productTypes'], 'csv'),
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'csv'),
        'tagsFilterType': opts['tagsFilterType'],
        'name': opts['name'],
        'mac': opts['mac'],
        'serial': opts['serial'],
        'model': opts['model'],
        'macs': this.apiClient.buildCollectionParam(opts['macs'], 'csv'),
        'serials': this.apiClient.buildCollectionParam(opts['serials'], 'csv'),
        'sensorMetrics': this.apiClient.buildCollectionParam(opts['sensorMetrics'], 'csv'),
        'sensorAlertProfileIds': this.apiClient.buildCollectionParam(opts['sensorAlertProfileIds'], 'csv'),
        'models': this.apiClient.buildCollectionParam(opts['models'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationDevices200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/devices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationEarlyAccessFeaturesOptIn_0 operation.
     * @callback module:api/ConfigureApi~getOrganizationEarlyAccessFeaturesOptIn_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show an early access feature opt-in for an organization
     * Show an early access feature opt-in for an organization
     * @param {String} organizationId 
     * @param {String} optInId 
     * @param {module:api/ConfigureApi~getOrganizationEarlyAccessFeaturesOptIn_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getOrganizationEarlyAccessFeaturesOptIn_0(organizationId, optInId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationEarlyAccessFeaturesOptIn_0");
      }
      // verify the required parameter 'optInId' is set
      if (optInId === undefined || optInId === null) {
        throw new Error("Missing the required parameter 'optInId' when calling getOrganizationEarlyAccessFeaturesOptIn_0");
      }

      let pathParams = {
        'organizationId': organizationId,
        'optInId': optInId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/earlyAccess/features/optIns/{optInId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationEarlyAccessFeaturesOptIns_0 operation.
     * @callback module:api/ConfigureApi~getOrganizationEarlyAccessFeaturesOptIns_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the early access feature opt-ins for an organization
     * List the early access feature opt-ins for an organization
     * @param {String} organizationId 
     * @param {module:api/ConfigureApi~getOrganizationEarlyAccessFeaturesOptIns_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getOrganizationEarlyAccessFeaturesOptIns_0(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationEarlyAccessFeaturesOptIns_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/earlyAccess/features/optIns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationEarlyAccessFeatures_0 operation.
     * @callback module:api/ConfigureApi~getOrganizationEarlyAccessFeatures_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the available early access features for organization
     * List the available early access features for organization
     * @param {String} organizationId 
     * @param {module:api/ConfigureApi~getOrganizationEarlyAccessFeatures_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getOrganizationEarlyAccessFeatures_0(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationEarlyAccessFeatures_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/earlyAccess/features', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationFirmwareUpgradesByDevice_0 operation.
     * @callback module:api/ConfigureApi~getOrganizationFirmwareUpgradesByDevice_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationFirmwareUpgradesByDevice200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get firmware upgrade status for the filtered devices
     * Get firmware upgrade status for the filtered devices
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 50. Default is 50.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {Array.<String>} [networkIds] Optional parameter to filter by network
     * @param {Array.<String>} [serials] Optional parameter to filter by serial number.  All returned devices will have a serial number that is an exact match.
     * @param {Array.<String>} [macs] Optional parameter to filter by one or more MAC addresses belonging to devices. All devices returned belong to MAC addresses that are an exact match.
     * @param {Array.<String>} [firmwareUpgradeIds] Optional parameter to filter by firmware upgrade ids.
     * @param {Array.<String>} [firmwareUpgradeBatchIds] Optional parameter to filter by firmware upgrade batch ids.
     * @param {module:api/ConfigureApi~getOrganizationFirmwareUpgradesByDevice_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationFirmwareUpgradesByDevice200ResponseInner>}
     */
    getOrganizationFirmwareUpgradesByDevice_0(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationFirmwareUpgradesByDevice_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        'networkIds': this.apiClient.buildCollectionParam(opts['networkIds'], 'csv'),
        'serials': this.apiClient.buildCollectionParam(opts['serials'], 'csv'),
        'macs': this.apiClient.buildCollectionParam(opts['macs'], 'csv'),
        'firmwareUpgradeIds': this.apiClient.buildCollectionParam(opts['firmwareUpgradeIds'], 'csv'),
        'firmwareUpgradeBatchIds': this.apiClient.buildCollectionParam(opts['firmwareUpgradeBatchIds'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationFirmwareUpgradesByDevice200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/firmware/upgrades/byDevice', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationFirmwareUpgrades_0 operation.
     * @callback module:api/ConfigureApi~getOrganizationFirmwareUpgrades_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationFirmwareUpgrades200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get firmware upgrade information for an organization
     * Get firmware upgrade information for an organization
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [status] The status of an upgrade 
     * @param {Array.<String>} [productType] The product type in a given upgrade ID
     * @param {module:api/ConfigureApi~getOrganizationFirmwareUpgrades_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationFirmwareUpgrades200ResponseInner>}
     */
    getOrganizationFirmwareUpgrades_0(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationFirmwareUpgrades_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'status': this.apiClient.buildCollectionParam(opts['status'], 'csv'),
        'productType': this.apiClient.buildCollectionParam(opts['productType'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationFirmwareUpgrades200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/firmware/upgrades', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationInsightApplications_0 operation.
     * @callback module:api/ConfigureApi~getOrganizationInsightApplications_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationInsightApplications200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all Insight tracked applications
     * List all Insight tracked applications
     * @param {String} organizationId 
     * @param {module:api/ConfigureApi~getOrganizationInsightApplications_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationInsightApplications200ResponseInner>}
     */
    getOrganizationInsightApplications_0(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationInsightApplications_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationInsightApplications200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/insight/applications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationInsightMonitoredMediaServer_0 operation.
     * @callback module:api/ConfigureApi~getOrganizationInsightMonitoredMediaServer_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a monitored media server for this organization
     * Return a monitored media server for this organization. Only valid for organizations with Meraki Insight.
     * @param {String} organizationId 
     * @param {String} monitoredMediaServerId 
     * @param {module:api/ConfigureApi~getOrganizationInsightMonitoredMediaServer_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getOrganizationInsightMonitoredMediaServer_0(organizationId, monitoredMediaServerId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationInsightMonitoredMediaServer_0");
      }
      // verify the required parameter 'monitoredMediaServerId' is set
      if (monitoredMediaServerId === undefined || monitoredMediaServerId === null) {
        throw new Error("Missing the required parameter 'monitoredMediaServerId' when calling getOrganizationInsightMonitoredMediaServer_0");
      }

      let pathParams = {
        'organizationId': organizationId,
        'monitoredMediaServerId': monitoredMediaServerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/insight/monitoredMediaServers/{monitoredMediaServerId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationInsightMonitoredMediaServers_0 operation.
     * @callback module:api/ConfigureApi~getOrganizationInsightMonitoredMediaServers_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationInsightMonitoredMediaServers200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the monitored media servers for this organization
     * List the monitored media servers for this organization. Only valid for organizations with Meraki Insight.
     * @param {String} organizationId 
     * @param {module:api/ConfigureApi~getOrganizationInsightMonitoredMediaServers_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationInsightMonitoredMediaServers200ResponseInner>}
     */
    getOrganizationInsightMonitoredMediaServers_0(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationInsightMonitoredMediaServers_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationInsightMonitoredMediaServers200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/insight/monitoredMediaServers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationInventoryDevice_0 operation.
     * @callback module:api/ConfigureApi~getOrganizationInventoryDevice_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizationInventoryDevices200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a single device from the inventory of an organization
     * Return a single device from the inventory of an organization
     * @param {String} organizationId 
     * @param {String} serial 
     * @param {module:api/ConfigureApi~getOrganizationInventoryDevice_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizationInventoryDevices200ResponseInner}
     */
    getOrganizationInventoryDevice_0(organizationId, serial, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationInventoryDevice_0");
      }
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getOrganizationInventoryDevice_0");
      }

      let pathParams = {
        'organizationId': organizationId,
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOrganizationInventoryDevices200ResponseInner;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/inventory/devices/{serial}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationInventoryDevices_0 operation.
     * @callback module:api/ConfigureApi~getOrganizationInventoryDevices_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationInventoryDevices200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the device inventory for an organization
     * Return the device inventory for an organization
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:model/String} [usedState] Filter results by used or unused inventory. Accepted values are 'used' or 'unused'.
     * @param {String} [search] Search for devices in inventory based on serial number, mac address, or model.
     * @param {Array.<String>} [macs] Search for devices in inventory based on mac addresses.
     * @param {Array.<String>} [networkIds] Search for devices in inventory based on network ids.
     * @param {Array.<String>} [serials] Search for devices in inventory based on serials.
     * @param {Array.<String>} [models] Search for devices in inventory based on model.
     * @param {Array.<String>} [orderNumbers] Search for devices in inventory based on order numbers.
     * @param {Array.<String>} [tags] Filter devices by tags. The filtering is case-sensitive. If tags are included, 'tagsFilterType' should also be included (see below).
     * @param {module:model/String} [tagsFilterType] To use with 'tags' parameter, to filter devices which contain ANY or ALL given tags. Accepted values are 'withAnyTags' or 'withAllTags', default is 'withAnyTags'.
     * @param {Array.<module:model/String>} [productTypes] Filter devices by product type. Accepted values are appliance, camera, cellularGateway, sensor, switch, systemsManager, and wireless.
     * @param {module:api/ConfigureApi~getOrganizationInventoryDevices_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationInventoryDevices200ResponseInner>}
     */
    getOrganizationInventoryDevices_0(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationInventoryDevices_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        'usedState': opts['usedState'],
        'search': opts['search'],
        'macs': this.apiClient.buildCollectionParam(opts['macs'], 'csv'),
        'networkIds': this.apiClient.buildCollectionParam(opts['networkIds'], 'csv'),
        'serials': this.apiClient.buildCollectionParam(opts['serials'], 'csv'),
        'models': this.apiClient.buildCollectionParam(opts['models'], 'csv'),
        'orderNumbers': this.apiClient.buildCollectionParam(opts['orderNumbers'], 'csv'),
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'csv'),
        'tagsFilterType': opts['tagsFilterType'],
        'productTypes': this.apiClient.buildCollectionParam(opts['productTypes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationInventoryDevices200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/inventory/devices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationInventoryOnboardingCloudMonitoringImports_0 operation.
     * @callback module:api/ConfigureApi~getOrganizationInventoryOnboardingCloudMonitoringImports_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check the status of a committed Import operation
     * Check the status of a committed Import operation
     * @param {String} organizationId 
     * @param {Array.<String>} importIds import ids from an imports
     * @param {module:api/ConfigureApi~getOrganizationInventoryOnboardingCloudMonitoringImports_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner>}
     */
    getOrganizationInventoryOnboardingCloudMonitoringImports_0(organizationId, importIds, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationInventoryOnboardingCloudMonitoringImports_0");
      }
      // verify the required parameter 'importIds' is set
      if (importIds === undefined || importIds === null) {
        throw new Error("Missing the required parameter 'importIds' when calling getOrganizationInventoryOnboardingCloudMonitoringImports_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'importIds': this.apiClient.buildCollectionParam(importIds, 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/imports', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationInventoryOnboardingCloudMonitoringNetworks_0 operation.
     * @callback module:api/ConfigureApi~getOrganizationInventoryOnboardingCloudMonitoringNetworks_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetwork200Response>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list of networks eligible for adding cloud monitored device
     * Returns list of networks eligible for adding cloud monitored device
     * @param {String} organizationId 
     * @param {module:model/String} deviceType Device Type switch or wireless controller
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 100000. Default is 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:api/ConfigureApi~getOrganizationInventoryOnboardingCloudMonitoringNetworks_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetwork200Response>}
     */
    getOrganizationInventoryOnboardingCloudMonitoringNetworks_0(organizationId, deviceType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationInventoryOnboardingCloudMonitoringNetworks_0");
      }
      // verify the required parameter 'deviceType' is set
      if (deviceType === undefined || deviceType === null) {
        throw new Error("Missing the required parameter 'deviceType' when calling getOrganizationInventoryOnboardingCloudMonitoringNetworks_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'deviceType': deviceType,
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetwork200Response];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/networks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationLicense_0 operation.
     * @callback module:api/ConfigureApi~getOrganizationLicense_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizationLicenses200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Display a license
     * Display a license
     * @param {String} organizationId 
     * @param {String} licenseId 
     * @param {module:api/ConfigureApi~getOrganizationLicense_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizationLicenses200ResponseInner}
     */
    getOrganizationLicense_0(organizationId, licenseId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationLicense_0");
      }
      // verify the required parameter 'licenseId' is set
      if (licenseId === undefined || licenseId === null) {
        throw new Error("Missing the required parameter 'licenseId' when calling getOrganizationLicense_0");
      }

      let pathParams = {
        'organizationId': organizationId,
        'licenseId': licenseId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOrganizationLicenses200ResponseInner;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/licenses/{licenseId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationLicenses_0 operation.
     * @callback module:api/ConfigureApi~getOrganizationLicenses_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationLicenses200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the licenses for an organization
     * List the licenses for an organization
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [deviceSerial] Filter the licenses to those assigned to a particular device. Returned in the same order that they are queued to the device.
     * @param {String} [networkId] Filter the licenses to those assigned in a particular network
     * @param {module:model/String} [state] Filter the licenses to those in a particular state. Can be one of 'active', 'expired', 'expiring', 'recentlyQueued', 'unused' or 'unusedActive'
     * @param {module:api/ConfigureApi~getOrganizationLicenses_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationLicenses200ResponseInner>}
     */
    getOrganizationLicenses_0(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationLicenses_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        'deviceSerial': opts['deviceSerial'],
        'networkId': opts['networkId'],
        'state': opts['state']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationLicenses200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/licenses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationLicensingCotermLicenses_0 operation.
     * @callback module:api/ConfigureApi~getOrganizationLicensingCotermLicenses_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationLicensingCotermLicenses200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the licenses in a coterm organization
     * List the licenses in a coterm organization
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {Boolean} [invalidated] Filter for licenses that are invalidated
     * @param {Boolean} [expired] Filter for licenses that are expired
     * @param {module:api/ConfigureApi~getOrganizationLicensingCotermLicenses_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationLicensingCotermLicenses200ResponseInner>}
     */
    getOrganizationLicensingCotermLicenses_0(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationLicensingCotermLicenses_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        'invalidated': opts['invalidated'],
        'expired': opts['expired']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationLicensingCotermLicenses200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/licensing/coterm/licenses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationLoginSecurity_0 operation.
     * @callback module:api/ConfigureApi~getOrganizationLoginSecurity_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizationLoginSecurity200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the login security settings for an organization.
     * Returns the login security settings for an organization.
     * @param {String} organizationId 
     * @param {module:api/ConfigureApi~getOrganizationLoginSecurity_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizationLoginSecurity200Response}
     */
    getOrganizationLoginSecurity_0(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationLoginSecurity_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOrganizationLoginSecurity200Response;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/loginSecurity', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationNetworks_0 operation.
     * @callback module:api/ConfigureApi~getOrganizationNetworks_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetwork200Response>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the networks that the user has privileges on in an organization
     * List the networks that the user has privileges on in an organization
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {String} [configTemplateId] An optional parameter that is the ID of a config template. Will return all networks bound to that template.
     * @param {Boolean} [isBoundToConfigTemplate] An optional parameter to filter config template bound networks. If configTemplateId is set, this cannot be false.
     * @param {Array.<String>} [tags] An optional parameter to filter networks by tags. The filtering is case-sensitive. If tags are included, 'tagsFilterType' should also be included (see below).
     * @param {module:model/String} [tagsFilterType] An optional parameter of value 'withAnyTags' or 'withAllTags' to indicate whether to return networks which contain ANY or ALL of the included tags. If no type is included, 'withAnyTags' will be selected.
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 100000. Default is 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:api/ConfigureApi~getOrganizationNetworks_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetwork200Response>}
     */
    getOrganizationNetworks_0(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationNetworks_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'configTemplateId': opts['configTemplateId'],
        'isBoundToConfigTemplate': opts['isBoundToConfigTemplate'],
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'csv'),
        'tagsFilterType': opts['tagsFilterType'],
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetwork200Response];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/networks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationPolicyObject_0 operation.
     * @callback module:api/ConfigureApi~getOrganizationPolicyObject_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Shows details of a Policy Object.
     * Shows details of a Policy Object.
     * @param {String} organizationId 
     * @param {String} policyObjectId 
     * @param {module:api/ConfigureApi~getOrganizationPolicyObject_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getOrganizationPolicyObject_0(organizationId, policyObjectId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationPolicyObject_0");
      }
      // verify the required parameter 'policyObjectId' is set
      if (policyObjectId === undefined || policyObjectId === null) {
        throw new Error("Missing the required parameter 'policyObjectId' when calling getOrganizationPolicyObject_0");
      }

      let pathParams = {
        'organizationId': organizationId,
        'policyObjectId': policyObjectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/policyObjects/{policyObjectId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationPolicyObjectsGroup_0 operation.
     * @callback module:api/ConfigureApi~getOrganizationPolicyObjectsGroup_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Shows details of a Policy Object Group.
     * Shows details of a Policy Object Group.
     * @param {String} organizationId 
     * @param {String} policyObjectGroupId 
     * @param {module:api/ConfigureApi~getOrganizationPolicyObjectsGroup_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getOrganizationPolicyObjectsGroup_0(organizationId, policyObjectGroupId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationPolicyObjectsGroup_0");
      }
      // verify the required parameter 'policyObjectGroupId' is set
      if (policyObjectGroupId === undefined || policyObjectGroupId === null) {
        throw new Error("Missing the required parameter 'policyObjectGroupId' when calling getOrganizationPolicyObjectsGroup_0");
      }

      let pathParams = {
        'organizationId': organizationId,
        'policyObjectGroupId': policyObjectGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/policyObjects/groups/{policyObjectGroupId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationPolicyObjectsGroups_0 operation.
     * @callback module:api/ConfigureApi~getOrganizationPolicyObjectsGroups_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists Policy Object Groups belonging to the organization.
     * Lists Policy Object Groups belonging to the organization.
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 10 - 1000. Default is 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:api/ConfigureApi~getOrganizationPolicyObjectsGroups_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getOrganizationPolicyObjectsGroups_0(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationPolicyObjectsGroups_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/policyObjects/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationPolicyObjects_0 operation.
     * @callback module:api/ConfigureApi~getOrganizationPolicyObjects_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists Policy Objects belonging to the organization.
     * Lists Policy Objects belonging to the organization.
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 10 - 5000. Default is 5000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:api/ConfigureApi~getOrganizationPolicyObjects_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getOrganizationPolicyObjects_0(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationPolicyObjects_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/policyObjects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationSamlIdp_0 operation.
     * @callback module:api/ConfigureApi~getOrganizationSamlIdp_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizationSamlIdps200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a SAML IdP from your organization.
     * Get a SAML IdP from your organization.
     * @param {String} organizationId 
     * @param {String} idpId 
     * @param {module:api/ConfigureApi~getOrganizationSamlIdp_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizationSamlIdps200ResponseInner}
     */
    getOrganizationSamlIdp_0(organizationId, idpId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationSamlIdp_0");
      }
      // verify the required parameter 'idpId' is set
      if (idpId === undefined || idpId === null) {
        throw new Error("Missing the required parameter 'idpId' when calling getOrganizationSamlIdp_0");
      }

      let pathParams = {
        'organizationId': organizationId,
        'idpId': idpId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOrganizationSamlIdps200ResponseInner;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/saml/idps/{idpId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationSamlIdps_0 operation.
     * @callback module:api/ConfigureApi~getOrganizationSamlIdps_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationSamlIdps200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the SAML IdPs in your organization.
     * List the SAML IdPs in your organization.
     * @param {String} organizationId 
     * @param {module:api/ConfigureApi~getOrganizationSamlIdps_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationSamlIdps200ResponseInner>}
     */
    getOrganizationSamlIdps_0(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationSamlIdps_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationSamlIdps200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/saml/idps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationSamlRole_0 operation.
     * @callback module:api/ConfigureApi~getOrganizationSamlRole_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a SAML role
     * Return a SAML role
     * @param {String} organizationId 
     * @param {String} samlRoleId 
     * @param {module:api/ConfigureApi~getOrganizationSamlRole_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getOrganizationSamlRole_0(organizationId, samlRoleId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationSamlRole_0");
      }
      // verify the required parameter 'samlRoleId' is set
      if (samlRoleId === undefined || samlRoleId === null) {
        throw new Error("Missing the required parameter 'samlRoleId' when calling getOrganizationSamlRole_0");
      }

      let pathParams = {
        'organizationId': organizationId,
        'samlRoleId': samlRoleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/samlRoles/{samlRoleId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationSamlRoles_0 operation.
     * @callback module:api/ConfigureApi~getOrganizationSamlRoles_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the SAML roles for this organization
     * List the SAML roles for this organization
     * @param {String} organizationId 
     * @param {module:api/ConfigureApi~getOrganizationSamlRoles_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getOrganizationSamlRoles_0(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationSamlRoles_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/samlRoles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationSaml_0 operation.
     * @callback module:api/ConfigureApi~getOrganizationSaml_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizationSaml200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the SAML SSO enabled settings for an organization.
     * Returns the SAML SSO enabled settings for an organization.
     * @param {String} organizationId 
     * @param {module:api/ConfigureApi~getOrganizationSaml_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizationSaml200Response}
     */
    getOrganizationSaml_0(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationSaml_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOrganizationSaml200Response;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/saml', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationSmApnsCert_0 operation.
     * @callback module:api/ConfigureApi~getOrganizationSmApnsCert_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizationSmApnsCert200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the organization's APNS certificate
     * Get the organization's APNS certificate
     * @param {String} organizationId 
     * @param {module:api/ConfigureApi~getOrganizationSmApnsCert_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizationSmApnsCert200Response}
     */
    getOrganizationSmApnsCert_0(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationSmApnsCert_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOrganizationSmApnsCert200Response;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/sm/apnsCert', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationSmVppAccount_0 operation.
     * @callback module:api/ConfigureApi~getOrganizationSmVppAccount_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizationSmVppAccounts200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a hash containing the unparsed token of the VPP account with the given ID
     * Get a hash containing the unparsed token of the VPP account with the given ID
     * @param {String} organizationId 
     * @param {String} vppAccountId 
     * @param {module:api/ConfigureApi~getOrganizationSmVppAccount_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizationSmVppAccounts200ResponseInner}
     */
    getOrganizationSmVppAccount_0(organizationId, vppAccountId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationSmVppAccount_0");
      }
      // verify the required parameter 'vppAccountId' is set
      if (vppAccountId === undefined || vppAccountId === null) {
        throw new Error("Missing the required parameter 'vppAccountId' when calling getOrganizationSmVppAccount_0");
      }

      let pathParams = {
        'organizationId': organizationId,
        'vppAccountId': vppAccountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOrganizationSmVppAccounts200ResponseInner;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/sm/vppAccounts/{vppAccountId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationSmVppAccounts_0 operation.
     * @callback module:api/ConfigureApi~getOrganizationSmVppAccounts_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationSmVppAccounts200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the VPP accounts in the organization
     * List the VPP accounts in the organization
     * @param {String} organizationId 
     * @param {module:api/ConfigureApi~getOrganizationSmVppAccounts_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationSmVppAccounts200ResponseInner>}
     */
    getOrganizationSmVppAccounts_0(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationSmVppAccounts_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationSmVppAccounts200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/sm/vppAccounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationSnmp_0 operation.
     * @callback module:api/ConfigureApi~getOrganizationSnmp_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the SNMP settings for an organization
     * Return the SNMP settings for an organization
     * @param {String} organizationId 
     * @param {module:api/ConfigureApi~getOrganizationSnmp_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getOrganizationSnmp_0(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationSnmp_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/snmp', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationSwitchPortsBySwitch_0 operation.
     * @callback module:api/ConfigureApi~getOrganizationSwitchPortsBySwitch_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationSwitchPortsBySwitch200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the switchports in an organization by switch
     * List the switchports in an organization by switch
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 50. Default is 50.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {Array.<String>} [networkIds] Optional parameter to filter switchports by network.
     * @param {Array.<String>} [portProfileIds] Optional parameter to filter switchports belonging to the specified switchport profiles.
     * @param {String} [name] Optional parameter to filter switchports belonging to switches by name. All returned switches will have a name that contains the search term or is an exact match.
     * @param {String} [mac] Optional parameter to filter switchports belonging to switches by MAC address. All returned switches will have a MAC address that contains the search term or is an exact match.
     * @param {Array.<String>} [macs] Optional parameter to filter switchports by one or more MAC addresses belonging to devices. All switchports returned belong to MAC addresses of switches that are an exact match.
     * @param {String} [serial] Optional parameter to filter switchports belonging to switches by serial number. All returned switches will have a serial number that contains the search term or is an exact match.
     * @param {Array.<String>} [serials] Optional parameter to filter switchports belonging to switches with one or more serial numbers. All switchports returned belong to serial numbers of switches that are an exact match.
     * @param {String} [configurationUpdatedAfter] Optional parameter to filter results by switches where the configuration has been updated after the given timestamp.
     * @param {module:api/ConfigureApi~getOrganizationSwitchPortsBySwitch_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationSwitchPortsBySwitch200ResponseInner>}
     */
    getOrganizationSwitchPortsBySwitch_0(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationSwitchPortsBySwitch_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        'networkIds': this.apiClient.buildCollectionParam(opts['networkIds'], 'csv'),
        'portProfileIds': this.apiClient.buildCollectionParam(opts['portProfileIds'], 'csv'),
        'name': opts['name'],
        'mac': opts['mac'],
        'macs': this.apiClient.buildCollectionParam(opts['macs'], 'csv'),
        'serial': opts['serial'],
        'serials': this.apiClient.buildCollectionParam(opts['serials'], 'csv'),
        'configurationUpdatedAfter': opts['configurationUpdatedAfter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationSwitchPortsBySwitch200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/switch/ports/bySwitch', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationWirelessDevicesEthernetStatuses_0 operation.
     * @callback module:api/ConfigureApi~getOrganizationWirelessDevicesEthernetStatuses_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationWirelessDevicesEthernetStatuses200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Endpoint to see power status for wireless devices
     * Endpoint to see power status for wireless devices
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {Array.<String>} [networkIds] A list of Meraki network IDs to filter results to contain only specified networks. E.g.: networkIds[]=N_12345678&networkIds[]=L_3456
     * @param {module:api/ConfigureApi~getOrganizationWirelessDevicesEthernetStatuses_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationWirelessDevicesEthernetStatuses200ResponseInner>}
     */
    getOrganizationWirelessDevicesEthernetStatuses_0(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationWirelessDevicesEthernetStatuses_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        'networkIds': this.apiClient.buildCollectionParam(opts['networkIds'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationWirelessDevicesEthernetStatuses200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/wireless/devices/ethernet/statuses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganization_0 operation.
     * @callback module:api/ConfigureApi~getOrganization_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizations200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return an organization
     * Return an organization
     * @param {String} organizationId 
     * @param {module:api/ConfigureApi~getOrganization_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizations200ResponseInner}
     */
    getOrganization_0(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganization_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOrganizations200ResponseInner;
      return this.apiClient.callApi(
        '/organizations/{organizationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizations_0 operation.
     * @callback module:api/ConfigureApi~getOrganizations_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizations200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the organizations that the user has privileges on
     * List the organizations that the user has privileges on
     * @param {module:api/ConfigureApi~getOrganizations_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizations200ResponseInner>}
     */
    getOrganizations_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizations200ResponseInner];
      return this.apiClient.callApi(
        '/organizations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lockNetworkSmDevices_0 operation.
     * @callback module:api/ConfigureApi~lockNetworkSmDevices_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckinNetworkSmDevices200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lock a set of devices
     * Lock a set of devices
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/LockNetworkSmDevicesRequest} [lockNetworkSmDevicesRequest] 
     * @param {module:api/ConfigureApi~lockNetworkSmDevices_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckinNetworkSmDevices200Response}
     */
    lockNetworkSmDevices_0(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['lockNetworkSmDevicesRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling lockNetworkSmDevices_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CheckinNetworkSmDevices200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/devices/lock', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modifyNetworkSmDevicesTags_0 operation.
     * @callback module:api/ConfigureApi~modifyNetworkSmDevicesTags_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModifyNetworkSmDevicesTags200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add, delete, or update the tags of a set of devices
     * Add, delete, or update the tags of a set of devices
     * @param {String} networkId 
     * @param {module:model/ModifyNetworkSmDevicesTagsRequest} modifyNetworkSmDevicesTagsRequest 
     * @param {module:api/ConfigureApi~modifyNetworkSmDevicesTags_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModifyNetworkSmDevicesTags200ResponseInner>}
     */
    modifyNetworkSmDevicesTags_0(networkId, modifyNetworkSmDevicesTagsRequest, callback) {
      let postBody = modifyNetworkSmDevicesTagsRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling modifyNetworkSmDevicesTags_0");
      }
      // verify the required parameter 'modifyNetworkSmDevicesTagsRequest' is set
      if (modifyNetworkSmDevicesTagsRequest === undefined || modifyNetworkSmDevicesTagsRequest === null) {
        throw new Error("Missing the required parameter 'modifyNetworkSmDevicesTagsRequest' when calling modifyNetworkSmDevicesTags_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ModifyNetworkSmDevicesTags200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/devices/modifyTags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the moveNetworkSmDevices_0 operation.
     * @callback module:api/ConfigureApi~moveNetworkSmDevices_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/MoveNetworkSmDevices200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Move a set of devices to a new network
     * Move a set of devices to a new network
     * @param {String} networkId 
     * @param {module:model/MoveNetworkSmDevicesRequest} moveNetworkSmDevicesRequest 
     * @param {module:api/ConfigureApi~moveNetworkSmDevices_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MoveNetworkSmDevices200Response}
     */
    moveNetworkSmDevices_0(networkId, moveNetworkSmDevicesRequest, callback) {
      let postBody = moveNetworkSmDevicesRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling moveNetworkSmDevices_0");
      }
      // verify the required parameter 'moveNetworkSmDevicesRequest' is set
      if (moveNetworkSmDevicesRequest === undefined || moveNetworkSmDevicesRequest === null) {
        throw new Error("Missing the required parameter 'moveNetworkSmDevicesRequest' when calling moveNetworkSmDevices_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MoveNetworkSmDevices200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/devices/move', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the moveOrganizationLicensesSeats_0 operation.
     * @callback module:api/ConfigureApi~moveOrganizationLicensesSeats_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/MoveOrganizationLicensesSeats200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Move SM seats to another organization
     * Move SM seats to another organization
     * @param {String} organizationId 
     * @param {module:model/MoveOrganizationLicensesSeatsRequest} moveOrganizationLicensesSeatsRequest 
     * @param {module:api/ConfigureApi~moveOrganizationLicensesSeats_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MoveOrganizationLicensesSeats200Response}
     */
    moveOrganizationLicensesSeats_0(organizationId, moveOrganizationLicensesSeatsRequest, callback) {
      let postBody = moveOrganizationLicensesSeatsRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling moveOrganizationLicensesSeats_0");
      }
      // verify the required parameter 'moveOrganizationLicensesSeatsRequest' is set
      if (moveOrganizationLicensesSeatsRequest === undefined || moveOrganizationLicensesSeatsRequest === null) {
        throw new Error("Missing the required parameter 'moveOrganizationLicensesSeatsRequest' when calling moveOrganizationLicensesSeats_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MoveOrganizationLicensesSeats200Response;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/licenses/moveSeats', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the moveOrganizationLicenses_0 operation.
     * @callback module:api/ConfigureApi~moveOrganizationLicenses_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/MoveOrganizationLicenses200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Move licenses to another organization
     * Move licenses to another organization. This will also move any devices that the licenses are assigned to
     * @param {String} organizationId 
     * @param {module:model/MoveOrganizationLicensesRequest} moveOrganizationLicensesRequest 
     * @param {module:api/ConfigureApi~moveOrganizationLicenses_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MoveOrganizationLicenses200Response}
     */
    moveOrganizationLicenses_0(organizationId, moveOrganizationLicensesRequest, callback) {
      let postBody = moveOrganizationLicensesRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling moveOrganizationLicenses_0");
      }
      // verify the required parameter 'moveOrganizationLicensesRequest' is set
      if (moveOrganizationLicensesRequest === undefined || moveOrganizationLicensesRequest === null) {
        throw new Error("Missing the required parameter 'moveOrganizationLicensesRequest' when calling moveOrganizationLicenses_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MoveOrganizationLicenses200Response;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/licenses/move', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the moveOrganizationLicensingCotermLicenses_0 operation.
     * @callback module:api/ConfigureApi~moveOrganizationLicensingCotermLicenses_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/MoveOrganizationLicensingCotermLicenses200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Moves a license to a different organization (coterm only)
     * Moves a license to a different organization (coterm only)
     * @param {String} organizationId 
     * @param {module:model/MoveOrganizationLicensingCotermLicensesRequest} moveOrganizationLicensingCotermLicensesRequest 
     * @param {module:api/ConfigureApi~moveOrganizationLicensingCotermLicenses_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MoveOrganizationLicensingCotermLicenses200Response}
     */
    moveOrganizationLicensingCotermLicenses_0(organizationId, moveOrganizationLicensingCotermLicensesRequest, callback) {
      let postBody = moveOrganizationLicensingCotermLicensesRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling moveOrganizationLicensingCotermLicenses_0");
      }
      // verify the required parameter 'moveOrganizationLicensingCotermLicensesRequest' is set
      if (moveOrganizationLicensingCotermLicensesRequest === undefined || moveOrganizationLicensingCotermLicensesRequest === null) {
        throw new Error("Missing the required parameter 'moveOrganizationLicensingCotermLicensesRequest' when calling moveOrganizationLicensingCotermLicenses_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MoveOrganizationLicensingCotermLicenses200Response;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/licensing/coterm/licenses/move', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the provisionNetworkClients_0 operation.
     * @callback module:api/ConfigureApi~provisionNetworkClients_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provisions a client with a name and policy
     * Provisions a client with a name and policy. Clients can be provisioned before they associate to the network.
     * @param {String} networkId 
     * @param {module:model/ProvisionNetworkClientsRequest} provisionNetworkClientsRequest 
     * @param {module:api/ConfigureApi~provisionNetworkClients_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    provisionNetworkClients_0(networkId, provisionNetworkClientsRequest, callback) {
      let postBody = provisionNetworkClientsRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling provisionNetworkClients_0");
      }
      // verify the required parameter 'provisionNetworkClientsRequest' is set
      if (provisionNetworkClientsRequest === undefined || provisionNetworkClientsRequest === null) {
        throw new Error("Missing the required parameter 'provisionNetworkClientsRequest' when calling provisionNetworkClients_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/clients/provision', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the refreshNetworkSmDeviceDetails_0 operation.
     * @callback module:api/ConfigureApi~refreshNetworkSmDeviceDetails_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refresh the details of a device
     * Refresh the details of a device
     * @param {String} networkId 
     * @param {String} deviceId 
     * @param {module:api/ConfigureApi~refreshNetworkSmDeviceDetails_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    refreshNetworkSmDeviceDetails_0(networkId, deviceId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling refreshNetworkSmDeviceDetails_0");
      }
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling refreshNetworkSmDeviceDetails_0");
      }

      let pathParams = {
        'networkId': networkId,
        'deviceId': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/devices/{deviceId}/refreshDetails', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the releaseFromOrganizationInventory_0 operation.
     * @callback module:api/ConfigureApi~releaseFromOrganizationInventory_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Release a list of claimed devices from an organization.
     * Release a list of claimed devices from an organization.
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ReleaseFromOrganizationInventoryRequest} [releaseFromOrganizationInventoryRequest] 
     * @param {module:api/ConfigureApi~releaseFromOrganizationInventory_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    releaseFromOrganizationInventory_0(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = opts['releaseFromOrganizationInventoryRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling releaseFromOrganizationInventory_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/inventory/release', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeNetworkDevices_0 operation.
     * @callback module:api/ConfigureApi~removeNetworkDevices_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a single device
     * Remove a single device
     * @param {String} networkId 
     * @param {module:model/RemoveNetworkDevicesRequest} removeNetworkDevicesRequest 
     * @param {module:api/ConfigureApi~removeNetworkDevices_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    removeNetworkDevices_0(networkId, removeNetworkDevicesRequest, callback) {
      let postBody = removeNetworkDevicesRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling removeNetworkDevices_0");
      }
      // verify the required parameter 'removeNetworkDevicesRequest' is set
      if (removeNetworkDevicesRequest === undefined || removeNetworkDevicesRequest === null) {
        throw new Error("Missing the required parameter 'removeNetworkDevicesRequest' when calling removeNetworkDevices_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/devices/remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeNetworkSwitchStack_0 operation.
     * @callback module:api/ConfigureApi~removeNetworkSwitchStack_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a switch from a stack
     * Remove a switch from a stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {module:model/RemoveNetworkSwitchStackRequest} removeNetworkSwitchStackRequest 
     * @param {module:api/ConfigureApi~removeNetworkSwitchStack_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    removeNetworkSwitchStack_0(networkId, switchStackId, removeNetworkSwitchStackRequest, callback) {
      let postBody = removeNetworkSwitchStackRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling removeNetworkSwitchStack_0");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling removeNetworkSwitchStack_0");
      }
      // verify the required parameter 'removeNetworkSwitchStackRequest' is set
      if (removeNetworkSwitchStackRequest === undefined || removeNetworkSwitchStackRequest === null) {
        throw new Error("Missing the required parameter 'removeNetworkSwitchStackRequest' when calling removeNetworkSwitchStack_0");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the renewOrganizationLicensesSeats_0 operation.
     * @callback module:api/ConfigureApi~renewOrganizationLicensesSeats_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/AssignOrganizationLicensesSeats200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Renew SM seats of a license
     * Renew SM seats of a license. This will extend the license expiration date of managed SM devices covered by this license
     * @param {String} organizationId 
     * @param {module:model/RenewOrganizationLicensesSeatsRequest} renewOrganizationLicensesSeatsRequest 
     * @param {module:api/ConfigureApi~renewOrganizationLicensesSeats_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssignOrganizationLicensesSeats200Response}
     */
    renewOrganizationLicensesSeats_0(organizationId, renewOrganizationLicensesSeatsRequest, callback) {
      let postBody = renewOrganizationLicensesSeatsRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling renewOrganizationLicensesSeats_0");
      }
      // verify the required parameter 'renewOrganizationLicensesSeatsRequest' is set
      if (renewOrganizationLicensesSeatsRequest === undefined || renewOrganizationLicensesSeatsRequest === null) {
        throw new Error("Missing the required parameter 'renewOrganizationLicensesSeatsRequest' when calling renewOrganizationLicensesSeats_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssignOrganizationLicensesSeats200Response;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/licenses/renewSeats', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rollbacksNetworkFirmwareUpgradesStagedEvents_0 operation.
     * @callback module:api/ConfigureApi~rollbacksNetworkFirmwareUpgradesStagedEvents_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkFirmwareUpgradesStagedEvents200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rollback a Staged Upgrade Event for a network
     * Rollback a Staged Upgrade Event for a network
     * @param {String} networkId 
     * @param {module:model/RollbacksNetworkFirmwareUpgradesStagedEventsRequest} rollbacksNetworkFirmwareUpgradesStagedEventsRequest 
     * @param {module:api/ConfigureApi~rollbacksNetworkFirmwareUpgradesStagedEvents_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkFirmwareUpgradesStagedEvents200Response}
     */
    rollbacksNetworkFirmwareUpgradesStagedEvents_0(networkId, rollbacksNetworkFirmwareUpgradesStagedEventsRequest, callback) {
      let postBody = rollbacksNetworkFirmwareUpgradesStagedEventsRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling rollbacksNetworkFirmwareUpgradesStagedEvents_0");
      }
      // verify the required parameter 'rollbacksNetworkFirmwareUpgradesStagedEventsRequest' is set
      if (rollbacksNetworkFirmwareUpgradesStagedEventsRequest === undefined || rollbacksNetworkFirmwareUpgradesStagedEventsRequest === null) {
        throw new Error("Missing the required parameter 'rollbacksNetworkFirmwareUpgradesStagedEventsRequest' when calling rollbacksNetworkFirmwareUpgradesStagedEvents_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkFirmwareUpgradesStagedEvents200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/firmwareUpgrades/staged/events/rollbacks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the splitNetwork_0 operation.
     * @callback module:api/ConfigureApi~splitNetwork_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SplitNetwork200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Split a combined network into individual networks for each type of device
     * Split a combined network into individual networks for each type of device
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~splitNetwork_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SplitNetwork200Response}
     */
    splitNetwork_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling splitNetwork_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SplitNetwork200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/split', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the swapNetworkApplianceWarmSpare_0 operation.
     * @callback module:api/ConfigureApi~swapNetworkApplianceWarmSpare_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Swap MX primary and warm spare appliances
     * Swap MX primary and warm spare appliances
     * @param {String} networkId 
     * @param {module:api/ConfigureApi~swapNetworkApplianceWarmSpare_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    swapNetworkApplianceWarmSpare_0(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling swapNetworkApplianceWarmSpare_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/warmSpare/swap', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unbindNetwork_0 operation.
     * @callback module:api/ConfigureApi~unbindNetwork_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetwork200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unbind a network from a template.
     * Unbind a network from a template.
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UnbindNetworkRequest} [unbindNetworkRequest] 
     * @param {module:api/ConfigureApi~unbindNetwork_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetwork200Response}
     */
    unbindNetwork_0(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['unbindNetworkRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling unbindNetwork_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetwork200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/unbind', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unenrollNetworkSmDevice_0 operation.
     * @callback module:api/ConfigureApi~unenrollNetworkSmDevice_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unenroll a device
     * Unenroll a device
     * @param {String} networkId 
     * @param {String} deviceId 
     * @param {module:api/ConfigureApi~unenrollNetworkSmDevice_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    unenrollNetworkSmDevice_0(networkId, deviceId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling unenrollNetworkSmDevice_0");
      }
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling unenrollNetworkSmDevice_0");
      }

      let pathParams = {
        'networkId': networkId,
        'deviceId': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/devices/{deviceId}/unenroll', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeviceApplianceUplinksSettings_0 operation.
     * @callback module:api/ConfigureApi~updateDeviceApplianceUplinksSettings_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDeviceApplianceUplinksSettings200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the uplink settings for an MX appliance
     * Update the uplink settings for an MX appliance
     * @param {String} serial 
     * @param {module:model/UpdateDeviceApplianceUplinksSettingsRequest} updateDeviceApplianceUplinksSettingsRequest 
     * @param {module:api/ConfigureApi~updateDeviceApplianceUplinksSettings_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDeviceApplianceUplinksSettings200Response}
     */
    updateDeviceApplianceUplinksSettings_0(serial, updateDeviceApplianceUplinksSettingsRequest, callback) {
      let postBody = updateDeviceApplianceUplinksSettingsRequest;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling updateDeviceApplianceUplinksSettings_0");
      }
      // verify the required parameter 'updateDeviceApplianceUplinksSettingsRequest' is set
      if (updateDeviceApplianceUplinksSettingsRequest === undefined || updateDeviceApplianceUplinksSettingsRequest === null) {
        throw new Error("Missing the required parameter 'updateDeviceApplianceUplinksSettingsRequest' when calling updateDeviceApplianceUplinksSettings_0");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetDeviceApplianceUplinksSettings200Response;
      return this.apiClient.callApi(
        '/devices/{serial}/appliance/uplinks/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeviceCameraCustomAnalytics_0 operation.
     * @callback module:api/ConfigureApi~updateDeviceCameraCustomAnalytics_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update custom analytics settings for a camera
     * Update custom analytics settings for a camera
     * @param {String} serial 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateDeviceCameraCustomAnalyticsRequest} [updateDeviceCameraCustomAnalyticsRequest] 
     * @param {module:api/ConfigureApi~updateDeviceCameraCustomAnalytics_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateDeviceCameraCustomAnalytics_0(serial, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateDeviceCameraCustomAnalyticsRequest'];
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling updateDeviceCameraCustomAnalytics_0");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/camera/customAnalytics', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeviceCameraQualityAndRetention_0 operation.
     * @callback module:api/ConfigureApi~updateDeviceCameraQualityAndRetention_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update quality and retention settings for the given camera
     * Update quality and retention settings for the given camera
     * @param {String} serial 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateDeviceCameraQualityAndRetentionRequest} [updateDeviceCameraQualityAndRetentionRequest] 
     * @param {module:api/ConfigureApi~updateDeviceCameraQualityAndRetention_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateDeviceCameraQualityAndRetention_0(serial, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateDeviceCameraQualityAndRetentionRequest'];
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling updateDeviceCameraQualityAndRetention_0");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/camera/qualityAndRetention', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeviceCameraSense_0 operation.
     * @callback module:api/ConfigureApi~updateDeviceCameraSense_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update sense settings for the given camera
     * Update sense settings for the given camera
     * @param {String} serial 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateDeviceCameraSenseRequest} [updateDeviceCameraSenseRequest] 
     * @param {module:api/ConfigureApi~updateDeviceCameraSense_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateDeviceCameraSense_0(serial, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateDeviceCameraSenseRequest'];
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling updateDeviceCameraSense_0");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/camera/sense', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeviceCameraVideoSettings_0 operation.
     * @callback module:api/ConfigureApi~updateDeviceCameraVideoSettings_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update video settings for the given camera
     * Update video settings for the given camera
     * @param {String} serial 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateDeviceCameraVideoSettingsRequest} [updateDeviceCameraVideoSettingsRequest] 
     * @param {module:api/ConfigureApi~updateDeviceCameraVideoSettings_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateDeviceCameraVideoSettings_0(serial, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateDeviceCameraVideoSettingsRequest'];
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling updateDeviceCameraVideoSettings_0");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/camera/video/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeviceCameraWirelessProfiles_0 operation.
     * @callback module:api/ConfigureApi~updateDeviceCameraWirelessProfiles_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assign wireless profiles to the given camera
     * Assign wireless profiles to the given camera. Incremental updates are not supported, all profile assignment need to be supplied at once.
     * @param {String} serial 
     * @param {module:model/UpdateDeviceCameraWirelessProfilesRequest} updateDeviceCameraWirelessProfilesRequest 
     * @param {module:api/ConfigureApi~updateDeviceCameraWirelessProfiles_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateDeviceCameraWirelessProfiles_0(serial, updateDeviceCameraWirelessProfilesRequest, callback) {
      let postBody = updateDeviceCameraWirelessProfilesRequest;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling updateDeviceCameraWirelessProfiles_0");
      }
      // verify the required parameter 'updateDeviceCameraWirelessProfilesRequest' is set
      if (updateDeviceCameraWirelessProfilesRequest === undefined || updateDeviceCameraWirelessProfilesRequest === null) {
        throw new Error("Missing the required parameter 'updateDeviceCameraWirelessProfilesRequest' when calling updateDeviceCameraWirelessProfiles_0");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/camera/wirelessProfiles', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeviceCellularGatewayLan_0 operation.
     * @callback module:api/ConfigureApi~updateDeviceCellularGatewayLan_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the LAN Settings for a single MG.
     * Update the LAN Settings for a single MG.
     * @param {String} serial 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateDeviceCellularGatewayLanRequest} [updateDeviceCellularGatewayLanRequest] 
     * @param {module:api/ConfigureApi~updateDeviceCellularGatewayLan_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateDeviceCellularGatewayLan_0(serial, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateDeviceCellularGatewayLanRequest'];
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling updateDeviceCellularGatewayLan_0");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/cellularGateway/lan', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeviceCellularGatewayPortForwardingRules_0 operation.
     * @callback module:api/ConfigureApi~updateDeviceCellularGatewayPortForwardingRules_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the port forwarding rules for a single MG.
     * Updates the port forwarding rules for a single MG.
     * @param {String} serial 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateDeviceCellularGatewayPortForwardingRulesRequest} [updateDeviceCellularGatewayPortForwardingRulesRequest] 
     * @param {module:api/ConfigureApi~updateDeviceCellularGatewayPortForwardingRules_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateDeviceCellularGatewayPortForwardingRules_0(serial, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateDeviceCellularGatewayPortForwardingRulesRequest'];
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling updateDeviceCellularGatewayPortForwardingRules_0");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/cellularGateway/portForwardingRules', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeviceCellularSims_0 operation.
     * @callback module:api/ConfigureApi~updateDeviceCellularSims_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the SIM and APN configurations for a cellular device.
     * Updates the SIM and APN configurations for a cellular device.
     * @param {String} serial 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateDeviceCellularSimsRequest} [updateDeviceCellularSimsRequest] 
     * @param {module:api/ConfigureApi~updateDeviceCellularSims_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateDeviceCellularSims_0(serial, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateDeviceCellularSimsRequest'];
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling updateDeviceCellularSims_0");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/cellular/sims', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeviceManagementInterface_0 operation.
     * @callback module:api/ConfigureApi~updateDeviceManagementInterface_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the management interface settings for a device
     * Update the management interface settings for a device
     * @param {String} serial 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateDeviceManagementInterfaceRequest} [updateDeviceManagementInterfaceRequest] 
     * @param {module:api/ConfigureApi~updateDeviceManagementInterface_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateDeviceManagementInterface_0(serial, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateDeviceManagementInterfaceRequest'];
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling updateDeviceManagementInterface_0");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/managementInterface', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeviceSensorRelationships_0 operation.
     * @callback module:api/ConfigureApi~updateDeviceSensorRelationships_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDeviceSensorRelationships200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assign one or more sensor roles to a given sensor or camera device.
     * Assign one or more sensor roles to a given sensor or camera device.
     * @param {String} serial 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateDeviceSensorRelationshipsRequest} [updateDeviceSensorRelationshipsRequest] 
     * @param {module:api/ConfigureApi~updateDeviceSensorRelationships_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDeviceSensorRelationships200ResponseInner}
     */
    updateDeviceSensorRelationships_0(serial, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateDeviceSensorRelationshipsRequest'];
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling updateDeviceSensorRelationships_0");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetDeviceSensorRelationships200ResponseInner;
      return this.apiClient.callApi(
        '/devices/{serial}/sensor/relationships', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeviceSwitchPort_0 operation.
     * @callback module:api/ConfigureApi~updateDeviceSwitchPort_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDeviceSwitchPorts200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a switch port
     * Update a switch port
     * @param {String} serial 
     * @param {String} portId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateDeviceSwitchPortRequest} [updateDeviceSwitchPortRequest] 
     * @param {module:api/ConfigureApi~updateDeviceSwitchPort_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDeviceSwitchPorts200ResponseInner}
     */
    updateDeviceSwitchPort_0(serial, portId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateDeviceSwitchPortRequest'];
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling updateDeviceSwitchPort_0");
      }
      // verify the required parameter 'portId' is set
      if (portId === undefined || portId === null) {
        throw new Error("Missing the required parameter 'portId' when calling updateDeviceSwitchPort_0");
      }

      let pathParams = {
        'serial': serial,
        'portId': portId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetDeviceSwitchPorts200ResponseInner;
      return this.apiClient.callApi(
        '/devices/{serial}/switch/ports/{portId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeviceSwitchRoutingInterfaceDhcp_0 operation.
     * @callback module:api/ConfigureApi~updateDeviceSwitchRoutingInterfaceDhcp_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a layer 3 interface DHCP configuration for a switch
     * Update a layer 3 interface DHCP configuration for a switch
     * @param {String} serial 
     * @param {String} interfaceId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateDeviceSwitchRoutingInterfaceDhcpRequest} [updateDeviceSwitchRoutingInterfaceDhcpRequest] 
     * @param {module:api/ConfigureApi~updateDeviceSwitchRoutingInterfaceDhcp_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateDeviceSwitchRoutingInterfaceDhcp_0(serial, interfaceId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateDeviceSwitchRoutingInterfaceDhcpRequest'];
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling updateDeviceSwitchRoutingInterfaceDhcp_0");
      }
      // verify the required parameter 'interfaceId' is set
      if (interfaceId === undefined || interfaceId === null) {
        throw new Error("Missing the required parameter 'interfaceId' when calling updateDeviceSwitchRoutingInterfaceDhcp_0");
      }

      let pathParams = {
        'serial': serial,
        'interfaceId': interfaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/switch/routing/interfaces/{interfaceId}/dhcp', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeviceSwitchRoutingInterface_0 operation.
     * @callback module:api/ConfigureApi~updateDeviceSwitchRoutingInterface_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDeviceSwitchRoutingInterfaces200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a layer 3 interface for a switch
     * Update a layer 3 interface for a switch
     * @param {String} serial 
     * @param {String} interfaceId 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateDeviceSwitchRoutingInterfaceRequest} [createDeviceSwitchRoutingInterfaceRequest] 
     * @param {module:api/ConfigureApi~updateDeviceSwitchRoutingInterface_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDeviceSwitchRoutingInterfaces200ResponseInner}
     */
    updateDeviceSwitchRoutingInterface_0(serial, interfaceId, opts, callback) {
      opts = opts || {};
      let postBody = opts['createDeviceSwitchRoutingInterfaceRequest'];
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling updateDeviceSwitchRoutingInterface_0");
      }
      // verify the required parameter 'interfaceId' is set
      if (interfaceId === undefined || interfaceId === null) {
        throw new Error("Missing the required parameter 'interfaceId' when calling updateDeviceSwitchRoutingInterface_0");
      }

      let pathParams = {
        'serial': serial,
        'interfaceId': interfaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetDeviceSwitchRoutingInterfaces200ResponseInner;
      return this.apiClient.callApi(
        '/devices/{serial}/switch/routing/interfaces/{interfaceId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeviceSwitchRoutingStaticRoute_0 operation.
     * @callback module:api/ConfigureApi~updateDeviceSwitchRoutingStaticRoute_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a layer 3 static route for a switch
     * Update a layer 3 static route for a switch
     * @param {String} serial 
     * @param {String} staticRouteId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateDeviceSwitchRoutingStaticRouteRequest} [updateDeviceSwitchRoutingStaticRouteRequest] 
     * @param {module:api/ConfigureApi~updateDeviceSwitchRoutingStaticRoute_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateDeviceSwitchRoutingStaticRoute_0(serial, staticRouteId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateDeviceSwitchRoutingStaticRouteRequest'];
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling updateDeviceSwitchRoutingStaticRoute_0");
      }
      // verify the required parameter 'staticRouteId' is set
      if (staticRouteId === undefined || staticRouteId === null) {
        throw new Error("Missing the required parameter 'staticRouteId' when calling updateDeviceSwitchRoutingStaticRoute_0");
      }

      let pathParams = {
        'serial': serial,
        'staticRouteId': staticRouteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/switch/routing/staticRoutes/{staticRouteId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeviceSwitchWarmSpare_0 operation.
     * @callback module:api/ConfigureApi~updateDeviceSwitchWarmSpare_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update warm spare configuration for a switch
     * Update warm spare configuration for a switch. The spare will use the same L3 configuration as the primary. Note that this will irreversibly destroy any existing L3 configuration on the spare.
     * @param {String} serial 
     * @param {module:model/UpdateDeviceSwitchWarmSpareRequest} updateDeviceSwitchWarmSpareRequest 
     * @param {module:api/ConfigureApi~updateDeviceSwitchWarmSpare_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateDeviceSwitchWarmSpare_0(serial, updateDeviceSwitchWarmSpareRequest, callback) {
      let postBody = updateDeviceSwitchWarmSpareRequest;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling updateDeviceSwitchWarmSpare_0");
      }
      // verify the required parameter 'updateDeviceSwitchWarmSpareRequest' is set
      if (updateDeviceSwitchWarmSpareRequest === undefined || updateDeviceSwitchWarmSpareRequest === null) {
        throw new Error("Missing the required parameter 'updateDeviceSwitchWarmSpareRequest' when calling updateDeviceSwitchWarmSpare_0");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/switch/warmSpare', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeviceWirelessBluetoothSettings_0 operation.
     * @callback module:api/ConfigureApi~updateDeviceWirelessBluetoothSettings_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDeviceWirelessBluetoothSettings200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the bluetooth settings for a wireless device
     * Update the bluetooth settings for a wireless device
     * @param {String} serial 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateDeviceWirelessBluetoothSettingsRequest} [updateDeviceWirelessBluetoothSettingsRequest] 
     * @param {module:api/ConfigureApi~updateDeviceWirelessBluetoothSettings_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDeviceWirelessBluetoothSettings200Response}
     */
    updateDeviceWirelessBluetoothSettings_0(serial, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateDeviceWirelessBluetoothSettingsRequest'];
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling updateDeviceWirelessBluetoothSettings_0");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetDeviceWirelessBluetoothSettings200Response;
      return this.apiClient.callApi(
        '/devices/{serial}/wireless/bluetooth/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeviceWirelessRadioSettings_0 operation.
     * @callback module:api/ConfigureApi~updateDeviceWirelessRadioSettings_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the radio settings of a device
     * Update the radio settings of a device
     * @param {String} serial 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateDeviceWirelessRadioSettingsRequest} [updateDeviceWirelessRadioSettingsRequest] 
     * @param {module:api/ConfigureApi~updateDeviceWirelessRadioSettings_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateDeviceWirelessRadioSettings_0(serial, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateDeviceWirelessRadioSettingsRequest'];
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling updateDeviceWirelessRadioSettings_0");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/wireless/radio/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDevice_0 operation.
     * @callback module:api/ConfigureApi~updateDevice_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the attributes of a device
     * Update the attributes of a device
     * @param {String} serial 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateDeviceRequest} [updateDeviceRequest] 
     * @param {module:api/ConfigureApi~updateDevice_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateDevice_0(serial, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateDeviceRequest'];
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling updateDevice_0");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkAlertsSettings_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkAlertsSettings_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the alert configuration for this network
     * Update the alert configuration for this network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkAlertsSettingsRequest} [updateNetworkAlertsSettingsRequest] 
     * @param {module:api/ConfigureApi~updateNetworkAlertsSettings_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkAlertsSettings_0(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkAlertsSettingsRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkAlertsSettings_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/alerts/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceConnectivityMonitoringDestinations_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkApplianceConnectivityMonitoringDestinations_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the connectivity testing destinations for an MX network
     * Update the connectivity testing destinations for an MX network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkApplianceConnectivityMonitoringDestinationsRequest} [updateNetworkApplianceConnectivityMonitoringDestinationsRequest] 
     * @param {module:api/ConfigureApi~updateNetworkApplianceConnectivityMonitoringDestinations_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkApplianceConnectivityMonitoringDestinations_0(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkApplianceConnectivityMonitoringDestinationsRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceConnectivityMonitoringDestinations_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/connectivityMonitoringDestinations', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceContentFiltering_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkApplianceContentFiltering_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the content filtering settings for an MX network
     * Update the content filtering settings for an MX network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkApplianceContentFilteringRequest} [updateNetworkApplianceContentFilteringRequest] 
     * @param {module:api/ConfigureApi~updateNetworkApplianceContentFiltering_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkApplianceContentFiltering_0(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkApplianceContentFilteringRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceContentFiltering_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/contentFiltering', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceFirewallCellularFirewallRules_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkApplianceFirewallCellularFirewallRules_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the cellular firewall rules of an MX network
     * Update the cellular firewall rules of an MX network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkApplianceFirewallCellularFirewallRulesRequest} [updateNetworkApplianceFirewallCellularFirewallRulesRequest] 
     * @param {module:api/ConfigureApi~updateNetworkApplianceFirewallCellularFirewallRules_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkApplianceFirewallCellularFirewallRules_0(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkApplianceFirewallCellularFirewallRulesRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceFirewallCellularFirewallRules_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/cellularFirewallRules', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceFirewallFirewalledService_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkApplianceFirewallFirewalledService_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the accessibility settings for the given service ('ICMP', 'web', or 'SNMP')
     * Updates the accessibility settings for the given service ('ICMP', 'web', or 'SNMP')
     * @param {String} networkId 
     * @param {String} service 
     * @param {module:model/UpdateNetworkApplianceFirewallFirewalledServiceRequest} updateNetworkApplianceFirewallFirewalledServiceRequest 
     * @param {module:api/ConfigureApi~updateNetworkApplianceFirewallFirewalledService_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkApplianceFirewallFirewalledService_0(networkId, service, updateNetworkApplianceFirewallFirewalledServiceRequest, callback) {
      let postBody = updateNetworkApplianceFirewallFirewalledServiceRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceFirewallFirewalledService_0");
      }
      // verify the required parameter 'service' is set
      if (service === undefined || service === null) {
        throw new Error("Missing the required parameter 'service' when calling updateNetworkApplianceFirewallFirewalledService_0");
      }
      // verify the required parameter 'updateNetworkApplianceFirewallFirewalledServiceRequest' is set
      if (updateNetworkApplianceFirewallFirewalledServiceRequest === undefined || updateNetworkApplianceFirewallFirewalledServiceRequest === null) {
        throw new Error("Missing the required parameter 'updateNetworkApplianceFirewallFirewalledServiceRequest' when calling updateNetworkApplianceFirewallFirewalledService_0");
      }

      let pathParams = {
        'networkId': networkId,
        'service': service
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/firewalledServices/{service}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceFirewallInboundCellularFirewallRules_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkApplianceFirewallInboundCellularFirewallRules_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the inbound cellular firewall rules of an MX network
     * Update the inbound cellular firewall rules of an MX network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkApplianceFirewallCellularFirewallRulesRequest} [updateNetworkApplianceFirewallCellularFirewallRulesRequest] 
     * @param {module:api/ConfigureApi~updateNetworkApplianceFirewallInboundCellularFirewallRules_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    updateNetworkApplianceFirewallInboundCellularFirewallRules_0(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkApplianceFirewallCellularFirewallRulesRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceFirewallInboundCellularFirewallRules_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/inboundCellularFirewallRules', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceFirewallInboundFirewallRules_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkApplianceFirewallInboundFirewallRules_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the inbound firewall rules of an MX network
     * Update the inbound firewall rules of an MX network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkApplianceFirewallInboundFirewallRulesRequest} [updateNetworkApplianceFirewallInboundFirewallRulesRequest] 
     * @param {module:api/ConfigureApi~updateNetworkApplianceFirewallInboundFirewallRules_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkApplianceFirewallInboundFirewallRules_0(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkApplianceFirewallInboundFirewallRulesRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceFirewallInboundFirewallRules_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/inboundFirewallRules', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceFirewallL3FirewallRules_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkApplianceFirewallL3FirewallRules_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the L3 firewall rules of an MX network
     * Update the L3 firewall rules of an MX network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkApplianceFirewallInboundFirewallRulesRequest} [updateNetworkApplianceFirewallInboundFirewallRulesRequest] 
     * @param {module:api/ConfigureApi~updateNetworkApplianceFirewallL3FirewallRules_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkApplianceFirewallL3FirewallRules_0(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkApplianceFirewallInboundFirewallRulesRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceFirewallL3FirewallRules_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/l3FirewallRules', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceFirewallL7FirewallRules_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkApplianceFirewallL7FirewallRules_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the MX L7 firewall rules for an MX network
     * Update the MX L7 firewall rules for an MX network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkApplianceFirewallL7FirewallRulesRequest} [updateNetworkApplianceFirewallL7FirewallRulesRequest] 
     * @param {module:api/ConfigureApi~updateNetworkApplianceFirewallL7FirewallRules_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkApplianceFirewallL7FirewallRules_0(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkApplianceFirewallL7FirewallRulesRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceFirewallL7FirewallRules_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/l7FirewallRules', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceFirewallOneToManyNatRules_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkApplianceFirewallOneToManyNatRules_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the 1:Many NAT mapping rules for an MX network
     * Set the 1:Many NAT mapping rules for an MX network
     * @param {String} networkId 
     * @param {module:model/UpdateNetworkApplianceFirewallOneToManyNatRulesRequest} updateNetworkApplianceFirewallOneToManyNatRulesRequest 
     * @param {module:api/ConfigureApi~updateNetworkApplianceFirewallOneToManyNatRules_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkApplianceFirewallOneToManyNatRules_0(networkId, updateNetworkApplianceFirewallOneToManyNatRulesRequest, callback) {
      let postBody = updateNetworkApplianceFirewallOneToManyNatRulesRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceFirewallOneToManyNatRules_0");
      }
      // verify the required parameter 'updateNetworkApplianceFirewallOneToManyNatRulesRequest' is set
      if (updateNetworkApplianceFirewallOneToManyNatRulesRequest === undefined || updateNetworkApplianceFirewallOneToManyNatRulesRequest === null) {
        throw new Error("Missing the required parameter 'updateNetworkApplianceFirewallOneToManyNatRulesRequest' when calling updateNetworkApplianceFirewallOneToManyNatRules_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/oneToManyNatRules', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceFirewallOneToOneNatRules_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkApplianceFirewallOneToOneNatRules_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the 1:1 NAT mapping rules for an MX network
     * Set the 1:1 NAT mapping rules for an MX network
     * @param {String} networkId 
     * @param {module:model/UpdateNetworkApplianceFirewallOneToOneNatRulesRequest} updateNetworkApplianceFirewallOneToOneNatRulesRequest 
     * @param {module:api/ConfigureApi~updateNetworkApplianceFirewallOneToOneNatRules_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkApplianceFirewallOneToOneNatRules_0(networkId, updateNetworkApplianceFirewallOneToOneNatRulesRequest, callback) {
      let postBody = updateNetworkApplianceFirewallOneToOneNatRulesRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceFirewallOneToOneNatRules_0");
      }
      // verify the required parameter 'updateNetworkApplianceFirewallOneToOneNatRulesRequest' is set
      if (updateNetworkApplianceFirewallOneToOneNatRulesRequest === undefined || updateNetworkApplianceFirewallOneToOneNatRulesRequest === null) {
        throw new Error("Missing the required parameter 'updateNetworkApplianceFirewallOneToOneNatRulesRequest' when calling updateNetworkApplianceFirewallOneToOneNatRules_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/oneToOneNatRules', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceFirewallPortForwardingRules_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkApplianceFirewallPortForwardingRules_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the port forwarding rules for an MX network
     * Update the port forwarding rules for an MX network
     * @param {String} networkId 
     * @param {module:model/UpdateNetworkApplianceFirewallPortForwardingRulesRequest} updateNetworkApplianceFirewallPortForwardingRulesRequest 
     * @param {module:api/ConfigureApi~updateNetworkApplianceFirewallPortForwardingRules_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkApplianceFirewallPortForwardingRules_0(networkId, updateNetworkApplianceFirewallPortForwardingRulesRequest, callback) {
      let postBody = updateNetworkApplianceFirewallPortForwardingRulesRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceFirewallPortForwardingRules_0");
      }
      // verify the required parameter 'updateNetworkApplianceFirewallPortForwardingRulesRequest' is set
      if (updateNetworkApplianceFirewallPortForwardingRulesRequest === undefined || updateNetworkApplianceFirewallPortForwardingRulesRequest === null) {
        throw new Error("Missing the required parameter 'updateNetworkApplianceFirewallPortForwardingRulesRequest' when calling updateNetworkApplianceFirewallPortForwardingRules_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/portForwardingRules', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceFirewallSettings_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkApplianceFirewallSettings_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the firewall settings for this network
     * Update the firewall settings for this network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkApplianceFirewallSettingsRequest} [updateNetworkApplianceFirewallSettingsRequest] 
     * @param {module:api/ConfigureApi~updateNetworkApplianceFirewallSettings_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkApplianceFirewallSettings_0(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkApplianceFirewallSettingsRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceFirewallSettings_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkAppliancePort_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkAppliancePort_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkAppliancePorts200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the per-port VLAN settings for a single MX port.
     * Update the per-port VLAN settings for a single MX port.
     * @param {String} networkId 
     * @param {String} portId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkAppliancePortRequest} [updateNetworkAppliancePortRequest] 
     * @param {module:api/ConfigureApi~updateNetworkAppliancePort_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkAppliancePorts200ResponseInner}
     */
    updateNetworkAppliancePort_0(networkId, portId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkAppliancePortRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkAppliancePort_0");
      }
      // verify the required parameter 'portId' is set
      if (portId === undefined || portId === null) {
        throw new Error("Missing the required parameter 'portId' when calling updateNetworkAppliancePort_0");
      }

      let pathParams = {
        'networkId': networkId,
        'portId': portId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkAppliancePorts200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/ports/{portId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkAppliancePrefixesDelegatedStatic_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkAppliancePrefixesDelegatedStatic_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a static delegated prefix from a network
     * Update a static delegated prefix from a network
     * @param {String} networkId 
     * @param {String} staticDelegatedPrefixId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkAppliancePrefixesDelegatedStaticRequest} [updateNetworkAppliancePrefixesDelegatedStaticRequest] 
     * @param {module:api/ConfigureApi~updateNetworkAppliancePrefixesDelegatedStatic_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkAppliancePrefixesDelegatedStatic_0(networkId, staticDelegatedPrefixId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkAppliancePrefixesDelegatedStaticRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkAppliancePrefixesDelegatedStatic_0");
      }
      // verify the required parameter 'staticDelegatedPrefixId' is set
      if (staticDelegatedPrefixId === undefined || staticDelegatedPrefixId === null) {
        throw new Error("Missing the required parameter 'staticDelegatedPrefixId' when calling updateNetworkAppliancePrefixesDelegatedStatic_0");
      }

      let pathParams = {
        'networkId': networkId,
        'staticDelegatedPrefixId': staticDelegatedPrefixId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/prefixes/delegated/statics/{staticDelegatedPrefixId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceSecurityIntrusion_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkApplianceSecurityIntrusion_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the supported intrusion settings for an MX network
     * Set the supported intrusion settings for an MX network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkApplianceSecurityIntrusionRequest} [updateNetworkApplianceSecurityIntrusionRequest] 
     * @param {module:api/ConfigureApi~updateNetworkApplianceSecurityIntrusion_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkApplianceSecurityIntrusion_0(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkApplianceSecurityIntrusionRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceSecurityIntrusion_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/security/intrusion', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceSecurityMalware_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkApplianceSecurityMalware_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the supported malware settings for an MX network
     * Set the supported malware settings for an MX network
     * @param {String} networkId 
     * @param {module:model/UpdateNetworkApplianceSecurityMalwareRequest} updateNetworkApplianceSecurityMalwareRequest 
     * @param {module:api/ConfigureApi~updateNetworkApplianceSecurityMalware_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkApplianceSecurityMalware_0(networkId, updateNetworkApplianceSecurityMalwareRequest, callback) {
      let postBody = updateNetworkApplianceSecurityMalwareRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceSecurityMalware_0");
      }
      // verify the required parameter 'updateNetworkApplianceSecurityMalwareRequest' is set
      if (updateNetworkApplianceSecurityMalwareRequest === undefined || updateNetworkApplianceSecurityMalwareRequest === null) {
        throw new Error("Missing the required parameter 'updateNetworkApplianceSecurityMalwareRequest' when calling updateNetworkApplianceSecurityMalware_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/security/malware', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceSettings_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkApplianceSettings_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkApplianceSettings200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the appliance settings for a network
     * Update the appliance settings for a network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkApplianceSettingsRequest} [updateNetworkApplianceSettingsRequest] 
     * @param {module:api/ConfigureApi~updateNetworkApplianceSettings_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkApplianceSettings200Response}
     */
    updateNetworkApplianceSettings_0(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkApplianceSettingsRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceSettings_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkApplianceSettings200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceSingleLan_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkApplianceSingleLan_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkApplianceSingleLan200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update single LAN configuration
     * Update single LAN configuration
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkApplianceSingleLanRequest} [updateNetworkApplianceSingleLanRequest] 
     * @param {module:api/ConfigureApi~updateNetworkApplianceSingleLan_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkApplianceSingleLan200Response}
     */
    updateNetworkApplianceSingleLan_0(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkApplianceSingleLanRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceSingleLan_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkApplianceSingleLan200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/singleLan', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceSsid_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkApplianceSsid_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkApplianceSsids200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the attributes of an MX SSID
     * Update the attributes of an MX SSID
     * @param {String} networkId 
     * @param {String} number 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkApplianceSsidRequest} [updateNetworkApplianceSsidRequest] 
     * @param {module:api/ConfigureApi~updateNetworkApplianceSsid_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkApplianceSsids200ResponseInner}
     */
    updateNetworkApplianceSsid_0(networkId, number, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkApplianceSsidRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceSsid_0");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling updateNetworkApplianceSsid_0");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkApplianceSsids200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/ssids/{number}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceStaticRoute_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkApplianceStaticRoute_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a static route for an MX or teleworker network
     * Update a static route for an MX or teleworker network
     * @param {String} networkId 
     * @param {String} staticRouteId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkApplianceStaticRouteRequest} [updateNetworkApplianceStaticRouteRequest] 
     * @param {module:api/ConfigureApi~updateNetworkApplianceStaticRoute_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkApplianceStaticRoute_0(networkId, staticRouteId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkApplianceStaticRouteRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceStaticRoute_0");
      }
      // verify the required parameter 'staticRouteId' is set
      if (staticRouteId === undefined || staticRouteId === null) {
        throw new Error("Missing the required parameter 'staticRouteId' when calling updateNetworkApplianceStaticRoute_0");
      }

      let pathParams = {
        'networkId': networkId,
        'staticRouteId': staticRouteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/staticRoutes/{staticRouteId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceTrafficShapingCustomPerformanceClass_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkApplianceTrafficShapingCustomPerformanceClass_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a custom performance class for an MX network
     * Update a custom performance class for an MX network
     * @param {String} networkId 
     * @param {String} customPerformanceClassId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkApplianceTrafficShapingCustomPerformanceClassRequest} [updateNetworkApplianceTrafficShapingCustomPerformanceClassRequest] 
     * @param {module:api/ConfigureApi~updateNetworkApplianceTrafficShapingCustomPerformanceClass_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkApplianceTrafficShapingCustomPerformanceClass_0(networkId, customPerformanceClassId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkApplianceTrafficShapingCustomPerformanceClassRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceTrafficShapingCustomPerformanceClass_0");
      }
      // verify the required parameter 'customPerformanceClassId' is set
      if (customPerformanceClassId === undefined || customPerformanceClassId === null) {
        throw new Error("Missing the required parameter 'customPerformanceClassId' when calling updateNetworkApplianceTrafficShapingCustomPerformanceClass_0");
      }

      let pathParams = {
        'networkId': networkId,
        'customPerformanceClassId': customPerformanceClassId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/trafficShaping/customPerformanceClasses/{customPerformanceClassId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceTrafficShapingRules_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkApplianceTrafficShapingRules_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the traffic shaping settings rules for an MX network
     * Update the traffic shaping settings rules for an MX network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkApplianceTrafficShapingRulesRequest} [updateNetworkApplianceTrafficShapingRulesRequest] 
     * @param {module:api/ConfigureApi~updateNetworkApplianceTrafficShapingRules_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkApplianceTrafficShapingRules_0(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkApplianceTrafficShapingRulesRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceTrafficShapingRules_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/trafficShaping/rules', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceTrafficShapingUplinkBandwidth_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkApplianceTrafficShapingUplinkBandwidth_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the uplink bandwidth settings for your MX network.
     * Updates the uplink bandwidth settings for your MX network.
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkApplianceTrafficShapingUplinkBandwidthRequest} [updateNetworkApplianceTrafficShapingUplinkBandwidthRequest] 
     * @param {module:api/ConfigureApi~updateNetworkApplianceTrafficShapingUplinkBandwidth_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkApplianceTrafficShapingUplinkBandwidth_0(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkApplianceTrafficShapingUplinkBandwidthRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceTrafficShapingUplinkBandwidth_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/trafficShaping/uplinkBandwidth', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceTrafficShapingUplinkSelection_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkApplianceTrafficShapingUplinkSelection_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkApplianceTrafficShapingUplinkSelection200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update uplink selection settings for an MX network
     * Update uplink selection settings for an MX network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest} [updateNetworkApplianceTrafficShapingUplinkSelectionRequest] 
     * @param {module:api/ConfigureApi~updateNetworkApplianceTrafficShapingUplinkSelection_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkApplianceTrafficShapingUplinkSelection200Response}
     */
    updateNetworkApplianceTrafficShapingUplinkSelection_0(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkApplianceTrafficShapingUplinkSelectionRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceTrafficShapingUplinkSelection_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkApplianceTrafficShapingUplinkSelection200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/trafficShaping/uplinkSelection', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceTrafficShaping_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkApplianceTrafficShaping_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the traffic shaping settings for an MX network
     * Update the traffic shaping settings for an MX network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkApplianceTrafficShapingRequest} [updateNetworkApplianceTrafficShapingRequest] 
     * @param {module:api/ConfigureApi~updateNetworkApplianceTrafficShaping_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkApplianceTrafficShaping_0(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkApplianceTrafficShapingRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceTrafficShaping_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/trafficShaping', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceVlan_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkApplianceVlan_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkApplianceVlans200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a VLAN
     * Update a VLAN
     * @param {String} networkId 
     * @param {String} vlanId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkApplianceVlanRequest} [updateNetworkApplianceVlanRequest] 
     * @param {module:api/ConfigureApi~updateNetworkApplianceVlan_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkApplianceVlans200ResponseInner}
     */
    updateNetworkApplianceVlan_0(networkId, vlanId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkApplianceVlanRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceVlan_0");
      }
      // verify the required parameter 'vlanId' is set
      if (vlanId === undefined || vlanId === null) {
        throw new Error("Missing the required parameter 'vlanId' when calling updateNetworkApplianceVlan_0");
      }

      let pathParams = {
        'networkId': networkId,
        'vlanId': vlanId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkApplianceVlans200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/vlans/{vlanId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceVlansSettings_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkApplianceVlansSettings_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable/Disable VLANs for the given network
     * Enable/Disable VLANs for the given network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkApplianceVlansSettingsRequest} [updateNetworkApplianceVlansSettingsRequest] 
     * @param {module:api/ConfigureApi~updateNetworkApplianceVlansSettings_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkApplianceVlansSettings_0(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkApplianceVlansSettingsRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceVlansSettings_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/vlans/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceVpnBgp_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkApplianceVpnBgp_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Hub BGP Configuration
     * Update a Hub BGP Configuration
     * @param {String} networkId 
     * @param {module:model/UpdateNetworkApplianceVpnBgpRequest} updateNetworkApplianceVpnBgpRequest 
     * @param {module:api/ConfigureApi~updateNetworkApplianceVpnBgp_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkApplianceVpnBgp_0(networkId, updateNetworkApplianceVpnBgpRequest, callback) {
      let postBody = updateNetworkApplianceVpnBgpRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceVpnBgp_0");
      }
      // verify the required parameter 'updateNetworkApplianceVpnBgpRequest' is set
      if (updateNetworkApplianceVpnBgpRequest === undefined || updateNetworkApplianceVpnBgpRequest === null) {
        throw new Error("Missing the required parameter 'updateNetworkApplianceVpnBgpRequest' when calling updateNetworkApplianceVpnBgp_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/vpn/bgp', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceVpnSiteToSiteVpn_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkApplianceVpnSiteToSiteVpn_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkApplianceVpnSiteToSiteVpn200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the site-to-site VPN settings of a network
     * Update the site-to-site VPN settings of a network. Only valid for MX networks in NAT mode.
     * @param {String} networkId 
     * @param {module:model/UpdateNetworkApplianceVpnSiteToSiteVpnRequest} updateNetworkApplianceVpnSiteToSiteVpnRequest 
     * @param {module:api/ConfigureApi~updateNetworkApplianceVpnSiteToSiteVpn_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkApplianceVpnSiteToSiteVpn200Response}
     */
    updateNetworkApplianceVpnSiteToSiteVpn_0(networkId, updateNetworkApplianceVpnSiteToSiteVpnRequest, callback) {
      let postBody = updateNetworkApplianceVpnSiteToSiteVpnRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceVpnSiteToSiteVpn_0");
      }
      // verify the required parameter 'updateNetworkApplianceVpnSiteToSiteVpnRequest' is set
      if (updateNetworkApplianceVpnSiteToSiteVpnRequest === undefined || updateNetworkApplianceVpnSiteToSiteVpnRequest === null) {
        throw new Error("Missing the required parameter 'updateNetworkApplianceVpnSiteToSiteVpnRequest' when calling updateNetworkApplianceVpnSiteToSiteVpn_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkApplianceVpnSiteToSiteVpn200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/vpn/siteToSiteVpn', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceWarmSpare_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkApplianceWarmSpare_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update MX warm spare settings
     * Update MX warm spare settings
     * @param {String} networkId 
     * @param {module:model/UpdateNetworkApplianceWarmSpareRequest} updateNetworkApplianceWarmSpareRequest 
     * @param {module:api/ConfigureApi~updateNetworkApplianceWarmSpare_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkApplianceWarmSpare_0(networkId, updateNetworkApplianceWarmSpareRequest, callback) {
      let postBody = updateNetworkApplianceWarmSpareRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceWarmSpare_0");
      }
      // verify the required parameter 'updateNetworkApplianceWarmSpareRequest' is set
      if (updateNetworkApplianceWarmSpareRequest === undefined || updateNetworkApplianceWarmSpareRequest === null) {
        throw new Error("Missing the required parameter 'updateNetworkApplianceWarmSpareRequest' when calling updateNetworkApplianceWarmSpare_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/warmSpare', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkCameraQualityRetentionProfile_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkCameraQualityRetentionProfile_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing quality retention profile for this network.
     * Update an existing quality retention profile for this network.
     * @param {String} networkId 
     * @param {String} qualityRetentionProfileId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkCameraQualityRetentionProfileRequest} [updateNetworkCameraQualityRetentionProfileRequest] 
     * @param {module:api/ConfigureApi~updateNetworkCameraQualityRetentionProfile_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkCameraQualityRetentionProfile_0(networkId, qualityRetentionProfileId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkCameraQualityRetentionProfileRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkCameraQualityRetentionProfile_0");
      }
      // verify the required parameter 'qualityRetentionProfileId' is set
      if (qualityRetentionProfileId === undefined || qualityRetentionProfileId === null) {
        throw new Error("Missing the required parameter 'qualityRetentionProfileId' when calling updateNetworkCameraQualityRetentionProfile_0");
      }

      let pathParams = {
        'networkId': networkId,
        'qualityRetentionProfileId': qualityRetentionProfileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/camera/qualityRetentionProfiles/{qualityRetentionProfileId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkCameraWirelessProfile_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkCameraWirelessProfile_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing camera wireless profile in this network.
     * Update an existing camera wireless profile in this network.
     * @param {String} networkId 
     * @param {String} wirelessProfileId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkCameraWirelessProfileRequest} [updateNetworkCameraWirelessProfileRequest] 
     * @param {module:api/ConfigureApi~updateNetworkCameraWirelessProfile_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkCameraWirelessProfile_0(networkId, wirelessProfileId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkCameraWirelessProfileRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkCameraWirelessProfile_0");
      }
      // verify the required parameter 'wirelessProfileId' is set
      if (wirelessProfileId === undefined || wirelessProfileId === null) {
        throw new Error("Missing the required parameter 'wirelessProfileId' when calling updateNetworkCameraWirelessProfile_0");
      }

      let pathParams = {
        'networkId': networkId,
        'wirelessProfileId': wirelessProfileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/camera/wirelessProfiles/{wirelessProfileId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkCellularGatewayConnectivityMonitoringDestinations_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkCellularGatewayConnectivityMonitoringDestinations_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the connectivity testing destinations for an MG network
     * Update the connectivity testing destinations for an MG network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkCellularGatewayConnectivityMonitoringDestinationsRequest} [updateNetworkCellularGatewayConnectivityMonitoringDestinationsRequest] 
     * @param {module:api/ConfigureApi~updateNetworkCellularGatewayConnectivityMonitoringDestinations_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkCellularGatewayConnectivityMonitoringDestinations_0(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkCellularGatewayConnectivityMonitoringDestinationsRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkCellularGatewayConnectivityMonitoringDestinations_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/cellularGateway/connectivityMonitoringDestinations', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkCellularGatewayDhcp_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkCellularGatewayDhcp_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkCellularGatewayDhcp200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update common DHCP settings of MGs
     * Update common DHCP settings of MGs
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkCellularGatewayDhcpRequest} [updateNetworkCellularGatewayDhcpRequest] 
     * @param {module:api/ConfigureApi~updateNetworkCellularGatewayDhcp_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkCellularGatewayDhcp200Response}
     */
    updateNetworkCellularGatewayDhcp_0(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkCellularGatewayDhcpRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkCellularGatewayDhcp_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkCellularGatewayDhcp200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/cellularGateway/dhcp', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkCellularGatewaySubnetPool_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkCellularGatewaySubnetPool_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the subnet pool and mask configuration for MGs in the network.
     * Update the subnet pool and mask configuration for MGs in the network.
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkCellularGatewaySubnetPoolRequest} [updateNetworkCellularGatewaySubnetPoolRequest] 
     * @param {module:api/ConfigureApi~updateNetworkCellularGatewaySubnetPool_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkCellularGatewaySubnetPool_0(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkCellularGatewaySubnetPoolRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkCellularGatewaySubnetPool_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/cellularGateway/subnetPool', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkCellularGatewayUplink_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkCellularGatewayUplink_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the uplink settings for your MG network.
     * Updates the uplink settings for your MG network.
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkCellularGatewayUplinkRequest} [updateNetworkCellularGatewayUplinkRequest] 
     * @param {module:api/ConfigureApi~updateNetworkCellularGatewayUplink_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkCellularGatewayUplink_0(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkCellularGatewayUplinkRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkCellularGatewayUplink_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/cellularGateway/uplink', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkClientPolicy_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkClientPolicy_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the policy assigned to a client on the network
     * Update the policy assigned to a client on the network. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param {String} networkId 
     * @param {String} clientId 
     * @param {module:model/UpdateNetworkClientPolicyRequest} updateNetworkClientPolicyRequest 
     * @param {module:api/ConfigureApi~updateNetworkClientPolicy_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkClientPolicy_0(networkId, clientId, updateNetworkClientPolicyRequest, callback) {
      let postBody = updateNetworkClientPolicyRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkClientPolicy_0");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling updateNetworkClientPolicy_0");
      }
      // verify the required parameter 'updateNetworkClientPolicyRequest' is set
      if (updateNetworkClientPolicyRequest === undefined || updateNetworkClientPolicyRequest === null) {
        throw new Error("Missing the required parameter 'updateNetworkClientPolicyRequest' when calling updateNetworkClientPolicy_0");
      }

      let pathParams = {
        'networkId': networkId,
        'clientId': clientId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/clients/{clientId}/policy', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkClientSplashAuthorizationStatus_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkClientSplashAuthorizationStatus_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a client's splash authorization
     * Update a client's splash authorization. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param {String} networkId 
     * @param {String} clientId 
     * @param {module:model/UpdateNetworkClientSplashAuthorizationStatusRequest} updateNetworkClientSplashAuthorizationStatusRequest 
     * @param {module:api/ConfigureApi~updateNetworkClientSplashAuthorizationStatus_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkClientSplashAuthorizationStatus_0(networkId, clientId, updateNetworkClientSplashAuthorizationStatusRequest, callback) {
      let postBody = updateNetworkClientSplashAuthorizationStatusRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkClientSplashAuthorizationStatus_0");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling updateNetworkClientSplashAuthorizationStatus_0");
      }
      // verify the required parameter 'updateNetworkClientSplashAuthorizationStatusRequest' is set
      if (updateNetworkClientSplashAuthorizationStatusRequest === undefined || updateNetworkClientSplashAuthorizationStatusRequest === null) {
        throw new Error("Missing the required parameter 'updateNetworkClientSplashAuthorizationStatusRequest' when calling updateNetworkClientSplashAuthorizationStatus_0");
      }

      let pathParams = {
        'networkId': networkId,
        'clientId': clientId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/clients/{clientId}/splashAuthorizationStatus', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkFirmwareUpgradesStagedEvents_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkFirmwareUpgradesStagedEvents_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkFirmwareUpgradesStagedEvents200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the Staged Upgrade Event for a network
     * Update the Staged Upgrade Event for a network
     * @param {String} networkId 
     * @param {module:model/UpdateNetworkFirmwareUpgradesStagedEventsRequest} updateNetworkFirmwareUpgradesStagedEventsRequest 
     * @param {module:api/ConfigureApi~updateNetworkFirmwareUpgradesStagedEvents_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkFirmwareUpgradesStagedEvents200Response}
     */
    updateNetworkFirmwareUpgradesStagedEvents_0(networkId, updateNetworkFirmwareUpgradesStagedEventsRequest, callback) {
      let postBody = updateNetworkFirmwareUpgradesStagedEventsRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkFirmwareUpgradesStagedEvents_0");
      }
      // verify the required parameter 'updateNetworkFirmwareUpgradesStagedEventsRequest' is set
      if (updateNetworkFirmwareUpgradesStagedEventsRequest === undefined || updateNetworkFirmwareUpgradesStagedEventsRequest === null) {
        throw new Error("Missing the required parameter 'updateNetworkFirmwareUpgradesStagedEventsRequest' when calling updateNetworkFirmwareUpgradesStagedEvents_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkFirmwareUpgradesStagedEvents200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/firmwareUpgrades/staged/events', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkFirmwareUpgradesStagedGroup_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkFirmwareUpgradesStagedGroup_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Staged Upgrade Group for a network
     * Update a Staged Upgrade Group for a network
     * @param {String} networkId 
     * @param {String} groupId 
     * @param {module:model/CreateNetworkFirmwareUpgradesStagedGroupRequest} createNetworkFirmwareUpgradesStagedGroupRequest 
     * @param {module:api/ConfigureApi~updateNetworkFirmwareUpgradesStagedGroup_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkFirmwareUpgradesStagedGroup_0(networkId, groupId, createNetworkFirmwareUpgradesStagedGroupRequest, callback) {
      let postBody = createNetworkFirmwareUpgradesStagedGroupRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkFirmwareUpgradesStagedGroup_0");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling updateNetworkFirmwareUpgradesStagedGroup_0");
      }
      // verify the required parameter 'createNetworkFirmwareUpgradesStagedGroupRequest' is set
      if (createNetworkFirmwareUpgradesStagedGroupRequest === undefined || createNetworkFirmwareUpgradesStagedGroupRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkFirmwareUpgradesStagedGroupRequest' when calling updateNetworkFirmwareUpgradesStagedGroup_0");
      }

      let pathParams = {
        'networkId': networkId,
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/firmwareUpgrades/staged/groups/{groupId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkFirmwareUpgradesStagedStages_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkFirmwareUpgradesStagedStages_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkFirmwareUpgradesStagedStages200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assign Staged Upgrade Group order in the sequence.
     * Assign Staged Upgrade Group order in the sequence.
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkFirmwareUpgradesStagedStagesRequest} [updateNetworkFirmwareUpgradesStagedStagesRequest] 
     * @param {module:api/ConfigureApi~updateNetworkFirmwareUpgradesStagedStages_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkFirmwareUpgradesStagedStages200ResponseInner>}
     */
    updateNetworkFirmwareUpgradesStagedStages_0(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkFirmwareUpgradesStagedStagesRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkFirmwareUpgradesStagedStages_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [GetNetworkFirmwareUpgradesStagedStages200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/firmwareUpgrades/staged/stages', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkFirmwareUpgrades_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkFirmwareUpgrades_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkFirmwareUpgrades200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update firmware upgrade information for a network
     * Update firmware upgrade information for a network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkFirmwareUpgradesRequest} [updateNetworkFirmwareUpgradesRequest] 
     * @param {module:api/ConfigureApi~updateNetworkFirmwareUpgrades_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkFirmwareUpgrades200Response}
     */
    updateNetworkFirmwareUpgrades_0(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkFirmwareUpgradesRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkFirmwareUpgrades_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkFirmwareUpgrades200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/firmwareUpgrades', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkFloorPlan_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkFloorPlan_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a floor plan's geolocation and other meta data
     * Update a floor plan's geolocation and other meta data
     * @param {String} networkId 
     * @param {String} floorPlanId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkFloorPlanRequest} [updateNetworkFloorPlanRequest] 
     * @param {module:api/ConfigureApi~updateNetworkFloorPlan_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkFloorPlan_0(networkId, floorPlanId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkFloorPlanRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkFloorPlan_0");
      }
      // verify the required parameter 'floorPlanId' is set
      if (floorPlanId === undefined || floorPlanId === null) {
        throw new Error("Missing the required parameter 'floorPlanId' when calling updateNetworkFloorPlan_0");
      }

      let pathParams = {
        'networkId': networkId,
        'floorPlanId': floorPlanId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/floorPlans/{floorPlanId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkGroupPolicy_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkGroupPolicy_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a group policy
     * Update a group policy
     * @param {String} networkId 
     * @param {String} groupPolicyId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkGroupPolicyRequest} [updateNetworkGroupPolicyRequest] 
     * @param {module:api/ConfigureApi~updateNetworkGroupPolicy_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkGroupPolicy_0(networkId, groupPolicyId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkGroupPolicyRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkGroupPolicy_0");
      }
      // verify the required parameter 'groupPolicyId' is set
      if (groupPolicyId === undefined || groupPolicyId === null) {
        throw new Error("Missing the required parameter 'groupPolicyId' when calling updateNetworkGroupPolicy_0");
      }

      let pathParams = {
        'networkId': networkId,
        'groupPolicyId': groupPolicyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/groupPolicies/{groupPolicyId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkMerakiAuthUser_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkMerakiAuthUser_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkMerakiAuthUsers200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a user configured with Meraki Authentication (currently, 802.1X RADIUS, splash guest, and client VPN users can be updated)
     * Update a user configured with Meraki Authentication (currently, 802.1X RADIUS, splash guest, and client VPN users can be updated)
     * @param {String} networkId 
     * @param {String} merakiAuthUserId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkMerakiAuthUserRequest} [updateNetworkMerakiAuthUserRequest] 
     * @param {module:api/ConfigureApi~updateNetworkMerakiAuthUser_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkMerakiAuthUsers200ResponseInner}
     */
    updateNetworkMerakiAuthUser_0(networkId, merakiAuthUserId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkMerakiAuthUserRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkMerakiAuthUser_0");
      }
      // verify the required parameter 'merakiAuthUserId' is set
      if (merakiAuthUserId === undefined || merakiAuthUserId === null) {
        throw new Error("Missing the required parameter 'merakiAuthUserId' when calling updateNetworkMerakiAuthUser_0");
      }

      let pathParams = {
        'networkId': networkId,
        'merakiAuthUserId': merakiAuthUserId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkMerakiAuthUsers200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/merakiAuthUsers/{merakiAuthUserId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkMqttBroker_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkMqttBroker_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an MQTT broker
     * Update an MQTT broker
     * @param {String} networkId 
     * @param {String} mqttBrokerId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkMqttBrokerRequest} [updateNetworkMqttBrokerRequest] 
     * @param {module:api/ConfigureApi~updateNetworkMqttBroker_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkMqttBroker_0(networkId, mqttBrokerId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkMqttBrokerRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkMqttBroker_0");
      }
      // verify the required parameter 'mqttBrokerId' is set
      if (mqttBrokerId === undefined || mqttBrokerId === null) {
        throw new Error("Missing the required parameter 'mqttBrokerId' when calling updateNetworkMqttBroker_0");
      }

      let pathParams = {
        'networkId': networkId,
        'mqttBrokerId': mqttBrokerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/mqttBrokers/{mqttBrokerId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkNetflow_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkNetflow_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the NetFlow traffic reporting settings for a network
     * Update the NetFlow traffic reporting settings for a network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkNetflowRequest} [updateNetworkNetflowRequest] 
     * @param {module:api/ConfigureApi~updateNetworkNetflow_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkNetflow_0(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkNetflowRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkNetflow_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/netflow', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSensorAlertsProfile_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkSensorAlertsProfile_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkSensorAlertsProfiles200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a sensor alert profile for a network.
     * Updates a sensor alert profile for a network.
     * @param {String} networkId 
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkSensorAlertsProfileRequest} [updateNetworkSensorAlertsProfileRequest] 
     * @param {module:api/ConfigureApi~updateNetworkSensorAlertsProfile_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkSensorAlertsProfiles200ResponseInner}
     */
    updateNetworkSensorAlertsProfile_0(networkId, id, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkSensorAlertsProfileRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSensorAlertsProfile_0");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateNetworkSensorAlertsProfile_0");
      }

      let pathParams = {
        'networkId': networkId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkSensorAlertsProfiles200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/sensor/alerts/profiles/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSettings_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkSettings_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkSettings200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the settings for a network
     * Update the settings for a network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkSettingsRequest} [updateNetworkSettingsRequest] 
     * @param {module:api/ConfigureApi~updateNetworkSettings_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkSettings200Response}
     */
    updateNetworkSettings_0(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkSettingsRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSettings_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkSettings200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSmDevicesFields_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkSmDevicesFields_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UpdateNetworkSmDevicesFields200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify the fields of a device
     * Modify the fields of a device
     * @param {String} networkId 
     * @param {module:model/UpdateNetworkSmDevicesFieldsRequest} updateNetworkSmDevicesFieldsRequest 
     * @param {module:api/ConfigureApi~updateNetworkSmDevicesFields_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UpdateNetworkSmDevicesFields200ResponseInner>}
     */
    updateNetworkSmDevicesFields_0(networkId, updateNetworkSmDevicesFieldsRequest, callback) {
      let postBody = updateNetworkSmDevicesFieldsRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSmDevicesFields_0");
      }
      // verify the required parameter 'updateNetworkSmDevicesFieldsRequest' is set
      if (updateNetworkSmDevicesFieldsRequest === undefined || updateNetworkSmDevicesFieldsRequest === null) {
        throw new Error("Missing the required parameter 'updateNetworkSmDevicesFieldsRequest' when calling updateNetworkSmDevicesFields_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [UpdateNetworkSmDevicesFields200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/devices/fields', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSmTargetGroup_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkSmTargetGroup_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a target group
     * Update a target group
     * @param {String} networkId 
     * @param {String} targetGroupId 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateNetworkSmTargetGroupRequest} [createNetworkSmTargetGroupRequest] 
     * @param {module:api/ConfigureApi~updateNetworkSmTargetGroup_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkSmTargetGroup_0(networkId, targetGroupId, opts, callback) {
      opts = opts || {};
      let postBody = opts['createNetworkSmTargetGroupRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSmTargetGroup_0");
      }
      // verify the required parameter 'targetGroupId' is set
      if (targetGroupId === undefined || targetGroupId === null) {
        throw new Error("Missing the required parameter 'targetGroupId' when calling updateNetworkSmTargetGroup_0");
      }

      let pathParams = {
        'networkId': networkId,
        'targetGroupId': targetGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/targetGroups/{targetGroupId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSnmp_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkSnmp_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the SNMP settings for a network
     * Update the SNMP settings for a network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkSnmpRequest} [updateNetworkSnmpRequest] 
     * @param {module:api/ConfigureApi~updateNetworkSnmp_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkSnmp_0(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkSnmpRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSnmp_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/snmp', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSwitchAccessControlLists_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkSwitchAccessControlLists_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkSwitchAccessControlLists200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the access control lists for a MS network
     * Update the access control lists for a MS network
     * @param {String} networkId 
     * @param {module:model/UpdateNetworkSwitchAccessControlListsRequest} updateNetworkSwitchAccessControlListsRequest 
     * @param {module:api/ConfigureApi~updateNetworkSwitchAccessControlLists_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkSwitchAccessControlLists200Response}
     */
    updateNetworkSwitchAccessControlLists_0(networkId, updateNetworkSwitchAccessControlListsRequest, callback) {
      let postBody = updateNetworkSwitchAccessControlListsRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSwitchAccessControlLists_0");
      }
      // verify the required parameter 'updateNetworkSwitchAccessControlListsRequest' is set
      if (updateNetworkSwitchAccessControlListsRequest === undefined || updateNetworkSwitchAccessControlListsRequest === null) {
        throw new Error("Missing the required parameter 'updateNetworkSwitchAccessControlListsRequest' when calling updateNetworkSwitchAccessControlLists_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkSwitchAccessControlLists200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/accessControlLists', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSwitchAccessPolicy_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkSwitchAccessPolicy_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkSwitchAccessPolicies200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an access policy for a switch network
     * Update an access policy for a switch network. If you would like to enable Meraki Authentication, set radiusServers to empty array.
     * @param {String} networkId 
     * @param {String} accessPolicyNumber 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkSwitchAccessPolicyRequest} [updateNetworkSwitchAccessPolicyRequest] 
     * @param {module:api/ConfigureApi~updateNetworkSwitchAccessPolicy_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkSwitchAccessPolicies200ResponseInner}
     */
    updateNetworkSwitchAccessPolicy_0(networkId, accessPolicyNumber, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkSwitchAccessPolicyRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSwitchAccessPolicy_0");
      }
      // verify the required parameter 'accessPolicyNumber' is set
      if (accessPolicyNumber === undefined || accessPolicyNumber === null) {
        throw new Error("Missing the required parameter 'accessPolicyNumber' when calling updateNetworkSwitchAccessPolicy_0");
      }

      let pathParams = {
        'networkId': networkId,
        'accessPolicyNumber': accessPolicyNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkSwitchAccessPolicies200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/accessPolicies/{accessPolicyNumber}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSwitchAlternateManagementInterface_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkSwitchAlternateManagementInterface_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the switch alternate management interface for the network
     * Update the switch alternate management interface for the network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkSwitchAlternateManagementInterfaceRequest} [updateNetworkSwitchAlternateManagementInterfaceRequest] 
     * @param {module:api/ConfigureApi~updateNetworkSwitchAlternateManagementInterface_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkSwitchAlternateManagementInterface_0(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkSwitchAlternateManagementInterfaceRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSwitchAlternateManagementInterface_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/alternateManagementInterface', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a server that is trusted by Dynamic ARP Inspection on this network
     * Update a server that is trusted by Dynamic ARP Inspection on this network
     * @param {String} networkId 
     * @param {String} trustedServerId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest} [updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest] 
     * @param {module:api/ConfigureApi~updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner}
     */
    updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_0(networkId, trustedServerId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_0");
      }
      // verify the required parameter 'trustedServerId' is set
      if (trustedServerId === undefined || trustedServerId === null) {
        throw new Error("Missing the required parameter 'trustedServerId' when calling updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_0");
      }

      let pathParams = {
        'networkId': networkId,
        'trustedServerId': trustedServerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/dhcpServerPolicy/arpInspection/trustedServers/{trustedServerId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSwitchDhcpServerPolicy_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkSwitchDhcpServerPolicy_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the DHCP server settings
     * Update the DHCP server settings. Blocked/allowed servers are only applied when default policy is allow/block, respectively
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkSwitchDhcpServerPolicyRequest} [updateNetworkSwitchDhcpServerPolicyRequest] 
     * @param {module:api/ConfigureApi~updateNetworkSwitchDhcpServerPolicy_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkSwitchDhcpServerPolicy_0(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkSwitchDhcpServerPolicyRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSwitchDhcpServerPolicy_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/dhcpServerPolicy', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSwitchDscpToCosMappings_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkSwitchDscpToCosMappings_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the DSCP to CoS mappings
     * Update the DSCP to CoS mappings
     * @param {String} networkId 
     * @param {module:model/UpdateNetworkSwitchDscpToCosMappingsRequest} updateNetworkSwitchDscpToCosMappingsRequest 
     * @param {module:api/ConfigureApi~updateNetworkSwitchDscpToCosMappings_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkSwitchDscpToCosMappings_0(networkId, updateNetworkSwitchDscpToCosMappingsRequest, callback) {
      let postBody = updateNetworkSwitchDscpToCosMappingsRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSwitchDscpToCosMappings_0");
      }
      // verify the required parameter 'updateNetworkSwitchDscpToCosMappingsRequest' is set
      if (updateNetworkSwitchDscpToCosMappingsRequest === undefined || updateNetworkSwitchDscpToCosMappingsRequest === null) {
        throw new Error("Missing the required parameter 'updateNetworkSwitchDscpToCosMappingsRequest' when calling updateNetworkSwitchDscpToCosMappings_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/dscpToCosMappings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSwitchLinkAggregation_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkSwitchLinkAggregation_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a link aggregation group
     * Update a link aggregation group
     * @param {String} networkId 
     * @param {String} linkAggregationId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkSwitchLinkAggregationRequest} [updateNetworkSwitchLinkAggregationRequest] 
     * @param {module:api/ConfigureApi~updateNetworkSwitchLinkAggregation_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkSwitchLinkAggregation_0(networkId, linkAggregationId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkSwitchLinkAggregationRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSwitchLinkAggregation_0");
      }
      // verify the required parameter 'linkAggregationId' is set
      if (linkAggregationId === undefined || linkAggregationId === null) {
        throw new Error("Missing the required parameter 'linkAggregationId' when calling updateNetworkSwitchLinkAggregation_0");
      }

      let pathParams = {
        'networkId': networkId,
        'linkAggregationId': linkAggregationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/linkAggregations/{linkAggregationId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSwitchMtu_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkSwitchMtu_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the MTU configuration
     * Update the MTU configuration
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkSwitchMtuRequest} [updateNetworkSwitchMtuRequest] 
     * @param {module:api/ConfigureApi~updateNetworkSwitchMtu_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkSwitchMtu_0(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkSwitchMtuRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSwitchMtu_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/mtu', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSwitchPortSchedule_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkSwitchPortSchedule_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a switch port schedule
     * Update a switch port schedule
     * @param {String} networkId 
     * @param {String} portScheduleId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkSwitchPortScheduleRequest} [updateNetworkSwitchPortScheduleRequest] 
     * @param {module:api/ConfigureApi~updateNetworkSwitchPortSchedule_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkSwitchPortSchedule_0(networkId, portScheduleId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkSwitchPortScheduleRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSwitchPortSchedule_0");
      }
      // verify the required parameter 'portScheduleId' is set
      if (portScheduleId === undefined || portScheduleId === null) {
        throw new Error("Missing the required parameter 'portScheduleId' when calling updateNetworkSwitchPortSchedule_0");
      }

      let pathParams = {
        'networkId': networkId,
        'portScheduleId': portScheduleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/portSchedules/{portScheduleId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSwitchQosRule_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkSwitchQosRule_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a quality of service rule
     * Update a quality of service rule
     * @param {String} networkId 
     * @param {String} qosRuleId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkSwitchQosRuleRequest} [updateNetworkSwitchQosRuleRequest] 
     * @param {module:api/ConfigureApi~updateNetworkSwitchQosRule_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkSwitchQosRule_0(networkId, qosRuleId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkSwitchQosRuleRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSwitchQosRule_0");
      }
      // verify the required parameter 'qosRuleId' is set
      if (qosRuleId === undefined || qosRuleId === null) {
        throw new Error("Missing the required parameter 'qosRuleId' when calling updateNetworkSwitchQosRule_0");
      }

      let pathParams = {
        'networkId': networkId,
        'qosRuleId': qosRuleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/qosRules/{qosRuleId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSwitchQosRulesOrder_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkSwitchQosRulesOrder_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the order in which the rules should be processed by the switch
     * Update the order in which the rules should be processed by the switch
     * @param {String} networkId 
     * @param {module:model/UpdateNetworkSwitchQosRulesOrderRequest} updateNetworkSwitchQosRulesOrderRequest 
     * @param {module:api/ConfigureApi~updateNetworkSwitchQosRulesOrder_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkSwitchQosRulesOrder_0(networkId, updateNetworkSwitchQosRulesOrderRequest, callback) {
      let postBody = updateNetworkSwitchQosRulesOrderRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSwitchQosRulesOrder_0");
      }
      // verify the required parameter 'updateNetworkSwitchQosRulesOrderRequest' is set
      if (updateNetworkSwitchQosRulesOrderRequest === undefined || updateNetworkSwitchQosRulesOrderRequest === null) {
        throw new Error("Missing the required parameter 'updateNetworkSwitchQosRulesOrderRequest' when calling updateNetworkSwitchQosRulesOrder_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/qosRules/order', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSwitchRoutingMulticastRendezvousPoint_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkSwitchRoutingMulticastRendezvousPoint_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a multicast rendezvous point
     * Update a multicast rendezvous point
     * @param {String} networkId 
     * @param {String} rendezvousPointId 
     * @param {module:model/UpdateNetworkSwitchRoutingMulticastRendezvousPointRequest} updateNetworkSwitchRoutingMulticastRendezvousPointRequest 
     * @param {module:api/ConfigureApi~updateNetworkSwitchRoutingMulticastRendezvousPoint_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkSwitchRoutingMulticastRendezvousPoint_0(networkId, rendezvousPointId, updateNetworkSwitchRoutingMulticastRendezvousPointRequest, callback) {
      let postBody = updateNetworkSwitchRoutingMulticastRendezvousPointRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSwitchRoutingMulticastRendezvousPoint_0");
      }
      // verify the required parameter 'rendezvousPointId' is set
      if (rendezvousPointId === undefined || rendezvousPointId === null) {
        throw new Error("Missing the required parameter 'rendezvousPointId' when calling updateNetworkSwitchRoutingMulticastRendezvousPoint_0");
      }
      // verify the required parameter 'updateNetworkSwitchRoutingMulticastRendezvousPointRequest' is set
      if (updateNetworkSwitchRoutingMulticastRendezvousPointRequest === undefined || updateNetworkSwitchRoutingMulticastRendezvousPointRequest === null) {
        throw new Error("Missing the required parameter 'updateNetworkSwitchRoutingMulticastRendezvousPointRequest' when calling updateNetworkSwitchRoutingMulticastRendezvousPoint_0");
      }

      let pathParams = {
        'networkId': networkId,
        'rendezvousPointId': rendezvousPointId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/routing/multicast/rendezvousPoints/{rendezvousPointId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSwitchRoutingMulticast_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkSwitchRoutingMulticast_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update multicast settings for a network
     * Update multicast settings for a network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkSwitchRoutingMulticastRequest} [updateNetworkSwitchRoutingMulticastRequest] 
     * @param {module:api/ConfigureApi~updateNetworkSwitchRoutingMulticast_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkSwitchRoutingMulticast_0(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkSwitchRoutingMulticastRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSwitchRoutingMulticast_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/routing/multicast', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSwitchRoutingOspf_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkSwitchRoutingOspf_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update layer 3 OSPF routing configuration
     * Update layer 3 OSPF routing configuration
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkSwitchRoutingOspfRequest} [updateNetworkSwitchRoutingOspfRequest] 
     * @param {module:api/ConfigureApi~updateNetworkSwitchRoutingOspf_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkSwitchRoutingOspf_0(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkSwitchRoutingOspfRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSwitchRoutingOspf_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/routing/ospf', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSwitchSettings_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkSwitchSettings_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkSwitchSettings200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update switch network settings
     * Update switch network settings
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkSwitchSettingsRequest} [updateNetworkSwitchSettingsRequest] 
     * @param {module:api/ConfigureApi~updateNetworkSwitchSettings_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkSwitchSettings200Response}
     */
    updateNetworkSwitchSettings_0(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkSwitchSettingsRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSwitchSettings_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkSwitchSettings200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSwitchStackRoutingInterfaceDhcp_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkSwitchStackRoutingInterfaceDhcp_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a layer 3 interface DHCP configuration for a switch stack
     * Update a layer 3 interface DHCP configuration for a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {String} interfaceId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest} [updateNetworkSwitchStackRoutingInterfaceDhcpRequest] 
     * @param {module:api/ConfigureApi~updateNetworkSwitchStackRoutingInterfaceDhcp_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkSwitchStackRoutingInterfaceDhcp_0(networkId, switchStackId, interfaceId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkSwitchStackRoutingInterfaceDhcpRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSwitchStackRoutingInterfaceDhcp_0");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling updateNetworkSwitchStackRoutingInterfaceDhcp_0");
      }
      // verify the required parameter 'interfaceId' is set
      if (interfaceId === undefined || interfaceId === null) {
        throw new Error("Missing the required parameter 'interfaceId' when calling updateNetworkSwitchStackRoutingInterfaceDhcp_0");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId,
        'interfaceId': interfaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}/dhcp', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSwitchStackRoutingInterface_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkSwitchStackRoutingInterface_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a layer 3 interface for a switch stack
     * Update a layer 3 interface for a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {String} interfaceId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkSwitchStackRoutingInterfaceRequest} [updateNetworkSwitchStackRoutingInterfaceRequest] 
     * @param {module:api/ConfigureApi~updateNetworkSwitchStackRoutingInterface_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkSwitchStackRoutingInterface_0(networkId, switchStackId, interfaceId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkSwitchStackRoutingInterfaceRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSwitchStackRoutingInterface_0");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling updateNetworkSwitchStackRoutingInterface_0");
      }
      // verify the required parameter 'interfaceId' is set
      if (interfaceId === undefined || interfaceId === null) {
        throw new Error("Missing the required parameter 'interfaceId' when calling updateNetworkSwitchStackRoutingInterface_0");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId,
        'interfaceId': interfaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSwitchStackRoutingStaticRoute_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkSwitchStackRoutingStaticRoute_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a layer 3 static route for a switch stack
     * Update a layer 3 static route for a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {String} staticRouteId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateDeviceSwitchRoutingStaticRouteRequest} [updateDeviceSwitchRoutingStaticRouteRequest] 
     * @param {module:api/ConfigureApi~updateNetworkSwitchStackRoutingStaticRoute_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkSwitchStackRoutingStaticRoute_0(networkId, switchStackId, staticRouteId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateDeviceSwitchRoutingStaticRouteRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSwitchStackRoutingStaticRoute_0");
      }
      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling updateNetworkSwitchStackRoutingStaticRoute_0");
      }
      // verify the required parameter 'staticRouteId' is set
      if (staticRouteId === undefined || staticRouteId === null) {
        throw new Error("Missing the required parameter 'staticRouteId' when calling updateNetworkSwitchStackRoutingStaticRoute_0");
      }

      let pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId,
        'staticRouteId': staticRouteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes/{staticRouteId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSwitchStormControl_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkSwitchStormControl_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the storm control configuration for a switch network
     * Update the storm control configuration for a switch network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkSwitchStormControlRequest} [updateNetworkSwitchStormControlRequest] 
     * @param {module:api/ConfigureApi~updateNetworkSwitchStormControl_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkSwitchStormControl_0(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkSwitchStormControlRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSwitchStormControl_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stormControl', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSwitchStp_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkSwitchStp_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates STP settings
     * Updates STP settings
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkSwitchStpRequest} [updateNetworkSwitchStpRequest] 
     * @param {module:api/ConfigureApi~updateNetworkSwitchStp_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkSwitchStp_0(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkSwitchStpRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSwitchStp_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stp', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSyslogServers_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkSyslogServers_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkSyslogServers200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the syslog servers for a network
     * Update the syslog servers for a network
     * @param {String} networkId 
     * @param {module:model/UpdateNetworkSyslogServersRequest} updateNetworkSyslogServersRequest 
     * @param {module:api/ConfigureApi~updateNetworkSyslogServers_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkSyslogServers200Response}
     */
    updateNetworkSyslogServers_0(networkId, updateNetworkSyslogServersRequest, callback) {
      let postBody = updateNetworkSyslogServersRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSyslogServers_0");
      }
      // verify the required parameter 'updateNetworkSyslogServersRequest' is set
      if (updateNetworkSyslogServersRequest === undefined || updateNetworkSyslogServersRequest === null) {
        throw new Error("Missing the required parameter 'updateNetworkSyslogServersRequest' when calling updateNetworkSyslogServers_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkSyslogServers200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/syslogServers', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkTrafficAnalysis_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkTrafficAnalysis_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the traffic analysis settings for a network
     * Update the traffic analysis settings for a network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkTrafficAnalysisRequest} [updateNetworkTrafficAnalysisRequest] 
     * @param {module:api/ConfigureApi~updateNetworkTrafficAnalysis_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkTrafficAnalysis_0(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkTrafficAnalysisRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkTrafficAnalysis_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/trafficAnalysis', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkWebhooksHttpServer_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkWebhooksHttpServer_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkWebhooksHttpServers200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an HTTP server
     * Update an HTTP server. To change a URL, create a new HTTP server.
     * @param {String} networkId 
     * @param {String} httpServerId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkWebhooksHttpServerRequest} [updateNetworkWebhooksHttpServerRequest] 
     * @param {module:api/ConfigureApi~updateNetworkWebhooksHttpServer_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkWebhooksHttpServers200ResponseInner}
     */
    updateNetworkWebhooksHttpServer_0(networkId, httpServerId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkWebhooksHttpServerRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkWebhooksHttpServer_0");
      }
      // verify the required parameter 'httpServerId' is set
      if (httpServerId === undefined || httpServerId === null) {
        throw new Error("Missing the required parameter 'httpServerId' when calling updateNetworkWebhooksHttpServer_0");
      }

      let pathParams = {
        'networkId': networkId,
        'httpServerId': httpServerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkWebhooksHttpServers200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/webhooks/httpServers/{httpServerId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkWebhooksPayloadTemplate_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkWebhooksPayloadTemplate_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkWebhooksPayloadTemplates200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a webhook payload template for a network
     * Update a webhook payload template for a network
     * @param {String} networkId 
     * @param {String} payloadTemplateId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkWebhooksPayloadTemplateRequest} [updateNetworkWebhooksPayloadTemplateRequest] 
     * @param {module:api/ConfigureApi~updateNetworkWebhooksPayloadTemplate_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkWebhooksPayloadTemplates200ResponseInner}
     */
    updateNetworkWebhooksPayloadTemplate_0(networkId, payloadTemplateId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkWebhooksPayloadTemplateRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkWebhooksPayloadTemplate_0");
      }
      // verify the required parameter 'payloadTemplateId' is set
      if (payloadTemplateId === undefined || payloadTemplateId === null) {
        throw new Error("Missing the required parameter 'payloadTemplateId' when calling updateNetworkWebhooksPayloadTemplate_0");
      }

      let pathParams = {
        'networkId': networkId,
        'payloadTemplateId': payloadTemplateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkWebhooksPayloadTemplates200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/webhooks/payloadTemplates/{payloadTemplateId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkWirelessAlternateManagementInterface_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkWirelessAlternateManagementInterface_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update alternate management interface and device static IP
     * Update alternate management interface and device static IP
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkWirelessAlternateManagementInterfaceRequest} [updateNetworkWirelessAlternateManagementInterfaceRequest] 
     * @param {module:api/ConfigureApi~updateNetworkWirelessAlternateManagementInterface_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkWirelessAlternateManagementInterface_0(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkWirelessAlternateManagementInterfaceRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkWirelessAlternateManagementInterface_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/alternateManagementInterface', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkWirelessBilling_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkWirelessBilling_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the billing settings
     * Update the billing settings
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkWirelessBillingRequest} [updateNetworkWirelessBillingRequest] 
     * @param {module:api/ConfigureApi~updateNetworkWirelessBilling_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkWirelessBilling_0(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkWirelessBillingRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkWirelessBilling_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/billing', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkWirelessBluetoothSettings_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkWirelessBluetoothSettings_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkWirelessBluetoothSettings200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the Bluetooth settings for a network
     * Update the Bluetooth settings for a network. See the docs page for <a href=\"https://documentation.meraki.com/MR/Bluetooth/Bluetooth_Low_Energy_(BLE)\">Bluetooth settings</a>.
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkWirelessBluetoothSettingsRequest} [updateNetworkWirelessBluetoothSettingsRequest] 
     * @param {module:api/ConfigureApi~updateNetworkWirelessBluetoothSettings_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkWirelessBluetoothSettings200Response}
     */
    updateNetworkWirelessBluetoothSettings_0(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkWirelessBluetoothSettingsRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkWirelessBluetoothSettings_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkWirelessBluetoothSettings200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/bluetooth/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkWirelessRfProfile_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkWirelessRfProfile_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateNetworkWirelessRfProfile201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates specified RF profile for this network
     * Updates specified RF profile for this network
     * @param {String} networkId 
     * @param {String} rfProfileId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkWirelessRfProfileRequest} [updateNetworkWirelessRfProfileRequest] 
     * @param {module:api/ConfigureApi~updateNetworkWirelessRfProfile_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateNetworkWirelessRfProfile201Response}
     */
    updateNetworkWirelessRfProfile_0(networkId, rfProfileId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkWirelessRfProfileRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkWirelessRfProfile_0");
      }
      // verify the required parameter 'rfProfileId' is set
      if (rfProfileId === undefined || rfProfileId === null) {
        throw new Error("Missing the required parameter 'rfProfileId' when calling updateNetworkWirelessRfProfile_0");
      }

      let pathParams = {
        'networkId': networkId,
        'rfProfileId': rfProfileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateNetworkWirelessRfProfile201Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/rfProfiles/{rfProfileId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkWirelessSettings_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkWirelessSettings_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkWirelessSettings200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the wireless settings for a network
     * Update the wireless settings for a network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkWirelessSettingsRequest} [updateNetworkWirelessSettingsRequest] 
     * @param {module:api/ConfigureApi~updateNetworkWirelessSettings_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkWirelessSettings200Response}
     */
    updateNetworkWirelessSettings_0(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkWirelessSettingsRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkWirelessSettings_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkWirelessSettings200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkWirelessSsidBonjourForwarding_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkWirelessSsidBonjourForwarding_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the bonjour forwarding setting and rules for the SSID
     * Update the bonjour forwarding setting and rules for the SSID
     * @param {String} networkId 
     * @param {String} number 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkWirelessSsidBonjourForwardingRequest} [updateNetworkWirelessSsidBonjourForwardingRequest] 
     * @param {module:api/ConfigureApi~updateNetworkWirelessSsidBonjourForwarding_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkWirelessSsidBonjourForwarding_0(networkId, number, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkWirelessSsidBonjourForwardingRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkWirelessSsidBonjourForwarding_0");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling updateNetworkWirelessSsidBonjourForwarding_0");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/bonjourForwarding', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkWirelessSsidDeviceTypeGroupPolicies_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkWirelessSsidDeviceTypeGroupPolicies_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the device type group policies for the SSID
     * Update the device type group policies for the SSID
     * @param {String} networkId 
     * @param {String} number 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesRequest} [updateNetworkWirelessSsidDeviceTypeGroupPoliciesRequest] 
     * @param {module:api/ConfigureApi~updateNetworkWirelessSsidDeviceTypeGroupPolicies_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkWirelessSsidDeviceTypeGroupPolicies_0(networkId, number, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkWirelessSsidDeviceTypeGroupPoliciesRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkWirelessSsidDeviceTypeGroupPolicies_0");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling updateNetworkWirelessSsidDeviceTypeGroupPolicies_0");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/deviceTypeGroupPolicies', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkWirelessSsidEapOverride_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkWirelessSsidEapOverride_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkWirelessSsidEapOverride200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the EAP overridden parameters for an SSID.
     * Update the EAP overridden parameters for an SSID.
     * @param {String} networkId 
     * @param {String} number 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkWirelessSsidEapOverrideRequest} [updateNetworkWirelessSsidEapOverrideRequest] 
     * @param {module:api/ConfigureApi~updateNetworkWirelessSsidEapOverride_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkWirelessSsidEapOverride200Response}
     */
    updateNetworkWirelessSsidEapOverride_0(networkId, number, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkWirelessSsidEapOverrideRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkWirelessSsidEapOverride_0");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling updateNetworkWirelessSsidEapOverride_0");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkWirelessSsidEapOverride200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/eapOverride', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkWirelessSsidFirewallL3FirewallRules_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkWirelessSsidFirewallL3FirewallRules_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the L3 firewall rules of an SSID on an MR network
     * Update the L3 firewall rules of an SSID on an MR network
     * @param {String} networkId 
     * @param {String} number 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequest} [updateNetworkWirelessSsidFirewallL3FirewallRulesRequest] 
     * @param {module:api/ConfigureApi~updateNetworkWirelessSsidFirewallL3FirewallRules_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkWirelessSsidFirewallL3FirewallRules_0(networkId, number, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkWirelessSsidFirewallL3FirewallRulesRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkWirelessSsidFirewallL3FirewallRules_0");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling updateNetworkWirelessSsidFirewallL3FirewallRules_0");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/firewall/l3FirewallRules', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkWirelessSsidFirewallL7FirewallRules_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkWirelessSsidFirewallL7FirewallRules_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the L7 firewall rules of an SSID on an MR network
     * Update the L7 firewall rules of an SSID on an MR network
     * @param {String} networkId 
     * @param {String} number 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkWirelessSsidFirewallL7FirewallRulesRequest} [updateNetworkWirelessSsidFirewallL7FirewallRulesRequest] 
     * @param {module:api/ConfigureApi~updateNetworkWirelessSsidFirewallL7FirewallRules_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkWirelessSsidFirewallL7FirewallRules_0(networkId, number, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkWirelessSsidFirewallL7FirewallRulesRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkWirelessSsidFirewallL7FirewallRules_0");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling updateNetworkWirelessSsidFirewallL7FirewallRules_0");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/firewall/l7FirewallRules', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkWirelessSsidHotspot20_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkWirelessSsidHotspot20_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the Hotspot 2.0 settings of an SSID
     * Update the Hotspot 2.0 settings of an SSID
     * @param {String} networkId 
     * @param {String} number 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkWirelessSsidHotspot20Request} [updateNetworkWirelessSsidHotspot20Request] 
     * @param {module:api/ConfigureApi~updateNetworkWirelessSsidHotspot20_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkWirelessSsidHotspot20_0(networkId, number, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkWirelessSsidHotspot20Request'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkWirelessSsidHotspot20_0");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling updateNetworkWirelessSsidHotspot20_0");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/hotspot20', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkWirelessSsidIdentityPsk_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkWirelessSsidIdentityPsk_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an Identity PSK
     * Update an Identity PSK
     * @param {String} networkId 
     * @param {String} number 
     * @param {String} identityPskId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkWirelessSsidIdentityPskRequest} [updateNetworkWirelessSsidIdentityPskRequest] 
     * @param {module:api/ConfigureApi~updateNetworkWirelessSsidIdentityPsk_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkWirelessSsidIdentityPsk_0(networkId, number, identityPskId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkWirelessSsidIdentityPskRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkWirelessSsidIdentityPsk_0");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling updateNetworkWirelessSsidIdentityPsk_0");
      }
      // verify the required parameter 'identityPskId' is set
      if (identityPskId === undefined || identityPskId === null) {
        throw new Error("Missing the required parameter 'identityPskId' when calling updateNetworkWirelessSsidIdentityPsk_0");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number,
        'identityPskId': identityPskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/identityPsks/{identityPskId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkWirelessSsidSchedules_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkWirelessSsidSchedules_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the outage schedule for the SSID
     * Update the outage schedule for the SSID
     * @param {String} networkId 
     * @param {String} number 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkWirelessSsidSchedulesRequest} [updateNetworkWirelessSsidSchedulesRequest] 
     * @param {module:api/ConfigureApi~updateNetworkWirelessSsidSchedules_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkWirelessSsidSchedules_0(networkId, number, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkWirelessSsidSchedulesRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkWirelessSsidSchedules_0");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling updateNetworkWirelessSsidSchedules_0");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/schedules', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkWirelessSsidSplashSettings_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkWirelessSsidSplashSettings_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkWirelessSsidSplashSettings200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify the splash page settings for the given SSID
     * Modify the splash page settings for the given SSID
     * @param {String} networkId 
     * @param {String} number 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkWirelessSsidSplashSettingsRequest} [updateNetworkWirelessSsidSplashSettingsRequest] 
     * @param {module:api/ConfigureApi~updateNetworkWirelessSsidSplashSettings_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkWirelessSsidSplashSettings200Response}
     */
    updateNetworkWirelessSsidSplashSettings_0(networkId, number, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkWirelessSsidSplashSettingsRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkWirelessSsidSplashSettings_0");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling updateNetworkWirelessSsidSplashSettings_0");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkWirelessSsidSplashSettings200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/splash/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkWirelessSsidTrafficShapingRules_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkWirelessSsidTrafficShapingRules_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the traffic shaping settings for an SSID on an MR network
     * Update the traffic shaping settings for an SSID on an MR network
     * @param {String} networkId 
     * @param {String} number 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkWirelessSsidTrafficShapingRulesRequest} [updateNetworkWirelessSsidTrafficShapingRulesRequest] 
     * @param {module:api/ConfigureApi~updateNetworkWirelessSsidTrafficShapingRules_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkWirelessSsidTrafficShapingRules_0(networkId, number, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkWirelessSsidTrafficShapingRulesRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkWirelessSsidTrafficShapingRules_0");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling updateNetworkWirelessSsidTrafficShapingRules_0");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/trafficShaping/rules', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkWirelessSsidVpn_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkWirelessSsidVpn_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the VPN settings for the SSID
     * Update the VPN settings for the SSID
     * @param {String} networkId 
     * @param {String} number 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkWirelessSsidVpnRequest} [updateNetworkWirelessSsidVpnRequest] 
     * @param {module:api/ConfigureApi~updateNetworkWirelessSsidVpn_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkWirelessSsidVpn_0(networkId, number, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkWirelessSsidVpnRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkWirelessSsidVpn_0");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling updateNetworkWirelessSsidVpn_0");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/vpn', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkWirelessSsid_0 operation.
     * @callback module:api/ConfigureApi~updateNetworkWirelessSsid_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the attributes of an MR SSID
     * Update the attributes of an MR SSID
     * @param {String} networkId 
     * @param {String} number 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkWirelessSsidRequest} [updateNetworkWirelessSsidRequest] 
     * @param {module:api/ConfigureApi~updateNetworkWirelessSsid_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkWirelessSsid_0(networkId, number, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkWirelessSsidRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkWirelessSsid_0");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling updateNetworkWirelessSsid_0");
      }

      let pathParams = {
        'networkId': networkId,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetwork_0 operation.
     * @callback module:api/ConfigureApi~updateNetwork_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetwork200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a network
     * Update a network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkRequest} [updateNetworkRequest] 
     * @param {module:api/ConfigureApi~updateNetwork_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetwork200Response}
     */
    updateNetwork_0(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetwork_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetwork200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationActionBatch_0 operation.
     * @callback module:api/ConfigureApi~updateOrganizationActionBatch_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an action batch
     * Update an action batch
     * @param {String} organizationId 
     * @param {String} actionBatchId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationActionBatchRequest} [updateOrganizationActionBatchRequest] 
     * @param {module:api/ConfigureApi~updateOrganizationActionBatch_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateOrganizationActionBatch_0(organizationId, actionBatchId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateOrganizationActionBatchRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationActionBatch_0");
      }
      // verify the required parameter 'actionBatchId' is set
      if (actionBatchId === undefined || actionBatchId === null) {
        throw new Error("Missing the required parameter 'actionBatchId' when calling updateOrganizationActionBatch_0");
      }

      let pathParams = {
        'organizationId': organizationId,
        'actionBatchId': actionBatchId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/actionBatches/{actionBatchId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationAdaptivePolicyAcl_0 operation.
     * @callback module:api/ConfigureApi~updateOrganizationAdaptivePolicyAcl_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an adaptive policy ACL
     * Updates an adaptive policy ACL
     * @param {String} organizationId 
     * @param {String} aclId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationAdaptivePolicyAclRequest} [updateOrganizationAdaptivePolicyAclRequest] 
     * @param {module:api/ConfigureApi~updateOrganizationAdaptivePolicyAcl_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateOrganizationAdaptivePolicyAcl_0(organizationId, aclId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateOrganizationAdaptivePolicyAclRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationAdaptivePolicyAcl_0");
      }
      // verify the required parameter 'aclId' is set
      if (aclId === undefined || aclId === null) {
        throw new Error("Missing the required parameter 'aclId' when calling updateOrganizationAdaptivePolicyAcl_0");
      }

      let pathParams = {
        'organizationId': organizationId,
        'aclId': aclId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/adaptivePolicy/acls/{aclId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationAdaptivePolicyGroup_0 operation.
     * @callback module:api/ConfigureApi~updateOrganizationAdaptivePolicyGroup_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an adaptive policy group
     * Updates an adaptive policy group. If updating \"Infrastructure\", only the SGT is allowed. Cannot update \"Unknown\".
     * @param {String} organizationId 
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationAdaptivePolicyGroupRequest} [updateOrganizationAdaptivePolicyGroupRequest] 
     * @param {module:api/ConfigureApi~updateOrganizationAdaptivePolicyGroup_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateOrganizationAdaptivePolicyGroup_0(organizationId, id, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateOrganizationAdaptivePolicyGroupRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationAdaptivePolicyGroup_0");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateOrganizationAdaptivePolicyGroup_0");
      }

      let pathParams = {
        'organizationId': organizationId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/adaptivePolicy/groups/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationAdaptivePolicyPolicy_0 operation.
     * @callback module:api/ConfigureApi~updateOrganizationAdaptivePolicyPolicy_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an Adaptive Policy
     * Update an Adaptive Policy
     * @param {String} organizationId 
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationAdaptivePolicyPolicyRequest} [updateOrganizationAdaptivePolicyPolicyRequest] 
     * @param {module:api/ConfigureApi~updateOrganizationAdaptivePolicyPolicy_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateOrganizationAdaptivePolicyPolicy_0(organizationId, id, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateOrganizationAdaptivePolicyPolicyRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationAdaptivePolicyPolicy_0");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateOrganizationAdaptivePolicyPolicy_0");
      }

      let pathParams = {
        'organizationId': organizationId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/adaptivePolicy/policies/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationAdaptivePolicySettings_0 operation.
     * @callback module:api/ConfigureApi~updateOrganizationAdaptivePolicySettings_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update global adaptive policy settings
     * Update global adaptive policy settings
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationAdaptivePolicySettingsRequest} [updateOrganizationAdaptivePolicySettingsRequest] 
     * @param {module:api/ConfigureApi~updateOrganizationAdaptivePolicySettings_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateOrganizationAdaptivePolicySettings_0(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateOrganizationAdaptivePolicySettingsRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationAdaptivePolicySettings_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/adaptivePolicy/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationAdmin_0 operation.
     * @callback module:api/ConfigureApi~updateOrganizationAdmin_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an administrator
     * Update an administrator
     * @param {String} organizationId 
     * @param {String} adminId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationAdminRequest} [updateOrganizationAdminRequest] 
     * @param {module:api/ConfigureApi~updateOrganizationAdmin_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateOrganizationAdmin_0(organizationId, adminId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateOrganizationAdminRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationAdmin_0");
      }
      // verify the required parameter 'adminId' is set
      if (adminId === undefined || adminId === null) {
        throw new Error("Missing the required parameter 'adminId' when calling updateOrganizationAdmin_0");
      }

      let pathParams = {
        'organizationId': organizationId,
        'adminId': adminId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/admins/{adminId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationAlertsProfile_0 operation.
     * @callback module:api/ConfigureApi~updateOrganizationAlertsProfile_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an organization-wide alert config
     * Update an organization-wide alert config
     * @param {String} organizationId 
     * @param {String} alertConfigId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationAlertsProfileRequest} [updateOrganizationAlertsProfileRequest] 
     * @param {module:api/ConfigureApi~updateOrganizationAlertsProfile_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateOrganizationAlertsProfile_0(organizationId, alertConfigId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateOrganizationAlertsProfileRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationAlertsProfile_0");
      }
      // verify the required parameter 'alertConfigId' is set
      if (alertConfigId === undefined || alertConfigId === null) {
        throw new Error("Missing the required parameter 'alertConfigId' when calling updateOrganizationAlertsProfile_0");
      }

      let pathParams = {
        'organizationId': organizationId,
        'alertConfigId': alertConfigId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/alerts/profiles/{alertConfigId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationApplianceSecurityIntrusion_0 operation.
     * @callback module:api/ConfigureApi~updateOrganizationApplianceSecurityIntrusion_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets supported intrusion settings for an organization
     * Sets supported intrusion settings for an organization
     * @param {String} organizationId 
     * @param {module:model/UpdateOrganizationApplianceSecurityIntrusionRequest} updateOrganizationApplianceSecurityIntrusionRequest 
     * @param {module:api/ConfigureApi~updateOrganizationApplianceSecurityIntrusion_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateOrganizationApplianceSecurityIntrusion_0(organizationId, updateOrganizationApplianceSecurityIntrusionRequest, callback) {
      let postBody = updateOrganizationApplianceSecurityIntrusionRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationApplianceSecurityIntrusion_0");
      }
      // verify the required parameter 'updateOrganizationApplianceSecurityIntrusionRequest' is set
      if (updateOrganizationApplianceSecurityIntrusionRequest === undefined || updateOrganizationApplianceSecurityIntrusionRequest === null) {
        throw new Error("Missing the required parameter 'updateOrganizationApplianceSecurityIntrusionRequest' when calling updateOrganizationApplianceSecurityIntrusion_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/appliance/security/intrusion', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationApplianceVpnThirdPartyVPNPeers_0 operation.
     * @callback module:api/ConfigureApi~updateOrganizationApplianceVpnThirdPartyVPNPeers_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizationApplianceVpnThirdPartyVPNPeers200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the third party VPN peers for an organization
     * Update the third party VPN peers for an organization
     * @param {String} organizationId 
     * @param {module:model/UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequest} updateOrganizationApplianceVpnThirdPartyVPNPeersRequest 
     * @param {module:api/ConfigureApi~updateOrganizationApplianceVpnThirdPartyVPNPeers_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizationApplianceVpnThirdPartyVPNPeers200Response}
     */
    updateOrganizationApplianceVpnThirdPartyVPNPeers_0(organizationId, updateOrganizationApplianceVpnThirdPartyVPNPeersRequest, callback) {
      let postBody = updateOrganizationApplianceVpnThirdPartyVPNPeersRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationApplianceVpnThirdPartyVPNPeers_0");
      }
      // verify the required parameter 'updateOrganizationApplianceVpnThirdPartyVPNPeersRequest' is set
      if (updateOrganizationApplianceVpnThirdPartyVPNPeersRequest === undefined || updateOrganizationApplianceVpnThirdPartyVPNPeersRequest === null) {
        throw new Error("Missing the required parameter 'updateOrganizationApplianceVpnThirdPartyVPNPeersRequest' when calling updateOrganizationApplianceVpnThirdPartyVPNPeers_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetOrganizationApplianceVpnThirdPartyVPNPeers200Response;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/appliance/vpn/thirdPartyVPNPeers', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationApplianceVpnVpnFirewallRules_0 operation.
     * @callback module:api/ConfigureApi~updateOrganizationApplianceVpnVpnFirewallRules_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the firewall rules of an organization's site-to-site VPN
     * Update the firewall rules of an organization's site-to-site VPN
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationApplianceVpnVpnFirewallRulesRequest} [updateOrganizationApplianceVpnVpnFirewallRulesRequest] 
     * @param {module:api/ConfigureApi~updateOrganizationApplianceVpnVpnFirewallRules_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateOrganizationApplianceVpnVpnFirewallRules_0(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateOrganizationApplianceVpnVpnFirewallRulesRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationApplianceVpnVpnFirewallRules_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/appliance/vpn/vpnFirewallRules', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationBrandingPoliciesPriorities_0 operation.
     * @callback module:api/ConfigureApi~updateOrganizationBrandingPoliciesPriorities_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizationBrandingPoliciesPriorities200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the priority ordering of an organization's branding policies.
     * Update the priority ordering of an organization's branding policies.
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationBrandingPoliciesPrioritiesRequest} [updateOrganizationBrandingPoliciesPrioritiesRequest] 
     * @param {module:api/ConfigureApi~updateOrganizationBrandingPoliciesPriorities_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizationBrandingPoliciesPriorities200Response}
     */
    updateOrganizationBrandingPoliciesPriorities_0(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateOrganizationBrandingPoliciesPrioritiesRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationBrandingPoliciesPriorities_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetOrganizationBrandingPoliciesPriorities200Response;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/brandingPolicies/priorities', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationBrandingPolicy_0 operation.
     * @callback module:api/ConfigureApi~updateOrganizationBrandingPolicy_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizationBrandingPolicies200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a branding policy
     * Update a branding policy
     * @param {String} organizationId 
     * @param {String} brandingPolicyId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationBrandingPolicyRequest} [updateOrganizationBrandingPolicyRequest] 
     * @param {module:api/ConfigureApi~updateOrganizationBrandingPolicy_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizationBrandingPolicies200ResponseInner}
     */
    updateOrganizationBrandingPolicy_0(organizationId, brandingPolicyId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateOrganizationBrandingPolicyRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationBrandingPolicy_0");
      }
      // verify the required parameter 'brandingPolicyId' is set
      if (brandingPolicyId === undefined || brandingPolicyId === null) {
        throw new Error("Missing the required parameter 'brandingPolicyId' when calling updateOrganizationBrandingPolicy_0");
      }

      let pathParams = {
        'organizationId': organizationId,
        'brandingPolicyId': brandingPolicyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetOrganizationBrandingPolicies200ResponseInner;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/brandingPolicies/{brandingPolicyId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationCameraOnboardingStatuses_0 operation.
     * @callback module:api/ConfigureApi~updateOrganizationCameraOnboardingStatuses_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Notify that credential handoff to camera has completed
     * Notify that credential handoff to camera has completed
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationCameraOnboardingStatusesRequest} [updateOrganizationCameraOnboardingStatusesRequest] 
     * @param {module:api/ConfigureApi~updateOrganizationCameraOnboardingStatuses_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateOrganizationCameraOnboardingStatuses_0(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateOrganizationCameraOnboardingStatusesRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationCameraOnboardingStatuses_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/camera/onboarding/statuses', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationConfigTemplateSwitchProfilePort_0 operation.
     * @callback module:api/ConfigureApi~updateOrganizationConfigTemplateSwitchProfilePort_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a switch profile port
     * Update a switch profile port
     * @param {String} organizationId 
     * @param {String} configTemplateId 
     * @param {String} profileId 
     * @param {String} portId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationConfigTemplateSwitchProfilePortRequest} [updateOrganizationConfigTemplateSwitchProfilePortRequest] 
     * @param {module:api/ConfigureApi~updateOrganizationConfigTemplateSwitchProfilePort_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner}
     */
    updateOrganizationConfigTemplateSwitchProfilePort_0(organizationId, configTemplateId, profileId, portId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateOrganizationConfigTemplateSwitchProfilePortRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationConfigTemplateSwitchProfilePort_0");
      }
      // verify the required parameter 'configTemplateId' is set
      if (configTemplateId === undefined || configTemplateId === null) {
        throw new Error("Missing the required parameter 'configTemplateId' when calling updateOrganizationConfigTemplateSwitchProfilePort_0");
      }
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling updateOrganizationConfigTemplateSwitchProfilePort_0");
      }
      // verify the required parameter 'portId' is set
      if (portId === undefined || portId === null) {
        throw new Error("Missing the required parameter 'portId' when calling updateOrganizationConfigTemplateSwitchProfilePort_0");
      }

      let pathParams = {
        'organizationId': organizationId,
        'configTemplateId': configTemplateId,
        'profileId': profileId,
        'portId': portId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/configTemplates/{configTemplateId}/switch/profiles/{profileId}/ports/{portId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationConfigTemplate_0 operation.
     * @callback module:api/ConfigureApi~updateOrganizationConfigTemplate_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a configuration template
     * Update a configuration template
     * @param {String} organizationId 
     * @param {String} configTemplateId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationConfigTemplateRequest} [updateOrganizationConfigTemplateRequest] 
     * @param {module:api/ConfigureApi~updateOrganizationConfigTemplate_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateOrganizationConfigTemplate_0(organizationId, configTemplateId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateOrganizationConfigTemplateRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationConfigTemplate_0");
      }
      // verify the required parameter 'configTemplateId' is set
      if (configTemplateId === undefined || configTemplateId === null) {
        throw new Error("Missing the required parameter 'configTemplateId' when calling updateOrganizationConfigTemplate_0");
      }

      let pathParams = {
        'organizationId': organizationId,
        'configTemplateId': configTemplateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/configTemplates/{configTemplateId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationEarlyAccessFeaturesOptIn_0 operation.
     * @callback module:api/ConfigureApi~updateOrganizationEarlyAccessFeaturesOptIn_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an early access feature opt-in for an organization
     * Update an early access feature opt-in for an organization
     * @param {String} organizationId 
     * @param {String} optInId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationEarlyAccessFeaturesOptInRequest} [updateOrganizationEarlyAccessFeaturesOptInRequest] 
     * @param {module:api/ConfigureApi~updateOrganizationEarlyAccessFeaturesOptIn_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateOrganizationEarlyAccessFeaturesOptIn_0(organizationId, optInId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateOrganizationEarlyAccessFeaturesOptInRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationEarlyAccessFeaturesOptIn_0");
      }
      // verify the required parameter 'optInId' is set
      if (optInId === undefined || optInId === null) {
        throw new Error("Missing the required parameter 'optInId' when calling updateOrganizationEarlyAccessFeaturesOptIn_0");
      }

      let pathParams = {
        'organizationId': organizationId,
        'optInId': optInId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/earlyAccess/features/optIns/{optInId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationInsightMonitoredMediaServer_0 operation.
     * @callback module:api/ConfigureApi~updateOrganizationInsightMonitoredMediaServer_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a monitored media server for this organization
     * Update a monitored media server for this organization. Only valid for organizations with Meraki Insight.
     * @param {String} organizationId 
     * @param {String} monitoredMediaServerId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationInsightMonitoredMediaServerRequest} [updateOrganizationInsightMonitoredMediaServerRequest] 
     * @param {module:api/ConfigureApi~updateOrganizationInsightMonitoredMediaServer_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateOrganizationInsightMonitoredMediaServer_0(organizationId, monitoredMediaServerId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateOrganizationInsightMonitoredMediaServerRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationInsightMonitoredMediaServer_0");
      }
      // verify the required parameter 'monitoredMediaServerId' is set
      if (monitoredMediaServerId === undefined || monitoredMediaServerId === null) {
        throw new Error("Missing the required parameter 'monitoredMediaServerId' when calling updateOrganizationInsightMonitoredMediaServer_0");
      }

      let pathParams = {
        'organizationId': organizationId,
        'monitoredMediaServerId': monitoredMediaServerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/insight/monitoredMediaServers/{monitoredMediaServerId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationLicense_0 operation.
     * @callback module:api/ConfigureApi~updateOrganizationLicense_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizationLicenses200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a license
     * Update a license
     * @param {String} organizationId 
     * @param {String} licenseId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationLicenseRequest} [updateOrganizationLicenseRequest] 
     * @param {module:api/ConfigureApi~updateOrganizationLicense_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizationLicenses200ResponseInner}
     */
    updateOrganizationLicense_0(organizationId, licenseId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateOrganizationLicenseRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationLicense_0");
      }
      // verify the required parameter 'licenseId' is set
      if (licenseId === undefined || licenseId === null) {
        throw new Error("Missing the required parameter 'licenseId' when calling updateOrganizationLicense_0");
      }

      let pathParams = {
        'organizationId': organizationId,
        'licenseId': licenseId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetOrganizationLicenses200ResponseInner;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/licenses/{licenseId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationLoginSecurity_0 operation.
     * @callback module:api/ConfigureApi~updateOrganizationLoginSecurity_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizationLoginSecurity200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the login security settings for an organization
     * Update the login security settings for an organization
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationLoginSecurityRequest} [updateOrganizationLoginSecurityRequest] 
     * @param {module:api/ConfigureApi~updateOrganizationLoginSecurity_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizationLoginSecurity200Response}
     */
    updateOrganizationLoginSecurity_0(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateOrganizationLoginSecurityRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationLoginSecurity_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetOrganizationLoginSecurity200Response;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/loginSecurity', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationPolicyObject_0 operation.
     * @callback module:api/ConfigureApi~updateOrganizationPolicyObject_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a Policy Object.
     * Updates a Policy Object.
     * @param {String} organizationId 
     * @param {String} policyObjectId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationPolicyObjectRequest} [updateOrganizationPolicyObjectRequest] 
     * @param {module:api/ConfigureApi~updateOrganizationPolicyObject_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateOrganizationPolicyObject_0(organizationId, policyObjectId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateOrganizationPolicyObjectRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationPolicyObject_0");
      }
      // verify the required parameter 'policyObjectId' is set
      if (policyObjectId === undefined || policyObjectId === null) {
        throw new Error("Missing the required parameter 'policyObjectId' when calling updateOrganizationPolicyObject_0");
      }

      let pathParams = {
        'organizationId': organizationId,
        'policyObjectId': policyObjectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/policyObjects/{policyObjectId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationPolicyObjectsGroup_0 operation.
     * @callback module:api/ConfigureApi~updateOrganizationPolicyObjectsGroup_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a Policy Object Group.
     * Updates a Policy Object Group.
     * @param {String} organizationId 
     * @param {String} policyObjectGroupId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationPolicyObjectsGroupRequest} [updateOrganizationPolicyObjectsGroupRequest] 
     * @param {module:api/ConfigureApi~updateOrganizationPolicyObjectsGroup_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateOrganizationPolicyObjectsGroup_0(organizationId, policyObjectGroupId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateOrganizationPolicyObjectsGroupRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationPolicyObjectsGroup_0");
      }
      // verify the required parameter 'policyObjectGroupId' is set
      if (policyObjectGroupId === undefined || policyObjectGroupId === null) {
        throw new Error("Missing the required parameter 'policyObjectGroupId' when calling updateOrganizationPolicyObjectsGroup_0");
      }

      let pathParams = {
        'organizationId': organizationId,
        'policyObjectGroupId': policyObjectGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/policyObjects/groups/{policyObjectGroupId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationSamlIdp_0 operation.
     * @callback module:api/ConfigureApi~updateOrganizationSamlIdp_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationSamlIdps200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a SAML IdP in your organization
     * Update a SAML IdP in your organization
     * @param {String} organizationId 
     * @param {String} idpId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationSamlIdpRequest} [updateOrganizationSamlIdpRequest] 
     * @param {module:api/ConfigureApi~updateOrganizationSamlIdp_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationSamlIdps200ResponseInner>}
     */
    updateOrganizationSamlIdp_0(organizationId, idpId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateOrganizationSamlIdpRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationSamlIdp_0");
      }
      // verify the required parameter 'idpId' is set
      if (idpId === undefined || idpId === null) {
        throw new Error("Missing the required parameter 'idpId' when calling updateOrganizationSamlIdp_0");
      }

      let pathParams = {
        'organizationId': organizationId,
        'idpId': idpId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationSamlIdps200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/saml/idps/{idpId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationSamlRole_0 operation.
     * @callback module:api/ConfigureApi~updateOrganizationSamlRole_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateOrganizationSamlRole200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a SAML role
     * Update a SAML role
     * @param {String} organizationId 
     * @param {String} samlRoleId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationSamlRoleRequest} [updateOrganizationSamlRoleRequest] 
     * @param {module:api/ConfigureApi~updateOrganizationSamlRole_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateOrganizationSamlRole200Response}
     */
    updateOrganizationSamlRole_0(organizationId, samlRoleId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateOrganizationSamlRoleRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationSamlRole_0");
      }
      // verify the required parameter 'samlRoleId' is set
      if (samlRoleId === undefined || samlRoleId === null) {
        throw new Error("Missing the required parameter 'samlRoleId' when calling updateOrganizationSamlRole_0");
      }

      let pathParams = {
        'organizationId': organizationId,
        'samlRoleId': samlRoleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateOrganizationSamlRole200Response;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/samlRoles/{samlRoleId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationSaml_0 operation.
     * @callback module:api/ConfigureApi~updateOrganizationSaml_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizationSaml200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the SAML SSO enabled settings for an organization.
     * Updates the SAML SSO enabled settings for an organization.
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationSamlRequest} [updateOrganizationSamlRequest] 
     * @param {module:api/ConfigureApi~updateOrganizationSaml_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizationSaml200Response}
     */
    updateOrganizationSaml_0(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateOrganizationSamlRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationSaml_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetOrganizationSaml200Response;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/saml', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationSnmp_0 operation.
     * @callback module:api/ConfigureApi~updateOrganizationSnmp_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the SNMP settings for an organization
     * Update the SNMP settings for an organization
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationSnmpRequest} [updateOrganizationSnmpRequest] 
     * @param {module:api/ConfigureApi~updateOrganizationSnmp_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateOrganizationSnmp_0(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateOrganizationSnmpRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationSnmp_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/snmp', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganization_0 operation.
     * @callback module:api/ConfigureApi~updateOrganization_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizations200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an organization
     * Update an organization
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationRequest} [updateOrganizationRequest] 
     * @param {module:api/ConfigureApi~updateOrganization_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizations200ResponseInner}
     */
    updateOrganization_0(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateOrganizationRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganization_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetOrganizations200ResponseInner;
      return this.apiClient.callApi(
        '/organizations/{organizationId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vmxNetworkDevicesClaim_0 operation.
     * @callback module:api/ConfigureApi~vmxNetworkDevicesClaim_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Claim a vMX into a network
     * Claim a vMX into a network
     * @param {String} networkId 
     * @param {module:model/VmxNetworkDevicesClaimRequest} vmxNetworkDevicesClaimRequest 
     * @param {module:api/ConfigureApi~vmxNetworkDevicesClaim_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    vmxNetworkDevicesClaim_0(networkId, vmxNetworkDevicesClaimRequest, callback) {
      let postBody = vmxNetworkDevicesClaimRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling vmxNetworkDevicesClaim_0");
      }
      // verify the required parameter 'vmxNetworkDevicesClaimRequest' is set
      if (vmxNetworkDevicesClaimRequest === undefined || vmxNetworkDevicesClaimRequest === null) {
        throw new Error("Missing the required parameter 'vmxNetworkDevicesClaimRequest' when calling vmxNetworkDevicesClaim_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/devices/claim/vmx', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the wipeNetworkSmDevices_0 operation.
     * @callback module:api/ConfigureApi~wipeNetworkSmDevices_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/WipeNetworkSmDevices200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Wipe a device
     * Wipe a device
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/WipeNetworkSmDevicesRequest} [wipeNetworkSmDevicesRequest] 
     * @param {module:api/ConfigureApi~wipeNetworkSmDevices_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WipeNetworkSmDevices200Response}
     */
    wipeNetworkSmDevices_0(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['wipeNetworkSmDevicesRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling wipeNetworkSmDevices_0");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WipeNetworkSmDevices200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/devices/wipe', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
