/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateNetworkMqttBrokerRequest from '../model/CreateNetworkMqttBrokerRequest';
import UpdateNetworkMqttBrokerRequest from '../model/UpdateNetworkMqttBrokerRequest';

/**
* MqttBrokers service.
* @module api/MqttBrokersApi
* @version 1.32.0
*/
export default class MqttBrokersApi {

    /**
    * Constructs a new MqttBrokersApi. 
    * @alias module:api/MqttBrokersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createNetworkMqttBroker_1 operation.
     * @callback module:api/MqttBrokersApi~createNetworkMqttBroker_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an MQTT broker
     * Add an MQTT broker
     * @param {String} networkId 
     * @param {module:model/CreateNetworkMqttBrokerRequest} createNetworkMqttBrokerRequest 
     * @param {module:api/MqttBrokersApi~createNetworkMqttBroker_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNetworkMqttBroker_1(networkId, createNetworkMqttBrokerRequest, callback) {
      let postBody = createNetworkMqttBrokerRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkMqttBroker_1");
      }
      // verify the required parameter 'createNetworkMqttBrokerRequest' is set
      if (createNetworkMqttBrokerRequest === undefined || createNetworkMqttBrokerRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkMqttBrokerRequest' when calling createNetworkMqttBroker_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/mqttBrokers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkMqttBroker_1 operation.
     * @callback module:api/MqttBrokersApi~deleteNetworkMqttBroker_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an MQTT broker
     * Delete an MQTT broker
     * @param {String} networkId 
     * @param {String} mqttBrokerId 
     * @param {module:api/MqttBrokersApi~deleteNetworkMqttBroker_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkMqttBroker_1(networkId, mqttBrokerId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkMqttBroker_1");
      }
      // verify the required parameter 'mqttBrokerId' is set
      if (mqttBrokerId === undefined || mqttBrokerId === null) {
        throw new Error("Missing the required parameter 'mqttBrokerId' when calling deleteNetworkMqttBroker_1");
      }

      let pathParams = {
        'networkId': networkId,
        'mqttBrokerId': mqttBrokerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/mqttBrokers/{mqttBrokerId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkMqttBroker_1 operation.
     * @callback module:api/MqttBrokersApi~getNetworkMqttBroker_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return an MQTT broker
     * Return an MQTT broker
     * @param {String} networkId 
     * @param {String} mqttBrokerId 
     * @param {module:api/MqttBrokersApi~getNetworkMqttBroker_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkMqttBroker_1(networkId, mqttBrokerId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkMqttBroker_1");
      }
      // verify the required parameter 'mqttBrokerId' is set
      if (mqttBrokerId === undefined || mqttBrokerId === null) {
        throw new Error("Missing the required parameter 'mqttBrokerId' when calling getNetworkMqttBroker_1");
      }

      let pathParams = {
        'networkId': networkId,
        'mqttBrokerId': mqttBrokerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/mqttBrokers/{mqttBrokerId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkMqttBrokers_1 operation.
     * @callback module:api/MqttBrokersApi~getNetworkMqttBrokers_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the MQTT brokers for this network
     * List the MQTT brokers for this network
     * @param {String} networkId 
     * @param {module:api/MqttBrokersApi~getNetworkMqttBrokers_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkMqttBrokers_1(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkMqttBrokers_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/mqttBrokers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkMqttBroker_1 operation.
     * @callback module:api/MqttBrokersApi~updateNetworkMqttBroker_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an MQTT broker
     * Update an MQTT broker
     * @param {String} networkId 
     * @param {String} mqttBrokerId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkMqttBrokerRequest} [updateNetworkMqttBrokerRequest] 
     * @param {module:api/MqttBrokersApi~updateNetworkMqttBroker_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkMqttBroker_1(networkId, mqttBrokerId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkMqttBrokerRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkMqttBroker_1");
      }
      // verify the required parameter 'mqttBrokerId' is set
      if (mqttBrokerId === undefined || mqttBrokerId === null) {
        throw new Error("Missing the required parameter 'mqttBrokerId' when calling updateNetworkMqttBroker_1");
      }

      let pathParams = {
        'networkId': networkId,
        'mqttBrokerId': mqttBrokerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/mqttBrokers/{mqttBrokerId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
