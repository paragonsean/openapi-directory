/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AssignOrganizationLicensesSeats200Response from '../model/AssignOrganizationLicensesSeats200Response';
import AssignOrganizationLicensesSeatsRequest from '../model/AssignOrganizationLicensesSeatsRequest';
import ClaimIntoOrganizationInventoryRequest from '../model/ClaimIntoOrganizationInventoryRequest';
import ClaimIntoOrganizationRequest from '../model/ClaimIntoOrganizationRequest';
import CloneOrganizationRequest from '../model/CloneOrganizationRequest';
import CombineOrganizationNetworks200Response from '../model/CombineOrganizationNetworks200Response';
import CombineOrganizationNetworksRequest from '../model/CombineOrganizationNetworksRequest';
import CreateOrganizationActionBatch201Response from '../model/CreateOrganizationActionBatch201Response';
import CreateOrganizationActionBatchRequest from '../model/CreateOrganizationActionBatchRequest';
import CreateOrganizationAdaptivePolicyAclRequest from '../model/CreateOrganizationAdaptivePolicyAclRequest';
import CreateOrganizationAdaptivePolicyGroupRequest from '../model/CreateOrganizationAdaptivePolicyGroupRequest';
import CreateOrganizationAdaptivePolicyPolicyRequest from '../model/CreateOrganizationAdaptivePolicyPolicyRequest';
import CreateOrganizationAdminRequest from '../model/CreateOrganizationAdminRequest';
import CreateOrganizationAlertsProfileRequest from '../model/CreateOrganizationAlertsProfileRequest';
import CreateOrganizationBrandingPolicy201Response from '../model/CreateOrganizationBrandingPolicy201Response';
import CreateOrganizationBrandingPolicyRequest from '../model/CreateOrganizationBrandingPolicyRequest';
import CreateOrganizationConfigTemplateRequest from '../model/CreateOrganizationConfigTemplateRequest';
import CreateOrganizationEarlyAccessFeaturesOptInRequest from '../model/CreateOrganizationEarlyAccessFeaturesOptInRequest';
import CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest from '../model/CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest';
import CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner from '../model/CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner';
import CreateOrganizationInventoryOnboardingCloudMonitoringImportRequest from '../model/CreateOrganizationInventoryOnboardingCloudMonitoringImportRequest';
import CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner from '../model/CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner';
import CreateOrganizationInventoryOnboardingCloudMonitoringPrepareRequest from '../model/CreateOrganizationInventoryOnboardingCloudMonitoringPrepareRequest';
import CreateOrganizationNetworkRequest from '../model/CreateOrganizationNetworkRequest';
import CreateOrganizationPolicyObjectRequest from '../model/CreateOrganizationPolicyObjectRequest';
import CreateOrganizationPolicyObjectsGroupRequest from '../model/CreateOrganizationPolicyObjectsGroupRequest';
import CreateOrganizationRequest from '../model/CreateOrganizationRequest';
import CreateOrganizationSamlIdpRequest from '../model/CreateOrganizationSamlIdpRequest';
import CreateOrganizationSamlRoleRequest from '../model/CreateOrganizationSamlRoleRequest';
import GetNetwork200Response from '../model/GetNetwork200Response';
import GetOrganizationAdaptivePolicyOverview200Response from '../model/GetOrganizationAdaptivePolicyOverview200Response';
import GetOrganizationApiRequests200ResponseInner from '../model/GetOrganizationApiRequests200ResponseInner';
import GetOrganizationApiRequestsOverviewResponseCodesByInterval200ResponseInner from '../model/GetOrganizationApiRequestsOverviewResponseCodesByInterval200ResponseInner';
import GetOrganizationBrandingPolicies200ResponseInner from '../model/GetOrganizationBrandingPolicies200ResponseInner';
import GetOrganizationBrandingPoliciesPriorities200Response from '../model/GetOrganizationBrandingPoliciesPriorities200Response';
import GetOrganizationClientsBandwidthUsageHistory200ResponseInner from '../model/GetOrganizationClientsBandwidthUsageHistory200ResponseInner';
import GetOrganizationClientsOverview200Response from '../model/GetOrganizationClientsOverview200Response';
import GetOrganizationDevices200ResponseInner from '../model/GetOrganizationDevices200ResponseInner';
import GetOrganizationDevicesAvailabilities200ResponseInner from '../model/GetOrganizationDevicesAvailabilities200ResponseInner';
import GetOrganizationDevicesPowerModulesStatusesByDevice200ResponseInner from '../model/GetOrganizationDevicesPowerModulesStatusesByDevice200ResponseInner';
import GetOrganizationDevicesStatuses200Response from '../model/GetOrganizationDevicesStatuses200Response';
import GetOrganizationDevicesStatusesOverview200Response from '../model/GetOrganizationDevicesStatusesOverview200Response';
import GetOrganizationDevicesUplinksAddressesByDevice200ResponseInner from '../model/GetOrganizationDevicesUplinksAddressesByDevice200ResponseInner';
import GetOrganizationDevicesUplinksLossAndLatency200ResponseInner from '../model/GetOrganizationDevicesUplinksLossAndLatency200ResponseInner';
import GetOrganizationFirmwareUpgrades200ResponseInner from '../model/GetOrganizationFirmwareUpgrades200ResponseInner';
import GetOrganizationFirmwareUpgradesByDevice200ResponseInner from '../model/GetOrganizationFirmwareUpgradesByDevice200ResponseInner';
import GetOrganizationInventoryDevices200ResponseInner from '../model/GetOrganizationInventoryDevices200ResponseInner';
import GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner from '../model/GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner';
import GetOrganizationLicenses200ResponseInner from '../model/GetOrganizationLicenses200ResponseInner';
import GetOrganizationLoginSecurity200Response from '../model/GetOrganizationLoginSecurity200Response';
import GetOrganizationSaml200Response from '../model/GetOrganizationSaml200Response';
import GetOrganizationSamlIdps200ResponseInner from '../model/GetOrganizationSamlIdps200ResponseInner';
import GetOrganizationSummaryTopAppliancesByUtilization200ResponseInner from '../model/GetOrganizationSummaryTopAppliancesByUtilization200ResponseInner';
import GetOrganizationSummaryTopClientsByUsage200ResponseInner from '../model/GetOrganizationSummaryTopClientsByUsage200ResponseInner';
import GetOrganizationSummaryTopClientsManufacturersByUsage200ResponseInner from '../model/GetOrganizationSummaryTopClientsManufacturersByUsage200ResponseInner';
import GetOrganizationSummaryTopDevicesByUsage200ResponseInner from '../model/GetOrganizationSummaryTopDevicesByUsage200ResponseInner';
import GetOrganizationSummaryTopDevicesModelsByUsage200ResponseInner from '../model/GetOrganizationSummaryTopDevicesModelsByUsage200ResponseInner';
import GetOrganizationSummaryTopSsidsByUsage200ResponseInner from '../model/GetOrganizationSummaryTopSsidsByUsage200ResponseInner';
import GetOrganizationSummaryTopSwitchesByEnergyUsage200ResponseInner from '../model/GetOrganizationSummaryTopSwitchesByEnergyUsage200ResponseInner';
import GetOrganizationUplinksStatuses200ResponseInner from '../model/GetOrganizationUplinksStatuses200ResponseInner';
import GetOrganizationWebhooksLogs200ResponseInner from '../model/GetOrganizationWebhooksLogs200ResponseInner';
import GetOrganizations200ResponseInner from '../model/GetOrganizations200ResponseInner';
import MoveOrganizationLicenses200Response from '../model/MoveOrganizationLicenses200Response';
import MoveOrganizationLicensesRequest from '../model/MoveOrganizationLicensesRequest';
import MoveOrganizationLicensesSeats200Response from '../model/MoveOrganizationLicensesSeats200Response';
import MoveOrganizationLicensesSeatsRequest from '../model/MoveOrganizationLicensesSeatsRequest';
import ReleaseFromOrganizationInventoryRequest from '../model/ReleaseFromOrganizationInventoryRequest';
import RenewOrganizationLicensesSeatsRequest from '../model/RenewOrganizationLicensesSeatsRequest';
import UpdateOrganizationActionBatchRequest from '../model/UpdateOrganizationActionBatchRequest';
import UpdateOrganizationAdaptivePolicyAclRequest from '../model/UpdateOrganizationAdaptivePolicyAclRequest';
import UpdateOrganizationAdaptivePolicyGroupRequest from '../model/UpdateOrganizationAdaptivePolicyGroupRequest';
import UpdateOrganizationAdaptivePolicyPolicyRequest from '../model/UpdateOrganizationAdaptivePolicyPolicyRequest';
import UpdateOrganizationAdaptivePolicySettingsRequest from '../model/UpdateOrganizationAdaptivePolicySettingsRequest';
import UpdateOrganizationAdminRequest from '../model/UpdateOrganizationAdminRequest';
import UpdateOrganizationAlertsProfileRequest from '../model/UpdateOrganizationAlertsProfileRequest';
import UpdateOrganizationBrandingPoliciesPrioritiesRequest from '../model/UpdateOrganizationBrandingPoliciesPrioritiesRequest';
import UpdateOrganizationBrandingPolicyRequest from '../model/UpdateOrganizationBrandingPolicyRequest';
import UpdateOrganizationConfigTemplateRequest from '../model/UpdateOrganizationConfigTemplateRequest';
import UpdateOrganizationEarlyAccessFeaturesOptInRequest from '../model/UpdateOrganizationEarlyAccessFeaturesOptInRequest';
import UpdateOrganizationLicenseRequest from '../model/UpdateOrganizationLicenseRequest';
import UpdateOrganizationLoginSecurityRequest from '../model/UpdateOrganizationLoginSecurityRequest';
import UpdateOrganizationPolicyObjectRequest from '../model/UpdateOrganizationPolicyObjectRequest';
import UpdateOrganizationPolicyObjectsGroupRequest from '../model/UpdateOrganizationPolicyObjectsGroupRequest';
import UpdateOrganizationRequest from '../model/UpdateOrganizationRequest';
import UpdateOrganizationSamlIdpRequest from '../model/UpdateOrganizationSamlIdpRequest';
import UpdateOrganizationSamlRequest from '../model/UpdateOrganizationSamlRequest';
import UpdateOrganizationSamlRole200Response from '../model/UpdateOrganizationSamlRole200Response';
import UpdateOrganizationSamlRoleRequest from '../model/UpdateOrganizationSamlRoleRequest';
import UpdateOrganizationSnmpRequest from '../model/UpdateOrganizationSnmpRequest';

/**
* Organizations service.
* @module api/OrganizationsApi
* @version 1.32.0
*/
export default class OrganizationsApi {

    /**
    * Constructs a new OrganizationsApi. 
    * @alias module:api/OrganizationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the assignOrganizationLicensesSeats operation.
     * @callback module:api/OrganizationsApi~assignOrganizationLicensesSeatsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssignOrganizationLicensesSeats200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assign SM seats to a network
     * Assign SM seats to a network. This will increase the managed SM device limit of the network
     * @param {String} organizationId 
     * @param {module:model/AssignOrganizationLicensesSeatsRequest} assignOrganizationLicensesSeatsRequest 
     * @param {module:api/OrganizationsApi~assignOrganizationLicensesSeatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssignOrganizationLicensesSeats200Response}
     */
    assignOrganizationLicensesSeats(organizationId, assignOrganizationLicensesSeatsRequest, callback) {
      let postBody = assignOrganizationLicensesSeatsRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling assignOrganizationLicensesSeats");
      }
      // verify the required parameter 'assignOrganizationLicensesSeatsRequest' is set
      if (assignOrganizationLicensesSeatsRequest === undefined || assignOrganizationLicensesSeatsRequest === null) {
        throw new Error("Missing the required parameter 'assignOrganizationLicensesSeatsRequest' when calling assignOrganizationLicensesSeats");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssignOrganizationLicensesSeats200Response;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/licenses/assignSeats', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the claimIntoOrganization operation.
     * @callback module:api/OrganizationsApi~claimIntoOrganizationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Claim a list of devices, licenses, and/or orders into an organization
     * Claim a list of devices, licenses, and/or orders into an organization. When claiming by order, all devices and licenses in the order will be claimed; licenses will be added to the organization and devices will be placed in the organization's inventory.
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ClaimIntoOrganizationRequest} [claimIntoOrganizationRequest] 
     * @param {module:api/OrganizationsApi~claimIntoOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    claimIntoOrganization(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = opts['claimIntoOrganizationRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling claimIntoOrganization");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/claim', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the claimIntoOrganizationInventory operation.
     * @callback module:api/OrganizationsApi~claimIntoOrganizationInventoryCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Claim a list of devices, licenses, and/or orders into an organization inventory
     * Claim a list of devices, licenses, and/or orders into an organization inventory. When claiming by order, all devices and licenses in the order will be claimed; licenses will be added to the organization and devices will be placed in the organization's inventory. Use /organizations/{organizationId}/inventory/release to release devices from an organization.
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ClaimIntoOrganizationInventoryRequest} [claimIntoOrganizationInventoryRequest] 
     * @param {module:api/OrganizationsApi~claimIntoOrganizationInventoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    claimIntoOrganizationInventory(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = opts['claimIntoOrganizationInventoryRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling claimIntoOrganizationInventory");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/inventory/claim', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloneOrganization operation.
     * @callback module:api/OrganizationsApi~cloneOrganizationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizations200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new organization by cloning the addressed organization
     * Create a new organization by cloning the addressed organization
     * @param {String} organizationId 
     * @param {module:model/CloneOrganizationRequest} cloneOrganizationRequest 
     * @param {module:api/OrganizationsApi~cloneOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizations200ResponseInner}
     */
    cloneOrganization(organizationId, cloneOrganizationRequest, callback) {
      let postBody = cloneOrganizationRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling cloneOrganization");
      }
      // verify the required parameter 'cloneOrganizationRequest' is set
      if (cloneOrganizationRequest === undefined || cloneOrganizationRequest === null) {
        throw new Error("Missing the required parameter 'cloneOrganizationRequest' when calling cloneOrganization");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetOrganizations200ResponseInner;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/clone', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the combineOrganizationNetworks operation.
     * @callback module:api/OrganizationsApi~combineOrganizationNetworksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CombineOrganizationNetworks200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Combine multiple networks into a single network
     * Combine multiple networks into a single network
     * @param {String} organizationId 
     * @param {module:model/CombineOrganizationNetworksRequest} combineOrganizationNetworksRequest 
     * @param {module:api/OrganizationsApi~combineOrganizationNetworksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CombineOrganizationNetworks200Response}
     */
    combineOrganizationNetworks(organizationId, combineOrganizationNetworksRequest, callback) {
      let postBody = combineOrganizationNetworksRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling combineOrganizationNetworks");
      }
      // verify the required parameter 'combineOrganizationNetworksRequest' is set
      if (combineOrganizationNetworksRequest === undefined || combineOrganizationNetworksRequest === null) {
        throw new Error("Missing the required parameter 'combineOrganizationNetworksRequest' when calling combineOrganizationNetworks");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CombineOrganizationNetworks200Response;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/networks/combine', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrganization operation.
     * @callback module:api/OrganizationsApi~createOrganizationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizations200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new organization
     * Create a new organization
     * @param {module:model/CreateOrganizationRequest} createOrganizationRequest 
     * @param {module:api/OrganizationsApi~createOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizations200ResponseInner}
     */
    createOrganization(createOrganizationRequest, callback) {
      let postBody = createOrganizationRequest;
      // verify the required parameter 'createOrganizationRequest' is set
      if (createOrganizationRequest === undefined || createOrganizationRequest === null) {
        throw new Error("Missing the required parameter 'createOrganizationRequest' when calling createOrganization");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetOrganizations200ResponseInner;
      return this.apiClient.callApi(
        '/organizations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrganizationActionBatch operation.
     * @callback module:api/OrganizationsApi~createOrganizationActionBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateOrganizationActionBatch201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an action batch
     * Create an action batch
     * @param {String} organizationId 
     * @param {module:model/CreateOrganizationActionBatchRequest} createOrganizationActionBatchRequest 
     * @param {module:api/OrganizationsApi~createOrganizationActionBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateOrganizationActionBatch201Response}
     */
    createOrganizationActionBatch(organizationId, createOrganizationActionBatchRequest, callback) {
      let postBody = createOrganizationActionBatchRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createOrganizationActionBatch");
      }
      // verify the required parameter 'createOrganizationActionBatchRequest' is set
      if (createOrganizationActionBatchRequest === undefined || createOrganizationActionBatchRequest === null) {
        throw new Error("Missing the required parameter 'createOrganizationActionBatchRequest' when calling createOrganizationActionBatch");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateOrganizationActionBatch201Response;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/actionBatches', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrganizationAdaptivePolicyAcl operation.
     * @callback module:api/OrganizationsApi~createOrganizationAdaptivePolicyAclCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new adaptive policy ACL
     * Creates new adaptive policy ACL
     * @param {String} organizationId 
     * @param {module:model/CreateOrganizationAdaptivePolicyAclRequest} createOrganizationAdaptivePolicyAclRequest 
     * @param {module:api/OrganizationsApi~createOrganizationAdaptivePolicyAclCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createOrganizationAdaptivePolicyAcl(organizationId, createOrganizationAdaptivePolicyAclRequest, callback) {
      let postBody = createOrganizationAdaptivePolicyAclRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createOrganizationAdaptivePolicyAcl");
      }
      // verify the required parameter 'createOrganizationAdaptivePolicyAclRequest' is set
      if (createOrganizationAdaptivePolicyAclRequest === undefined || createOrganizationAdaptivePolicyAclRequest === null) {
        throw new Error("Missing the required parameter 'createOrganizationAdaptivePolicyAclRequest' when calling createOrganizationAdaptivePolicyAcl");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/adaptivePolicy/acls', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrganizationAdaptivePolicyGroup operation.
     * @callback module:api/OrganizationsApi~createOrganizationAdaptivePolicyGroupCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new adaptive policy group
     * Creates a new adaptive policy group
     * @param {String} organizationId 
     * @param {module:model/CreateOrganizationAdaptivePolicyGroupRequest} createOrganizationAdaptivePolicyGroupRequest 
     * @param {module:api/OrganizationsApi~createOrganizationAdaptivePolicyGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createOrganizationAdaptivePolicyGroup(organizationId, createOrganizationAdaptivePolicyGroupRequest, callback) {
      let postBody = createOrganizationAdaptivePolicyGroupRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createOrganizationAdaptivePolicyGroup");
      }
      // verify the required parameter 'createOrganizationAdaptivePolicyGroupRequest' is set
      if (createOrganizationAdaptivePolicyGroupRequest === undefined || createOrganizationAdaptivePolicyGroupRequest === null) {
        throw new Error("Missing the required parameter 'createOrganizationAdaptivePolicyGroupRequest' when calling createOrganizationAdaptivePolicyGroup");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/adaptivePolicy/groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrganizationAdaptivePolicyPolicy operation.
     * @callback module:api/OrganizationsApi~createOrganizationAdaptivePolicyPolicyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an Adaptive Policy
     * Add an Adaptive Policy
     * @param {String} organizationId 
     * @param {module:model/CreateOrganizationAdaptivePolicyPolicyRequest} createOrganizationAdaptivePolicyPolicyRequest 
     * @param {module:api/OrganizationsApi~createOrganizationAdaptivePolicyPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createOrganizationAdaptivePolicyPolicy(organizationId, createOrganizationAdaptivePolicyPolicyRequest, callback) {
      let postBody = createOrganizationAdaptivePolicyPolicyRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createOrganizationAdaptivePolicyPolicy");
      }
      // verify the required parameter 'createOrganizationAdaptivePolicyPolicyRequest' is set
      if (createOrganizationAdaptivePolicyPolicyRequest === undefined || createOrganizationAdaptivePolicyPolicyRequest === null) {
        throw new Error("Missing the required parameter 'createOrganizationAdaptivePolicyPolicyRequest' when calling createOrganizationAdaptivePolicyPolicy");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/adaptivePolicy/policies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrganizationAdmin operation.
     * @callback module:api/OrganizationsApi~createOrganizationAdminCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new dashboard administrator
     * Create a new dashboard administrator
     * @param {String} organizationId 
     * @param {module:model/CreateOrganizationAdminRequest} createOrganizationAdminRequest 
     * @param {module:api/OrganizationsApi~createOrganizationAdminCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createOrganizationAdmin(organizationId, createOrganizationAdminRequest, callback) {
      let postBody = createOrganizationAdminRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createOrganizationAdmin");
      }
      // verify the required parameter 'createOrganizationAdminRequest' is set
      if (createOrganizationAdminRequest === undefined || createOrganizationAdminRequest === null) {
        throw new Error("Missing the required parameter 'createOrganizationAdminRequest' when calling createOrganizationAdmin");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/admins', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrganizationAlertsProfile operation.
     * @callback module:api/OrganizationsApi~createOrganizationAlertsProfileCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an organization-wide alert configuration
     * Create an organization-wide alert configuration
     * @param {String} organizationId 
     * @param {module:model/CreateOrganizationAlertsProfileRequest} createOrganizationAlertsProfileRequest 
     * @param {module:api/OrganizationsApi~createOrganizationAlertsProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createOrganizationAlertsProfile(organizationId, createOrganizationAlertsProfileRequest, callback) {
      let postBody = createOrganizationAlertsProfileRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createOrganizationAlertsProfile");
      }
      // verify the required parameter 'createOrganizationAlertsProfileRequest' is set
      if (createOrganizationAlertsProfileRequest === undefined || createOrganizationAlertsProfileRequest === null) {
        throw new Error("Missing the required parameter 'createOrganizationAlertsProfileRequest' when calling createOrganizationAlertsProfile");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/alerts/profiles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrganizationBrandingPolicy operation.
     * @callback module:api/OrganizationsApi~createOrganizationBrandingPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateOrganizationBrandingPolicy201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new branding policy to an organization
     * Add a new branding policy to an organization
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateOrganizationBrandingPolicyRequest} [createOrganizationBrandingPolicyRequest] 
     * @param {module:api/OrganizationsApi~createOrganizationBrandingPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateOrganizationBrandingPolicy201Response}
     */
    createOrganizationBrandingPolicy(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = opts['createOrganizationBrandingPolicyRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createOrganizationBrandingPolicy");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateOrganizationBrandingPolicy201Response;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/brandingPolicies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrganizationConfigTemplate operation.
     * @callback module:api/OrganizationsApi~createOrganizationConfigTemplateCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new configuration template
     * Create a new configuration template
     * @param {String} organizationId 
     * @param {module:model/CreateOrganizationConfigTemplateRequest} createOrganizationConfigTemplateRequest 
     * @param {module:api/OrganizationsApi~createOrganizationConfigTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createOrganizationConfigTemplate(organizationId, createOrganizationConfigTemplateRequest, callback) {
      let postBody = createOrganizationConfigTemplateRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createOrganizationConfigTemplate");
      }
      // verify the required parameter 'createOrganizationConfigTemplateRequest' is set
      if (createOrganizationConfigTemplateRequest === undefined || createOrganizationConfigTemplateRequest === null) {
        throw new Error("Missing the required parameter 'createOrganizationConfigTemplateRequest' when calling createOrganizationConfigTemplate");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/configTemplates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrganizationEarlyAccessFeaturesOptIn operation.
     * @callback module:api/OrganizationsApi~createOrganizationEarlyAccessFeaturesOptInCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new early access feature opt-in for an organization
     * Create a new early access feature opt-in for an organization
     * @param {String} organizationId 
     * @param {module:model/CreateOrganizationEarlyAccessFeaturesOptInRequest} createOrganizationEarlyAccessFeaturesOptInRequest 
     * @param {module:api/OrganizationsApi~createOrganizationEarlyAccessFeaturesOptInCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createOrganizationEarlyAccessFeaturesOptIn(organizationId, createOrganizationEarlyAccessFeaturesOptInRequest, callback) {
      let postBody = createOrganizationEarlyAccessFeaturesOptInRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createOrganizationEarlyAccessFeaturesOptIn");
      }
      // verify the required parameter 'createOrganizationEarlyAccessFeaturesOptInRequest' is set
      if (createOrganizationEarlyAccessFeaturesOptInRequest === undefined || createOrganizationEarlyAccessFeaturesOptInRequest === null) {
        throw new Error("Missing the required parameter 'createOrganizationEarlyAccessFeaturesOptInRequest' when calling createOrganizationEarlyAccessFeaturesOptIn");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/earlyAccess/features/optIns', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrganizationInventoryOnboardingCloudMonitoringExportEvent operation.
     * @callback module:api/OrganizationsApi~createOrganizationInventoryOnboardingCloudMonitoringExportEventCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Imports event logs related to the onboarding app into elastisearch
     * Imports event logs related to the onboarding app into elastisearch
     * @param {String} organizationId 
     * @param {module:model/CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest} createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest 
     * @param {module:api/OrganizationsApi~createOrganizationInventoryOnboardingCloudMonitoringExportEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createOrganizationInventoryOnboardingCloudMonitoringExportEvent(organizationId, createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest, callback) {
      let postBody = createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createOrganizationInventoryOnboardingCloudMonitoringExportEvent");
      }
      // verify the required parameter 'createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest' is set
      if (createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest === undefined || createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest === null) {
        throw new Error("Missing the required parameter 'createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest' when calling createOrganizationInventoryOnboardingCloudMonitoringExportEvent");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/exportEvents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrganizationInventoryOnboardingCloudMonitoringImport operation.
     * @callback module:api/OrganizationsApi~createOrganizationInventoryOnboardingCloudMonitoringImportCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Commits the import operation to complete the onboarding of a device into Dashboard for monitoring.
     * Commits the import operation to complete the onboarding of a device into Dashboard for monitoring.
     * @param {String} organizationId 
     * @param {module:model/CreateOrganizationInventoryOnboardingCloudMonitoringImportRequest} createOrganizationInventoryOnboardingCloudMonitoringImportRequest 
     * @param {module:api/OrganizationsApi~createOrganizationInventoryOnboardingCloudMonitoringImportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner>}
     */
    createOrganizationInventoryOnboardingCloudMonitoringImport(organizationId, createOrganizationInventoryOnboardingCloudMonitoringImportRequest, callback) {
      let postBody = createOrganizationInventoryOnboardingCloudMonitoringImportRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createOrganizationInventoryOnboardingCloudMonitoringImport");
      }
      // verify the required parameter 'createOrganizationInventoryOnboardingCloudMonitoringImportRequest' is set
      if (createOrganizationInventoryOnboardingCloudMonitoringImportRequest === undefined || createOrganizationInventoryOnboardingCloudMonitoringImportRequest === null) {
        throw new Error("Missing the required parameter 'createOrganizationInventoryOnboardingCloudMonitoringImportRequest' when calling createOrganizationInventoryOnboardingCloudMonitoringImport");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/imports', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrganizationInventoryOnboardingCloudMonitoringPrepare operation.
     * @callback module:api/OrganizationsApi~createOrganizationInventoryOnboardingCloudMonitoringPrepareCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiates or updates an import session
     * Initiates or updates an import session. An import ID will be generated and used when you are ready to commit the import.
     * @param {String} organizationId 
     * @param {module:model/CreateOrganizationInventoryOnboardingCloudMonitoringPrepareRequest} createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest 
     * @param {module:api/OrganizationsApi~createOrganizationInventoryOnboardingCloudMonitoringPrepareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner>}
     */
    createOrganizationInventoryOnboardingCloudMonitoringPrepare(organizationId, createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest, callback) {
      let postBody = createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createOrganizationInventoryOnboardingCloudMonitoringPrepare");
      }
      // verify the required parameter 'createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest' is set
      if (createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest === undefined || createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest === null) {
        throw new Error("Missing the required parameter 'createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest' when calling createOrganizationInventoryOnboardingCloudMonitoringPrepare");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/prepare', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrganizationNetwork operation.
     * @callback module:api/OrganizationsApi~createOrganizationNetworkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetwork200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a network
     * Create a network
     * @param {String} organizationId 
     * @param {module:model/CreateOrganizationNetworkRequest} createOrganizationNetworkRequest 
     * @param {module:api/OrganizationsApi~createOrganizationNetworkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetwork200Response}
     */
    createOrganizationNetwork(organizationId, createOrganizationNetworkRequest, callback) {
      let postBody = createOrganizationNetworkRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createOrganizationNetwork");
      }
      // verify the required parameter 'createOrganizationNetworkRequest' is set
      if (createOrganizationNetworkRequest === undefined || createOrganizationNetworkRequest === null) {
        throw new Error("Missing the required parameter 'createOrganizationNetworkRequest' when calling createOrganizationNetwork");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetwork200Response;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/networks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrganizationPolicyObject operation.
     * @callback module:api/OrganizationsApi~createOrganizationPolicyObjectCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new Policy Object.
     * Creates a new Policy Object.
     * @param {String} organizationId 
     * @param {module:model/CreateOrganizationPolicyObjectRequest} createOrganizationPolicyObjectRequest 
     * @param {module:api/OrganizationsApi~createOrganizationPolicyObjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createOrganizationPolicyObject(organizationId, createOrganizationPolicyObjectRequest, callback) {
      let postBody = createOrganizationPolicyObjectRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createOrganizationPolicyObject");
      }
      // verify the required parameter 'createOrganizationPolicyObjectRequest' is set
      if (createOrganizationPolicyObjectRequest === undefined || createOrganizationPolicyObjectRequest === null) {
        throw new Error("Missing the required parameter 'createOrganizationPolicyObjectRequest' when calling createOrganizationPolicyObject");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/policyObjects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrganizationPolicyObjectsGroup operation.
     * @callback module:api/OrganizationsApi~createOrganizationPolicyObjectsGroupCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new Policy Object Group.
     * Creates a new Policy Object Group.
     * @param {String} organizationId 
     * @param {module:model/CreateOrganizationPolicyObjectsGroupRequest} createOrganizationPolicyObjectsGroupRequest 
     * @param {module:api/OrganizationsApi~createOrganizationPolicyObjectsGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createOrganizationPolicyObjectsGroup(organizationId, createOrganizationPolicyObjectsGroupRequest, callback) {
      let postBody = createOrganizationPolicyObjectsGroupRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createOrganizationPolicyObjectsGroup");
      }
      // verify the required parameter 'createOrganizationPolicyObjectsGroupRequest' is set
      if (createOrganizationPolicyObjectsGroupRequest === undefined || createOrganizationPolicyObjectsGroupRequest === null) {
        throw new Error("Missing the required parameter 'createOrganizationPolicyObjectsGroupRequest' when calling createOrganizationPolicyObjectsGroup");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/policyObjects/groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrganizationSamlIdp operation.
     * @callback module:api/OrganizationsApi~createOrganizationSamlIdpCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationSamlIdps200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a SAML IdP for your organization.
     * Create a SAML IdP for your organization.
     * @param {String} organizationId 
     * @param {module:model/CreateOrganizationSamlIdpRequest} createOrganizationSamlIdpRequest 
     * @param {module:api/OrganizationsApi~createOrganizationSamlIdpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationSamlIdps200ResponseInner>}
     */
    createOrganizationSamlIdp(organizationId, createOrganizationSamlIdpRequest, callback) {
      let postBody = createOrganizationSamlIdpRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createOrganizationSamlIdp");
      }
      // verify the required parameter 'createOrganizationSamlIdpRequest' is set
      if (createOrganizationSamlIdpRequest === undefined || createOrganizationSamlIdpRequest === null) {
        throw new Error("Missing the required parameter 'createOrganizationSamlIdpRequest' when calling createOrganizationSamlIdp");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationSamlIdps200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/saml/idps', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrganizationSamlRole operation.
     * @callback module:api/OrganizationsApi~createOrganizationSamlRoleCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a SAML role
     * Create a SAML role
     * @param {String} organizationId 
     * @param {module:model/CreateOrganizationSamlRoleRequest} createOrganizationSamlRoleRequest 
     * @param {module:api/OrganizationsApi~createOrganizationSamlRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createOrganizationSamlRole(organizationId, createOrganizationSamlRoleRequest, callback) {
      let postBody = createOrganizationSamlRoleRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createOrganizationSamlRole");
      }
      // verify the required parameter 'createOrganizationSamlRoleRequest' is set
      if (createOrganizationSamlRoleRequest === undefined || createOrganizationSamlRoleRequest === null) {
        throw new Error("Missing the required parameter 'createOrganizationSamlRoleRequest' when calling createOrganizationSamlRole");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/samlRoles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganization operation.
     * @callback module:api/OrganizationsApi~deleteOrganizationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an organization
     * Delete an organization
     * @param {String} organizationId 
     * @param {module:api/OrganizationsApi~deleteOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganization(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteOrganization");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{organizationId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganizationActionBatch operation.
     * @callback module:api/OrganizationsApi~deleteOrganizationActionBatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an action batch
     * Delete an action batch
     * @param {String} organizationId 
     * @param {String} actionBatchId 
     * @param {module:api/OrganizationsApi~deleteOrganizationActionBatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganizationActionBatch(organizationId, actionBatchId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteOrganizationActionBatch");
      }
      // verify the required parameter 'actionBatchId' is set
      if (actionBatchId === undefined || actionBatchId === null) {
        throw new Error("Missing the required parameter 'actionBatchId' when calling deleteOrganizationActionBatch");
      }

      let pathParams = {
        'organizationId': organizationId,
        'actionBatchId': actionBatchId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/actionBatches/{actionBatchId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganizationAdaptivePolicyAcl operation.
     * @callback module:api/OrganizationsApi~deleteOrganizationAdaptivePolicyAclCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified adaptive policy ACL
     * Deletes the specified adaptive policy ACL. Note this adaptive policy ACL will also be removed from policies using it.
     * @param {String} organizationId 
     * @param {String} aclId 
     * @param {module:api/OrganizationsApi~deleteOrganizationAdaptivePolicyAclCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganizationAdaptivePolicyAcl(organizationId, aclId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteOrganizationAdaptivePolicyAcl");
      }
      // verify the required parameter 'aclId' is set
      if (aclId === undefined || aclId === null) {
        throw new Error("Missing the required parameter 'aclId' when calling deleteOrganizationAdaptivePolicyAcl");
      }

      let pathParams = {
        'organizationId': organizationId,
        'aclId': aclId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/adaptivePolicy/acls/{aclId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganizationAdaptivePolicyGroup operation.
     * @callback module:api/OrganizationsApi~deleteOrganizationAdaptivePolicyGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified adaptive policy group and any associated policies and references
     * Deletes the specified adaptive policy group and any associated policies and references
     * @param {String} organizationId 
     * @param {String} id 
     * @param {module:api/OrganizationsApi~deleteOrganizationAdaptivePolicyGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganizationAdaptivePolicyGroup(organizationId, id, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteOrganizationAdaptivePolicyGroup");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOrganizationAdaptivePolicyGroup");
      }

      let pathParams = {
        'organizationId': organizationId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/adaptivePolicy/groups/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganizationAdaptivePolicyPolicy operation.
     * @callback module:api/OrganizationsApi~deleteOrganizationAdaptivePolicyPolicyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an Adaptive Policy
     * Delete an Adaptive Policy
     * @param {String} organizationId 
     * @param {String} id 
     * @param {module:api/OrganizationsApi~deleteOrganizationAdaptivePolicyPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganizationAdaptivePolicyPolicy(organizationId, id, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteOrganizationAdaptivePolicyPolicy");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOrganizationAdaptivePolicyPolicy");
      }

      let pathParams = {
        'organizationId': organizationId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/adaptivePolicy/policies/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganizationAdmin operation.
     * @callback module:api/OrganizationsApi~deleteOrganizationAdminCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Revoke all access for a dashboard administrator within this organization
     * Revoke all access for a dashboard administrator within this organization
     * @param {String} organizationId 
     * @param {String} adminId 
     * @param {module:api/OrganizationsApi~deleteOrganizationAdminCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganizationAdmin(organizationId, adminId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteOrganizationAdmin");
      }
      // verify the required parameter 'adminId' is set
      if (adminId === undefined || adminId === null) {
        throw new Error("Missing the required parameter 'adminId' when calling deleteOrganizationAdmin");
      }

      let pathParams = {
        'organizationId': organizationId,
        'adminId': adminId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/admins/{adminId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganizationAlertsProfile operation.
     * @callback module:api/OrganizationsApi~deleteOrganizationAlertsProfileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes an organization-wide alert config
     * Removes an organization-wide alert config
     * @param {String} organizationId 
     * @param {String} alertConfigId 
     * @param {module:api/OrganizationsApi~deleteOrganizationAlertsProfileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganizationAlertsProfile(organizationId, alertConfigId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteOrganizationAlertsProfile");
      }
      // verify the required parameter 'alertConfigId' is set
      if (alertConfigId === undefined || alertConfigId === null) {
        throw new Error("Missing the required parameter 'alertConfigId' when calling deleteOrganizationAlertsProfile");
      }

      let pathParams = {
        'organizationId': organizationId,
        'alertConfigId': alertConfigId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/alerts/profiles/{alertConfigId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganizationBrandingPolicy operation.
     * @callback module:api/OrganizationsApi~deleteOrganizationBrandingPolicyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a branding policy
     * Delete a branding policy
     * @param {String} organizationId 
     * @param {String} brandingPolicyId 
     * @param {module:api/OrganizationsApi~deleteOrganizationBrandingPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganizationBrandingPolicy(organizationId, brandingPolicyId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteOrganizationBrandingPolicy");
      }
      // verify the required parameter 'brandingPolicyId' is set
      if (brandingPolicyId === undefined || brandingPolicyId === null) {
        throw new Error("Missing the required parameter 'brandingPolicyId' when calling deleteOrganizationBrandingPolicy");
      }

      let pathParams = {
        'organizationId': organizationId,
        'brandingPolicyId': brandingPolicyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/brandingPolicies/{brandingPolicyId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganizationConfigTemplate operation.
     * @callback module:api/OrganizationsApi~deleteOrganizationConfigTemplateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a configuration template
     * Remove a configuration template
     * @param {String} organizationId 
     * @param {String} configTemplateId 
     * @param {module:api/OrganizationsApi~deleteOrganizationConfigTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganizationConfigTemplate(organizationId, configTemplateId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteOrganizationConfigTemplate");
      }
      // verify the required parameter 'configTemplateId' is set
      if (configTemplateId === undefined || configTemplateId === null) {
        throw new Error("Missing the required parameter 'configTemplateId' when calling deleteOrganizationConfigTemplate");
      }

      let pathParams = {
        'organizationId': organizationId,
        'configTemplateId': configTemplateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/configTemplates/{configTemplateId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganizationEarlyAccessFeaturesOptIn operation.
     * @callback module:api/OrganizationsApi~deleteOrganizationEarlyAccessFeaturesOptInCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an early access feature opt-in
     * Delete an early access feature opt-in
     * @param {String} organizationId 
     * @param {String} optInId 
     * @param {module:api/OrganizationsApi~deleteOrganizationEarlyAccessFeaturesOptInCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganizationEarlyAccessFeaturesOptIn(organizationId, optInId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteOrganizationEarlyAccessFeaturesOptIn");
      }
      // verify the required parameter 'optInId' is set
      if (optInId === undefined || optInId === null) {
        throw new Error("Missing the required parameter 'optInId' when calling deleteOrganizationEarlyAccessFeaturesOptIn");
      }

      let pathParams = {
        'organizationId': organizationId,
        'optInId': optInId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/earlyAccess/features/optIns/{optInId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganizationPolicyObject operation.
     * @callback module:api/OrganizationsApi~deleteOrganizationPolicyObjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Policy Object.
     * Deletes a Policy Object.
     * @param {String} organizationId 
     * @param {String} policyObjectId 
     * @param {module:api/OrganizationsApi~deleteOrganizationPolicyObjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganizationPolicyObject(organizationId, policyObjectId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteOrganizationPolicyObject");
      }
      // verify the required parameter 'policyObjectId' is set
      if (policyObjectId === undefined || policyObjectId === null) {
        throw new Error("Missing the required parameter 'policyObjectId' when calling deleteOrganizationPolicyObject");
      }

      let pathParams = {
        'organizationId': organizationId,
        'policyObjectId': policyObjectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/policyObjects/{policyObjectId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganizationPolicyObjectsGroup operation.
     * @callback module:api/OrganizationsApi~deleteOrganizationPolicyObjectsGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Policy Object Group.
     * Deletes a Policy Object Group.
     * @param {String} organizationId 
     * @param {String} policyObjectGroupId 
     * @param {module:api/OrganizationsApi~deleteOrganizationPolicyObjectsGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganizationPolicyObjectsGroup(organizationId, policyObjectGroupId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteOrganizationPolicyObjectsGroup");
      }
      // verify the required parameter 'policyObjectGroupId' is set
      if (policyObjectGroupId === undefined || policyObjectGroupId === null) {
        throw new Error("Missing the required parameter 'policyObjectGroupId' when calling deleteOrganizationPolicyObjectsGroup");
      }

      let pathParams = {
        'organizationId': organizationId,
        'policyObjectGroupId': policyObjectGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/policyObjects/groups/{policyObjectGroupId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganizationSamlIdp operation.
     * @callback module:api/OrganizationsApi~deleteOrganizationSamlIdpCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a SAML IdP in your organization.
     * Remove a SAML IdP in your organization.
     * @param {String} organizationId 
     * @param {String} idpId 
     * @param {module:api/OrganizationsApi~deleteOrganizationSamlIdpCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganizationSamlIdp(organizationId, idpId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteOrganizationSamlIdp");
      }
      // verify the required parameter 'idpId' is set
      if (idpId === undefined || idpId === null) {
        throw new Error("Missing the required parameter 'idpId' when calling deleteOrganizationSamlIdp");
      }

      let pathParams = {
        'organizationId': organizationId,
        'idpId': idpId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/saml/idps/{idpId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganizationSamlRole operation.
     * @callback module:api/OrganizationsApi~deleteOrganizationSamlRoleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a SAML role
     * Remove a SAML role
     * @param {String} organizationId 
     * @param {String} samlRoleId 
     * @param {module:api/OrganizationsApi~deleteOrganizationSamlRoleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganizationSamlRole(organizationId, samlRoleId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteOrganizationSamlRole");
      }
      // verify the required parameter 'samlRoleId' is set
      if (samlRoleId === undefined || samlRoleId === null) {
        throw new Error("Missing the required parameter 'samlRoleId' when calling deleteOrganizationSamlRole");
      }

      let pathParams = {
        'organizationId': organizationId,
        'samlRoleId': samlRoleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/samlRoles/{samlRoleId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganizationUser operation.
     * @callback module:api/OrganizationsApi~deleteOrganizationUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a user and all of its authentication methods.
     * Delete a user and all of its authentication methods.
     * @param {String} organizationId 
     * @param {String} userId 
     * @param {module:api/OrganizationsApi~deleteOrganizationUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganizationUser(organizationId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteOrganizationUser");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteOrganizationUser");
      }

      let pathParams = {
        'organizationId': organizationId,
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/users/{userId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganization operation.
     * @callback module:api/OrganizationsApi~getOrganizationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizations200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return an organization
     * Return an organization
     * @param {String} organizationId 
     * @param {module:api/OrganizationsApi~getOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizations200ResponseInner}
     */
    getOrganization(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganization");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOrganizations200ResponseInner;
      return this.apiClient.callApi(
        '/organizations/{organizationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationActionBatch operation.
     * @callback module:api/OrganizationsApi~getOrganizationActionBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateOrganizationActionBatch201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return an action batch
     * Return an action batch
     * @param {String} organizationId 
     * @param {String} actionBatchId 
     * @param {module:api/OrganizationsApi~getOrganizationActionBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateOrganizationActionBatch201Response}
     */
    getOrganizationActionBatch(organizationId, actionBatchId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationActionBatch");
      }
      // verify the required parameter 'actionBatchId' is set
      if (actionBatchId === undefined || actionBatchId === null) {
        throw new Error("Missing the required parameter 'actionBatchId' when calling getOrganizationActionBatch");
      }

      let pathParams = {
        'organizationId': organizationId,
        'actionBatchId': actionBatchId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreateOrganizationActionBatch201Response;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/actionBatches/{actionBatchId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationActionBatches operation.
     * @callback module:api/OrganizationsApi~getOrganizationActionBatchesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the list of action batches in the organization
     * Return the list of action batches in the organization
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [status] Filter batches by status. Valid types are pending, completed, and failed.
     * @param {module:api/OrganizationsApi~getOrganizationActionBatchesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getOrganizationActionBatches(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationActionBatches");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'status': opts['status']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/actionBatches', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationAdaptivePolicyAcl operation.
     * @callback module:api/OrganizationsApi~getOrganizationAdaptivePolicyAclCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the adaptive policy ACL information
     * Returns the adaptive policy ACL information
     * @param {String} organizationId 
     * @param {String} aclId 
     * @param {module:api/OrganizationsApi~getOrganizationAdaptivePolicyAclCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getOrganizationAdaptivePolicyAcl(organizationId, aclId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationAdaptivePolicyAcl");
      }
      // verify the required parameter 'aclId' is set
      if (aclId === undefined || aclId === null) {
        throw new Error("Missing the required parameter 'aclId' when calling getOrganizationAdaptivePolicyAcl");
      }

      let pathParams = {
        'organizationId': organizationId,
        'aclId': aclId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/adaptivePolicy/acls/{aclId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationAdaptivePolicyAcls operation.
     * @callback module:api/OrganizationsApi~getOrganizationAdaptivePolicyAclsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List adaptive policy ACLs in a organization
     * List adaptive policy ACLs in a organization
     * @param {String} organizationId 
     * @param {module:api/OrganizationsApi~getOrganizationAdaptivePolicyAclsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getOrganizationAdaptivePolicyAcls(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationAdaptivePolicyAcls");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/adaptivePolicy/acls', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationAdaptivePolicyGroup operation.
     * @callback module:api/OrganizationsApi~getOrganizationAdaptivePolicyGroupCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an adaptive policy group
     * Returns an adaptive policy group
     * @param {String} organizationId 
     * @param {String} id 
     * @param {module:api/OrganizationsApi~getOrganizationAdaptivePolicyGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getOrganizationAdaptivePolicyGroup(organizationId, id, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationAdaptivePolicyGroup");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganizationAdaptivePolicyGroup");
      }

      let pathParams = {
        'organizationId': organizationId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/adaptivePolicy/groups/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationAdaptivePolicyGroups operation.
     * @callback module:api/OrganizationsApi~getOrganizationAdaptivePolicyGroupsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List adaptive policy groups in a organization
     * List adaptive policy groups in a organization
     * @param {String} organizationId 
     * @param {module:api/OrganizationsApi~getOrganizationAdaptivePolicyGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getOrganizationAdaptivePolicyGroups(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationAdaptivePolicyGroups");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/adaptivePolicy/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationAdaptivePolicyOverview operation.
     * @callback module:api/OrganizationsApi~getOrganizationAdaptivePolicyOverviewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizationAdaptivePolicyOverview200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns adaptive policy aggregate statistics for an organization
     * Returns adaptive policy aggregate statistics for an organization
     * @param {String} organizationId 
     * @param {module:api/OrganizationsApi~getOrganizationAdaptivePolicyOverviewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizationAdaptivePolicyOverview200Response}
     */
    getOrganizationAdaptivePolicyOverview(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationAdaptivePolicyOverview");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOrganizationAdaptivePolicyOverview200Response;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/adaptivePolicy/overview', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationAdaptivePolicyPolicies operation.
     * @callback module:api/OrganizationsApi~getOrganizationAdaptivePolicyPoliciesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List adaptive policies in an organization
     * List adaptive policies in an organization
     * @param {String} organizationId 
     * @param {module:api/OrganizationsApi~getOrganizationAdaptivePolicyPoliciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getOrganizationAdaptivePolicyPolicies(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationAdaptivePolicyPolicies");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/adaptivePolicy/policies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationAdaptivePolicyPolicy operation.
     * @callback module:api/OrganizationsApi~getOrganizationAdaptivePolicyPolicyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return an adaptive policy
     * Return an adaptive policy
     * @param {String} organizationId 
     * @param {String} id 
     * @param {module:api/OrganizationsApi~getOrganizationAdaptivePolicyPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getOrganizationAdaptivePolicyPolicy(organizationId, id, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationAdaptivePolicyPolicy");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganizationAdaptivePolicyPolicy");
      }

      let pathParams = {
        'organizationId': organizationId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/adaptivePolicy/policies/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationAdaptivePolicySettings operation.
     * @callback module:api/OrganizationsApi~getOrganizationAdaptivePolicySettingsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns global adaptive policy settings in an organization
     * Returns global adaptive policy settings in an organization
     * @param {String} organizationId 
     * @param {module:api/OrganizationsApi~getOrganizationAdaptivePolicySettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getOrganizationAdaptivePolicySettings(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationAdaptivePolicySettings");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/adaptivePolicy/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationAdmins operation.
     * @callback module:api/OrganizationsApi~getOrganizationAdminsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the dashboard administrators in this organization
     * List the dashboard administrators in this organization
     * @param {String} organizationId 
     * @param {module:api/OrganizationsApi~getOrganizationAdminsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getOrganizationAdmins(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationAdmins");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/admins', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationAlertsProfiles operation.
     * @callback module:api/OrganizationsApi~getOrganizationAlertsProfilesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all organization-wide alert configurations
     * List all organization-wide alert configurations
     * @param {String} organizationId 
     * @param {module:api/OrganizationsApi~getOrganizationAlertsProfilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getOrganizationAlertsProfiles(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationAlertsProfiles");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/alerts/profiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationApiRequests operation.
     * @callback module:api/OrganizationsApi~getOrganizationApiRequestsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationApiRequests200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the API requests made by an organization
     * List the API requests made by an organization
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 31 days.
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 50.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [adminId] Filter the results by the ID of the admin who made the API requests
     * @param {String} [path] Filter the results by the path of the API requests
     * @param {module:model/String} [method] Filter the results by the method of the API requests (must be 'GET', 'PUT', 'POST' or 'DELETE')
     * @param {Number} [responseCode] Filter the results by the response code of the API requests
     * @param {String} [sourceIp] Filter the results by the IP address of the originating API request
     * @param {String} [userAgent] Filter the results by the user agent string of the API request
     * @param {module:model/Number} [version] Filter the results by the API version of the API request
     * @param {Array.<String>} [operationIds] Filter the results by one or more operation IDs for the API request
     * @param {module:api/OrganizationsApi~getOrganizationApiRequestsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationApiRequests200ResponseInner>}
     */
    getOrganizationApiRequests(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationApiRequests");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan'],
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        'adminId': opts['adminId'],
        'path': opts['path'],
        'method': opts['method'],
        'responseCode': opts['responseCode'],
        'sourceIp': opts['sourceIp'],
        'userAgent': opts['userAgent'],
        'version': opts['version'],
        'operationIds': this.apiClient.buildCollectionParam(opts['operationIds'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationApiRequests200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/apiRequests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationApiRequestsOverview operation.
     * @callback module:api/OrganizationsApi~getOrganizationApiRequestsOverviewCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return an aggregated overview of API requests data
     * Return an aggregated overview of API requests data
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 31 days.
     * @param {module:api/OrganizationsApi~getOrganizationApiRequestsOverviewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getOrganizationApiRequestsOverview(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationApiRequestsOverview");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/apiRequests/overview', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationApiRequestsOverviewResponseCodesByInterval operation.
     * @callback module:api/OrganizationsApi~getOrganizationApiRequestsOverviewResponseCodesByIntervalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationApiRequestsOverviewResponseCodesByInterval200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tracks organizations' API requests by response code across a given time period
     * Tracks organizations' API requests by response code across a given time period
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 31 days. If interval is provided, the timespan will be autocalculated.
     * @param {Number} [interval] The time interval in seconds for returned data. The valid intervals are: 120, 3600, 14400, 21600. The default is 21600. Interval is calculated if time params are provided.
     * @param {module:model/Number} [version] Filter by API version of the endpoint. Allowable values are: [0, 1]
     * @param {Array.<String>} [operationIds] Filter by operation ID of the endpoint
     * @param {Array.<String>} [sourceIps] Filter by source IP that made the API request
     * @param {Array.<String>} [adminIds] Filter by admin ID of user that made the API request
     * @param {String} [userAgent] Filter by user agent string for API request. This will filter by a complete or partial match.
     * @param {module:api/OrganizationsApi~getOrganizationApiRequestsOverviewResponseCodesByIntervalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationApiRequestsOverviewResponseCodesByInterval200ResponseInner>}
     */
    getOrganizationApiRequestsOverviewResponseCodesByInterval(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationApiRequestsOverviewResponseCodesByInterval");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan'],
        'interval': opts['interval'],
        'version': opts['version'],
        'operationIds': this.apiClient.buildCollectionParam(opts['operationIds'], 'csv'),
        'sourceIps': this.apiClient.buildCollectionParam(opts['sourceIps'], 'csv'),
        'adminIds': this.apiClient.buildCollectionParam(opts['adminIds'], 'csv'),
        'userAgent': opts['userAgent']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationApiRequestsOverviewResponseCodesByInterval200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/apiRequests/overview/responseCodes/byInterval', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationBrandingPolicies operation.
     * @callback module:api/OrganizationsApi~getOrganizationBrandingPoliciesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationBrandingPolicies200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the branding policies of an organization
     * List the branding policies of an organization
     * @param {String} organizationId 
     * @param {module:api/OrganizationsApi~getOrganizationBrandingPoliciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationBrandingPolicies200ResponseInner>}
     */
    getOrganizationBrandingPolicies(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationBrandingPolicies");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationBrandingPolicies200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/brandingPolicies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationBrandingPoliciesPriorities operation.
     * @callback module:api/OrganizationsApi~getOrganizationBrandingPoliciesPrioritiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizationBrandingPoliciesPriorities200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the branding policy IDs of an organization in priority order
     * Return the branding policy IDs of an organization in priority order. IDs are ordered in ascending order of priority (IDs later in the array have higher priority).
     * @param {String} organizationId 
     * @param {module:api/OrganizationsApi~getOrganizationBrandingPoliciesPrioritiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizationBrandingPoliciesPriorities200Response}
     */
    getOrganizationBrandingPoliciesPriorities(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationBrandingPoliciesPriorities");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOrganizationBrandingPoliciesPriorities200Response;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/brandingPolicies/priorities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationBrandingPolicy operation.
     * @callback module:api/OrganizationsApi~getOrganizationBrandingPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizationBrandingPolicies200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a branding policy
     * Return a branding policy
     * @param {String} organizationId 
     * @param {String} brandingPolicyId 
     * @param {module:api/OrganizationsApi~getOrganizationBrandingPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizationBrandingPolicies200ResponseInner}
     */
    getOrganizationBrandingPolicy(organizationId, brandingPolicyId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationBrandingPolicy");
      }
      // verify the required parameter 'brandingPolicyId' is set
      if (brandingPolicyId === undefined || brandingPolicyId === null) {
        throw new Error("Missing the required parameter 'brandingPolicyId' when calling getOrganizationBrandingPolicy");
      }

      let pathParams = {
        'organizationId': organizationId,
        'brandingPolicyId': brandingPolicyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOrganizationBrandingPolicies200ResponseInner;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/brandingPolicies/{brandingPolicyId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationClientsBandwidthUsageHistory operation.
     * @callback module:api/OrganizationsApi~getOrganizationClientsBandwidthUsageHistoryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationClientsBandwidthUsageHistory200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return data usage (in megabits per second) over time for all clients in the given organization within a given time range.
     * Return data usage (in megabits per second) over time for all clients in the given organization within a given time range.
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
     * @param {module:api/OrganizationsApi~getOrganizationClientsBandwidthUsageHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationClientsBandwidthUsageHistory200ResponseInner>}
     */
    getOrganizationClientsBandwidthUsageHistory(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationClientsBandwidthUsageHistory");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationClientsBandwidthUsageHistory200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/clients/bandwidthUsageHistory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationClientsOverview operation.
     * @callback module:api/OrganizationsApi~getOrganizationClientsOverviewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizationClientsOverview200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return summary information around client data usage (in mb) across the given organization.
     * Return summary information around client data usage (in mb) across the given organization.
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
     * @param {module:api/OrganizationsApi~getOrganizationClientsOverviewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizationClientsOverview200Response}
     */
    getOrganizationClientsOverview(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationClientsOverview");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOrganizationClientsOverview200Response;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/clients/overview', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationClientsSearch operation.
     * @callback module:api/OrganizationsApi~getOrganizationClientsSearchCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the client details in an organization
     * Return the client details in an organization
     * @param {String} organizationId 
     * @param {String} mac The MAC address of the client. Required.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 5. Default is 5.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:api/OrganizationsApi~getOrganizationClientsSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getOrganizationClientsSearch(organizationId, mac, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationClientsSearch");
      }
      // verify the required parameter 'mac' is set
      if (mac === undefined || mac === null) {
        throw new Error("Missing the required parameter 'mac' when calling getOrganizationClientsSearch");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'mac': mac,
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/clients/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationConfigTemplate operation.
     * @callback module:api/OrganizationsApi~getOrganizationConfigTemplateCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a single configuration template
     * Return a single configuration template
     * @param {String} organizationId 
     * @param {String} configTemplateId 
     * @param {module:api/OrganizationsApi~getOrganizationConfigTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getOrganizationConfigTemplate(organizationId, configTemplateId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationConfigTemplate");
      }
      // verify the required parameter 'configTemplateId' is set
      if (configTemplateId === undefined || configTemplateId === null) {
        throw new Error("Missing the required parameter 'configTemplateId' when calling getOrganizationConfigTemplate");
      }

      let pathParams = {
        'organizationId': organizationId,
        'configTemplateId': configTemplateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/configTemplates/{configTemplateId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationConfigTemplates operation.
     * @callback module:api/OrganizationsApi~getOrganizationConfigTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the configuration templates for this organization
     * List the configuration templates for this organization
     * @param {String} organizationId 
     * @param {module:api/OrganizationsApi~getOrganizationConfigTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getOrganizationConfigTemplates(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationConfigTemplates");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/configTemplates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationConfigurationChanges operation.
     * @callback module:api/OrganizationsApi~getOrganizationConfigurationChangesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View the Change Log for your organization
     * View the Change Log for your organization
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 365 days from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 365 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 365 days. The default is 365 days.
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 5000. Default is 5000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [networkId] Filters on the given network
     * @param {String} [adminId] Filters on the given Admin
     * @param {module:api/OrganizationsApi~getOrganizationConfigurationChangesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getOrganizationConfigurationChanges(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationConfigurationChanges");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan'],
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        'networkId': opts['networkId'],
        'adminId': opts['adminId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/configurationChanges', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationDevices operation.
     * @callback module:api/OrganizationsApi~getOrganizationDevicesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationDevices200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the devices in an organization
     * List the devices in an organization
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [configurationUpdatedAfter] Filter results by whether or not the device's configuration has been updated after the given timestamp
     * @param {Array.<String>} [networkIds] Optional parameter to filter devices by network.
     * @param {Array.<module:model/String>} [productTypes] Optional parameter to filter devices by product type. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, and sensor.
     * @param {Array.<String>} [tags] Optional parameter to filter devices by tags.
     * @param {module:model/String} [tagsFilterType] Optional parameter of value 'withAnyTags' or 'withAllTags' to indicate whether to return networks which contain ANY or ALL of the included tags. If no type is included, 'withAnyTags' will be selected.
     * @param {String} [name] Optional parameter to filter devices by name. All returned devices will have a name that contains the search term or is an exact match.
     * @param {String} [mac] Optional parameter to filter devices by MAC address. All returned devices will have a MAC address that contains the search term or is an exact match.
     * @param {String} [serial] Optional parameter to filter devices by serial number. All returned devices will have a serial number that contains the search term or is an exact match.
     * @param {String} [model] Optional parameter to filter devices by model. All returned devices will have a model that contains the search term or is an exact match.
     * @param {Array.<String>} [macs] Optional parameter to filter devices by one or more MAC addresses. All returned devices will have a MAC address that is an exact match.
     * @param {Array.<String>} [serials] Optional parameter to filter devices by one or more serial numbers. All returned devices will have a serial number that is an exact match.
     * @param {Array.<String>} [sensorMetrics] Optional parameter to filter devices by the metrics that they provide. Only applies to sensor devices.
     * @param {Array.<String>} [sensorAlertProfileIds] Optional parameter to filter devices by the alert profiles that are bound to them. Only applies to sensor devices.
     * @param {Array.<String>} [models] Optional parameter to filter devices by one or more models. All returned devices will have a model that is an exact match.
     * @param {module:api/OrganizationsApi~getOrganizationDevicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationDevices200ResponseInner>}
     */
    getOrganizationDevices(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationDevices");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        'configurationUpdatedAfter': opts['configurationUpdatedAfter'],
        'networkIds': this.apiClient.buildCollectionParam(opts['networkIds'], 'csv'),
        'productTypes': this.apiClient.buildCollectionParam(opts['productTypes'], 'csv'),
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'csv'),
        'tagsFilterType': opts['tagsFilterType'],
        'name': opts['name'],
        'mac': opts['mac'],
        'serial': opts['serial'],
        'model': opts['model'],
        'macs': this.apiClient.buildCollectionParam(opts['macs'], 'csv'),
        'serials': this.apiClient.buildCollectionParam(opts['serials'], 'csv'),
        'sensorMetrics': this.apiClient.buildCollectionParam(opts['sensorMetrics'], 'csv'),
        'sensorAlertProfileIds': this.apiClient.buildCollectionParam(opts['sensorAlertProfileIds'], 'csv'),
        'models': this.apiClient.buildCollectionParam(opts['models'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationDevices200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/devices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationDevicesAvailabilities operation.
     * @callback module:api/OrganizationsApi~getOrganizationDevicesAvailabilitiesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationDevicesAvailabilities200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the availability information for devices in an organization
     * List the availability information for devices in an organization. The data returned by this endpoint is updated every 5 minutes.
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {Array.<String>} [networkIds] Optional parameter to filter device availabilities by network ID. This filter uses multiple exact matches.
     * @param {Array.<String>} [productTypes] Optional parameter to filter device availabilities by device product types. This filter uses multiple exact matches.
     * @param {Array.<String>} [serials] Optional parameter to filter device availabilities by device serial numbers. This filter uses multiple exact matches.
     * @param {Array.<String>} [tags] An optional parameter to filter devices by tags. The filtering is case-sensitive. If tags are included, 'tagsFilterType' should also be included (see below). This filter uses multiple exact matches.
     * @param {module:model/String} [tagsFilterType] An optional parameter of value 'withAnyTags' or 'withAllTags' to indicate whether to return devices which contain ANY or ALL of the included tags. If no type is included, 'withAnyTags' will be selected.
     * @param {module:api/OrganizationsApi~getOrganizationDevicesAvailabilitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationDevicesAvailabilities200ResponseInner>}
     */
    getOrganizationDevicesAvailabilities(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationDevicesAvailabilities");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        'networkIds': this.apiClient.buildCollectionParam(opts['networkIds'], 'csv'),
        'productTypes': this.apiClient.buildCollectionParam(opts['productTypes'], 'csv'),
        'serials': this.apiClient.buildCollectionParam(opts['serials'], 'csv'),
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'csv'),
        'tagsFilterType': opts['tagsFilterType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationDevicesAvailabilities200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/devices/availabilities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationDevicesPowerModulesStatusesByDevice operation.
     * @callback module:api/OrganizationsApi~getOrganizationDevicesPowerModulesStatusesByDeviceCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationDevicesPowerModulesStatusesByDevice200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the power status information for devices in an organization
     * List the power status information for devices in an organization. The data returned by this endpoint is updated every 5 minutes.
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {Array.<String>} [networkIds] Optional parameter to filter device availabilities by network ID. This filter uses multiple exact matches.
     * @param {Array.<String>} [productTypes] Optional parameter to filter device availabilities by device product types. This filter uses multiple exact matches.
     * @param {Array.<String>} [serials] Optional parameter to filter device availabilities by device serial numbers. This filter uses multiple exact matches.
     * @param {Array.<String>} [tags] An optional parameter to filter devices by tags. The filtering is case-sensitive. If tags are included, 'tagsFilterType' should also be included (see below). This filter uses multiple exact matches.
     * @param {module:model/String} [tagsFilterType] An optional parameter of value 'withAnyTags' or 'withAllTags' to indicate whether to return devices which contain ANY or ALL of the included tags. If no type is included, 'withAnyTags' will be selected.
     * @param {module:api/OrganizationsApi~getOrganizationDevicesPowerModulesStatusesByDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationDevicesPowerModulesStatusesByDevice200ResponseInner>}
     */
    getOrganizationDevicesPowerModulesStatusesByDevice(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationDevicesPowerModulesStatusesByDevice");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        'networkIds': this.apiClient.buildCollectionParam(opts['networkIds'], 'csv'),
        'productTypes': this.apiClient.buildCollectionParam(opts['productTypes'], 'csv'),
        'serials': this.apiClient.buildCollectionParam(opts['serials'], 'csv'),
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'csv'),
        'tagsFilterType': opts['tagsFilterType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationDevicesPowerModulesStatusesByDevice200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/devices/powerModules/statuses/byDevice', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationDevicesStatuses operation.
     * @callback module:api/OrganizationsApi~getOrganizationDevicesStatusesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizationDevicesStatuses200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the status of every Meraki device in the organization
     * List the status of every Meraki device in the organization
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {Array.<String>} [networkIds] Optional parameter to filter devices by network ids.
     * @param {Array.<String>} [serials] Optional parameter to filter devices by serials.
     * @param {Array.<module:model/String>} [statuses] Optional parameter to filter devices by statuses. Valid statuses are [\"online\", \"alerting\", \"offline\", \"dormant\"].
     * @param {Array.<module:model/String>} [productTypes] An optional parameter to filter device statuses by product type. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, and sensor.
     * @param {Array.<String>} [models] Optional parameter to filter devices by models.
     * @param {Array.<String>} [tags] An optional parameter to filter devices by tags. The filtering is case-sensitive. If tags are included, 'tagsFilterType' should also be included (see below).
     * @param {module:model/String} [tagsFilterType] An optional parameter of value 'withAnyTags' or 'withAllTags' to indicate whether to return devices which contain ANY or ALL of the included tags. If no type is included, 'withAnyTags' will be selected.
     * @param {module:api/OrganizationsApi~getOrganizationDevicesStatusesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizationDevicesStatuses200Response}
     */
    getOrganizationDevicesStatuses(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationDevicesStatuses");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        'networkIds': this.apiClient.buildCollectionParam(opts['networkIds'], 'csv'),
        'serials': this.apiClient.buildCollectionParam(opts['serials'], 'csv'),
        'statuses': this.apiClient.buildCollectionParam(opts['statuses'], 'csv'),
        'productTypes': this.apiClient.buildCollectionParam(opts['productTypes'], 'csv'),
        'models': this.apiClient.buildCollectionParam(opts['models'], 'csv'),
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'csv'),
        'tagsFilterType': opts['tagsFilterType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOrganizationDevicesStatuses200Response;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/devices/statuses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationDevicesStatusesOverview operation.
     * @callback module:api/OrganizationsApi~getOrganizationDevicesStatusesOverviewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizationDevicesStatusesOverview200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return an overview of current device statuses
     * Return an overview of current device statuses
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [productTypes] An optional parameter to filter device statuses by product type. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, and sensor.
     * @param {Array.<String>} [networkIds] An optional parameter to filter device statuses by network.
     * @param {module:api/OrganizationsApi~getOrganizationDevicesStatusesOverviewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizationDevicesStatusesOverview200Response}
     */
    getOrganizationDevicesStatusesOverview(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationDevicesStatusesOverview");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'productTypes': this.apiClient.buildCollectionParam(opts['productTypes'], 'csv'),
        'networkIds': this.apiClient.buildCollectionParam(opts['networkIds'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOrganizationDevicesStatusesOverview200Response;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/devices/statuses/overview', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationDevicesUplinksAddressesByDevice operation.
     * @callback module:api/OrganizationsApi~getOrganizationDevicesUplinksAddressesByDeviceCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationDevicesUplinksAddressesByDevice200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the current uplink addresses for devices in an organization.
     * List the current uplink addresses for devices in an organization.
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {Array.<String>} [networkIds] Optional parameter to filter device uplinks by network ID. This filter uses multiple exact matches.
     * @param {Array.<String>} [productTypes] Optional parameter to filter device uplinks by device product types. This filter uses multiple exact matches.
     * @param {Array.<String>} [serials] Optional parameter to filter device availabilities by device serial numbers. This filter uses multiple exact matches.
     * @param {Array.<String>} [tags] An optional parameter to filter devices by tags. The filtering is case-sensitive. If tags are included, 'tagsFilterType' should also be included (see below). This filter uses multiple exact matches.
     * @param {module:model/String} [tagsFilterType] An optional parameter of value 'withAnyTags' or 'withAllTags' to indicate whether to return devices which contain ANY or ALL of the included tags. If no type is included, 'withAnyTags' will be selected.
     * @param {module:api/OrganizationsApi~getOrganizationDevicesUplinksAddressesByDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationDevicesUplinksAddressesByDevice200ResponseInner>}
     */
    getOrganizationDevicesUplinksAddressesByDevice(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationDevicesUplinksAddressesByDevice");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        'networkIds': this.apiClient.buildCollectionParam(opts['networkIds'], 'csv'),
        'productTypes': this.apiClient.buildCollectionParam(opts['productTypes'], 'csv'),
        'serials': this.apiClient.buildCollectionParam(opts['serials'], 'csv'),
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'csv'),
        'tagsFilterType': opts['tagsFilterType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationDevicesUplinksAddressesByDevice200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/devices/uplinks/addresses/byDevice', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationDevicesUplinksLossAndLatency operation.
     * @callback module:api/OrganizationsApi~getOrganizationDevicesUplinksLossAndLatencyCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationDevicesUplinksLossAndLatency200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the uplink loss and latency for every MX in the organization from at latest 2 minutes ago
     * Return the uplink loss and latency for every MX in the organization from at latest 2 minutes ago
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 60 days from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 5 minutes after t0. The latest possible time that t1 can be is 2 minutes into the past.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 5 minutes. The default is 5 minutes.
     * @param {module:model/String} [uplink] Optional filter for a specific WAN uplink. Valid uplinks are wan1, wan2, cellular. Default will return all uplinks.
     * @param {String} [ip] Optional filter for a specific destination IP. Default will return all destination IPs.
     * @param {module:api/OrganizationsApi~getOrganizationDevicesUplinksLossAndLatencyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationDevicesUplinksLossAndLatency200ResponseInner>}
     */
    getOrganizationDevicesUplinksLossAndLatency(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationDevicesUplinksLossAndLatency");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan'],
        'uplink': opts['uplink'],
        'ip': opts['ip']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationDevicesUplinksLossAndLatency200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/devices/uplinksLossAndLatency', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationEarlyAccessFeatures operation.
     * @callback module:api/OrganizationsApi~getOrganizationEarlyAccessFeaturesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the available early access features for organization
     * List the available early access features for organization
     * @param {String} organizationId 
     * @param {module:api/OrganizationsApi~getOrganizationEarlyAccessFeaturesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getOrganizationEarlyAccessFeatures(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationEarlyAccessFeatures");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/earlyAccess/features', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationEarlyAccessFeaturesOptIn operation.
     * @callback module:api/OrganizationsApi~getOrganizationEarlyAccessFeaturesOptInCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show an early access feature opt-in for an organization
     * Show an early access feature opt-in for an organization
     * @param {String} organizationId 
     * @param {String} optInId 
     * @param {module:api/OrganizationsApi~getOrganizationEarlyAccessFeaturesOptInCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getOrganizationEarlyAccessFeaturesOptIn(organizationId, optInId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationEarlyAccessFeaturesOptIn");
      }
      // verify the required parameter 'optInId' is set
      if (optInId === undefined || optInId === null) {
        throw new Error("Missing the required parameter 'optInId' when calling getOrganizationEarlyAccessFeaturesOptIn");
      }

      let pathParams = {
        'organizationId': organizationId,
        'optInId': optInId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/earlyAccess/features/optIns/{optInId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationEarlyAccessFeaturesOptIns operation.
     * @callback module:api/OrganizationsApi~getOrganizationEarlyAccessFeaturesOptInsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the early access feature opt-ins for an organization
     * List the early access feature opt-ins for an organization
     * @param {String} organizationId 
     * @param {module:api/OrganizationsApi~getOrganizationEarlyAccessFeaturesOptInsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getOrganizationEarlyAccessFeaturesOptIns(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationEarlyAccessFeaturesOptIns");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/earlyAccess/features/optIns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationFirmwareUpgrades operation.
     * @callback module:api/OrganizationsApi~getOrganizationFirmwareUpgradesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationFirmwareUpgrades200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get firmware upgrade information for an organization
     * Get firmware upgrade information for an organization
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [status] The status of an upgrade 
     * @param {Array.<String>} [productType] The product type in a given upgrade ID
     * @param {module:api/OrganizationsApi~getOrganizationFirmwareUpgradesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationFirmwareUpgrades200ResponseInner>}
     */
    getOrganizationFirmwareUpgrades(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationFirmwareUpgrades");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'status': this.apiClient.buildCollectionParam(opts['status'], 'csv'),
        'productType': this.apiClient.buildCollectionParam(opts['productType'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationFirmwareUpgrades200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/firmware/upgrades', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationFirmwareUpgradesByDevice operation.
     * @callback module:api/OrganizationsApi~getOrganizationFirmwareUpgradesByDeviceCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationFirmwareUpgradesByDevice200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get firmware upgrade status for the filtered devices
     * Get firmware upgrade status for the filtered devices
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 50. Default is 50.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {Array.<String>} [networkIds] Optional parameter to filter by network
     * @param {Array.<String>} [serials] Optional parameter to filter by serial number.  All returned devices will have a serial number that is an exact match.
     * @param {Array.<String>} [macs] Optional parameter to filter by one or more MAC addresses belonging to devices. All devices returned belong to MAC addresses that are an exact match.
     * @param {Array.<String>} [firmwareUpgradeIds] Optional parameter to filter by firmware upgrade ids.
     * @param {Array.<String>} [firmwareUpgradeBatchIds] Optional parameter to filter by firmware upgrade batch ids.
     * @param {module:api/OrganizationsApi~getOrganizationFirmwareUpgradesByDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationFirmwareUpgradesByDevice200ResponseInner>}
     */
    getOrganizationFirmwareUpgradesByDevice(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationFirmwareUpgradesByDevice");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        'networkIds': this.apiClient.buildCollectionParam(opts['networkIds'], 'csv'),
        'serials': this.apiClient.buildCollectionParam(opts['serials'], 'csv'),
        'macs': this.apiClient.buildCollectionParam(opts['macs'], 'csv'),
        'firmwareUpgradeIds': this.apiClient.buildCollectionParam(opts['firmwareUpgradeIds'], 'csv'),
        'firmwareUpgradeBatchIds': this.apiClient.buildCollectionParam(opts['firmwareUpgradeBatchIds'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationFirmwareUpgradesByDevice200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/firmware/upgrades/byDevice', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationInventoryDevice operation.
     * @callback module:api/OrganizationsApi~getOrganizationInventoryDeviceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizationInventoryDevices200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a single device from the inventory of an organization
     * Return a single device from the inventory of an organization
     * @param {String} organizationId 
     * @param {String} serial 
     * @param {module:api/OrganizationsApi~getOrganizationInventoryDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizationInventoryDevices200ResponseInner}
     */
    getOrganizationInventoryDevice(organizationId, serial, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationInventoryDevice");
      }
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getOrganizationInventoryDevice");
      }

      let pathParams = {
        'organizationId': organizationId,
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOrganizationInventoryDevices200ResponseInner;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/inventory/devices/{serial}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationInventoryDevices operation.
     * @callback module:api/OrganizationsApi~getOrganizationInventoryDevicesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationInventoryDevices200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the device inventory for an organization
     * Return the device inventory for an organization
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:model/String} [usedState] Filter results by used or unused inventory. Accepted values are 'used' or 'unused'.
     * @param {String} [search] Search for devices in inventory based on serial number, mac address, or model.
     * @param {Array.<String>} [macs] Search for devices in inventory based on mac addresses.
     * @param {Array.<String>} [networkIds] Search for devices in inventory based on network ids.
     * @param {Array.<String>} [serials] Search for devices in inventory based on serials.
     * @param {Array.<String>} [models] Search for devices in inventory based on model.
     * @param {Array.<String>} [orderNumbers] Search for devices in inventory based on order numbers.
     * @param {Array.<String>} [tags] Filter devices by tags. The filtering is case-sensitive. If tags are included, 'tagsFilterType' should also be included (see below).
     * @param {module:model/String} [tagsFilterType] To use with 'tags' parameter, to filter devices which contain ANY or ALL given tags. Accepted values are 'withAnyTags' or 'withAllTags', default is 'withAnyTags'.
     * @param {Array.<module:model/String>} [productTypes] Filter devices by product type. Accepted values are appliance, camera, cellularGateway, sensor, switch, systemsManager, and wireless.
     * @param {module:api/OrganizationsApi~getOrganizationInventoryDevicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationInventoryDevices200ResponseInner>}
     */
    getOrganizationInventoryDevices(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationInventoryDevices");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        'usedState': opts['usedState'],
        'search': opts['search'],
        'macs': this.apiClient.buildCollectionParam(opts['macs'], 'csv'),
        'networkIds': this.apiClient.buildCollectionParam(opts['networkIds'], 'csv'),
        'serials': this.apiClient.buildCollectionParam(opts['serials'], 'csv'),
        'models': this.apiClient.buildCollectionParam(opts['models'], 'csv'),
        'orderNumbers': this.apiClient.buildCollectionParam(opts['orderNumbers'], 'csv'),
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'csv'),
        'tagsFilterType': opts['tagsFilterType'],
        'productTypes': this.apiClient.buildCollectionParam(opts['productTypes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationInventoryDevices200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/inventory/devices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationInventoryOnboardingCloudMonitoringImports operation.
     * @callback module:api/OrganizationsApi~getOrganizationInventoryOnboardingCloudMonitoringImportsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check the status of a committed Import operation
     * Check the status of a committed Import operation
     * @param {String} organizationId 
     * @param {Array.<String>} importIds import ids from an imports
     * @param {module:api/OrganizationsApi~getOrganizationInventoryOnboardingCloudMonitoringImportsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner>}
     */
    getOrganizationInventoryOnboardingCloudMonitoringImports(organizationId, importIds, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationInventoryOnboardingCloudMonitoringImports");
      }
      // verify the required parameter 'importIds' is set
      if (importIds === undefined || importIds === null) {
        throw new Error("Missing the required parameter 'importIds' when calling getOrganizationInventoryOnboardingCloudMonitoringImports");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'importIds': this.apiClient.buildCollectionParam(importIds, 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/imports', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationInventoryOnboardingCloudMonitoringNetworks operation.
     * @callback module:api/OrganizationsApi~getOrganizationInventoryOnboardingCloudMonitoringNetworksCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetwork200Response>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list of networks eligible for adding cloud monitored device
     * Returns list of networks eligible for adding cloud monitored device
     * @param {String} organizationId 
     * @param {module:model/String} deviceType Device Type switch or wireless controller
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 100000. Default is 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:api/OrganizationsApi~getOrganizationInventoryOnboardingCloudMonitoringNetworksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetwork200Response>}
     */
    getOrganizationInventoryOnboardingCloudMonitoringNetworks(organizationId, deviceType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationInventoryOnboardingCloudMonitoringNetworks");
      }
      // verify the required parameter 'deviceType' is set
      if (deviceType === undefined || deviceType === null) {
        throw new Error("Missing the required parameter 'deviceType' when calling getOrganizationInventoryOnboardingCloudMonitoringNetworks");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'deviceType': deviceType,
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetwork200Response];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/networks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationLicense operation.
     * @callback module:api/OrganizationsApi~getOrganizationLicenseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizationLicenses200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Display a license
     * Display a license
     * @param {String} organizationId 
     * @param {String} licenseId 
     * @param {module:api/OrganizationsApi~getOrganizationLicenseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizationLicenses200ResponseInner}
     */
    getOrganizationLicense(organizationId, licenseId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationLicense");
      }
      // verify the required parameter 'licenseId' is set
      if (licenseId === undefined || licenseId === null) {
        throw new Error("Missing the required parameter 'licenseId' when calling getOrganizationLicense");
      }

      let pathParams = {
        'organizationId': organizationId,
        'licenseId': licenseId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOrganizationLicenses200ResponseInner;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/licenses/{licenseId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationLicenses operation.
     * @callback module:api/OrganizationsApi~getOrganizationLicensesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationLicenses200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the licenses for an organization
     * List the licenses for an organization
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [deviceSerial] Filter the licenses to those assigned to a particular device. Returned in the same order that they are queued to the device.
     * @param {String} [networkId] Filter the licenses to those assigned in a particular network
     * @param {module:model/String} [state] Filter the licenses to those in a particular state. Can be one of 'active', 'expired', 'expiring', 'recentlyQueued', 'unused' or 'unusedActive'
     * @param {module:api/OrganizationsApi~getOrganizationLicensesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationLicenses200ResponseInner>}
     */
    getOrganizationLicenses(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationLicenses");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        'deviceSerial': opts['deviceSerial'],
        'networkId': opts['networkId'],
        'state': opts['state']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationLicenses200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/licenses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationLicensesOverview operation.
     * @callback module:api/OrganizationsApi~getOrganizationLicensesOverviewCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return an overview of the license state for an organization
     * Return an overview of the license state for an organization
     * @param {String} organizationId 
     * @param {module:api/OrganizationsApi~getOrganizationLicensesOverviewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getOrganizationLicensesOverview(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationLicensesOverview");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/licenses/overview', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationLoginSecurity operation.
     * @callback module:api/OrganizationsApi~getOrganizationLoginSecurityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizationLoginSecurity200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the login security settings for an organization.
     * Returns the login security settings for an organization.
     * @param {String} organizationId 
     * @param {module:api/OrganizationsApi~getOrganizationLoginSecurityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizationLoginSecurity200Response}
     */
    getOrganizationLoginSecurity(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationLoginSecurity");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOrganizationLoginSecurity200Response;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/loginSecurity', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationNetworks operation.
     * @callback module:api/OrganizationsApi~getOrganizationNetworksCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetwork200Response>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the networks that the user has privileges on in an organization
     * List the networks that the user has privileges on in an organization
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {String} [configTemplateId] An optional parameter that is the ID of a config template. Will return all networks bound to that template.
     * @param {Boolean} [isBoundToConfigTemplate] An optional parameter to filter config template bound networks. If configTemplateId is set, this cannot be false.
     * @param {Array.<String>} [tags] An optional parameter to filter networks by tags. The filtering is case-sensitive. If tags are included, 'tagsFilterType' should also be included (see below).
     * @param {module:model/String} [tagsFilterType] An optional parameter of value 'withAnyTags' or 'withAllTags' to indicate whether to return networks which contain ANY or ALL of the included tags. If no type is included, 'withAnyTags' will be selected.
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 100000. Default is 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:api/OrganizationsApi~getOrganizationNetworksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetwork200Response>}
     */
    getOrganizationNetworks(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationNetworks");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'configTemplateId': opts['configTemplateId'],
        'isBoundToConfigTemplate': opts['isBoundToConfigTemplate'],
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'csv'),
        'tagsFilterType': opts['tagsFilterType'],
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetwork200Response];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/networks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationOpenapiSpec operation.
     * @callback module:api/OrganizationsApi~getOrganizationOpenapiSpecCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the OpenAPI 2.0 Specification of the organization's API documentation in JSON
     * Return the OpenAPI 2.0 Specification of the organization's API documentation in JSON
     * @param {String} organizationId 
     * @param {module:api/OrganizationsApi~getOrganizationOpenapiSpecCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getOrganizationOpenapiSpec(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationOpenapiSpec");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/openapiSpec', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationPolicyObject operation.
     * @callback module:api/OrganizationsApi~getOrganizationPolicyObjectCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Shows details of a Policy Object.
     * Shows details of a Policy Object.
     * @param {String} organizationId 
     * @param {String} policyObjectId 
     * @param {module:api/OrganizationsApi~getOrganizationPolicyObjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getOrganizationPolicyObject(organizationId, policyObjectId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationPolicyObject");
      }
      // verify the required parameter 'policyObjectId' is set
      if (policyObjectId === undefined || policyObjectId === null) {
        throw new Error("Missing the required parameter 'policyObjectId' when calling getOrganizationPolicyObject");
      }

      let pathParams = {
        'organizationId': organizationId,
        'policyObjectId': policyObjectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/policyObjects/{policyObjectId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationPolicyObjects operation.
     * @callback module:api/OrganizationsApi~getOrganizationPolicyObjectsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists Policy Objects belonging to the organization.
     * Lists Policy Objects belonging to the organization.
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 10 - 5000. Default is 5000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:api/OrganizationsApi~getOrganizationPolicyObjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getOrganizationPolicyObjects(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationPolicyObjects");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/policyObjects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationPolicyObjectsGroup operation.
     * @callback module:api/OrganizationsApi~getOrganizationPolicyObjectsGroupCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Shows details of a Policy Object Group.
     * Shows details of a Policy Object Group.
     * @param {String} organizationId 
     * @param {String} policyObjectGroupId 
     * @param {module:api/OrganizationsApi~getOrganizationPolicyObjectsGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getOrganizationPolicyObjectsGroup(organizationId, policyObjectGroupId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationPolicyObjectsGroup");
      }
      // verify the required parameter 'policyObjectGroupId' is set
      if (policyObjectGroupId === undefined || policyObjectGroupId === null) {
        throw new Error("Missing the required parameter 'policyObjectGroupId' when calling getOrganizationPolicyObjectsGroup");
      }

      let pathParams = {
        'organizationId': organizationId,
        'policyObjectGroupId': policyObjectGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/policyObjects/groups/{policyObjectGroupId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationPolicyObjectsGroups operation.
     * @callback module:api/OrganizationsApi~getOrganizationPolicyObjectsGroupsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists Policy Object Groups belonging to the organization.
     * Lists Policy Object Groups belonging to the organization.
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 10 - 1000. Default is 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:api/OrganizationsApi~getOrganizationPolicyObjectsGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getOrganizationPolicyObjectsGroups(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationPolicyObjectsGroups");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/policyObjects/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationSaml operation.
     * @callback module:api/OrganizationsApi~getOrganizationSamlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizationSaml200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the SAML SSO enabled settings for an organization.
     * Returns the SAML SSO enabled settings for an organization.
     * @param {String} organizationId 
     * @param {module:api/OrganizationsApi~getOrganizationSamlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizationSaml200Response}
     */
    getOrganizationSaml(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationSaml");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOrganizationSaml200Response;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/saml', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationSamlIdp operation.
     * @callback module:api/OrganizationsApi~getOrganizationSamlIdpCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizationSamlIdps200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a SAML IdP from your organization.
     * Get a SAML IdP from your organization.
     * @param {String} organizationId 
     * @param {String} idpId 
     * @param {module:api/OrganizationsApi~getOrganizationSamlIdpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizationSamlIdps200ResponseInner}
     */
    getOrganizationSamlIdp(organizationId, idpId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationSamlIdp");
      }
      // verify the required parameter 'idpId' is set
      if (idpId === undefined || idpId === null) {
        throw new Error("Missing the required parameter 'idpId' when calling getOrganizationSamlIdp");
      }

      let pathParams = {
        'organizationId': organizationId,
        'idpId': idpId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOrganizationSamlIdps200ResponseInner;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/saml/idps/{idpId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationSamlIdps operation.
     * @callback module:api/OrganizationsApi~getOrganizationSamlIdpsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationSamlIdps200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the SAML IdPs in your organization.
     * List the SAML IdPs in your organization.
     * @param {String} organizationId 
     * @param {module:api/OrganizationsApi~getOrganizationSamlIdpsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationSamlIdps200ResponseInner>}
     */
    getOrganizationSamlIdps(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationSamlIdps");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationSamlIdps200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/saml/idps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationSamlRole operation.
     * @callback module:api/OrganizationsApi~getOrganizationSamlRoleCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a SAML role
     * Return a SAML role
     * @param {String} organizationId 
     * @param {String} samlRoleId 
     * @param {module:api/OrganizationsApi~getOrganizationSamlRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getOrganizationSamlRole(organizationId, samlRoleId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationSamlRole");
      }
      // verify the required parameter 'samlRoleId' is set
      if (samlRoleId === undefined || samlRoleId === null) {
        throw new Error("Missing the required parameter 'samlRoleId' when calling getOrganizationSamlRole");
      }

      let pathParams = {
        'organizationId': organizationId,
        'samlRoleId': samlRoleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/samlRoles/{samlRoleId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationSamlRoles operation.
     * @callback module:api/OrganizationsApi~getOrganizationSamlRolesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the SAML roles for this organization
     * List the SAML roles for this organization
     * @param {String} organizationId 
     * @param {module:api/OrganizationsApi~getOrganizationSamlRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getOrganizationSamlRoles(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationSamlRoles");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/samlRoles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationSnmp operation.
     * @callback module:api/OrganizationsApi~getOrganizationSnmpCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the SNMP settings for an organization
     * Return the SNMP settings for an organization
     * @param {String} organizationId 
     * @param {module:api/OrganizationsApi~getOrganizationSnmpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getOrganizationSnmp(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationSnmp");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/snmp', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationSummaryTopAppliancesByUtilization operation.
     * @callback module:api/OrganizationsApi~getOrganizationSummaryTopAppliancesByUtilizationCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationSummaryTopAppliancesByUtilization200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the top 10 appliances sorted by utilization over given time range.
     * Return the top 10 appliances sorted by utilization over given time range.
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
     * @param {module:api/OrganizationsApi~getOrganizationSummaryTopAppliancesByUtilizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationSummaryTopAppliancesByUtilization200ResponseInner>}
     */
    getOrganizationSummaryTopAppliancesByUtilization(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationSummaryTopAppliancesByUtilization");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationSummaryTopAppliancesByUtilization200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/summary/top/appliances/byUtilization', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationSummaryTopClientsByUsage operation.
     * @callback module:api/OrganizationsApi~getOrganizationSummaryTopClientsByUsageCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationSummaryTopClientsByUsage200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return metrics for organization's top 10 clients by data usage (in mb) over given time range.
     * Return metrics for organization's top 10 clients by data usage (in mb) over given time range.
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
     * @param {module:api/OrganizationsApi~getOrganizationSummaryTopClientsByUsageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationSummaryTopClientsByUsage200ResponseInner>}
     */
    getOrganizationSummaryTopClientsByUsage(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationSummaryTopClientsByUsage");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationSummaryTopClientsByUsage200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/summary/top/clients/byUsage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationSummaryTopClientsManufacturersByUsage operation.
     * @callback module:api/OrganizationsApi~getOrganizationSummaryTopClientsManufacturersByUsageCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationSummaryTopClientsManufacturersByUsage200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return metrics for organization's top clients by data usage (in mb) over given time range, grouped by manufacturer.
     * Return metrics for organization's top clients by data usage (in mb) over given time range, grouped by manufacturer.
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
     * @param {module:api/OrganizationsApi~getOrganizationSummaryTopClientsManufacturersByUsageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationSummaryTopClientsManufacturersByUsage200ResponseInner>}
     */
    getOrganizationSummaryTopClientsManufacturersByUsage(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationSummaryTopClientsManufacturersByUsage");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationSummaryTopClientsManufacturersByUsage200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/summary/top/clients/manufacturers/byUsage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationSummaryTopDevicesByUsage operation.
     * @callback module:api/OrganizationsApi~getOrganizationSummaryTopDevicesByUsageCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationSummaryTopDevicesByUsage200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return metrics for organization's top 10 devices sorted by data usage over given time range
     * Return metrics for organization's top 10 devices sorted by data usage over given time range. Default unit is megabytes.
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
     * @param {module:api/OrganizationsApi~getOrganizationSummaryTopDevicesByUsageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationSummaryTopDevicesByUsage200ResponseInner>}
     */
    getOrganizationSummaryTopDevicesByUsage(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationSummaryTopDevicesByUsage");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationSummaryTopDevicesByUsage200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/summary/top/devices/byUsage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationSummaryTopDevicesModelsByUsage operation.
     * @callback module:api/OrganizationsApi~getOrganizationSummaryTopDevicesModelsByUsageCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationSummaryTopDevicesModelsByUsage200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return metrics for organization's top 10 device models sorted by data usage over given time range
     * Return metrics for organization's top 10 device models sorted by data usage over given time range. Default unit is megabytes.
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
     * @param {module:api/OrganizationsApi~getOrganizationSummaryTopDevicesModelsByUsageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationSummaryTopDevicesModelsByUsage200ResponseInner>}
     */
    getOrganizationSummaryTopDevicesModelsByUsage(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationSummaryTopDevicesModelsByUsage");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationSummaryTopDevicesModelsByUsage200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/summary/top/devices/models/byUsage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationSummaryTopSsidsByUsage operation.
     * @callback module:api/OrganizationsApi~getOrganizationSummaryTopSsidsByUsageCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationSummaryTopSsidsByUsage200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return metrics for organization's top 10 ssids by data usage over given time range
     * Return metrics for organization's top 10 ssids by data usage over given time range. Default unit is megabytes.
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
     * @param {module:api/OrganizationsApi~getOrganizationSummaryTopSsidsByUsageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationSummaryTopSsidsByUsage200ResponseInner>}
     */
    getOrganizationSummaryTopSsidsByUsage(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationSummaryTopSsidsByUsage");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationSummaryTopSsidsByUsage200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/summary/top/ssids/byUsage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationSummaryTopSwitchesByEnergyUsage operation.
     * @callback module:api/OrganizationsApi~getOrganizationSummaryTopSwitchesByEnergyUsageCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationSummaryTopSwitchesByEnergyUsage200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return metrics for organization's top 10 switches by energy usage over given time range
     * Return metrics for organization's top 10 switches by energy usage over given time range. Default unit is joules.
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
     * @param {module:api/OrganizationsApi~getOrganizationSummaryTopSwitchesByEnergyUsageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationSummaryTopSwitchesByEnergyUsage200ResponseInner>}
     */
    getOrganizationSummaryTopSwitchesByEnergyUsage(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationSummaryTopSwitchesByEnergyUsage");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationSummaryTopSwitchesByEnergyUsage200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/summary/top/switches/byEnergyUsage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationUplinksStatuses operation.
     * @callback module:api/OrganizationsApi~getOrganizationUplinksStatusesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationUplinksStatuses200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the uplink status of every Meraki MX, MG and Z series devices in the organization
     * List the uplink status of every Meraki MX, MG and Z series devices in the organization
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {Array.<String>} [networkIds] A list of network IDs. The returned devices will be filtered to only include these networks.
     * @param {Array.<String>} [serials] A list of serial numbers. The returned devices will be filtered to only include these serials.
     * @param {Array.<String>} [iccids] A list of ICCIDs. The returned devices will be filtered to only include these ICCIDs.
     * @param {module:api/OrganizationsApi~getOrganizationUplinksStatusesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationUplinksStatuses200ResponseInner>}
     */
    getOrganizationUplinksStatuses(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationUplinksStatuses");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        'networkIds': this.apiClient.buildCollectionParam(opts['networkIds'], 'csv'),
        'serials': this.apiClient.buildCollectionParam(opts['serials'], 'csv'),
        'iccids': this.apiClient.buildCollectionParam(opts['iccids'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationUplinksStatuses200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/uplinks/statuses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationWebhooksAlertTypes operation.
     * @callback module:api/OrganizationsApi~getOrganizationWebhooksAlertTypesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a list of alert types to be used with managing webhook alerts
     * Return a list of alert types to be used with managing webhook alerts
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [productType] Filter sample alerts to a specific product type
     * @param {module:api/OrganizationsApi~getOrganizationWebhooksAlertTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getOrganizationWebhooksAlertTypes(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationWebhooksAlertTypes");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'productType': opts['productType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/webhooks/alertTypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationWebhooksLogs operation.
     * @callback module:api/OrganizationsApi~getOrganizationWebhooksLogsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationWebhooksLogs200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the log of webhook POSTs sent
     * Return the log of webhook POSTs sent
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 90 days from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 50.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [url] The URL the webhook was sent to
     * @param {module:api/OrganizationsApi~getOrganizationWebhooksLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationWebhooksLogs200ResponseInner>}
     */
    getOrganizationWebhooksLogs(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationWebhooksLogs");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan'],
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        'url': opts['url']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationWebhooksLogs200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/webhooks/logs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizations operation.
     * @callback module:api/OrganizationsApi~getOrganizationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizations200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the organizations that the user has privileges on
     * List the organizations that the user has privileges on
     * @param {module:api/OrganizationsApi~getOrganizationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizations200ResponseInner>}
     */
    getOrganizations(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizations200ResponseInner];
      return this.apiClient.callApi(
        '/organizations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the moveOrganizationLicenses operation.
     * @callback module:api/OrganizationsApi~moveOrganizationLicensesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MoveOrganizationLicenses200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Move licenses to another organization
     * Move licenses to another organization. This will also move any devices that the licenses are assigned to
     * @param {String} organizationId 
     * @param {module:model/MoveOrganizationLicensesRequest} moveOrganizationLicensesRequest 
     * @param {module:api/OrganizationsApi~moveOrganizationLicensesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MoveOrganizationLicenses200Response}
     */
    moveOrganizationLicenses(organizationId, moveOrganizationLicensesRequest, callback) {
      let postBody = moveOrganizationLicensesRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling moveOrganizationLicenses");
      }
      // verify the required parameter 'moveOrganizationLicensesRequest' is set
      if (moveOrganizationLicensesRequest === undefined || moveOrganizationLicensesRequest === null) {
        throw new Error("Missing the required parameter 'moveOrganizationLicensesRequest' when calling moveOrganizationLicenses");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MoveOrganizationLicenses200Response;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/licenses/move', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the moveOrganizationLicensesSeats operation.
     * @callback module:api/OrganizationsApi~moveOrganizationLicensesSeatsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MoveOrganizationLicensesSeats200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Move SM seats to another organization
     * Move SM seats to another organization
     * @param {String} organizationId 
     * @param {module:model/MoveOrganizationLicensesSeatsRequest} moveOrganizationLicensesSeatsRequest 
     * @param {module:api/OrganizationsApi~moveOrganizationLicensesSeatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MoveOrganizationLicensesSeats200Response}
     */
    moveOrganizationLicensesSeats(organizationId, moveOrganizationLicensesSeatsRequest, callback) {
      let postBody = moveOrganizationLicensesSeatsRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling moveOrganizationLicensesSeats");
      }
      // verify the required parameter 'moveOrganizationLicensesSeatsRequest' is set
      if (moveOrganizationLicensesSeatsRequest === undefined || moveOrganizationLicensesSeatsRequest === null) {
        throw new Error("Missing the required parameter 'moveOrganizationLicensesSeatsRequest' when calling moveOrganizationLicensesSeats");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MoveOrganizationLicensesSeats200Response;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/licenses/moveSeats', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the releaseFromOrganizationInventory operation.
     * @callback module:api/OrganizationsApi~releaseFromOrganizationInventoryCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Release a list of claimed devices from an organization.
     * Release a list of claimed devices from an organization.
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ReleaseFromOrganizationInventoryRequest} [releaseFromOrganizationInventoryRequest] 
     * @param {module:api/OrganizationsApi~releaseFromOrganizationInventoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    releaseFromOrganizationInventory(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = opts['releaseFromOrganizationInventoryRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling releaseFromOrganizationInventory");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/inventory/release', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the renewOrganizationLicensesSeats operation.
     * @callback module:api/OrganizationsApi~renewOrganizationLicensesSeatsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssignOrganizationLicensesSeats200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Renew SM seats of a license
     * Renew SM seats of a license. This will extend the license expiration date of managed SM devices covered by this license
     * @param {String} organizationId 
     * @param {module:model/RenewOrganizationLicensesSeatsRequest} renewOrganizationLicensesSeatsRequest 
     * @param {module:api/OrganizationsApi~renewOrganizationLicensesSeatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssignOrganizationLicensesSeats200Response}
     */
    renewOrganizationLicensesSeats(organizationId, renewOrganizationLicensesSeatsRequest, callback) {
      let postBody = renewOrganizationLicensesSeatsRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling renewOrganizationLicensesSeats");
      }
      // verify the required parameter 'renewOrganizationLicensesSeatsRequest' is set
      if (renewOrganizationLicensesSeatsRequest === undefined || renewOrganizationLicensesSeatsRequest === null) {
        throw new Error("Missing the required parameter 'renewOrganizationLicensesSeatsRequest' when calling renewOrganizationLicensesSeats");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssignOrganizationLicensesSeats200Response;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/licenses/renewSeats', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganization operation.
     * @callback module:api/OrganizationsApi~updateOrganizationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizations200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an organization
     * Update an organization
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationRequest} [updateOrganizationRequest] 
     * @param {module:api/OrganizationsApi~updateOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizations200ResponseInner}
     */
    updateOrganization(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateOrganizationRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganization");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetOrganizations200ResponseInner;
      return this.apiClient.callApi(
        '/organizations/{organizationId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationActionBatch operation.
     * @callback module:api/OrganizationsApi~updateOrganizationActionBatchCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an action batch
     * Update an action batch
     * @param {String} organizationId 
     * @param {String} actionBatchId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationActionBatchRequest} [updateOrganizationActionBatchRequest] 
     * @param {module:api/OrganizationsApi~updateOrganizationActionBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateOrganizationActionBatch(organizationId, actionBatchId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateOrganizationActionBatchRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationActionBatch");
      }
      // verify the required parameter 'actionBatchId' is set
      if (actionBatchId === undefined || actionBatchId === null) {
        throw new Error("Missing the required parameter 'actionBatchId' when calling updateOrganizationActionBatch");
      }

      let pathParams = {
        'organizationId': organizationId,
        'actionBatchId': actionBatchId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/actionBatches/{actionBatchId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationAdaptivePolicyAcl operation.
     * @callback module:api/OrganizationsApi~updateOrganizationAdaptivePolicyAclCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an adaptive policy ACL
     * Updates an adaptive policy ACL
     * @param {String} organizationId 
     * @param {String} aclId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationAdaptivePolicyAclRequest} [updateOrganizationAdaptivePolicyAclRequest] 
     * @param {module:api/OrganizationsApi~updateOrganizationAdaptivePolicyAclCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateOrganizationAdaptivePolicyAcl(organizationId, aclId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateOrganizationAdaptivePolicyAclRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationAdaptivePolicyAcl");
      }
      // verify the required parameter 'aclId' is set
      if (aclId === undefined || aclId === null) {
        throw new Error("Missing the required parameter 'aclId' when calling updateOrganizationAdaptivePolicyAcl");
      }

      let pathParams = {
        'organizationId': organizationId,
        'aclId': aclId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/adaptivePolicy/acls/{aclId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationAdaptivePolicyGroup operation.
     * @callback module:api/OrganizationsApi~updateOrganizationAdaptivePolicyGroupCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an adaptive policy group
     * Updates an adaptive policy group. If updating \"Infrastructure\", only the SGT is allowed. Cannot update \"Unknown\".
     * @param {String} organizationId 
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationAdaptivePolicyGroupRequest} [updateOrganizationAdaptivePolicyGroupRequest] 
     * @param {module:api/OrganizationsApi~updateOrganizationAdaptivePolicyGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateOrganizationAdaptivePolicyGroup(organizationId, id, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateOrganizationAdaptivePolicyGroupRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationAdaptivePolicyGroup");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateOrganizationAdaptivePolicyGroup");
      }

      let pathParams = {
        'organizationId': organizationId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/adaptivePolicy/groups/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationAdaptivePolicyPolicy operation.
     * @callback module:api/OrganizationsApi~updateOrganizationAdaptivePolicyPolicyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an Adaptive Policy
     * Update an Adaptive Policy
     * @param {String} organizationId 
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationAdaptivePolicyPolicyRequest} [updateOrganizationAdaptivePolicyPolicyRequest] 
     * @param {module:api/OrganizationsApi~updateOrganizationAdaptivePolicyPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateOrganizationAdaptivePolicyPolicy(organizationId, id, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateOrganizationAdaptivePolicyPolicyRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationAdaptivePolicyPolicy");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateOrganizationAdaptivePolicyPolicy");
      }

      let pathParams = {
        'organizationId': organizationId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/adaptivePolicy/policies/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationAdaptivePolicySettings operation.
     * @callback module:api/OrganizationsApi~updateOrganizationAdaptivePolicySettingsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update global adaptive policy settings
     * Update global adaptive policy settings
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationAdaptivePolicySettingsRequest} [updateOrganizationAdaptivePolicySettingsRequest] 
     * @param {module:api/OrganizationsApi~updateOrganizationAdaptivePolicySettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateOrganizationAdaptivePolicySettings(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateOrganizationAdaptivePolicySettingsRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationAdaptivePolicySettings");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/adaptivePolicy/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationAdmin operation.
     * @callback module:api/OrganizationsApi~updateOrganizationAdminCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an administrator
     * Update an administrator
     * @param {String} organizationId 
     * @param {String} adminId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationAdminRequest} [updateOrganizationAdminRequest] 
     * @param {module:api/OrganizationsApi~updateOrganizationAdminCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateOrganizationAdmin(organizationId, adminId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateOrganizationAdminRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationAdmin");
      }
      // verify the required parameter 'adminId' is set
      if (adminId === undefined || adminId === null) {
        throw new Error("Missing the required parameter 'adminId' when calling updateOrganizationAdmin");
      }

      let pathParams = {
        'organizationId': organizationId,
        'adminId': adminId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/admins/{adminId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationAlertsProfile operation.
     * @callback module:api/OrganizationsApi~updateOrganizationAlertsProfileCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an organization-wide alert config
     * Update an organization-wide alert config
     * @param {String} organizationId 
     * @param {String} alertConfigId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationAlertsProfileRequest} [updateOrganizationAlertsProfileRequest] 
     * @param {module:api/OrganizationsApi~updateOrganizationAlertsProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateOrganizationAlertsProfile(organizationId, alertConfigId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateOrganizationAlertsProfileRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationAlertsProfile");
      }
      // verify the required parameter 'alertConfigId' is set
      if (alertConfigId === undefined || alertConfigId === null) {
        throw new Error("Missing the required parameter 'alertConfigId' when calling updateOrganizationAlertsProfile");
      }

      let pathParams = {
        'organizationId': organizationId,
        'alertConfigId': alertConfigId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/alerts/profiles/{alertConfigId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationBrandingPoliciesPriorities operation.
     * @callback module:api/OrganizationsApi~updateOrganizationBrandingPoliciesPrioritiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizationBrandingPoliciesPriorities200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the priority ordering of an organization's branding policies.
     * Update the priority ordering of an organization's branding policies.
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationBrandingPoliciesPrioritiesRequest} [updateOrganizationBrandingPoliciesPrioritiesRequest] 
     * @param {module:api/OrganizationsApi~updateOrganizationBrandingPoliciesPrioritiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizationBrandingPoliciesPriorities200Response}
     */
    updateOrganizationBrandingPoliciesPriorities(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateOrganizationBrandingPoliciesPrioritiesRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationBrandingPoliciesPriorities");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetOrganizationBrandingPoliciesPriorities200Response;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/brandingPolicies/priorities', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationBrandingPolicy operation.
     * @callback module:api/OrganizationsApi~updateOrganizationBrandingPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizationBrandingPolicies200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a branding policy
     * Update a branding policy
     * @param {String} organizationId 
     * @param {String} brandingPolicyId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationBrandingPolicyRequest} [updateOrganizationBrandingPolicyRequest] 
     * @param {module:api/OrganizationsApi~updateOrganizationBrandingPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizationBrandingPolicies200ResponseInner}
     */
    updateOrganizationBrandingPolicy(organizationId, brandingPolicyId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateOrganizationBrandingPolicyRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationBrandingPolicy");
      }
      // verify the required parameter 'brandingPolicyId' is set
      if (brandingPolicyId === undefined || brandingPolicyId === null) {
        throw new Error("Missing the required parameter 'brandingPolicyId' when calling updateOrganizationBrandingPolicy");
      }

      let pathParams = {
        'organizationId': organizationId,
        'brandingPolicyId': brandingPolicyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetOrganizationBrandingPolicies200ResponseInner;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/brandingPolicies/{brandingPolicyId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationConfigTemplate operation.
     * @callback module:api/OrganizationsApi~updateOrganizationConfigTemplateCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a configuration template
     * Update a configuration template
     * @param {String} organizationId 
     * @param {String} configTemplateId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationConfigTemplateRequest} [updateOrganizationConfigTemplateRequest] 
     * @param {module:api/OrganizationsApi~updateOrganizationConfigTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateOrganizationConfigTemplate(organizationId, configTemplateId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateOrganizationConfigTemplateRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationConfigTemplate");
      }
      // verify the required parameter 'configTemplateId' is set
      if (configTemplateId === undefined || configTemplateId === null) {
        throw new Error("Missing the required parameter 'configTemplateId' when calling updateOrganizationConfigTemplate");
      }

      let pathParams = {
        'organizationId': organizationId,
        'configTemplateId': configTemplateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/configTemplates/{configTemplateId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationEarlyAccessFeaturesOptIn operation.
     * @callback module:api/OrganizationsApi~updateOrganizationEarlyAccessFeaturesOptInCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an early access feature opt-in for an organization
     * Update an early access feature opt-in for an organization
     * @param {String} organizationId 
     * @param {String} optInId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationEarlyAccessFeaturesOptInRequest} [updateOrganizationEarlyAccessFeaturesOptInRequest] 
     * @param {module:api/OrganizationsApi~updateOrganizationEarlyAccessFeaturesOptInCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateOrganizationEarlyAccessFeaturesOptIn(organizationId, optInId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateOrganizationEarlyAccessFeaturesOptInRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationEarlyAccessFeaturesOptIn");
      }
      // verify the required parameter 'optInId' is set
      if (optInId === undefined || optInId === null) {
        throw new Error("Missing the required parameter 'optInId' when calling updateOrganizationEarlyAccessFeaturesOptIn");
      }

      let pathParams = {
        'organizationId': organizationId,
        'optInId': optInId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/earlyAccess/features/optIns/{optInId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationLicense operation.
     * @callback module:api/OrganizationsApi~updateOrganizationLicenseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizationLicenses200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a license
     * Update a license
     * @param {String} organizationId 
     * @param {String} licenseId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationLicenseRequest} [updateOrganizationLicenseRequest] 
     * @param {module:api/OrganizationsApi~updateOrganizationLicenseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizationLicenses200ResponseInner}
     */
    updateOrganizationLicense(organizationId, licenseId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateOrganizationLicenseRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationLicense");
      }
      // verify the required parameter 'licenseId' is set
      if (licenseId === undefined || licenseId === null) {
        throw new Error("Missing the required parameter 'licenseId' when calling updateOrganizationLicense");
      }

      let pathParams = {
        'organizationId': organizationId,
        'licenseId': licenseId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetOrganizationLicenses200ResponseInner;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/licenses/{licenseId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationLoginSecurity operation.
     * @callback module:api/OrganizationsApi~updateOrganizationLoginSecurityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizationLoginSecurity200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the login security settings for an organization
     * Update the login security settings for an organization
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationLoginSecurityRequest} [updateOrganizationLoginSecurityRequest] 
     * @param {module:api/OrganizationsApi~updateOrganizationLoginSecurityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizationLoginSecurity200Response}
     */
    updateOrganizationLoginSecurity(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateOrganizationLoginSecurityRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationLoginSecurity");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetOrganizationLoginSecurity200Response;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/loginSecurity', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationPolicyObject operation.
     * @callback module:api/OrganizationsApi~updateOrganizationPolicyObjectCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a Policy Object.
     * Updates a Policy Object.
     * @param {String} organizationId 
     * @param {String} policyObjectId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationPolicyObjectRequest} [updateOrganizationPolicyObjectRequest] 
     * @param {module:api/OrganizationsApi~updateOrganizationPolicyObjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateOrganizationPolicyObject(organizationId, policyObjectId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateOrganizationPolicyObjectRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationPolicyObject");
      }
      // verify the required parameter 'policyObjectId' is set
      if (policyObjectId === undefined || policyObjectId === null) {
        throw new Error("Missing the required parameter 'policyObjectId' when calling updateOrganizationPolicyObject");
      }

      let pathParams = {
        'organizationId': organizationId,
        'policyObjectId': policyObjectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/policyObjects/{policyObjectId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationPolicyObjectsGroup operation.
     * @callback module:api/OrganizationsApi~updateOrganizationPolicyObjectsGroupCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a Policy Object Group.
     * Updates a Policy Object Group.
     * @param {String} organizationId 
     * @param {String} policyObjectGroupId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationPolicyObjectsGroupRequest} [updateOrganizationPolicyObjectsGroupRequest] 
     * @param {module:api/OrganizationsApi~updateOrganizationPolicyObjectsGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateOrganizationPolicyObjectsGroup(organizationId, policyObjectGroupId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateOrganizationPolicyObjectsGroupRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationPolicyObjectsGroup");
      }
      // verify the required parameter 'policyObjectGroupId' is set
      if (policyObjectGroupId === undefined || policyObjectGroupId === null) {
        throw new Error("Missing the required parameter 'policyObjectGroupId' when calling updateOrganizationPolicyObjectsGroup");
      }

      let pathParams = {
        'organizationId': organizationId,
        'policyObjectGroupId': policyObjectGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/policyObjects/groups/{policyObjectGroupId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationSaml operation.
     * @callback module:api/OrganizationsApi~updateOrganizationSamlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizationSaml200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the SAML SSO enabled settings for an organization.
     * Updates the SAML SSO enabled settings for an organization.
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationSamlRequest} [updateOrganizationSamlRequest] 
     * @param {module:api/OrganizationsApi~updateOrganizationSamlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizationSaml200Response}
     */
    updateOrganizationSaml(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateOrganizationSamlRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationSaml");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetOrganizationSaml200Response;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/saml', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationSamlIdp operation.
     * @callback module:api/OrganizationsApi~updateOrganizationSamlIdpCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationSamlIdps200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a SAML IdP in your organization
     * Update a SAML IdP in your organization
     * @param {String} organizationId 
     * @param {String} idpId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationSamlIdpRequest} [updateOrganizationSamlIdpRequest] 
     * @param {module:api/OrganizationsApi~updateOrganizationSamlIdpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationSamlIdps200ResponseInner>}
     */
    updateOrganizationSamlIdp(organizationId, idpId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateOrganizationSamlIdpRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationSamlIdp");
      }
      // verify the required parameter 'idpId' is set
      if (idpId === undefined || idpId === null) {
        throw new Error("Missing the required parameter 'idpId' when calling updateOrganizationSamlIdp");
      }

      let pathParams = {
        'organizationId': organizationId,
        'idpId': idpId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationSamlIdps200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/saml/idps/{idpId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationSamlRole operation.
     * @callback module:api/OrganizationsApi~updateOrganizationSamlRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateOrganizationSamlRole200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a SAML role
     * Update a SAML role
     * @param {String} organizationId 
     * @param {String} samlRoleId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationSamlRoleRequest} [updateOrganizationSamlRoleRequest] 
     * @param {module:api/OrganizationsApi~updateOrganizationSamlRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateOrganizationSamlRole200Response}
     */
    updateOrganizationSamlRole(organizationId, samlRoleId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateOrganizationSamlRoleRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationSamlRole");
      }
      // verify the required parameter 'samlRoleId' is set
      if (samlRoleId === undefined || samlRoleId === null) {
        throw new Error("Missing the required parameter 'samlRoleId' when calling updateOrganizationSamlRole");
      }

      let pathParams = {
        'organizationId': organizationId,
        'samlRoleId': samlRoleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateOrganizationSamlRole200Response;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/samlRoles/{samlRoleId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationSnmp operation.
     * @callback module:api/OrganizationsApi~updateOrganizationSnmpCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the SNMP settings for an organization
     * Update the SNMP settings for an organization
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationSnmpRequest} [updateOrganizationSnmpRequest] 
     * @param {module:api/OrganizationsApi~updateOrganizationSnmpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateOrganizationSnmp(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateOrganizationSnmpRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationSnmp");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/snmp', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
