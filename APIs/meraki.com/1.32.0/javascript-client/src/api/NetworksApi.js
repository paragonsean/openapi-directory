/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BindNetworkRequest from '../model/BindNetworkRequest';
import ClaimNetworkDevicesRequest from '../model/ClaimNetworkDevicesRequest';
import CombineOrganizationNetworks200Response from '../model/CombineOrganizationNetworks200Response';
import CombineOrganizationNetworksRequest from '../model/CombineOrganizationNetworksRequest';
import CreateNetworkFirmwareUpgradesRollback200Response from '../model/CreateNetworkFirmwareUpgradesRollback200Response';
import CreateNetworkFirmwareUpgradesRollbackRequest from '../model/CreateNetworkFirmwareUpgradesRollbackRequest';
import CreateNetworkFirmwareUpgradesStagedEventRequest from '../model/CreateNetworkFirmwareUpgradesStagedEventRequest';
import CreateNetworkFirmwareUpgradesStagedGroupRequest from '../model/CreateNetworkFirmwareUpgradesStagedGroupRequest';
import CreateNetworkFloorPlanRequest from '../model/CreateNetworkFloorPlanRequest';
import CreateNetworkGroupPolicyRequest from '../model/CreateNetworkGroupPolicyRequest';
import CreateNetworkMerakiAuthUserRequest from '../model/CreateNetworkMerakiAuthUserRequest';
import CreateNetworkMqttBrokerRequest from '../model/CreateNetworkMqttBrokerRequest';
import CreateNetworkPiiRequestRequest from '../model/CreateNetworkPiiRequestRequest';
import CreateNetworkWebhooksHttpServerRequest from '../model/CreateNetworkWebhooksHttpServerRequest';
import CreateNetworkWebhooksPayloadTemplateRequest from '../model/CreateNetworkWebhooksPayloadTemplateRequest';
import CreateNetworkWebhooksWebhookTest201Response from '../model/CreateNetworkWebhooksWebhookTest201Response';
import CreateNetworkWebhooksWebhookTestRequest from '../model/CreateNetworkWebhooksWebhookTestRequest';
import CreateOrganizationNetworkRequest from '../model/CreateOrganizationNetworkRequest';
import GetNetwork200Response from '../model/GetNetwork200Response';
import GetNetworkAlertsHistory200ResponseInner from '../model/GetNetworkAlertsHistory200ResponseInner';
import GetNetworkClient200Response from '../model/GetNetworkClient200Response';
import GetNetworkClients200Response from '../model/GetNetworkClients200Response';
import GetNetworkEvents200Response from '../model/GetNetworkEvents200Response';
import GetNetworkEventsEventTypes200ResponseInner from '../model/GetNetworkEventsEventTypes200ResponseInner';
import GetNetworkFirmwareUpgrades200Response from '../model/GetNetworkFirmwareUpgrades200Response';
import GetNetworkFirmwareUpgradesStagedEvents200Response from '../model/GetNetworkFirmwareUpgradesStagedEvents200Response';
import GetNetworkFirmwareUpgradesStagedGroups200ResponseInner from '../model/GetNetworkFirmwareUpgradesStagedGroups200ResponseInner';
import GetNetworkFirmwareUpgradesStagedStages200ResponseInner from '../model/GetNetworkFirmwareUpgradesStagedStages200ResponseInner';
import GetNetworkHealthAlerts200ResponseInner from '../model/GetNetworkHealthAlerts200ResponseInner';
import GetNetworkMerakiAuthUsers200ResponseInner from '../model/GetNetworkMerakiAuthUsers200ResponseInner';
import GetNetworkPoliciesByClient200ResponseInner from '../model/GetNetworkPoliciesByClient200ResponseInner';
import GetNetworkSettings200Response from '../model/GetNetworkSettings200Response';
import GetNetworkSyslogServers200Response from '../model/GetNetworkSyslogServers200Response';
import GetNetworkWebhooksHttpServers200ResponseInner from '../model/GetNetworkWebhooksHttpServers200ResponseInner';
import GetNetworkWebhooksPayloadTemplates200ResponseInner from '../model/GetNetworkWebhooksPayloadTemplates200ResponseInner';
import ProvisionNetworkClientsRequest from '../model/ProvisionNetworkClientsRequest';
import RemoveNetworkDevicesRequest from '../model/RemoveNetworkDevicesRequest';
import RollbacksNetworkFirmwareUpgradesStagedEventsRequest from '../model/RollbacksNetworkFirmwareUpgradesStagedEventsRequest';
import SplitNetwork200Response from '../model/SplitNetwork200Response';
import UnbindNetworkRequest from '../model/UnbindNetworkRequest';
import UpdateNetworkAlertsSettingsRequest from '../model/UpdateNetworkAlertsSettingsRequest';
import UpdateNetworkClientPolicyRequest from '../model/UpdateNetworkClientPolicyRequest';
import UpdateNetworkClientSplashAuthorizationStatusRequest from '../model/UpdateNetworkClientSplashAuthorizationStatusRequest';
import UpdateNetworkFirmwareUpgradesRequest from '../model/UpdateNetworkFirmwareUpgradesRequest';
import UpdateNetworkFirmwareUpgradesStagedEventsRequest from '../model/UpdateNetworkFirmwareUpgradesStagedEventsRequest';
import UpdateNetworkFirmwareUpgradesStagedStagesRequest from '../model/UpdateNetworkFirmwareUpgradesStagedStagesRequest';
import UpdateNetworkFloorPlanRequest from '../model/UpdateNetworkFloorPlanRequest';
import UpdateNetworkGroupPolicyRequest from '../model/UpdateNetworkGroupPolicyRequest';
import UpdateNetworkMerakiAuthUserRequest from '../model/UpdateNetworkMerakiAuthUserRequest';
import UpdateNetworkMqttBrokerRequest from '../model/UpdateNetworkMqttBrokerRequest';
import UpdateNetworkNetflowRequest from '../model/UpdateNetworkNetflowRequest';
import UpdateNetworkRequest from '../model/UpdateNetworkRequest';
import UpdateNetworkSettingsRequest from '../model/UpdateNetworkSettingsRequest';
import UpdateNetworkSnmpRequest from '../model/UpdateNetworkSnmpRequest';
import UpdateNetworkSyslogServersRequest from '../model/UpdateNetworkSyslogServersRequest';
import UpdateNetworkTrafficAnalysisRequest from '../model/UpdateNetworkTrafficAnalysisRequest';
import UpdateNetworkWebhooksHttpServerRequest from '../model/UpdateNetworkWebhooksHttpServerRequest';
import UpdateNetworkWebhooksPayloadTemplateRequest from '../model/UpdateNetworkWebhooksPayloadTemplateRequest';
import VmxNetworkDevicesClaimRequest from '../model/VmxNetworkDevicesClaimRequest';

/**
* Networks service.
* @module api/NetworksApi
* @version 1.32.0
*/
export default class NetworksApi {

    /**
    * Constructs a new NetworksApi. 
    * @alias module:api/NetworksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the bindNetwork operation.
     * @callback module:api/NetworksApi~bindNetworkCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bind a network to a template.
     * Bind a network to a template.
     * @param {String} networkId 
     * @param {module:model/BindNetworkRequest} bindNetworkRequest 
     * @param {module:api/NetworksApi~bindNetworkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    bindNetwork(networkId, bindNetworkRequest, callback) {
      let postBody = bindNetworkRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling bindNetwork");
      }
      // verify the required parameter 'bindNetworkRequest' is set
      if (bindNetworkRequest === undefined || bindNetworkRequest === null) {
        throw new Error("Missing the required parameter 'bindNetworkRequest' when calling bindNetwork");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/bind', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the claimNetworkDevices operation.
     * @callback module:api/NetworksApi~claimNetworkDevicesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Claim devices into a network. (Note: for recently claimed devices, it may take a few minutes for API requsts against that device to succeed)
     * Claim devices into a network. (Note: for recently claimed devices, it may take a few minutes for API requsts against that device to succeed)
     * @param {String} networkId 
     * @param {module:model/ClaimNetworkDevicesRequest} claimNetworkDevicesRequest 
     * @param {module:api/NetworksApi~claimNetworkDevicesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    claimNetworkDevices(networkId, claimNetworkDevicesRequest, callback) {
      let postBody = claimNetworkDevicesRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling claimNetworkDevices");
      }
      // verify the required parameter 'claimNetworkDevicesRequest' is set
      if (claimNetworkDevicesRequest === undefined || claimNetworkDevicesRequest === null) {
        throw new Error("Missing the required parameter 'claimNetworkDevicesRequest' when calling claimNetworkDevices");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/devices/claim', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the combineOrganizationNetworks_1 operation.
     * @callback module:api/NetworksApi~combineOrganizationNetworks_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CombineOrganizationNetworks200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Combine multiple networks into a single network
     * Combine multiple networks into a single network
     * @param {String} organizationId 
     * @param {module:model/CombineOrganizationNetworksRequest} combineOrganizationNetworksRequest 
     * @param {module:api/NetworksApi~combineOrganizationNetworks_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CombineOrganizationNetworks200Response}
     */
    combineOrganizationNetworks_1(organizationId, combineOrganizationNetworksRequest, callback) {
      let postBody = combineOrganizationNetworksRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling combineOrganizationNetworks_1");
      }
      // verify the required parameter 'combineOrganizationNetworksRequest' is set
      if (combineOrganizationNetworksRequest === undefined || combineOrganizationNetworksRequest === null) {
        throw new Error("Missing the required parameter 'combineOrganizationNetworksRequest' when calling combineOrganizationNetworks_1");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CombineOrganizationNetworks200Response;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/networks/combine', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkFirmwareUpgradesRollback operation.
     * @callback module:api/NetworksApi~createNetworkFirmwareUpgradesRollbackCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateNetworkFirmwareUpgradesRollback200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rollback a Firmware Upgrade For A Network
     * Rollback a Firmware Upgrade For A Network
     * @param {String} networkId 
     * @param {module:model/CreateNetworkFirmwareUpgradesRollbackRequest} createNetworkFirmwareUpgradesRollbackRequest 
     * @param {module:api/NetworksApi~createNetworkFirmwareUpgradesRollbackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateNetworkFirmwareUpgradesRollback200Response}
     */
    createNetworkFirmwareUpgradesRollback(networkId, createNetworkFirmwareUpgradesRollbackRequest, callback) {
      let postBody = createNetworkFirmwareUpgradesRollbackRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkFirmwareUpgradesRollback");
      }
      // verify the required parameter 'createNetworkFirmwareUpgradesRollbackRequest' is set
      if (createNetworkFirmwareUpgradesRollbackRequest === undefined || createNetworkFirmwareUpgradesRollbackRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkFirmwareUpgradesRollbackRequest' when calling createNetworkFirmwareUpgradesRollback");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateNetworkFirmwareUpgradesRollback200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/firmwareUpgrades/rollbacks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkFirmwareUpgradesStagedEvent operation.
     * @callback module:api/NetworksApi~createNetworkFirmwareUpgradesStagedEventCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkFirmwareUpgradesStagedEvents200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Staged Upgrade Event for a network
     * Create a Staged Upgrade Event for a network
     * @param {String} networkId 
     * @param {module:model/CreateNetworkFirmwareUpgradesStagedEventRequest} createNetworkFirmwareUpgradesStagedEventRequest 
     * @param {module:api/NetworksApi~createNetworkFirmwareUpgradesStagedEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkFirmwareUpgradesStagedEvents200Response}
     */
    createNetworkFirmwareUpgradesStagedEvent(networkId, createNetworkFirmwareUpgradesStagedEventRequest, callback) {
      let postBody = createNetworkFirmwareUpgradesStagedEventRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkFirmwareUpgradesStagedEvent");
      }
      // verify the required parameter 'createNetworkFirmwareUpgradesStagedEventRequest' is set
      if (createNetworkFirmwareUpgradesStagedEventRequest === undefined || createNetworkFirmwareUpgradesStagedEventRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkFirmwareUpgradesStagedEventRequest' when calling createNetworkFirmwareUpgradesStagedEvent");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkFirmwareUpgradesStagedEvents200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/firmwareUpgrades/staged/events', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkFirmwareUpgradesStagedGroup operation.
     * @callback module:api/NetworksApi~createNetworkFirmwareUpgradesStagedGroupCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Staged Upgrade Group for a network
     * Create a Staged Upgrade Group for a network
     * @param {String} networkId 
     * @param {module:model/CreateNetworkFirmwareUpgradesStagedGroupRequest} createNetworkFirmwareUpgradesStagedGroupRequest 
     * @param {module:api/NetworksApi~createNetworkFirmwareUpgradesStagedGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNetworkFirmwareUpgradesStagedGroup(networkId, createNetworkFirmwareUpgradesStagedGroupRequest, callback) {
      let postBody = createNetworkFirmwareUpgradesStagedGroupRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkFirmwareUpgradesStagedGroup");
      }
      // verify the required parameter 'createNetworkFirmwareUpgradesStagedGroupRequest' is set
      if (createNetworkFirmwareUpgradesStagedGroupRequest === undefined || createNetworkFirmwareUpgradesStagedGroupRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkFirmwareUpgradesStagedGroupRequest' when calling createNetworkFirmwareUpgradesStagedGroup");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/firmwareUpgrades/staged/groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkFloorPlan operation.
     * @callback module:api/NetworksApi~createNetworkFloorPlanCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload a floor plan
     * Upload a floor plan
     * @param {String} networkId 
     * @param {module:model/CreateNetworkFloorPlanRequest} createNetworkFloorPlanRequest 
     * @param {module:api/NetworksApi~createNetworkFloorPlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNetworkFloorPlan(networkId, createNetworkFloorPlanRequest, callback) {
      let postBody = createNetworkFloorPlanRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkFloorPlan");
      }
      // verify the required parameter 'createNetworkFloorPlanRequest' is set
      if (createNetworkFloorPlanRequest === undefined || createNetworkFloorPlanRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkFloorPlanRequest' when calling createNetworkFloorPlan");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/floorPlans', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkGroupPolicy operation.
     * @callback module:api/NetworksApi~createNetworkGroupPolicyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a group policy
     * Create a group policy
     * @param {String} networkId 
     * @param {module:model/CreateNetworkGroupPolicyRequest} createNetworkGroupPolicyRequest 
     * @param {module:api/NetworksApi~createNetworkGroupPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNetworkGroupPolicy(networkId, createNetworkGroupPolicyRequest, callback) {
      let postBody = createNetworkGroupPolicyRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkGroupPolicy");
      }
      // verify the required parameter 'createNetworkGroupPolicyRequest' is set
      if (createNetworkGroupPolicyRequest === undefined || createNetworkGroupPolicyRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkGroupPolicyRequest' when calling createNetworkGroupPolicy");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/groupPolicies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkMerakiAuthUser operation.
     * @callback module:api/NetworksApi~createNetworkMerakiAuthUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkMerakiAuthUsers200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Authorize a user configured with Meraki Authentication for a network (currently supports 802.1X, splash guest, and client VPN users, and currently, organizations have a 50,000 user cap)
     * Authorize a user configured with Meraki Authentication for a network (currently supports 802.1X, splash guest, and client VPN users, and currently, organizations have a 50,000 user cap)
     * @param {String} networkId 
     * @param {module:model/CreateNetworkMerakiAuthUserRequest} createNetworkMerakiAuthUserRequest 
     * @param {module:api/NetworksApi~createNetworkMerakiAuthUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkMerakiAuthUsers200ResponseInner}
     */
    createNetworkMerakiAuthUser(networkId, createNetworkMerakiAuthUserRequest, callback) {
      let postBody = createNetworkMerakiAuthUserRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkMerakiAuthUser");
      }
      // verify the required parameter 'createNetworkMerakiAuthUserRequest' is set
      if (createNetworkMerakiAuthUserRequest === undefined || createNetworkMerakiAuthUserRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkMerakiAuthUserRequest' when calling createNetworkMerakiAuthUser");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkMerakiAuthUsers200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/merakiAuthUsers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkMqttBroker operation.
     * @callback module:api/NetworksApi~createNetworkMqttBrokerCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an MQTT broker
     * Add an MQTT broker
     * @param {String} networkId 
     * @param {module:model/CreateNetworkMqttBrokerRequest} createNetworkMqttBrokerRequest 
     * @param {module:api/NetworksApi~createNetworkMqttBrokerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNetworkMqttBroker(networkId, createNetworkMqttBrokerRequest, callback) {
      let postBody = createNetworkMqttBrokerRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkMqttBroker");
      }
      // verify the required parameter 'createNetworkMqttBrokerRequest' is set
      if (createNetworkMqttBrokerRequest === undefined || createNetworkMqttBrokerRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkMqttBrokerRequest' when calling createNetworkMqttBroker");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/mqttBrokers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkPiiRequest operation.
     * @callback module:api/NetworksApi~createNetworkPiiRequestCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit a new delete or restrict processing PII request
     * Submit a new delete or restrict processing PII request  ## ALTERNATE PATH  ``` /organizations/{organizationId}/pii/requests ```
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateNetworkPiiRequestRequest} [createNetworkPiiRequestRequest] 
     * @param {module:api/NetworksApi~createNetworkPiiRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNetworkPiiRequest(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['createNetworkPiiRequestRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkPiiRequest");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/pii/requests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkWebhooksHttpServer operation.
     * @callback module:api/NetworksApi~createNetworkWebhooksHttpServerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkWebhooksHttpServers200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an HTTP server to a network
     * Add an HTTP server to a network
     * @param {String} networkId 
     * @param {module:model/CreateNetworkWebhooksHttpServerRequest} createNetworkWebhooksHttpServerRequest 
     * @param {module:api/NetworksApi~createNetworkWebhooksHttpServerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkWebhooksHttpServers200ResponseInner}
     */
    createNetworkWebhooksHttpServer(networkId, createNetworkWebhooksHttpServerRequest, callback) {
      let postBody = createNetworkWebhooksHttpServerRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkWebhooksHttpServer");
      }
      // verify the required parameter 'createNetworkWebhooksHttpServerRequest' is set
      if (createNetworkWebhooksHttpServerRequest === undefined || createNetworkWebhooksHttpServerRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkWebhooksHttpServerRequest' when calling createNetworkWebhooksHttpServer");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkWebhooksHttpServers200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/webhooks/httpServers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkWebhooksPayloadTemplate operation.
     * @callback module:api/NetworksApi~createNetworkWebhooksPayloadTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkWebhooksPayloadTemplates200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a webhook payload template for a network
     * Create a webhook payload template for a network
     * @param {String} networkId 
     * @param {module:model/CreateNetworkWebhooksPayloadTemplateRequest} createNetworkWebhooksPayloadTemplateRequest 
     * @param {module:api/NetworksApi~createNetworkWebhooksPayloadTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkWebhooksPayloadTemplates200ResponseInner}
     */
    createNetworkWebhooksPayloadTemplate(networkId, createNetworkWebhooksPayloadTemplateRequest, callback) {
      let postBody = createNetworkWebhooksPayloadTemplateRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkWebhooksPayloadTemplate");
      }
      // verify the required parameter 'createNetworkWebhooksPayloadTemplateRequest' is set
      if (createNetworkWebhooksPayloadTemplateRequest === undefined || createNetworkWebhooksPayloadTemplateRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkWebhooksPayloadTemplateRequest' when calling createNetworkWebhooksPayloadTemplate");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkWebhooksPayloadTemplates200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/webhooks/payloadTemplates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkWebhooksWebhookTest operation.
     * @callback module:api/NetworksApi~createNetworkWebhooksWebhookTestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateNetworkWebhooksWebhookTest201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send a test webhook for a network
     * Send a test webhook for a network
     * @param {String} networkId 
     * @param {module:model/CreateNetworkWebhooksWebhookTestRequest} createNetworkWebhooksWebhookTestRequest 
     * @param {module:api/NetworksApi~createNetworkWebhooksWebhookTestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateNetworkWebhooksWebhookTest201Response}
     */
    createNetworkWebhooksWebhookTest(networkId, createNetworkWebhooksWebhookTestRequest, callback) {
      let postBody = createNetworkWebhooksWebhookTestRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkWebhooksWebhookTest");
      }
      // verify the required parameter 'createNetworkWebhooksWebhookTestRequest' is set
      if (createNetworkWebhooksWebhookTestRequest === undefined || createNetworkWebhooksWebhookTestRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkWebhooksWebhookTestRequest' when calling createNetworkWebhooksWebhookTest");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateNetworkWebhooksWebhookTest201Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/webhooks/webhookTests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrganizationNetwork_1 operation.
     * @callback module:api/NetworksApi~createOrganizationNetwork_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetwork200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a network
     * Create a network
     * @param {String} organizationId 
     * @param {module:model/CreateOrganizationNetworkRequest} createOrganizationNetworkRequest 
     * @param {module:api/NetworksApi~createOrganizationNetwork_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetwork200Response}
     */
    createOrganizationNetwork_1(organizationId, createOrganizationNetworkRequest, callback) {
      let postBody = createOrganizationNetworkRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createOrganizationNetwork_1");
      }
      // verify the required parameter 'createOrganizationNetworkRequest' is set
      if (createOrganizationNetworkRequest === undefined || createOrganizationNetworkRequest === null) {
        throw new Error("Missing the required parameter 'createOrganizationNetworkRequest' when calling createOrganizationNetwork_1");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetwork200Response;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/networks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deferNetworkFirmwareUpgradesStagedEvents operation.
     * @callback module:api/NetworksApi~deferNetworkFirmwareUpgradesStagedEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkFirmwareUpgradesStagedEvents200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Postpone by 1 week all pending staged upgrade stages for a network
     * Postpone by 1 week all pending staged upgrade stages for a network
     * @param {String} networkId 
     * @param {module:api/NetworksApi~deferNetworkFirmwareUpgradesStagedEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkFirmwareUpgradesStagedEvents200Response}
     */
    deferNetworkFirmwareUpgradesStagedEvents(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deferNetworkFirmwareUpgradesStagedEvents");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkFirmwareUpgradesStagedEvents200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/firmwareUpgrades/staged/events/defer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetwork operation.
     * @callback module:api/NetworksApi~deleteNetworkCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a network
     * Delete a network
     * @param {String} networkId 
     * @param {module:api/NetworksApi~deleteNetworkCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetwork(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetwork");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkFirmwareUpgradesStagedGroup operation.
     * @callback module:api/NetworksApi~deleteNetworkFirmwareUpgradesStagedGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Staged Upgrade Group
     * Delete a Staged Upgrade Group
     * @param {String} networkId 
     * @param {String} groupId 
     * @param {module:api/NetworksApi~deleteNetworkFirmwareUpgradesStagedGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkFirmwareUpgradesStagedGroup(networkId, groupId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkFirmwareUpgradesStagedGroup");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling deleteNetworkFirmwareUpgradesStagedGroup");
      }

      let pathParams = {
        'networkId': networkId,
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/firmwareUpgrades/staged/groups/{groupId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkFloorPlan operation.
     * @callback module:api/NetworksApi~deleteNetworkFloorPlanCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Destroy a floor plan
     * Destroy a floor plan
     * @param {String} networkId 
     * @param {String} floorPlanId 
     * @param {module:api/NetworksApi~deleteNetworkFloorPlanCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkFloorPlan(networkId, floorPlanId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkFloorPlan");
      }
      // verify the required parameter 'floorPlanId' is set
      if (floorPlanId === undefined || floorPlanId === null) {
        throw new Error("Missing the required parameter 'floorPlanId' when calling deleteNetworkFloorPlan");
      }

      let pathParams = {
        'networkId': networkId,
        'floorPlanId': floorPlanId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/floorPlans/{floorPlanId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkGroupPolicy operation.
     * @callback module:api/NetworksApi~deleteNetworkGroupPolicyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a group policy
     * Delete a group policy
     * @param {String} networkId 
     * @param {String} groupPolicyId 
     * @param {module:api/NetworksApi~deleteNetworkGroupPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkGroupPolicy(networkId, groupPolicyId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkGroupPolicy");
      }
      // verify the required parameter 'groupPolicyId' is set
      if (groupPolicyId === undefined || groupPolicyId === null) {
        throw new Error("Missing the required parameter 'groupPolicyId' when calling deleteNetworkGroupPolicy");
      }

      let pathParams = {
        'networkId': networkId,
        'groupPolicyId': groupPolicyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/groupPolicies/{groupPolicyId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkMerakiAuthUser operation.
     * @callback module:api/NetworksApi~deleteNetworkMerakiAuthUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deauthorize a user
     * Deauthorize a user. To reauthorize a user after deauthorizing them, POST to this endpoint. (Currently, 802.1X RADIUS, splash guest, and client VPN users can be deauthorized.)
     * @param {String} networkId 
     * @param {String} merakiAuthUserId 
     * @param {module:api/NetworksApi~deleteNetworkMerakiAuthUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkMerakiAuthUser(networkId, merakiAuthUserId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkMerakiAuthUser");
      }
      // verify the required parameter 'merakiAuthUserId' is set
      if (merakiAuthUserId === undefined || merakiAuthUserId === null) {
        throw new Error("Missing the required parameter 'merakiAuthUserId' when calling deleteNetworkMerakiAuthUser");
      }

      let pathParams = {
        'networkId': networkId,
        'merakiAuthUserId': merakiAuthUserId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/merakiAuthUsers/{merakiAuthUserId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkMqttBroker operation.
     * @callback module:api/NetworksApi~deleteNetworkMqttBrokerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an MQTT broker
     * Delete an MQTT broker
     * @param {String} networkId 
     * @param {String} mqttBrokerId 
     * @param {module:api/NetworksApi~deleteNetworkMqttBrokerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkMqttBroker(networkId, mqttBrokerId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkMqttBroker");
      }
      // verify the required parameter 'mqttBrokerId' is set
      if (mqttBrokerId === undefined || mqttBrokerId === null) {
        throw new Error("Missing the required parameter 'mqttBrokerId' when calling deleteNetworkMqttBroker");
      }

      let pathParams = {
        'networkId': networkId,
        'mqttBrokerId': mqttBrokerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/mqttBrokers/{mqttBrokerId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkPiiRequest operation.
     * @callback module:api/NetworksApi~deleteNetworkPiiRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a restrict processing PII request
     * Delete a restrict processing PII request  ## ALTERNATE PATH  ``` /organizations/{organizationId}/pii/requests/{requestId} ```
     * @param {String} networkId 
     * @param {String} requestId 
     * @param {module:api/NetworksApi~deleteNetworkPiiRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkPiiRequest(networkId, requestId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkPiiRequest");
      }
      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling deleteNetworkPiiRequest");
      }

      let pathParams = {
        'networkId': networkId,
        'requestId': requestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/pii/requests/{requestId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkWebhooksHttpServer operation.
     * @callback module:api/NetworksApi~deleteNetworkWebhooksHttpServerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an HTTP server from a network
     * Delete an HTTP server from a network
     * @param {String} networkId 
     * @param {String} httpServerId 
     * @param {module:api/NetworksApi~deleteNetworkWebhooksHttpServerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkWebhooksHttpServer(networkId, httpServerId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkWebhooksHttpServer");
      }
      // verify the required parameter 'httpServerId' is set
      if (httpServerId === undefined || httpServerId === null) {
        throw new Error("Missing the required parameter 'httpServerId' when calling deleteNetworkWebhooksHttpServer");
      }

      let pathParams = {
        'networkId': networkId,
        'httpServerId': httpServerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/webhooks/httpServers/{httpServerId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkWebhooksPayloadTemplate operation.
     * @callback module:api/NetworksApi~deleteNetworkWebhooksPayloadTemplateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Destroy a webhook payload template for a network
     * Destroy a webhook payload template for a network. Does not work for included templates ('wpt_00001', 'wpt_00002', 'wpt_00003', 'wpt_00004', 'wpt_00005' or 'wpt_00006')
     * @param {String} networkId 
     * @param {String} payloadTemplateId 
     * @param {module:api/NetworksApi~deleteNetworkWebhooksPayloadTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkWebhooksPayloadTemplate(networkId, payloadTemplateId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkWebhooksPayloadTemplate");
      }
      // verify the required parameter 'payloadTemplateId' is set
      if (payloadTemplateId === undefined || payloadTemplateId === null) {
        throw new Error("Missing the required parameter 'payloadTemplateId' when calling deleteNetworkWebhooksPayloadTemplate");
      }

      let pathParams = {
        'networkId': networkId,
        'payloadTemplateId': payloadTemplateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/webhooks/payloadTemplates/{payloadTemplateId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetwork operation.
     * @callback module:api/NetworksApi~getNetworkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetwork200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a network
     * Return a network
     * @param {String} networkId 
     * @param {module:api/NetworksApi~getNetworkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetwork200Response}
     */
    getNetwork(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetwork");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetwork200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkAlertsHistory operation.
     * @callback module:api/NetworksApi~getNetworkAlertsHistoryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkAlertsHistory200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the alert history for this network
     * Return the alert history for this network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:api/NetworksApi~getNetworkAlertsHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkAlertsHistory200ResponseInner>}
     */
    getNetworkAlertsHistory(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkAlertsHistory");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkAlertsHistory200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/alerts/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkAlertsSettings operation.
     * @callback module:api/NetworksApi~getNetworkAlertsSettingsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the alert configuration for this network
     * Return the alert configuration for this network
     * @param {String} networkId 
     * @param {module:api/NetworksApi~getNetworkAlertsSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkAlertsSettings(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkAlertsSettings");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/alerts/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkBluetoothClient operation.
     * @callback module:api/NetworksApi~getNetworkBluetoothClientCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a Bluetooth client
     * Return a Bluetooth client. Bluetooth clients can be identified by their ID or their MAC.
     * @param {String} networkId 
     * @param {String} bluetoothClientId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeConnectivityHistory] Include the connectivity history for this client
     * @param {Number} [connectivityHistoryTimespan] The timespan, in seconds, for the connectivityHistory data. By default 1 day, 86400, will be used.
     * @param {module:api/NetworksApi~getNetworkBluetoothClientCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkBluetoothClient(networkId, bluetoothClientId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkBluetoothClient");
      }
      // verify the required parameter 'bluetoothClientId' is set
      if (bluetoothClientId === undefined || bluetoothClientId === null) {
        throw new Error("Missing the required parameter 'bluetoothClientId' when calling getNetworkBluetoothClient");
      }

      let pathParams = {
        'networkId': networkId,
        'bluetoothClientId': bluetoothClientId
      };
      let queryParams = {
        'includeConnectivityHistory': opts['includeConnectivityHistory'],
        'connectivityHistoryTimespan': opts['connectivityHistoryTimespan']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/bluetoothClients/{bluetoothClientId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkBluetoothClients operation.
     * @callback module:api/NetworksApi~getNetworkBluetoothClientsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the Bluetooth clients seen by APs in this network
     * List the Bluetooth clients seen by APs in this network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 7 days from today.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 7 days. The default is 1 day.
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 5 - 1000. Default is 10.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {Boolean} [includeConnectivityHistory] Include the connectivity history for this client
     * @param {module:api/NetworksApi~getNetworkBluetoothClientsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkBluetoothClients(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkBluetoothClients");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        't0': opts['t0'],
        'timespan': opts['timespan'],
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        'includeConnectivityHistory': opts['includeConnectivityHistory']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/bluetoothClients', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkClient operation.
     * @callback module:api/NetworksApi~getNetworkClientCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkClient200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the client associated with the given identifier
     * Return the client associated with the given identifier. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param {String} networkId 
     * @param {String} clientId 
     * @param {module:api/NetworksApi~getNetworkClientCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkClient200Response}
     */
    getNetworkClient(networkId, clientId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkClient");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getNetworkClient");
      }

      let pathParams = {
        'networkId': networkId,
        'clientId': clientId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkClient200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/clients/{clientId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkClientPolicy operation.
     * @callback module:api/NetworksApi~getNetworkClientPolicyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the policy assigned to a client on the network
     * Return the policy assigned to a client on the network. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param {String} networkId 
     * @param {String} clientId 
     * @param {module:api/NetworksApi~getNetworkClientPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkClientPolicy(networkId, clientId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkClientPolicy");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getNetworkClientPolicy");
      }

      let pathParams = {
        'networkId': networkId,
        'clientId': clientId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/clients/{clientId}/policy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkClientSplashAuthorizationStatus operation.
     * @callback module:api/NetworksApi~getNetworkClientSplashAuthorizationStatusCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the splash authorization for a client, for each SSID they've associated with through splash
     * Return the splash authorization for a client, for each SSID they've associated with through splash. Only enabled SSIDs with Click-through splash enabled will be included. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param {String} networkId 
     * @param {String} clientId 
     * @param {module:api/NetworksApi~getNetworkClientSplashAuthorizationStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkClientSplashAuthorizationStatus(networkId, clientId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkClientSplashAuthorizationStatus");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getNetworkClientSplashAuthorizationStatus");
      }

      let pathParams = {
        'networkId': networkId,
        'clientId': clientId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/clients/{clientId}/splashAuthorizationStatus', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkClientTrafficHistory operation.
     * @callback module:api/NetworksApi~getNetworkClientTrafficHistoryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the client's network traffic data over time
     * Return the client's network traffic data over time. Usage data is in kilobytes. This endpoint requires detailed traffic analysis to be enabled on the Network-wide > General page. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param {String} networkId 
     * @param {String} clientId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:api/NetworksApi~getNetworkClientTrafficHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkClientTrafficHistory(networkId, clientId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkClientTrafficHistory");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getNetworkClientTrafficHistory");
      }

      let pathParams = {
        'networkId': networkId,
        'clientId': clientId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/clients/{clientId}/trafficHistory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkClientUsageHistory operation.
     * @callback module:api/NetworksApi~getNetworkClientUsageHistoryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the client's daily usage history
     * Return the client's daily usage history. Usage data is in kilobytes. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param {String} networkId 
     * @param {String} clientId 
     * @param {module:api/NetworksApi~getNetworkClientUsageHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkClientUsageHistory(networkId, clientId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkClientUsageHistory");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getNetworkClientUsageHistory");
      }

      let pathParams = {
        'networkId': networkId,
        'clientId': clientId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/clients/{clientId}/usageHistory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkClients operation.
     * @callback module:api/NetworksApi~getNetworkClientsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkClients200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the clients that have used this network in the timespan
     * List the clients that have used this network in the timespan
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 10.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {Array.<module:model/String>} [statuses] Filters clients based on status. Can be one of 'Online' or 'Offline'.
     * @param {String} [ip] Filters clients based on a partial or full match for the ip address field.
     * @param {String} [ip6] Filters clients based on a partial or full match for the ip6 address field.
     * @param {String} [ip6Local] Filters clients based on a partial or full match for the ip6Local address field.
     * @param {String} [mac] Filters clients based on a partial or full match for the mac address field.
     * @param {String} [os] Filters clients based on a partial or full match for the os (operating system) field.
     * @param {String} [description] Filters clients based on a partial or full match for the description field.
     * @param {String} [vlan] Filters clients based on the full match for the VLAN field.
     * @param {Array.<module:model/String>} [recentDeviceConnections] Filters clients based on recent connection type. Can be one of 'Wired' or 'Wireless'.
     * @param {module:api/NetworksApi~getNetworkClientsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkClients200Response}
     */
    getNetworkClients(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkClients");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        't0': opts['t0'],
        'timespan': opts['timespan'],
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        'statuses': this.apiClient.buildCollectionParam(opts['statuses'], 'csv'),
        'ip': opts['ip'],
        'ip6': opts['ip6'],
        'ip6Local': opts['ip6Local'],
        'mac': opts['mac'],
        'os': opts['os'],
        'description': opts['description'],
        'vlan': opts['vlan'],
        'recentDeviceConnections': this.apiClient.buildCollectionParam(opts['recentDeviceConnections'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkClients200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/clients', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkClientsApplicationUsage operation.
     * @callback module:api/NetworksApi~getNetworkClientsApplicationUsageCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the application usage data for clients
     * Return the application usage data for clients. Usage data is in kilobytes. Clients can be identified by client keys or either the MACs or IPs depending on whether the network uses Track-by-IP.
     * @param {String} networkId 
     * @param {String} clients A list of client keys, MACs or IPs separated by comma.
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} [ssidNumber] An SSID number to include. If not specified, eveusage histories application usagents for all SSIDs will be returned.
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
     * @param {module:api/NetworksApi~getNetworkClientsApplicationUsageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkClientsApplicationUsage(networkId, clients, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkClientsApplicationUsage");
      }
      // verify the required parameter 'clients' is set
      if (clients === undefined || clients === null) {
        throw new Error("Missing the required parameter 'clients' when calling getNetworkClientsApplicationUsage");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        'clients': clients,
        'ssidNumber': opts['ssidNumber'],
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/clients/applicationUsage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkClientsBandwidthUsageHistory operation.
     * @callback module:api/NetworksApi~getNetworkClientsBandwidthUsageHistoryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a timeseries of total traffic consumption rates for all clients on a network within a given timespan, in megabits per second.
     * Returns a timeseries of total traffic consumption rates for all clients on a network within a given timespan, in megabits per second.
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 30 days from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:api/NetworksApi~getNetworkClientsBandwidthUsageHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkClientsBandwidthUsageHistory(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkClientsBandwidthUsageHistory");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan'],
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/clients/bandwidthUsageHistory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkClientsOverview operation.
     * @callback module:api/NetworksApi~getNetworkClientsOverviewCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return overview statistics for network clients
     * Return overview statistics for network clients
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
     * @param {Number} [resolution] The time resolution in seconds for returned data. The valid resolutions are: 7200, 86400, 604800, 2592000. The default is 604800.
     * @param {module:api/NetworksApi~getNetworkClientsOverviewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkClientsOverview(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkClientsOverview");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan'],
        'resolution': opts['resolution']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/clients/overview', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkClientsUsageHistories operation.
     * @callback module:api/NetworksApi~getNetworkClientsUsageHistoriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the usage histories for clients
     * Return the usage histories for clients. Usage data is in kilobytes. Clients can be identified by client keys or either the MACs or IPs depending on whether the network uses Track-by-IP.
     * @param {String} networkId 
     * @param {String} clients A list of client keys, MACs or IPs separated by comma.
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} [ssidNumber] An SSID number to include. If not specified, events for all SSIDs will be returned.
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
     * @param {module:api/NetworksApi~getNetworkClientsUsageHistoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkClientsUsageHistories(networkId, clients, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkClientsUsageHistories");
      }
      // verify the required parameter 'clients' is set
      if (clients === undefined || clients === null) {
        throw new Error("Missing the required parameter 'clients' when calling getNetworkClientsUsageHistories");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        'clients': clients,
        'ssidNumber': opts['ssidNumber'],
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/clients/usageHistories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkDevices operation.
     * @callback module:api/NetworksApi~getNetworkDevicesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the devices in a network
     * List the devices in a network
     * @param {String} networkId 
     * @param {module:api/NetworksApi~getNetworkDevicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkDevices(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkDevices");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/devices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkEvents operation.
     * @callback module:api/NetworksApi~getNetworkEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkEvents200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the events for the network
     * List the events for the network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [productType] The product type to fetch events for. This parameter is required for networks with multiple device types. Valid types are wireless, appliance, switch, systemsManager, camera, and cellularGateway
     * @param {Array.<String>} [includedEventTypes] A list of event types. The returned events will be filtered to only include events with these types.
     * @param {Array.<String>} [excludedEventTypes] A list of event types. The returned events will be filtered to exclude events with these types.
     * @param {String} [deviceMac] The MAC address of the Meraki device which the list of events will be filtered with
     * @param {String} [deviceSerial] The serial of the Meraki device which the list of events will be filtered with
     * @param {String} [deviceName] The name of the Meraki device which the list of events will be filtered with
     * @param {String} [clientIp] The IP of the client which the list of events will be filtered with. Only supported for track-by-IP networks.
     * @param {String} [clientMac] The MAC address of the client which the list of events will be filtered with. Only supported for track-by-MAC networks.
     * @param {String} [clientName] The name, or partial name, of the client which the list of events will be filtered with
     * @param {String} [smDeviceMac] The MAC address of the Systems Manager device which the list of events will be filtered with
     * @param {String} [smDeviceName] The name of the Systems Manager device which the list of events will be filtered with
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 10.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:api/NetworksApi~getNetworkEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkEvents200Response}
     */
    getNetworkEvents(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkEvents");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        'productType': opts['productType'],
        'includedEventTypes': this.apiClient.buildCollectionParam(opts['includedEventTypes'], 'csv'),
        'excludedEventTypes': this.apiClient.buildCollectionParam(opts['excludedEventTypes'], 'csv'),
        'deviceMac': opts['deviceMac'],
        'deviceSerial': opts['deviceSerial'],
        'deviceName': opts['deviceName'],
        'clientIp': opts['clientIp'],
        'clientMac': opts['clientMac'],
        'clientName': opts['clientName'],
        'smDeviceMac': opts['smDeviceMac'],
        'smDeviceName': opts['smDeviceName'],
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkEvents200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkEventsEventTypes operation.
     * @callback module:api/NetworksApi~getNetworkEventsEventTypesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkEventsEventTypes200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the event type to human-readable description
     * List the event type to human-readable description
     * @param {String} networkId 
     * @param {module:api/NetworksApi~getNetworkEventsEventTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkEventsEventTypes200ResponseInner>}
     */
    getNetworkEventsEventTypes(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkEventsEventTypes");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkEventsEventTypes200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/events/eventTypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkFirmwareUpgrades operation.
     * @callback module:api/NetworksApi~getNetworkFirmwareUpgradesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkFirmwareUpgrades200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get firmware upgrade information for a network
     * Get firmware upgrade information for a network
     * @param {String} networkId 
     * @param {module:api/NetworksApi~getNetworkFirmwareUpgradesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkFirmwareUpgrades200Response}
     */
    getNetworkFirmwareUpgrades(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkFirmwareUpgrades");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkFirmwareUpgrades200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/firmwareUpgrades', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkFirmwareUpgradesStagedEvents operation.
     * @callback module:api/NetworksApi~getNetworkFirmwareUpgradesStagedEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkFirmwareUpgradesStagedEvents200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the Staged Upgrade Event from a network
     * Get the Staged Upgrade Event from a network
     * @param {String} networkId 
     * @param {module:api/NetworksApi~getNetworkFirmwareUpgradesStagedEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkFirmwareUpgradesStagedEvents200Response}
     */
    getNetworkFirmwareUpgradesStagedEvents(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkFirmwareUpgradesStagedEvents");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkFirmwareUpgradesStagedEvents200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/firmwareUpgrades/staged/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkFirmwareUpgradesStagedGroup operation.
     * @callback module:api/NetworksApi~getNetworkFirmwareUpgradesStagedGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkFirmwareUpgradesStagedGroups200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Staged Upgrade Group from a network
     * Get a Staged Upgrade Group from a network
     * @param {String} networkId 
     * @param {String} groupId 
     * @param {module:api/NetworksApi~getNetworkFirmwareUpgradesStagedGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkFirmwareUpgradesStagedGroups200ResponseInner}
     */
    getNetworkFirmwareUpgradesStagedGroup(networkId, groupId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkFirmwareUpgradesStagedGroup");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling getNetworkFirmwareUpgradesStagedGroup");
      }

      let pathParams = {
        'networkId': networkId,
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkFirmwareUpgradesStagedGroups200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/firmwareUpgrades/staged/groups/{groupId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkFirmwareUpgradesStagedGroups operation.
     * @callback module:api/NetworksApi~getNetworkFirmwareUpgradesStagedGroupsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkFirmwareUpgradesStagedGroups200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of Staged Upgrade Groups in a network
     * List of Staged Upgrade Groups in a network
     * @param {String} networkId 
     * @param {module:api/NetworksApi~getNetworkFirmwareUpgradesStagedGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkFirmwareUpgradesStagedGroups200ResponseInner>}
     */
    getNetworkFirmwareUpgradesStagedGroups(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkFirmwareUpgradesStagedGroups");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkFirmwareUpgradesStagedGroups200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/firmwareUpgrades/staged/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkFirmwareUpgradesStagedStages operation.
     * @callback module:api/NetworksApi~getNetworkFirmwareUpgradesStagedStagesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkFirmwareUpgradesStagedStages200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Order of Staged Upgrade Groups in a network
     * Order of Staged Upgrade Groups in a network
     * @param {String} networkId 
     * @param {module:api/NetworksApi~getNetworkFirmwareUpgradesStagedStagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkFirmwareUpgradesStagedStages200ResponseInner>}
     */
    getNetworkFirmwareUpgradesStagedStages(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkFirmwareUpgradesStagedStages");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkFirmwareUpgradesStagedStages200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/firmwareUpgrades/staged/stages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkFloorPlan operation.
     * @callback module:api/NetworksApi~getNetworkFloorPlanCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find a floor plan by ID
     * Find a floor plan by ID
     * @param {String} networkId 
     * @param {String} floorPlanId 
     * @param {module:api/NetworksApi~getNetworkFloorPlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkFloorPlan(networkId, floorPlanId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkFloorPlan");
      }
      // verify the required parameter 'floorPlanId' is set
      if (floorPlanId === undefined || floorPlanId === null) {
        throw new Error("Missing the required parameter 'floorPlanId' when calling getNetworkFloorPlan");
      }

      let pathParams = {
        'networkId': networkId,
        'floorPlanId': floorPlanId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/floorPlans/{floorPlanId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkFloorPlans operation.
     * @callback module:api/NetworksApi~getNetworkFloorPlansCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the floor plans that belong to your network
     * List the floor plans that belong to your network
     * @param {String} networkId 
     * @param {module:api/NetworksApi~getNetworkFloorPlansCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkFloorPlans(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkFloorPlans");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/floorPlans', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkGroupPolicies operation.
     * @callback module:api/NetworksApi~getNetworkGroupPoliciesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the group policies in a network
     * List the group policies in a network
     * @param {String} networkId 
     * @param {module:api/NetworksApi~getNetworkGroupPoliciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkGroupPolicies(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkGroupPolicies");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/groupPolicies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkGroupPolicy operation.
     * @callback module:api/NetworksApi~getNetworkGroupPolicyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Display a group policy
     * Display a group policy
     * @param {String} networkId 
     * @param {String} groupPolicyId 
     * @param {module:api/NetworksApi~getNetworkGroupPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkGroupPolicy(networkId, groupPolicyId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkGroupPolicy");
      }
      // verify the required parameter 'groupPolicyId' is set
      if (groupPolicyId === undefined || groupPolicyId === null) {
        throw new Error("Missing the required parameter 'groupPolicyId' when calling getNetworkGroupPolicy");
      }

      let pathParams = {
        'networkId': networkId,
        'groupPolicyId': groupPolicyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/groupPolicies/{groupPolicyId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkHealthAlerts operation.
     * @callback module:api/NetworksApi~getNetworkHealthAlertsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkHealthAlerts200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return all global alerts on this network
     * Return all global alerts on this network
     * @param {String} networkId 
     * @param {module:api/NetworksApi~getNetworkHealthAlertsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkHealthAlerts200ResponseInner>}
     */
    getNetworkHealthAlerts(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkHealthAlerts");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkHealthAlerts200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/health/alerts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkMerakiAuthUser operation.
     * @callback module:api/NetworksApi~getNetworkMerakiAuthUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkMerakiAuthUsers200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the Meraki Auth splash guest, RADIUS, or client VPN user
     * Return the Meraki Auth splash guest, RADIUS, or client VPN user
     * @param {String} networkId 
     * @param {String} merakiAuthUserId 
     * @param {module:api/NetworksApi~getNetworkMerakiAuthUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkMerakiAuthUsers200ResponseInner}
     */
    getNetworkMerakiAuthUser(networkId, merakiAuthUserId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkMerakiAuthUser");
      }
      // verify the required parameter 'merakiAuthUserId' is set
      if (merakiAuthUserId === undefined || merakiAuthUserId === null) {
        throw new Error("Missing the required parameter 'merakiAuthUserId' when calling getNetworkMerakiAuthUser");
      }

      let pathParams = {
        'networkId': networkId,
        'merakiAuthUserId': merakiAuthUserId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkMerakiAuthUsers200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/merakiAuthUsers/{merakiAuthUserId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkMerakiAuthUsers operation.
     * @callback module:api/NetworksApi~getNetworkMerakiAuthUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkMerakiAuthUsers200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the users configured under Meraki Authentication for a network (splash guest or RADIUS users for a wireless network, or client VPN users for a wired network)
     * List the users configured under Meraki Authentication for a network (splash guest or RADIUS users for a wireless network, or client VPN users for a wired network)
     * @param {String} networkId 
     * @param {module:api/NetworksApi~getNetworkMerakiAuthUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkMerakiAuthUsers200ResponseInner>}
     */
    getNetworkMerakiAuthUsers(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkMerakiAuthUsers");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkMerakiAuthUsers200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/merakiAuthUsers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkMqttBroker operation.
     * @callback module:api/NetworksApi~getNetworkMqttBrokerCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return an MQTT broker
     * Return an MQTT broker
     * @param {String} networkId 
     * @param {String} mqttBrokerId 
     * @param {module:api/NetworksApi~getNetworkMqttBrokerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkMqttBroker(networkId, mqttBrokerId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkMqttBroker");
      }
      // verify the required parameter 'mqttBrokerId' is set
      if (mqttBrokerId === undefined || mqttBrokerId === null) {
        throw new Error("Missing the required parameter 'mqttBrokerId' when calling getNetworkMqttBroker");
      }

      let pathParams = {
        'networkId': networkId,
        'mqttBrokerId': mqttBrokerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/mqttBrokers/{mqttBrokerId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkMqttBrokers operation.
     * @callback module:api/NetworksApi~getNetworkMqttBrokersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the MQTT brokers for this network
     * List the MQTT brokers for this network
     * @param {String} networkId 
     * @param {module:api/NetworksApi~getNetworkMqttBrokersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkMqttBrokers(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkMqttBrokers");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/mqttBrokers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkNetflow operation.
     * @callback module:api/NetworksApi~getNetworkNetflowCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the NetFlow traffic reporting settings for a network
     * Return the NetFlow traffic reporting settings for a network
     * @param {String} networkId 
     * @param {module:api/NetworksApi~getNetworkNetflowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkNetflow(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkNetflow");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/netflow', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkNetworkHealthChannelUtilization operation.
     * @callback module:api/NetworksApi~getNetworkNetworkHealthChannelUtilizationCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the channel utilization over each radio for all APs in a network.
     * Get the channel utilization over each radio for all APs in a network.
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
     * @param {Number} [resolution] The time resolution in seconds for returned data. The valid resolutions are: 600. The default is 600.
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 100. Default is 10.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:api/NetworksApi~getNetworkNetworkHealthChannelUtilizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkNetworkHealthChannelUtilization(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkNetworkHealthChannelUtilization");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan'],
        'resolution': opts['resolution'],
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/networkHealth/channelUtilization', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkPiiPiiKeys operation.
     * @callback module:api/NetworksApi~getNetworkPiiPiiKeysCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the keys required to access Personally Identifiable Information (PII) for a given identifier
     * List the keys required to access Personally Identifiable Information (PII) for a given identifier. Exactly one identifier will be accepted. If the organization contains org-wide Systems Manager users matching the key provided then there will be an entry with the key \"0\" containing the applicable keys.  ## ALTERNATE PATH  ``` /organizations/{organizationId}/pii/piiKeys ```
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {String} [username] The username of a Systems Manager user
     * @param {String} [email] The email of a network user account or a Systems Manager device
     * @param {String} [mac] The MAC of a network client device or a Systems Manager device
     * @param {String} [serial] The serial of a Systems Manager device
     * @param {String} [imei] The IMEI of a Systems Manager device
     * @param {String} [bluetoothMac] The MAC of a Bluetooth client
     * @param {module:api/NetworksApi~getNetworkPiiPiiKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkPiiPiiKeys(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkPiiPiiKeys");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        'username': opts['username'],
        'email': opts['email'],
        'mac': opts['mac'],
        'serial': opts['serial'],
        'imei': opts['imei'],
        'bluetoothMac': opts['bluetoothMac']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/pii/piiKeys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkPiiRequest operation.
     * @callback module:api/NetworksApi~getNetworkPiiRequestCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a PII request
     * Return a PII request  ## ALTERNATE PATH  ``` /organizations/{organizationId}/pii/requests/{requestId} ```
     * @param {String} networkId 
     * @param {String} requestId 
     * @param {module:api/NetworksApi~getNetworkPiiRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkPiiRequest(networkId, requestId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkPiiRequest");
      }
      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling getNetworkPiiRequest");
      }

      let pathParams = {
        'networkId': networkId,
        'requestId': requestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/pii/requests/{requestId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkPiiRequests operation.
     * @callback module:api/NetworksApi~getNetworkPiiRequestsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the PII requests for this network or organization
     * List the PII requests for this network or organization  ## ALTERNATE PATH  ``` /organizations/{organizationId}/pii/requests ```
     * @param {String} networkId 
     * @param {module:api/NetworksApi~getNetworkPiiRequestsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkPiiRequests(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkPiiRequests");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/pii/requests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkPiiSmDevicesForKey operation.
     * @callback module:api/NetworksApi~getNetworkPiiSmDevicesForKeyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Given a piece of Personally Identifiable Information (PII), return the Systems Manager device ID(s) associated with that identifier
     * Given a piece of Personally Identifiable Information (PII), return the Systems Manager device ID(s) associated with that identifier. These device IDs can be used with the Systems Manager API endpoints to retrieve device details. Exactly one identifier will be accepted.  ## ALTERNATE PATH  ``` /organizations/{organizationId}/pii/smDevicesForKey ```
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {String} [username] The username of a Systems Manager user
     * @param {String} [email] The email of a network user account or a Systems Manager device
     * @param {String} [mac] The MAC of a network client device or a Systems Manager device
     * @param {String} [serial] The serial of a Systems Manager device
     * @param {String} [imei] The IMEI of a Systems Manager device
     * @param {String} [bluetoothMac] The MAC of a Bluetooth client
     * @param {module:api/NetworksApi~getNetworkPiiSmDevicesForKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkPiiSmDevicesForKey(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkPiiSmDevicesForKey");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        'username': opts['username'],
        'email': opts['email'],
        'mac': opts['mac'],
        'serial': opts['serial'],
        'imei': opts['imei'],
        'bluetoothMac': opts['bluetoothMac']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/pii/smDevicesForKey', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkPiiSmOwnersForKey operation.
     * @callback module:api/NetworksApi~getNetworkPiiSmOwnersForKeyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Given a piece of Personally Identifiable Information (PII), return the Systems Manager owner ID(s) associated with that identifier
     * Given a piece of Personally Identifiable Information (PII), return the Systems Manager owner ID(s) associated with that identifier. These owner IDs can be used with the Systems Manager API endpoints to retrieve owner details. Exactly one identifier will be accepted.  ## ALTERNATE PATH  ``` /organizations/{organizationId}/pii/smOwnersForKey ```
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {String} [username] The username of a Systems Manager user
     * @param {String} [email] The email of a network user account or a Systems Manager device
     * @param {String} [mac] The MAC of a network client device or a Systems Manager device
     * @param {String} [serial] The serial of a Systems Manager device
     * @param {String} [imei] The IMEI of a Systems Manager device
     * @param {String} [bluetoothMac] The MAC of a Bluetooth client
     * @param {module:api/NetworksApi~getNetworkPiiSmOwnersForKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkPiiSmOwnersForKey(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkPiiSmOwnersForKey");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        'username': opts['username'],
        'email': opts['email'],
        'mac': opts['mac'],
        'serial': opts['serial'],
        'imei': opts['imei'],
        'bluetoothMac': opts['bluetoothMac']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/pii/smOwnersForKey', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkPoliciesByClient operation.
     * @callback module:api/NetworksApi~getNetworkPoliciesByClientCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkPoliciesByClient200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get policies for all clients with policies
     * Get policies for all clients with policies
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 50.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
     * @param {module:api/NetworksApi~getNetworkPoliciesByClientCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkPoliciesByClient200ResponseInner>}
     */
    getNetworkPoliciesByClient(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkPoliciesByClient");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        't0': opts['t0'],
        'timespan': opts['timespan']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkPoliciesByClient200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/policies/byClient', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSettings operation.
     * @callback module:api/NetworksApi~getNetworkSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkSettings200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the settings for a network
     * Return the settings for a network
     * @param {String} networkId 
     * @param {module:api/NetworksApi~getNetworkSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkSettings200Response}
     */
    getNetworkSettings(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSettings");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkSettings200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSnmp operation.
     * @callback module:api/NetworksApi~getNetworkSnmpCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the SNMP settings for a network
     * Return the SNMP settings for a network
     * @param {String} networkId 
     * @param {module:api/NetworksApi~getNetworkSnmpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkSnmp(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSnmp");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/snmp', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSplashLoginAttempts operation.
     * @callback module:api/NetworksApi~getNetworkSplashLoginAttemptsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the splash login attempts for a network
     * List the splash login attempts for a network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} [ssidNumber] Only return the login attempts for the specified SSID
     * @param {String} [loginIdentifier] The username, email, or phone number used during login
     * @param {Number} [timespan] The timespan, in seconds, for the login attempts. The period will be from [timespan] seconds ago until now. The maximum timespan is 3 months
     * @param {module:api/NetworksApi~getNetworkSplashLoginAttemptsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkSplashLoginAttempts(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSplashLoginAttempts");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        'ssidNumber': opts['ssidNumber'],
        'loginIdentifier': opts['loginIdentifier'],
        'timespan': opts['timespan']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/splashLoginAttempts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSyslogServers operation.
     * @callback module:api/NetworksApi~getNetworkSyslogServersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkSyslogServers200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the syslog servers for a network
     * List the syslog servers for a network
     * @param {String} networkId 
     * @param {module:api/NetworksApi~getNetworkSyslogServersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkSyslogServers200Response}
     */
    getNetworkSyslogServers(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSyslogServers");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkSyslogServers200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/syslogServers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkTopologyLinkLayer operation.
     * @callback module:api/NetworksApi~getNetworkTopologyLinkLayerCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the LLDP and CDP information for all discovered devices and connections in a network.
     * List the LLDP and CDP information for all discovered devices and connections in a network.
     * @param {String} networkId 
     * @param {module:api/NetworksApi~getNetworkTopologyLinkLayerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkTopologyLinkLayer(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkTopologyLinkLayer");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/topology/linkLayer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkTraffic operation.
     * @callback module:api/NetworksApi~getNetworkTrafficCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the traffic analysis data for this network
     * Return the traffic analysis data for this network. Traffic analysis with hostname visibility must be enabled on the network.
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 30 days from today.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 30 days.
     * @param {module:model/String} [deviceType] Filter the data by device type: 'combined', 'wireless', 'switch' or 'appliance'. Defaults to 'combined'. When using 'combined', for each rule the data will come from the device type with the most usage.
     * @param {module:api/NetworksApi~getNetworkTrafficCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkTraffic(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkTraffic");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        't0': opts['t0'],
        'timespan': opts['timespan'],
        'deviceType': opts['deviceType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/traffic', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkTrafficAnalysis operation.
     * @callback module:api/NetworksApi~getNetworkTrafficAnalysisCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the traffic analysis settings for a network
     * Return the traffic analysis settings for a network
     * @param {String} networkId 
     * @param {module:api/NetworksApi~getNetworkTrafficAnalysisCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkTrafficAnalysis(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkTrafficAnalysis");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/trafficAnalysis', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkTrafficShapingApplicationCategories operation.
     * @callback module:api/NetworksApi~getNetworkTrafficShapingApplicationCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the application categories for traffic shaping rules.
     * Returns the application categories for traffic shaping rules.
     * @param {String} networkId 
     * @param {module:api/NetworksApi~getNetworkTrafficShapingApplicationCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkTrafficShapingApplicationCategories(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkTrafficShapingApplicationCategories");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/trafficShaping/applicationCategories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkTrafficShapingDscpTaggingOptions operation.
     * @callback module:api/NetworksApi~getNetworkTrafficShapingDscpTaggingOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the available DSCP tagging options for your traffic shaping rules.
     * Returns the available DSCP tagging options for your traffic shaping rules.
     * @param {String} networkId 
     * @param {module:api/NetworksApi~getNetworkTrafficShapingDscpTaggingOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkTrafficShapingDscpTaggingOptions(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkTrafficShapingDscpTaggingOptions");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/trafficShaping/dscpTaggingOptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWebhooksHttpServer operation.
     * @callback module:api/NetworksApi~getNetworkWebhooksHttpServerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkWebhooksHttpServers200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return an HTTP server for a network
     * Return an HTTP server for a network
     * @param {String} networkId 
     * @param {String} httpServerId 
     * @param {module:api/NetworksApi~getNetworkWebhooksHttpServerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkWebhooksHttpServers200ResponseInner}
     */
    getNetworkWebhooksHttpServer(networkId, httpServerId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWebhooksHttpServer");
      }
      // verify the required parameter 'httpServerId' is set
      if (httpServerId === undefined || httpServerId === null) {
        throw new Error("Missing the required parameter 'httpServerId' when calling getNetworkWebhooksHttpServer");
      }

      let pathParams = {
        'networkId': networkId,
        'httpServerId': httpServerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkWebhooksHttpServers200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/webhooks/httpServers/{httpServerId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWebhooksHttpServers operation.
     * @callback module:api/NetworksApi~getNetworkWebhooksHttpServersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkWebhooksHttpServers200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the HTTP servers for a network
     * List the HTTP servers for a network
     * @param {String} networkId 
     * @param {module:api/NetworksApi~getNetworkWebhooksHttpServersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkWebhooksHttpServers200ResponseInner>}
     */
    getNetworkWebhooksHttpServers(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWebhooksHttpServers");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkWebhooksHttpServers200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/webhooks/httpServers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWebhooksPayloadTemplate operation.
     * @callback module:api/NetworksApi~getNetworkWebhooksPayloadTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkWebhooksPayloadTemplates200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the webhook payload template for a network
     * Get the webhook payload template for a network
     * @param {String} networkId 
     * @param {String} payloadTemplateId 
     * @param {module:api/NetworksApi~getNetworkWebhooksPayloadTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkWebhooksPayloadTemplates200ResponseInner}
     */
    getNetworkWebhooksPayloadTemplate(networkId, payloadTemplateId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWebhooksPayloadTemplate");
      }
      // verify the required parameter 'payloadTemplateId' is set
      if (payloadTemplateId === undefined || payloadTemplateId === null) {
        throw new Error("Missing the required parameter 'payloadTemplateId' when calling getNetworkWebhooksPayloadTemplate");
      }

      let pathParams = {
        'networkId': networkId,
        'payloadTemplateId': payloadTemplateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkWebhooksPayloadTemplates200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/webhooks/payloadTemplates/{payloadTemplateId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWebhooksPayloadTemplates operation.
     * @callback module:api/NetworksApi~getNetworkWebhooksPayloadTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkWebhooksPayloadTemplates200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the webhook payload templates for a network
     * List the webhook payload templates for a network
     * @param {String} networkId 
     * @param {module:api/NetworksApi~getNetworkWebhooksPayloadTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkWebhooksPayloadTemplates200ResponseInner>}
     */
    getNetworkWebhooksPayloadTemplates(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWebhooksPayloadTemplates");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkWebhooksPayloadTemplates200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/webhooks/payloadTemplates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWebhooksWebhookTest operation.
     * @callback module:api/NetworksApi~getNetworkWebhooksWebhookTestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateNetworkWebhooksWebhookTest201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the status of a webhook test for a network
     * Return the status of a webhook test for a network
     * @param {String} networkId 
     * @param {String} webhookTestId 
     * @param {module:api/NetworksApi~getNetworkWebhooksWebhookTestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateNetworkWebhooksWebhookTest201Response}
     */
    getNetworkWebhooksWebhookTest(networkId, webhookTestId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWebhooksWebhookTest");
      }
      // verify the required parameter 'webhookTestId' is set
      if (webhookTestId === undefined || webhookTestId === null) {
        throw new Error("Missing the required parameter 'webhookTestId' when calling getNetworkWebhooksWebhookTest");
      }

      let pathParams = {
        'networkId': networkId,
        'webhookTestId': webhookTestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreateNetworkWebhooksWebhookTest201Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/webhooks/webhookTests/{webhookTestId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationInventoryOnboardingCloudMonitoringNetworks_4 operation.
     * @callback module:api/NetworksApi~getOrganizationInventoryOnboardingCloudMonitoringNetworks_4Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetwork200Response>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list of networks eligible for adding cloud monitored device
     * Returns list of networks eligible for adding cloud monitored device
     * @param {String} organizationId 
     * @param {module:model/String} deviceType Device Type switch or wireless controller
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 100000. Default is 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:api/NetworksApi~getOrganizationInventoryOnboardingCloudMonitoringNetworks_4Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetwork200Response>}
     */
    getOrganizationInventoryOnboardingCloudMonitoringNetworks_4(organizationId, deviceType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationInventoryOnboardingCloudMonitoringNetworks_4");
      }
      // verify the required parameter 'deviceType' is set
      if (deviceType === undefined || deviceType === null) {
        throw new Error("Missing the required parameter 'deviceType' when calling getOrganizationInventoryOnboardingCloudMonitoringNetworks_4");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'deviceType': deviceType,
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetwork200Response];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/networks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationNetworks_1 operation.
     * @callback module:api/NetworksApi~getOrganizationNetworks_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetwork200Response>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the networks that the user has privileges on in an organization
     * List the networks that the user has privileges on in an organization
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {String} [configTemplateId] An optional parameter that is the ID of a config template. Will return all networks bound to that template.
     * @param {Boolean} [isBoundToConfigTemplate] An optional parameter to filter config template bound networks. If configTemplateId is set, this cannot be false.
     * @param {Array.<String>} [tags] An optional parameter to filter networks by tags. The filtering is case-sensitive. If tags are included, 'tagsFilterType' should also be included (see below).
     * @param {module:model/String} [tagsFilterType] An optional parameter of value 'withAnyTags' or 'withAllTags' to indicate whether to return networks which contain ANY or ALL of the included tags. If no type is included, 'withAnyTags' will be selected.
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 100000. Default is 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:api/NetworksApi~getOrganizationNetworks_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetwork200Response>}
     */
    getOrganizationNetworks_1(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationNetworks_1");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'configTemplateId': opts['configTemplateId'],
        'isBoundToConfigTemplate': opts['isBoundToConfigTemplate'],
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'csv'),
        'tagsFilterType': opts['tagsFilterType'],
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetwork200Response];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/networks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the provisionNetworkClients operation.
     * @callback module:api/NetworksApi~provisionNetworkClientsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provisions a client with a name and policy
     * Provisions a client with a name and policy. Clients can be provisioned before they associate to the network.
     * @param {String} networkId 
     * @param {module:model/ProvisionNetworkClientsRequest} provisionNetworkClientsRequest 
     * @param {module:api/NetworksApi~provisionNetworkClientsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    provisionNetworkClients(networkId, provisionNetworkClientsRequest, callback) {
      let postBody = provisionNetworkClientsRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling provisionNetworkClients");
      }
      // verify the required parameter 'provisionNetworkClientsRequest' is set
      if (provisionNetworkClientsRequest === undefined || provisionNetworkClientsRequest === null) {
        throw new Error("Missing the required parameter 'provisionNetworkClientsRequest' when calling provisionNetworkClients");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/clients/provision', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeNetworkDevices operation.
     * @callback module:api/NetworksApi~removeNetworkDevicesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a single device
     * Remove a single device
     * @param {String} networkId 
     * @param {module:model/RemoveNetworkDevicesRequest} removeNetworkDevicesRequest 
     * @param {module:api/NetworksApi~removeNetworkDevicesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeNetworkDevices(networkId, removeNetworkDevicesRequest, callback) {
      let postBody = removeNetworkDevicesRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling removeNetworkDevices");
      }
      // verify the required parameter 'removeNetworkDevicesRequest' is set
      if (removeNetworkDevicesRequest === undefined || removeNetworkDevicesRequest === null) {
        throw new Error("Missing the required parameter 'removeNetworkDevicesRequest' when calling removeNetworkDevices");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/devices/remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rollbacksNetworkFirmwareUpgradesStagedEvents operation.
     * @callback module:api/NetworksApi~rollbacksNetworkFirmwareUpgradesStagedEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkFirmwareUpgradesStagedEvents200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rollback a Staged Upgrade Event for a network
     * Rollback a Staged Upgrade Event for a network
     * @param {String} networkId 
     * @param {module:model/RollbacksNetworkFirmwareUpgradesStagedEventsRequest} rollbacksNetworkFirmwareUpgradesStagedEventsRequest 
     * @param {module:api/NetworksApi~rollbacksNetworkFirmwareUpgradesStagedEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkFirmwareUpgradesStagedEvents200Response}
     */
    rollbacksNetworkFirmwareUpgradesStagedEvents(networkId, rollbacksNetworkFirmwareUpgradesStagedEventsRequest, callback) {
      let postBody = rollbacksNetworkFirmwareUpgradesStagedEventsRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling rollbacksNetworkFirmwareUpgradesStagedEvents");
      }
      // verify the required parameter 'rollbacksNetworkFirmwareUpgradesStagedEventsRequest' is set
      if (rollbacksNetworkFirmwareUpgradesStagedEventsRequest === undefined || rollbacksNetworkFirmwareUpgradesStagedEventsRequest === null) {
        throw new Error("Missing the required parameter 'rollbacksNetworkFirmwareUpgradesStagedEventsRequest' when calling rollbacksNetworkFirmwareUpgradesStagedEvents");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkFirmwareUpgradesStagedEvents200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/firmwareUpgrades/staged/events/rollbacks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the splitNetwork operation.
     * @callback module:api/NetworksApi~splitNetworkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SplitNetwork200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Split a combined network into individual networks for each type of device
     * Split a combined network into individual networks for each type of device
     * @param {String} networkId 
     * @param {module:api/NetworksApi~splitNetworkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SplitNetwork200Response}
     */
    splitNetwork(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling splitNetwork");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SplitNetwork200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/split', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unbindNetwork operation.
     * @callback module:api/NetworksApi~unbindNetworkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetwork200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unbind a network from a template.
     * Unbind a network from a template.
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UnbindNetworkRequest} [unbindNetworkRequest] 
     * @param {module:api/NetworksApi~unbindNetworkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetwork200Response}
     */
    unbindNetwork(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['unbindNetworkRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling unbindNetwork");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetwork200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/unbind', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetwork operation.
     * @callback module:api/NetworksApi~updateNetworkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetwork200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a network
     * Update a network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkRequest} [updateNetworkRequest] 
     * @param {module:api/NetworksApi~updateNetworkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetwork200Response}
     */
    updateNetwork(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetwork");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetwork200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkAlertsSettings operation.
     * @callback module:api/NetworksApi~updateNetworkAlertsSettingsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the alert configuration for this network
     * Update the alert configuration for this network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkAlertsSettingsRequest} [updateNetworkAlertsSettingsRequest] 
     * @param {module:api/NetworksApi~updateNetworkAlertsSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkAlertsSettings(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkAlertsSettingsRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkAlertsSettings");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/alerts/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkClientPolicy operation.
     * @callback module:api/NetworksApi~updateNetworkClientPolicyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the policy assigned to a client on the network
     * Update the policy assigned to a client on the network. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param {String} networkId 
     * @param {String} clientId 
     * @param {module:model/UpdateNetworkClientPolicyRequest} updateNetworkClientPolicyRequest 
     * @param {module:api/NetworksApi~updateNetworkClientPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkClientPolicy(networkId, clientId, updateNetworkClientPolicyRequest, callback) {
      let postBody = updateNetworkClientPolicyRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkClientPolicy");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling updateNetworkClientPolicy");
      }
      // verify the required parameter 'updateNetworkClientPolicyRequest' is set
      if (updateNetworkClientPolicyRequest === undefined || updateNetworkClientPolicyRequest === null) {
        throw new Error("Missing the required parameter 'updateNetworkClientPolicyRequest' when calling updateNetworkClientPolicy");
      }

      let pathParams = {
        'networkId': networkId,
        'clientId': clientId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/clients/{clientId}/policy', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkClientSplashAuthorizationStatus operation.
     * @callback module:api/NetworksApi~updateNetworkClientSplashAuthorizationStatusCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a client's splash authorization
     * Update a client's splash authorization. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param {String} networkId 
     * @param {String} clientId 
     * @param {module:model/UpdateNetworkClientSplashAuthorizationStatusRequest} updateNetworkClientSplashAuthorizationStatusRequest 
     * @param {module:api/NetworksApi~updateNetworkClientSplashAuthorizationStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkClientSplashAuthorizationStatus(networkId, clientId, updateNetworkClientSplashAuthorizationStatusRequest, callback) {
      let postBody = updateNetworkClientSplashAuthorizationStatusRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkClientSplashAuthorizationStatus");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling updateNetworkClientSplashAuthorizationStatus");
      }
      // verify the required parameter 'updateNetworkClientSplashAuthorizationStatusRequest' is set
      if (updateNetworkClientSplashAuthorizationStatusRequest === undefined || updateNetworkClientSplashAuthorizationStatusRequest === null) {
        throw new Error("Missing the required parameter 'updateNetworkClientSplashAuthorizationStatusRequest' when calling updateNetworkClientSplashAuthorizationStatus");
      }

      let pathParams = {
        'networkId': networkId,
        'clientId': clientId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/clients/{clientId}/splashAuthorizationStatus', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkFirmwareUpgrades operation.
     * @callback module:api/NetworksApi~updateNetworkFirmwareUpgradesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkFirmwareUpgrades200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update firmware upgrade information for a network
     * Update firmware upgrade information for a network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkFirmwareUpgradesRequest} [updateNetworkFirmwareUpgradesRequest] 
     * @param {module:api/NetworksApi~updateNetworkFirmwareUpgradesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkFirmwareUpgrades200Response}
     */
    updateNetworkFirmwareUpgrades(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkFirmwareUpgradesRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkFirmwareUpgrades");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkFirmwareUpgrades200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/firmwareUpgrades', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkFirmwareUpgradesStagedEvents operation.
     * @callback module:api/NetworksApi~updateNetworkFirmwareUpgradesStagedEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkFirmwareUpgradesStagedEvents200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the Staged Upgrade Event for a network
     * Update the Staged Upgrade Event for a network
     * @param {String} networkId 
     * @param {module:model/UpdateNetworkFirmwareUpgradesStagedEventsRequest} updateNetworkFirmwareUpgradesStagedEventsRequest 
     * @param {module:api/NetworksApi~updateNetworkFirmwareUpgradesStagedEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkFirmwareUpgradesStagedEvents200Response}
     */
    updateNetworkFirmwareUpgradesStagedEvents(networkId, updateNetworkFirmwareUpgradesStagedEventsRequest, callback) {
      let postBody = updateNetworkFirmwareUpgradesStagedEventsRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkFirmwareUpgradesStagedEvents");
      }
      // verify the required parameter 'updateNetworkFirmwareUpgradesStagedEventsRequest' is set
      if (updateNetworkFirmwareUpgradesStagedEventsRequest === undefined || updateNetworkFirmwareUpgradesStagedEventsRequest === null) {
        throw new Error("Missing the required parameter 'updateNetworkFirmwareUpgradesStagedEventsRequest' when calling updateNetworkFirmwareUpgradesStagedEvents");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkFirmwareUpgradesStagedEvents200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/firmwareUpgrades/staged/events', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkFirmwareUpgradesStagedGroup operation.
     * @callback module:api/NetworksApi~updateNetworkFirmwareUpgradesStagedGroupCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Staged Upgrade Group for a network
     * Update a Staged Upgrade Group for a network
     * @param {String} networkId 
     * @param {String} groupId 
     * @param {module:model/CreateNetworkFirmwareUpgradesStagedGroupRequest} createNetworkFirmwareUpgradesStagedGroupRequest 
     * @param {module:api/NetworksApi~updateNetworkFirmwareUpgradesStagedGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkFirmwareUpgradesStagedGroup(networkId, groupId, createNetworkFirmwareUpgradesStagedGroupRequest, callback) {
      let postBody = createNetworkFirmwareUpgradesStagedGroupRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkFirmwareUpgradesStagedGroup");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling updateNetworkFirmwareUpgradesStagedGroup");
      }
      // verify the required parameter 'createNetworkFirmwareUpgradesStagedGroupRequest' is set
      if (createNetworkFirmwareUpgradesStagedGroupRequest === undefined || createNetworkFirmwareUpgradesStagedGroupRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkFirmwareUpgradesStagedGroupRequest' when calling updateNetworkFirmwareUpgradesStagedGroup");
      }

      let pathParams = {
        'networkId': networkId,
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/firmwareUpgrades/staged/groups/{groupId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkFirmwareUpgradesStagedStages operation.
     * @callback module:api/NetworksApi~updateNetworkFirmwareUpgradesStagedStagesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkFirmwareUpgradesStagedStages200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assign Staged Upgrade Group order in the sequence.
     * Assign Staged Upgrade Group order in the sequence.
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkFirmwareUpgradesStagedStagesRequest} [updateNetworkFirmwareUpgradesStagedStagesRequest] 
     * @param {module:api/NetworksApi~updateNetworkFirmwareUpgradesStagedStagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkFirmwareUpgradesStagedStages200ResponseInner>}
     */
    updateNetworkFirmwareUpgradesStagedStages(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkFirmwareUpgradesStagedStagesRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkFirmwareUpgradesStagedStages");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [GetNetworkFirmwareUpgradesStagedStages200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/firmwareUpgrades/staged/stages', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkFloorPlan operation.
     * @callback module:api/NetworksApi~updateNetworkFloorPlanCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a floor plan's geolocation and other meta data
     * Update a floor plan's geolocation and other meta data
     * @param {String} networkId 
     * @param {String} floorPlanId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkFloorPlanRequest} [updateNetworkFloorPlanRequest] 
     * @param {module:api/NetworksApi~updateNetworkFloorPlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkFloorPlan(networkId, floorPlanId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkFloorPlanRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkFloorPlan");
      }
      // verify the required parameter 'floorPlanId' is set
      if (floorPlanId === undefined || floorPlanId === null) {
        throw new Error("Missing the required parameter 'floorPlanId' when calling updateNetworkFloorPlan");
      }

      let pathParams = {
        'networkId': networkId,
        'floorPlanId': floorPlanId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/floorPlans/{floorPlanId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkGroupPolicy operation.
     * @callback module:api/NetworksApi~updateNetworkGroupPolicyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a group policy
     * Update a group policy
     * @param {String} networkId 
     * @param {String} groupPolicyId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkGroupPolicyRequest} [updateNetworkGroupPolicyRequest] 
     * @param {module:api/NetworksApi~updateNetworkGroupPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkGroupPolicy(networkId, groupPolicyId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkGroupPolicyRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkGroupPolicy");
      }
      // verify the required parameter 'groupPolicyId' is set
      if (groupPolicyId === undefined || groupPolicyId === null) {
        throw new Error("Missing the required parameter 'groupPolicyId' when calling updateNetworkGroupPolicy");
      }

      let pathParams = {
        'networkId': networkId,
        'groupPolicyId': groupPolicyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/groupPolicies/{groupPolicyId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkMerakiAuthUser operation.
     * @callback module:api/NetworksApi~updateNetworkMerakiAuthUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkMerakiAuthUsers200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a user configured with Meraki Authentication (currently, 802.1X RADIUS, splash guest, and client VPN users can be updated)
     * Update a user configured with Meraki Authentication (currently, 802.1X RADIUS, splash guest, and client VPN users can be updated)
     * @param {String} networkId 
     * @param {String} merakiAuthUserId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkMerakiAuthUserRequest} [updateNetworkMerakiAuthUserRequest] 
     * @param {module:api/NetworksApi~updateNetworkMerakiAuthUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkMerakiAuthUsers200ResponseInner}
     */
    updateNetworkMerakiAuthUser(networkId, merakiAuthUserId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkMerakiAuthUserRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkMerakiAuthUser");
      }
      // verify the required parameter 'merakiAuthUserId' is set
      if (merakiAuthUserId === undefined || merakiAuthUserId === null) {
        throw new Error("Missing the required parameter 'merakiAuthUserId' when calling updateNetworkMerakiAuthUser");
      }

      let pathParams = {
        'networkId': networkId,
        'merakiAuthUserId': merakiAuthUserId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkMerakiAuthUsers200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/merakiAuthUsers/{merakiAuthUserId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkMqttBroker operation.
     * @callback module:api/NetworksApi~updateNetworkMqttBrokerCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an MQTT broker
     * Update an MQTT broker
     * @param {String} networkId 
     * @param {String} mqttBrokerId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkMqttBrokerRequest} [updateNetworkMqttBrokerRequest] 
     * @param {module:api/NetworksApi~updateNetworkMqttBrokerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkMqttBroker(networkId, mqttBrokerId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkMqttBrokerRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkMqttBroker");
      }
      // verify the required parameter 'mqttBrokerId' is set
      if (mqttBrokerId === undefined || mqttBrokerId === null) {
        throw new Error("Missing the required parameter 'mqttBrokerId' when calling updateNetworkMqttBroker");
      }

      let pathParams = {
        'networkId': networkId,
        'mqttBrokerId': mqttBrokerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/mqttBrokers/{mqttBrokerId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkNetflow operation.
     * @callback module:api/NetworksApi~updateNetworkNetflowCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the NetFlow traffic reporting settings for a network
     * Update the NetFlow traffic reporting settings for a network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkNetflowRequest} [updateNetworkNetflowRequest] 
     * @param {module:api/NetworksApi~updateNetworkNetflowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkNetflow(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkNetflowRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkNetflow");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/netflow', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSettings operation.
     * @callback module:api/NetworksApi~updateNetworkSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkSettings200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the settings for a network
     * Update the settings for a network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkSettingsRequest} [updateNetworkSettingsRequest] 
     * @param {module:api/NetworksApi~updateNetworkSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkSettings200Response}
     */
    updateNetworkSettings(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkSettingsRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSettings");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkSettings200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSnmp operation.
     * @callback module:api/NetworksApi~updateNetworkSnmpCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the SNMP settings for a network
     * Update the SNMP settings for a network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkSnmpRequest} [updateNetworkSnmpRequest] 
     * @param {module:api/NetworksApi~updateNetworkSnmpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkSnmp(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkSnmpRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSnmp");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/snmp', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSyslogServers operation.
     * @callback module:api/NetworksApi~updateNetworkSyslogServersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkSyslogServers200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the syslog servers for a network
     * Update the syslog servers for a network
     * @param {String} networkId 
     * @param {module:model/UpdateNetworkSyslogServersRequest} updateNetworkSyslogServersRequest 
     * @param {module:api/NetworksApi~updateNetworkSyslogServersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkSyslogServers200Response}
     */
    updateNetworkSyslogServers(networkId, updateNetworkSyslogServersRequest, callback) {
      let postBody = updateNetworkSyslogServersRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSyslogServers");
      }
      // verify the required parameter 'updateNetworkSyslogServersRequest' is set
      if (updateNetworkSyslogServersRequest === undefined || updateNetworkSyslogServersRequest === null) {
        throw new Error("Missing the required parameter 'updateNetworkSyslogServersRequest' when calling updateNetworkSyslogServers");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkSyslogServers200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/syslogServers', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkTrafficAnalysis operation.
     * @callback module:api/NetworksApi~updateNetworkTrafficAnalysisCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the traffic analysis settings for a network
     * Update the traffic analysis settings for a network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkTrafficAnalysisRequest} [updateNetworkTrafficAnalysisRequest] 
     * @param {module:api/NetworksApi~updateNetworkTrafficAnalysisCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkTrafficAnalysis(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkTrafficAnalysisRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkTrafficAnalysis");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/trafficAnalysis', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkWebhooksHttpServer operation.
     * @callback module:api/NetworksApi~updateNetworkWebhooksHttpServerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkWebhooksHttpServers200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an HTTP server
     * Update an HTTP server. To change a URL, create a new HTTP server.
     * @param {String} networkId 
     * @param {String} httpServerId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkWebhooksHttpServerRequest} [updateNetworkWebhooksHttpServerRequest] 
     * @param {module:api/NetworksApi~updateNetworkWebhooksHttpServerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkWebhooksHttpServers200ResponseInner}
     */
    updateNetworkWebhooksHttpServer(networkId, httpServerId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkWebhooksHttpServerRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkWebhooksHttpServer");
      }
      // verify the required parameter 'httpServerId' is set
      if (httpServerId === undefined || httpServerId === null) {
        throw new Error("Missing the required parameter 'httpServerId' when calling updateNetworkWebhooksHttpServer");
      }

      let pathParams = {
        'networkId': networkId,
        'httpServerId': httpServerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkWebhooksHttpServers200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/webhooks/httpServers/{httpServerId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkWebhooksPayloadTemplate operation.
     * @callback module:api/NetworksApi~updateNetworkWebhooksPayloadTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkWebhooksPayloadTemplates200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a webhook payload template for a network
     * Update a webhook payload template for a network
     * @param {String} networkId 
     * @param {String} payloadTemplateId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkWebhooksPayloadTemplateRequest} [updateNetworkWebhooksPayloadTemplateRequest] 
     * @param {module:api/NetworksApi~updateNetworkWebhooksPayloadTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkWebhooksPayloadTemplates200ResponseInner}
     */
    updateNetworkWebhooksPayloadTemplate(networkId, payloadTemplateId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkWebhooksPayloadTemplateRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkWebhooksPayloadTemplate");
      }
      // verify the required parameter 'payloadTemplateId' is set
      if (payloadTemplateId === undefined || payloadTemplateId === null) {
        throw new Error("Missing the required parameter 'payloadTemplateId' when calling updateNetworkWebhooksPayloadTemplate");
      }

      let pathParams = {
        'networkId': networkId,
        'payloadTemplateId': payloadTemplateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkWebhooksPayloadTemplates200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/webhooks/payloadTemplates/{payloadTemplateId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vmxNetworkDevicesClaim operation.
     * @callback module:api/NetworksApi~vmxNetworkDevicesClaimCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Claim a vMX into a network
     * Claim a vMX into a network
     * @param {String} networkId 
     * @param {module:model/VmxNetworkDevicesClaimRequest} vmxNetworkDevicesClaimRequest 
     * @param {module:api/NetworksApi~vmxNetworkDevicesClaimCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    vmxNetworkDevicesClaim(networkId, vmxNetworkDevicesClaimRequest, callback) {
      let postBody = vmxNetworkDevicesClaimRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling vmxNetworkDevicesClaim");
      }
      // verify the required parameter 'vmxNetworkDevicesClaimRequest' is set
      if (vmxNetworkDevicesClaimRequest === undefined || vmxNetworkDevicesClaimRequest === null) {
        throw new Error("Missing the required parameter 'vmxNetworkDevicesClaimRequest' when calling vmxNetworkDevicesClaim");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/devices/claim/vmx', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
