/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetNetworkSmDeviceDeviceProfiles200ResponseInner from '../model/GetNetworkSmDeviceDeviceProfiles200ResponseInner';
import GetNetworkSmDeviceSoftwares200ResponseInner from '../model/GetNetworkSmDeviceSoftwares200ResponseInner';
import GetNetworkSmUsers200ResponseInner from '../model/GetNetworkSmUsers200ResponseInner';

/**
* Users service.
* @module api/UsersApi
* @version 1.32.0
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteOrganizationUser_1 operation.
     * @callback module:api/UsersApi~deleteOrganizationUser_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a user and all of its authentication methods.
     * Delete a user and all of its authentication methods.
     * @param {String} organizationId 
     * @param {String} userId 
     * @param {module:api/UsersApi~deleteOrganizationUser_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganizationUser_1(organizationId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteOrganizationUser_1");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteOrganizationUser_1");
      }

      let pathParams = {
        'organizationId': organizationId,
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/users/{userId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSmUserDeviceProfiles_1 operation.
     * @callback module:api/UsersApi~getNetworkSmUserDeviceProfiles_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSmDeviceDeviceProfiles200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the profiles associated with a user
     * Get the profiles associated with a user
     * @param {String} networkId 
     * @param {String} userId 
     * @param {module:api/UsersApi~getNetworkSmUserDeviceProfiles_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSmDeviceDeviceProfiles200ResponseInner>}
     */
    getNetworkSmUserDeviceProfiles_1(networkId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSmUserDeviceProfiles_1");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getNetworkSmUserDeviceProfiles_1");
      }

      let pathParams = {
        'networkId': networkId,
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSmDeviceDeviceProfiles200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/users/{userId}/deviceProfiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSmUserSoftwares_1 operation.
     * @callback module:api/UsersApi~getNetworkSmUserSoftwares_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSmDeviceSoftwares200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of softwares associated with a user
     * Get a list of softwares associated with a user
     * @param {String} networkId 
     * @param {String} userId 
     * @param {module:api/UsersApi~getNetworkSmUserSoftwares_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSmDeviceSoftwares200ResponseInner>}
     */
    getNetworkSmUserSoftwares_1(networkId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSmUserSoftwares_1");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getNetworkSmUserSoftwares_1");
      }

      let pathParams = {
        'networkId': networkId,
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSmDeviceSoftwares200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/users/{userId}/softwares', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSmUsers_1 operation.
     * @callback module:api/UsersApi~getNetworkSmUsers_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSmUsers200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the owners in an SM network with various specified fields and filters
     * List the owners in an SM network with various specified fields and filters
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [ids] Filter users by id(s).
     * @param {Array.<String>} [usernames] Filter users by username(s).
     * @param {Array.<String>} [emails] Filter users by email(s).
     * @param {Array.<String>} [scope] Specifiy a scope (one of all, none, withAny, withAll, withoutAny, withoutAll) and a set of tags.
     * @param {module:api/UsersApi~getNetworkSmUsers_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSmUsers200ResponseInner>}
     */
    getNetworkSmUsers_1(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSmUsers_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(opts['ids'], 'csv'),
        'usernames': this.apiClient.buildCollectionParam(opts['usernames'], 'csv'),
        'emails': this.apiClient.buildCollectionParam(opts['emails'], 'csv'),
        'scope': this.apiClient.buildCollectionParam(opts['scope'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSmUsers200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/sm/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
