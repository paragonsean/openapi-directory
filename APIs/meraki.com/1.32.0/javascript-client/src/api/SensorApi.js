/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateNetworkSensorAlertsProfileRequest from '../model/CreateNetworkSensorAlertsProfileRequest';
import GetDeviceSensorRelationships200ResponseInner from '../model/GetDeviceSensorRelationships200ResponseInner';
import GetNetworkSensorAlertsCurrentOverviewByMetric200Response from '../model/GetNetworkSensorAlertsCurrentOverviewByMetric200Response';
import GetNetworkSensorAlertsOverviewByMetric200ResponseInner from '../model/GetNetworkSensorAlertsOverviewByMetric200ResponseInner';
import GetNetworkSensorAlertsProfiles200ResponseInner from '../model/GetNetworkSensorAlertsProfiles200ResponseInner';
import GetNetworkSensorRelationships200ResponseInner from '../model/GetNetworkSensorRelationships200ResponseInner';
import GetOrganizationSensorReadingsHistory200ResponseInner from '../model/GetOrganizationSensorReadingsHistory200ResponseInner';
import GetOrganizationSensorReadingsLatest200ResponseInner from '../model/GetOrganizationSensorReadingsLatest200ResponseInner';
import UpdateDeviceSensorRelationshipsRequest from '../model/UpdateDeviceSensorRelationshipsRequest';
import UpdateNetworkSensorAlertsProfileRequest from '../model/UpdateNetworkSensorAlertsProfileRequest';

/**
* Sensor service.
* @module api/SensorApi
* @version 1.32.0
*/
export default class SensorApi {

    /**
    * Constructs a new SensorApi. 
    * @alias module:api/SensorApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createNetworkSensorAlertsProfile operation.
     * @callback module:api/SensorApi~createNetworkSensorAlertsProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkSensorAlertsProfiles200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a sensor alert profile for a network.
     * Creates a sensor alert profile for a network.
     * @param {String} networkId 
     * @param {module:model/CreateNetworkSensorAlertsProfileRequest} createNetworkSensorAlertsProfileRequest 
     * @param {module:api/SensorApi~createNetworkSensorAlertsProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkSensorAlertsProfiles200ResponseInner}
     */
    createNetworkSensorAlertsProfile(networkId, createNetworkSensorAlertsProfileRequest, callback) {
      let postBody = createNetworkSensorAlertsProfileRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkSensorAlertsProfile");
      }
      // verify the required parameter 'createNetworkSensorAlertsProfileRequest' is set
      if (createNetworkSensorAlertsProfileRequest === undefined || createNetworkSensorAlertsProfileRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkSensorAlertsProfileRequest' when calling createNetworkSensorAlertsProfile");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkSensorAlertsProfiles200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/sensor/alerts/profiles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkSensorAlertsProfile operation.
     * @callback module:api/SensorApi~deleteNetworkSensorAlertsProfileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a sensor alert profile from a network.
     * Deletes a sensor alert profile from a network.
     * @param {String} networkId 
     * @param {String} id 
     * @param {module:api/SensorApi~deleteNetworkSensorAlertsProfileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkSensorAlertsProfile(networkId, id, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkSensorAlertsProfile");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteNetworkSensorAlertsProfile");
      }

      let pathParams = {
        'networkId': networkId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/sensor/alerts/profiles/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceSensorRelationships operation.
     * @callback module:api/SensorApi~getDeviceSensorRelationshipsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetDeviceSensorRelationships200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the sensor roles for a given sensor or camera device.
     * List the sensor roles for a given sensor or camera device.
     * @param {String} serial 
     * @param {module:api/SensorApi~getDeviceSensorRelationshipsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetDeviceSensorRelationships200ResponseInner>}
     */
    getDeviceSensorRelationships(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceSensorRelationships");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetDeviceSensorRelationships200ResponseInner];
      return this.apiClient.callApi(
        '/devices/{serial}/sensor/relationships', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSensorAlertsCurrentOverviewByMetric operation.
     * @callback module:api/SensorApi~getNetworkSensorAlertsCurrentOverviewByMetricCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkSensorAlertsCurrentOverviewByMetric200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return an overview of currently alerting sensors by metric
     * Return an overview of currently alerting sensors by metric
     * @param {String} networkId 
     * @param {module:api/SensorApi~getNetworkSensorAlertsCurrentOverviewByMetricCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkSensorAlertsCurrentOverviewByMetric200Response}
     */
    getNetworkSensorAlertsCurrentOverviewByMetric(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSensorAlertsCurrentOverviewByMetric");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkSensorAlertsCurrentOverviewByMetric200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/sensor/alerts/current/overview/byMetric', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSensorAlertsOverviewByMetric operation.
     * @callback module:api/SensorApi~getNetworkSensorAlertsOverviewByMetricCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSensorAlertsOverviewByMetric200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return an overview of alert occurrences over a timespan, by metric
     * Return an overview of alert occurrences over a timespan, by metric
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 365 days from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 7 days.
     * @param {Number} [interval] The time interval in seconds for returned data. The valid intervals are: 86400, 604800. The default is 604800.
     * @param {module:api/SensorApi~getNetworkSensorAlertsOverviewByMetricCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSensorAlertsOverviewByMetric200ResponseInner>}
     */
    getNetworkSensorAlertsOverviewByMetric(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSensorAlertsOverviewByMetric");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan'],
        'interval': opts['interval']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSensorAlertsOverviewByMetric200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/sensor/alerts/overview/byMetric', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSensorAlertsProfile operation.
     * @callback module:api/SensorApi~getNetworkSensorAlertsProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkSensorAlertsProfiles200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show details of a sensor alert profile for a network.
     * Show details of a sensor alert profile for a network.
     * @param {String} networkId 
     * @param {String} id 
     * @param {module:api/SensorApi~getNetworkSensorAlertsProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkSensorAlertsProfiles200ResponseInner}
     */
    getNetworkSensorAlertsProfile(networkId, id, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSensorAlertsProfile");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNetworkSensorAlertsProfile");
      }

      let pathParams = {
        'networkId': networkId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkSensorAlertsProfiles200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/sensor/alerts/profiles/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSensorAlertsProfiles operation.
     * @callback module:api/SensorApi~getNetworkSensorAlertsProfilesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSensorAlertsProfiles200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all sensor alert profiles for a network.
     * Lists all sensor alert profiles for a network.
     * @param {String} networkId 
     * @param {module:api/SensorApi~getNetworkSensorAlertsProfilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSensorAlertsProfiles200ResponseInner>}
     */
    getNetworkSensorAlertsProfiles(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSensorAlertsProfiles");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSensorAlertsProfiles200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/sensor/alerts/profiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSensorRelationships operation.
     * @callback module:api/SensorApi~getNetworkSensorRelationshipsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkSensorRelationships200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the sensor roles for devices in a given network
     * List the sensor roles for devices in a given network
     * @param {String} networkId 
     * @param {module:api/SensorApi~getNetworkSensorRelationshipsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkSensorRelationships200ResponseInner>}
     */
    getNetworkSensorRelationships(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSensorRelationships");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkSensorRelationships200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/sensor/relationships', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationSensorReadingsHistory operation.
     * @callback module:api/SensorApi~getOrganizationSensorReadingsHistoryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationSensorReadingsHistory200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return all reported readings from sensors in a given timespan, sorted by timestamp
     * Return all reported readings from sensors in a given timespan, sorted by timestamp
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 365 days and 6 hours from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 7 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. The default is 2 hours.
     * @param {Array.<String>} [networkIds] Optional parameter to filter readings by network.
     * @param {Array.<String>} [serials] Optional parameter to filter readings by sensor.
     * @param {Array.<String>} [metrics] Types of sensor readings to retrieve. If no metrics are supplied, all available types of readings will be retrieved. Allowed values are battery, button, door, humidity, indoorAirQuality, noise, pm25, temperature, tvoc, and water.
     * @param {module:api/SensorApi~getOrganizationSensorReadingsHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationSensorReadingsHistory200ResponseInner>}
     */
    getOrganizationSensorReadingsHistory(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationSensorReadingsHistory");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan'],
        'networkIds': this.apiClient.buildCollectionParam(opts['networkIds'], 'csv'),
        'serials': this.apiClient.buildCollectionParam(opts['serials'], 'csv'),
        'metrics': this.apiClient.buildCollectionParam(opts['metrics'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationSensorReadingsHistory200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/sensor/readings/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationSensorReadingsLatest operation.
     * @callback module:api/SensorApi~getOrganizationSensorReadingsLatestCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationSensorReadingsLatest200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the latest available reading for each metric from each sensor, sorted by sensor serial
     * Return the latest available reading for each metric from each sensor, sorted by sensor serial
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 100. Default is 100.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {Array.<String>} [networkIds] Optional parameter to filter readings by network.
     * @param {Array.<String>} [serials] Optional parameter to filter readings by sensor.
     * @param {Array.<String>} [metrics] Types of sensor readings to retrieve. If no metrics are supplied, all available types of readings will be retrieved. Allowed values are battery, button, door, humidity, indoorAirQuality, noise, pm25, temperature, tvoc, and water.
     * @param {module:api/SensorApi~getOrganizationSensorReadingsLatestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationSensorReadingsLatest200ResponseInner>}
     */
    getOrganizationSensorReadingsLatest(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationSensorReadingsLatest");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        'networkIds': this.apiClient.buildCollectionParam(opts['networkIds'], 'csv'),
        'serials': this.apiClient.buildCollectionParam(opts['serials'], 'csv'),
        'metrics': this.apiClient.buildCollectionParam(opts['metrics'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationSensorReadingsLatest200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/sensor/readings/latest', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeviceSensorRelationships operation.
     * @callback module:api/SensorApi~updateDeviceSensorRelationshipsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDeviceSensorRelationships200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assign one or more sensor roles to a given sensor or camera device.
     * Assign one or more sensor roles to a given sensor or camera device.
     * @param {String} serial 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateDeviceSensorRelationshipsRequest} [updateDeviceSensorRelationshipsRequest] 
     * @param {module:api/SensorApi~updateDeviceSensorRelationshipsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDeviceSensorRelationships200ResponseInner}
     */
    updateDeviceSensorRelationships(serial, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateDeviceSensorRelationshipsRequest'];
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling updateDeviceSensorRelationships");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetDeviceSensorRelationships200ResponseInner;
      return this.apiClient.callApi(
        '/devices/{serial}/sensor/relationships', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSensorAlertsProfile operation.
     * @callback module:api/SensorApi~updateNetworkSensorAlertsProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkSensorAlertsProfiles200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a sensor alert profile for a network.
     * Updates a sensor alert profile for a network.
     * @param {String} networkId 
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkSensorAlertsProfileRequest} [updateNetworkSensorAlertsProfileRequest] 
     * @param {module:api/SensorApi~updateNetworkSensorAlertsProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkSensorAlertsProfiles200ResponseInner}
     */
    updateNetworkSensorAlertsProfile(networkId, id, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkSensorAlertsProfileRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSensorAlertsProfile");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateNetworkSensorAlertsProfile");
      }

      let pathParams = {
        'networkId': networkId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkSensorAlertsProfiles200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/sensor/alerts/profiles/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
