/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetOrganizationSensorReadingsHistory200ResponseInner from '../model/GetOrganizationSensorReadingsHistory200ResponseInner';
import GetOrganizationSensorReadingsLatest200ResponseInner from '../model/GetOrganizationSensorReadingsLatest200ResponseInner';

/**
* Readings service.
* @module api/ReadingsApi
* @version 1.32.0
*/
export default class ReadingsApi {

    /**
    * Constructs a new ReadingsApi. 
    * @alias module:api/ReadingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getOrganizationSensorReadingsHistory_1 operation.
     * @callback module:api/ReadingsApi~getOrganizationSensorReadingsHistory_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationSensorReadingsHistory200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return all reported readings from sensors in a given timespan, sorted by timestamp
     * Return all reported readings from sensors in a given timespan, sorted by timestamp
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 365 days and 6 hours from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 7 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. The default is 2 hours.
     * @param {Array.<String>} [networkIds] Optional parameter to filter readings by network.
     * @param {Array.<String>} [serials] Optional parameter to filter readings by sensor.
     * @param {Array.<String>} [metrics] Types of sensor readings to retrieve. If no metrics are supplied, all available types of readings will be retrieved. Allowed values are battery, button, door, humidity, indoorAirQuality, noise, pm25, temperature, tvoc, and water.
     * @param {module:api/ReadingsApi~getOrganizationSensorReadingsHistory_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationSensorReadingsHistory200ResponseInner>}
     */
    getOrganizationSensorReadingsHistory_1(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationSensorReadingsHistory_1");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan'],
        'networkIds': this.apiClient.buildCollectionParam(opts['networkIds'], 'csv'),
        'serials': this.apiClient.buildCollectionParam(opts['serials'], 'csv'),
        'metrics': this.apiClient.buildCollectionParam(opts['metrics'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationSensorReadingsHistory200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/sensor/readings/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationSensorReadingsLatest_1 operation.
     * @callback module:api/ReadingsApi~getOrganizationSensorReadingsLatest_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationSensorReadingsLatest200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the latest available reading for each metric from each sensor, sorted by sensor serial
     * Return the latest available reading for each metric from each sensor, sorted by sensor serial
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 100. Default is 100.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {Array.<String>} [networkIds] Optional parameter to filter readings by network.
     * @param {Array.<String>} [serials] Optional parameter to filter readings by sensor.
     * @param {Array.<String>} [metrics] Types of sensor readings to retrieve. If no metrics are supplied, all available types of readings will be retrieved. Allowed values are battery, button, door, humidity, indoorAirQuality, noise, pm25, temperature, tvoc, and water.
     * @param {module:api/ReadingsApi~getOrganizationSensorReadingsLatest_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationSensorReadingsLatest200ResponseInner>}
     */
    getOrganizationSensorReadingsLatest_1(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationSensorReadingsLatest_1");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        'networkIds': this.apiClient.buildCollectionParam(opts['networkIds'], 'csv'),
        'serials': this.apiClient.buildCollectionParam(opts['serials'], 'csv'),
        'metrics': this.apiClient.buildCollectionParam(opts['metrics'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationSensorReadingsLatest200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/sensor/readings/latest', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
