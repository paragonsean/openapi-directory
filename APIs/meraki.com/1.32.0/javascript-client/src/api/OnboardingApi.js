/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest from '../model/CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest';
import CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner from '../model/CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner';
import CreateOrganizationInventoryOnboardingCloudMonitoringImportRequest from '../model/CreateOrganizationInventoryOnboardingCloudMonitoringImportRequest';
import CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner from '../model/CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner';
import CreateOrganizationInventoryOnboardingCloudMonitoringPrepareRequest from '../model/CreateOrganizationInventoryOnboardingCloudMonitoringPrepareRequest';
import GetNetwork200Response from '../model/GetNetwork200Response';
import GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner from '../model/GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner';
import UpdateOrganizationCameraOnboardingStatusesRequest from '../model/UpdateOrganizationCameraOnboardingStatusesRequest';

/**
* Onboarding service.
* @module api/OnboardingApi
* @version 1.32.0
*/
export default class OnboardingApi {

    /**
    * Constructs a new OnboardingApi. 
    * @alias module:api/OnboardingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createOrganizationInventoryOnboardingCloudMonitoringExportEvent_2 operation.
     * @callback module:api/OnboardingApi~createOrganizationInventoryOnboardingCloudMonitoringExportEvent_2Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Imports event logs related to the onboarding app into elastisearch
     * Imports event logs related to the onboarding app into elastisearch
     * @param {String} organizationId 
     * @param {module:model/CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest} createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest 
     * @param {module:api/OnboardingApi~createOrganizationInventoryOnboardingCloudMonitoringExportEvent_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createOrganizationInventoryOnboardingCloudMonitoringExportEvent_2(organizationId, createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest, callback) {
      let postBody = createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createOrganizationInventoryOnboardingCloudMonitoringExportEvent_2");
      }
      // verify the required parameter 'createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest' is set
      if (createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest === undefined || createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest === null) {
        throw new Error("Missing the required parameter 'createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest' when calling createOrganizationInventoryOnboardingCloudMonitoringExportEvent_2");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/exportEvents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrganizationInventoryOnboardingCloudMonitoringImport_2 operation.
     * @callback module:api/OnboardingApi~createOrganizationInventoryOnboardingCloudMonitoringImport_2Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Commits the import operation to complete the onboarding of a device into Dashboard for monitoring.
     * Commits the import operation to complete the onboarding of a device into Dashboard for monitoring.
     * @param {String} organizationId 
     * @param {module:model/CreateOrganizationInventoryOnboardingCloudMonitoringImportRequest} createOrganizationInventoryOnboardingCloudMonitoringImportRequest 
     * @param {module:api/OnboardingApi~createOrganizationInventoryOnboardingCloudMonitoringImport_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner>}
     */
    createOrganizationInventoryOnboardingCloudMonitoringImport_2(organizationId, createOrganizationInventoryOnboardingCloudMonitoringImportRequest, callback) {
      let postBody = createOrganizationInventoryOnboardingCloudMonitoringImportRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createOrganizationInventoryOnboardingCloudMonitoringImport_2");
      }
      // verify the required parameter 'createOrganizationInventoryOnboardingCloudMonitoringImportRequest' is set
      if (createOrganizationInventoryOnboardingCloudMonitoringImportRequest === undefined || createOrganizationInventoryOnboardingCloudMonitoringImportRequest === null) {
        throw new Error("Missing the required parameter 'createOrganizationInventoryOnboardingCloudMonitoringImportRequest' when calling createOrganizationInventoryOnboardingCloudMonitoringImport_2");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/imports', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrganizationInventoryOnboardingCloudMonitoringPrepare_2 operation.
     * @callback module:api/OnboardingApi~createOrganizationInventoryOnboardingCloudMonitoringPrepare_2Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiates or updates an import session
     * Initiates or updates an import session. An import ID will be generated and used when you are ready to commit the import.
     * @param {String} organizationId 
     * @param {module:model/CreateOrganizationInventoryOnboardingCloudMonitoringPrepareRequest} createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest 
     * @param {module:api/OnboardingApi~createOrganizationInventoryOnboardingCloudMonitoringPrepare_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner>}
     */
    createOrganizationInventoryOnboardingCloudMonitoringPrepare_2(organizationId, createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest, callback) {
      let postBody = createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createOrganizationInventoryOnboardingCloudMonitoringPrepare_2");
      }
      // verify the required parameter 'createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest' is set
      if (createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest === undefined || createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest === null) {
        throw new Error("Missing the required parameter 'createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest' when calling createOrganizationInventoryOnboardingCloudMonitoringPrepare_2");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/prepare', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationCameraOnboardingStatuses_1 operation.
     * @callback module:api/OnboardingApi~getOrganizationCameraOnboardingStatuses_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch onboarding status of cameras
     * Fetch onboarding status of cameras
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [serials] A list of serial numbers. The returned cameras will be filtered to only include these serials.
     * @param {Array.<String>} [networkIds] A list of network IDs. The returned cameras will be filtered to only include these networks.
     * @param {module:api/OnboardingApi~getOrganizationCameraOnboardingStatuses_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getOrganizationCameraOnboardingStatuses_1(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationCameraOnboardingStatuses_1");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'serials': this.apiClient.buildCollectionParam(opts['serials'], 'csv'),
        'networkIds': this.apiClient.buildCollectionParam(opts['networkIds'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/camera/onboarding/statuses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationInventoryOnboardingCloudMonitoringImports_2 operation.
     * @callback module:api/OnboardingApi~getOrganizationInventoryOnboardingCloudMonitoringImports_2Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check the status of a committed Import operation
     * Check the status of a committed Import operation
     * @param {String} organizationId 
     * @param {Array.<String>} importIds import ids from an imports
     * @param {module:api/OnboardingApi~getOrganizationInventoryOnboardingCloudMonitoringImports_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner>}
     */
    getOrganizationInventoryOnboardingCloudMonitoringImports_2(organizationId, importIds, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationInventoryOnboardingCloudMonitoringImports_2");
      }
      // verify the required parameter 'importIds' is set
      if (importIds === undefined || importIds === null) {
        throw new Error("Missing the required parameter 'importIds' when calling getOrganizationInventoryOnboardingCloudMonitoringImports_2");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'importIds': this.apiClient.buildCollectionParam(importIds, 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/imports', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationInventoryOnboardingCloudMonitoringNetworks_2 operation.
     * @callback module:api/OnboardingApi~getOrganizationInventoryOnboardingCloudMonitoringNetworks_2Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetwork200Response>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list of networks eligible for adding cloud monitored device
     * Returns list of networks eligible for adding cloud monitored device
     * @param {String} organizationId 
     * @param {module:model/String} deviceType Device Type switch or wireless controller
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 100000. Default is 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:api/OnboardingApi~getOrganizationInventoryOnboardingCloudMonitoringNetworks_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetwork200Response>}
     */
    getOrganizationInventoryOnboardingCloudMonitoringNetworks_2(organizationId, deviceType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationInventoryOnboardingCloudMonitoringNetworks_2");
      }
      // verify the required parameter 'deviceType' is set
      if (deviceType === undefined || deviceType === null) {
        throw new Error("Missing the required parameter 'deviceType' when calling getOrganizationInventoryOnboardingCloudMonitoringNetworks_2");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'deviceType': deviceType,
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetwork200Response];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/networks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationCameraOnboardingStatuses_1 operation.
     * @callback module:api/OnboardingApi~updateOrganizationCameraOnboardingStatuses_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Notify that credential handoff to camera has completed
     * Notify that credential handoff to camera has completed
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationCameraOnboardingStatusesRequest} [updateOrganizationCameraOnboardingStatusesRequest] 
     * @param {module:api/OnboardingApi~updateOrganizationCameraOnboardingStatuses_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateOrganizationCameraOnboardingStatuses_1(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateOrganizationCameraOnboardingStatusesRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationCameraOnboardingStatuses_1");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/camera/onboarding/statuses', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
