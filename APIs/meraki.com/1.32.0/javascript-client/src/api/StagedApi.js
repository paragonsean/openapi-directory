/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateNetworkFirmwareUpgradesStagedEventRequest from '../model/CreateNetworkFirmwareUpgradesStagedEventRequest';
import CreateNetworkFirmwareUpgradesStagedGroupRequest from '../model/CreateNetworkFirmwareUpgradesStagedGroupRequest';
import GetNetworkFirmwareUpgradesStagedEvents200Response from '../model/GetNetworkFirmwareUpgradesStagedEvents200Response';
import GetNetworkFirmwareUpgradesStagedGroups200ResponseInner from '../model/GetNetworkFirmwareUpgradesStagedGroups200ResponseInner';
import GetNetworkFirmwareUpgradesStagedStages200ResponseInner from '../model/GetNetworkFirmwareUpgradesStagedStages200ResponseInner';
import RollbacksNetworkFirmwareUpgradesStagedEventsRequest from '../model/RollbacksNetworkFirmwareUpgradesStagedEventsRequest';
import UpdateNetworkFirmwareUpgradesStagedEventsRequest from '../model/UpdateNetworkFirmwareUpgradesStagedEventsRequest';
import UpdateNetworkFirmwareUpgradesStagedStagesRequest from '../model/UpdateNetworkFirmwareUpgradesStagedStagesRequest';

/**
* Staged service.
* @module api/StagedApi
* @version 1.32.0
*/
export default class StagedApi {

    /**
    * Constructs a new StagedApi. 
    * @alias module:api/StagedApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createNetworkFirmwareUpgradesStagedEvent_2 operation.
     * @callback module:api/StagedApi~createNetworkFirmwareUpgradesStagedEvent_2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkFirmwareUpgradesStagedEvents200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Staged Upgrade Event for a network
     * Create a Staged Upgrade Event for a network
     * @param {String} networkId 
     * @param {module:model/CreateNetworkFirmwareUpgradesStagedEventRequest} createNetworkFirmwareUpgradesStagedEventRequest 
     * @param {module:api/StagedApi~createNetworkFirmwareUpgradesStagedEvent_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkFirmwareUpgradesStagedEvents200Response}
     */
    createNetworkFirmwareUpgradesStagedEvent_2(networkId, createNetworkFirmwareUpgradesStagedEventRequest, callback) {
      let postBody = createNetworkFirmwareUpgradesStagedEventRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkFirmwareUpgradesStagedEvent_2");
      }
      // verify the required parameter 'createNetworkFirmwareUpgradesStagedEventRequest' is set
      if (createNetworkFirmwareUpgradesStagedEventRequest === undefined || createNetworkFirmwareUpgradesStagedEventRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkFirmwareUpgradesStagedEventRequest' when calling createNetworkFirmwareUpgradesStagedEvent_2");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkFirmwareUpgradesStagedEvents200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/firmwareUpgrades/staged/events', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkFirmwareUpgradesStagedGroup_2 operation.
     * @callback module:api/StagedApi~createNetworkFirmwareUpgradesStagedGroup_2Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Staged Upgrade Group for a network
     * Create a Staged Upgrade Group for a network
     * @param {String} networkId 
     * @param {module:model/CreateNetworkFirmwareUpgradesStagedGroupRequest} createNetworkFirmwareUpgradesStagedGroupRequest 
     * @param {module:api/StagedApi~createNetworkFirmwareUpgradesStagedGroup_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNetworkFirmwareUpgradesStagedGroup_2(networkId, createNetworkFirmwareUpgradesStagedGroupRequest, callback) {
      let postBody = createNetworkFirmwareUpgradesStagedGroupRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkFirmwareUpgradesStagedGroup_2");
      }
      // verify the required parameter 'createNetworkFirmwareUpgradesStagedGroupRequest' is set
      if (createNetworkFirmwareUpgradesStagedGroupRequest === undefined || createNetworkFirmwareUpgradesStagedGroupRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkFirmwareUpgradesStagedGroupRequest' when calling createNetworkFirmwareUpgradesStagedGroup_2");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/firmwareUpgrades/staged/groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deferNetworkFirmwareUpgradesStagedEvents_2 operation.
     * @callback module:api/StagedApi~deferNetworkFirmwareUpgradesStagedEvents_2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkFirmwareUpgradesStagedEvents200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Postpone by 1 week all pending staged upgrade stages for a network
     * Postpone by 1 week all pending staged upgrade stages for a network
     * @param {String} networkId 
     * @param {module:api/StagedApi~deferNetworkFirmwareUpgradesStagedEvents_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkFirmwareUpgradesStagedEvents200Response}
     */
    deferNetworkFirmwareUpgradesStagedEvents_2(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deferNetworkFirmwareUpgradesStagedEvents_2");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkFirmwareUpgradesStagedEvents200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/firmwareUpgrades/staged/events/defer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkFirmwareUpgradesStagedGroup_2 operation.
     * @callback module:api/StagedApi~deleteNetworkFirmwareUpgradesStagedGroup_2Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Staged Upgrade Group
     * Delete a Staged Upgrade Group
     * @param {String} networkId 
     * @param {String} groupId 
     * @param {module:api/StagedApi~deleteNetworkFirmwareUpgradesStagedGroup_2Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkFirmwareUpgradesStagedGroup_2(networkId, groupId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkFirmwareUpgradesStagedGroup_2");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling deleteNetworkFirmwareUpgradesStagedGroup_2");
      }

      let pathParams = {
        'networkId': networkId,
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/firmwareUpgrades/staged/groups/{groupId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkFirmwareUpgradesStagedEvents_2 operation.
     * @callback module:api/StagedApi~getNetworkFirmwareUpgradesStagedEvents_2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkFirmwareUpgradesStagedEvents200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the Staged Upgrade Event from a network
     * Get the Staged Upgrade Event from a network
     * @param {String} networkId 
     * @param {module:api/StagedApi~getNetworkFirmwareUpgradesStagedEvents_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkFirmwareUpgradesStagedEvents200Response}
     */
    getNetworkFirmwareUpgradesStagedEvents_2(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkFirmwareUpgradesStagedEvents_2");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkFirmwareUpgradesStagedEvents200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/firmwareUpgrades/staged/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkFirmwareUpgradesStagedGroup_2 operation.
     * @callback module:api/StagedApi~getNetworkFirmwareUpgradesStagedGroup_2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkFirmwareUpgradesStagedGroups200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Staged Upgrade Group from a network
     * Get a Staged Upgrade Group from a network
     * @param {String} networkId 
     * @param {String} groupId 
     * @param {module:api/StagedApi~getNetworkFirmwareUpgradesStagedGroup_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkFirmwareUpgradesStagedGroups200ResponseInner}
     */
    getNetworkFirmwareUpgradesStagedGroup_2(networkId, groupId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkFirmwareUpgradesStagedGroup_2");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling getNetworkFirmwareUpgradesStagedGroup_2");
      }

      let pathParams = {
        'networkId': networkId,
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkFirmwareUpgradesStagedGroups200ResponseInner;
      return this.apiClient.callApi(
        '/networks/{networkId}/firmwareUpgrades/staged/groups/{groupId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkFirmwareUpgradesStagedGroups_2 operation.
     * @callback module:api/StagedApi~getNetworkFirmwareUpgradesStagedGroups_2Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkFirmwareUpgradesStagedGroups200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of Staged Upgrade Groups in a network
     * List of Staged Upgrade Groups in a network
     * @param {String} networkId 
     * @param {module:api/StagedApi~getNetworkFirmwareUpgradesStagedGroups_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkFirmwareUpgradesStagedGroups200ResponseInner>}
     */
    getNetworkFirmwareUpgradesStagedGroups_2(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkFirmwareUpgradesStagedGroups_2");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkFirmwareUpgradesStagedGroups200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/firmwareUpgrades/staged/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkFirmwareUpgradesStagedStages_2 operation.
     * @callback module:api/StagedApi~getNetworkFirmwareUpgradesStagedStages_2Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkFirmwareUpgradesStagedStages200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Order of Staged Upgrade Groups in a network
     * Order of Staged Upgrade Groups in a network
     * @param {String} networkId 
     * @param {module:api/StagedApi~getNetworkFirmwareUpgradesStagedStages_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkFirmwareUpgradesStagedStages200ResponseInner>}
     */
    getNetworkFirmwareUpgradesStagedStages_2(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkFirmwareUpgradesStagedStages_2");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkFirmwareUpgradesStagedStages200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/firmwareUpgrades/staged/stages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rollbacksNetworkFirmwareUpgradesStagedEvents_2 operation.
     * @callback module:api/StagedApi~rollbacksNetworkFirmwareUpgradesStagedEvents_2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkFirmwareUpgradesStagedEvents200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rollback a Staged Upgrade Event for a network
     * Rollback a Staged Upgrade Event for a network
     * @param {String} networkId 
     * @param {module:model/RollbacksNetworkFirmwareUpgradesStagedEventsRequest} rollbacksNetworkFirmwareUpgradesStagedEventsRequest 
     * @param {module:api/StagedApi~rollbacksNetworkFirmwareUpgradesStagedEvents_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkFirmwareUpgradesStagedEvents200Response}
     */
    rollbacksNetworkFirmwareUpgradesStagedEvents_2(networkId, rollbacksNetworkFirmwareUpgradesStagedEventsRequest, callback) {
      let postBody = rollbacksNetworkFirmwareUpgradesStagedEventsRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling rollbacksNetworkFirmwareUpgradesStagedEvents_2");
      }
      // verify the required parameter 'rollbacksNetworkFirmwareUpgradesStagedEventsRequest' is set
      if (rollbacksNetworkFirmwareUpgradesStagedEventsRequest === undefined || rollbacksNetworkFirmwareUpgradesStagedEventsRequest === null) {
        throw new Error("Missing the required parameter 'rollbacksNetworkFirmwareUpgradesStagedEventsRequest' when calling rollbacksNetworkFirmwareUpgradesStagedEvents_2");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkFirmwareUpgradesStagedEvents200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/firmwareUpgrades/staged/events/rollbacks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkFirmwareUpgradesStagedEvents_2 operation.
     * @callback module:api/StagedApi~updateNetworkFirmwareUpgradesStagedEvents_2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkFirmwareUpgradesStagedEvents200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the Staged Upgrade Event for a network
     * Update the Staged Upgrade Event for a network
     * @param {String} networkId 
     * @param {module:model/UpdateNetworkFirmwareUpgradesStagedEventsRequest} updateNetworkFirmwareUpgradesStagedEventsRequest 
     * @param {module:api/StagedApi~updateNetworkFirmwareUpgradesStagedEvents_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkFirmwareUpgradesStagedEvents200Response}
     */
    updateNetworkFirmwareUpgradesStagedEvents_2(networkId, updateNetworkFirmwareUpgradesStagedEventsRequest, callback) {
      let postBody = updateNetworkFirmwareUpgradesStagedEventsRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkFirmwareUpgradesStagedEvents_2");
      }
      // verify the required parameter 'updateNetworkFirmwareUpgradesStagedEventsRequest' is set
      if (updateNetworkFirmwareUpgradesStagedEventsRequest === undefined || updateNetworkFirmwareUpgradesStagedEventsRequest === null) {
        throw new Error("Missing the required parameter 'updateNetworkFirmwareUpgradesStagedEventsRequest' when calling updateNetworkFirmwareUpgradesStagedEvents_2");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkFirmwareUpgradesStagedEvents200Response;
      return this.apiClient.callApi(
        '/networks/{networkId}/firmwareUpgrades/staged/events', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkFirmwareUpgradesStagedGroup_2 operation.
     * @callback module:api/StagedApi~updateNetworkFirmwareUpgradesStagedGroup_2Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Staged Upgrade Group for a network
     * Update a Staged Upgrade Group for a network
     * @param {String} networkId 
     * @param {String} groupId 
     * @param {module:model/CreateNetworkFirmwareUpgradesStagedGroupRequest} createNetworkFirmwareUpgradesStagedGroupRequest 
     * @param {module:api/StagedApi~updateNetworkFirmwareUpgradesStagedGroup_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkFirmwareUpgradesStagedGroup_2(networkId, groupId, createNetworkFirmwareUpgradesStagedGroupRequest, callback) {
      let postBody = createNetworkFirmwareUpgradesStagedGroupRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkFirmwareUpgradesStagedGroup_2");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling updateNetworkFirmwareUpgradesStagedGroup_2");
      }
      // verify the required parameter 'createNetworkFirmwareUpgradesStagedGroupRequest' is set
      if (createNetworkFirmwareUpgradesStagedGroupRequest === undefined || createNetworkFirmwareUpgradesStagedGroupRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkFirmwareUpgradesStagedGroupRequest' when calling updateNetworkFirmwareUpgradesStagedGroup_2");
      }

      let pathParams = {
        'networkId': networkId,
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/firmwareUpgrades/staged/groups/{groupId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkFirmwareUpgradesStagedStages_2 operation.
     * @callback module:api/StagedApi~updateNetworkFirmwareUpgradesStagedStages_2Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkFirmwareUpgradesStagedStages200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assign Staged Upgrade Group order in the sequence.
     * Assign Staged Upgrade Group order in the sequence.
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkFirmwareUpgradesStagedStagesRequest} [updateNetworkFirmwareUpgradesStagedStagesRequest] 
     * @param {module:api/StagedApi~updateNetworkFirmwareUpgradesStagedStages_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkFirmwareUpgradesStagedStages200ResponseInner>}
     */
    updateNetworkFirmwareUpgradesStagedStages_2(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkFirmwareUpgradesStagedStagesRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkFirmwareUpgradesStagedStages_2");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [GetNetworkFirmwareUpgradesStagedStages200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/firmwareUpgrades/staged/stages', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
