/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UpdateDeviceSwitchWarmSpareRequest from '../model/UpdateDeviceSwitchWarmSpareRequest';
import UpdateNetworkApplianceWarmSpareRequest from '../model/UpdateNetworkApplianceWarmSpareRequest';

/**
* WarmSpare service.
* @module api/WarmSpareApi
* @version 1.32.0
*/
export default class WarmSpareApi {

    /**
    * Constructs a new WarmSpareApi. 
    * @alias module:api/WarmSpareApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getDeviceSwitchWarmSpare_1 operation.
     * @callback module:api/WarmSpareApi~getDeviceSwitchWarmSpare_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return warm spare configuration for a switch
     * Return warm spare configuration for a switch
     * @param {String} serial 
     * @param {module:api/WarmSpareApi~getDeviceSwitchWarmSpare_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getDeviceSwitchWarmSpare_1(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceSwitchWarmSpare_1");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/switch/warmSpare', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceWarmSpare_1 operation.
     * @callback module:api/WarmSpareApi~getNetworkApplianceWarmSpare_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return MX warm spare settings
     * Return MX warm spare settings
     * @param {String} networkId 
     * @param {module:api/WarmSpareApi~getNetworkApplianceWarmSpare_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkApplianceWarmSpare_1(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceWarmSpare_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/warmSpare', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the swapNetworkApplianceWarmSpare_1 operation.
     * @callback module:api/WarmSpareApi~swapNetworkApplianceWarmSpare_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Swap MX primary and warm spare appliances
     * Swap MX primary and warm spare appliances
     * @param {String} networkId 
     * @param {module:api/WarmSpareApi~swapNetworkApplianceWarmSpare_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    swapNetworkApplianceWarmSpare_1(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling swapNetworkApplianceWarmSpare_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/warmSpare/swap', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeviceSwitchWarmSpare_1 operation.
     * @callback module:api/WarmSpareApi~updateDeviceSwitchWarmSpare_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update warm spare configuration for a switch
     * Update warm spare configuration for a switch. The spare will use the same L3 configuration as the primary. Note that this will irreversibly destroy any existing L3 configuration on the spare.
     * @param {String} serial 
     * @param {module:model/UpdateDeviceSwitchWarmSpareRequest} updateDeviceSwitchWarmSpareRequest 
     * @param {module:api/WarmSpareApi~updateDeviceSwitchWarmSpare_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateDeviceSwitchWarmSpare_1(serial, updateDeviceSwitchWarmSpareRequest, callback) {
      let postBody = updateDeviceSwitchWarmSpareRequest;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling updateDeviceSwitchWarmSpare_1");
      }
      // verify the required parameter 'updateDeviceSwitchWarmSpareRequest' is set
      if (updateDeviceSwitchWarmSpareRequest === undefined || updateDeviceSwitchWarmSpareRequest === null) {
        throw new Error("Missing the required parameter 'updateDeviceSwitchWarmSpareRequest' when calling updateDeviceSwitchWarmSpare_1");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/switch/warmSpare', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceWarmSpare_1 operation.
     * @callback module:api/WarmSpareApi~updateNetworkApplianceWarmSpare_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update MX warm spare settings
     * Update MX warm spare settings
     * @param {String} networkId 
     * @param {module:model/UpdateNetworkApplianceWarmSpareRequest} updateNetworkApplianceWarmSpareRequest 
     * @param {module:api/WarmSpareApi~updateNetworkApplianceWarmSpare_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkApplianceWarmSpare_1(networkId, updateNetworkApplianceWarmSpareRequest, callback) {
      let postBody = updateNetworkApplianceWarmSpareRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceWarmSpare_1");
      }
      // verify the required parameter 'updateNetworkApplianceWarmSpareRequest' is set
      if (updateNetworkApplianceWarmSpareRequest === undefined || updateNetworkApplianceWarmSpareRequest === null) {
        throw new Error("Missing the required parameter 'updateNetworkApplianceWarmSpareRequest' when calling updateNetworkApplianceWarmSpare_1");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/warmSpare', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
