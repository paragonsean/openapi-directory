/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateOrganizationInsightMonitoredMediaServerRequest from '../model/CreateOrganizationInsightMonitoredMediaServerRequest';
import GetNetworkInsightApplicationHealthByTime200ResponseInner from '../model/GetNetworkInsightApplicationHealthByTime200ResponseInner';
import GetOrganizationInsightApplications200ResponseInner from '../model/GetOrganizationInsightApplications200ResponseInner';
import GetOrganizationInsightMonitoredMediaServers200ResponseInner from '../model/GetOrganizationInsightMonitoredMediaServers200ResponseInner';
import UpdateOrganizationInsightMonitoredMediaServerRequest from '../model/UpdateOrganizationInsightMonitoredMediaServerRequest';

/**
* Insight service.
* @module api/InsightApi
* @version 1.32.0
*/
export default class InsightApi {

    /**
    * Constructs a new InsightApi. 
    * @alias module:api/InsightApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createOrganizationInsightMonitoredMediaServer operation.
     * @callback module:api/InsightApi~createOrganizationInsightMonitoredMediaServerCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a media server to be monitored for this organization
     * Add a media server to be monitored for this organization. Only valid for organizations with Meraki Insight.
     * @param {String} organizationId 
     * @param {module:model/CreateOrganizationInsightMonitoredMediaServerRequest} createOrganizationInsightMonitoredMediaServerRequest 
     * @param {module:api/InsightApi~createOrganizationInsightMonitoredMediaServerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createOrganizationInsightMonitoredMediaServer(organizationId, createOrganizationInsightMonitoredMediaServerRequest, callback) {
      let postBody = createOrganizationInsightMonitoredMediaServerRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createOrganizationInsightMonitoredMediaServer");
      }
      // verify the required parameter 'createOrganizationInsightMonitoredMediaServerRequest' is set
      if (createOrganizationInsightMonitoredMediaServerRequest === undefined || createOrganizationInsightMonitoredMediaServerRequest === null) {
        throw new Error("Missing the required parameter 'createOrganizationInsightMonitoredMediaServerRequest' when calling createOrganizationInsightMonitoredMediaServer");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/insight/monitoredMediaServers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganizationInsightMonitoredMediaServer operation.
     * @callback module:api/InsightApi~deleteOrganizationInsightMonitoredMediaServerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a monitored media server from this organization
     * Delete a monitored media server from this organization. Only valid for organizations with Meraki Insight.
     * @param {String} organizationId 
     * @param {String} monitoredMediaServerId 
     * @param {module:api/InsightApi~deleteOrganizationInsightMonitoredMediaServerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganizationInsightMonitoredMediaServer(organizationId, monitoredMediaServerId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteOrganizationInsightMonitoredMediaServer");
      }
      // verify the required parameter 'monitoredMediaServerId' is set
      if (monitoredMediaServerId === undefined || monitoredMediaServerId === null) {
        throw new Error("Missing the required parameter 'monitoredMediaServerId' when calling deleteOrganizationInsightMonitoredMediaServer");
      }

      let pathParams = {
        'organizationId': organizationId,
        'monitoredMediaServerId': monitoredMediaServerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/insight/monitoredMediaServers/{monitoredMediaServerId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkInsightApplicationHealthByTime operation.
     * @callback module:api/InsightApi~getNetworkInsightApplicationHealthByTimeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetNetworkInsightApplicationHealthByTime200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get application health by time
     * Get application health by time
     * @param {String} networkId 
     * @param {String} applicationId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 7 days from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 7 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. The default is 2 hours.
     * @param {Number} [resolution] The time resolution in seconds for returned data. The valid resolutions are: 60, 300, 3600, 86400. The default is 300.
     * @param {module:api/InsightApi~getNetworkInsightApplicationHealthByTimeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetNetworkInsightApplicationHealthByTime200ResponseInner>}
     */
    getNetworkInsightApplicationHealthByTime(networkId, applicationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkInsightApplicationHealthByTime");
      }
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getNetworkInsightApplicationHealthByTime");
      }

      let pathParams = {
        'networkId': networkId,
        'applicationId': applicationId
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan'],
        'resolution': opts['resolution']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetNetworkInsightApplicationHealthByTime200ResponseInner];
      return this.apiClient.callApi(
        '/networks/{networkId}/insight/applications/{applicationId}/healthByTime', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationInsightApplications operation.
     * @callback module:api/InsightApi~getOrganizationInsightApplicationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationInsightApplications200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all Insight tracked applications
     * List all Insight tracked applications
     * @param {String} organizationId 
     * @param {module:api/InsightApi~getOrganizationInsightApplicationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationInsightApplications200ResponseInner>}
     */
    getOrganizationInsightApplications(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationInsightApplications");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationInsightApplications200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/insight/applications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationInsightMonitoredMediaServer operation.
     * @callback module:api/InsightApi~getOrganizationInsightMonitoredMediaServerCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a monitored media server for this organization
     * Return a monitored media server for this organization. Only valid for organizations with Meraki Insight.
     * @param {String} organizationId 
     * @param {String} monitoredMediaServerId 
     * @param {module:api/InsightApi~getOrganizationInsightMonitoredMediaServerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getOrganizationInsightMonitoredMediaServer(organizationId, monitoredMediaServerId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationInsightMonitoredMediaServer");
      }
      // verify the required parameter 'monitoredMediaServerId' is set
      if (monitoredMediaServerId === undefined || monitoredMediaServerId === null) {
        throw new Error("Missing the required parameter 'monitoredMediaServerId' when calling getOrganizationInsightMonitoredMediaServer");
      }

      let pathParams = {
        'organizationId': organizationId,
        'monitoredMediaServerId': monitoredMediaServerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/insight/monitoredMediaServers/{monitoredMediaServerId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationInsightMonitoredMediaServers operation.
     * @callback module:api/InsightApi~getOrganizationInsightMonitoredMediaServersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetOrganizationInsightMonitoredMediaServers200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the monitored media servers for this organization
     * List the monitored media servers for this organization. Only valid for organizations with Meraki Insight.
     * @param {String} organizationId 
     * @param {module:api/InsightApi~getOrganizationInsightMonitoredMediaServersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetOrganizationInsightMonitoredMediaServers200ResponseInner>}
     */
    getOrganizationInsightMonitoredMediaServers(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationInsightMonitoredMediaServers");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetOrganizationInsightMonitoredMediaServers200ResponseInner];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/insight/monitoredMediaServers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationInsightMonitoredMediaServer operation.
     * @callback module:api/InsightApi~updateOrganizationInsightMonitoredMediaServerCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a monitored media server for this organization
     * Update a monitored media server for this organization. Only valid for organizations with Meraki Insight.
     * @param {String} organizationId 
     * @param {String} monitoredMediaServerId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationInsightMonitoredMediaServerRequest} [updateOrganizationInsightMonitoredMediaServerRequest] 
     * @param {module:api/InsightApi~updateOrganizationInsightMonitoredMediaServerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateOrganizationInsightMonitoredMediaServer(organizationId, monitoredMediaServerId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateOrganizationInsightMonitoredMediaServerRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationInsightMonitoredMediaServer");
      }
      // verify the required parameter 'monitoredMediaServerId' is set
      if (monitoredMediaServerId === undefined || monitoredMediaServerId === null) {
        throw new Error("Missing the required parameter 'monitoredMediaServerId' when calling updateOrganizationInsightMonitoredMediaServer");
      }

      let pathParams = {
        'organizationId': organizationId,
        'monitoredMediaServerId': monitoredMediaServerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/insight/monitoredMediaServers/{monitoredMediaServerId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
