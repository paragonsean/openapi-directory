/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GetNetworkSmDeviceNetworkAdapters200ResponseInner model module.
 * @module model/GetNetworkSmDeviceNetworkAdapters200ResponseInner
 * @version 1.32.0
 */
class GetNetworkSmDeviceNetworkAdapters200ResponseInner {
    /**
     * Constructs a new <code>GetNetworkSmDeviceNetworkAdapters200ResponseInner</code>.
     * @alias module:model/GetNetworkSmDeviceNetworkAdapters200ResponseInner
     */
    constructor() { 
        
        GetNetworkSmDeviceNetworkAdapters200ResponseInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GetNetworkSmDeviceNetworkAdapters200ResponseInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetNetworkSmDeviceNetworkAdapters200ResponseInner} obj Optional instance to populate.
     * @return {module:model/GetNetworkSmDeviceNetworkAdapters200ResponseInner} The populated <code>GetNetworkSmDeviceNetworkAdapters200ResponseInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetNetworkSmDeviceNetworkAdapters200ResponseInner();

            if (data.hasOwnProperty('dhcpServer')) {
                obj['dhcpServer'] = ApiClient.convertToType(data['dhcpServer'], 'String');
            }
            if (data.hasOwnProperty('dnsServer')) {
                obj['dnsServer'] = ApiClient.convertToType(data['dnsServer'], 'String');
            }
            if (data.hasOwnProperty('gateway')) {
                obj['gateway'] = ApiClient.convertToType(data['gateway'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('ip')) {
                obj['ip'] = ApiClient.convertToType(data['ip'], 'String');
            }
            if (data.hasOwnProperty('mac')) {
                obj['mac'] = ApiClient.convertToType(data['mac'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('subnet')) {
                obj['subnet'] = ApiClient.convertToType(data['subnet'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetNetworkSmDeviceNetworkAdapters200ResponseInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetNetworkSmDeviceNetworkAdapters200ResponseInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['dhcpServer'] && !(typeof data['dhcpServer'] === 'string' || data['dhcpServer'] instanceof String)) {
            throw new Error("Expected the field `dhcpServer` to be a primitive type in the JSON string but got " + data['dhcpServer']);
        }
        // ensure the json data is a string
        if (data['dnsServer'] && !(typeof data['dnsServer'] === 'string' || data['dnsServer'] instanceof String)) {
            throw new Error("Expected the field `dnsServer` to be a primitive type in the JSON string but got " + data['dnsServer']);
        }
        // ensure the json data is a string
        if (data['gateway'] && !(typeof data['gateway'] === 'string' || data['gateway'] instanceof String)) {
            throw new Error("Expected the field `gateway` to be a primitive type in the JSON string but got " + data['gateway']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['ip'] && !(typeof data['ip'] === 'string' || data['ip'] instanceof String)) {
            throw new Error("Expected the field `ip` to be a primitive type in the JSON string but got " + data['ip']);
        }
        // ensure the json data is a string
        if (data['mac'] && !(typeof data['mac'] === 'string' || data['mac'] instanceof String)) {
            throw new Error("Expected the field `mac` to be a primitive type in the JSON string but got " + data['mac']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['subnet'] && !(typeof data['subnet'] === 'string' || data['subnet'] instanceof String)) {
            throw new Error("Expected the field `subnet` to be a primitive type in the JSON string but got " + data['subnet']);
        }

        return true;
    }


}



/**
 * The IP address of the DCHP Server.
 * @member {String} dhcpServer
 */
GetNetworkSmDeviceNetworkAdapters200ResponseInner.prototype['dhcpServer'] = undefined;

/**
 * The IP address of the DNS Server.
 * @member {String} dnsServer
 */
GetNetworkSmDeviceNetworkAdapters200ResponseInner.prototype['dnsServer'] = undefined;

/**
 * The IP address of the Gateway.
 * @member {String} gateway
 */
GetNetworkSmDeviceNetworkAdapters200ResponseInner.prototype['gateway'] = undefined;

/**
 * The Meraki Id of the network adapter record.
 * @member {String} id
 */
GetNetworkSmDeviceNetworkAdapters200ResponseInner.prototype['id'] = undefined;

/**
 * The IP address of the network adapter.
 * @member {String} ip
 */
GetNetworkSmDeviceNetworkAdapters200ResponseInner.prototype['ip'] = undefined;

/**
 * The MAC associated with the network adapter.
 * @member {String} mac
 */
GetNetworkSmDeviceNetworkAdapters200ResponseInner.prototype['mac'] = undefined;

/**
 * The name of the newtwork adapter.
 * @member {String} name
 */
GetNetworkSmDeviceNetworkAdapters200ResponseInner.prototype['name'] = undefined;

/**
 * The subnet for the network adapter.
 * @member {String} subnet
 */
GetNetworkSmDeviceNetworkAdapters200ResponseInner.prototype['subnet'] = undefined;






export default GetNetworkSmDeviceNetworkAdapters200ResponseInner;

