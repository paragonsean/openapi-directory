/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GetNetworkSmDevices200ResponseInner model module.
 * @module model/GetNetworkSmDevices200ResponseInner
 * @version 1.32.0
 */
class GetNetworkSmDevices200ResponseInner {
    /**
     * Constructs a new <code>GetNetworkSmDevices200ResponseInner</code>.
     * @alias module:model/GetNetworkSmDevices200ResponseInner
     */
    constructor() { 
        
        GetNetworkSmDevices200ResponseInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GetNetworkSmDevices200ResponseInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetNetworkSmDevices200ResponseInner} obj Optional instance to populate.
     * @return {module:model/GetNetworkSmDevices200ResponseInner} The populated <code>GetNetworkSmDevices200ResponseInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetNetworkSmDevices200ResponseInner();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('ip')) {
                obj['ip'] = ApiClient.convertToType(data['ip'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('osName')) {
                obj['osName'] = ApiClient.convertToType(data['osName'], 'String');
            }
            if (data.hasOwnProperty('serial')) {
                obj['serial'] = ApiClient.convertToType(data['serial'], 'String');
            }
            if (data.hasOwnProperty('serialNumber')) {
                obj['serialNumber'] = ApiClient.convertToType(data['serialNumber'], 'String');
            }
            if (data.hasOwnProperty('ssid')) {
                obj['ssid'] = ApiClient.convertToType(data['ssid'], 'String');
            }
            if (data.hasOwnProperty('systemModel')) {
                obj['systemModel'] = ApiClient.convertToType(data['systemModel'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('uuid')) {
                obj['uuid'] = ApiClient.convertToType(data['uuid'], 'String');
            }
            if (data.hasOwnProperty('wifiMac')) {
                obj['wifiMac'] = ApiClient.convertToType(data['wifiMac'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetNetworkSmDevices200ResponseInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetNetworkSmDevices200ResponseInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['ip'] && !(typeof data['ip'] === 'string' || data['ip'] instanceof String)) {
            throw new Error("Expected the field `ip` to be a primitive type in the JSON string but got " + data['ip']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        // ensure the json data is a string
        if (data['osName'] && !(typeof data['osName'] === 'string' || data['osName'] instanceof String)) {
            throw new Error("Expected the field `osName` to be a primitive type in the JSON string but got " + data['osName']);
        }
        // ensure the json data is a string
        if (data['serial'] && !(typeof data['serial'] === 'string' || data['serial'] instanceof String)) {
            throw new Error("Expected the field `serial` to be a primitive type in the JSON string but got " + data['serial']);
        }
        // ensure the json data is a string
        if (data['serialNumber'] && !(typeof data['serialNumber'] === 'string' || data['serialNumber'] instanceof String)) {
            throw new Error("Expected the field `serialNumber` to be a primitive type in the JSON string but got " + data['serialNumber']);
        }
        // ensure the json data is a string
        if (data['ssid'] && !(typeof data['ssid'] === 'string' || data['ssid'] instanceof String)) {
            throw new Error("Expected the field `ssid` to be a primitive type in the JSON string but got " + data['ssid']);
        }
        // ensure the json data is a string
        if (data['systemModel'] && !(typeof data['systemModel'] === 'string' || data['systemModel'] instanceof String)) {
            throw new Error("Expected the field `systemModel` to be a primitive type in the JSON string but got " + data['systemModel']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        // ensure the json data is a string
        if (data['uuid'] && !(typeof data['uuid'] === 'string' || data['uuid'] instanceof String)) {
            throw new Error("Expected the field `uuid` to be a primitive type in the JSON string but got " + data['uuid']);
        }
        // ensure the json data is a string
        if (data['wifiMac'] && !(typeof data['wifiMac'] === 'string' || data['wifiMac'] instanceof String)) {
            throw new Error("Expected the field `wifiMac` to be a primitive type in the JSON string but got " + data['wifiMac']);
        }

        return true;
    }


}



/**
 * The Meraki Id of the device record.
 * @member {String} id
 */
GetNetworkSmDevices200ResponseInner.prototype['id'] = undefined;

/**
 * The IP address of the device.
 * @member {String} ip
 */
GetNetworkSmDevices200ResponseInner.prototype['ip'] = undefined;

/**
 * The name of the device.
 * @member {String} name
 */
GetNetworkSmDevices200ResponseInner.prototype['name'] = undefined;

/**
 * Notes associated with the device.
 * @member {String} notes
 */
GetNetworkSmDevices200ResponseInner.prototype['notes'] = undefined;

/**
 * The name of the device OS.
 * @member {String} osName
 */
GetNetworkSmDevices200ResponseInner.prototype['osName'] = undefined;

/**
 * The device serial.
 * @member {String} serial
 */
GetNetworkSmDevices200ResponseInner.prototype['serial'] = undefined;

/**
 * The device serial number.
 * @member {String} serialNumber
 */
GetNetworkSmDevices200ResponseInner.prototype['serialNumber'] = undefined;

/**
 * The name of the SSID the device was last connected to.
 * @member {String} ssid
 */
GetNetworkSmDevices200ResponseInner.prototype['ssid'] = undefined;

/**
 * The device model.
 * @member {String} systemModel
 */
GetNetworkSmDevices200ResponseInner.prototype['systemModel'] = undefined;

/**
 * An array of tags associated with the device.
 * @member {Array.<String>} tags
 */
GetNetworkSmDevices200ResponseInner.prototype['tags'] = undefined;

/**
 * The UUID of the device.
 * @member {String} uuid
 */
GetNetworkSmDevices200ResponseInner.prototype['uuid'] = undefined;

/**
 * The MAC of the device.
 * @member {String} wifiMac
 */
GetNetworkSmDevices200ResponseInner.prototype['wifiMac'] = undefined;






export default GetNetworkSmDevices200ResponseInner;

