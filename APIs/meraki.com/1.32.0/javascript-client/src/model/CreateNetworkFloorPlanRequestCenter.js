/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateNetworkFloorPlanRequestCenter model module.
 * @module model/CreateNetworkFloorPlanRequestCenter
 * @version 1.32.0
 */
class CreateNetworkFloorPlanRequestCenter {
    /**
     * Constructs a new <code>CreateNetworkFloorPlanRequestCenter</code>.
     * The longitude and latitude of the center of your floor plan. The &#39;center&#39; or two adjacent corners (e.g. &#39;topLeftCorner&#39; and &#39;bottomLeftCorner&#39;) must be specified. If &#39;center&#39; is specified, the floor plan is placed over that point with no rotation. If two adjacent corners are specified, the floor plan is rotated to line up with the two specified points. The aspect ratio of the floor plan&#39;s image is preserved regardless of which corners/center are specified. (This means if that more than two corners are specified, only two corners may be used to preserve the floor plan&#39;s aspect ratio.). No two points can have the same latitude, longitude pair.
     * @alias module:model/CreateNetworkFloorPlanRequestCenter
     */
    constructor() { 
        
        CreateNetworkFloorPlanRequestCenter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CreateNetworkFloorPlanRequestCenter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateNetworkFloorPlanRequestCenter} obj Optional instance to populate.
     * @return {module:model/CreateNetworkFloorPlanRequestCenter} The populated <code>CreateNetworkFloorPlanRequestCenter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateNetworkFloorPlanRequestCenter();

            if (data.hasOwnProperty('lat')) {
                obj['lat'] = ApiClient.convertToType(data['lat'], 'Number');
            }
            if (data.hasOwnProperty('lng')) {
                obj['lng'] = ApiClient.convertToType(data['lng'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateNetworkFloorPlanRequestCenter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateNetworkFloorPlanRequestCenter</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * Latitude
 * @member {Number} lat
 */
CreateNetworkFloorPlanRequestCenter.prototype['lat'] = undefined;

/**
 * Longitude
 * @member {Number} lng
 */
CreateNetworkFloorPlanRequestCenter.prototype['lng'] = undefined;






export default CreateNetworkFloorPlanRequestCenter;

