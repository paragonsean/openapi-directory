/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GetNetworkSwitchAccessControlLists200ResponseRulesInner model module.
 * @module model/GetNetworkSwitchAccessControlLists200ResponseRulesInner
 * @version 1.32.0
 */
class GetNetworkSwitchAccessControlLists200ResponseRulesInner {
    /**
     * Constructs a new <code>GetNetworkSwitchAccessControlLists200ResponseRulesInner</code>.
     * @alias module:model/GetNetworkSwitchAccessControlLists200ResponseRulesInner
     */
    constructor() { 
        
        GetNetworkSwitchAccessControlLists200ResponseRulesInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GetNetworkSwitchAccessControlLists200ResponseRulesInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetNetworkSwitchAccessControlLists200ResponseRulesInner} obj Optional instance to populate.
     * @return {module:model/GetNetworkSwitchAccessControlLists200ResponseRulesInner} The populated <code>GetNetworkSwitchAccessControlLists200ResponseRulesInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetNetworkSwitchAccessControlLists200ResponseRulesInner();

            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
            if (data.hasOwnProperty('dstCidr')) {
                obj['dstCidr'] = ApiClient.convertToType(data['dstCidr'], 'String');
            }
            if (data.hasOwnProperty('dstPort')) {
                obj['dstPort'] = ApiClient.convertToType(data['dstPort'], 'String');
            }
            if (data.hasOwnProperty('ipVersion')) {
                obj['ipVersion'] = ApiClient.convertToType(data['ipVersion'], 'String');
            }
            if (data.hasOwnProperty('policy')) {
                obj['policy'] = ApiClient.convertToType(data['policy'], 'String');
            }
            if (data.hasOwnProperty('protocol')) {
                obj['protocol'] = ApiClient.convertToType(data['protocol'], 'String');
            }
            if (data.hasOwnProperty('srcCidr')) {
                obj['srcCidr'] = ApiClient.convertToType(data['srcCidr'], 'String');
            }
            if (data.hasOwnProperty('srcPort')) {
                obj['srcPort'] = ApiClient.convertToType(data['srcPort'], 'String');
            }
            if (data.hasOwnProperty('vlan')) {
                obj['vlan'] = ApiClient.convertToType(data['vlan'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetNetworkSwitchAccessControlLists200ResponseRulesInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetNetworkSwitchAccessControlLists200ResponseRulesInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['comment'] && !(typeof data['comment'] === 'string' || data['comment'] instanceof String)) {
            throw new Error("Expected the field `comment` to be a primitive type in the JSON string but got " + data['comment']);
        }
        // ensure the json data is a string
        if (data['dstCidr'] && !(typeof data['dstCidr'] === 'string' || data['dstCidr'] instanceof String)) {
            throw new Error("Expected the field `dstCidr` to be a primitive type in the JSON string but got " + data['dstCidr']);
        }
        // ensure the json data is a string
        if (data['dstPort'] && !(typeof data['dstPort'] === 'string' || data['dstPort'] instanceof String)) {
            throw new Error("Expected the field `dstPort` to be a primitive type in the JSON string but got " + data['dstPort']);
        }
        // ensure the json data is a string
        if (data['ipVersion'] && !(typeof data['ipVersion'] === 'string' || data['ipVersion'] instanceof String)) {
            throw new Error("Expected the field `ipVersion` to be a primitive type in the JSON string but got " + data['ipVersion']);
        }
        // ensure the json data is a string
        if (data['policy'] && !(typeof data['policy'] === 'string' || data['policy'] instanceof String)) {
            throw new Error("Expected the field `policy` to be a primitive type in the JSON string but got " + data['policy']);
        }
        // ensure the json data is a string
        if (data['protocol'] && !(typeof data['protocol'] === 'string' || data['protocol'] instanceof String)) {
            throw new Error("Expected the field `protocol` to be a primitive type in the JSON string but got " + data['protocol']);
        }
        // ensure the json data is a string
        if (data['srcCidr'] && !(typeof data['srcCidr'] === 'string' || data['srcCidr'] instanceof String)) {
            throw new Error("Expected the field `srcCidr` to be a primitive type in the JSON string but got " + data['srcCidr']);
        }
        // ensure the json data is a string
        if (data['srcPort'] && !(typeof data['srcPort'] === 'string' || data['srcPort'] instanceof String)) {
            throw new Error("Expected the field `srcPort` to be a primitive type in the JSON string but got " + data['srcPort']);
        }
        // ensure the json data is a string
        if (data['vlan'] && !(typeof data['vlan'] === 'string' || data['vlan'] instanceof String)) {
            throw new Error("Expected the field `vlan` to be a primitive type in the JSON string but got " + data['vlan']);
        }

        return true;
    }


}



/**
 * Description of the rule (optional)
 * @member {String} comment
 */
GetNetworkSwitchAccessControlLists200ResponseRulesInner.prototype['comment'] = undefined;

/**
 * Destination IP address (in IP or CIDR notation)
 * @member {String} dstCidr
 */
GetNetworkSwitchAccessControlLists200ResponseRulesInner.prototype['dstCidr'] = undefined;

/**
 * Destination port
 * @member {String} dstPort
 */
GetNetworkSwitchAccessControlLists200ResponseRulesInner.prototype['dstPort'] = undefined;

/**
 * IP address version
 * @member {module:model/GetNetworkSwitchAccessControlLists200ResponseRulesInner.IpVersionEnum} ipVersion
 */
GetNetworkSwitchAccessControlLists200ResponseRulesInner.prototype['ipVersion'] = undefined;

/**
 * 'allow' or 'deny' traffic specified by this rule
 * @member {module:model/GetNetworkSwitchAccessControlLists200ResponseRulesInner.PolicyEnum} policy
 */
GetNetworkSwitchAccessControlLists200ResponseRulesInner.prototype['policy'] = undefined;

/**
 * The type of protocol
 * @member {module:model/GetNetworkSwitchAccessControlLists200ResponseRulesInner.ProtocolEnum} protocol
 */
GetNetworkSwitchAccessControlLists200ResponseRulesInner.prototype['protocol'] = undefined;

/**
 * Source IP address (in IP or CIDR notation)
 * @member {String} srcCidr
 */
GetNetworkSwitchAccessControlLists200ResponseRulesInner.prototype['srcCidr'] = undefined;

/**
 * Source port
 * @member {String} srcPort
 */
GetNetworkSwitchAccessControlLists200ResponseRulesInner.prototype['srcPort'] = undefined;

/**
 * ncoming traffic VLAN
 * @member {String} vlan
 */
GetNetworkSwitchAccessControlLists200ResponseRulesInner.prototype['vlan'] = undefined;





/**
 * Allowed values for the <code>ipVersion</code> property.
 * @enum {String}
 * @readonly
 */
GetNetworkSwitchAccessControlLists200ResponseRulesInner['IpVersionEnum'] = {

    /**
     * value: "any"
     * @const
     */
    "any": "any",

    /**
     * value: "ipv4"
     * @const
     */
    "ipv4": "ipv4",

    /**
     * value: "ipv6"
     * @const
     */
    "ipv6": "ipv6"
};


/**
 * Allowed values for the <code>policy</code> property.
 * @enum {String}
 * @readonly
 */
GetNetworkSwitchAccessControlLists200ResponseRulesInner['PolicyEnum'] = {

    /**
     * value: "allow"
     * @const
     */
    "allow": "allow",

    /**
     * value: "deny"
     * @const
     */
    "deny": "deny"
};


/**
 * Allowed values for the <code>protocol</code> property.
 * @enum {String}
 * @readonly
 */
GetNetworkSwitchAccessControlLists200ResponseRulesInner['ProtocolEnum'] = {

    /**
     * value: "any"
     * @const
     */
    "any": "any",

    /**
     * value: "tcp"
     * @const
     */
    "tcp": "tcp",

    /**
     * value: "udp"
     * @const
     */
    "udp": "udp"
};



export default GetNetworkSwitchAccessControlLists200ResponseRulesInner;

