/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GetOrganizationLicenses200ResponseInnerPermanentlyQueuedLicensesInner from './GetOrganizationLicenses200ResponseInnerPermanentlyQueuedLicensesInner';

/**
 * The GetOrganizationLicenses200ResponseInner model module.
 * @module model/GetOrganizationLicenses200ResponseInner
 * @version 1.32.0
 */
class GetOrganizationLicenses200ResponseInner {
    /**
     * Constructs a new <code>GetOrganizationLicenses200ResponseInner</code>.
     * @alias module:model/GetOrganizationLicenses200ResponseInner
     */
    constructor() { 
        
        GetOrganizationLicenses200ResponseInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GetOrganizationLicenses200ResponseInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetOrganizationLicenses200ResponseInner} obj Optional instance to populate.
     * @return {module:model/GetOrganizationLicenses200ResponseInner} The populated <code>GetOrganizationLicenses200ResponseInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetOrganizationLicenses200ResponseInner();

            if (data.hasOwnProperty('activationDate')) {
                obj['activationDate'] = ApiClient.convertToType(data['activationDate'], 'String');
            }
            if (data.hasOwnProperty('claimDate')) {
                obj['claimDate'] = ApiClient.convertToType(data['claimDate'], 'String');
            }
            if (data.hasOwnProperty('deviceSerial')) {
                obj['deviceSerial'] = ApiClient.convertToType(data['deviceSerial'], 'String');
            }
            if (data.hasOwnProperty('durationInDays')) {
                obj['durationInDays'] = ApiClient.convertToType(data['durationInDays'], 'Number');
            }
            if (data.hasOwnProperty('expirationDate')) {
                obj['expirationDate'] = ApiClient.convertToType(data['expirationDate'], 'String');
            }
            if (data.hasOwnProperty('headLicenseId')) {
                obj['headLicenseId'] = ApiClient.convertToType(data['headLicenseId'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('licenseKey')) {
                obj['licenseKey'] = ApiClient.convertToType(data['licenseKey'], 'String');
            }
            if (data.hasOwnProperty('licenseType')) {
                obj['licenseType'] = ApiClient.convertToType(data['licenseType'], 'String');
            }
            if (data.hasOwnProperty('networkId')) {
                obj['networkId'] = ApiClient.convertToType(data['networkId'], 'String');
            }
            if (data.hasOwnProperty('orderNumber')) {
                obj['orderNumber'] = ApiClient.convertToType(data['orderNumber'], 'String');
            }
            if (data.hasOwnProperty('permanentlyQueuedLicenses')) {
                obj['permanentlyQueuedLicenses'] = ApiClient.convertToType(data['permanentlyQueuedLicenses'], [GetOrganizationLicenses200ResponseInnerPermanentlyQueuedLicensesInner]);
            }
            if (data.hasOwnProperty('seatCount')) {
                obj['seatCount'] = ApiClient.convertToType(data['seatCount'], 'Number');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('totalDurationInDays')) {
                obj['totalDurationInDays'] = ApiClient.convertToType(data['totalDurationInDays'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetOrganizationLicenses200ResponseInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetOrganizationLicenses200ResponseInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['activationDate'] && !(typeof data['activationDate'] === 'string' || data['activationDate'] instanceof String)) {
            throw new Error("Expected the field `activationDate` to be a primitive type in the JSON string but got " + data['activationDate']);
        }
        // ensure the json data is a string
        if (data['claimDate'] && !(typeof data['claimDate'] === 'string' || data['claimDate'] instanceof String)) {
            throw new Error("Expected the field `claimDate` to be a primitive type in the JSON string but got " + data['claimDate']);
        }
        // ensure the json data is a string
        if (data['deviceSerial'] && !(typeof data['deviceSerial'] === 'string' || data['deviceSerial'] instanceof String)) {
            throw new Error("Expected the field `deviceSerial` to be a primitive type in the JSON string but got " + data['deviceSerial']);
        }
        // ensure the json data is a string
        if (data['expirationDate'] && !(typeof data['expirationDate'] === 'string' || data['expirationDate'] instanceof String)) {
            throw new Error("Expected the field `expirationDate` to be a primitive type in the JSON string but got " + data['expirationDate']);
        }
        // ensure the json data is a string
        if (data['headLicenseId'] && !(typeof data['headLicenseId'] === 'string' || data['headLicenseId'] instanceof String)) {
            throw new Error("Expected the field `headLicenseId` to be a primitive type in the JSON string but got " + data['headLicenseId']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['licenseKey'] && !(typeof data['licenseKey'] === 'string' || data['licenseKey'] instanceof String)) {
            throw new Error("Expected the field `licenseKey` to be a primitive type in the JSON string but got " + data['licenseKey']);
        }
        // ensure the json data is a string
        if (data['licenseType'] && !(typeof data['licenseType'] === 'string' || data['licenseType'] instanceof String)) {
            throw new Error("Expected the field `licenseType` to be a primitive type in the JSON string but got " + data['licenseType']);
        }
        // ensure the json data is a string
        if (data['networkId'] && !(typeof data['networkId'] === 'string' || data['networkId'] instanceof String)) {
            throw new Error("Expected the field `networkId` to be a primitive type in the JSON string but got " + data['networkId']);
        }
        // ensure the json data is a string
        if (data['orderNumber'] && !(typeof data['orderNumber'] === 'string' || data['orderNumber'] instanceof String)) {
            throw new Error("Expected the field `orderNumber` to be a primitive type in the JSON string but got " + data['orderNumber']);
        }
        if (data['permanentlyQueuedLicenses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['permanentlyQueuedLicenses'])) {
                throw new Error("Expected the field `permanentlyQueuedLicenses` to be an array in the JSON data but got " + data['permanentlyQueuedLicenses']);
            }
            // validate the optional field `permanentlyQueuedLicenses` (array)
            for (const item of data['permanentlyQueuedLicenses']) {
                GetOrganizationLicenses200ResponseInnerPermanentlyQueuedLicensesInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * The date the license started burning
 * @member {String} activationDate
 */
GetOrganizationLicenses200ResponseInner.prototype['activationDate'] = undefined;

/**
 * The date the license was claimed into the organization
 * @member {String} claimDate
 */
GetOrganizationLicenses200ResponseInner.prototype['claimDate'] = undefined;

/**
 * Serial number of the device the license is assigned to
 * @member {String} deviceSerial
 */
GetOrganizationLicenses200ResponseInner.prototype['deviceSerial'] = undefined;

/**
 * The duration of the individual license
 * @member {Number} durationInDays
 */
GetOrganizationLicenses200ResponseInner.prototype['durationInDays'] = undefined;

/**
 * The date the license will expire
 * @member {String} expirationDate
 */
GetOrganizationLicenses200ResponseInner.prototype['expirationDate'] = undefined;

/**
 * The id of the head license this license is queued behind. If there is no head license, it returns nil.
 * @member {String} headLicenseId
 */
GetOrganizationLicenses200ResponseInner.prototype['headLicenseId'] = undefined;

/**
 * License ID
 * @member {String} id
 */
GetOrganizationLicenses200ResponseInner.prototype['id'] = undefined;

/**
 * License key
 * @member {String} licenseKey
 */
GetOrganizationLicenses200ResponseInner.prototype['licenseKey'] = undefined;

/**
 * License type
 * @member {String} licenseType
 */
GetOrganizationLicenses200ResponseInner.prototype['licenseType'] = undefined;

/**
 * ID of the network the license is assigned to
 * @member {String} networkId
 */
GetOrganizationLicenses200ResponseInner.prototype['networkId'] = undefined;

/**
 * Order number
 * @member {String} orderNumber
 */
GetOrganizationLicenses200ResponseInner.prototype['orderNumber'] = undefined;

/**
 * DEPRECATED List of permanently queued licenses attached to the license. Instead, use /organizations/{organizationId}/licenses?deviceSerial= to retrieved queued licenses for a given device.
 * @member {Array.<module:model/GetOrganizationLicenses200ResponseInnerPermanentlyQueuedLicensesInner>} permanentlyQueuedLicenses
 */
GetOrganizationLicenses200ResponseInner.prototype['permanentlyQueuedLicenses'] = undefined;

/**
 * The number of seats of the license. Only applicable to SM licenses.
 * @member {Number} seatCount
 */
GetOrganizationLicenses200ResponseInner.prototype['seatCount'] = undefined;

/**
 * The state of the license. All queued licenses have a status of `recentlyQueued`.
 * @member {module:model/GetOrganizationLicenses200ResponseInner.StateEnum} state
 */
GetOrganizationLicenses200ResponseInner.prototype['state'] = undefined;

/**
 * The duration of the license plus all permanently queued licenses associated with it
 * @member {Number} totalDurationInDays
 */
GetOrganizationLicenses200ResponseInner.prototype['totalDurationInDays'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
GetOrganizationLicenses200ResponseInner['StateEnum'] = {

    /**
     * value: "active"
     * @const
     */
    "active": "active",

    /**
     * value: "expired"
     * @const
     */
    "expired": "expired",

    /**
     * value: "expiring"
     * @const
     */
    "expiring": "expiring",

    /**
     * value: "recentlyQueued"
     * @const
     */
    "recentlyQueued": "recentlyQueued",

    /**
     * value: "unused"
     * @const
     */
    "unused": "unused",

    /**
     * value: "unusedActive"
     * @const
     */
    "unusedActive": "unusedActive"
};



export default GetOrganizationLicenses200ResponseInner;

