/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MoveOrganizationLicensingCotermLicensesRequestLicensesInnerCountsInner from './MoveOrganizationLicensingCotermLicensesRequestLicensesInnerCountsInner';

/**
 * The MoveOrganizationLicensingCotermLicensesRequestLicensesInner model module.
 * @module model/MoveOrganizationLicensingCotermLicensesRequestLicensesInner
 * @version 1.32.0
 */
class MoveOrganizationLicensingCotermLicensesRequestLicensesInner {
    /**
     * Constructs a new <code>MoveOrganizationLicensingCotermLicensesRequestLicensesInner</code>.
     * @alias module:model/MoveOrganizationLicensingCotermLicensesRequestLicensesInner
     * @param counts {Array.<module:model/MoveOrganizationLicensingCotermLicensesRequestLicensesInnerCountsInner>} The counts to move from the license by model type
     * @param key {String} The license key to move counts from
     */
    constructor(counts, key) { 
        
        MoveOrganizationLicensingCotermLicensesRequestLicensesInner.initialize(this, counts, key);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, counts, key) { 
        obj['counts'] = counts;
        obj['key'] = key;
    }

    /**
     * Constructs a <code>MoveOrganizationLicensingCotermLicensesRequestLicensesInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MoveOrganizationLicensingCotermLicensesRequestLicensesInner} obj Optional instance to populate.
     * @return {module:model/MoveOrganizationLicensingCotermLicensesRequestLicensesInner} The populated <code>MoveOrganizationLicensingCotermLicensesRequestLicensesInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MoveOrganizationLicensingCotermLicensesRequestLicensesInner();

            if (data.hasOwnProperty('counts')) {
                obj['counts'] = ApiClient.convertToType(data['counts'], [MoveOrganizationLicensingCotermLicensesRequestLicensesInnerCountsInner]);
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MoveOrganizationLicensingCotermLicensesRequestLicensesInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MoveOrganizationLicensingCotermLicensesRequestLicensesInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MoveOrganizationLicensingCotermLicensesRequestLicensesInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['counts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['counts'])) {
                throw new Error("Expected the field `counts` to be an array in the JSON data but got " + data['counts']);
            }
            // validate the optional field `counts` (array)
            for (const item of data['counts']) {
                MoveOrganizationLicensingCotermLicensesRequestLicensesInnerCountsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }

        return true;
    }


}

MoveOrganizationLicensingCotermLicensesRequestLicensesInner.RequiredProperties = ["counts", "key"];

/**
 * The counts to move from the license by model type
 * @member {Array.<module:model/MoveOrganizationLicensingCotermLicensesRequestLicensesInnerCountsInner>} counts
 */
MoveOrganizationLicensingCotermLicensesRequestLicensesInner.prototype['counts'] = undefined;

/**
 * The license key to move counts from
 * @member {String} key
 */
MoveOrganizationLicensingCotermLicensesRequestLicensesInner.prototype['key'] = undefined;






export default MoveOrganizationLicensingCotermLicensesRequestLicensesInner;

