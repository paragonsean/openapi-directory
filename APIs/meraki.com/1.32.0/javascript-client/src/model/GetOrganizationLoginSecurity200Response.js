/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GetOrganizationLoginSecurity200ResponseApiAuthentication from './GetOrganizationLoginSecurity200ResponseApiAuthentication';

/**
 * The GetOrganizationLoginSecurity200Response model module.
 * @module model/GetOrganizationLoginSecurity200Response
 * @version 1.32.0
 */
class GetOrganizationLoginSecurity200Response {
    /**
     * Constructs a new <code>GetOrganizationLoginSecurity200Response</code>.
     * @alias module:model/GetOrganizationLoginSecurity200Response
     */
    constructor() { 
        
        GetOrganizationLoginSecurity200Response.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GetOrganizationLoginSecurity200Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetOrganizationLoginSecurity200Response} obj Optional instance to populate.
     * @return {module:model/GetOrganizationLoginSecurity200Response} The populated <code>GetOrganizationLoginSecurity200Response</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetOrganizationLoginSecurity200Response();

            if (data.hasOwnProperty('accountLockoutAttempts')) {
                obj['accountLockoutAttempts'] = ApiClient.convertToType(data['accountLockoutAttempts'], 'Number');
            }
            if (data.hasOwnProperty('apiAuthentication')) {
                obj['apiAuthentication'] = GetOrganizationLoginSecurity200ResponseApiAuthentication.constructFromObject(data['apiAuthentication']);
            }
            if (data.hasOwnProperty('enforceAccountLockout')) {
                obj['enforceAccountLockout'] = ApiClient.convertToType(data['enforceAccountLockout'], 'Boolean');
            }
            if (data.hasOwnProperty('enforceDifferentPasswords')) {
                obj['enforceDifferentPasswords'] = ApiClient.convertToType(data['enforceDifferentPasswords'], 'Boolean');
            }
            if (data.hasOwnProperty('enforceIdleTimeout')) {
                obj['enforceIdleTimeout'] = ApiClient.convertToType(data['enforceIdleTimeout'], 'Boolean');
            }
            if (data.hasOwnProperty('enforceLoginIpRanges')) {
                obj['enforceLoginIpRanges'] = ApiClient.convertToType(data['enforceLoginIpRanges'], 'Boolean');
            }
            if (data.hasOwnProperty('enforcePasswordExpiration')) {
                obj['enforcePasswordExpiration'] = ApiClient.convertToType(data['enforcePasswordExpiration'], 'Boolean');
            }
            if (data.hasOwnProperty('enforceStrongPasswords')) {
                obj['enforceStrongPasswords'] = ApiClient.convertToType(data['enforceStrongPasswords'], 'Boolean');
            }
            if (data.hasOwnProperty('enforceTwoFactorAuth')) {
                obj['enforceTwoFactorAuth'] = ApiClient.convertToType(data['enforceTwoFactorAuth'], 'Boolean');
            }
            if (data.hasOwnProperty('idleTimeoutMinutes')) {
                obj['idleTimeoutMinutes'] = ApiClient.convertToType(data['idleTimeoutMinutes'], 'Number');
            }
            if (data.hasOwnProperty('loginIpRanges')) {
                obj['loginIpRanges'] = ApiClient.convertToType(data['loginIpRanges'], ['String']);
            }
            if (data.hasOwnProperty('numDifferentPasswords')) {
                obj['numDifferentPasswords'] = ApiClient.convertToType(data['numDifferentPasswords'], 'Number');
            }
            if (data.hasOwnProperty('passwordExpirationDays')) {
                obj['passwordExpirationDays'] = ApiClient.convertToType(data['passwordExpirationDays'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetOrganizationLoginSecurity200Response</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetOrganizationLoginSecurity200Response</code>.
     */
    static validateJSON(data) {
        // validate the optional field `apiAuthentication`
        if (data['apiAuthentication']) { // data not null
          GetOrganizationLoginSecurity200ResponseApiAuthentication.validateJSON(data['apiAuthentication']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['loginIpRanges'])) {
            throw new Error("Expected the field `loginIpRanges` to be an array in the JSON data but got " + data['loginIpRanges']);
        }

        return true;
    }


}



/**
 * Number of consecutive failed login attempts after which users' accounts will be locked.
 * @member {Number} accountLockoutAttempts
 */
GetOrganizationLoginSecurity200Response.prototype['accountLockoutAttempts'] = undefined;

/**
 * @member {module:model/GetOrganizationLoginSecurity200ResponseApiAuthentication} apiAuthentication
 */
GetOrganizationLoginSecurity200Response.prototype['apiAuthentication'] = undefined;

/**
 * Boolean indicating whether users' Dashboard accounts will be locked out after a specified number of consecutive failed login attempts.
 * @member {Boolean} enforceAccountLockout
 */
GetOrganizationLoginSecurity200Response.prototype['enforceAccountLockout'] = undefined;

/**
 * Boolean indicating whether users, when setting a new password, are forced to choose a new password that is different from any past passwords.
 * @member {Boolean} enforceDifferentPasswords
 */
GetOrganizationLoginSecurity200Response.prototype['enforceDifferentPasswords'] = undefined;

/**
 * Boolean indicating whether users will be logged out after being idle for the specified number of minutes.
 * @member {Boolean} enforceIdleTimeout
 */
GetOrganizationLoginSecurity200Response.prototype['enforceIdleTimeout'] = undefined;

/**
 * Boolean indicating whether organization will restrict access to Dashboard (including the API) from certain IP addresses.
 * @member {Boolean} enforceLoginIpRanges
 */
GetOrganizationLoginSecurity200Response.prototype['enforceLoginIpRanges'] = undefined;

/**
 * Boolean indicating whether users are forced to change their password every X number of days.
 * @member {Boolean} enforcePasswordExpiration
 */
GetOrganizationLoginSecurity200Response.prototype['enforcePasswordExpiration'] = undefined;

/**
 * Boolean indicating whether users will be forced to choose strong passwords for their accounts. Strong passwords are at least 8 characters that contain 3 of the following: number, uppercase letter, lowercase letter, and symbol
 * @member {Boolean} enforceStrongPasswords
 */
GetOrganizationLoginSecurity200Response.prototype['enforceStrongPasswords'] = undefined;

/**
 * Boolean indicating whether users in this organization will be required to use an extra verification code when logging in to Dashboard. This code will be sent to their mobile phone via SMS, or can be generated by the authenticator application.
 * @member {Boolean} enforceTwoFactorAuth
 */
GetOrganizationLoginSecurity200Response.prototype['enforceTwoFactorAuth'] = undefined;

/**
 * Number of minutes users can remain idle before being logged out of their accounts.
 * @member {Number} idleTimeoutMinutes
 */
GetOrganizationLoginSecurity200Response.prototype['idleTimeoutMinutes'] = undefined;

/**
 * List of acceptable IP ranges. Entries can be single IP addresses, IP address ranges, and CIDR subnets.
 * @member {Array.<String>} loginIpRanges
 */
GetOrganizationLoginSecurity200Response.prototype['loginIpRanges'] = undefined;

/**
 * Number of recent passwords that new password must be distinct from.
 * @member {Number} numDifferentPasswords
 */
GetOrganizationLoginSecurity200Response.prototype['numDifferentPasswords'] = undefined;

/**
 * Number of days after which users will be forced to change their password.
 * @member {Number} passwordExpirationDays
 */
GetOrganizationLoginSecurity200Response.prototype['passwordExpirationDays'] = undefined;






export default GetOrganizationLoginSecurity200Response;

