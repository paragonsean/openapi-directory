/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GetNetworkApplianceVlans200ResponseInnerDhcpOptionsInner from './GetNetworkApplianceVlans200ResponseInnerDhcpOptionsInner';
import GetNetworkApplianceVlans200ResponseInnerMandatoryDhcp from './GetNetworkApplianceVlans200ResponseInnerMandatoryDhcp';
import UpdateNetworkApplianceSingleLanRequestIpv6 from './UpdateNetworkApplianceSingleLanRequestIpv6';
import UpdateNetworkApplianceStaticRouteRequestReservedIpRangesInner from './UpdateNetworkApplianceStaticRouteRequestReservedIpRangesInner';

/**
 * The UpdateNetworkApplianceVlanRequest model module.
 * @module model/UpdateNetworkApplianceVlanRequest
 * @version 1.32.0
 */
class UpdateNetworkApplianceVlanRequest {
    /**
     * Constructs a new <code>UpdateNetworkApplianceVlanRequest</code>.
     * @alias module:model/UpdateNetworkApplianceVlanRequest
     */
    constructor() { 
        
        UpdateNetworkApplianceVlanRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateNetworkApplianceVlanRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateNetworkApplianceVlanRequest} obj Optional instance to populate.
     * @return {module:model/UpdateNetworkApplianceVlanRequest} The populated <code>UpdateNetworkApplianceVlanRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateNetworkApplianceVlanRequest();

            if (data.hasOwnProperty('applianceIp')) {
                obj['applianceIp'] = ApiClient.convertToType(data['applianceIp'], 'String');
            }
            if (data.hasOwnProperty('cidr')) {
                obj['cidr'] = ApiClient.convertToType(data['cidr'], 'String');
            }
            if (data.hasOwnProperty('dhcpBootFilename')) {
                obj['dhcpBootFilename'] = ApiClient.convertToType(data['dhcpBootFilename'], 'String');
            }
            if (data.hasOwnProperty('dhcpBootNextServer')) {
                obj['dhcpBootNextServer'] = ApiClient.convertToType(data['dhcpBootNextServer'], 'String');
            }
            if (data.hasOwnProperty('dhcpBootOptionsEnabled')) {
                obj['dhcpBootOptionsEnabled'] = ApiClient.convertToType(data['dhcpBootOptionsEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('dhcpHandling')) {
                obj['dhcpHandling'] = ApiClient.convertToType(data['dhcpHandling'], 'String');
            }
            if (data.hasOwnProperty('dhcpLeaseTime')) {
                obj['dhcpLeaseTime'] = ApiClient.convertToType(data['dhcpLeaseTime'], 'String');
            }
            if (data.hasOwnProperty('dhcpOptions')) {
                obj['dhcpOptions'] = ApiClient.convertToType(data['dhcpOptions'], [GetNetworkApplianceVlans200ResponseInnerDhcpOptionsInner]);
            }
            if (data.hasOwnProperty('dhcpRelayServerIps')) {
                obj['dhcpRelayServerIps'] = ApiClient.convertToType(data['dhcpRelayServerIps'], ['String']);
            }
            if (data.hasOwnProperty('dnsNameservers')) {
                obj['dnsNameservers'] = ApiClient.convertToType(data['dnsNameservers'], 'String');
            }
            if (data.hasOwnProperty('fixedIpAssignments')) {
                obj['fixedIpAssignments'] = ApiClient.convertToType(data['fixedIpAssignments'], Object);
            }
            if (data.hasOwnProperty('groupPolicyId')) {
                obj['groupPolicyId'] = ApiClient.convertToType(data['groupPolicyId'], 'String');
            }
            if (data.hasOwnProperty('ipv6')) {
                obj['ipv6'] = UpdateNetworkApplianceSingleLanRequestIpv6.constructFromObject(data['ipv6']);
            }
            if (data.hasOwnProperty('mandatoryDhcp')) {
                obj['mandatoryDhcp'] = GetNetworkApplianceVlans200ResponseInnerMandatoryDhcp.constructFromObject(data['mandatoryDhcp']);
            }
            if (data.hasOwnProperty('mask')) {
                obj['mask'] = ApiClient.convertToType(data['mask'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('reservedIpRanges')) {
                obj['reservedIpRanges'] = ApiClient.convertToType(data['reservedIpRanges'], [UpdateNetworkApplianceStaticRouteRequestReservedIpRangesInner]);
            }
            if (data.hasOwnProperty('subnet')) {
                obj['subnet'] = ApiClient.convertToType(data['subnet'], 'String');
            }
            if (data.hasOwnProperty('templateVlanType')) {
                obj['templateVlanType'] = ApiClient.convertToType(data['templateVlanType'], 'String');
            }
            if (data.hasOwnProperty('vpnNatSubnet')) {
                obj['vpnNatSubnet'] = ApiClient.convertToType(data['vpnNatSubnet'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateNetworkApplianceVlanRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateNetworkApplianceVlanRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['applianceIp'] && !(typeof data['applianceIp'] === 'string' || data['applianceIp'] instanceof String)) {
            throw new Error("Expected the field `applianceIp` to be a primitive type in the JSON string but got " + data['applianceIp']);
        }
        // ensure the json data is a string
        if (data['cidr'] && !(typeof data['cidr'] === 'string' || data['cidr'] instanceof String)) {
            throw new Error("Expected the field `cidr` to be a primitive type in the JSON string but got " + data['cidr']);
        }
        // ensure the json data is a string
        if (data['dhcpBootFilename'] && !(typeof data['dhcpBootFilename'] === 'string' || data['dhcpBootFilename'] instanceof String)) {
            throw new Error("Expected the field `dhcpBootFilename` to be a primitive type in the JSON string but got " + data['dhcpBootFilename']);
        }
        // ensure the json data is a string
        if (data['dhcpBootNextServer'] && !(typeof data['dhcpBootNextServer'] === 'string' || data['dhcpBootNextServer'] instanceof String)) {
            throw new Error("Expected the field `dhcpBootNextServer` to be a primitive type in the JSON string but got " + data['dhcpBootNextServer']);
        }
        // ensure the json data is a string
        if (data['dhcpHandling'] && !(typeof data['dhcpHandling'] === 'string' || data['dhcpHandling'] instanceof String)) {
            throw new Error("Expected the field `dhcpHandling` to be a primitive type in the JSON string but got " + data['dhcpHandling']);
        }
        // ensure the json data is a string
        if (data['dhcpLeaseTime'] && !(typeof data['dhcpLeaseTime'] === 'string' || data['dhcpLeaseTime'] instanceof String)) {
            throw new Error("Expected the field `dhcpLeaseTime` to be a primitive type in the JSON string but got " + data['dhcpLeaseTime']);
        }
        if (data['dhcpOptions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dhcpOptions'])) {
                throw new Error("Expected the field `dhcpOptions` to be an array in the JSON data but got " + data['dhcpOptions']);
            }
            // validate the optional field `dhcpOptions` (array)
            for (const item of data['dhcpOptions']) {
                GetNetworkApplianceVlans200ResponseInnerDhcpOptionsInner.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['dhcpRelayServerIps'])) {
            throw new Error("Expected the field `dhcpRelayServerIps` to be an array in the JSON data but got " + data['dhcpRelayServerIps']);
        }
        // ensure the json data is a string
        if (data['dnsNameservers'] && !(typeof data['dnsNameservers'] === 'string' || data['dnsNameservers'] instanceof String)) {
            throw new Error("Expected the field `dnsNameservers` to be a primitive type in the JSON string but got " + data['dnsNameservers']);
        }
        // ensure the json data is a string
        if (data['groupPolicyId'] && !(typeof data['groupPolicyId'] === 'string' || data['groupPolicyId'] instanceof String)) {
            throw new Error("Expected the field `groupPolicyId` to be a primitive type in the JSON string but got " + data['groupPolicyId']);
        }
        // validate the optional field `ipv6`
        if (data['ipv6']) { // data not null
          UpdateNetworkApplianceSingleLanRequestIpv6.validateJSON(data['ipv6']);
        }
        // validate the optional field `mandatoryDhcp`
        if (data['mandatoryDhcp']) { // data not null
          GetNetworkApplianceVlans200ResponseInnerMandatoryDhcp.validateJSON(data['mandatoryDhcp']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['reservedIpRanges']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['reservedIpRanges'])) {
                throw new Error("Expected the field `reservedIpRanges` to be an array in the JSON data but got " + data['reservedIpRanges']);
            }
            // validate the optional field `reservedIpRanges` (array)
            for (const item of data['reservedIpRanges']) {
                UpdateNetworkApplianceStaticRouteRequestReservedIpRangesInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['subnet'] && !(typeof data['subnet'] === 'string' || data['subnet'] instanceof String)) {
            throw new Error("Expected the field `subnet` to be a primitive type in the JSON string but got " + data['subnet']);
        }
        // ensure the json data is a string
        if (data['templateVlanType'] && !(typeof data['templateVlanType'] === 'string' || data['templateVlanType'] instanceof String)) {
            throw new Error("Expected the field `templateVlanType` to be a primitive type in the JSON string but got " + data['templateVlanType']);
        }
        // ensure the json data is a string
        if (data['vpnNatSubnet'] && !(typeof data['vpnNatSubnet'] === 'string' || data['vpnNatSubnet'] instanceof String)) {
            throw new Error("Expected the field `vpnNatSubnet` to be a primitive type in the JSON string but got " + data['vpnNatSubnet']);
        }

        return true;
    }


}



/**
 * The local IP of the appliance on the VLAN
 * @member {String} applianceIp
 */
UpdateNetworkApplianceVlanRequest.prototype['applianceIp'] = undefined;

/**
 * CIDR of the pool of subnets. Applicable only for template network. Each network bound to the template will automatically pick a subnet from this pool to build its own VLAN.
 * @member {String} cidr
 */
UpdateNetworkApplianceVlanRequest.prototype['cidr'] = undefined;

/**
 * DHCP boot option for boot filename
 * @member {String} dhcpBootFilename
 */
UpdateNetworkApplianceVlanRequest.prototype['dhcpBootFilename'] = undefined;

/**
 * DHCP boot option to direct boot clients to the server to load the boot file from
 * @member {String} dhcpBootNextServer
 */
UpdateNetworkApplianceVlanRequest.prototype['dhcpBootNextServer'] = undefined;

/**
 * Use DHCP boot options specified in other properties
 * @member {Boolean} dhcpBootOptionsEnabled
 */
UpdateNetworkApplianceVlanRequest.prototype['dhcpBootOptionsEnabled'] = undefined;

/**
 * The appliance's handling of DHCP requests on this VLAN. One of: 'Run a DHCP server', 'Relay DHCP to another server' or 'Do not respond to DHCP requests'
 * @member {module:model/UpdateNetworkApplianceVlanRequest.DhcpHandlingEnum} dhcpHandling
 */
UpdateNetworkApplianceVlanRequest.prototype['dhcpHandling'] = undefined;

/**
 * The term of DHCP leases if the appliance is running a DHCP server on this VLAN. One of: '30 minutes', '1 hour', '4 hours', '12 hours', '1 day' or '1 week'
 * @member {module:model/UpdateNetworkApplianceVlanRequest.DhcpLeaseTimeEnum} dhcpLeaseTime
 */
UpdateNetworkApplianceVlanRequest.prototype['dhcpLeaseTime'] = undefined;

/**
 * The list of DHCP options that will be included in DHCP responses. Each object in the list should have \"code\", \"type\", and \"value\" properties.
 * @member {Array.<module:model/GetNetworkApplianceVlans200ResponseInnerDhcpOptionsInner>} dhcpOptions
 */
UpdateNetworkApplianceVlanRequest.prototype['dhcpOptions'] = undefined;

/**
 * The IPs of the DHCP servers that DHCP requests should be relayed to
 * @member {Array.<String>} dhcpRelayServerIps
 */
UpdateNetworkApplianceVlanRequest.prototype['dhcpRelayServerIps'] = undefined;

/**
 * The DNS nameservers used for DHCP responses, either \"upstream_dns\", \"google_dns\", \"opendns\", or a newline seperated string of IP addresses or domain names
 * @member {String} dnsNameservers
 */
UpdateNetworkApplianceVlanRequest.prototype['dnsNameservers'] = undefined;

/**
 * The DHCP fixed IP assignments on the VLAN. This should be an object that contains mappings from MAC addresses to objects that themselves each contain \"ip\" and \"name\" string fields. See the sample request/response for more details.
 * @member {Object} fixedIpAssignments
 */
UpdateNetworkApplianceVlanRequest.prototype['fixedIpAssignments'] = undefined;

/**
 * The id of the desired group policy to apply to the VLAN
 * @member {String} groupPolicyId
 */
UpdateNetworkApplianceVlanRequest.prototype['groupPolicyId'] = undefined;

/**
 * @member {module:model/UpdateNetworkApplianceSingleLanRequestIpv6} ipv6
 */
UpdateNetworkApplianceVlanRequest.prototype['ipv6'] = undefined;

/**
 * @member {module:model/GetNetworkApplianceVlans200ResponseInnerMandatoryDhcp} mandatoryDhcp
 */
UpdateNetworkApplianceVlanRequest.prototype['mandatoryDhcp'] = undefined;

/**
 * Mask used for the subnet of all bound to the template networks. Applicable only for template network.
 * @member {Number} mask
 */
UpdateNetworkApplianceVlanRequest.prototype['mask'] = undefined;

/**
 * The name of the VLAN
 * @member {String} name
 */
UpdateNetworkApplianceVlanRequest.prototype['name'] = undefined;

/**
 * The DHCP reserved IP ranges on the VLAN
 * @member {Array.<module:model/UpdateNetworkApplianceStaticRouteRequestReservedIpRangesInner>} reservedIpRanges
 */
UpdateNetworkApplianceVlanRequest.prototype['reservedIpRanges'] = undefined;

/**
 * The subnet of the VLAN
 * @member {String} subnet
 */
UpdateNetworkApplianceVlanRequest.prototype['subnet'] = undefined;

/**
 * Type of subnetting of the VLAN. Applicable only for template network.
 * @member {module:model/UpdateNetworkApplianceVlanRequest.TemplateVlanTypeEnum} templateVlanType
 */
UpdateNetworkApplianceVlanRequest.prototype['templateVlanType'] = undefined;

/**
 * The translated VPN subnet if VPN and VPN subnet translation are enabled on the VLAN
 * @member {String} vpnNatSubnet
 */
UpdateNetworkApplianceVlanRequest.prototype['vpnNatSubnet'] = undefined;





/**
 * Allowed values for the <code>dhcpHandling</code> property.
 * @enum {String}
 * @readonly
 */
UpdateNetworkApplianceVlanRequest['DhcpHandlingEnum'] = {

    /**
     * value: "Do not respond to DHCP requests"
     * @const
     */
    "Do not respond to DHCP requests": "Do not respond to DHCP requests",

    /**
     * value: "Relay DHCP to another server"
     * @const
     */
    "Relay DHCP to another server": "Relay DHCP to another server",

    /**
     * value: "Run a DHCP server"
     * @const
     */
    "Run a DHCP server": "Run a DHCP server"
};


/**
 * Allowed values for the <code>dhcpLeaseTime</code> property.
 * @enum {String}
 * @readonly
 */
UpdateNetworkApplianceVlanRequest['DhcpLeaseTimeEnum'] = {

    /**
     * value: "1 day"
     * @const
     */
    "1 day": "1 day",

    /**
     * value: "1 hour"
     * @const
     */
    "1 hour": "1 hour",

    /**
     * value: "1 week"
     * @const
     */
    "1 week": "1 week",

    /**
     * value: "12 hours"
     * @const
     */
    "12 hours": "12 hours",

    /**
     * value: "30 minutes"
     * @const
     */
    "30 minutes": "30 minutes",

    /**
     * value: "4 hours"
     * @const
     */
    "4 hours": "4 hours"
};


/**
 * Allowed values for the <code>templateVlanType</code> property.
 * @enum {String}
 * @readonly
 */
UpdateNetworkApplianceVlanRequest['TemplateVlanTypeEnum'] = {

    /**
     * value: "same"
     * @const
     */
    "same": "same",

    /**
     * value: "unique"
     * @const
     */
    "unique": "unique"
};



export default UpdateNetworkApplianceVlanRequest;

