/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GetDeviceSwitchPortsStatuses200ResponseInnerCdp model module.
 * @module model/GetDeviceSwitchPortsStatuses200ResponseInnerCdp
 * @version 1.32.0
 */
class GetDeviceSwitchPortsStatuses200ResponseInnerCdp {
    /**
     * Constructs a new <code>GetDeviceSwitchPortsStatuses200ResponseInnerCdp</code>.
     * The Cisco Discovery Protocol (CDP) information of the connected device.
     * @alias module:model/GetDeviceSwitchPortsStatuses200ResponseInnerCdp
     */
    constructor() { 
        
        GetDeviceSwitchPortsStatuses200ResponseInnerCdp.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GetDeviceSwitchPortsStatuses200ResponseInnerCdp</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetDeviceSwitchPortsStatuses200ResponseInnerCdp} obj Optional instance to populate.
     * @return {module:model/GetDeviceSwitchPortsStatuses200ResponseInnerCdp} The populated <code>GetDeviceSwitchPortsStatuses200ResponseInnerCdp</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetDeviceSwitchPortsStatuses200ResponseInnerCdp();

            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('capabilities')) {
                obj['capabilities'] = ApiClient.convertToType(data['capabilities'], 'String');
            }
            if (data.hasOwnProperty('deviceId')) {
                obj['deviceId'] = ApiClient.convertToType(data['deviceId'], 'String');
            }
            if (data.hasOwnProperty('managementAddress')) {
                obj['managementAddress'] = ApiClient.convertToType(data['managementAddress'], 'String');
            }
            if (data.hasOwnProperty('nativeVlan')) {
                obj['nativeVlan'] = ApiClient.convertToType(data['nativeVlan'], 'Number');
            }
            if (data.hasOwnProperty('platform')) {
                obj['platform'] = ApiClient.convertToType(data['platform'], 'String');
            }
            if (data.hasOwnProperty('portId')) {
                obj['portId'] = ApiClient.convertToType(data['portId'], 'String');
            }
            if (data.hasOwnProperty('systemName')) {
                obj['systemName'] = ApiClient.convertToType(data['systemName'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
            if (data.hasOwnProperty('vtpManagementDomain')) {
                obj['vtpManagementDomain'] = ApiClient.convertToType(data['vtpManagementDomain'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetDeviceSwitchPortsStatuses200ResponseInnerCdp</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetDeviceSwitchPortsStatuses200ResponseInnerCdp</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // ensure the json data is a string
        if (data['capabilities'] && !(typeof data['capabilities'] === 'string' || data['capabilities'] instanceof String)) {
            throw new Error("Expected the field `capabilities` to be a primitive type in the JSON string but got " + data['capabilities']);
        }
        // ensure the json data is a string
        if (data['deviceId'] && !(typeof data['deviceId'] === 'string' || data['deviceId'] instanceof String)) {
            throw new Error("Expected the field `deviceId` to be a primitive type in the JSON string but got " + data['deviceId']);
        }
        // ensure the json data is a string
        if (data['managementAddress'] && !(typeof data['managementAddress'] === 'string' || data['managementAddress'] instanceof String)) {
            throw new Error("Expected the field `managementAddress` to be a primitive type in the JSON string but got " + data['managementAddress']);
        }
        // ensure the json data is a string
        if (data['platform'] && !(typeof data['platform'] === 'string' || data['platform'] instanceof String)) {
            throw new Error("Expected the field `platform` to be a primitive type in the JSON string but got " + data['platform']);
        }
        // ensure the json data is a string
        if (data['portId'] && !(typeof data['portId'] === 'string' || data['portId'] instanceof String)) {
            throw new Error("Expected the field `portId` to be a primitive type in the JSON string but got " + data['portId']);
        }
        // ensure the json data is a string
        if (data['systemName'] && !(typeof data['systemName'] === 'string' || data['systemName'] instanceof String)) {
            throw new Error("Expected the field `systemName` to be a primitive type in the JSON string but got " + data['systemName']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }
        // ensure the json data is a string
        if (data['vtpManagementDomain'] && !(typeof data['vtpManagementDomain'] === 'string' || data['vtpManagementDomain'] instanceof String)) {
            throw new Error("Expected the field `vtpManagementDomain` to be a primitive type in the JSON string but got " + data['vtpManagementDomain']);
        }

        return true;
    }


}



/**
 * Contains network addresses of both receiving and sending devices.
 * @member {String} address
 */
GetDeviceSwitchPortsStatuses200ResponseInnerCdp.prototype['address'] = undefined;

/**
 * Identifies the device type, which indicates the functional capabilities of the device.
 * @member {String} capabilities
 */
GetDeviceSwitchPortsStatuses200ResponseInnerCdp.prototype['capabilities'] = undefined;

/**
 * Identifies the device name.
 * @member {String} deviceId
 */
GetDeviceSwitchPortsStatuses200ResponseInnerCdp.prototype['deviceId'] = undefined;

/**
 * The device's management IP.
 * @member {String} managementAddress
 */
GetDeviceSwitchPortsStatuses200ResponseInnerCdp.prototype['managementAddress'] = undefined;

/**
 * Indicates, per interface, the assumed VLAN for untagged packets on the interface.
 * @member {Number} nativeVlan
 */
GetDeviceSwitchPortsStatuses200ResponseInnerCdp.prototype['nativeVlan'] = undefined;

/**
 * Identifies the hardware platform of the device.
 * @member {String} platform
 */
GetDeviceSwitchPortsStatuses200ResponseInnerCdp.prototype['platform'] = undefined;

/**
 * Identifies the port from which the CDP packet was sent.
 * @member {String} portId
 */
GetDeviceSwitchPortsStatuses200ResponseInnerCdp.prototype['portId'] = undefined;

/**
 * The system name.
 * @member {String} systemName
 */
GetDeviceSwitchPortsStatuses200ResponseInnerCdp.prototype['systemName'] = undefined;

/**
 * Contains the device software release information.
 * @member {String} version
 */
GetDeviceSwitchPortsStatuses200ResponseInnerCdp.prototype['version'] = undefined;

/**
 * Advertises the configured VLAN Trunking Protocl (VTP)-management-domain name of the system.
 * @member {String} vtpManagementDomain
 */
GetDeviceSwitchPortsStatuses200ResponseInnerCdp.prototype['vtpManagementDomain'] = undefined;






export default GetDeviceSwitchPortsStatuses200ResponseInnerCdp;

