/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UpdateNetworkTrafficAnalysisRequestCustomPieChartItemsInner from './UpdateNetworkTrafficAnalysisRequestCustomPieChartItemsInner';

/**
 * The UpdateNetworkTrafficAnalysisRequest model module.
 * @module model/UpdateNetworkTrafficAnalysisRequest
 * @version 1.32.0
 */
class UpdateNetworkTrafficAnalysisRequest {
    /**
     * Constructs a new <code>UpdateNetworkTrafficAnalysisRequest</code>.
     * @alias module:model/UpdateNetworkTrafficAnalysisRequest
     */
    constructor() { 
        
        UpdateNetworkTrafficAnalysisRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateNetworkTrafficAnalysisRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateNetworkTrafficAnalysisRequest} obj Optional instance to populate.
     * @return {module:model/UpdateNetworkTrafficAnalysisRequest} The populated <code>UpdateNetworkTrafficAnalysisRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateNetworkTrafficAnalysisRequest();

            if (data.hasOwnProperty('customPieChartItems')) {
                obj['customPieChartItems'] = ApiClient.convertToType(data['customPieChartItems'], [UpdateNetworkTrafficAnalysisRequestCustomPieChartItemsInner]);
            }
            if (data.hasOwnProperty('mode')) {
                obj['mode'] = ApiClient.convertToType(data['mode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateNetworkTrafficAnalysisRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateNetworkTrafficAnalysisRequest</code>.
     */
    static validateJSON(data) {
        if (data['customPieChartItems']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['customPieChartItems'])) {
                throw new Error("Expected the field `customPieChartItems` to be an array in the JSON data but got " + data['customPieChartItems']);
            }
            // validate the optional field `customPieChartItems` (array)
            for (const item of data['customPieChartItems']) {
                UpdateNetworkTrafficAnalysisRequestCustomPieChartItemsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['mode'] && !(typeof data['mode'] === 'string' || data['mode'] instanceof String)) {
            throw new Error("Expected the field `mode` to be a primitive type in the JSON string but got " + data['mode']);
        }

        return true;
    }


}



/**
 * The list of items that make up the custom pie chart for traffic reporting.
 * @member {Array.<module:model/UpdateNetworkTrafficAnalysisRequestCustomPieChartItemsInner>} customPieChartItems
 */
UpdateNetworkTrafficAnalysisRequest.prototype['customPieChartItems'] = undefined;

/**
 *     The traffic analysis mode for the network. Can be one of 'disabled' (do not collect traffic types),     'basic' (collect generic traffic categories), or 'detailed' (collect destination hostnames). 
 * @member {module:model/UpdateNetworkTrafficAnalysisRequest.ModeEnum} mode
 */
UpdateNetworkTrafficAnalysisRequest.prototype['mode'] = undefined;





/**
 * Allowed values for the <code>mode</code> property.
 * @enum {String}
 * @readonly
 */
UpdateNetworkTrafficAnalysisRequest['ModeEnum'] = {

    /**
     * value: "basic"
     * @const
     */
    "basic": "basic",

    /**
     * value: "detailed"
     * @const
     */
    "detailed": "detailed",

    /**
     * value: "disabled"
     * @const
     */
    "disabled": "disabled"
};



export default UpdateNetworkTrafficAnalysisRequest;

