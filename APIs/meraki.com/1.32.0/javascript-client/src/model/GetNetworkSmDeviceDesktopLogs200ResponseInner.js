/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GetNetworkSmDeviceDesktopLogs200ResponseInner model module.
 * @module model/GetNetworkSmDeviceDesktopLogs200ResponseInner
 * @version 1.32.0
 */
class GetNetworkSmDeviceDesktopLogs200ResponseInner {
    /**
     * Constructs a new <code>GetNetworkSmDeviceDesktopLogs200ResponseInner</code>.
     * @alias module:model/GetNetworkSmDeviceDesktopLogs200ResponseInner
     */
    constructor() { 
        
        GetNetworkSmDeviceDesktopLogs200ResponseInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GetNetworkSmDeviceDesktopLogs200ResponseInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetNetworkSmDeviceDesktopLogs200ResponseInner} obj Optional instance to populate.
     * @return {module:model/GetNetworkSmDeviceDesktopLogs200ResponseInner} The populated <code>GetNetworkSmDeviceDesktopLogs200ResponseInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetNetworkSmDeviceDesktopLogs200ResponseInner();

            if (data.hasOwnProperty('dhcpServer')) {
                obj['dhcpServer'] = ApiClient.convertToType(data['dhcpServer'], 'String');
            }
            if (data.hasOwnProperty('dnsServer')) {
                obj['dnsServer'] = ApiClient.convertToType(data['dnsServer'], 'String');
            }
            if (data.hasOwnProperty('gateway')) {
                obj['gateway'] = ApiClient.convertToType(data['gateway'], 'String');
            }
            if (data.hasOwnProperty('ip')) {
                obj['ip'] = ApiClient.convertToType(data['ip'], 'String');
            }
            if (data.hasOwnProperty('measuredAt')) {
                obj['measuredAt'] = ApiClient.convertToType(data['measuredAt'], 'String');
            }
            if (data.hasOwnProperty('networkDevice')) {
                obj['networkDevice'] = ApiClient.convertToType(data['networkDevice'], 'String');
            }
            if (data.hasOwnProperty('networkDriver')) {
                obj['networkDriver'] = ApiClient.convertToType(data['networkDriver'], 'String');
            }
            if (data.hasOwnProperty('networkMTU')) {
                obj['networkMTU'] = ApiClient.convertToType(data['networkMTU'], 'String');
            }
            if (data.hasOwnProperty('publicIP')) {
                obj['publicIP'] = ApiClient.convertToType(data['publicIP'], 'String');
            }
            if (data.hasOwnProperty('subnet')) {
                obj['subnet'] = ApiClient.convertToType(data['subnet'], 'String');
            }
            if (data.hasOwnProperty('ts')) {
                obj['ts'] = ApiClient.convertToType(data['ts'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = ApiClient.convertToType(data['user'], 'String');
            }
            if (data.hasOwnProperty('wifiAuth')) {
                obj['wifiAuth'] = ApiClient.convertToType(data['wifiAuth'], 'String');
            }
            if (data.hasOwnProperty('wifiBssid')) {
                obj['wifiBssid'] = ApiClient.convertToType(data['wifiBssid'], 'String');
            }
            if (data.hasOwnProperty('wifiChannel')) {
                obj['wifiChannel'] = ApiClient.convertToType(data['wifiChannel'], 'String');
            }
            if (data.hasOwnProperty('wifiNoise')) {
                obj['wifiNoise'] = ApiClient.convertToType(data['wifiNoise'], 'String');
            }
            if (data.hasOwnProperty('wifiRssi')) {
                obj['wifiRssi'] = ApiClient.convertToType(data['wifiRssi'], 'String');
            }
            if (data.hasOwnProperty('wifiSsid')) {
                obj['wifiSsid'] = ApiClient.convertToType(data['wifiSsid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetNetworkSmDeviceDesktopLogs200ResponseInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetNetworkSmDeviceDesktopLogs200ResponseInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['dhcpServer'] && !(typeof data['dhcpServer'] === 'string' || data['dhcpServer'] instanceof String)) {
            throw new Error("Expected the field `dhcpServer` to be a primitive type in the JSON string but got " + data['dhcpServer']);
        }
        // ensure the json data is a string
        if (data['dnsServer'] && !(typeof data['dnsServer'] === 'string' || data['dnsServer'] instanceof String)) {
            throw new Error("Expected the field `dnsServer` to be a primitive type in the JSON string but got " + data['dnsServer']);
        }
        // ensure the json data is a string
        if (data['gateway'] && !(typeof data['gateway'] === 'string' || data['gateway'] instanceof String)) {
            throw new Error("Expected the field `gateway` to be a primitive type in the JSON string but got " + data['gateway']);
        }
        // ensure the json data is a string
        if (data['ip'] && !(typeof data['ip'] === 'string' || data['ip'] instanceof String)) {
            throw new Error("Expected the field `ip` to be a primitive type in the JSON string but got " + data['ip']);
        }
        // ensure the json data is a string
        if (data['measuredAt'] && !(typeof data['measuredAt'] === 'string' || data['measuredAt'] instanceof String)) {
            throw new Error("Expected the field `measuredAt` to be a primitive type in the JSON string but got " + data['measuredAt']);
        }
        // ensure the json data is a string
        if (data['networkDevice'] && !(typeof data['networkDevice'] === 'string' || data['networkDevice'] instanceof String)) {
            throw new Error("Expected the field `networkDevice` to be a primitive type in the JSON string but got " + data['networkDevice']);
        }
        // ensure the json data is a string
        if (data['networkDriver'] && !(typeof data['networkDriver'] === 'string' || data['networkDriver'] instanceof String)) {
            throw new Error("Expected the field `networkDriver` to be a primitive type in the JSON string but got " + data['networkDriver']);
        }
        // ensure the json data is a string
        if (data['networkMTU'] && !(typeof data['networkMTU'] === 'string' || data['networkMTU'] instanceof String)) {
            throw new Error("Expected the field `networkMTU` to be a primitive type in the JSON string but got " + data['networkMTU']);
        }
        // ensure the json data is a string
        if (data['publicIP'] && !(typeof data['publicIP'] === 'string' || data['publicIP'] instanceof String)) {
            throw new Error("Expected the field `publicIP` to be a primitive type in the JSON string but got " + data['publicIP']);
        }
        // ensure the json data is a string
        if (data['subnet'] && !(typeof data['subnet'] === 'string' || data['subnet'] instanceof String)) {
            throw new Error("Expected the field `subnet` to be a primitive type in the JSON string but got " + data['subnet']);
        }
        // ensure the json data is a string
        if (data['ts'] && !(typeof data['ts'] === 'string' || data['ts'] instanceof String)) {
            throw new Error("Expected the field `ts` to be a primitive type in the JSON string but got " + data['ts']);
        }
        // ensure the json data is a string
        if (data['user'] && !(typeof data['user'] === 'string' || data['user'] instanceof String)) {
            throw new Error("Expected the field `user` to be a primitive type in the JSON string but got " + data['user']);
        }
        // ensure the json data is a string
        if (data['wifiAuth'] && !(typeof data['wifiAuth'] === 'string' || data['wifiAuth'] instanceof String)) {
            throw new Error("Expected the field `wifiAuth` to be a primitive type in the JSON string but got " + data['wifiAuth']);
        }
        // ensure the json data is a string
        if (data['wifiBssid'] && !(typeof data['wifiBssid'] === 'string' || data['wifiBssid'] instanceof String)) {
            throw new Error("Expected the field `wifiBssid` to be a primitive type in the JSON string but got " + data['wifiBssid']);
        }
        // ensure the json data is a string
        if (data['wifiChannel'] && !(typeof data['wifiChannel'] === 'string' || data['wifiChannel'] instanceof String)) {
            throw new Error("Expected the field `wifiChannel` to be a primitive type in the JSON string but got " + data['wifiChannel']);
        }
        // ensure the json data is a string
        if (data['wifiNoise'] && !(typeof data['wifiNoise'] === 'string' || data['wifiNoise'] instanceof String)) {
            throw new Error("Expected the field `wifiNoise` to be a primitive type in the JSON string but got " + data['wifiNoise']);
        }
        // ensure the json data is a string
        if (data['wifiRssi'] && !(typeof data['wifiRssi'] === 'string' || data['wifiRssi'] instanceof String)) {
            throw new Error("Expected the field `wifiRssi` to be a primitive type in the JSON string but got " + data['wifiRssi']);
        }
        // ensure the json data is a string
        if (data['wifiSsid'] && !(typeof data['wifiSsid'] === 'string' || data['wifiSsid'] instanceof String)) {
            throw new Error("Expected the field `wifiSsid` to be a primitive type in the JSON string but got " + data['wifiSsid']);
        }

        return true;
    }


}



/**
 * The IP address of the DCHP Server.
 * @member {String} dhcpServer
 */
GetNetworkSmDeviceDesktopLogs200ResponseInner.prototype['dhcpServer'] = undefined;

/**
 * The DNS Server during the connection.
 * @member {String} dnsServer
 */
GetNetworkSmDeviceDesktopLogs200ResponseInner.prototype['dnsServer'] = undefined;

/**
 * The gateway IP the device was connected to.
 * @member {String} gateway
 */
GetNetworkSmDeviceDesktopLogs200ResponseInner.prototype['gateway'] = undefined;

/**
 * The IP of the device during connection.
 * @member {String} ip
 */
GetNetworkSmDeviceDesktopLogs200ResponseInner.prototype['ip'] = undefined;

/**
 * The time the data was measured at.
 * @member {String} measuredAt
 */
GetNetworkSmDeviceDesktopLogs200ResponseInner.prototype['measuredAt'] = undefined;

/**
 * The network device for the device used for connection.
 * @member {String} networkDevice
 */
GetNetworkSmDeviceDesktopLogs200ResponseInner.prototype['networkDevice'] = undefined;

/**
 * The network driver for the device.
 * @member {String} networkDriver
 */
GetNetworkSmDeviceDesktopLogs200ResponseInner.prototype['networkDriver'] = undefined;

/**
 * The network max transmission unit.
 * @member {String} networkMTU
 */
GetNetworkSmDeviceDesktopLogs200ResponseInner.prototype['networkMTU'] = undefined;

/**
 * The public IP address of the device.
 * @member {String} publicIP
 */
GetNetworkSmDeviceDesktopLogs200ResponseInner.prototype['publicIP'] = undefined;

/**
 * The subnet of the device connection.
 * @member {String} subnet
 */
GetNetworkSmDeviceDesktopLogs200ResponseInner.prototype['subnet'] = undefined;

/**
 * The time the connection was logged.
 * @member {String} ts
 */
GetNetworkSmDeviceDesktopLogs200ResponseInner.prototype['ts'] = undefined;

/**
 * The user during connection.
 * @member {String} user
 */
GetNetworkSmDeviceDesktopLogs200ResponseInner.prototype['user'] = undefined;

/**
 * The type of authentication used by the SSID.
 * @member {String} wifiAuth
 */
GetNetworkSmDeviceDesktopLogs200ResponseInner.prototype['wifiAuth'] = undefined;

/**
 * The MAC of the access point the device is connected to.
 * @member {String} wifiBssid
 */
GetNetworkSmDeviceDesktopLogs200ResponseInner.prototype['wifiBssid'] = undefined;

/**
 * Channel through which the connection is routing.
 * @member {String} wifiChannel
 */
GetNetworkSmDeviceDesktopLogs200ResponseInner.prototype['wifiChannel'] = undefined;

/**
 * The wireless signal power level received by the device.
 * @member {String} wifiNoise
 */
GetNetworkSmDeviceDesktopLogs200ResponseInner.prototype['wifiNoise'] = undefined;

/**
 * The Received Signal Strength Indicator for the device.
 * @member {String} wifiRssi
 */
GetNetworkSmDeviceDesktopLogs200ResponseInner.prototype['wifiRssi'] = undefined;

/**
 * The name of the network the device is connected to.
 * @member {String} wifiSsid
 */
GetNetworkSmDeviceDesktopLogs200ResponseInner.prototype['wifiSsid'] = undefined;






export default GetNetworkSmDeviceDesktopLogs200ResponseInner;

