/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GetNetworkEvents200ResponseEventsInnerEventData model module.
 * @module model/GetNetworkEvents200ResponseEventsInnerEventData
 * @version 1.32.0
 */
class GetNetworkEvents200ResponseEventsInnerEventData {
    /**
     * Constructs a new <code>GetNetworkEvents200ResponseEventsInnerEventData</code>.
     * An object containing more data related to the event.
     * @alias module:model/GetNetworkEvents200ResponseEventsInnerEventData
     */
    constructor() { 
        
        GetNetworkEvents200ResponseEventsInnerEventData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GetNetworkEvents200ResponseEventsInnerEventData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetNetworkEvents200ResponseEventsInnerEventData} obj Optional instance to populate.
     * @return {module:model/GetNetworkEvents200ResponseEventsInnerEventData} The populated <code>GetNetworkEvents200ResponseEventsInnerEventData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetNetworkEvents200ResponseEventsInnerEventData();

            if (data.hasOwnProperty('aid')) {
                obj['aid'] = ApiClient.convertToType(data['aid'], 'String');
            }
            if (data.hasOwnProperty('channel')) {
                obj['channel'] = ApiClient.convertToType(data['channel'], 'String');
            }
            if (data.hasOwnProperty('client_ip')) {
                obj['client_ip'] = ApiClient.convertToType(data['client_ip'], 'String');
            }
            if (data.hasOwnProperty('client_mac')) {
                obj['client_mac'] = ApiClient.convertToType(data['client_mac'], 'String');
            }
            if (data.hasOwnProperty('radio')) {
                obj['radio'] = ApiClient.convertToType(data['radio'], 'String');
            }
            if (data.hasOwnProperty('rssi')) {
                obj['rssi'] = ApiClient.convertToType(data['rssi'], 'String');
            }
            if (data.hasOwnProperty('vap')) {
                obj['vap'] = ApiClient.convertToType(data['vap'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetNetworkEvents200ResponseEventsInnerEventData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetNetworkEvents200ResponseEventsInnerEventData</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['aid'] && !(typeof data['aid'] === 'string' || data['aid'] instanceof String)) {
            throw new Error("Expected the field `aid` to be a primitive type in the JSON string but got " + data['aid']);
        }
        // ensure the json data is a string
        if (data['channel'] && !(typeof data['channel'] === 'string' || data['channel'] instanceof String)) {
            throw new Error("Expected the field `channel` to be a primitive type in the JSON string but got " + data['channel']);
        }
        // ensure the json data is a string
        if (data['client_ip'] && !(typeof data['client_ip'] === 'string' || data['client_ip'] instanceof String)) {
            throw new Error("Expected the field `client_ip` to be a primitive type in the JSON string but got " + data['client_ip']);
        }
        // ensure the json data is a string
        if (data['client_mac'] && !(typeof data['client_mac'] === 'string' || data['client_mac'] instanceof String)) {
            throw new Error("Expected the field `client_mac` to be a primitive type in the JSON string but got " + data['client_mac']);
        }
        // ensure the json data is a string
        if (data['radio'] && !(typeof data['radio'] === 'string' || data['radio'] instanceof String)) {
            throw new Error("Expected the field `radio` to be a primitive type in the JSON string but got " + data['radio']);
        }
        // ensure the json data is a string
        if (data['rssi'] && !(typeof data['rssi'] === 'string' || data['rssi'] instanceof String)) {
            throw new Error("Expected the field `rssi` to be a primitive type in the JSON string but got " + data['rssi']);
        }
        // ensure the json data is a string
        if (data['vap'] && !(typeof data['vap'] === 'string' || data['vap'] instanceof String)) {
            throw new Error("Expected the field `vap` to be a primitive type in the JSON string but got " + data['vap']);
        }

        return true;
    }


}



/**
 * The association ID of the client.
 * @member {String} aid
 */
GetNetworkEvents200ResponseEventsInnerEventData.prototype['aid'] = undefined;

/**
 * The radio channel the client is connecting to.
 * @member {String} channel
 */
GetNetworkEvents200ResponseEventsInnerEventData.prototype['channel'] = undefined;

/**
 * The client's IP address
 * @member {String} client_ip
 */
GetNetworkEvents200ResponseEventsInnerEventData.prototype['client_ip'] = undefined;

/**
 * The client's MAC address
 * @member {String} client_mac
 */
GetNetworkEvents200ResponseEventsInnerEventData.prototype['client_mac'] = undefined;

/**
 * The radio band number the client is trying to connect to.
 * @member {String} radio
 */
GetNetworkEvents200ResponseEventsInnerEventData.prototype['radio'] = undefined;

/**
 * The current received signal strength indication (RSSI) of the client connected to an AP.
 * @member {String} rssi
 */
GetNetworkEvents200ResponseEventsInnerEventData.prototype['rssi'] = undefined;

/**
 * The virtual access point (VAP) number the client is connecting to.
 * @member {String} vap
 */
GetNetworkEvents200ResponseEventsInnerEventData.prototype['vap'] = undefined;






export default GetNetworkEvents200ResponseEventsInnerEventData;

