/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GetDeviceSwitchPortsStatuses200ResponseInnerCdp from './GetDeviceSwitchPortsStatuses200ResponseInnerCdp';
import GetDeviceSwitchPortsStatuses200ResponseInnerLldp from './GetDeviceSwitchPortsStatuses200ResponseInnerLldp';
import GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort from './GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort';
import GetDeviceSwitchPortsStatuses200ResponseInnerTrafficInKbps from './GetDeviceSwitchPortsStatuses200ResponseInnerTrafficInKbps';
import GetDeviceSwitchPortsStatuses200ResponseInnerUsageInKb from './GetDeviceSwitchPortsStatuses200ResponseInnerUsageInKb';

/**
 * The GetDeviceSwitchPortsStatuses200ResponseInner model module.
 * @module model/GetDeviceSwitchPortsStatuses200ResponseInner
 * @version 1.32.0
 */
class GetDeviceSwitchPortsStatuses200ResponseInner {
    /**
     * Constructs a new <code>GetDeviceSwitchPortsStatuses200ResponseInner</code>.
     * @alias module:model/GetDeviceSwitchPortsStatuses200ResponseInner
     */
    constructor() { 
        
        GetDeviceSwitchPortsStatuses200ResponseInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GetDeviceSwitchPortsStatuses200ResponseInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetDeviceSwitchPortsStatuses200ResponseInner} obj Optional instance to populate.
     * @return {module:model/GetDeviceSwitchPortsStatuses200ResponseInner} The populated <code>GetDeviceSwitchPortsStatuses200ResponseInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetDeviceSwitchPortsStatuses200ResponseInner();

            if (data.hasOwnProperty('cdp')) {
                obj['cdp'] = GetDeviceSwitchPortsStatuses200ResponseInnerCdp.constructFromObject(data['cdp']);
            }
            if (data.hasOwnProperty('clientCount')) {
                obj['clientCount'] = ApiClient.convertToType(data['clientCount'], 'Number');
            }
            if (data.hasOwnProperty('duplex')) {
                obj['duplex'] = ApiClient.convertToType(data['duplex'], 'String');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], ['String']);
            }
            if (data.hasOwnProperty('isUplink')) {
                obj['isUplink'] = ApiClient.convertToType(data['isUplink'], 'Boolean');
            }
            if (data.hasOwnProperty('lldp')) {
                obj['lldp'] = GetDeviceSwitchPortsStatuses200ResponseInnerLldp.constructFromObject(data['lldp']);
            }
            if (data.hasOwnProperty('portId')) {
                obj['portId'] = ApiClient.convertToType(data['portId'], 'String');
            }
            if (data.hasOwnProperty('powerUsageInWh')) {
                obj['powerUsageInWh'] = ApiClient.convertToType(data['powerUsageInWh'], 'Number');
            }
            if (data.hasOwnProperty('securePort')) {
                obj['securePort'] = GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort.constructFromObject(data['securePort']);
            }
            if (data.hasOwnProperty('speed')) {
                obj['speed'] = ApiClient.convertToType(data['speed'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('trafficInKbps')) {
                obj['trafficInKbps'] = GetDeviceSwitchPortsStatuses200ResponseInnerTrafficInKbps.constructFromObject(data['trafficInKbps']);
            }
            if (data.hasOwnProperty('usageInKb')) {
                obj['usageInKb'] = GetDeviceSwitchPortsStatuses200ResponseInnerUsageInKb.constructFromObject(data['usageInKb']);
            }
            if (data.hasOwnProperty('warnings')) {
                obj['warnings'] = ApiClient.convertToType(data['warnings'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetDeviceSwitchPortsStatuses200ResponseInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetDeviceSwitchPortsStatuses200ResponseInner</code>.
     */
    static validateJSON(data) {
        // validate the optional field `cdp`
        if (data['cdp']) { // data not null
          GetDeviceSwitchPortsStatuses200ResponseInnerCdp.validateJSON(data['cdp']);
        }
        // ensure the json data is a string
        if (data['duplex'] && !(typeof data['duplex'] === 'string' || data['duplex'] instanceof String)) {
            throw new Error("Expected the field `duplex` to be a primitive type in the JSON string but got " + data['duplex']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['errors'])) {
            throw new Error("Expected the field `errors` to be an array in the JSON data but got " + data['errors']);
        }
        // validate the optional field `lldp`
        if (data['lldp']) { // data not null
          GetDeviceSwitchPortsStatuses200ResponseInnerLldp.validateJSON(data['lldp']);
        }
        // ensure the json data is a string
        if (data['portId'] && !(typeof data['portId'] === 'string' || data['portId'] instanceof String)) {
            throw new Error("Expected the field `portId` to be a primitive type in the JSON string but got " + data['portId']);
        }
        // validate the optional field `securePort`
        if (data['securePort']) { // data not null
          GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort.validateJSON(data['securePort']);
        }
        // ensure the json data is a string
        if (data['speed'] && !(typeof data['speed'] === 'string' || data['speed'] instanceof String)) {
            throw new Error("Expected the field `speed` to be a primitive type in the JSON string but got " + data['speed']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // validate the optional field `trafficInKbps`
        if (data['trafficInKbps']) { // data not null
          GetDeviceSwitchPortsStatuses200ResponseInnerTrafficInKbps.validateJSON(data['trafficInKbps']);
        }
        // validate the optional field `usageInKb`
        if (data['usageInKb']) { // data not null
          GetDeviceSwitchPortsStatuses200ResponseInnerUsageInKb.validateJSON(data['usageInKb']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['warnings'])) {
            throw new Error("Expected the field `warnings` to be an array in the JSON data but got " + data['warnings']);
        }

        return true;
    }


}



/**
 * @member {module:model/GetDeviceSwitchPortsStatuses200ResponseInnerCdp} cdp
 */
GetDeviceSwitchPortsStatuses200ResponseInner.prototype['cdp'] = undefined;

/**
 * The number of clients connected through this port.
 * @member {Number} clientCount
 */
GetDeviceSwitchPortsStatuses200ResponseInner.prototype['clientCount'] = undefined;

/**
 * The current duplex of a connected port.
 * @member {module:model/GetDeviceSwitchPortsStatuses200ResponseInner.DuplexEnum} duplex
 */
GetDeviceSwitchPortsStatuses200ResponseInner.prototype['duplex'] = undefined;

/**
 * Whether the port is configured to be enabled.
 * @member {Boolean} enabled
 */
GetDeviceSwitchPortsStatuses200ResponseInner.prototype['enabled'] = undefined;

/**
 * All errors present on the port.
 * @member {Array.<String>} errors
 */
GetDeviceSwitchPortsStatuses200ResponseInner.prototype['errors'] = undefined;

/**
 * Whether the port is the switch's uplink.
 * @member {Boolean} isUplink
 */
GetDeviceSwitchPortsStatuses200ResponseInner.prototype['isUplink'] = undefined;

/**
 * @member {module:model/GetDeviceSwitchPortsStatuses200ResponseInnerLldp} lldp
 */
GetDeviceSwitchPortsStatuses200ResponseInner.prototype['lldp'] = undefined;

/**
 * The string identifier of this port on the switch. This is commonly just the port number but may contain additional identifying information such as the slot and module-type if the port is located on a port module.
 * @member {String} portId
 */
GetDeviceSwitchPortsStatuses200ResponseInner.prototype['portId'] = undefined;

/**
 * How much power (in watt-hours) has been delivered by this port during the timespan.
 * @member {Number} powerUsageInWh
 */
GetDeviceSwitchPortsStatuses200ResponseInner.prototype['powerUsageInWh'] = undefined;

/**
 * @member {module:model/GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort} securePort
 */
GetDeviceSwitchPortsStatuses200ResponseInner.prototype['securePort'] = undefined;

/**
 * The current data transfer rate which the port is operating at.
 * @member {module:model/GetDeviceSwitchPortsStatuses200ResponseInner.SpeedEnum} speed
 */
GetDeviceSwitchPortsStatuses200ResponseInner.prototype['speed'] = undefined;

/**
 * The current connection status of the port.
 * @member {module:model/GetDeviceSwitchPortsStatuses200ResponseInner.StatusEnum} status
 */
GetDeviceSwitchPortsStatuses200ResponseInner.prototype['status'] = undefined;

/**
 * @member {module:model/GetDeviceSwitchPortsStatuses200ResponseInnerTrafficInKbps} trafficInKbps
 */
GetDeviceSwitchPortsStatuses200ResponseInner.prototype['trafficInKbps'] = undefined;

/**
 * @member {module:model/GetDeviceSwitchPortsStatuses200ResponseInnerUsageInKb} usageInKb
 */
GetDeviceSwitchPortsStatuses200ResponseInner.prototype['usageInKb'] = undefined;

/**
 * All warnings present on the port.
 * @member {Array.<String>} warnings
 */
GetDeviceSwitchPortsStatuses200ResponseInner.prototype['warnings'] = undefined;





/**
 * Allowed values for the <code>duplex</code> property.
 * @enum {String}
 * @readonly
 */
GetDeviceSwitchPortsStatuses200ResponseInner['DuplexEnum'] = {

    /**
     * value: ""
     * @const
     */
    "empty": "",

    /**
     * value: "full"
     * @const
     */
    "full": "full",

    /**
     * value: "half"
     * @const
     */
    "half": "half"
};


/**
 * Allowed values for the <code>speed</code> property.
 * @enum {String}
 * @readonly
 */
GetDeviceSwitchPortsStatuses200ResponseInner['SpeedEnum'] = {

    /**
     * value: ""
     * @const
     */
    "empty": "",

    /**
     * value: "1 Gbps"
     * @const
     */
    "1 Gbps": "1 Gbps",

    /**
     * value: "10 Gbps"
     * @const
     */
    "10 Gbps": "10 Gbps",

    /**
     * value: "10 Mbps"
     * @const
     */
    "10 Mbps": "10 Mbps",

    /**
     * value: "100 Gbps"
     * @const
     */
    "100 Gbps": "100 Gbps",

    /**
     * value: "100 Mbps"
     * @const
     */
    "100 Mbps": "100 Mbps",

    /**
     * value: "2.5 Gbps"
     * @const
     */
    "2.5 Gbps": "2.5 Gbps",

    /**
     * value: "20 Gbps"
     * @const
     */
    "20 Gbps": "20 Gbps",

    /**
     * value: "40 Gbps"
     * @const
     */
    "40 Gbps": "40 Gbps",

    /**
     * value: "5 Gbps"
     * @const
     */
    "5 Gbps": "5 Gbps"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
GetDeviceSwitchPortsStatuses200ResponseInner['StatusEnum'] = {

    /**
     * value: "Connected"
     * @const
     */
    "Connected": "Connected",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled",

    /**
     * value: "Disconnected"
     * @const
     */
    "Disconnected": "Disconnected"
};



export default GetDeviceSwitchPortsStatuses200ResponseInner;

