/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UpdateDeviceSwitchRoutingInterfaceDhcpRequestDhcpOptionsInner from './UpdateDeviceSwitchRoutingInterfaceDhcpRequestDhcpOptionsInner';
import UpdateDeviceSwitchRoutingInterfaceDhcpRequestFixedIpAssignmentsInner from './UpdateDeviceSwitchRoutingInterfaceDhcpRequestFixedIpAssignmentsInner';
import UpdateDeviceSwitchRoutingInterfaceDhcpRequestReservedIpRangesInner from './UpdateDeviceSwitchRoutingInterfaceDhcpRequestReservedIpRangesInner';

/**
 * The UpdateDeviceSwitchRoutingInterfaceDhcpRequest model module.
 * @module model/UpdateDeviceSwitchRoutingInterfaceDhcpRequest
 * @version 1.32.0
 */
class UpdateDeviceSwitchRoutingInterfaceDhcpRequest {
    /**
     * Constructs a new <code>UpdateDeviceSwitchRoutingInterfaceDhcpRequest</code>.
     * @alias module:model/UpdateDeviceSwitchRoutingInterfaceDhcpRequest
     */
    constructor() { 
        
        UpdateDeviceSwitchRoutingInterfaceDhcpRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateDeviceSwitchRoutingInterfaceDhcpRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateDeviceSwitchRoutingInterfaceDhcpRequest} obj Optional instance to populate.
     * @return {module:model/UpdateDeviceSwitchRoutingInterfaceDhcpRequest} The populated <code>UpdateDeviceSwitchRoutingInterfaceDhcpRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateDeviceSwitchRoutingInterfaceDhcpRequest();

            if (data.hasOwnProperty('bootFileName')) {
                obj['bootFileName'] = ApiClient.convertToType(data['bootFileName'], 'String');
            }
            if (data.hasOwnProperty('bootNextServer')) {
                obj['bootNextServer'] = ApiClient.convertToType(data['bootNextServer'], 'String');
            }
            if (data.hasOwnProperty('bootOptionsEnabled')) {
                obj['bootOptionsEnabled'] = ApiClient.convertToType(data['bootOptionsEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('dhcpLeaseTime')) {
                obj['dhcpLeaseTime'] = ApiClient.convertToType(data['dhcpLeaseTime'], 'String');
            }
            if (data.hasOwnProperty('dhcpMode')) {
                obj['dhcpMode'] = ApiClient.convertToType(data['dhcpMode'], 'String');
            }
            if (data.hasOwnProperty('dhcpOptions')) {
                obj['dhcpOptions'] = ApiClient.convertToType(data['dhcpOptions'], [UpdateDeviceSwitchRoutingInterfaceDhcpRequestDhcpOptionsInner]);
            }
            if (data.hasOwnProperty('dhcpRelayServerIps')) {
                obj['dhcpRelayServerIps'] = ApiClient.convertToType(data['dhcpRelayServerIps'], ['String']);
            }
            if (data.hasOwnProperty('dnsCustomNameservers')) {
                obj['dnsCustomNameservers'] = ApiClient.convertToType(data['dnsCustomNameservers'], ['String']);
            }
            if (data.hasOwnProperty('dnsNameserversOption')) {
                obj['dnsNameserversOption'] = ApiClient.convertToType(data['dnsNameserversOption'], 'String');
            }
            if (data.hasOwnProperty('fixedIpAssignments')) {
                obj['fixedIpAssignments'] = ApiClient.convertToType(data['fixedIpAssignments'], [UpdateDeviceSwitchRoutingInterfaceDhcpRequestFixedIpAssignmentsInner]);
            }
            if (data.hasOwnProperty('reservedIpRanges')) {
                obj['reservedIpRanges'] = ApiClient.convertToType(data['reservedIpRanges'], [UpdateDeviceSwitchRoutingInterfaceDhcpRequestReservedIpRangesInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateDeviceSwitchRoutingInterfaceDhcpRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateDeviceSwitchRoutingInterfaceDhcpRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['bootFileName'] && !(typeof data['bootFileName'] === 'string' || data['bootFileName'] instanceof String)) {
            throw new Error("Expected the field `bootFileName` to be a primitive type in the JSON string but got " + data['bootFileName']);
        }
        // ensure the json data is a string
        if (data['bootNextServer'] && !(typeof data['bootNextServer'] === 'string' || data['bootNextServer'] instanceof String)) {
            throw new Error("Expected the field `bootNextServer` to be a primitive type in the JSON string but got " + data['bootNextServer']);
        }
        // ensure the json data is a string
        if (data['dhcpLeaseTime'] && !(typeof data['dhcpLeaseTime'] === 'string' || data['dhcpLeaseTime'] instanceof String)) {
            throw new Error("Expected the field `dhcpLeaseTime` to be a primitive type in the JSON string but got " + data['dhcpLeaseTime']);
        }
        // ensure the json data is a string
        if (data['dhcpMode'] && !(typeof data['dhcpMode'] === 'string' || data['dhcpMode'] instanceof String)) {
            throw new Error("Expected the field `dhcpMode` to be a primitive type in the JSON string but got " + data['dhcpMode']);
        }
        if (data['dhcpOptions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dhcpOptions'])) {
                throw new Error("Expected the field `dhcpOptions` to be an array in the JSON data but got " + data['dhcpOptions']);
            }
            // validate the optional field `dhcpOptions` (array)
            for (const item of data['dhcpOptions']) {
                UpdateDeviceSwitchRoutingInterfaceDhcpRequestDhcpOptionsInner.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['dhcpRelayServerIps'])) {
            throw new Error("Expected the field `dhcpRelayServerIps` to be an array in the JSON data but got " + data['dhcpRelayServerIps']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['dnsCustomNameservers'])) {
            throw new Error("Expected the field `dnsCustomNameservers` to be an array in the JSON data but got " + data['dnsCustomNameservers']);
        }
        // ensure the json data is a string
        if (data['dnsNameserversOption'] && !(typeof data['dnsNameserversOption'] === 'string' || data['dnsNameserversOption'] instanceof String)) {
            throw new Error("Expected the field `dnsNameserversOption` to be a primitive type in the JSON string but got " + data['dnsNameserversOption']);
        }
        if (data['fixedIpAssignments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fixedIpAssignments'])) {
                throw new Error("Expected the field `fixedIpAssignments` to be an array in the JSON data but got " + data['fixedIpAssignments']);
            }
            // validate the optional field `fixedIpAssignments` (array)
            for (const item of data['fixedIpAssignments']) {
                UpdateDeviceSwitchRoutingInterfaceDhcpRequestFixedIpAssignmentsInner.validateJSON(item);
            };
        }
        if (data['reservedIpRanges']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['reservedIpRanges'])) {
                throw new Error("Expected the field `reservedIpRanges` to be an array in the JSON data but got " + data['reservedIpRanges']);
            }
            // validate the optional field `reservedIpRanges` (array)
            for (const item of data['reservedIpRanges']) {
                UpdateDeviceSwitchRoutingInterfaceDhcpRequestReservedIpRangesInner.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The PXE boot server filename for the DHCP server running on the switch interface
 * @member {String} bootFileName
 */
UpdateDeviceSwitchRoutingInterfaceDhcpRequest.prototype['bootFileName'] = undefined;

/**
 * The PXE boot server IP for the DHCP server running on the switch interface
 * @member {String} bootNextServer
 */
UpdateDeviceSwitchRoutingInterfaceDhcpRequest.prototype['bootNextServer'] = undefined;

/**
 * Enable DHCP boot options to provide PXE boot options configs for the dhcp server running on the switch interface
 * @member {Boolean} bootOptionsEnabled
 */
UpdateDeviceSwitchRoutingInterfaceDhcpRequest.prototype['bootOptionsEnabled'] = undefined;

/**
 * The DHCP lease time config for the dhcp server running on switch interface ('30 minutes', '1 hour', '4 hours', '12 hours', '1 day' or '1 week')
 * @member {module:model/UpdateDeviceSwitchRoutingInterfaceDhcpRequest.DhcpLeaseTimeEnum} dhcpLeaseTime
 */
UpdateDeviceSwitchRoutingInterfaceDhcpRequest.prototype['dhcpLeaseTime'] = undefined;

/**
 * The DHCP mode options for the switch interface ('dhcpDisabled', 'dhcpRelay' or 'dhcpServer')
 * @member {module:model/UpdateDeviceSwitchRoutingInterfaceDhcpRequest.DhcpModeEnum} dhcpMode
 */
UpdateDeviceSwitchRoutingInterfaceDhcpRequest.prototype['dhcpMode'] = undefined;

/**
 * Array of DHCP options consisting of code, type and value for the DHCP server running on the switch interface
 * @member {Array.<module:model/UpdateDeviceSwitchRoutingInterfaceDhcpRequestDhcpOptionsInner>} dhcpOptions
 */
UpdateDeviceSwitchRoutingInterfaceDhcpRequest.prototype['dhcpOptions'] = undefined;

/**
 * The DHCP relay server IPs to which DHCP packets would get relayed for the switch interface
 * @member {Array.<String>} dhcpRelayServerIps
 */
UpdateDeviceSwitchRoutingInterfaceDhcpRequest.prototype['dhcpRelayServerIps'] = undefined;

/**
 * The DHCP name server IPs when DHCP name server option is 'custom'
 * @member {Array.<String>} dnsCustomNameservers
 */
UpdateDeviceSwitchRoutingInterfaceDhcpRequest.prototype['dnsCustomNameservers'] = undefined;

/**
 * The DHCP name server option for the dhcp server running on the switch interface ('googlePublicDns', 'openDns' or 'custom')
 * @member {module:model/UpdateDeviceSwitchRoutingInterfaceDhcpRequest.DnsNameserversOptionEnum} dnsNameserversOption
 */
UpdateDeviceSwitchRoutingInterfaceDhcpRequest.prototype['dnsNameserversOption'] = undefined;

/**
 * Array of DHCP fixed IP assignments for the DHCP server running on the switch interface
 * @member {Array.<module:model/UpdateDeviceSwitchRoutingInterfaceDhcpRequestFixedIpAssignmentsInner>} fixedIpAssignments
 */
UpdateDeviceSwitchRoutingInterfaceDhcpRequest.prototype['fixedIpAssignments'] = undefined;

/**
 * Array of DHCP reserved IP assignments for the DHCP server running on the switch interface
 * @member {Array.<module:model/UpdateDeviceSwitchRoutingInterfaceDhcpRequestReservedIpRangesInner>} reservedIpRanges
 */
UpdateDeviceSwitchRoutingInterfaceDhcpRequest.prototype['reservedIpRanges'] = undefined;





/**
 * Allowed values for the <code>dhcpLeaseTime</code> property.
 * @enum {String}
 * @readonly
 */
UpdateDeviceSwitchRoutingInterfaceDhcpRequest['DhcpLeaseTimeEnum'] = {

    /**
     * value: "1 day"
     * @const
     */
    "1 day": "1 day",

    /**
     * value: "1 hour"
     * @const
     */
    "1 hour": "1 hour",

    /**
     * value: "1 week"
     * @const
     */
    "1 week": "1 week",

    /**
     * value: "12 hours"
     * @const
     */
    "12 hours": "12 hours",

    /**
     * value: "30 minutes"
     * @const
     */
    "30 minutes": "30 minutes",

    /**
     * value: "4 hours"
     * @const
     */
    "4 hours": "4 hours"
};


/**
 * Allowed values for the <code>dhcpMode</code> property.
 * @enum {String}
 * @readonly
 */
UpdateDeviceSwitchRoutingInterfaceDhcpRequest['DhcpModeEnum'] = {

    /**
     * value: "dhcpDisabled"
     * @const
     */
    "dhcpDisabled": "dhcpDisabled",

    /**
     * value: "dhcpRelay"
     * @const
     */
    "dhcpRelay": "dhcpRelay",

    /**
     * value: "dhcpServer"
     * @const
     */
    "dhcpServer": "dhcpServer"
};


/**
 * Allowed values for the <code>dnsNameserversOption</code> property.
 * @enum {String}
 * @readonly
 */
UpdateDeviceSwitchRoutingInterfaceDhcpRequest['DnsNameserversOptionEnum'] = {

    /**
     * value: "custom"
     * @const
     */
    "custom": "custom",

    /**
     * value: "googlePublicDns"
     * @const
     */
    "googlePublicDns": "googlePublicDns",

    /**
     * value: "openDns"
     * @const
     */
    "openDns": "openDns"
};



export default UpdateDeviceSwitchRoutingInterfaceDhcpRequest;

