/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GetNetworkClient200ResponseClientVpnConnectionsInner from './GetNetworkClient200ResponseClientVpnConnectionsInner';

/**
 * The GetNetworkClient200Response model module.
 * @module model/GetNetworkClient200Response
 * @version 1.32.0
 */
class GetNetworkClient200Response {
    /**
     * Constructs a new <code>GetNetworkClient200Response</code>.
     * @alias module:model/GetNetworkClient200Response
     */
    constructor() { 
        
        GetNetworkClient200Response.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GetNetworkClient200Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetNetworkClient200Response} obj Optional instance to populate.
     * @return {module:model/GetNetworkClient200Response} The populated <code>GetNetworkClient200Response</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetNetworkClient200Response();

            if (data.hasOwnProperty('cdp')) {
                obj['cdp'] = ApiClient.convertToType(data['cdp'], [['String']]);
            }
            if (data.hasOwnProperty('clientVpnConnections')) {
                obj['clientVpnConnections'] = ApiClient.convertToType(data['clientVpnConnections'], [GetNetworkClient200ResponseClientVpnConnectionsInner]);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('firstSeen')) {
                obj['firstSeen'] = ApiClient.convertToType(data['firstSeen'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('ip')) {
                obj['ip'] = ApiClient.convertToType(data['ip'], 'String');
            }
            if (data.hasOwnProperty('ip6')) {
                obj['ip6'] = ApiClient.convertToType(data['ip6'], 'String');
            }
            if (data.hasOwnProperty('lastSeen')) {
                obj['lastSeen'] = ApiClient.convertToType(data['lastSeen'], 'Number');
            }
            if (data.hasOwnProperty('lldp')) {
                obj['lldp'] = ApiClient.convertToType(data['lldp'], [['String']]);
            }
            if (data.hasOwnProperty('mac')) {
                obj['mac'] = ApiClient.convertToType(data['mac'], 'String');
            }
            if (data.hasOwnProperty('manufacturer')) {
                obj['manufacturer'] = ApiClient.convertToType(data['manufacturer'], 'String');
            }
            if (data.hasOwnProperty('os')) {
                obj['os'] = ApiClient.convertToType(data['os'], 'String');
            }
            if (data.hasOwnProperty('recentDeviceMac')) {
                obj['recentDeviceMac'] = ApiClient.convertToType(data['recentDeviceMac'], 'String');
            }
            if (data.hasOwnProperty('smInstalled')) {
                obj['smInstalled'] = ApiClient.convertToType(data['smInstalled'], 'Boolean');
            }
            if (data.hasOwnProperty('ssid')) {
                obj['ssid'] = ApiClient.convertToType(data['ssid'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('switchport')) {
                obj['switchport'] = ApiClient.convertToType(data['switchport'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = ApiClient.convertToType(data['user'], 'String');
            }
            if (data.hasOwnProperty('vlan')) {
                obj['vlan'] = ApiClient.convertToType(data['vlan'], 'String');
            }
            if (data.hasOwnProperty('wirelessCapabilities')) {
                obj['wirelessCapabilities'] = ApiClient.convertToType(data['wirelessCapabilities'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetNetworkClient200Response</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetNetworkClient200Response</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['cdp'])) {
            throw new Error("Expected the field `cdp` to be an array in the JSON data but got " + data['cdp']);
        }
        if (data['clientVpnConnections']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['clientVpnConnections'])) {
                throw new Error("Expected the field `clientVpnConnections` to be an array in the JSON data but got " + data['clientVpnConnections']);
            }
            // validate the optional field `clientVpnConnections` (array)
            for (const item of data['clientVpnConnections']) {
                GetNetworkClient200ResponseClientVpnConnectionsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['ip'] && !(typeof data['ip'] === 'string' || data['ip'] instanceof String)) {
            throw new Error("Expected the field `ip` to be a primitive type in the JSON string but got " + data['ip']);
        }
        // ensure the json data is a string
        if (data['ip6'] && !(typeof data['ip6'] === 'string' || data['ip6'] instanceof String)) {
            throw new Error("Expected the field `ip6` to be a primitive type in the JSON string but got " + data['ip6']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['lldp'])) {
            throw new Error("Expected the field `lldp` to be an array in the JSON data but got " + data['lldp']);
        }
        // ensure the json data is a string
        if (data['mac'] && !(typeof data['mac'] === 'string' || data['mac'] instanceof String)) {
            throw new Error("Expected the field `mac` to be a primitive type in the JSON string but got " + data['mac']);
        }
        // ensure the json data is a string
        if (data['manufacturer'] && !(typeof data['manufacturer'] === 'string' || data['manufacturer'] instanceof String)) {
            throw new Error("Expected the field `manufacturer` to be a primitive type in the JSON string but got " + data['manufacturer']);
        }
        // ensure the json data is a string
        if (data['os'] && !(typeof data['os'] === 'string' || data['os'] instanceof String)) {
            throw new Error("Expected the field `os` to be a primitive type in the JSON string but got " + data['os']);
        }
        // ensure the json data is a string
        if (data['recentDeviceMac'] && !(typeof data['recentDeviceMac'] === 'string' || data['recentDeviceMac'] instanceof String)) {
            throw new Error("Expected the field `recentDeviceMac` to be a primitive type in the JSON string but got " + data['recentDeviceMac']);
        }
        // ensure the json data is a string
        if (data['ssid'] && !(typeof data['ssid'] === 'string' || data['ssid'] instanceof String)) {
            throw new Error("Expected the field `ssid` to be a primitive type in the JSON string but got " + data['ssid']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['switchport'] && !(typeof data['switchport'] === 'string' || data['switchport'] instanceof String)) {
            throw new Error("Expected the field `switchport` to be a primitive type in the JSON string but got " + data['switchport']);
        }
        // ensure the json data is a string
        if (data['user'] && !(typeof data['user'] === 'string' || data['user'] instanceof String)) {
            throw new Error("Expected the field `user` to be a primitive type in the JSON string but got " + data['user']);
        }
        // ensure the json data is a string
        if (data['vlan'] && !(typeof data['vlan'] === 'string' || data['vlan'] instanceof String)) {
            throw new Error("Expected the field `vlan` to be a primitive type in the JSON string but got " + data['vlan']);
        }
        // ensure the json data is a string
        if (data['wirelessCapabilities'] && !(typeof data['wirelessCapabilities'] === 'string' || data['wirelessCapabilities'] instanceof String)) {
            throw new Error("Expected the field `wirelessCapabilities` to be a primitive type in the JSON string but got " + data['wirelessCapabilities']);
        }

        return true;
    }


}



/**
 * The Cisco discover protocol settings for the client
 * @member {Array.<Array.<String>>} cdp
 */
GetNetworkClient200Response.prototype['cdp'] = undefined;

/**
 * VPN connections associated with the client
 * @member {Array.<module:model/GetNetworkClient200ResponseClientVpnConnectionsInner>} clientVpnConnections
 */
GetNetworkClient200Response.prototype['clientVpnConnections'] = undefined;

/**
 * Short description of the client
 * @member {String} description
 */
GetNetworkClient200Response.prototype['description'] = undefined;

/**
 * Timestamp client was first seen in the network
 * @member {Number} firstSeen
 */
GetNetworkClient200Response.prototype['firstSeen'] = undefined;

/**
 * The ID of the client
 * @member {String} id
 */
GetNetworkClient200Response.prototype['id'] = undefined;

/**
 * The IP address of the client
 * @member {String} ip
 */
GetNetworkClient200Response.prototype['ip'] = undefined;

/**
 * The IPv6 address of the client
 * @member {String} ip6
 */
GetNetworkClient200Response.prototype['ip6'] = undefined;

/**
 * Timestamp client was last seen in the network
 * @member {Number} lastSeen
 */
GetNetworkClient200Response.prototype['lastSeen'] = undefined;

/**
 * The link layer discover protocol settings for the client
 * @member {Array.<Array.<String>>} lldp
 */
GetNetworkClient200Response.prototype['lldp'] = undefined;

/**
 * The MAC address of the client
 * @member {String} mac
 */
GetNetworkClient200Response.prototype['mac'] = undefined;

/**
 * Manufacturer of the client
 * @member {String} manufacturer
 */
GetNetworkClient200Response.prototype['manufacturer'] = undefined;

/**
 * The operating system of the client
 * @member {String} os
 */
GetNetworkClient200Response.prototype['os'] = undefined;

/**
 * The MAC address of the node that the device was last connected to
 * @member {String} recentDeviceMac
 */
GetNetworkClient200Response.prototype['recentDeviceMac'] = undefined;

/**
 * Status of SM for the client
 * @member {Boolean} smInstalled
 */
GetNetworkClient200Response.prototype['smInstalled'] = undefined;

/**
 * The name of the SSID that the client is connected to
 * @member {String} ssid
 */
GetNetworkClient200Response.prototype['ssid'] = undefined;

/**
 * The connection status of the client
 * @member {module:model/GetNetworkClient200Response.StatusEnum} status
 */
GetNetworkClient200Response.prototype['status'] = undefined;

/**
 * The switch port that the client is connected to
 * @member {String} switchport
 */
GetNetworkClient200Response.prototype['switchport'] = undefined;

/**
 * The username of the user of the client
 * @member {String} user
 */
GetNetworkClient200Response.prototype['user'] = undefined;

/**
 * The name of the VLAN that the client is connected to
 * @member {String} vlan
 */
GetNetworkClient200Response.prototype['vlan'] = undefined;

/**
 * Wireless capabilities of the client
 * @member {String} wirelessCapabilities
 */
GetNetworkClient200Response.prototype['wirelessCapabilities'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
GetNetworkClient200Response['StatusEnum'] = {

    /**
     * value: "Offline"
     * @const
     */
    "Offline": "Offline",

    /**
     * value: "Online"
     * @const
     */
    "Online": "Online"
};



export default GetNetworkClient200Response;

