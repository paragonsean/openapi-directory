/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateNetworkWirelessRfProfileRequestApBandSettings from './CreateNetworkWirelessRfProfileRequestApBandSettings';
import CreateNetworkWirelessRfProfileRequestFiveGhzSettings from './CreateNetworkWirelessRfProfileRequestFiveGhzSettings';
import CreateNetworkWirelessRfProfileRequestPerSsidSettings from './CreateNetworkWirelessRfProfileRequestPerSsidSettings';
import CreateNetworkWirelessRfProfileRequestTransmission from './CreateNetworkWirelessRfProfileRequestTransmission';
import CreateNetworkWirelessRfProfileRequestTwoFourGhzSettings from './CreateNetworkWirelessRfProfileRequestTwoFourGhzSettings';

/**
 * The CreateNetworkWirelessRfProfileRequest model module.
 * @module model/CreateNetworkWirelessRfProfileRequest
 * @version 1.32.0
 */
class CreateNetworkWirelessRfProfileRequest {
    /**
     * Constructs a new <code>CreateNetworkWirelessRfProfileRequest</code>.
     * @alias module:model/CreateNetworkWirelessRfProfileRequest
     * @param bandSelectionType {module:model/CreateNetworkWirelessRfProfileRequest.BandSelectionTypeEnum} Band selection can be set to either 'ssid' or 'ap'. This param is required on creation.
     * @param name {String} The name of the new profile. Must be unique. This param is required on creation.
     */
    constructor(bandSelectionType, name) { 
        
        CreateNetworkWirelessRfProfileRequest.initialize(this, bandSelectionType, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, bandSelectionType, name) { 
        obj['bandSelectionType'] = bandSelectionType;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>CreateNetworkWirelessRfProfileRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateNetworkWirelessRfProfileRequest} obj Optional instance to populate.
     * @return {module:model/CreateNetworkWirelessRfProfileRequest} The populated <code>CreateNetworkWirelessRfProfileRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateNetworkWirelessRfProfileRequest();

            if (data.hasOwnProperty('apBandSettings')) {
                obj['apBandSettings'] = CreateNetworkWirelessRfProfileRequestApBandSettings.constructFromObject(data['apBandSettings']);
            }
            if (data.hasOwnProperty('bandSelectionType')) {
                obj['bandSelectionType'] = ApiClient.convertToType(data['bandSelectionType'], 'String');
            }
            if (data.hasOwnProperty('clientBalancingEnabled')) {
                obj['clientBalancingEnabled'] = ApiClient.convertToType(data['clientBalancingEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('fiveGhzSettings')) {
                obj['fiveGhzSettings'] = CreateNetworkWirelessRfProfileRequestFiveGhzSettings.constructFromObject(data['fiveGhzSettings']);
            }
            if (data.hasOwnProperty('minBitrateType')) {
                obj['minBitrateType'] = ApiClient.convertToType(data['minBitrateType'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('perSsidSettings')) {
                obj['perSsidSettings'] = CreateNetworkWirelessRfProfileRequestPerSsidSettings.constructFromObject(data['perSsidSettings']);
            }
            if (data.hasOwnProperty('transmission')) {
                obj['transmission'] = CreateNetworkWirelessRfProfileRequestTransmission.constructFromObject(data['transmission']);
            }
            if (data.hasOwnProperty('twoFourGhzSettings')) {
                obj['twoFourGhzSettings'] = CreateNetworkWirelessRfProfileRequestTwoFourGhzSettings.constructFromObject(data['twoFourGhzSettings']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateNetworkWirelessRfProfileRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateNetworkWirelessRfProfileRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateNetworkWirelessRfProfileRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `apBandSettings`
        if (data['apBandSettings']) { // data not null
          CreateNetworkWirelessRfProfileRequestApBandSettings.validateJSON(data['apBandSettings']);
        }
        // ensure the json data is a string
        if (data['bandSelectionType'] && !(typeof data['bandSelectionType'] === 'string' || data['bandSelectionType'] instanceof String)) {
            throw new Error("Expected the field `bandSelectionType` to be a primitive type in the JSON string but got " + data['bandSelectionType']);
        }
        // validate the optional field `fiveGhzSettings`
        if (data['fiveGhzSettings']) { // data not null
          CreateNetworkWirelessRfProfileRequestFiveGhzSettings.validateJSON(data['fiveGhzSettings']);
        }
        // ensure the json data is a string
        if (data['minBitrateType'] && !(typeof data['minBitrateType'] === 'string' || data['minBitrateType'] instanceof String)) {
            throw new Error("Expected the field `minBitrateType` to be a primitive type in the JSON string but got " + data['minBitrateType']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `perSsidSettings`
        if (data['perSsidSettings']) { // data not null
          CreateNetworkWirelessRfProfileRequestPerSsidSettings.validateJSON(data['perSsidSettings']);
        }
        // validate the optional field `transmission`
        if (data['transmission']) { // data not null
          CreateNetworkWirelessRfProfileRequestTransmission.validateJSON(data['transmission']);
        }
        // validate the optional field `twoFourGhzSettings`
        if (data['twoFourGhzSettings']) { // data not null
          CreateNetworkWirelessRfProfileRequestTwoFourGhzSettings.validateJSON(data['twoFourGhzSettings']);
        }

        return true;
    }


}

CreateNetworkWirelessRfProfileRequest.RequiredProperties = ["bandSelectionType", "name"];

/**
 * @member {module:model/CreateNetworkWirelessRfProfileRequestApBandSettings} apBandSettings
 */
CreateNetworkWirelessRfProfileRequest.prototype['apBandSettings'] = undefined;

/**
 * Band selection can be set to either 'ssid' or 'ap'. This param is required on creation.
 * @member {module:model/CreateNetworkWirelessRfProfileRequest.BandSelectionTypeEnum} bandSelectionType
 */
CreateNetworkWirelessRfProfileRequest.prototype['bandSelectionType'] = undefined;

/**
 * Steers client to best available access point. Can be either true or false. Defaults to true.
 * @member {Boolean} clientBalancingEnabled
 */
CreateNetworkWirelessRfProfileRequest.prototype['clientBalancingEnabled'] = undefined;

/**
 * @member {module:model/CreateNetworkWirelessRfProfileRequestFiveGhzSettings} fiveGhzSettings
 */
CreateNetworkWirelessRfProfileRequest.prototype['fiveGhzSettings'] = undefined;

/**
 * Minimum bitrate can be set to either 'band' or 'ssid'. Defaults to band.
 * @member {module:model/CreateNetworkWirelessRfProfileRequest.MinBitrateTypeEnum} minBitrateType
 */
CreateNetworkWirelessRfProfileRequest.prototype['minBitrateType'] = undefined;

/**
 * The name of the new profile. Must be unique. This param is required on creation.
 * @member {String} name
 */
CreateNetworkWirelessRfProfileRequest.prototype['name'] = undefined;

/**
 * @member {module:model/CreateNetworkWirelessRfProfileRequestPerSsidSettings} perSsidSettings
 */
CreateNetworkWirelessRfProfileRequest.prototype['perSsidSettings'] = undefined;

/**
 * @member {module:model/CreateNetworkWirelessRfProfileRequestTransmission} transmission
 */
CreateNetworkWirelessRfProfileRequest.prototype['transmission'] = undefined;

/**
 * @member {module:model/CreateNetworkWirelessRfProfileRequestTwoFourGhzSettings} twoFourGhzSettings
 */
CreateNetworkWirelessRfProfileRequest.prototype['twoFourGhzSettings'] = undefined;





/**
 * Allowed values for the <code>bandSelectionType</code> property.
 * @enum {String}
 * @readonly
 */
CreateNetworkWirelessRfProfileRequest['BandSelectionTypeEnum'] = {

    /**
     * value: "ap"
     * @const
     */
    "ap": "ap",

    /**
     * value: "ssid"
     * @const
     */
    "ssid": "ssid"
};


/**
 * Allowed values for the <code>minBitrateType</code> property.
 * @enum {String}
 * @readonly
 */
CreateNetworkWirelessRfProfileRequest['MinBitrateTypeEnum'] = {

    /**
     * value: "band"
     * @const
     */
    "band": "band",

    /**
     * value: "ssid"
     * @const
     */
    "ssid": "ssid"
};



export default CreateNetworkWirelessRfProfileRequest;

