/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UpdateNetworkWirelessSsidHotspot20RequestMccMncsInner from './UpdateNetworkWirelessSsidHotspot20RequestMccMncsInner';
import UpdateNetworkWirelessSsidHotspot20RequestNaiRealmsInner from './UpdateNetworkWirelessSsidHotspot20RequestNaiRealmsInner';
import UpdateNetworkWirelessSsidHotspot20RequestOperator from './UpdateNetworkWirelessSsidHotspot20RequestOperator';
import UpdateNetworkWirelessSsidHotspot20RequestVenue from './UpdateNetworkWirelessSsidHotspot20RequestVenue';

/**
 * The UpdateNetworkWirelessSsidHotspot20Request model module.
 * @module model/UpdateNetworkWirelessSsidHotspot20Request
 * @version 1.32.0
 */
class UpdateNetworkWirelessSsidHotspot20Request {
    /**
     * Constructs a new <code>UpdateNetworkWirelessSsidHotspot20Request</code>.
     * @alias module:model/UpdateNetworkWirelessSsidHotspot20Request
     */
    constructor() { 
        
        UpdateNetworkWirelessSsidHotspot20Request.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateNetworkWirelessSsidHotspot20Request</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateNetworkWirelessSsidHotspot20Request} obj Optional instance to populate.
     * @return {module:model/UpdateNetworkWirelessSsidHotspot20Request} The populated <code>UpdateNetworkWirelessSsidHotspot20Request</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateNetworkWirelessSsidHotspot20Request();

            if (data.hasOwnProperty('domains')) {
                obj['domains'] = ApiClient.convertToType(data['domains'], ['String']);
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('mccMncs')) {
                obj['mccMncs'] = ApiClient.convertToType(data['mccMncs'], [UpdateNetworkWirelessSsidHotspot20RequestMccMncsInner]);
            }
            if (data.hasOwnProperty('naiRealms')) {
                obj['naiRealms'] = ApiClient.convertToType(data['naiRealms'], [UpdateNetworkWirelessSsidHotspot20RequestNaiRealmsInner]);
            }
            if (data.hasOwnProperty('networkAccessType')) {
                obj['networkAccessType'] = ApiClient.convertToType(data['networkAccessType'], 'String');
            }
            if (data.hasOwnProperty('operator')) {
                obj['operator'] = UpdateNetworkWirelessSsidHotspot20RequestOperator.constructFromObject(data['operator']);
            }
            if (data.hasOwnProperty('roamConsortOis')) {
                obj['roamConsortOis'] = ApiClient.convertToType(data['roamConsortOis'], ['String']);
            }
            if (data.hasOwnProperty('venue')) {
                obj['venue'] = UpdateNetworkWirelessSsidHotspot20RequestVenue.constructFromObject(data['venue']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateNetworkWirelessSsidHotspot20Request</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateNetworkWirelessSsidHotspot20Request</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['domains'])) {
            throw new Error("Expected the field `domains` to be an array in the JSON data but got " + data['domains']);
        }
        if (data['mccMncs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['mccMncs'])) {
                throw new Error("Expected the field `mccMncs` to be an array in the JSON data but got " + data['mccMncs']);
            }
            // validate the optional field `mccMncs` (array)
            for (const item of data['mccMncs']) {
                UpdateNetworkWirelessSsidHotspot20RequestMccMncsInner.validateJSON(item);
            };
        }
        if (data['naiRealms']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['naiRealms'])) {
                throw new Error("Expected the field `naiRealms` to be an array in the JSON data but got " + data['naiRealms']);
            }
            // validate the optional field `naiRealms` (array)
            for (const item of data['naiRealms']) {
                UpdateNetworkWirelessSsidHotspot20RequestNaiRealmsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['networkAccessType'] && !(typeof data['networkAccessType'] === 'string' || data['networkAccessType'] instanceof String)) {
            throw new Error("Expected the field `networkAccessType` to be a primitive type in the JSON string but got " + data['networkAccessType']);
        }
        // validate the optional field `operator`
        if (data['operator']) { // data not null
          UpdateNetworkWirelessSsidHotspot20RequestOperator.validateJSON(data['operator']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['roamConsortOis'])) {
            throw new Error("Expected the field `roamConsortOis` to be an array in the JSON data but got " + data['roamConsortOis']);
        }
        // validate the optional field `venue`
        if (data['venue']) { // data not null
          UpdateNetworkWirelessSsidHotspot20RequestVenue.validateJSON(data['venue']);
        }

        return true;
    }


}



/**
 * An array of domain names
 * @member {Array.<String>} domains
 */
UpdateNetworkWirelessSsidHotspot20Request.prototype['domains'] = undefined;

/**
 * Whether or not Hotspot 2.0 for this SSID is enabled
 * @member {Boolean} enabled
 */
UpdateNetworkWirelessSsidHotspot20Request.prototype['enabled'] = undefined;

/**
 * An array of MCC/MNC pairs
 * @member {Array.<module:model/UpdateNetworkWirelessSsidHotspot20RequestMccMncsInner>} mccMncs
 */
UpdateNetworkWirelessSsidHotspot20Request.prototype['mccMncs'] = undefined;

/**
 * An array of NAI realms
 * @member {Array.<module:model/UpdateNetworkWirelessSsidHotspot20RequestNaiRealmsInner>} naiRealms
 */
UpdateNetworkWirelessSsidHotspot20Request.prototype['naiRealms'] = undefined;

/**
 * The network type of this SSID ('Private network', 'Private network with guest access', 'Chargeable public network', 'Free public network', 'Personal device network', 'Emergency services only network', 'Test or experimental', 'Wildcard')
 * @member {module:model/UpdateNetworkWirelessSsidHotspot20Request.NetworkAccessTypeEnum} networkAccessType
 */
UpdateNetworkWirelessSsidHotspot20Request.prototype['networkAccessType'] = undefined;

/**
 * @member {module:model/UpdateNetworkWirelessSsidHotspot20RequestOperator} operator
 */
UpdateNetworkWirelessSsidHotspot20Request.prototype['operator'] = undefined;

/**
 * An array of roaming consortium OIs (hexadecimal number 3-5 octets in length)
 * @member {Array.<String>} roamConsortOis
 */
UpdateNetworkWirelessSsidHotspot20Request.prototype['roamConsortOis'] = undefined;

/**
 * @member {module:model/UpdateNetworkWirelessSsidHotspot20RequestVenue} venue
 */
UpdateNetworkWirelessSsidHotspot20Request.prototype['venue'] = undefined;





/**
 * Allowed values for the <code>networkAccessType</code> property.
 * @enum {String}
 * @readonly
 */
UpdateNetworkWirelessSsidHotspot20Request['NetworkAccessTypeEnum'] = {

    /**
     * value: "Chargeable public network"
     * @const
     */
    "Chargeable public network": "Chargeable public network",

    /**
     * value: "Emergency services only network"
     * @const
     */
    "Emergency services only network": "Emergency services only network",

    /**
     * value: "Free public network"
     * @const
     */
    "Free public network": "Free public network",

    /**
     * value: "Personal device network"
     * @const
     */
    "Personal device network": "Personal device network",

    /**
     * value: "Private network"
     * @const
     */
    "Private network": "Private network",

    /**
     * value: "Private network with guest access"
     * @const
     */
    "Private network with guest access": "Private network with guest access",

    /**
     * value: "Test or experimental"
     * @const
     */
    "Test or experimental": "Test or experimental",

    /**
     * value: "Wildcard"
     * @const
     */
    "Wildcard": "Wildcard"
};



export default UpdateNetworkWirelessSsidHotspot20Request;

