/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RenewOrganizationLicensesSeatsRequest model module.
 * @module model/RenewOrganizationLicensesSeatsRequest
 * @version 1.32.0
 */
class RenewOrganizationLicensesSeatsRequest {
    /**
     * Constructs a new <code>RenewOrganizationLicensesSeatsRequest</code>.
     * @alias module:model/RenewOrganizationLicensesSeatsRequest
     * @param licenseIdToRenew {String} The ID of the SM license to renew. This license must already be assigned to an SM network
     * @param unusedLicenseId {String} The SM license to use to renew the seats on 'licenseIdToRenew'. This license must have at least as many seats available as there are seats on 'licenseIdToRenew'
     */
    constructor(licenseIdToRenew, unusedLicenseId) { 
        
        RenewOrganizationLicensesSeatsRequest.initialize(this, licenseIdToRenew, unusedLicenseId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, licenseIdToRenew, unusedLicenseId) { 
        obj['licenseIdToRenew'] = licenseIdToRenew;
        obj['unusedLicenseId'] = unusedLicenseId;
    }

    /**
     * Constructs a <code>RenewOrganizationLicensesSeatsRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RenewOrganizationLicensesSeatsRequest} obj Optional instance to populate.
     * @return {module:model/RenewOrganizationLicensesSeatsRequest} The populated <code>RenewOrganizationLicensesSeatsRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RenewOrganizationLicensesSeatsRequest();

            if (data.hasOwnProperty('licenseIdToRenew')) {
                obj['licenseIdToRenew'] = ApiClient.convertToType(data['licenseIdToRenew'], 'String');
            }
            if (data.hasOwnProperty('unusedLicenseId')) {
                obj['unusedLicenseId'] = ApiClient.convertToType(data['unusedLicenseId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RenewOrganizationLicensesSeatsRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RenewOrganizationLicensesSeatsRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RenewOrganizationLicensesSeatsRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['licenseIdToRenew'] && !(typeof data['licenseIdToRenew'] === 'string' || data['licenseIdToRenew'] instanceof String)) {
            throw new Error("Expected the field `licenseIdToRenew` to be a primitive type in the JSON string but got " + data['licenseIdToRenew']);
        }
        // ensure the json data is a string
        if (data['unusedLicenseId'] && !(typeof data['unusedLicenseId'] === 'string' || data['unusedLicenseId'] instanceof String)) {
            throw new Error("Expected the field `unusedLicenseId` to be a primitive type in the JSON string but got " + data['unusedLicenseId']);
        }

        return true;
    }


}

RenewOrganizationLicensesSeatsRequest.RequiredProperties = ["licenseIdToRenew", "unusedLicenseId"];

/**
 * The ID of the SM license to renew. This license must already be assigned to an SM network
 * @member {String} licenseIdToRenew
 */
RenewOrganizationLicensesSeatsRequest.prototype['licenseIdToRenew'] = undefined;

/**
 * The SM license to use to renew the seats on 'licenseIdToRenew'. This license must have at least as many seats available as there are seats on 'licenseIdToRenew'
 * @member {String} unusedLicenseId
 */
RenewOrganizationLicensesSeatsRequest.prototype['unusedLicenseId'] = undefined;






export default RenewOrganizationLicensesSeatsRequest;

