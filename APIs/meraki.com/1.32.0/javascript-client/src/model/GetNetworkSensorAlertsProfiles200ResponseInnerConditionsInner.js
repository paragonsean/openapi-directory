/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThreshold from './GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThreshold';

/**
 * The GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner model module.
 * @module model/GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner
 * @version 1.32.0
 */
class GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner {
    /**
     * Constructs a new <code>GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner</code>.
     * @alias module:model/GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner
     * @param metric {String} The type of sensor metric that will be monitored for changes. Available metrics are door, humidity, indoorAirQuality, noise, pm25, temperature, tvoc, and water.
     * @param threshold {module:model/GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThreshold} 
     */
    constructor(metric, threshold) { 
        
        GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner.initialize(this, metric, threshold);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, metric, threshold) { 
        obj['duration'] = DurationEnum.0;
        obj['metric'] = metric;
        obj['threshold'] = threshold;
    }

    /**
     * Constructs a <code>GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner} obj Optional instance to populate.
     * @return {module:model/GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner} The populated <code>GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner();

            if (data.hasOwnProperty('direction')) {
                obj['direction'] = ApiClient.convertToType(data['direction'], 'String');
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'Number');
            }
            if (data.hasOwnProperty('metric')) {
                obj['metric'] = ApiClient.convertToType(data['metric'], 'String');
            }
            if (data.hasOwnProperty('threshold')) {
                obj['threshold'] = GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThreshold.constructFromObject(data['threshold']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['direction'] && !(typeof data['direction'] === 'string' || data['direction'] instanceof String)) {
            throw new Error("Expected the field `direction` to be a primitive type in the JSON string but got " + data['direction']);
        }
        // ensure the json data is a string
        if (data['metric'] && !(typeof data['metric'] === 'string' || data['metric'] instanceof String)) {
            throw new Error("Expected the field `metric` to be a primitive type in the JSON string but got " + data['metric']);
        }
        // validate the optional field `threshold`
        if (data['threshold']) { // data not null
          GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThreshold.validateJSON(data['threshold']);
        }

        return true;
    }


}

GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner.RequiredProperties = ["metric", "threshold"];

/**
 * If 'above', an alert will be sent when a sensor reads above the threshold. If 'below', an alert will be sent when a sensor reads below the threshold. Only applicable for temperature and humidity thresholds.
 * @member {module:model/GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner.DirectionEnum} direction
 */
GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner.prototype['direction'] = undefined;

/**
 * Length of time in seconds that the triggering state must persist before an alert is sent. Available options are 0 seconds, 1 minute, 2 minutes, 3 minutes, 4 minutes, 5 minutes, 10 minutes, 15 minutes, 30 minutes, and 1 hour. Default is 0.
 * @member {module:model/GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner.DurationEnum} duration
 * @default DurationEnum.0
 */
GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner.prototype['duration'] = DurationEnum.0;

/**
 * The type of sensor metric that will be monitored for changes. Available metrics are door, humidity, indoorAirQuality, noise, pm25, temperature, tvoc, and water.
 * @member {String} metric
 */
GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner.prototype['metric'] = undefined;

/**
 * @member {module:model/GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThreshold} threshold
 */
GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner.prototype['threshold'] = undefined;





/**
 * Allowed values for the <code>direction</code> property.
 * @enum {String}
 * @readonly
 */
GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner['DirectionEnum'] = {

    /**
     * value: "above"
     * @const
     */
    "above": "above",

    /**
     * value: "below"
     * @const
     */
    "below": "below"
};


/**
 * Allowed values for the <code>duration</code> property.
 * @enum {Number}
 * @readonly
 */
GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner['DurationEnum'] = {

    /**
     * value: 0
     * @const
     */
    "0": 0,

    /**
     * value: 60
     * @const
     */
    "60": 60,

    /**
     * value: 120
     * @const
     */
    "120": 120,

    /**
     * value: 180
     * @const
     */
    "180": 180,

    /**
     * value: 240
     * @const
     */
    "240": 240,

    /**
     * value: 300
     * @const
     */
    "300": 300,

    /**
     * value: 600
     * @const
     */
    "600": 600,

    /**
     * value: 900
     * @const
     */
    "900": 900,

    /**
     * value: 1800
     * @const
     */
    "1800": 1800,

    /**
     * value: 3600
     * @const
     */
    "3600": 3600
};



export default GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner;

