/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GetOrganizationLicensingCotermLicenses200ResponseInnerCountsInner from './GetOrganizationLicensingCotermLicenses200ResponseInnerCountsInner';
import GetOrganizationLicensingCotermLicenses200ResponseInnerEditionsInner from './GetOrganizationLicensingCotermLicenses200ResponseInnerEditionsInner';

/**
 * The GetOrganizationLicensingCotermLicenses200ResponseInner model module.
 * @module model/GetOrganizationLicensingCotermLicenses200ResponseInner
 * @version 1.32.0
 */
class GetOrganizationLicensingCotermLicenses200ResponseInner {
    /**
     * Constructs a new <code>GetOrganizationLicensingCotermLicenses200ResponseInner</code>.
     * @alias module:model/GetOrganizationLicensingCotermLicenses200ResponseInner
     */
    constructor() { 
        
        GetOrganizationLicensingCotermLicenses200ResponseInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GetOrganizationLicensingCotermLicenses200ResponseInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetOrganizationLicensingCotermLicenses200ResponseInner} obj Optional instance to populate.
     * @return {module:model/GetOrganizationLicensingCotermLicenses200ResponseInner} The populated <code>GetOrganizationLicensingCotermLicenses200ResponseInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetOrganizationLicensingCotermLicenses200ResponseInner();

            if (data.hasOwnProperty('claimedAt')) {
                obj['claimedAt'] = ApiClient.convertToType(data['claimedAt'], 'Date');
            }
            if (data.hasOwnProperty('counts')) {
                obj['counts'] = ApiClient.convertToType(data['counts'], [GetOrganizationLicensingCotermLicenses200ResponseInnerCountsInner]);
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'Number');
            }
            if (data.hasOwnProperty('editions')) {
                obj['editions'] = ApiClient.convertToType(data['editions'], [GetOrganizationLicensingCotermLicenses200ResponseInnerEditionsInner]);
            }
            if (data.hasOwnProperty('expired')) {
                obj['expired'] = ApiClient.convertToType(data['expired'], 'Boolean');
            }
            if (data.hasOwnProperty('invalidated')) {
                obj['invalidated'] = ApiClient.convertToType(data['invalidated'], 'Boolean');
            }
            if (data.hasOwnProperty('invalidatedAt')) {
                obj['invalidatedAt'] = ApiClient.convertToType(data['invalidatedAt'], 'Date');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('mode')) {
                obj['mode'] = ApiClient.convertToType(data['mode'], 'String');
            }
            if (data.hasOwnProperty('organizationId')) {
                obj['organizationId'] = ApiClient.convertToType(data['organizationId'], 'String');
            }
            if (data.hasOwnProperty('startedAt')) {
                obj['startedAt'] = ApiClient.convertToType(data['startedAt'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetOrganizationLicensingCotermLicenses200ResponseInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetOrganizationLicensingCotermLicenses200ResponseInner</code>.
     */
    static validateJSON(data) {
        if (data['counts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['counts'])) {
                throw new Error("Expected the field `counts` to be an array in the JSON data but got " + data['counts']);
            }
            // validate the optional field `counts` (array)
            for (const item of data['counts']) {
                GetOrganizationLicensingCotermLicenses200ResponseInnerCountsInner.validateJSON(item);
            };
        }
        if (data['editions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['editions'])) {
                throw new Error("Expected the field `editions` to be an array in the JSON data but got " + data['editions']);
            }
            // validate the optional field `editions` (array)
            for (const item of data['editions']) {
                GetOrganizationLicensingCotermLicenses200ResponseInnerEditionsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // ensure the json data is a string
        if (data['mode'] && !(typeof data['mode'] === 'string' || data['mode'] instanceof String)) {
            throw new Error("Expected the field `mode` to be a primitive type in the JSON string but got " + data['mode']);
        }
        // ensure the json data is a string
        if (data['organizationId'] && !(typeof data['organizationId'] === 'string' || data['organizationId'] instanceof String)) {
            throw new Error("Expected the field `organizationId` to be a primitive type in the JSON string but got " + data['organizationId']);
        }

        return true;
    }


}



/**
 * When the license was claimed into the organization
 * @member {Date} claimedAt
 */
GetOrganizationLicensingCotermLicenses200ResponseInner.prototype['claimedAt'] = undefined;

/**
 * The counts of the license by model type
 * @member {Array.<module:model/GetOrganizationLicensingCotermLicenses200ResponseInnerCountsInner>} counts
 */
GetOrganizationLicensingCotermLicenses200ResponseInner.prototype['counts'] = undefined;

/**
 * The duration (term length) of the license, measured in days
 * @member {Number} duration
 */
GetOrganizationLicensingCotermLicenses200ResponseInner.prototype['duration'] = undefined;

/**
 * The editions of the license for each relevant product type
 * @member {Array.<module:model/GetOrganizationLicensingCotermLicenses200ResponseInnerEditionsInner>} editions
 */
GetOrganizationLicensingCotermLicenses200ResponseInner.prototype['editions'] = undefined;

/**
 * Flag to indicate if the license is expired
 * @member {Boolean} expired
 */
GetOrganizationLicensingCotermLicenses200ResponseInner.prototype['expired'] = undefined;

/**
 * Flag to indicated that the license is invalidated
 * @member {Boolean} invalidated
 */
GetOrganizationLicensingCotermLicenses200ResponseInner.prototype['invalidated'] = undefined;

/**
 * When the license was invalidated. Will be null for active licenses
 * @member {Date} invalidatedAt
 */
GetOrganizationLicensingCotermLicenses200ResponseInner.prototype['invalidatedAt'] = undefined;

/**
 * The key of the license
 * @member {String} key
 */
GetOrganizationLicensingCotermLicenses200ResponseInner.prototype['key'] = undefined;

/**
 * The operation mode of the license when it was claimed
 * @member {module:model/GetOrganizationLicensingCotermLicenses200ResponseInner.ModeEnum} mode
 */
GetOrganizationLicensingCotermLicenses200ResponseInner.prototype['mode'] = undefined;

/**
 * The ID of the organization that the license is claimed in
 * @member {String} organizationId
 */
GetOrganizationLicensingCotermLicenses200ResponseInner.prototype['organizationId'] = undefined;

/**
 * When the license's term began (approximately the date when the license was created)
 * @member {Date} startedAt
 */
GetOrganizationLicensingCotermLicenses200ResponseInner.prototype['startedAt'] = undefined;





/**
 * Allowed values for the <code>mode</code> property.
 * @enum {String}
 * @readonly
 */
GetOrganizationLicensingCotermLicenses200ResponseInner['ModeEnum'] = {

    /**
     * value: "addDevices"
     * @const
     */
    "addDevices": "addDevices",

    /**
     * value: "renew"
     * @const
     */
    "renew": "renew"
};



export default GetOrganizationLicensingCotermLicenses200ResponseInner;

