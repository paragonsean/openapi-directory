/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MoveNetworkSmDevicesRequest model module.
 * @module model/MoveNetworkSmDevicesRequest
 * @version 1.32.0
 */
class MoveNetworkSmDevicesRequest {
    /**
     * Constructs a new <code>MoveNetworkSmDevicesRequest</code>.
     * @alias module:model/MoveNetworkSmDevicesRequest
     * @param newNetwork {String} The new network to which the devices will be moved.
     */
    constructor(newNetwork) { 
        
        MoveNetworkSmDevicesRequest.initialize(this, newNetwork);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, newNetwork) { 
        obj['newNetwork'] = newNetwork;
    }

    /**
     * Constructs a <code>MoveNetworkSmDevicesRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MoveNetworkSmDevicesRequest} obj Optional instance to populate.
     * @return {module:model/MoveNetworkSmDevicesRequest} The populated <code>MoveNetworkSmDevicesRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MoveNetworkSmDevicesRequest();

            if (data.hasOwnProperty('ids')) {
                obj['ids'] = ApiClient.convertToType(data['ids'], ['String']);
            }
            if (data.hasOwnProperty('newNetwork')) {
                obj['newNetwork'] = ApiClient.convertToType(data['newNetwork'], 'String');
            }
            if (data.hasOwnProperty('scope')) {
                obj['scope'] = ApiClient.convertToType(data['scope'], ['String']);
            }
            if (data.hasOwnProperty('serials')) {
                obj['serials'] = ApiClient.convertToType(data['serials'], ['String']);
            }
            if (data.hasOwnProperty('wifiMacs')) {
                obj['wifiMacs'] = ApiClient.convertToType(data['wifiMacs'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MoveNetworkSmDevicesRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MoveNetworkSmDevicesRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MoveNetworkSmDevicesRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ids'])) {
            throw new Error("Expected the field `ids` to be an array in the JSON data but got " + data['ids']);
        }
        // ensure the json data is a string
        if (data['newNetwork'] && !(typeof data['newNetwork'] === 'string' || data['newNetwork'] instanceof String)) {
            throw new Error("Expected the field `newNetwork` to be a primitive type in the JSON string but got " + data['newNetwork']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['scope'])) {
            throw new Error("Expected the field `scope` to be an array in the JSON data but got " + data['scope']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['serials'])) {
            throw new Error("Expected the field `serials` to be an array in the JSON data but got " + data['serials']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['wifiMacs'])) {
            throw new Error("Expected the field `wifiMacs` to be an array in the JSON data but got " + data['wifiMacs']);
        }

        return true;
    }


}

MoveNetworkSmDevicesRequest.RequiredProperties = ["newNetwork"];

/**
 * The ids of the devices to be moved.
 * @member {Array.<String>} ids
 */
MoveNetworkSmDevicesRequest.prototype['ids'] = undefined;

/**
 * The new network to which the devices will be moved.
 * @member {String} newNetwork
 */
MoveNetworkSmDevicesRequest.prototype['newNetwork'] = undefined;

/**
 * The scope (one of all, none, withAny, withAll, withoutAny, or withoutAll) and a set of tags of the devices to be moved.
 * @member {Array.<String>} scope
 */
MoveNetworkSmDevicesRequest.prototype['scope'] = undefined;

/**
 * The serials of the devices to be moved.
 * @member {Array.<String>} serials
 */
MoveNetworkSmDevicesRequest.prototype['serials'] = undefined;

/**
 * The wifiMacs of the devices to be moved.
 * @member {Array.<String>} wifiMacs
 */
MoveNetworkSmDevicesRequest.prototype['wifiMacs'] = undefined;






export default MoveNetworkSmDevicesRequest;

