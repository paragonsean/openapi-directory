/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GetNetworkSmDeviceCerts200ResponseInner model module.
 * @module model/GetNetworkSmDeviceCerts200ResponseInner
 * @version 1.32.0
 */
class GetNetworkSmDeviceCerts200ResponseInner {
    /**
     * Constructs a new <code>GetNetworkSmDeviceCerts200ResponseInner</code>.
     * @alias module:model/GetNetworkSmDeviceCerts200ResponseInner
     */
    constructor() { 
        
        GetNetworkSmDeviceCerts200ResponseInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GetNetworkSmDeviceCerts200ResponseInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetNetworkSmDeviceCerts200ResponseInner} obj Optional instance to populate.
     * @return {module:model/GetNetworkSmDeviceCerts200ResponseInner} The populated <code>GetNetworkSmDeviceCerts200ResponseInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetNetworkSmDeviceCerts200ResponseInner();

            if (data.hasOwnProperty('certPem')) {
                obj['certPem'] = ApiClient.convertToType(data['certPem'], 'String');
            }
            if (data.hasOwnProperty('deviceId')) {
                obj['deviceId'] = ApiClient.convertToType(data['deviceId'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('issuer')) {
                obj['issuer'] = ApiClient.convertToType(data['issuer'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('notValidAfter')) {
                obj['notValidAfter'] = ApiClient.convertToType(data['notValidAfter'], 'String');
            }
            if (data.hasOwnProperty('notValidBefore')) {
                obj['notValidBefore'] = ApiClient.convertToType(data['notValidBefore'], 'String');
            }
            if (data.hasOwnProperty('subject')) {
                obj['subject'] = ApiClient.convertToType(data['subject'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetNetworkSmDeviceCerts200ResponseInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetNetworkSmDeviceCerts200ResponseInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['certPem'] && !(typeof data['certPem'] === 'string' || data['certPem'] instanceof String)) {
            throw new Error("Expected the field `certPem` to be a primitive type in the JSON string but got " + data['certPem']);
        }
        // ensure the json data is a string
        if (data['deviceId'] && !(typeof data['deviceId'] === 'string' || data['deviceId'] instanceof String)) {
            throw new Error("Expected the field `deviceId` to be a primitive type in the JSON string but got " + data['deviceId']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['issuer'] && !(typeof data['issuer'] === 'string' || data['issuer'] instanceof String)) {
            throw new Error("Expected the field `issuer` to be a primitive type in the JSON string but got " + data['issuer']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['notValidAfter'] && !(typeof data['notValidAfter'] === 'string' || data['notValidAfter'] instanceof String)) {
            throw new Error("Expected the field `notValidAfter` to be a primitive type in the JSON string but got " + data['notValidAfter']);
        }
        // ensure the json data is a string
        if (data['notValidBefore'] && !(typeof data['notValidBefore'] === 'string' || data['notValidBefore'] instanceof String)) {
            throw new Error("Expected the field `notValidBefore` to be a primitive type in the JSON string but got " + data['notValidBefore']);
        }
        // ensure the json data is a string
        if (data['subject'] && !(typeof data['subject'] === 'string' || data['subject'] instanceof String)) {
            throw new Error("Expected the field `subject` to be a primitive type in the JSON string but got " + data['subject']);
        }

        return true;
    }


}



/**
 * The PEM of the certificate.
 * @member {String} certPem
 */
GetNetworkSmDeviceCerts200ResponseInner.prototype['certPem'] = undefined;

/**
 * The Meraki managed device Id.
 * @member {String} deviceId
 */
GetNetworkSmDeviceCerts200ResponseInner.prototype['deviceId'] = undefined;

/**
 * The Meraki Id of the certificate record.
 * @member {String} id
 */
GetNetworkSmDeviceCerts200ResponseInner.prototype['id'] = undefined;

/**
 * The certificate issuer.
 * @member {String} issuer
 */
GetNetworkSmDeviceCerts200ResponseInner.prototype['issuer'] = undefined;

/**
 * The name of the certificate.
 * @member {String} name
 */
GetNetworkSmDeviceCerts200ResponseInner.prototype['name'] = undefined;

/**
 * The date after which the certificate is no longer valid.
 * @member {String} notValidAfter
 */
GetNetworkSmDeviceCerts200ResponseInner.prototype['notValidAfter'] = undefined;

/**
 * The date before which the certificate is not valid.
 * @member {String} notValidBefore
 */
GetNetworkSmDeviceCerts200ResponseInner.prototype['notValidBefore'] = undefined;

/**
 * The subject of the certificate.
 * @member {String} subject
 */
GetNetworkSmDeviceCerts200ResponseInner.prototype['subject'] = undefined;






export default GetNetworkSmDeviceCerts200ResponseInner;

