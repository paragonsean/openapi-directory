/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestRulesInner model module.
 * @module model/UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestRulesInner
 * @version 1.32.0
 */
class UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestRulesInner {
    /**
     * Constructs a new <code>UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestRulesInner</code>.
     * @alias module:model/UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestRulesInner
     * @param destCidr {String} Comma-separated list of destination IP address(es) (in IP or CIDR notation), fully-qualified domain names (FQDN) or 'any'
     * @param policy {module:model/UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestRulesInner.PolicyEnum} 'allow' or 'deny' traffic specified by this rule
     * @param protocol {module:model/UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestRulesInner.ProtocolEnum} The type of protocol (must be 'tcp', 'udp', 'icmp', 'icmp6' or 'any')
     */
    constructor(destCidr, policy, protocol) { 
        
        UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestRulesInner.initialize(this, destCidr, policy, protocol);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, destCidr, policy, protocol) { 
        obj['destCidr'] = destCidr;
        obj['policy'] = policy;
        obj['protocol'] = protocol;
    }

    /**
     * Constructs a <code>UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestRulesInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestRulesInner} obj Optional instance to populate.
     * @return {module:model/UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestRulesInner} The populated <code>UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestRulesInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestRulesInner();

            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
            if (data.hasOwnProperty('destCidr')) {
                obj['destCidr'] = ApiClient.convertToType(data['destCidr'], 'String');
            }
            if (data.hasOwnProperty('destPort')) {
                obj['destPort'] = ApiClient.convertToType(data['destPort'], 'String');
            }
            if (data.hasOwnProperty('policy')) {
                obj['policy'] = ApiClient.convertToType(data['policy'], 'String');
            }
            if (data.hasOwnProperty('protocol')) {
                obj['protocol'] = ApiClient.convertToType(data['protocol'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestRulesInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestRulesInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestRulesInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['comment'] && !(typeof data['comment'] === 'string' || data['comment'] instanceof String)) {
            throw new Error("Expected the field `comment` to be a primitive type in the JSON string but got " + data['comment']);
        }
        // ensure the json data is a string
        if (data['destCidr'] && !(typeof data['destCidr'] === 'string' || data['destCidr'] instanceof String)) {
            throw new Error("Expected the field `destCidr` to be a primitive type in the JSON string but got " + data['destCidr']);
        }
        // ensure the json data is a string
        if (data['destPort'] && !(typeof data['destPort'] === 'string' || data['destPort'] instanceof String)) {
            throw new Error("Expected the field `destPort` to be a primitive type in the JSON string but got " + data['destPort']);
        }
        // ensure the json data is a string
        if (data['policy'] && !(typeof data['policy'] === 'string' || data['policy'] instanceof String)) {
            throw new Error("Expected the field `policy` to be a primitive type in the JSON string but got " + data['policy']);
        }
        // ensure the json data is a string
        if (data['protocol'] && !(typeof data['protocol'] === 'string' || data['protocol'] instanceof String)) {
            throw new Error("Expected the field `protocol` to be a primitive type in the JSON string but got " + data['protocol']);
        }

        return true;
    }


}

UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestRulesInner.RequiredProperties = ["destCidr", "policy", "protocol"];

/**
 * Description of the rule (optional)
 * @member {String} comment
 */
UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestRulesInner.prototype['comment'] = undefined;

/**
 * Comma-separated list of destination IP address(es) (in IP or CIDR notation), fully-qualified domain names (FQDN) or 'any'
 * @member {String} destCidr
 */
UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestRulesInner.prototype['destCidr'] = undefined;

/**
 * Comma-separated list of destination port(s) (integer in the range 1-65535), or 'any'
 * @member {String} destPort
 */
UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestRulesInner.prototype['destPort'] = undefined;

/**
 * 'allow' or 'deny' traffic specified by this rule
 * @member {module:model/UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestRulesInner.PolicyEnum} policy
 */
UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestRulesInner.prototype['policy'] = undefined;

/**
 * The type of protocol (must be 'tcp', 'udp', 'icmp', 'icmp6' or 'any')
 * @member {module:model/UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestRulesInner.ProtocolEnum} protocol
 */
UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestRulesInner.prototype['protocol'] = undefined;





/**
 * Allowed values for the <code>policy</code> property.
 * @enum {String}
 * @readonly
 */
UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestRulesInner['PolicyEnum'] = {

    /**
     * value: "allow"
     * @const
     */
    "allow": "allow",

    /**
     * value: "deny"
     * @const
     */
    "deny": "deny"
};


/**
 * Allowed values for the <code>protocol</code> property.
 * @enum {String}
 * @readonly
 */
UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestRulesInner['ProtocolEnum'] = {

    /**
     * value: "any"
     * @const
     */
    "any": "any",

    /**
     * value: "icmp"
     * @const
     */
    "icmp": "icmp",

    /**
     * value: "icmp6"
     * @const
     */
    "icmp6": "icmp6",

    /**
     * value: "tcp"
     * @const
     */
    "tcp": "tcp",

    /**
     * value: "udp"
     * @const
     */
    "udp": "udp"
};



export default UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestRulesInner;

