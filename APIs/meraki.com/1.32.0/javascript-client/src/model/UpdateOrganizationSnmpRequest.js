/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UpdateOrganizationSnmpRequest model module.
 * @module model/UpdateOrganizationSnmpRequest
 * @version 1.32.0
 */
class UpdateOrganizationSnmpRequest {
    /**
     * Constructs a new <code>UpdateOrganizationSnmpRequest</code>.
     * @alias module:model/UpdateOrganizationSnmpRequest
     */
    constructor() { 
        
        UpdateOrganizationSnmpRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateOrganizationSnmpRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateOrganizationSnmpRequest} obj Optional instance to populate.
     * @return {module:model/UpdateOrganizationSnmpRequest} The populated <code>UpdateOrganizationSnmpRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateOrganizationSnmpRequest();

            if (data.hasOwnProperty('peerIps')) {
                obj['peerIps'] = ApiClient.convertToType(data['peerIps'], ['String']);
            }
            if (data.hasOwnProperty('v2cEnabled')) {
                obj['v2cEnabled'] = ApiClient.convertToType(data['v2cEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('v3AuthMode')) {
                obj['v3AuthMode'] = ApiClient.convertToType(data['v3AuthMode'], 'String');
            }
            if (data.hasOwnProperty('v3AuthPass')) {
                obj['v3AuthPass'] = ApiClient.convertToType(data['v3AuthPass'], 'String');
            }
            if (data.hasOwnProperty('v3Enabled')) {
                obj['v3Enabled'] = ApiClient.convertToType(data['v3Enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('v3PrivMode')) {
                obj['v3PrivMode'] = ApiClient.convertToType(data['v3PrivMode'], 'String');
            }
            if (data.hasOwnProperty('v3PrivPass')) {
                obj['v3PrivPass'] = ApiClient.convertToType(data['v3PrivPass'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateOrganizationSnmpRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateOrganizationSnmpRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['peerIps'])) {
            throw new Error("Expected the field `peerIps` to be an array in the JSON data but got " + data['peerIps']);
        }
        // ensure the json data is a string
        if (data['v3AuthMode'] && !(typeof data['v3AuthMode'] === 'string' || data['v3AuthMode'] instanceof String)) {
            throw new Error("Expected the field `v3AuthMode` to be a primitive type in the JSON string but got " + data['v3AuthMode']);
        }
        // ensure the json data is a string
        if (data['v3AuthPass'] && !(typeof data['v3AuthPass'] === 'string' || data['v3AuthPass'] instanceof String)) {
            throw new Error("Expected the field `v3AuthPass` to be a primitive type in the JSON string but got " + data['v3AuthPass']);
        }
        // ensure the json data is a string
        if (data['v3PrivMode'] && !(typeof data['v3PrivMode'] === 'string' || data['v3PrivMode'] instanceof String)) {
            throw new Error("Expected the field `v3PrivMode` to be a primitive type in the JSON string but got " + data['v3PrivMode']);
        }
        // ensure the json data is a string
        if (data['v3PrivPass'] && !(typeof data['v3PrivPass'] === 'string' || data['v3PrivPass'] instanceof String)) {
            throw new Error("Expected the field `v3PrivPass` to be a primitive type in the JSON string but got " + data['v3PrivPass']);
        }

        return true;
    }


}



/**
 * The list of IPv4 addresses that are allowed to access the SNMP server.
 * @member {Array.<String>} peerIps
 */
UpdateOrganizationSnmpRequest.prototype['peerIps'] = undefined;

/**
 * Boolean indicating whether SNMP version 2c is enabled for the organization.
 * @member {Boolean} v2cEnabled
 */
UpdateOrganizationSnmpRequest.prototype['v2cEnabled'] = undefined;

/**
 * The SNMP version 3 authentication mode. Can be either 'MD5' or 'SHA'.
 * @member {module:model/UpdateOrganizationSnmpRequest.V3AuthModeEnum} v3AuthMode
 */
UpdateOrganizationSnmpRequest.prototype['v3AuthMode'] = undefined;

/**
 * The SNMP version 3 authentication password. Must be at least 8 characters if specified.
 * @member {String} v3AuthPass
 */
UpdateOrganizationSnmpRequest.prototype['v3AuthPass'] = undefined;

/**
 * Boolean indicating whether SNMP version 3 is enabled for the organization.
 * @member {Boolean} v3Enabled
 */
UpdateOrganizationSnmpRequest.prototype['v3Enabled'] = undefined;

/**
 * The SNMP version 3 privacy mode. Can be either 'DES' or 'AES128'.
 * @member {module:model/UpdateOrganizationSnmpRequest.V3PrivModeEnum} v3PrivMode
 */
UpdateOrganizationSnmpRequest.prototype['v3PrivMode'] = undefined;

/**
 * The SNMP version 3 privacy password. Must be at least 8 characters if specified.
 * @member {String} v3PrivPass
 */
UpdateOrganizationSnmpRequest.prototype['v3PrivPass'] = undefined;





/**
 * Allowed values for the <code>v3AuthMode</code> property.
 * @enum {String}
 * @readonly
 */
UpdateOrganizationSnmpRequest['V3AuthModeEnum'] = {

    /**
     * value: "MD5"
     * @const
     */
    "MD5": "MD5",

    /**
     * value: "SHA"
     * @const
     */
    "SHA": "SHA"
};


/**
 * Allowed values for the <code>v3PrivMode</code> property.
 * @enum {String}
 * @readonly
 */
UpdateOrganizationSnmpRequest['V3PrivModeEnum'] = {

    /**
     * value: "AES128"
     * @const
     */
    "AES128": "AES128",

    /**
     * value: "DES"
     * @const
     */
    "DES": "DES"
};



export default UpdateOrganizationSnmpRequest;

