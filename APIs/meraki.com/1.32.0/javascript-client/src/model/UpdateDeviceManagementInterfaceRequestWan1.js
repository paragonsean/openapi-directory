/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UpdateDeviceManagementInterfaceRequestWan1 model module.
 * @module model/UpdateDeviceManagementInterfaceRequestWan1
 * @version 1.32.0
 */
class UpdateDeviceManagementInterfaceRequestWan1 {
    /**
     * Constructs a new <code>UpdateDeviceManagementInterfaceRequestWan1</code>.
     * WAN 1 settings
     * @alias module:model/UpdateDeviceManagementInterfaceRequestWan1
     */
    constructor() { 
        
        UpdateDeviceManagementInterfaceRequestWan1.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateDeviceManagementInterfaceRequestWan1</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateDeviceManagementInterfaceRequestWan1} obj Optional instance to populate.
     * @return {module:model/UpdateDeviceManagementInterfaceRequestWan1} The populated <code>UpdateDeviceManagementInterfaceRequestWan1</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateDeviceManagementInterfaceRequestWan1();

            if (data.hasOwnProperty('staticDns')) {
                obj['staticDns'] = ApiClient.convertToType(data['staticDns'], ['String']);
            }
            if (data.hasOwnProperty('staticGatewayIp')) {
                obj['staticGatewayIp'] = ApiClient.convertToType(data['staticGatewayIp'], 'String');
            }
            if (data.hasOwnProperty('staticIp')) {
                obj['staticIp'] = ApiClient.convertToType(data['staticIp'], 'String');
            }
            if (data.hasOwnProperty('staticSubnetMask')) {
                obj['staticSubnetMask'] = ApiClient.convertToType(data['staticSubnetMask'], 'String');
            }
            if (data.hasOwnProperty('usingStaticIp')) {
                obj['usingStaticIp'] = ApiClient.convertToType(data['usingStaticIp'], 'Boolean');
            }
            if (data.hasOwnProperty('vlan')) {
                obj['vlan'] = ApiClient.convertToType(data['vlan'], 'Number');
            }
            if (data.hasOwnProperty('wanEnabled')) {
                obj['wanEnabled'] = ApiClient.convertToType(data['wanEnabled'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateDeviceManagementInterfaceRequestWan1</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateDeviceManagementInterfaceRequestWan1</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['staticDns'])) {
            throw new Error("Expected the field `staticDns` to be an array in the JSON data but got " + data['staticDns']);
        }
        // ensure the json data is a string
        if (data['staticGatewayIp'] && !(typeof data['staticGatewayIp'] === 'string' || data['staticGatewayIp'] instanceof String)) {
            throw new Error("Expected the field `staticGatewayIp` to be a primitive type in the JSON string but got " + data['staticGatewayIp']);
        }
        // ensure the json data is a string
        if (data['staticIp'] && !(typeof data['staticIp'] === 'string' || data['staticIp'] instanceof String)) {
            throw new Error("Expected the field `staticIp` to be a primitive type in the JSON string but got " + data['staticIp']);
        }
        // ensure the json data is a string
        if (data['staticSubnetMask'] && !(typeof data['staticSubnetMask'] === 'string' || data['staticSubnetMask'] instanceof String)) {
            throw new Error("Expected the field `staticSubnetMask` to be a primitive type in the JSON string but got " + data['staticSubnetMask']);
        }
        // ensure the json data is a string
        if (data['wanEnabled'] && !(typeof data['wanEnabled'] === 'string' || data['wanEnabled'] instanceof String)) {
            throw new Error("Expected the field `wanEnabled` to be a primitive type in the JSON string but got " + data['wanEnabled']);
        }

        return true;
    }


}



/**
 * Up to two DNS IPs.
 * @member {Array.<String>} staticDns
 */
UpdateDeviceManagementInterfaceRequestWan1.prototype['staticDns'] = undefined;

/**
 * The IP of the gateway on the WAN.
 * @member {String} staticGatewayIp
 */
UpdateDeviceManagementInterfaceRequestWan1.prototype['staticGatewayIp'] = undefined;

/**
 * The IP the device should use on the WAN.
 * @member {String} staticIp
 */
UpdateDeviceManagementInterfaceRequestWan1.prototype['staticIp'] = undefined;

/**
 * The subnet mask for the WAN.
 * @member {String} staticSubnetMask
 */
UpdateDeviceManagementInterfaceRequestWan1.prototype['staticSubnetMask'] = undefined;

/**
 * Configure the interface to have static IP settings or use DHCP.
 * @member {Boolean} usingStaticIp
 */
UpdateDeviceManagementInterfaceRequestWan1.prototype['usingStaticIp'] = undefined;

/**
 * The VLAN that management traffic should be tagged with. Applies whether usingStaticIp is true or false.
 * @member {Number} vlan
 */
UpdateDeviceManagementInterfaceRequestWan1.prototype['vlan'] = undefined;

/**
 * Enable or disable the interface (only for MX devices). Valid values are 'enabled', 'disabled', and 'not configured'.
 * @member {module:model/UpdateDeviceManagementInterfaceRequestWan1.WanEnabledEnum} wanEnabled
 */
UpdateDeviceManagementInterfaceRequestWan1.prototype['wanEnabled'] = undefined;





/**
 * Allowed values for the <code>wanEnabled</code> property.
 * @enum {String}
 * @readonly
 */
UpdateDeviceManagementInterfaceRequestWan1['WanEnabledEnum'] = {

    /**
     * value: "disabled"
     * @const
     */
    "disabled": "disabled",

    /**
     * value: "enabled"
     * @const
     */
    "enabled": "enabled",

    /**
     * value: "not configured"
     * @const
     */
    "not configured": "not configured"
};



export default UpdateDeviceManagementInterfaceRequestWan1;

