/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GetOrganizationDevices200ResponseInner model module.
 * @module model/GetOrganizationDevices200ResponseInner
 * @version 1.32.0
 */
class GetOrganizationDevices200ResponseInner {
    /**
     * Constructs a new <code>GetOrganizationDevices200ResponseInner</code>.
     * @alias module:model/GetOrganizationDevices200ResponseInner
     */
    constructor() { 
        
        GetOrganizationDevices200ResponseInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GetOrganizationDevices200ResponseInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetOrganizationDevices200ResponseInner} obj Optional instance to populate.
     * @return {module:model/GetOrganizationDevices200ResponseInner} The populated <code>GetOrganizationDevices200ResponseInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetOrganizationDevices200ResponseInner();

            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('firmware')) {
                obj['firmware'] = ApiClient.convertToType(data['firmware'], 'String');
            }
            if (data.hasOwnProperty('lanIp')) {
                obj['lanIp'] = ApiClient.convertToType(data['lanIp'], 'String');
            }
            if (data.hasOwnProperty('lat')) {
                obj['lat'] = ApiClient.convertToType(data['lat'], 'Number');
            }
            if (data.hasOwnProperty('lng')) {
                obj['lng'] = ApiClient.convertToType(data['lng'], 'Number');
            }
            if (data.hasOwnProperty('mac')) {
                obj['mac'] = ApiClient.convertToType(data['mac'], 'String');
            }
            if (data.hasOwnProperty('model')) {
                obj['model'] = ApiClient.convertToType(data['model'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('networkId')) {
                obj['networkId'] = ApiClient.convertToType(data['networkId'], 'String');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('productType')) {
                obj['productType'] = ApiClient.convertToType(data['productType'], 'String');
            }
            if (data.hasOwnProperty('serial')) {
                obj['serial'] = ApiClient.convertToType(data['serial'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetOrganizationDevices200ResponseInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetOrganizationDevices200ResponseInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // ensure the json data is a string
        if (data['firmware'] && !(typeof data['firmware'] === 'string' || data['firmware'] instanceof String)) {
            throw new Error("Expected the field `firmware` to be a primitive type in the JSON string but got " + data['firmware']);
        }
        // ensure the json data is a string
        if (data['lanIp'] && !(typeof data['lanIp'] === 'string' || data['lanIp'] instanceof String)) {
            throw new Error("Expected the field `lanIp` to be a primitive type in the JSON string but got " + data['lanIp']);
        }
        // ensure the json data is a string
        if (data['mac'] && !(typeof data['mac'] === 'string' || data['mac'] instanceof String)) {
            throw new Error("Expected the field `mac` to be a primitive type in the JSON string but got " + data['mac']);
        }
        // ensure the json data is a string
        if (data['model'] && !(typeof data['model'] === 'string' || data['model'] instanceof String)) {
            throw new Error("Expected the field `model` to be a primitive type in the JSON string but got " + data['model']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['networkId'] && !(typeof data['networkId'] === 'string' || data['networkId'] instanceof String)) {
            throw new Error("Expected the field `networkId` to be a primitive type in the JSON string but got " + data['networkId']);
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        // ensure the json data is a string
        if (data['productType'] && !(typeof data['productType'] === 'string' || data['productType'] instanceof String)) {
            throw new Error("Expected the field `productType` to be a primitive type in the JSON string but got " + data['productType']);
        }
        // ensure the json data is a string
        if (data['serial'] && !(typeof data['serial'] === 'string' || data['serial'] instanceof String)) {
            throw new Error("Expected the field `serial` to be a primitive type in the JSON string but got " + data['serial']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }

        return true;
    }


}



/**
 * Physical address of the device
 * @member {String} address
 */
GetOrganizationDevices200ResponseInner.prototype['address'] = undefined;

/**
 * Firmware version of the device
 * @member {String} firmware
 */
GetOrganizationDevices200ResponseInner.prototype['firmware'] = undefined;

/**
 * LAN IP address of the device
 * @member {String} lanIp
 */
GetOrganizationDevices200ResponseInner.prototype['lanIp'] = undefined;

/**
 * Latitude of the device
 * @member {Number} lat
 */
GetOrganizationDevices200ResponseInner.prototype['lat'] = undefined;

/**
 * Longitude of the device
 * @member {Number} lng
 */
GetOrganizationDevices200ResponseInner.prototype['lng'] = undefined;

/**
 * MAC address of the device
 * @member {String} mac
 */
GetOrganizationDevices200ResponseInner.prototype['mac'] = undefined;

/**
 * Model of the device
 * @member {String} model
 */
GetOrganizationDevices200ResponseInner.prototype['model'] = undefined;

/**
 * Name of the device
 * @member {String} name
 */
GetOrganizationDevices200ResponseInner.prototype['name'] = undefined;

/**
 * ID of the network the device belongs to
 * @member {String} networkId
 */
GetOrganizationDevices200ResponseInner.prototype['networkId'] = undefined;

/**
 * Notes for the device, limited to 255 characters
 * @member {String} notes
 */
GetOrganizationDevices200ResponseInner.prototype['notes'] = undefined;

/**
 * Product type of the device
 * @member {String} productType
 */
GetOrganizationDevices200ResponseInner.prototype['productType'] = undefined;

/**
 * Serial number of the device
 * @member {String} serial
 */
GetOrganizationDevices200ResponseInner.prototype['serial'] = undefined;

/**
 * List of tags assigned to the device
 * @member {Array.<String>} tags
 */
GetOrganizationDevices200ResponseInner.prototype['tags'] = undefined;






export default GetOrganizationDevices200ResponseInner;

