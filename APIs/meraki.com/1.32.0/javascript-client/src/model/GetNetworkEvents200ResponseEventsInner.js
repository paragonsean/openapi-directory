/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GetNetworkEvents200ResponseEventsInnerEventData from './GetNetworkEvents200ResponseEventsInnerEventData';

/**
 * The GetNetworkEvents200ResponseEventsInner model module.
 * @module model/GetNetworkEvents200ResponseEventsInner
 * @version 1.32.0
 */
class GetNetworkEvents200ResponseEventsInner {
    /**
     * Constructs a new <code>GetNetworkEvents200ResponseEventsInner</code>.
     * @alias module:model/GetNetworkEvents200ResponseEventsInner
     */
    constructor() { 
        
        GetNetworkEvents200ResponseEventsInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GetNetworkEvents200ResponseEventsInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetNetworkEvents200ResponseEventsInner} obj Optional instance to populate.
     * @return {module:model/GetNetworkEvents200ResponseEventsInner} The populated <code>GetNetworkEvents200ResponseEventsInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetNetworkEvents200ResponseEventsInner();

            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('clientDescription')) {
                obj['clientDescription'] = ApiClient.convertToType(data['clientDescription'], 'String');
            }
            if (data.hasOwnProperty('clientId')) {
                obj['clientId'] = ApiClient.convertToType(data['clientId'], 'String');
            }
            if (data.hasOwnProperty('clientMac')) {
                obj['clientMac'] = ApiClient.convertToType(data['clientMac'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('deviceName')) {
                obj['deviceName'] = ApiClient.convertToType(data['deviceName'], 'String');
            }
            if (data.hasOwnProperty('deviceSerial')) {
                obj['deviceSerial'] = ApiClient.convertToType(data['deviceSerial'], 'String');
            }
            if (data.hasOwnProperty('eventData')) {
                obj['eventData'] = GetNetworkEvents200ResponseEventsInnerEventData.constructFromObject(data['eventData']);
            }
            if (data.hasOwnProperty('networkId')) {
                obj['networkId'] = ApiClient.convertToType(data['networkId'], 'String');
            }
            if (data.hasOwnProperty('occurredAt')) {
                obj['occurredAt'] = ApiClient.convertToType(data['occurredAt'], 'String');
            }
            if (data.hasOwnProperty('ssidNumber')) {
                obj['ssidNumber'] = ApiClient.convertToType(data['ssidNumber'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetNetworkEvents200ResponseEventsInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetNetworkEvents200ResponseEventsInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['clientDescription'] && !(typeof data['clientDescription'] === 'string' || data['clientDescription'] instanceof String)) {
            throw new Error("Expected the field `clientDescription` to be a primitive type in the JSON string but got " + data['clientDescription']);
        }
        // ensure the json data is a string
        if (data['clientId'] && !(typeof data['clientId'] === 'string' || data['clientId'] instanceof String)) {
            throw new Error("Expected the field `clientId` to be a primitive type in the JSON string but got " + data['clientId']);
        }
        // ensure the json data is a string
        if (data['clientMac'] && !(typeof data['clientMac'] === 'string' || data['clientMac'] instanceof String)) {
            throw new Error("Expected the field `clientMac` to be a primitive type in the JSON string but got " + data['clientMac']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['deviceName'] && !(typeof data['deviceName'] === 'string' || data['deviceName'] instanceof String)) {
            throw new Error("Expected the field `deviceName` to be a primitive type in the JSON string but got " + data['deviceName']);
        }
        // ensure the json data is a string
        if (data['deviceSerial'] && !(typeof data['deviceSerial'] === 'string' || data['deviceSerial'] instanceof String)) {
            throw new Error("Expected the field `deviceSerial` to be a primitive type in the JSON string but got " + data['deviceSerial']);
        }
        // validate the optional field `eventData`
        if (data['eventData']) { // data not null
          GetNetworkEvents200ResponseEventsInnerEventData.validateJSON(data['eventData']);
        }
        // ensure the json data is a string
        if (data['networkId'] && !(typeof data['networkId'] === 'string' || data['networkId'] instanceof String)) {
            throw new Error("Expected the field `networkId` to be a primitive type in the JSON string but got " + data['networkId']);
        }
        // ensure the json data is a string
        if (data['occurredAt'] && !(typeof data['occurredAt'] === 'string' || data['occurredAt'] instanceof String)) {
            throw new Error("Expected the field `occurredAt` to be a primitive type in the JSON string but got " + data['occurredAt']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The category that the event type belongs to
 * @member {String} category
 */
GetNetworkEvents200ResponseEventsInner.prototype['category'] = undefined;

/**
 * A description of the client. This is usually the client's device name.
 * @member {String} clientDescription
 */
GetNetworkEvents200ResponseEventsInner.prototype['clientDescription'] = undefined;

/**
 * A string identifying the client. This could be a client's MAC or IP address
 * @member {String} clientId
 */
GetNetworkEvents200ResponseEventsInner.prototype['clientId'] = undefined;

/**
 * The client's MAC address.
 * @member {String} clientMac
 */
GetNetworkEvents200ResponseEventsInner.prototype['clientMac'] = undefined;

/**
 * A description of the event the happened.
 * @member {String} description
 */
GetNetworkEvents200ResponseEventsInner.prototype['description'] = undefined;

/**
 * The name of the device. Only shown if the device is an access point.
 * @member {String} deviceName
 */
GetNetworkEvents200ResponseEventsInner.prototype['deviceName'] = undefined;

/**
 * The serial number of the device. Only shown if the device is an access point.
 * @member {String} deviceSerial
 */
GetNetworkEvents200ResponseEventsInner.prototype['deviceSerial'] = undefined;

/**
 * @member {module:model/GetNetworkEvents200ResponseEventsInnerEventData} eventData
 */
GetNetworkEvents200ResponseEventsInner.prototype['eventData'] = undefined;

/**
 * The ID of the network.
 * @member {String} networkId
 */
GetNetworkEvents200ResponseEventsInner.prototype['networkId'] = undefined;

/**
 * An UTC ISO8601 string of the time the event occurred at.
 * @member {String} occurredAt
 */
GetNetworkEvents200ResponseEventsInner.prototype['occurredAt'] = undefined;

/**
 * The SSID number of the device.
 * @member {Number} ssidNumber
 */
GetNetworkEvents200ResponseEventsInner.prototype['ssidNumber'] = undefined;

/**
 * The type of event being listed.
 * @member {String} type
 */
GetNetworkEvents200ResponseEventsInner.prototype['type'] = undefined;






export default GetNetworkEvents200ResponseEventsInner;

