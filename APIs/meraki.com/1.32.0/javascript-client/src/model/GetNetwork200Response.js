/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GetNetwork200Response model module.
 * @module model/GetNetwork200Response
 * @version 1.32.0
 */
class GetNetwork200Response {
    /**
     * Constructs a new <code>GetNetwork200Response</code>.
     * @alias module:model/GetNetwork200Response
     */
    constructor() { 
        
        GetNetwork200Response.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GetNetwork200Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetNetwork200Response} obj Optional instance to populate.
     * @return {module:model/GetNetwork200Response} The populated <code>GetNetwork200Response</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetNetwork200Response();

            if (data.hasOwnProperty('enrollmentString')) {
                obj['enrollmentString'] = ApiClient.convertToType(data['enrollmentString'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('isBoundToConfigTemplate')) {
                obj['isBoundToConfigTemplate'] = ApiClient.convertToType(data['isBoundToConfigTemplate'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('organizationId')) {
                obj['organizationId'] = ApiClient.convertToType(data['organizationId'], 'String');
            }
            if (data.hasOwnProperty('productTypes')) {
                obj['productTypes'] = ApiClient.convertToType(data['productTypes'], ['String']);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('timeZone')) {
                obj['timeZone'] = ApiClient.convertToType(data['timeZone'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetNetwork200Response</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetNetwork200Response</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['enrollmentString'] && !(typeof data['enrollmentString'] === 'string' || data['enrollmentString'] instanceof String)) {
            throw new Error("Expected the field `enrollmentString` to be a primitive type in the JSON string but got " + data['enrollmentString']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        // ensure the json data is a string
        if (data['organizationId'] && !(typeof data['organizationId'] === 'string' || data['organizationId'] instanceof String)) {
            throw new Error("Expected the field `organizationId` to be a primitive type in the JSON string but got " + data['organizationId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['productTypes'])) {
            throw new Error("Expected the field `productTypes` to be an array in the JSON data but got " + data['productTypes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        // ensure the json data is a string
        if (data['timeZone'] && !(typeof data['timeZone'] === 'string' || data['timeZone'] instanceof String)) {
            throw new Error("Expected the field `timeZone` to be a primitive type in the JSON string but got " + data['timeZone']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * Enrollment string for the network
 * @member {String} enrollmentString
 */
GetNetwork200Response.prototype['enrollmentString'] = undefined;

/**
 * Network ID
 * @member {String} id
 */
GetNetwork200Response.prototype['id'] = undefined;

/**
 * If the network is bound to a config template
 * @member {Boolean} isBoundToConfigTemplate
 */
GetNetwork200Response.prototype['isBoundToConfigTemplate'] = undefined;

/**
 * Network name
 * @member {String} name
 */
GetNetwork200Response.prototype['name'] = undefined;

/**
 * Notes for the network
 * @member {String} notes
 */
GetNetwork200Response.prototype['notes'] = undefined;

/**
 * Organization ID
 * @member {String} organizationId
 */
GetNetwork200Response.prototype['organizationId'] = undefined;

/**
 * List of the product types that the network supports
 * @member {Array.<String>} productTypes
 */
GetNetwork200Response.prototype['productTypes'] = undefined;

/**
 * Network tags
 * @member {Array.<String>} tags
 */
GetNetwork200Response.prototype['tags'] = undefined;

/**
 * Timezone of the network
 * @member {String} timeZone
 */
GetNetwork200Response.prototype['timeZone'] = undefined;

/**
 * URL to the network Dashboard UI
 * @member {String} url
 */
GetNetwork200Response.prototype['url'] = undefined;






export default GetNetwork200Response;

