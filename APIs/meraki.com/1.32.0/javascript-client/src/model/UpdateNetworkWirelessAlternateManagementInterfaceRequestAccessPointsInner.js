/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UpdateNetworkWirelessAlternateManagementInterfaceRequestAccessPointsInner model module.
 * @module model/UpdateNetworkWirelessAlternateManagementInterfaceRequestAccessPointsInner
 * @version 1.32.0
 */
class UpdateNetworkWirelessAlternateManagementInterfaceRequestAccessPointsInner {
    /**
     * Constructs a new <code>UpdateNetworkWirelessAlternateManagementInterfaceRequestAccessPointsInner</code>.
     * @alias module:model/UpdateNetworkWirelessAlternateManagementInterfaceRequestAccessPointsInner
     * @param alternateManagementIp {String} Wireless alternate management interface device IP. Provide an empty string to remove alternate management IP assignment
     * @param serial {String} Serial number of access point to be configured with alternate management IP
     */
    constructor(alternateManagementIp, serial) { 
        
        UpdateNetworkWirelessAlternateManagementInterfaceRequestAccessPointsInner.initialize(this, alternateManagementIp, serial);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, alternateManagementIp, serial) { 
        obj['alternateManagementIp'] = alternateManagementIp;
        obj['serial'] = serial;
    }

    /**
     * Constructs a <code>UpdateNetworkWirelessAlternateManagementInterfaceRequestAccessPointsInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateNetworkWirelessAlternateManagementInterfaceRequestAccessPointsInner} obj Optional instance to populate.
     * @return {module:model/UpdateNetworkWirelessAlternateManagementInterfaceRequestAccessPointsInner} The populated <code>UpdateNetworkWirelessAlternateManagementInterfaceRequestAccessPointsInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateNetworkWirelessAlternateManagementInterfaceRequestAccessPointsInner();

            if (data.hasOwnProperty('alternateManagementIp')) {
                obj['alternateManagementIp'] = ApiClient.convertToType(data['alternateManagementIp'], 'String');
            }
            if (data.hasOwnProperty('dns1')) {
                obj['dns1'] = ApiClient.convertToType(data['dns1'], 'String');
            }
            if (data.hasOwnProperty('dns2')) {
                obj['dns2'] = ApiClient.convertToType(data['dns2'], 'String');
            }
            if (data.hasOwnProperty('gateway')) {
                obj['gateway'] = ApiClient.convertToType(data['gateway'], 'String');
            }
            if (data.hasOwnProperty('serial')) {
                obj['serial'] = ApiClient.convertToType(data['serial'], 'String');
            }
            if (data.hasOwnProperty('subnetMask')) {
                obj['subnetMask'] = ApiClient.convertToType(data['subnetMask'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateNetworkWirelessAlternateManagementInterfaceRequestAccessPointsInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateNetworkWirelessAlternateManagementInterfaceRequestAccessPointsInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UpdateNetworkWirelessAlternateManagementInterfaceRequestAccessPointsInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['alternateManagementIp'] && !(typeof data['alternateManagementIp'] === 'string' || data['alternateManagementIp'] instanceof String)) {
            throw new Error("Expected the field `alternateManagementIp` to be a primitive type in the JSON string but got " + data['alternateManagementIp']);
        }
        // ensure the json data is a string
        if (data['dns1'] && !(typeof data['dns1'] === 'string' || data['dns1'] instanceof String)) {
            throw new Error("Expected the field `dns1` to be a primitive type in the JSON string but got " + data['dns1']);
        }
        // ensure the json data is a string
        if (data['dns2'] && !(typeof data['dns2'] === 'string' || data['dns2'] instanceof String)) {
            throw new Error("Expected the field `dns2` to be a primitive type in the JSON string but got " + data['dns2']);
        }
        // ensure the json data is a string
        if (data['gateway'] && !(typeof data['gateway'] === 'string' || data['gateway'] instanceof String)) {
            throw new Error("Expected the field `gateway` to be a primitive type in the JSON string but got " + data['gateway']);
        }
        // ensure the json data is a string
        if (data['serial'] && !(typeof data['serial'] === 'string' || data['serial'] instanceof String)) {
            throw new Error("Expected the field `serial` to be a primitive type in the JSON string but got " + data['serial']);
        }
        // ensure the json data is a string
        if (data['subnetMask'] && !(typeof data['subnetMask'] === 'string' || data['subnetMask'] instanceof String)) {
            throw new Error("Expected the field `subnetMask` to be a primitive type in the JSON string but got " + data['subnetMask']);
        }

        return true;
    }


}

UpdateNetworkWirelessAlternateManagementInterfaceRequestAccessPointsInner.RequiredProperties = ["alternateManagementIp", "serial"];

/**
 * Wireless alternate management interface device IP. Provide an empty string to remove alternate management IP assignment
 * @member {String} alternateManagementIp
 */
UpdateNetworkWirelessAlternateManagementInterfaceRequestAccessPointsInner.prototype['alternateManagementIp'] = undefined;

/**
 * Primary DNS must be in IP format
 * @member {String} dns1
 */
UpdateNetworkWirelessAlternateManagementInterfaceRequestAccessPointsInner.prototype['dns1'] = undefined;

/**
 * Optional secondary DNS must be in IP format
 * @member {String} dns2
 */
UpdateNetworkWirelessAlternateManagementInterfaceRequestAccessPointsInner.prototype['dns2'] = undefined;

/**
 * Gateway must be in IP format
 * @member {String} gateway
 */
UpdateNetworkWirelessAlternateManagementInterfaceRequestAccessPointsInner.prototype['gateway'] = undefined;

/**
 * Serial number of access point to be configured with alternate management IP
 * @member {String} serial
 */
UpdateNetworkWirelessAlternateManagementInterfaceRequestAccessPointsInner.prototype['serial'] = undefined;

/**
 * Subnet mask must be in IP format
 * @member {String} subnetMask
 */
UpdateNetworkWirelessAlternateManagementInterfaceRequestAccessPointsInner.prototype['subnetMask'] = undefined;






export default UpdateNetworkWirelessAlternateManagementInterfaceRequestAccessPointsInner;

