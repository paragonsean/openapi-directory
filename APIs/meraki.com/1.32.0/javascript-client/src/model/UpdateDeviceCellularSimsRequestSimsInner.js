/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UpdateDeviceCellularSimsRequestSimsInnerApnsInner from './UpdateDeviceCellularSimsRequestSimsInnerApnsInner';

/**
 * The UpdateDeviceCellularSimsRequestSimsInner model module.
 * @module model/UpdateDeviceCellularSimsRequestSimsInner
 * @version 1.32.0
 */
class UpdateDeviceCellularSimsRequestSimsInner {
    /**
     * Constructs a new <code>UpdateDeviceCellularSimsRequestSimsInner</code>.
     * @alias module:model/UpdateDeviceCellularSimsRequestSimsInner
     */
    constructor() { 
        
        UpdateDeviceCellularSimsRequestSimsInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['isPrimary'] = false;
    }

    /**
     * Constructs a <code>UpdateDeviceCellularSimsRequestSimsInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateDeviceCellularSimsRequestSimsInner} obj Optional instance to populate.
     * @return {module:model/UpdateDeviceCellularSimsRequestSimsInner} The populated <code>UpdateDeviceCellularSimsRequestSimsInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateDeviceCellularSimsRequestSimsInner();

            if (data.hasOwnProperty('apns')) {
                obj['apns'] = ApiClient.convertToType(data['apns'], [UpdateDeviceCellularSimsRequestSimsInnerApnsInner]);
            }
            if (data.hasOwnProperty('isPrimary')) {
                obj['isPrimary'] = ApiClient.convertToType(data['isPrimary'], 'Boolean');
            }
            if (data.hasOwnProperty('slot')) {
                obj['slot'] = ApiClient.convertToType(data['slot'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateDeviceCellularSimsRequestSimsInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateDeviceCellularSimsRequestSimsInner</code>.
     */
    static validateJSON(data) {
        if (data['apns']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['apns'])) {
                throw new Error("Expected the field `apns` to be an array in the JSON data but got " + data['apns']);
            }
            // validate the optional field `apns` (array)
            for (const item of data['apns']) {
                UpdateDeviceCellularSimsRequestSimsInnerApnsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['slot'] && !(typeof data['slot'] === 'string' || data['slot'] instanceof String)) {
            throw new Error("Expected the field `slot` to be a primitive type in the JSON string but got " + data['slot']);
        }

        return true;
    }


}



/**
 * APN configurations. If empty, the default APN will be used.
 * @member {Array.<module:model/UpdateDeviceCellularSimsRequestSimsInnerApnsInner>} apns
 */
UpdateDeviceCellularSimsRequestSimsInner.prototype['apns'] = undefined;

/**
 * If true, this SIM is used for boot. Must be true on single-sim devices.
 * @member {Boolean} isPrimary
 * @default false
 */
UpdateDeviceCellularSimsRequestSimsInner.prototype['isPrimary'] = false;

/**
 * SIM slot being configured. Must be 'sim1' on single-sim devices.
 * @member {module:model/UpdateDeviceCellularSimsRequestSimsInner.SlotEnum} slot
 */
UpdateDeviceCellularSimsRequestSimsInner.prototype['slot'] = undefined;





/**
 * Allowed values for the <code>slot</code> property.
 * @enum {String}
 * @readonly
 */
UpdateDeviceCellularSimsRequestSimsInner['SlotEnum'] = {

    /**
     * value: "sim1"
     * @const
     */
    "sim1": "sim1",

    /**
     * value: "sim2"
     * @const
     */
    "sim2": "sim2"
};



export default UpdateDeviceCellularSimsRequestSimsInner;

