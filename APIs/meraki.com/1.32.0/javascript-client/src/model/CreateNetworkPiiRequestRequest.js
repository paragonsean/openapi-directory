/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateNetworkPiiRequestRequest model module.
 * @module model/CreateNetworkPiiRequestRequest
 * @version 1.32.0
 */
class CreateNetworkPiiRequestRequest {
    /**
     * Constructs a new <code>CreateNetworkPiiRequestRequest</code>.
     * @alias module:model/CreateNetworkPiiRequestRequest
     */
    constructor() { 
        
        CreateNetworkPiiRequestRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CreateNetworkPiiRequestRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateNetworkPiiRequestRequest} obj Optional instance to populate.
     * @return {module:model/CreateNetworkPiiRequestRequest} The populated <code>CreateNetworkPiiRequestRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateNetworkPiiRequestRequest();

            if (data.hasOwnProperty('datasets')) {
                obj['datasets'] = ApiClient.convertToType(data['datasets'], ['String']);
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('mac')) {
                obj['mac'] = ApiClient.convertToType(data['mac'], 'String');
            }
            if (data.hasOwnProperty('smDeviceId')) {
                obj['smDeviceId'] = ApiClient.convertToType(data['smDeviceId'], 'String');
            }
            if (data.hasOwnProperty('smUserId')) {
                obj['smUserId'] = ApiClient.convertToType(data['smUserId'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateNetworkPiiRequestRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateNetworkPiiRequestRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['datasets'])) {
            throw new Error("Expected the field `datasets` to be an array in the JSON data but got " + data['datasets']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['mac'] && !(typeof data['mac'] === 'string' || data['mac'] instanceof String)) {
            throw new Error("Expected the field `mac` to be a primitive type in the JSON string but got " + data['mac']);
        }
        // ensure the json data is a string
        if (data['smDeviceId'] && !(typeof data['smDeviceId'] === 'string' || data['smDeviceId'] instanceof String)) {
            throw new Error("Expected the field `smDeviceId` to be a primitive type in the JSON string but got " + data['smDeviceId']);
        }
        // ensure the json data is a string
        if (data['smUserId'] && !(typeof data['smUserId'] === 'string' || data['smUserId'] instanceof String)) {
            throw new Error("Expected the field `smUserId` to be a primitive type in the JSON string but got " + data['smUserId']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }

        return true;
    }


}



/**
 * The datasets related to the provided key that should be deleted. Only applies to \"delete\" requests. The value \"all\" will be expanded to all datasets applicable to this type. The datasets by applicable to each type are: mac (usage, events, traffic), email (users, loginAttempts), username (users, loginAttempts), bluetoothMac (client, connectivity), smDeviceId (device), smUserId (user)
 * @member {Array.<String>} datasets
 */
CreateNetworkPiiRequestRequest.prototype['datasets'] = undefined;

/**
 * The email of a network user account. Only applies to \"delete\" requests.
 * @member {String} email
 */
CreateNetworkPiiRequestRequest.prototype['email'] = undefined;

/**
 * The MAC of a network client device. Applies to both \"restrict processing\" and \"delete\" requests.
 * @member {String} mac
 */
CreateNetworkPiiRequestRequest.prototype['mac'] = undefined;

/**
 * The sm_device_id of a Systems Manager device. The only way to \"restrict processing\" or \"delete\" a Systems Manager device. Must include \"device\" in the dataset for a \"delete\" request to destroy the device.
 * @member {String} smDeviceId
 */
CreateNetworkPiiRequestRequest.prototype['smDeviceId'] = undefined;

/**
 * The sm_user_id of a Systems Manager user. The only way to \"restrict processing\" or \"delete\" a Systems Manager user. Must include \"user\" in the dataset for a \"delete\" request to destroy the user.
 * @member {String} smUserId
 */
CreateNetworkPiiRequestRequest.prototype['smUserId'] = undefined;

/**
 * One of \"delete\" or \"restrict processing\"
 * @member {module:model/CreateNetworkPiiRequestRequest.TypeEnum} type
 */
CreateNetworkPiiRequestRequest.prototype['type'] = undefined;

/**
 * The username of a network log in. Only applies to \"delete\" requests.
 * @member {String} username
 */
CreateNetworkPiiRequestRequest.prototype['username'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
CreateNetworkPiiRequestRequest['TypeEnum'] = {

    /**
     * value: "delete"
     * @const
     */
    "delete": "delete",

    /**
     * value: "restrict processing"
     * @const
     */
    "restrict processing": "restrict processing"
};



export default CreateNetworkPiiRequestRequest;

