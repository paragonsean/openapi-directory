/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GetOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies from './GetOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies';

/**
 * The UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequestPeersInner model module.
 * @module model/UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequestPeersInner
 * @version 1.32.0
 */
class UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequestPeersInner {
    /**
     * Constructs a new <code>UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequestPeersInner</code>.
     * @alias module:model/UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequestPeersInner
     * @param name {String} The name of the VPN peer
     * @param privateSubnets {Array.<String>} The list of the private subnets of the VPN peer
     * @param secret {String} The shared secret with the VPN peer
     */
    constructor(name, privateSubnets, secret) { 
        
        UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequestPeersInner.initialize(this, name, privateSubnets, secret);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, privateSubnets, secret) { 
        obj['ikeVersion'] = '1';
        obj['name'] = name;
        obj['privateSubnets'] = privateSubnets;
        obj['secret'] = secret;
    }

    /**
     * Constructs a <code>UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequestPeersInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequestPeersInner} obj Optional instance to populate.
     * @return {module:model/UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequestPeersInner} The populated <code>UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequestPeersInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequestPeersInner();

            if (data.hasOwnProperty('ikeVersion')) {
                obj['ikeVersion'] = ApiClient.convertToType(data['ikeVersion'], 'String');
            }
            if (data.hasOwnProperty('ipsecPolicies')) {
                obj['ipsecPolicies'] = GetOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies.constructFromObject(data['ipsecPolicies']);
            }
            if (data.hasOwnProperty('ipsecPoliciesPreset')) {
                obj['ipsecPoliciesPreset'] = ApiClient.convertToType(data['ipsecPoliciesPreset'], 'String');
            }
            if (data.hasOwnProperty('localId')) {
                obj['localId'] = ApiClient.convertToType(data['localId'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('networkTags')) {
                obj['networkTags'] = ApiClient.convertToType(data['networkTags'], ['String']);
            }
            if (data.hasOwnProperty('privateSubnets')) {
                obj['privateSubnets'] = ApiClient.convertToType(data['privateSubnets'], ['String']);
            }
            if (data.hasOwnProperty('publicIp')) {
                obj['publicIp'] = ApiClient.convertToType(data['publicIp'], 'String');
            }
            if (data.hasOwnProperty('remoteId')) {
                obj['remoteId'] = ApiClient.convertToType(data['remoteId'], 'String');
            }
            if (data.hasOwnProperty('secret')) {
                obj['secret'] = ApiClient.convertToType(data['secret'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequestPeersInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequestPeersInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequestPeersInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['ikeVersion'] && !(typeof data['ikeVersion'] === 'string' || data['ikeVersion'] instanceof String)) {
            throw new Error("Expected the field `ikeVersion` to be a primitive type in the JSON string but got " + data['ikeVersion']);
        }
        // validate the optional field `ipsecPolicies`
        if (data['ipsecPolicies']) { // data not null
          GetOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies.validateJSON(data['ipsecPolicies']);
        }
        // ensure the json data is a string
        if (data['ipsecPoliciesPreset'] && !(typeof data['ipsecPoliciesPreset'] === 'string' || data['ipsecPoliciesPreset'] instanceof String)) {
            throw new Error("Expected the field `ipsecPoliciesPreset` to be a primitive type in the JSON string but got " + data['ipsecPoliciesPreset']);
        }
        // ensure the json data is a string
        if (data['localId'] && !(typeof data['localId'] === 'string' || data['localId'] instanceof String)) {
            throw new Error("Expected the field `localId` to be a primitive type in the JSON string but got " + data['localId']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['networkTags'])) {
            throw new Error("Expected the field `networkTags` to be an array in the JSON data but got " + data['networkTags']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['privateSubnets'])) {
            throw new Error("Expected the field `privateSubnets` to be an array in the JSON data but got " + data['privateSubnets']);
        }
        // ensure the json data is a string
        if (data['publicIp'] && !(typeof data['publicIp'] === 'string' || data['publicIp'] instanceof String)) {
            throw new Error("Expected the field `publicIp` to be a primitive type in the JSON string but got " + data['publicIp']);
        }
        // ensure the json data is a string
        if (data['remoteId'] && !(typeof data['remoteId'] === 'string' || data['remoteId'] instanceof String)) {
            throw new Error("Expected the field `remoteId` to be a primitive type in the JSON string but got " + data['remoteId']);
        }
        // ensure the json data is a string
        if (data['secret'] && !(typeof data['secret'] === 'string' || data['secret'] instanceof String)) {
            throw new Error("Expected the field `secret` to be a primitive type in the JSON string but got " + data['secret']);
        }

        return true;
    }


}

UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequestPeersInner.RequiredProperties = ["name", "privateSubnets", "secret"];

/**
 * [optional] The IKE version to be used for the IPsec VPN peer configuration. Defaults to '1' when omitted.
 * @member {module:model/UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequestPeersInner.IkeVersionEnum} ikeVersion
 * @default '1'
 */
UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequestPeersInner.prototype['ikeVersion'] = '1';

/**
 * @member {module:model/GetOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies} ipsecPolicies
 */
UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequestPeersInner.prototype['ipsecPolicies'] = undefined;

/**
 * One of the following available presets: 'default', 'aws', 'azure'. If this is provided, the 'ipsecPolicies' parameter is ignored.
 * @member {String} ipsecPoliciesPreset
 */
UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequestPeersInner.prototype['ipsecPoliciesPreset'] = undefined;

/**
 * [optional] The local ID is used to identify the MX to the peer. This will apply to all MXs this peer applies to.
 * @member {String} localId
 */
UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequestPeersInner.prototype['localId'] = undefined;

/**
 * The name of the VPN peer
 * @member {String} name
 */
UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequestPeersInner.prototype['name'] = undefined;

/**
 * A list of network tags that will connect with this peer. Use ['all'] for all networks. Use ['none'] for no networks. If not included, the default is ['all'].
 * @member {Array.<String>} networkTags
 */
UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequestPeersInner.prototype['networkTags'] = undefined;

/**
 * The list of the private subnets of the VPN peer
 * @member {Array.<String>} privateSubnets
 */
UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequestPeersInner.prototype['privateSubnets'] = undefined;

/**
 * [optional] The public IP of the VPN peer
 * @member {String} publicIp
 */
UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequestPeersInner.prototype['publicIp'] = undefined;

/**
 * [optional] The remote ID is used to identify the connecting VPN peer. This can either be a valid IPv4 Address, FQDN or User FQDN.
 * @member {String} remoteId
 */
UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequestPeersInner.prototype['remoteId'] = undefined;

/**
 * The shared secret with the VPN peer
 * @member {String} secret
 */
UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequestPeersInner.prototype['secret'] = undefined;





/**
 * Allowed values for the <code>ikeVersion</code> property.
 * @enum {String}
 * @readonly
 */
UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequestPeersInner['IkeVersionEnum'] = {

    /**
     * value: "1"
     * @const
     */
    "1": "1",

    /**
     * value: "2"
     * @const
     */
    "2": "2"
};



export default UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequestPeersInner;

