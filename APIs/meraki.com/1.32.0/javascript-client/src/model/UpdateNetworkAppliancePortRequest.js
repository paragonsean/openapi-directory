/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UpdateNetworkAppliancePortRequest model module.
 * @module model/UpdateNetworkAppliancePortRequest
 * @version 1.32.0
 */
class UpdateNetworkAppliancePortRequest {
    /**
     * Constructs a new <code>UpdateNetworkAppliancePortRequest</code>.
     * @alias module:model/UpdateNetworkAppliancePortRequest
     */
    constructor() { 
        
        UpdateNetworkAppliancePortRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateNetworkAppliancePortRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateNetworkAppliancePortRequest} obj Optional instance to populate.
     * @return {module:model/UpdateNetworkAppliancePortRequest} The populated <code>UpdateNetworkAppliancePortRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateNetworkAppliancePortRequest();

            if (data.hasOwnProperty('accessPolicy')) {
                obj['accessPolicy'] = ApiClient.convertToType(data['accessPolicy'], 'String');
            }
            if (data.hasOwnProperty('allowedVlans')) {
                obj['allowedVlans'] = ApiClient.convertToType(data['allowedVlans'], 'String');
            }
            if (data.hasOwnProperty('dropUntaggedTraffic')) {
                obj['dropUntaggedTraffic'] = ApiClient.convertToType(data['dropUntaggedTraffic'], 'Boolean');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('vlan')) {
                obj['vlan'] = ApiClient.convertToType(data['vlan'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateNetworkAppliancePortRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateNetworkAppliancePortRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accessPolicy'] && !(typeof data['accessPolicy'] === 'string' || data['accessPolicy'] instanceof String)) {
            throw new Error("Expected the field `accessPolicy` to be a primitive type in the JSON string but got " + data['accessPolicy']);
        }
        // ensure the json data is a string
        if (data['allowedVlans'] && !(typeof data['allowedVlans'] === 'string' || data['allowedVlans'] instanceof String)) {
            throw new Error("Expected the field `allowedVlans` to be a primitive type in the JSON string but got " + data['allowedVlans']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The name of the policy. Only applicable to Access ports. Valid values are: 'open', '8021x-radius', 'mac-radius', 'hybris-radius' for MX64 or Z3 or any MX supporting the per port authentication feature. Otherwise, 'open' is the only valid value and 'open' is the default value if the field is missing.
 * @member {String} accessPolicy
 */
UpdateNetworkAppliancePortRequest.prototype['accessPolicy'] = undefined;

/**
 * Comma-delimited list of the VLAN ID's allowed on the port, or 'all' to permit all VLAN's on the port.
 * @member {String} allowedVlans
 */
UpdateNetworkAppliancePortRequest.prototype['allowedVlans'] = undefined;

/**
 * Trunk port can Drop all Untagged traffic. When true, no VLAN is required. Access ports cannot have dropUntaggedTraffic set to true.
 * @member {Boolean} dropUntaggedTraffic
 */
UpdateNetworkAppliancePortRequest.prototype['dropUntaggedTraffic'] = undefined;

/**
 * The status of the port
 * @member {Boolean} enabled
 */
UpdateNetworkAppliancePortRequest.prototype['enabled'] = undefined;

/**
 * The type of the port: 'access' or 'trunk'.
 * @member {String} type
 */
UpdateNetworkAppliancePortRequest.prototype['type'] = undefined;

/**
 * Native VLAN when the port is in Trunk mode. Access VLAN when the port is in Access mode.
 * @member {Number} vlan
 */
UpdateNetworkAppliancePortRequest.prototype['vlan'] = undefined;






export default UpdateNetworkAppliancePortRequest;

