/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerDevice from './GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerDevice';
import GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerIpv4 from './GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerIpv4';
import GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastAck from './GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastAck';
import GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacket from './GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacket';
import GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerSeenByInner from './GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerSeenByInner';

/**
 * The GetNetworkSwitchDhcpV4ServersSeen200ResponseInner model module.
 * @module model/GetNetworkSwitchDhcpV4ServersSeen200ResponseInner
 * @version 1.32.0
 */
class GetNetworkSwitchDhcpV4ServersSeen200ResponseInner {
    /**
     * Constructs a new <code>GetNetworkSwitchDhcpV4ServersSeen200ResponseInner</code>.
     * @alias module:model/GetNetworkSwitchDhcpV4ServersSeen200ResponseInner
     */
    constructor() { 
        
        GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GetNetworkSwitchDhcpV4ServersSeen200ResponseInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetNetworkSwitchDhcpV4ServersSeen200ResponseInner} obj Optional instance to populate.
     * @return {module:model/GetNetworkSwitchDhcpV4ServersSeen200ResponseInner} The populated <code>GetNetworkSwitchDhcpV4ServersSeen200ResponseInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetNetworkSwitchDhcpV4ServersSeen200ResponseInner();

            if (data.hasOwnProperty('clientId')) {
                obj['clientId'] = ApiClient.convertToType(data['clientId'], 'String');
            }
            if (data.hasOwnProperty('device')) {
                obj['device'] = GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerDevice.constructFromObject(data['device']);
            }
            if (data.hasOwnProperty('ipv4')) {
                obj['ipv4'] = GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerIpv4.constructFromObject(data['ipv4']);
            }
            if (data.hasOwnProperty('isAllowed')) {
                obj['isAllowed'] = ApiClient.convertToType(data['isAllowed'], 'Boolean');
            }
            if (data.hasOwnProperty('isConfigured')) {
                obj['isConfigured'] = ApiClient.convertToType(data['isConfigured'], 'Boolean');
            }
            if (data.hasOwnProperty('lastAck')) {
                obj['lastAck'] = GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastAck.constructFromObject(data['lastAck']);
            }
            if (data.hasOwnProperty('lastPacket')) {
                obj['lastPacket'] = GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacket.constructFromObject(data['lastPacket']);
            }
            if (data.hasOwnProperty('lastSeenAt')) {
                obj['lastSeenAt'] = ApiClient.convertToType(data['lastSeenAt'], 'Date');
            }
            if (data.hasOwnProperty('mac')) {
                obj['mac'] = ApiClient.convertToType(data['mac'], 'String');
            }
            if (data.hasOwnProperty('seenBy')) {
                obj['seenBy'] = ApiClient.convertToType(data['seenBy'], [GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerSeenByInner]);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('vlan')) {
                obj['vlan'] = ApiClient.convertToType(data['vlan'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetNetworkSwitchDhcpV4ServersSeen200ResponseInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetNetworkSwitchDhcpV4ServersSeen200ResponseInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['clientId'] && !(typeof data['clientId'] === 'string' || data['clientId'] instanceof String)) {
            throw new Error("Expected the field `clientId` to be a primitive type in the JSON string but got " + data['clientId']);
        }
        // validate the optional field `device`
        if (data['device']) { // data not null
          GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerDevice.validateJSON(data['device']);
        }
        // validate the optional field `ipv4`
        if (data['ipv4']) { // data not null
          GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerIpv4.validateJSON(data['ipv4']);
        }
        // validate the optional field `lastAck`
        if (data['lastAck']) { // data not null
          GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastAck.validateJSON(data['lastAck']);
        }
        // validate the optional field `lastPacket`
        if (data['lastPacket']) { // data not null
          GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacket.validateJSON(data['lastPacket']);
        }
        // ensure the json data is a string
        if (data['mac'] && !(typeof data['mac'] === 'string' || data['mac'] instanceof String)) {
            throw new Error("Expected the field `mac` to be a primitive type in the JSON string but got " + data['mac']);
        }
        if (data['seenBy']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['seenBy'])) {
                throw new Error("Expected the field `seenBy` to be an array in the JSON data but got " + data['seenBy']);
            }
            // validate the optional field `seenBy` (array)
            for (const item of data['seenBy']) {
                GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerSeenByInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Client id of the server if available.
 * @member {String} clientId
 */
GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.prototype['clientId'] = undefined;

/**
 * @member {module:model/GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerDevice} device
 */
GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.prototype['device'] = undefined;

/**
 * @member {module:model/GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerIpv4} ipv4
 */
GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.prototype['ipv4'] = undefined;

/**
 * Whether the server is allowed or blocked. Always true for configured servers.
 * @member {Boolean} isAllowed
 */
GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.prototype['isAllowed'] = undefined;

/**
 * Whether the server is configured.
 * @member {Boolean} isConfigured
 */
GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.prototype['isConfigured'] = undefined;

/**
 * @member {module:model/GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastAck} lastAck
 */
GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.prototype['lastAck'] = undefined;

/**
 * @member {module:model/GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacket} lastPacket
 */
GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.prototype['lastPacket'] = undefined;

/**
 * Last time the server was seen.
 * @member {Date} lastSeenAt
 */
GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.prototype['lastSeenAt'] = undefined;

/**
 * Mac address of the server.
 * @member {String} mac
 */
GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.prototype['mac'] = undefined;

/**
 * Devices that saw the server.
 * @member {Array.<module:model/GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerSeenByInner>} seenBy
 */
GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.prototype['seenBy'] = undefined;

/**
 * server type. Can be a 'device', 'stack', or 'discovered' (i.e client).
 * @member {module:model/GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.TypeEnum} type
 */
GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.prototype['type'] = undefined;

/**
 * Vlan id of the server.
 * @member {Number} vlan
 */
GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.prototype['vlan'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
GetNetworkSwitchDhcpV4ServersSeen200ResponseInner['TypeEnum'] = {

    /**
     * value: "device"
     * @const
     */
    "device": "device",

    /**
     * value: "discovered"
     * @const
     */
    "discovered": "discovered",

    /**
     * value: "stack"
     * @const
     */
    "stack": "stack"
};



export default GetNetworkSwitchDhcpV4ServersSeen200ResponseInner;

