/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UpdateNetworkApplianceVpnSiteToSiteVpnRequestHubsInner from './UpdateNetworkApplianceVpnSiteToSiteVpnRequestHubsInner';
import UpdateNetworkApplianceVpnSiteToSiteVpnRequestSubnetsInner from './UpdateNetworkApplianceVpnSiteToSiteVpnRequestSubnetsInner';

/**
 * The UpdateNetworkApplianceVpnSiteToSiteVpnRequest model module.
 * @module model/UpdateNetworkApplianceVpnSiteToSiteVpnRequest
 * @version 1.32.0
 */
class UpdateNetworkApplianceVpnSiteToSiteVpnRequest {
    /**
     * Constructs a new <code>UpdateNetworkApplianceVpnSiteToSiteVpnRequest</code>.
     * @alias module:model/UpdateNetworkApplianceVpnSiteToSiteVpnRequest
     * @param mode {module:model/UpdateNetworkApplianceVpnSiteToSiteVpnRequest.ModeEnum} The site-to-site VPN mode. Can be one of 'none', 'spoke' or 'hub'
     */
    constructor(mode) { 
        
        UpdateNetworkApplianceVpnSiteToSiteVpnRequest.initialize(this, mode);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, mode) { 
        obj['mode'] = mode;
    }

    /**
     * Constructs a <code>UpdateNetworkApplianceVpnSiteToSiteVpnRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateNetworkApplianceVpnSiteToSiteVpnRequest} obj Optional instance to populate.
     * @return {module:model/UpdateNetworkApplianceVpnSiteToSiteVpnRequest} The populated <code>UpdateNetworkApplianceVpnSiteToSiteVpnRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateNetworkApplianceVpnSiteToSiteVpnRequest();

            if (data.hasOwnProperty('hubs')) {
                obj['hubs'] = ApiClient.convertToType(data['hubs'], [UpdateNetworkApplianceVpnSiteToSiteVpnRequestHubsInner]);
            }
            if (data.hasOwnProperty('mode')) {
                obj['mode'] = ApiClient.convertToType(data['mode'], 'String');
            }
            if (data.hasOwnProperty('subnets')) {
                obj['subnets'] = ApiClient.convertToType(data['subnets'], [UpdateNetworkApplianceVpnSiteToSiteVpnRequestSubnetsInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateNetworkApplianceVpnSiteToSiteVpnRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateNetworkApplianceVpnSiteToSiteVpnRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UpdateNetworkApplianceVpnSiteToSiteVpnRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['hubs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['hubs'])) {
                throw new Error("Expected the field `hubs` to be an array in the JSON data but got " + data['hubs']);
            }
            // validate the optional field `hubs` (array)
            for (const item of data['hubs']) {
                UpdateNetworkApplianceVpnSiteToSiteVpnRequestHubsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['mode'] && !(typeof data['mode'] === 'string' || data['mode'] instanceof String)) {
            throw new Error("Expected the field `mode` to be a primitive type in the JSON string but got " + data['mode']);
        }
        if (data['subnets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['subnets'])) {
                throw new Error("Expected the field `subnets` to be an array in the JSON data but got " + data['subnets']);
            }
            // validate the optional field `subnets` (array)
            for (const item of data['subnets']) {
                UpdateNetworkApplianceVpnSiteToSiteVpnRequestSubnetsInner.validateJSON(item);
            };
        }

        return true;
    }


}

UpdateNetworkApplianceVpnSiteToSiteVpnRequest.RequiredProperties = ["mode"];

/**
 * The list of VPN hubs, in order of preference. In spoke mode, at least 1 hub is required.
 * @member {Array.<module:model/UpdateNetworkApplianceVpnSiteToSiteVpnRequestHubsInner>} hubs
 */
UpdateNetworkApplianceVpnSiteToSiteVpnRequest.prototype['hubs'] = undefined;

/**
 * The site-to-site VPN mode. Can be one of 'none', 'spoke' or 'hub'
 * @member {module:model/UpdateNetworkApplianceVpnSiteToSiteVpnRequest.ModeEnum} mode
 */
UpdateNetworkApplianceVpnSiteToSiteVpnRequest.prototype['mode'] = undefined;

/**
 * The list of subnets and their VPN presence.
 * @member {Array.<module:model/UpdateNetworkApplianceVpnSiteToSiteVpnRequestSubnetsInner>} subnets
 */
UpdateNetworkApplianceVpnSiteToSiteVpnRequest.prototype['subnets'] = undefined;





/**
 * Allowed values for the <code>mode</code> property.
 * @enum {String}
 * @readonly
 */
UpdateNetworkApplianceVpnSiteToSiteVpnRequest['ModeEnum'] = {

    /**
     * value: "hub"
     * @const
     */
    "hub": "hub",

    /**
     * value: "none"
     * @const
     */
    "none": "none",

    /**
     * value: "spoke"
     * @const
     */
    "spoke": "spoke"
};



export default UpdateNetworkApplianceVpnSiteToSiteVpnRequest;

