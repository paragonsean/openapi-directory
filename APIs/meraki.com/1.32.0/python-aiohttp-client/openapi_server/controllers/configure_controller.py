from typing import List, Dict
from aiohttp import web

from openapi_server.models.add_network_switch_stack_request import AddNetworkSwitchStackRequest
from openapi_server.models.assign_organization_licenses_seats200_response import AssignOrganizationLicensesSeats200Response
from openapi_server.models.assign_organization_licenses_seats_request import AssignOrganizationLicensesSeatsRequest
from openapi_server.models.bind_network_request import BindNetworkRequest
from openapi_server.models.checkin_network_sm_devices200_response import CheckinNetworkSmDevices200Response
from openapi_server.models.checkin_network_sm_devices_request import CheckinNetworkSmDevicesRequest
from openapi_server.models.claim_into_organization_inventory_request import ClaimIntoOrganizationInventoryRequest
from openapi_server.models.claim_into_organization_request import ClaimIntoOrganizationRequest
from openapi_server.models.claim_network_devices_request import ClaimNetworkDevicesRequest
from openapi_server.models.clone_organization_request import CloneOrganizationRequest
from openapi_server.models.clone_organization_switch_devices_request import CloneOrganizationSwitchDevicesRequest
from openapi_server.models.combine_organization_networks200_response import CombineOrganizationNetworks200Response
from openapi_server.models.combine_organization_networks_request import CombineOrganizationNetworksRequest
from openapi_server.models.create_device_appliance_vmx_authentication_token201_response import CreateDeviceApplianceVmxAuthenticationToken201Response
from openapi_server.models.create_device_switch_routing_interface_request import CreateDeviceSwitchRoutingInterfaceRequest
from openapi_server.models.create_device_switch_routing_static_route_request import CreateDeviceSwitchRoutingStaticRouteRequest
from openapi_server.models.create_network_appliance_prefixes_delegated_static_request import CreateNetworkAppliancePrefixesDelegatedStaticRequest
from openapi_server.models.create_network_appliance_static_route_request import CreateNetworkApplianceStaticRouteRequest
from openapi_server.models.create_network_appliance_traffic_shaping_custom_performance_class_request import CreateNetworkApplianceTrafficShapingCustomPerformanceClassRequest
from openapi_server.models.create_network_appliance_vlan201_response import CreateNetworkApplianceVlan201Response
from openapi_server.models.create_network_appliance_vlan_request import CreateNetworkApplianceVlanRequest
from openapi_server.models.create_network_camera_quality_retention_profile_request import CreateNetworkCameraQualityRetentionProfileRequest
from openapi_server.models.create_network_camera_wireless_profile_request import CreateNetworkCameraWirelessProfileRequest
from openapi_server.models.create_network_firmware_upgrades_rollback200_response import CreateNetworkFirmwareUpgradesRollback200Response
from openapi_server.models.create_network_firmware_upgrades_rollback_request import CreateNetworkFirmwareUpgradesRollbackRequest
from openapi_server.models.create_network_firmware_upgrades_staged_event_request import CreateNetworkFirmwareUpgradesStagedEventRequest
from openapi_server.models.create_network_firmware_upgrades_staged_group_request import CreateNetworkFirmwareUpgradesStagedGroupRequest
from openapi_server.models.create_network_floor_plan_request import CreateNetworkFloorPlanRequest
from openapi_server.models.create_network_group_policy_request import CreateNetworkGroupPolicyRequest
from openapi_server.models.create_network_meraki_auth_user_request import CreateNetworkMerakiAuthUserRequest
from openapi_server.models.create_network_mqtt_broker_request import CreateNetworkMqttBrokerRequest
from openapi_server.models.create_network_pii_request_request import CreateNetworkPiiRequestRequest
from openapi_server.models.create_network_sensor_alerts_profile_request import CreateNetworkSensorAlertsProfileRequest
from openapi_server.models.create_network_sm_bypass_activation_lock_attempt_request import CreateNetworkSmBypassActivationLockAttemptRequest
from openapi_server.models.create_network_sm_target_group_request import CreateNetworkSmTargetGroupRequest
from openapi_server.models.create_network_switch_access_policy_request import CreateNetworkSwitchAccessPolicyRequest
from openapi_server.models.create_network_switch_dhcp_server_policy_arp_inspection_trusted_server_request import CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest
from openapi_server.models.create_network_switch_link_aggregation_request import CreateNetworkSwitchLinkAggregationRequest
from openapi_server.models.create_network_switch_port_schedule_request import CreateNetworkSwitchPortScheduleRequest
from openapi_server.models.create_network_switch_qos_rule_request import CreateNetworkSwitchQosRuleRequest
from openapi_server.models.create_network_switch_routing_multicast_rendezvous_point_request import CreateNetworkSwitchRoutingMulticastRendezvousPointRequest
from openapi_server.models.create_network_switch_stack_request import CreateNetworkSwitchStackRequest
from openapi_server.models.create_network_switch_stack_routing_interface_request import CreateNetworkSwitchStackRoutingInterfaceRequest
from openapi_server.models.create_network_webhooks_http_server_request import CreateNetworkWebhooksHttpServerRequest
from openapi_server.models.create_network_webhooks_payload_template_request import CreateNetworkWebhooksPayloadTemplateRequest
from openapi_server.models.create_network_webhooks_webhook_test201_response import CreateNetworkWebhooksWebhookTest201Response
from openapi_server.models.create_network_webhooks_webhook_test_request import CreateNetworkWebhooksWebhookTestRequest
from openapi_server.models.create_network_wireless_rf_profile201_response import CreateNetworkWirelessRfProfile201Response
from openapi_server.models.create_network_wireless_rf_profile_request import CreateNetworkWirelessRfProfileRequest
from openapi_server.models.create_network_wireless_ssid_identity_psk_request import CreateNetworkWirelessSsidIdentityPskRequest
from openapi_server.models.create_organization_action_batch201_response import CreateOrganizationActionBatch201Response
from openapi_server.models.create_organization_action_batch_request import CreateOrganizationActionBatchRequest
from openapi_server.models.create_organization_adaptive_policy_acl_request import CreateOrganizationAdaptivePolicyAclRequest
from openapi_server.models.create_organization_adaptive_policy_group_request import CreateOrganizationAdaptivePolicyGroupRequest
from openapi_server.models.create_organization_adaptive_policy_policy_request import CreateOrganizationAdaptivePolicyPolicyRequest
from openapi_server.models.create_organization_admin_request import CreateOrganizationAdminRequest
from openapi_server.models.create_organization_alerts_profile_request import CreateOrganizationAlertsProfileRequest
from openapi_server.models.create_organization_branding_policy201_response import CreateOrganizationBrandingPolicy201Response
from openapi_server.models.create_organization_branding_policy_request import CreateOrganizationBrandingPolicyRequest
from openapi_server.models.create_organization_camera_custom_analytics_artifact_request import CreateOrganizationCameraCustomAnalyticsArtifactRequest
from openapi_server.models.create_organization_config_template_request import CreateOrganizationConfigTemplateRequest
from openapi_server.models.create_organization_early_access_features_opt_in_request import CreateOrganizationEarlyAccessFeaturesOptInRequest
from openapi_server.models.create_organization_insight_monitored_media_server_request import CreateOrganizationInsightMonitoredMediaServerRequest
from openapi_server.models.create_organization_inventory_onboarding_cloud_monitoring_export_event_request import CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest
from openapi_server.models.create_organization_inventory_onboarding_cloud_monitoring_import201_response_inner import CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner
from openapi_server.models.create_organization_inventory_onboarding_cloud_monitoring_import_request import CreateOrganizationInventoryOnboardingCloudMonitoringImportRequest
from openapi_server.models.create_organization_inventory_onboarding_cloud_monitoring_prepare201_response_inner import CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner
from openapi_server.models.create_organization_inventory_onboarding_cloud_monitoring_prepare_request import CreateOrganizationInventoryOnboardingCloudMonitoringPrepareRequest
from openapi_server.models.create_organization_network_request import CreateOrganizationNetworkRequest
from openapi_server.models.create_organization_policy_object_request import CreateOrganizationPolicyObjectRequest
from openapi_server.models.create_organization_policy_objects_group_request import CreateOrganizationPolicyObjectsGroupRequest
from openapi_server.models.create_organization_request import CreateOrganizationRequest
from openapi_server.models.create_organization_saml_idp_request import CreateOrganizationSamlIdpRequest
from openapi_server.models.create_organization_saml_role_request import CreateOrganizationSamlRoleRequest
from openapi_server.models.get_device_appliance_uplinks_settings200_response import GetDeviceApplianceUplinksSettings200Response
from openapi_server.models.get_device_sensor_relationships200_response_inner import GetDeviceSensorRelationships200ResponseInner
from openapi_server.models.get_device_switch_ports200_response_inner import GetDeviceSwitchPorts200ResponseInner
from openapi_server.models.get_device_switch_routing_interfaces200_response_inner import GetDeviceSwitchRoutingInterfaces200ResponseInner
from openapi_server.models.get_device_switch_routing_static_route200_response import GetDeviceSwitchRoutingStaticRoute200Response
from openapi_server.models.get_device_wireless_bluetooth_settings200_response import GetDeviceWirelessBluetoothSettings200Response
from openapi_server.models.get_network200_response import GetNetwork200Response
from openapi_server.models.get_network_appliance_ports200_response_inner import GetNetworkAppliancePorts200ResponseInner
from openapi_server.models.get_network_appliance_prefixes_delegated_statics200_response_inner import GetNetworkAppliancePrefixesDelegatedStatics200ResponseInner
from openapi_server.models.get_network_appliance_settings200_response import GetNetworkApplianceSettings200Response
from openapi_server.models.get_network_appliance_single_lan200_response import GetNetworkApplianceSingleLan200Response
from openapi_server.models.get_network_appliance_ssids200_response_inner import GetNetworkApplianceSsids200ResponseInner
from openapi_server.models.get_network_appliance_traffic_shaping_uplink_bandwidth200_response import GetNetworkApplianceTrafficShapingUplinkBandwidth200Response
from openapi_server.models.get_network_appliance_traffic_shaping_uplink_selection200_response import GetNetworkApplianceTrafficShapingUplinkSelection200Response
from openapi_server.models.get_network_appliance_vlans200_response_inner import GetNetworkApplianceVlans200ResponseInner
from openapi_server.models.get_network_appliance_vpn_site_to_site_vpn200_response import GetNetworkApplianceVpnSiteToSiteVpn200Response
from openapi_server.models.get_network_cellular_gateway_dhcp200_response import GetNetworkCellularGatewayDhcp200Response
from openapi_server.models.get_network_firmware_upgrades200_response import GetNetworkFirmwareUpgrades200Response
from openapi_server.models.get_network_firmware_upgrades_staged_events200_response import GetNetworkFirmwareUpgradesStagedEvents200Response
from openapi_server.models.get_network_firmware_upgrades_staged_groups200_response_inner import GetNetworkFirmwareUpgradesStagedGroups200ResponseInner
from openapi_server.models.get_network_firmware_upgrades_staged_stages200_response_inner import GetNetworkFirmwareUpgradesStagedStages200ResponseInner
from openapi_server.models.get_network_health_alerts200_response_inner import GetNetworkHealthAlerts200ResponseInner
from openapi_server.models.get_network_meraki_auth_users200_response_inner import GetNetworkMerakiAuthUsers200ResponseInner
from openapi_server.models.get_network_policies_by_client200_response_inner import GetNetworkPoliciesByClient200ResponseInner
from openapi_server.models.get_network_sensor_alerts_profiles200_response_inner import GetNetworkSensorAlertsProfiles200ResponseInner
from openapi_server.models.get_network_sensor_relationships200_response_inner import GetNetworkSensorRelationships200ResponseInner
from openapi_server.models.get_network_settings200_response import GetNetworkSettings200Response
from openapi_server.models.get_network_sm_device_certs200_response_inner import GetNetworkSmDeviceCerts200ResponseInner
from openapi_server.models.get_network_sm_device_device_profiles200_response_inner import GetNetworkSmDeviceDeviceProfiles200ResponseInner
from openapi_server.models.get_network_sm_device_network_adapters200_response_inner import GetNetworkSmDeviceNetworkAdapters200ResponseInner
from openapi_server.models.get_network_sm_device_security_centers200_response_inner import GetNetworkSmDeviceSecurityCenters200ResponseInner
from openapi_server.models.get_network_sm_device_softwares200_response_inner import GetNetworkSmDeviceSoftwares200ResponseInner
from openapi_server.models.get_network_sm_device_wlan_lists200_response_inner import GetNetworkSmDeviceWlanLists200ResponseInner
from openapi_server.models.get_network_sm_devices200_response_inner import GetNetworkSmDevices200ResponseInner
from openapi_server.models.get_network_sm_profiles200_response_inner import GetNetworkSmProfiles200ResponseInner
from openapi_server.models.get_network_sm_trusted_access_configs200_response_inner import GetNetworkSmTrustedAccessConfigs200ResponseInner
from openapi_server.models.get_network_sm_user_access_devices200_response_inner import GetNetworkSmUserAccessDevices200ResponseInner
from openapi_server.models.get_network_sm_users200_response_inner import GetNetworkSmUsers200ResponseInner
from openapi_server.models.get_network_switch_access_control_lists200_response import GetNetworkSwitchAccessControlLists200Response
from openapi_server.models.get_network_switch_access_policies200_response_inner import GetNetworkSwitchAccessPolicies200ResponseInner
from openapi_server.models.get_network_switch_dhcp_server_policy_arp_inspection_trusted_servers200_response_inner import GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner
from openapi_server.models.get_network_switch_dhcp_server_policy_arp_inspection_warnings_by_device200_response_inner import GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner
from openapi_server.models.get_network_switch_dhcp_v4_servers_seen200_response_inner import GetNetworkSwitchDhcpV4ServersSeen200ResponseInner
from openapi_server.models.get_network_switch_mtu200_response import GetNetworkSwitchMtu200Response
from openapi_server.models.get_network_switch_settings200_response import GetNetworkSwitchSettings200Response
from openapi_server.models.get_network_switch_stack200_response import GetNetworkSwitchStack200Response
from openapi_server.models.get_network_switch_storm_control200_response import GetNetworkSwitchStormControl200Response
from openapi_server.models.get_network_syslog_servers200_response import GetNetworkSyslogServers200Response
from openapi_server.models.get_network_webhooks_http_servers200_response_inner import GetNetworkWebhooksHttpServers200ResponseInner
from openapi_server.models.get_network_webhooks_payload_templates200_response_inner import GetNetworkWebhooksPayloadTemplates200ResponseInner
from openapi_server.models.get_network_wireless_bluetooth_settings200_response import GetNetworkWirelessBluetoothSettings200Response
from openapi_server.models.get_network_wireless_settings200_response import GetNetworkWirelessSettings200Response
from openapi_server.models.get_network_wireless_ssid_eap_override200_response import GetNetworkWirelessSsidEapOverride200Response
from openapi_server.models.get_network_wireless_ssid_identity_psks200_response_inner import GetNetworkWirelessSsidIdentityPsks200ResponseInner
from openapi_server.models.get_network_wireless_ssid_splash_settings200_response import GetNetworkWirelessSsidSplashSettings200Response
from openapi_server.models.get_organization_appliance_vpn_third_party_vpn_peers200_response import GetOrganizationApplianceVpnThirdPartyVPNPeers200Response
from openapi_server.models.get_organization_branding_policies200_response_inner import GetOrganizationBrandingPolicies200ResponseInner
from openapi_server.models.get_organization_branding_policies_priorities200_response import GetOrganizationBrandingPoliciesPriorities200Response
from openapi_server.models.get_organization_config_template_switch_profile_ports200_response_inner import GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner
from openapi_server.models.get_organization_config_template_switch_profiles200_response import GetOrganizationConfigTemplateSwitchProfiles200Response
from openapi_server.models.get_organization_devices200_response_inner import GetOrganizationDevices200ResponseInner
from openapi_server.models.get_organization_firmware_upgrades200_response_inner import GetOrganizationFirmwareUpgrades200ResponseInner
from openapi_server.models.get_organization_firmware_upgrades_by_device200_response_inner import GetOrganizationFirmwareUpgradesByDevice200ResponseInner
from openapi_server.models.get_organization_insight_applications200_response_inner import GetOrganizationInsightApplications200ResponseInner
from openapi_server.models.get_organization_insight_monitored_media_servers200_response_inner import GetOrganizationInsightMonitoredMediaServers200ResponseInner
from openapi_server.models.get_organization_inventory_devices200_response_inner import GetOrganizationInventoryDevices200ResponseInner
from openapi_server.models.get_organization_inventory_onboarding_cloud_monitoring_imports200_response_inner import GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner
from openapi_server.models.get_organization_licenses200_response_inner import GetOrganizationLicenses200ResponseInner
from openapi_server.models.get_organization_licensing_coterm_licenses200_response_inner import GetOrganizationLicensingCotermLicenses200ResponseInner
from openapi_server.models.get_organization_login_security200_response import GetOrganizationLoginSecurity200Response
from openapi_server.models.get_organization_saml200_response import GetOrganizationSaml200Response
from openapi_server.models.get_organization_saml_idps200_response_inner import GetOrganizationSamlIdps200ResponseInner
from openapi_server.models.get_organization_sm_apns_cert200_response import GetOrganizationSmApnsCert200Response
from openapi_server.models.get_organization_sm_vpp_accounts200_response_inner import GetOrganizationSmVppAccounts200ResponseInner
from openapi_server.models.get_organization_switch_ports_by_switch200_response_inner import GetOrganizationSwitchPortsBySwitch200ResponseInner
from openapi_server.models.get_organization_wireless_devices_ethernet_statuses200_response_inner import GetOrganizationWirelessDevicesEthernetStatuses200ResponseInner
from openapi_server.models.get_organizations200_response_inner import GetOrganizations200ResponseInner
from openapi_server.models.lock_network_sm_devices_request import LockNetworkSmDevicesRequest
from openapi_server.models.modify_network_sm_devices_tags200_response_inner import ModifyNetworkSmDevicesTags200ResponseInner
from openapi_server.models.modify_network_sm_devices_tags_request import ModifyNetworkSmDevicesTagsRequest
from openapi_server.models.move_network_sm_devices200_response import MoveNetworkSmDevices200Response
from openapi_server.models.move_network_sm_devices_request import MoveNetworkSmDevicesRequest
from openapi_server.models.move_organization_licenses200_response import MoveOrganizationLicenses200Response
from openapi_server.models.move_organization_licenses_request import MoveOrganizationLicensesRequest
from openapi_server.models.move_organization_licenses_seats200_response import MoveOrganizationLicensesSeats200Response
from openapi_server.models.move_organization_licenses_seats_request import MoveOrganizationLicensesSeatsRequest
from openapi_server.models.move_organization_licensing_coterm_licenses200_response import MoveOrganizationLicensingCotermLicenses200Response
from openapi_server.models.move_organization_licensing_coterm_licenses_request import MoveOrganizationLicensingCotermLicensesRequest
from openapi_server.models.provision_network_clients_request import ProvisionNetworkClientsRequest
from openapi_server.models.release_from_organization_inventory_request import ReleaseFromOrganizationInventoryRequest
from openapi_server.models.remove_network_devices_request import RemoveNetworkDevicesRequest
from openapi_server.models.remove_network_switch_stack_request import RemoveNetworkSwitchStackRequest
from openapi_server.models.renew_organization_licenses_seats_request import RenewOrganizationLicensesSeatsRequest
from openapi_server.models.rollbacks_network_firmware_upgrades_staged_events_request import RollbacksNetworkFirmwareUpgradesStagedEventsRequest
from openapi_server.models.split_network200_response import SplitNetwork200Response
from openapi_server.models.unbind_network_request import UnbindNetworkRequest
from openapi_server.models.update_device_appliance_uplinks_settings_request import UpdateDeviceApplianceUplinksSettingsRequest
from openapi_server.models.update_device_camera_custom_analytics_request import UpdateDeviceCameraCustomAnalyticsRequest
from openapi_server.models.update_device_camera_quality_and_retention_request import UpdateDeviceCameraQualityAndRetentionRequest
from openapi_server.models.update_device_camera_sense_request import UpdateDeviceCameraSenseRequest
from openapi_server.models.update_device_camera_video_settings_request import UpdateDeviceCameraVideoSettingsRequest
from openapi_server.models.update_device_camera_wireless_profiles_request import UpdateDeviceCameraWirelessProfilesRequest
from openapi_server.models.update_device_cellular_gateway_lan_request import UpdateDeviceCellularGatewayLanRequest
from openapi_server.models.update_device_cellular_gateway_port_forwarding_rules_request import UpdateDeviceCellularGatewayPortForwardingRulesRequest
from openapi_server.models.update_device_cellular_sims_request import UpdateDeviceCellularSimsRequest
from openapi_server.models.update_device_management_interface_request import UpdateDeviceManagementInterfaceRequest
from openapi_server.models.update_device_request import UpdateDeviceRequest
from openapi_server.models.update_device_sensor_relationships_request import UpdateDeviceSensorRelationshipsRequest
from openapi_server.models.update_device_switch_port_request import UpdateDeviceSwitchPortRequest
from openapi_server.models.update_device_switch_routing_interface_dhcp_request import UpdateDeviceSwitchRoutingInterfaceDhcpRequest
from openapi_server.models.update_device_switch_routing_static_route_request import UpdateDeviceSwitchRoutingStaticRouteRequest
from openapi_server.models.update_device_switch_warm_spare_request import UpdateDeviceSwitchWarmSpareRequest
from openapi_server.models.update_device_wireless_bluetooth_settings_request import UpdateDeviceWirelessBluetoothSettingsRequest
from openapi_server.models.update_device_wireless_radio_settings_request import UpdateDeviceWirelessRadioSettingsRequest
from openapi_server.models.update_network_alerts_settings_request import UpdateNetworkAlertsSettingsRequest
from openapi_server.models.update_network_appliance_connectivity_monitoring_destinations_request import UpdateNetworkApplianceConnectivityMonitoringDestinationsRequest
from openapi_server.models.update_network_appliance_content_filtering_request import UpdateNetworkApplianceContentFilteringRequest
from openapi_server.models.update_network_appliance_firewall_cellular_firewall_rules_request import UpdateNetworkApplianceFirewallCellularFirewallRulesRequest
from openapi_server.models.update_network_appliance_firewall_firewalled_service_request import UpdateNetworkApplianceFirewallFirewalledServiceRequest
from openapi_server.models.update_network_appliance_firewall_inbound_firewall_rules_request import UpdateNetworkApplianceFirewallInboundFirewallRulesRequest
from openapi_server.models.update_network_appliance_firewall_l7_firewall_rules_request import UpdateNetworkApplianceFirewallL7FirewallRulesRequest
from openapi_server.models.update_network_appliance_firewall_one_to_many_nat_rules_request import UpdateNetworkApplianceFirewallOneToManyNatRulesRequest
from openapi_server.models.update_network_appliance_firewall_one_to_one_nat_rules_request import UpdateNetworkApplianceFirewallOneToOneNatRulesRequest
from openapi_server.models.update_network_appliance_firewall_port_forwarding_rules_request import UpdateNetworkApplianceFirewallPortForwardingRulesRequest
from openapi_server.models.update_network_appliance_firewall_settings_request import UpdateNetworkApplianceFirewallSettingsRequest
from openapi_server.models.update_network_appliance_port_request import UpdateNetworkAppliancePortRequest
from openapi_server.models.update_network_appliance_prefixes_delegated_static_request import UpdateNetworkAppliancePrefixesDelegatedStaticRequest
from openapi_server.models.update_network_appliance_security_intrusion_request import UpdateNetworkApplianceSecurityIntrusionRequest
from openapi_server.models.update_network_appliance_security_malware_request import UpdateNetworkApplianceSecurityMalwareRequest
from openapi_server.models.update_network_appliance_settings_request import UpdateNetworkApplianceSettingsRequest
from openapi_server.models.update_network_appliance_single_lan_request import UpdateNetworkApplianceSingleLanRequest
from openapi_server.models.update_network_appliance_ssid_request import UpdateNetworkApplianceSsidRequest
from openapi_server.models.update_network_appliance_static_route_request import UpdateNetworkApplianceStaticRouteRequest
from openapi_server.models.update_network_appliance_traffic_shaping_custom_performance_class_request import UpdateNetworkApplianceTrafficShapingCustomPerformanceClassRequest
from openapi_server.models.update_network_appliance_traffic_shaping_request import UpdateNetworkApplianceTrafficShapingRequest
from openapi_server.models.update_network_appliance_traffic_shaping_rules_request import UpdateNetworkApplianceTrafficShapingRulesRequest
from openapi_server.models.update_network_appliance_traffic_shaping_uplink_bandwidth_request import UpdateNetworkApplianceTrafficShapingUplinkBandwidthRequest
from openapi_server.models.update_network_appliance_traffic_shaping_uplink_selection_request import UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest
from openapi_server.models.update_network_appliance_vlan_request import UpdateNetworkApplianceVlanRequest
from openapi_server.models.update_network_appliance_vlans_settings_request import UpdateNetworkApplianceVlansSettingsRequest
from openapi_server.models.update_network_appliance_vpn_bgp_request import UpdateNetworkApplianceVpnBgpRequest
from openapi_server.models.update_network_appliance_vpn_site_to_site_vpn_request import UpdateNetworkApplianceVpnSiteToSiteVpnRequest
from openapi_server.models.update_network_appliance_warm_spare_request import UpdateNetworkApplianceWarmSpareRequest
from openapi_server.models.update_network_camera_quality_retention_profile_request import UpdateNetworkCameraQualityRetentionProfileRequest
from openapi_server.models.update_network_camera_wireless_profile_request import UpdateNetworkCameraWirelessProfileRequest
from openapi_server.models.update_network_cellular_gateway_connectivity_monitoring_destinations_request import UpdateNetworkCellularGatewayConnectivityMonitoringDestinationsRequest
from openapi_server.models.update_network_cellular_gateway_dhcp_request import UpdateNetworkCellularGatewayDhcpRequest
from openapi_server.models.update_network_cellular_gateway_subnet_pool_request import UpdateNetworkCellularGatewaySubnetPoolRequest
from openapi_server.models.update_network_cellular_gateway_uplink_request import UpdateNetworkCellularGatewayUplinkRequest
from openapi_server.models.update_network_client_policy_request import UpdateNetworkClientPolicyRequest
from openapi_server.models.update_network_client_splash_authorization_status_request import UpdateNetworkClientSplashAuthorizationStatusRequest
from openapi_server.models.update_network_firmware_upgrades_request import UpdateNetworkFirmwareUpgradesRequest
from openapi_server.models.update_network_firmware_upgrades_staged_events_request import UpdateNetworkFirmwareUpgradesStagedEventsRequest
from openapi_server.models.update_network_firmware_upgrades_staged_stages_request import UpdateNetworkFirmwareUpgradesStagedStagesRequest
from openapi_server.models.update_network_floor_plan_request import UpdateNetworkFloorPlanRequest
from openapi_server.models.update_network_group_policy_request import UpdateNetworkGroupPolicyRequest
from openapi_server.models.update_network_meraki_auth_user_request import UpdateNetworkMerakiAuthUserRequest
from openapi_server.models.update_network_mqtt_broker_request import UpdateNetworkMqttBrokerRequest
from openapi_server.models.update_network_netflow_request import UpdateNetworkNetflowRequest
from openapi_server.models.update_network_request import UpdateNetworkRequest
from openapi_server.models.update_network_sensor_alerts_profile_request import UpdateNetworkSensorAlertsProfileRequest
from openapi_server.models.update_network_settings_request import UpdateNetworkSettingsRequest
from openapi_server.models.update_network_sm_devices_fields200_response_inner import UpdateNetworkSmDevicesFields200ResponseInner
from openapi_server.models.update_network_sm_devices_fields_request import UpdateNetworkSmDevicesFieldsRequest
from openapi_server.models.update_network_snmp_request import UpdateNetworkSnmpRequest
from openapi_server.models.update_network_switch_access_control_lists_request import UpdateNetworkSwitchAccessControlListsRequest
from openapi_server.models.update_network_switch_access_policy_request import UpdateNetworkSwitchAccessPolicyRequest
from openapi_server.models.update_network_switch_alternate_management_interface_request import UpdateNetworkSwitchAlternateManagementInterfaceRequest
from openapi_server.models.update_network_switch_dhcp_server_policy_arp_inspection_trusted_server_request import UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest
from openapi_server.models.update_network_switch_dhcp_server_policy_request import UpdateNetworkSwitchDhcpServerPolicyRequest
from openapi_server.models.update_network_switch_dscp_to_cos_mappings_request import UpdateNetworkSwitchDscpToCosMappingsRequest
from openapi_server.models.update_network_switch_link_aggregation_request import UpdateNetworkSwitchLinkAggregationRequest
from openapi_server.models.update_network_switch_mtu_request import UpdateNetworkSwitchMtuRequest
from openapi_server.models.update_network_switch_port_schedule_request import UpdateNetworkSwitchPortScheduleRequest
from openapi_server.models.update_network_switch_qos_rule_request import UpdateNetworkSwitchQosRuleRequest
from openapi_server.models.update_network_switch_qos_rules_order_request import UpdateNetworkSwitchQosRulesOrderRequest
from openapi_server.models.update_network_switch_routing_multicast_rendezvous_point_request import UpdateNetworkSwitchRoutingMulticastRendezvousPointRequest
from openapi_server.models.update_network_switch_routing_multicast_request import UpdateNetworkSwitchRoutingMulticastRequest
from openapi_server.models.update_network_switch_routing_ospf_request import UpdateNetworkSwitchRoutingOspfRequest
from openapi_server.models.update_network_switch_settings_request import UpdateNetworkSwitchSettingsRequest
from openapi_server.models.update_network_switch_stack_routing_interface_dhcp_request import UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest
from openapi_server.models.update_network_switch_stack_routing_interface_request import UpdateNetworkSwitchStackRoutingInterfaceRequest
from openapi_server.models.update_network_switch_storm_control_request import UpdateNetworkSwitchStormControlRequest
from openapi_server.models.update_network_switch_stp_request import UpdateNetworkSwitchStpRequest
from openapi_server.models.update_network_syslog_servers_request import UpdateNetworkSyslogServersRequest
from openapi_server.models.update_network_traffic_analysis_request import UpdateNetworkTrafficAnalysisRequest
from openapi_server.models.update_network_webhooks_http_server_request import UpdateNetworkWebhooksHttpServerRequest
from openapi_server.models.update_network_webhooks_payload_template_request import UpdateNetworkWebhooksPayloadTemplateRequest
from openapi_server.models.update_network_wireless_alternate_management_interface_request import UpdateNetworkWirelessAlternateManagementInterfaceRequest
from openapi_server.models.update_network_wireless_billing_request import UpdateNetworkWirelessBillingRequest
from openapi_server.models.update_network_wireless_bluetooth_settings_request import UpdateNetworkWirelessBluetoothSettingsRequest
from openapi_server.models.update_network_wireless_rf_profile_request import UpdateNetworkWirelessRfProfileRequest
from openapi_server.models.update_network_wireless_settings_request import UpdateNetworkWirelessSettingsRequest
from openapi_server.models.update_network_wireless_ssid_bonjour_forwarding_request import UpdateNetworkWirelessSsidBonjourForwardingRequest
from openapi_server.models.update_network_wireless_ssid_device_type_group_policies_request import UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesRequest
from openapi_server.models.update_network_wireless_ssid_eap_override_request import UpdateNetworkWirelessSsidEapOverrideRequest
from openapi_server.models.update_network_wireless_ssid_firewall_l3_firewall_rules_request import UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequest
from openapi_server.models.update_network_wireless_ssid_firewall_l7_firewall_rules_request import UpdateNetworkWirelessSsidFirewallL7FirewallRulesRequest
from openapi_server.models.update_network_wireless_ssid_hotspot20_request import UpdateNetworkWirelessSsidHotspot20Request
from openapi_server.models.update_network_wireless_ssid_identity_psk_request import UpdateNetworkWirelessSsidIdentityPskRequest
from openapi_server.models.update_network_wireless_ssid_request import UpdateNetworkWirelessSsidRequest
from openapi_server.models.update_network_wireless_ssid_schedules_request import UpdateNetworkWirelessSsidSchedulesRequest
from openapi_server.models.update_network_wireless_ssid_splash_settings_request import UpdateNetworkWirelessSsidSplashSettingsRequest
from openapi_server.models.update_network_wireless_ssid_traffic_shaping_rules_request import UpdateNetworkWirelessSsidTrafficShapingRulesRequest
from openapi_server.models.update_network_wireless_ssid_vpn_request import UpdateNetworkWirelessSsidVpnRequest
from openapi_server.models.update_organization_action_batch_request import UpdateOrganizationActionBatchRequest
from openapi_server.models.update_organization_adaptive_policy_acl_request import UpdateOrganizationAdaptivePolicyAclRequest
from openapi_server.models.update_organization_adaptive_policy_group_request import UpdateOrganizationAdaptivePolicyGroupRequest
from openapi_server.models.update_organization_adaptive_policy_policy_request import UpdateOrganizationAdaptivePolicyPolicyRequest
from openapi_server.models.update_organization_adaptive_policy_settings_request import UpdateOrganizationAdaptivePolicySettingsRequest
from openapi_server.models.update_organization_admin_request import UpdateOrganizationAdminRequest
from openapi_server.models.update_organization_alerts_profile_request import UpdateOrganizationAlertsProfileRequest
from openapi_server.models.update_organization_appliance_security_intrusion_request import UpdateOrganizationApplianceSecurityIntrusionRequest
from openapi_server.models.update_organization_appliance_vpn_third_party_vpn_peers_request import UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequest
from openapi_server.models.update_organization_appliance_vpn_vpn_firewall_rules_request import UpdateOrganizationApplianceVpnVpnFirewallRulesRequest
from openapi_server.models.update_organization_branding_policies_priorities_request import UpdateOrganizationBrandingPoliciesPrioritiesRequest
from openapi_server.models.update_organization_branding_policy_request import UpdateOrganizationBrandingPolicyRequest
from openapi_server.models.update_organization_camera_onboarding_statuses_request import UpdateOrganizationCameraOnboardingStatusesRequest
from openapi_server.models.update_organization_config_template_request import UpdateOrganizationConfigTemplateRequest
from openapi_server.models.update_organization_config_template_switch_profile_port_request import UpdateOrganizationConfigTemplateSwitchProfilePortRequest
from openapi_server.models.update_organization_early_access_features_opt_in_request import UpdateOrganizationEarlyAccessFeaturesOptInRequest
from openapi_server.models.update_organization_insight_monitored_media_server_request import UpdateOrganizationInsightMonitoredMediaServerRequest
from openapi_server.models.update_organization_license_request import UpdateOrganizationLicenseRequest
from openapi_server.models.update_organization_login_security_request import UpdateOrganizationLoginSecurityRequest
from openapi_server.models.update_organization_policy_object_request import UpdateOrganizationPolicyObjectRequest
from openapi_server.models.update_organization_policy_objects_group_request import UpdateOrganizationPolicyObjectsGroupRequest
from openapi_server.models.update_organization_request import UpdateOrganizationRequest
from openapi_server.models.update_organization_saml_idp_request import UpdateOrganizationSamlIdpRequest
from openapi_server.models.update_organization_saml_request import UpdateOrganizationSamlRequest
from openapi_server.models.update_organization_saml_role200_response import UpdateOrganizationSamlRole200Response
from openapi_server.models.update_organization_saml_role_request import UpdateOrganizationSamlRoleRequest
from openapi_server.models.update_organization_snmp_request import UpdateOrganizationSnmpRequest
from openapi_server.models.vmx_network_devices_claim_request import VmxNetworkDevicesClaimRequest
from openapi_server.models.wipe_network_sm_devices200_response import WipeNetworkSmDevices200Response
from openapi_server.models.wipe_network_sm_devices_request import WipeNetworkSmDevicesRequest
from openapi_server import util


async def add_network_switch_stack_0(request: web.Request, network_id, switch_stack_id, body) -> web.Response:
    """Add a switch to a stack

    Add a switch to a stack

    :param network_id: 
    :type network_id: str
    :param switch_stack_id: 
    :type switch_stack_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = AddNetworkSwitchStackRequest.from_dict(body)
    return web.Response(status=200)


async def assign_organization_licenses_seats_0(request: web.Request, organization_id, body) -> web.Response:
    """Assign SM seats to a network

    Assign SM seats to a network. This will increase the managed SM device limit of the network

    :param organization_id: 
    :type organization_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = AssignOrganizationLicensesSeatsRequest.from_dict(body)
    return web.Response(status=200)


async def bind_network_0(request: web.Request, network_id, body) -> web.Response:
    """Bind a network to a template.

    Bind a network to a template.

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = BindNetworkRequest.from_dict(body)
    return web.Response(status=200)


async def checkin_network_sm_devices_0(request: web.Request, network_id, body=None) -> web.Response:
    """Force check-in a set of devices

    Force check-in a set of devices

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = CheckinNetworkSmDevicesRequest.from_dict(body)
    return web.Response(status=200)


async def claim_into_organization_0(request: web.Request, organization_id, body=None) -> web.Response:
    """Claim a list of devices, licenses, and/or orders into an organization

    Claim a list of devices, licenses, and/or orders into an organization. When claiming by order, all devices and licenses in the order will be claimed; licenses will be added to the organization and devices will be placed in the organization&#39;s inventory.

    :param organization_id: 
    :type organization_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = ClaimIntoOrganizationRequest.from_dict(body)
    return web.Response(status=200)


async def claim_into_organization_inventory_0(request: web.Request, organization_id, body=None) -> web.Response:
    """Claim a list of devices, licenses, and/or orders into an organization inventory

    Claim a list of devices, licenses, and/or orders into an organization inventory. When claiming by order, all devices and licenses in the order will be claimed; licenses will be added to the organization and devices will be placed in the organization&#39;s inventory. Use /organizations/{organizationId}/inventory/release to release devices from an organization.

    :param organization_id: 
    :type organization_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = ClaimIntoOrganizationInventoryRequest.from_dict(body)
    return web.Response(status=200)


async def claim_network_devices_0(request: web.Request, network_id, body) -> web.Response:
    """Claim devices into a network. (Note: for recently claimed devices, it may take a few minutes for API requsts against that device to succeed)

    Claim devices into a network. (Note: for recently claimed devices, it may take a few minutes for API requsts against that device to succeed)

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = ClaimNetworkDevicesRequest.from_dict(body)
    return web.Response(status=200)


async def clone_organization_0(request: web.Request, organization_id, body) -> web.Response:
    """Create a new organization by cloning the addressed organization

    Create a new organization by cloning the addressed organization

    :param organization_id: 
    :type organization_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = CloneOrganizationRequest.from_dict(body)
    return web.Response(status=200)


async def clone_organization_switch_devices_0(request: web.Request, organization_id, body) -> web.Response:
    """Clone port-level and some switch-level configuration settings from a source switch to one or more target switches

    Clone port-level and some switch-level configuration settings from a source switch to one or more target switches. Cloned settings include: Aggregation Groups, Power Settings, Multicast Settings, MTU Configuration, STP Bridge priority, Port Mirroring

    :param organization_id: 
    :type organization_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = CloneOrganizationSwitchDevicesRequest.from_dict(body)
    return web.Response(status=200)


async def combine_organization_networks_0(request: web.Request, organization_id, body) -> web.Response:
    """Combine multiple networks into a single network

    Combine multiple networks into a single network

    :param organization_id: 
    :type organization_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = CombineOrganizationNetworksRequest.from_dict(body)
    return web.Response(status=200)


async def create_device_appliance_vmx_authentication_token_0(request: web.Request, serial) -> web.Response:
    """Generate a new vMX authentication token

    Generate a new vMX authentication token

    :param serial: 
    :type serial: str

    """
    return web.Response(status=200)


async def create_device_switch_routing_interface_0(request: web.Request, serial, body=None) -> web.Response:
    """Create a layer 3 interface for a switch

    Create a layer 3 interface for a switch

    :param serial: 
    :type serial: str
    :param body: 
    :type body: dict | bytes

    """
    body = CreateDeviceSwitchRoutingInterfaceRequest.from_dict(body)
    return web.Response(status=200)


async def create_device_switch_routing_static_route_0(request: web.Request, serial, body) -> web.Response:
    """Create a layer 3 static route for a switch

    Create a layer 3 static route for a switch

    :param serial: 
    :type serial: str
    :param body: 
    :type body: dict | bytes

    """
    body = CreateDeviceSwitchRoutingStaticRouteRequest.from_dict(body)
    return web.Response(status=200)


async def create_network_appliance_prefixes_delegated_static_0(request: web.Request, network_id, body) -> web.Response:
    """Add a static delegated prefix from a network

    Add a static delegated prefix from a network

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = CreateNetworkAppliancePrefixesDelegatedStaticRequest.from_dict(body)
    return web.Response(status=200)


async def create_network_appliance_static_route_0(request: web.Request, network_id, body) -> web.Response:
    """Add a static route for an MX or teleworker network

    Add a static route for an MX or teleworker network

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = CreateNetworkApplianceStaticRouteRequest.from_dict(body)
    return web.Response(status=200)


async def create_network_appliance_traffic_shaping_custom_performance_class_0(request: web.Request, network_id, body) -> web.Response:
    """Add a custom performance class for an MX network

    Add a custom performance class for an MX network

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = CreateNetworkApplianceTrafficShapingCustomPerformanceClassRequest.from_dict(body)
    return web.Response(status=200)


async def create_network_appliance_vlan_0(request: web.Request, network_id, body) -> web.Response:
    """Add a VLAN

    Add a VLAN

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = CreateNetworkApplianceVlanRequest.from_dict(body)
    return web.Response(status=200)


async def create_network_camera_quality_retention_profile_0(request: web.Request, network_id, body) -> web.Response:
    """Creates new quality retention profile for this network.

    Creates new quality retention profile for this network.

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = CreateNetworkCameraQualityRetentionProfileRequest.from_dict(body)
    return web.Response(status=200)


async def create_network_camera_wireless_profile_0(request: web.Request, network_id, body) -> web.Response:
    """Creates a new camera wireless profile for this network.

    Creates a new camera wireless profile for this network.

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = CreateNetworkCameraWirelessProfileRequest.from_dict(body)
    return web.Response(status=200)


async def create_network_firmware_upgrades_rollback_0(request: web.Request, network_id, body) -> web.Response:
    """Rollback a Firmware Upgrade For A Network

    Rollback a Firmware Upgrade For A Network

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = CreateNetworkFirmwareUpgradesRollbackRequest.from_dict(body)
    return web.Response(status=200)


async def create_network_firmware_upgrades_staged_event_0(request: web.Request, network_id, body) -> web.Response:
    """Create a Staged Upgrade Event for a network

    Create a Staged Upgrade Event for a network

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = CreateNetworkFirmwareUpgradesStagedEventRequest.from_dict(body)
    return web.Response(status=200)


async def create_network_firmware_upgrades_staged_group_0(request: web.Request, network_id, body) -> web.Response:
    """Create a Staged Upgrade Group for a network

    Create a Staged Upgrade Group for a network

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = CreateNetworkFirmwareUpgradesStagedGroupRequest.from_dict(body)
    return web.Response(status=200)


async def create_network_floor_plan_0(request: web.Request, network_id, body) -> web.Response:
    """Upload a floor plan

    Upload a floor plan

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = CreateNetworkFloorPlanRequest.from_dict(body)
    return web.Response(status=200)


async def create_network_group_policy_0(request: web.Request, network_id, body) -> web.Response:
    """Create a group policy

    Create a group policy

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = CreateNetworkGroupPolicyRequest.from_dict(body)
    return web.Response(status=200)


async def create_network_meraki_auth_user_0(request: web.Request, network_id, body) -> web.Response:
    """Authorize a user configured with Meraki Authentication for a network (currently supports 802.1X, splash guest, and client VPN users, and currently, organizations have a 50,000 user cap)

    Authorize a user configured with Meraki Authentication for a network (currently supports 802.1X, splash guest, and client VPN users, and currently, organizations have a 50,000 user cap)

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = CreateNetworkMerakiAuthUserRequest.from_dict(body)
    return web.Response(status=200)


async def create_network_mqtt_broker_0(request: web.Request, network_id, body) -> web.Response:
    """Add an MQTT broker

    Add an MQTT broker

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = CreateNetworkMqttBrokerRequest.from_dict(body)
    return web.Response(status=200)


async def create_network_pii_request_0(request: web.Request, network_id, body=None) -> web.Response:
    """Submit a new delete or restrict processing PII request

    Submit a new delete or restrict processing PII request  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/requests &#x60;&#x60;&#x60;

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = CreateNetworkPiiRequestRequest.from_dict(body)
    return web.Response(status=200)


async def create_network_sensor_alerts_profile_0(request: web.Request, network_id, body) -> web.Response:
    """Creates a sensor alert profile for a network.

    Creates a sensor alert profile for a network.

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = CreateNetworkSensorAlertsProfileRequest.from_dict(body)
    return web.Response(status=200)


async def create_network_sm_bypass_activation_lock_attempt_0(request: web.Request, network_id, body) -> web.Response:
    """Bypass activation lock attempt

    Bypass activation lock attempt

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = CreateNetworkSmBypassActivationLockAttemptRequest.from_dict(body)
    return web.Response(status=200)


async def create_network_sm_target_group_0(request: web.Request, network_id, body=None) -> web.Response:
    """Add a target group

    Add a target group

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = CreateNetworkSmTargetGroupRequest.from_dict(body)
    return web.Response(status=200)


async def create_network_switch_access_policy_0(request: web.Request, network_id, body) -> web.Response:
    """Create an access policy for a switch network

    Create an access policy for a switch network. If you would like to enable Meraki Authentication, set radiusServers to empty array.

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = CreateNetworkSwitchAccessPolicyRequest.from_dict(body)
    return web.Response(status=200)


async def create_network_switch_dhcp_server_policy_arp_inspection_trusted_server_0(request: web.Request, network_id, body) -> web.Response:
    """Add a server to be trusted by Dynamic ARP Inspection on this network

    Add a server to be trusted by Dynamic ARP Inspection on this network

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest.from_dict(body)
    return web.Response(status=200)


async def create_network_switch_link_aggregation_0(request: web.Request, network_id, body=None) -> web.Response:
    """Create a link aggregation group

    Create a link aggregation group

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = CreateNetworkSwitchLinkAggregationRequest.from_dict(body)
    return web.Response(status=200)


async def create_network_switch_port_schedule_0(request: web.Request, network_id, body) -> web.Response:
    """Add a switch port schedule

    Add a switch port schedule

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = CreateNetworkSwitchPortScheduleRequest.from_dict(body)
    return web.Response(status=200)


async def create_network_switch_qos_rule_0(request: web.Request, network_id, body) -> web.Response:
    """Add a quality of service rule

    Add a quality of service rule

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = CreateNetworkSwitchQosRuleRequest.from_dict(body)
    return web.Response(status=200)


async def create_network_switch_routing_multicast_rendezvous_point_0(request: web.Request, network_id, body) -> web.Response:
    """Create a multicast rendezvous point

    Create a multicast rendezvous point

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = CreateNetworkSwitchRoutingMulticastRendezvousPointRequest.from_dict(body)
    return web.Response(status=200)


async def create_network_switch_stack_0(request: web.Request, network_id, body) -> web.Response:
    """Create a stack

    Create a stack

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = CreateNetworkSwitchStackRequest.from_dict(body)
    return web.Response(status=200)


async def create_network_switch_stack_routing_interface_0(request: web.Request, network_id, switch_stack_id, body) -> web.Response:
    """Create a layer 3 interface for a switch stack

    Create a layer 3 interface for a switch stack

    :param network_id: 
    :type network_id: str
    :param switch_stack_id: 
    :type switch_stack_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = CreateNetworkSwitchStackRoutingInterfaceRequest.from_dict(body)
    return web.Response(status=200)


async def create_network_switch_stack_routing_static_route_0(request: web.Request, network_id, switch_stack_id, body) -> web.Response:
    """Create a layer 3 static route for a switch stack

    Create a layer 3 static route for a switch stack

    :param network_id: 
    :type network_id: str
    :param switch_stack_id: 
    :type switch_stack_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = CreateDeviceSwitchRoutingStaticRouteRequest.from_dict(body)
    return web.Response(status=200)


async def create_network_webhooks_http_server_0(request: web.Request, network_id, body) -> web.Response:
    """Add an HTTP server to a network

    Add an HTTP server to a network

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = CreateNetworkWebhooksHttpServerRequest.from_dict(body)
    return web.Response(status=200)


async def create_network_webhooks_payload_template_0(request: web.Request, network_id, body) -> web.Response:
    """Create a webhook payload template for a network

    Create a webhook payload template for a network

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = CreateNetworkWebhooksPayloadTemplateRequest.from_dict(body)
    return web.Response(status=200)


async def create_network_webhooks_webhook_test_0(request: web.Request, network_id, body) -> web.Response:
    """Send a test webhook for a network

    Send a test webhook for a network

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = CreateNetworkWebhooksWebhookTestRequest.from_dict(body)
    return web.Response(status=200)


async def create_network_wireless_rf_profile_0(request: web.Request, network_id, body) -> web.Response:
    """Creates new RF profile for this network

    Creates new RF profile for this network

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = CreateNetworkWirelessRfProfileRequest.from_dict(body)
    return web.Response(status=200)


async def create_network_wireless_ssid_identity_psk_0(request: web.Request, network_id, number, body) -> web.Response:
    """Create an Identity PSK

    Create an Identity PSK

    :param network_id: 
    :type network_id: str
    :param number: 
    :type number: str
    :param body: 
    :type body: dict | bytes

    """
    body = CreateNetworkWirelessSsidIdentityPskRequest.from_dict(body)
    return web.Response(status=200)


async def create_organization_0(request: web.Request, body) -> web.Response:
    """Create a new organization

    Create a new organization

    :param body: 
    :type body: dict | bytes

    """
    body = CreateOrganizationRequest.from_dict(body)
    return web.Response(status=200)


async def create_organization_action_batch_0(request: web.Request, organization_id, body) -> web.Response:
    """Create an action batch

    Create an action batch

    :param organization_id: 
    :type organization_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = CreateOrganizationActionBatchRequest.from_dict(body)
    return web.Response(status=200)


async def create_organization_adaptive_policy_acl_0(request: web.Request, organization_id, body) -> web.Response:
    """Creates new adaptive policy ACL

    Creates new adaptive policy ACL

    :param organization_id: 
    :type organization_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = CreateOrganizationAdaptivePolicyAclRequest.from_dict(body)
    return web.Response(status=200)


async def create_organization_adaptive_policy_group_0(request: web.Request, organization_id, body) -> web.Response:
    """Creates a new adaptive policy group

    Creates a new adaptive policy group

    :param organization_id: 
    :type organization_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = CreateOrganizationAdaptivePolicyGroupRequest.from_dict(body)
    return web.Response(status=200)


async def create_organization_adaptive_policy_policy_0(request: web.Request, organization_id, body) -> web.Response:
    """Add an Adaptive Policy

    Add an Adaptive Policy

    :param organization_id: 
    :type organization_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = CreateOrganizationAdaptivePolicyPolicyRequest.from_dict(body)
    return web.Response(status=200)


async def create_organization_admin_0(request: web.Request, organization_id, body) -> web.Response:
    """Create a new dashboard administrator

    Create a new dashboard administrator

    :param organization_id: 
    :type organization_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = CreateOrganizationAdminRequest.from_dict(body)
    return web.Response(status=200)


async def create_organization_alerts_profile_0(request: web.Request, organization_id, body) -> web.Response:
    """Create an organization-wide alert configuration

    Create an organization-wide alert configuration

    :param organization_id: 
    :type organization_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = CreateOrganizationAlertsProfileRequest.from_dict(body)
    return web.Response(status=200)


async def create_organization_branding_policy_0(request: web.Request, organization_id, body=None) -> web.Response:
    """Add a new branding policy to an organization

    Add a new branding policy to an organization

    :param organization_id: 
    :type organization_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = CreateOrganizationBrandingPolicyRequest.from_dict(body)
    return web.Response(status=200)


async def create_organization_camera_custom_analytics_artifact_0(request: web.Request, organization_id, body=None) -> web.Response:
    """Create custom analytics artifact

    Create custom analytics artifact. Returns an artifact upload URL with expiry time. Upload the artifact file with a put request to the returned upload URL before its expiry.

    :param organization_id: 
    :type organization_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = CreateOrganizationCameraCustomAnalyticsArtifactRequest.from_dict(body)
    return web.Response(status=200)


async def create_organization_config_template_0(request: web.Request, organization_id, body) -> web.Response:
    """Create a new configuration template

    Create a new configuration template

    :param organization_id: 
    :type organization_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = CreateOrganizationConfigTemplateRequest.from_dict(body)
    return web.Response(status=200)


async def create_organization_early_access_features_opt_in_0(request: web.Request, organization_id, body) -> web.Response:
    """Create a new early access feature opt-in for an organization

    Create a new early access feature opt-in for an organization

    :param organization_id: 
    :type organization_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = CreateOrganizationEarlyAccessFeaturesOptInRequest.from_dict(body)
    return web.Response(status=200)


async def create_organization_insight_monitored_media_server_0(request: web.Request, organization_id, body) -> web.Response:
    """Add a media server to be monitored for this organization

    Add a media server to be monitored for this organization. Only valid for organizations with Meraki Insight.

    :param organization_id: 
    :type organization_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = CreateOrganizationInsightMonitoredMediaServerRequest.from_dict(body)
    return web.Response(status=200)


async def create_organization_inventory_onboarding_cloud_monitoring_export_event_0(request: web.Request, organization_id, body) -> web.Response:
    """Imports event logs related to the onboarding app into elastisearch

    Imports event logs related to the onboarding app into elastisearch

    :param organization_id: 
    :type organization_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest.from_dict(body)
    return web.Response(status=200)


async def create_organization_inventory_onboarding_cloud_monitoring_import_0(request: web.Request, organization_id, body) -> web.Response:
    """Commits the import operation to complete the onboarding of a device into Dashboard for monitoring.

    Commits the import operation to complete the onboarding of a device into Dashboard for monitoring.

    :param organization_id: 
    :type organization_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = CreateOrganizationInventoryOnboardingCloudMonitoringImportRequest.from_dict(body)
    return web.Response(status=200)


async def create_organization_inventory_onboarding_cloud_monitoring_prepare_0(request: web.Request, organization_id, body) -> web.Response:
    """Initiates or updates an import session

    Initiates or updates an import session. An import ID will be generated and used when you are ready to commit the import.

    :param organization_id: 
    :type organization_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = CreateOrganizationInventoryOnboardingCloudMonitoringPrepareRequest.from_dict(body)
    return web.Response(status=200)


async def create_organization_network_0(request: web.Request, organization_id, body) -> web.Response:
    """Create a network

    Create a network

    :param organization_id: 
    :type organization_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = CreateOrganizationNetworkRequest.from_dict(body)
    return web.Response(status=200)


async def create_organization_policy_object_0(request: web.Request, organization_id, body) -> web.Response:
    """Creates a new Policy Object.

    Creates a new Policy Object.

    :param organization_id: 
    :type organization_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = CreateOrganizationPolicyObjectRequest.from_dict(body)
    return web.Response(status=200)


async def create_organization_policy_objects_group_0(request: web.Request, organization_id, body) -> web.Response:
    """Creates a new Policy Object Group.

    Creates a new Policy Object Group.

    :param organization_id: 
    :type organization_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = CreateOrganizationPolicyObjectsGroupRequest.from_dict(body)
    return web.Response(status=200)


async def create_organization_saml_idp_0(request: web.Request, organization_id, body) -> web.Response:
    """Create a SAML IdP for your organization.

    Create a SAML IdP for your organization.

    :param organization_id: 
    :type organization_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = CreateOrganizationSamlIdpRequest.from_dict(body)
    return web.Response(status=200)


async def create_organization_saml_role_0(request: web.Request, organization_id, body) -> web.Response:
    """Create a SAML role

    Create a SAML role

    :param organization_id: 
    :type organization_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = CreateOrganizationSamlRoleRequest.from_dict(body)
    return web.Response(status=200)


async def defer_network_firmware_upgrades_staged_events_0(request: web.Request, network_id) -> web.Response:
    """Postpone by 1 week all pending staged upgrade stages for a network

    Postpone by 1 week all pending staged upgrade stages for a network

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def delete_device_switch_routing_interface_0(request: web.Request, serial, interface_id) -> web.Response:
    """Delete a layer 3 interface from the switch

    Delete a layer 3 interface from the switch

    :param serial: 
    :type serial: str
    :param interface_id: 
    :type interface_id: str

    """
    return web.Response(status=200)


async def delete_device_switch_routing_static_route_0(request: web.Request, serial, static_route_id) -> web.Response:
    """Delete a layer 3 static route for a switch

    Delete a layer 3 static route for a switch

    :param serial: 
    :type serial: str
    :param static_route_id: 
    :type static_route_id: str

    """
    return web.Response(status=200)


async def delete_network_0(request: web.Request, network_id) -> web.Response:
    """Delete a network

    Delete a network

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def delete_network_appliance_prefixes_delegated_static_0(request: web.Request, network_id, static_delegated_prefix_id) -> web.Response:
    """Delete a static delegated prefix from a network

    Delete a static delegated prefix from a network

    :param network_id: 
    :type network_id: str
    :param static_delegated_prefix_id: 
    :type static_delegated_prefix_id: str

    """
    return web.Response(status=200)


async def delete_network_appliance_static_route_0(request: web.Request, network_id, static_route_id) -> web.Response:
    """Delete a static route from an MX or teleworker network

    Delete a static route from an MX or teleworker network

    :param network_id: 
    :type network_id: str
    :param static_route_id: 
    :type static_route_id: str

    """
    return web.Response(status=200)


async def delete_network_appliance_traffic_shaping_custom_performance_class_0(request: web.Request, network_id, custom_performance_class_id) -> web.Response:
    """Delete a custom performance class from an MX network

    Delete a custom performance class from an MX network

    :param network_id: 
    :type network_id: str
    :param custom_performance_class_id: 
    :type custom_performance_class_id: str

    """
    return web.Response(status=200)


async def delete_network_appliance_vlan_0(request: web.Request, network_id, vlan_id) -> web.Response:
    """Delete a VLAN from a network

    Delete a VLAN from a network

    :param network_id: 
    :type network_id: str
    :param vlan_id: 
    :type vlan_id: str

    """
    return web.Response(status=200)


async def delete_network_camera_quality_retention_profile_0(request: web.Request, network_id, quality_retention_profile_id) -> web.Response:
    """Delete an existing quality retention profile for this network.

    Delete an existing quality retention profile for this network.

    :param network_id: 
    :type network_id: str
    :param quality_retention_profile_id: 
    :type quality_retention_profile_id: str

    """
    return web.Response(status=200)


async def delete_network_camera_wireless_profile_0(request: web.Request, network_id, wireless_profile_id) -> web.Response:
    """Delete an existing camera wireless profile for this network.

    Delete an existing camera wireless profile for this network.

    :param network_id: 
    :type network_id: str
    :param wireless_profile_id: 
    :type wireless_profile_id: str

    """
    return web.Response(status=200)


async def delete_network_firmware_upgrades_staged_group_0(request: web.Request, network_id, group_id) -> web.Response:
    """Delete a Staged Upgrade Group

    Delete a Staged Upgrade Group

    :param network_id: 
    :type network_id: str
    :param group_id: 
    :type group_id: str

    """
    return web.Response(status=200)


async def delete_network_floor_plan_0(request: web.Request, network_id, floor_plan_id) -> web.Response:
    """Destroy a floor plan

    Destroy a floor plan

    :param network_id: 
    :type network_id: str
    :param floor_plan_id: 
    :type floor_plan_id: str

    """
    return web.Response(status=200)


async def delete_network_group_policy_0(request: web.Request, network_id, group_policy_id) -> web.Response:
    """Delete a group policy

    Delete a group policy

    :param network_id: 
    :type network_id: str
    :param group_policy_id: 
    :type group_policy_id: str

    """
    return web.Response(status=200)


async def delete_network_meraki_auth_user_0(request: web.Request, network_id, meraki_auth_user_id) -> web.Response:
    """Deauthorize a user

    Deauthorize a user. To reauthorize a user after deauthorizing them, POST to this endpoint. (Currently, 802.1X RADIUS, splash guest, and client VPN users can be deauthorized.)

    :param network_id: 
    :type network_id: str
    :param meraki_auth_user_id: 
    :type meraki_auth_user_id: str

    """
    return web.Response(status=200)


async def delete_network_mqtt_broker_0(request: web.Request, network_id, mqtt_broker_id) -> web.Response:
    """Delete an MQTT broker

    Delete an MQTT broker

    :param network_id: 
    :type network_id: str
    :param mqtt_broker_id: 
    :type mqtt_broker_id: str

    """
    return web.Response(status=200)


async def delete_network_pii_request_0(request: web.Request, network_id, request_id) -> web.Response:
    """Delete a restrict processing PII request

    Delete a restrict processing PII request  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/requests/{requestId} &#x60;&#x60;&#x60;

    :param network_id: 
    :type network_id: str
    :param request_id: 
    :type request_id: str

    """
    return web.Response(status=200)


async def delete_network_sensor_alerts_profile_0(request: web.Request, network_id, id) -> web.Response:
    """Deletes a sensor alert profile from a network.

    Deletes a sensor alert profile from a network.

    :param network_id: 
    :type network_id: str
    :param id: 
    :type id: str

    """
    return web.Response(status=200)


async def delete_network_sm_target_group_0(request: web.Request, network_id, target_group_id) -> web.Response:
    """Delete a target group from a network

    Delete a target group from a network

    :param network_id: 
    :type network_id: str
    :param target_group_id: 
    :type target_group_id: str

    """
    return web.Response(status=200)


async def delete_network_sm_user_access_device_0(request: web.Request, network_id, user_access_device_id) -> web.Response:
    """Delete a User Access Device

    Delete a User Access Device

    :param network_id: 
    :type network_id: str
    :param user_access_device_id: 
    :type user_access_device_id: str

    """
    return web.Response(status=200)


async def delete_network_switch_access_policy_0(request: web.Request, network_id, access_policy_number) -> web.Response:
    """Delete an access policy for a switch network

    Delete an access policy for a switch network

    :param network_id: 
    :type network_id: str
    :param access_policy_number: 
    :type access_policy_number: str

    """
    return web.Response(status=200)


async def delete_network_switch_dhcp_server_policy_arp_inspection_trusted_server_0(request: web.Request, network_id, trusted_server_id) -> web.Response:
    """Remove a server from being trusted by Dynamic ARP Inspection on this network

    Remove a server from being trusted by Dynamic ARP Inspection on this network

    :param network_id: 
    :type network_id: str
    :param trusted_server_id: 
    :type trusted_server_id: str

    """
    return web.Response(status=200)


async def delete_network_switch_link_aggregation_0(request: web.Request, network_id, link_aggregation_id) -> web.Response:
    """Split a link aggregation group into separate ports

    Split a link aggregation group into separate ports

    :param network_id: 
    :type network_id: str
    :param link_aggregation_id: 
    :type link_aggregation_id: str

    """
    return web.Response(status=200)


async def delete_network_switch_port_schedule_0(request: web.Request, network_id, port_schedule_id) -> web.Response:
    """Delete a switch port schedule

    Delete a switch port schedule

    :param network_id: 
    :type network_id: str
    :param port_schedule_id: 
    :type port_schedule_id: str

    """
    return web.Response(status=200)


async def delete_network_switch_qos_rule_0(request: web.Request, network_id, qos_rule_id) -> web.Response:
    """Delete a quality of service rule

    Delete a quality of service rule

    :param network_id: 
    :type network_id: str
    :param qos_rule_id: 
    :type qos_rule_id: str

    """
    return web.Response(status=200)


async def delete_network_switch_routing_multicast_rendezvous_point_0(request: web.Request, network_id, rendezvous_point_id) -> web.Response:
    """Delete a multicast rendezvous point

    Delete a multicast rendezvous point

    :param network_id: 
    :type network_id: str
    :param rendezvous_point_id: 
    :type rendezvous_point_id: str

    """
    return web.Response(status=200)


async def delete_network_switch_stack_0(request: web.Request, network_id, switch_stack_id) -> web.Response:
    """Delete a stack

    Delete a stack

    :param network_id: 
    :type network_id: str
    :param switch_stack_id: 
    :type switch_stack_id: str

    """
    return web.Response(status=200)


async def delete_network_switch_stack_routing_interface_0(request: web.Request, network_id, switch_stack_id, interface_id) -> web.Response:
    """Delete a layer 3 interface from a switch stack

    Delete a layer 3 interface from a switch stack

    :param network_id: 
    :type network_id: str
    :param switch_stack_id: 
    :type switch_stack_id: str
    :param interface_id: 
    :type interface_id: str

    """
    return web.Response(status=200)


async def delete_network_switch_stack_routing_static_route_0(request: web.Request, network_id, switch_stack_id, static_route_id) -> web.Response:
    """Delete a layer 3 static route for a switch stack

    Delete a layer 3 static route for a switch stack

    :param network_id: 
    :type network_id: str
    :param switch_stack_id: 
    :type switch_stack_id: str
    :param static_route_id: 
    :type static_route_id: str

    """
    return web.Response(status=200)


async def delete_network_webhooks_http_server_0(request: web.Request, network_id, http_server_id) -> web.Response:
    """Delete an HTTP server from a network

    Delete an HTTP server from a network

    :param network_id: 
    :type network_id: str
    :param http_server_id: 
    :type http_server_id: str

    """
    return web.Response(status=200)


async def delete_network_webhooks_payload_template_0(request: web.Request, network_id, payload_template_id) -> web.Response:
    """Destroy a webhook payload template for a network

    Destroy a webhook payload template for a network. Does not work for included templates (&#39;wpt_00001&#39;, &#39;wpt_00002&#39;, &#39;wpt_00003&#39;, &#39;wpt_00004&#39;, &#39;wpt_00005&#39; or &#39;wpt_00006&#39;)

    :param network_id: 
    :type network_id: str
    :param payload_template_id: 
    :type payload_template_id: str

    """
    return web.Response(status=200)


async def delete_network_wireless_rf_profile_0(request: web.Request, network_id, rf_profile_id) -> web.Response:
    """Delete a RF Profile

    Delete a RF Profile

    :param network_id: 
    :type network_id: str
    :param rf_profile_id: 
    :type rf_profile_id: str

    """
    return web.Response(status=200)


async def delete_network_wireless_ssid_identity_psk_0(request: web.Request, network_id, number, identity_psk_id) -> web.Response:
    """Delete an Identity PSK

    Delete an Identity PSK

    :param network_id: 
    :type network_id: str
    :param number: 
    :type number: str
    :param identity_psk_id: 
    :type identity_psk_id: str

    """
    return web.Response(status=200)


async def delete_organization_0(request: web.Request, organization_id) -> web.Response:
    """Delete an organization

    Delete an organization

    :param organization_id: 
    :type organization_id: str

    """
    return web.Response(status=200)


async def delete_organization_action_batch_0(request: web.Request, organization_id, action_batch_id) -> web.Response:
    """Delete an action batch

    Delete an action batch

    :param organization_id: 
    :type organization_id: str
    :param action_batch_id: 
    :type action_batch_id: str

    """
    return web.Response(status=200)


async def delete_organization_adaptive_policy_acl_0(request: web.Request, organization_id, acl_id) -> web.Response:
    """Deletes the specified adaptive policy ACL

    Deletes the specified adaptive policy ACL. Note this adaptive policy ACL will also be removed from policies using it.

    :param organization_id: 
    :type organization_id: str
    :param acl_id: 
    :type acl_id: str

    """
    return web.Response(status=200)


async def delete_organization_adaptive_policy_group_0(request: web.Request, organization_id, id) -> web.Response:
    """Deletes the specified adaptive policy group and any associated policies and references

    Deletes the specified adaptive policy group and any associated policies and references

    :param organization_id: 
    :type organization_id: str
    :param id: 
    :type id: str

    """
    return web.Response(status=200)


async def delete_organization_adaptive_policy_policy_0(request: web.Request, organization_id, id) -> web.Response:
    """Delete an Adaptive Policy

    Delete an Adaptive Policy

    :param organization_id: 
    :type organization_id: str
    :param id: 
    :type id: str

    """
    return web.Response(status=200)


async def delete_organization_admin_0(request: web.Request, organization_id, admin_id) -> web.Response:
    """Revoke all access for a dashboard administrator within this organization

    Revoke all access for a dashboard administrator within this organization

    :param organization_id: 
    :type organization_id: str
    :param admin_id: 
    :type admin_id: str

    """
    return web.Response(status=200)


async def delete_organization_alerts_profile_0(request: web.Request, organization_id, alert_config_id) -> web.Response:
    """Removes an organization-wide alert config

    Removes an organization-wide alert config

    :param organization_id: 
    :type organization_id: str
    :param alert_config_id: 
    :type alert_config_id: str

    """
    return web.Response(status=200)


async def delete_organization_branding_policy_0(request: web.Request, organization_id, branding_policy_id) -> web.Response:
    """Delete a branding policy

    Delete a branding policy

    :param organization_id: 
    :type organization_id: str
    :param branding_policy_id: 
    :type branding_policy_id: str

    """
    return web.Response(status=200)


async def delete_organization_camera_custom_analytics_artifact_0(request: web.Request, organization_id, artifact_id) -> web.Response:
    """Delete Custom Analytics Artifact

    Delete Custom Analytics Artifact

    :param organization_id: 
    :type organization_id: str
    :param artifact_id: 
    :type artifact_id: str

    """
    return web.Response(status=200)


async def delete_organization_config_template_0(request: web.Request, organization_id, config_template_id) -> web.Response:
    """Remove a configuration template

    Remove a configuration template

    :param organization_id: 
    :type organization_id: str
    :param config_template_id: 
    :type config_template_id: str

    """
    return web.Response(status=200)


async def delete_organization_early_access_features_opt_in_0(request: web.Request, organization_id, opt_in_id) -> web.Response:
    """Delete an early access feature opt-in

    Delete an early access feature opt-in

    :param organization_id: 
    :type organization_id: str
    :param opt_in_id: 
    :type opt_in_id: str

    """
    return web.Response(status=200)


async def delete_organization_insight_monitored_media_server_0(request: web.Request, organization_id, monitored_media_server_id) -> web.Response:
    """Delete a monitored media server from this organization

    Delete a monitored media server from this organization. Only valid for organizations with Meraki Insight.

    :param organization_id: 
    :type organization_id: str
    :param monitored_media_server_id: 
    :type monitored_media_server_id: str

    """
    return web.Response(status=200)


async def delete_organization_policy_object_0(request: web.Request, organization_id, policy_object_id) -> web.Response:
    """Deletes a Policy Object.

    Deletes a Policy Object.

    :param organization_id: 
    :type organization_id: str
    :param policy_object_id: 
    :type policy_object_id: str

    """
    return web.Response(status=200)


async def delete_organization_policy_objects_group_0(request: web.Request, organization_id, policy_object_group_id) -> web.Response:
    """Deletes a Policy Object Group.

    Deletes a Policy Object Group.

    :param organization_id: 
    :type organization_id: str
    :param policy_object_group_id: 
    :type policy_object_group_id: str

    """
    return web.Response(status=200)


async def delete_organization_saml_idp_0(request: web.Request, organization_id, idp_id) -> web.Response:
    """Remove a SAML IdP in your organization.

    Remove a SAML IdP in your organization.

    :param organization_id: 
    :type organization_id: str
    :param idp_id: 
    :type idp_id: str

    """
    return web.Response(status=200)


async def delete_organization_saml_role_0(request: web.Request, organization_id, saml_role_id) -> web.Response:
    """Remove a SAML role

    Remove a SAML role

    :param organization_id: 
    :type organization_id: str
    :param saml_role_id: 
    :type saml_role_id: str

    """
    return web.Response(status=200)


async def delete_organization_user_0(request: web.Request, organization_id, user_id) -> web.Response:
    """Delete a user and all of its authentication methods.

    Delete a user and all of its authentication methods.

    :param organization_id: 
    :type organization_id: str
    :param user_id: 
    :type user_id: str

    """
    return web.Response(status=200)


async def get_device_0(request: web.Request, serial) -> web.Response:
    """Return a single device

    Return a single device

    :param serial: 
    :type serial: str

    """
    return web.Response(status=200)


async def get_device_appliance_uplinks_settings_0(request: web.Request, serial) -> web.Response:
    """Return the uplink settings for an MX appliance

    Return the uplink settings for an MX appliance

    :param serial: 
    :type serial: str

    """
    return web.Response(status=200)


async def get_device_camera_custom_analytics_0(request: web.Request, serial) -> web.Response:
    """Return custom analytics settings for a camera

    Return custom analytics settings for a camera

    :param serial: 
    :type serial: str

    """
    return web.Response(status=200)


async def get_device_camera_quality_and_retention_0(request: web.Request, serial) -> web.Response:
    """Returns quality and retention settings for the given camera

    Returns quality and retention settings for the given camera

    :param serial: 
    :type serial: str

    """
    return web.Response(status=200)


async def get_device_camera_sense_0(request: web.Request, serial) -> web.Response:
    """Returns sense settings for a given camera

    Returns sense settings for a given camera

    :param serial: 
    :type serial: str

    """
    return web.Response(status=200)


async def get_device_camera_sense_object_detection_models_0(request: web.Request, serial) -> web.Response:
    """Returns the MV Sense object detection model list for the given camera

    Returns the MV Sense object detection model list for the given camera

    :param serial: 
    :type serial: str

    """
    return web.Response(status=200)


async def get_device_camera_video_link_0(request: web.Request, serial, timestamp=None) -> web.Response:
    """Returns video link to the specified camera

    Returns video link to the specified camera. If a timestamp is supplied, it links to that timestamp.

    :param serial: 
    :type serial: str
    :param timestamp: [optional] The video link will start at this time. The timestamp should be a string in ISO8601 format. If no timestamp is specified, we will assume current time.
    :type timestamp: str

    """
    timestamp = util.deserialize_datetime(timestamp)
    return web.Response(status=200)


async def get_device_camera_video_settings_0(request: web.Request, serial) -> web.Response:
    """Returns video settings for the given camera

    Returns video settings for the given camera

    :param serial: 
    :type serial: str

    """
    return web.Response(status=200)


async def get_device_camera_wireless_profiles_0(request: web.Request, serial) -> web.Response:
    """Returns wireless profile assigned to the given camera

    Returns wireless profile assigned to the given camera

    :param serial: 
    :type serial: str

    """
    return web.Response(status=200)


async def get_device_cellular_gateway_lan_0(request: web.Request, serial) -> web.Response:
    """Show the LAN Settings of a MG

    Show the LAN Settings of a MG

    :param serial: 
    :type serial: str

    """
    return web.Response(status=200)


async def get_device_cellular_gateway_port_forwarding_rules_0(request: web.Request, serial) -> web.Response:
    """Returns the port forwarding rules for a single MG.

    Returns the port forwarding rules for a single MG.

    :param serial: 
    :type serial: str

    """
    return web.Response(status=200)


async def get_device_cellular_sims_0(request: web.Request, serial) -> web.Response:
    """Return the SIM and APN configurations for a cellular device.

    Return the SIM and APN configurations for a cellular device.

    :param serial: 
    :type serial: str

    """
    return web.Response(status=200)


async def get_device_management_interface_0(request: web.Request, serial) -> web.Response:
    """Return the management interface settings for a device

    Return the management interface settings for a device

    :param serial: 
    :type serial: str

    """
    return web.Response(status=200)


async def get_device_sensor_relationships_0(request: web.Request, serial) -> web.Response:
    """List the sensor roles for a given sensor or camera device.

    List the sensor roles for a given sensor or camera device.

    :param serial: 
    :type serial: str

    """
    return web.Response(status=200)


async def get_device_switch_port_0(request: web.Request, serial, port_id) -> web.Response:
    """Return a switch port

    Return a switch port

    :param serial: 
    :type serial: str
    :param port_id: 
    :type port_id: str

    """
    return web.Response(status=200)


async def get_device_switch_ports_0(request: web.Request, serial) -> web.Response:
    """List the switch ports for a switch

    List the switch ports for a switch

    :param serial: 
    :type serial: str

    """
    return web.Response(status=200)


async def get_device_switch_routing_interface_0(request: web.Request, serial, interface_id) -> web.Response:
    """Return a layer 3 interface for a switch

    Return a layer 3 interface for a switch

    :param serial: 
    :type serial: str
    :param interface_id: 
    :type interface_id: str

    """
    return web.Response(status=200)


async def get_device_switch_routing_interface_dhcp_0(request: web.Request, serial, interface_id) -> web.Response:
    """Return a layer 3 interface DHCP configuration for a switch

    Return a layer 3 interface DHCP configuration for a switch

    :param serial: 
    :type serial: str
    :param interface_id: 
    :type interface_id: str

    """
    return web.Response(status=200)


async def get_device_switch_routing_interfaces_0(request: web.Request, serial) -> web.Response:
    """List layer 3 interfaces for a switch

    List layer 3 interfaces for a switch. Those for a stack may be found under switch stack routing.

    :param serial: 
    :type serial: str

    """
    return web.Response(status=200)


async def get_device_switch_routing_static_route_0(request: web.Request, serial, static_route_id) -> web.Response:
    """Return a layer 3 static route for a switch

    Return a layer 3 static route for a switch

    :param serial: 
    :type serial: str
    :param static_route_id: 
    :type static_route_id: str

    """
    return web.Response(status=200)


async def get_device_switch_routing_static_routes_0(request: web.Request, serial) -> web.Response:
    """List layer 3 static routes for a switch

    List layer 3 static routes for a switch

    :param serial: 
    :type serial: str

    """
    return web.Response(status=200)


async def get_device_switch_warm_spare_0(request: web.Request, serial) -> web.Response:
    """Return warm spare configuration for a switch

    Return warm spare configuration for a switch

    :param serial: 
    :type serial: str

    """
    return web.Response(status=200)


async def get_device_wireless_bluetooth_settings_0(request: web.Request, serial) -> web.Response:
    """Return the bluetooth settings for a wireless device

    Return the bluetooth settings for a wireless device

    :param serial: 
    :type serial: str

    """
    return web.Response(status=200)


async def get_device_wireless_radio_settings_0(request: web.Request, serial) -> web.Response:
    """Return the radio settings of a device

    Return the radio settings of a device

    :param serial: 
    :type serial: str

    """
    return web.Response(status=200)


async def get_network_0(request: web.Request, network_id) -> web.Response:
    """Return a network

    Return a network

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_alerts_settings_0(request: web.Request, network_id) -> web.Response:
    """Return the alert configuration for this network

    Return the alert configuration for this network

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_appliance_connectivity_monitoring_destinations_0(request: web.Request, network_id) -> web.Response:
    """Return the connectivity testing destinations for an MX network

    Return the connectivity testing destinations for an MX network

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_appliance_content_filtering_0(request: web.Request, network_id) -> web.Response:
    """Return the content filtering settings for an MX network

    Return the content filtering settings for an MX network

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_appliance_content_filtering_categories_0(request: web.Request, network_id) -> web.Response:
    """List all available content filtering categories for an MX network

    List all available content filtering categories for an MX network

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_appliance_firewall_cellular_firewall_rules_0(request: web.Request, network_id) -> web.Response:
    """Return the cellular firewall rules for an MX network

    Return the cellular firewall rules for an MX network

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_appliance_firewall_firewalled_service_0(request: web.Request, network_id, service) -> web.Response:
    """Return the accessibility settings of the given service (&#39;ICMP&#39;, &#39;web&#39;, or &#39;SNMP&#39;)

    Return the accessibility settings of the given service (&#39;ICMP&#39;, &#39;web&#39;, or &#39;SNMP&#39;)

    :param network_id: 
    :type network_id: str
    :param service: 
    :type service: str

    """
    return web.Response(status=200)


async def get_network_appliance_firewall_firewalled_services_0(request: web.Request, network_id) -> web.Response:
    """List the appliance services and their accessibility rules

    List the appliance services and their accessibility rules

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_appliance_firewall_inbound_cellular_firewall_rules_0(request: web.Request, network_id) -> web.Response:
    """Return the inbound cellular firewall rules for an MX network

    Return the inbound cellular firewall rules for an MX network

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_appliance_firewall_inbound_firewall_rules_0(request: web.Request, network_id) -> web.Response:
    """Return the inbound firewall rules for an MX network

    Return the inbound firewall rules for an MX network

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_appliance_firewall_l3_firewall_rules_0(request: web.Request, network_id) -> web.Response:
    """Return the L3 firewall rules for an MX network

    Return the L3 firewall rules for an MX network

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_appliance_firewall_l7_firewall_rules_0(request: web.Request, network_id) -> web.Response:
    """List the MX L7 firewall rules for an MX network

    List the MX L7 firewall rules for an MX network

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_appliance_firewall_l7_firewall_rules_application_categories_0(request: web.Request, network_id) -> web.Response:
    """Return the L7 firewall application categories and their associated applications for an MX network

    Return the L7 firewall application categories and their associated applications for an MX network

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_appliance_firewall_one_to_many_nat_rules_0(request: web.Request, network_id) -> web.Response:
    """Return the 1:Many NAT mapping rules for an MX network

    Return the 1:Many NAT mapping rules for an MX network

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_appliance_firewall_one_to_one_nat_rules_0(request: web.Request, network_id) -> web.Response:
    """Return the 1:1 NAT mapping rules for an MX network

    Return the 1:1 NAT mapping rules for an MX network

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_appliance_firewall_port_forwarding_rules_0(request: web.Request, network_id) -> web.Response:
    """Return the port forwarding rules for an MX network

    Return the port forwarding rules for an MX network

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_appliance_firewall_settings_0(request: web.Request, network_id) -> web.Response:
    """Return the firewall settings for this network

    Return the firewall settings for this network

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_appliance_port_0(request: web.Request, network_id, port_id) -> web.Response:
    """Return per-port VLAN settings for a single MX port.

    Return per-port VLAN settings for a single MX port.

    :param network_id: 
    :type network_id: str
    :param port_id: 
    :type port_id: str

    """
    return web.Response(status=200)


async def get_network_appliance_ports_0(request: web.Request, network_id) -> web.Response:
    """List per-port VLAN settings for all ports of a MX.

    List per-port VLAN settings for all ports of a MX.

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_appliance_prefixes_delegated_static_0(request: web.Request, network_id, static_delegated_prefix_id) -> web.Response:
    """Return a static delegated prefix from a network

    Return a static delegated prefix from a network

    :param network_id: 
    :type network_id: str
    :param static_delegated_prefix_id: 
    :type static_delegated_prefix_id: str

    """
    return web.Response(status=200)


async def get_network_appliance_prefixes_delegated_statics_0(request: web.Request, network_id) -> web.Response:
    """List static delegated prefixes for a network

    List static delegated prefixes for a network

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_appliance_security_intrusion_0(request: web.Request, network_id) -> web.Response:
    """Returns all supported intrusion settings for an MX network

    Returns all supported intrusion settings for an MX network

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_appliance_security_malware_0(request: web.Request, network_id) -> web.Response:
    """Returns all supported malware settings for an MX network

    Returns all supported malware settings for an MX network

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_appliance_settings_0(request: web.Request, network_id) -> web.Response:
    """Return the appliance settings for a network

    Return the appliance settings for a network

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_appliance_single_lan_0(request: web.Request, network_id) -> web.Response:
    """Return single LAN configuration

    Return single LAN configuration

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_appliance_ssid_0(request: web.Request, network_id, number) -> web.Response:
    """Return a single MX SSID

    Return a single MX SSID

    :param network_id: 
    :type network_id: str
    :param number: 
    :type number: str

    """
    return web.Response(status=200)


async def get_network_appliance_ssids_0(request: web.Request, network_id) -> web.Response:
    """List the MX SSIDs in a network

    List the MX SSIDs in a network

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_appliance_static_route_0(request: web.Request, network_id, static_route_id) -> web.Response:
    """Return a static route for an MX or teleworker network

    Return a static route for an MX or teleworker network

    :param network_id: 
    :type network_id: str
    :param static_route_id: 
    :type static_route_id: str

    """
    return web.Response(status=200)


async def get_network_appliance_static_routes_0(request: web.Request, network_id) -> web.Response:
    """List the static routes for an MX or teleworker network

    List the static routes for an MX or teleworker network

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_appliance_traffic_shaping_0(request: web.Request, network_id) -> web.Response:
    """Display the traffic shaping settings for an MX network

    Display the traffic shaping settings for an MX network

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_appliance_traffic_shaping_custom_performance_class_0(request: web.Request, network_id, custom_performance_class_id) -> web.Response:
    """Return a custom performance class for an MX network

    Return a custom performance class for an MX network

    :param network_id: 
    :type network_id: str
    :param custom_performance_class_id: 
    :type custom_performance_class_id: str

    """
    return web.Response(status=200)


async def get_network_appliance_traffic_shaping_custom_performance_classes_0(request: web.Request, network_id) -> web.Response:
    """List all custom performance classes for an MX network

    List all custom performance classes for an MX network

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_appliance_traffic_shaping_rules_0(request: web.Request, network_id) -> web.Response:
    """Display the traffic shaping settings rules for an MX network

    Display the traffic shaping settings rules for an MX network

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_appliance_traffic_shaping_uplink_bandwidth_0(request: web.Request, network_id) -> web.Response:
    """Returns the uplink bandwidth limits for your MX network

    Returns the uplink bandwidth limits for your MX network. This may not reflect the affected device&#39;s hardware capabilities.  For more information on your device&#39;s hardware capabilities, please consult our MX Family Datasheet - [https://meraki.cisco.com/product-collateral/mx-family-datasheet/?file]

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_appliance_traffic_shaping_uplink_selection_0(request: web.Request, network_id) -> web.Response:
    """Show uplink selection settings for an MX network

    Show uplink selection settings for an MX network

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_appliance_vlan_0(request: web.Request, network_id, vlan_id) -> web.Response:
    """Return a VLAN

    Return a VLAN

    :param network_id: 
    :type network_id: str
    :param vlan_id: 
    :type vlan_id: str

    """
    return web.Response(status=200)


async def get_network_appliance_vlans_0(request: web.Request, network_id) -> web.Response:
    """List the VLANs for an MX network

    List the VLANs for an MX network

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_appliance_vlans_settings_0(request: web.Request, network_id) -> web.Response:
    """Returns the enabled status of VLANs for the network

    Returns the enabled status of VLANs for the network

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_appliance_vpn_bgp_0(request: web.Request, network_id) -> web.Response:
    """Return a Hub BGP Configuration

    Return a Hub BGP Configuration

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_appliance_vpn_site_to_site_vpn_0(request: web.Request, network_id) -> web.Response:
    """Return the site-to-site VPN settings of a network

    Return the site-to-site VPN settings of a network. Only valid for MX networks.

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_appliance_warm_spare_0(request: web.Request, network_id) -> web.Response:
    """Return MX warm spare settings

    Return MX warm spare settings

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_camera_quality_retention_profile_0(request: web.Request, network_id, quality_retention_profile_id) -> web.Response:
    """Retrieve a single quality retention profile

    Retrieve a single quality retention profile

    :param network_id: 
    :type network_id: str
    :param quality_retention_profile_id: 
    :type quality_retention_profile_id: str

    """
    return web.Response(status=200)


async def get_network_camera_quality_retention_profiles_0(request: web.Request, network_id) -> web.Response:
    """List the quality retention profiles for this network

    List the quality retention profiles for this network

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_camera_schedules_0(request: web.Request, network_id) -> web.Response:
    """Returns a list of all camera recording schedules.

    Returns a list of all camera recording schedules.

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_camera_wireless_profile_0(request: web.Request, network_id, wireless_profile_id) -> web.Response:
    """Retrieve a single camera wireless profile.

    Retrieve a single camera wireless profile.

    :param network_id: 
    :type network_id: str
    :param wireless_profile_id: 
    :type wireless_profile_id: str

    """
    return web.Response(status=200)


async def get_network_camera_wireless_profiles_0(request: web.Request, network_id) -> web.Response:
    """List the camera wireless profiles for this network.

    List the camera wireless profiles for this network.

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_cellular_gateway_connectivity_monitoring_destinations_0(request: web.Request, network_id) -> web.Response:
    """Return the connectivity testing destinations for an MG network

    Return the connectivity testing destinations for an MG network

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_cellular_gateway_dhcp_0(request: web.Request, network_id) -> web.Response:
    """List common DHCP settings of MGs

    List common DHCP settings of MGs

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_cellular_gateway_subnet_pool_0(request: web.Request, network_id) -> web.Response:
    """Return the subnet pool and mask configured for MGs in the network.

    Return the subnet pool and mask configured for MGs in the network.

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_cellular_gateway_uplink_0(request: web.Request, network_id) -> web.Response:
    """Returns the uplink settings for your MG network.

    Returns the uplink settings for your MG network.

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_client_policy_0(request: web.Request, network_id, client_id) -> web.Response:
    """Return the policy assigned to a client on the network

    Return the policy assigned to a client on the network. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.

    :param network_id: 
    :type network_id: str
    :param client_id: 
    :type client_id: str

    """
    return web.Response(status=200)


async def get_network_client_splash_authorization_status_0(request: web.Request, network_id, client_id) -> web.Response:
    """Return the splash authorization for a client, for each SSID they&#39;ve associated with through splash

    Return the splash authorization for a client, for each SSID they&#39;ve associated with through splash. Only enabled SSIDs with Click-through splash enabled will be included. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.

    :param network_id: 
    :type network_id: str
    :param client_id: 
    :type client_id: str

    """
    return web.Response(status=200)


async def get_network_devices_0(request: web.Request, network_id) -> web.Response:
    """List the devices in a network

    List the devices in a network

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_firmware_upgrades_0(request: web.Request, network_id) -> web.Response:
    """Get firmware upgrade information for a network

    Get firmware upgrade information for a network

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_firmware_upgrades_staged_events_0(request: web.Request, network_id) -> web.Response:
    """Get the Staged Upgrade Event from a network

    Get the Staged Upgrade Event from a network

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_firmware_upgrades_staged_group_0(request: web.Request, network_id, group_id) -> web.Response:
    """Get a Staged Upgrade Group from a network

    Get a Staged Upgrade Group from a network

    :param network_id: 
    :type network_id: str
    :param group_id: 
    :type group_id: str

    """
    return web.Response(status=200)


async def get_network_firmware_upgrades_staged_groups_0(request: web.Request, network_id) -> web.Response:
    """List of Staged Upgrade Groups in a network

    List of Staged Upgrade Groups in a network

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_firmware_upgrades_staged_stages_0(request: web.Request, network_id) -> web.Response:
    """Order of Staged Upgrade Groups in a network

    Order of Staged Upgrade Groups in a network

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_floor_plan_0(request: web.Request, network_id, floor_plan_id) -> web.Response:
    """Find a floor plan by ID

    Find a floor plan by ID

    :param network_id: 
    :type network_id: str
    :param floor_plan_id: 
    :type floor_plan_id: str

    """
    return web.Response(status=200)


async def get_network_floor_plans_0(request: web.Request, network_id) -> web.Response:
    """List the floor plans that belong to your network

    List the floor plans that belong to your network

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_group_policies_0(request: web.Request, network_id) -> web.Response:
    """List the group policies in a network

    List the group policies in a network

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_group_policy_0(request: web.Request, network_id, group_policy_id) -> web.Response:
    """Display a group policy

    Display a group policy

    :param network_id: 
    :type network_id: str
    :param group_policy_id: 
    :type group_policy_id: str

    """
    return web.Response(status=200)


async def get_network_health_alerts_0(request: web.Request, network_id) -> web.Response:
    """Return all global alerts on this network

    Return all global alerts on this network

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_meraki_auth_user_0(request: web.Request, network_id, meraki_auth_user_id) -> web.Response:
    """Return the Meraki Auth splash guest, RADIUS, or client VPN user

    Return the Meraki Auth splash guest, RADIUS, or client VPN user

    :param network_id: 
    :type network_id: str
    :param meraki_auth_user_id: 
    :type meraki_auth_user_id: str

    """
    return web.Response(status=200)


async def get_network_meraki_auth_users_0(request: web.Request, network_id) -> web.Response:
    """List the users configured under Meraki Authentication for a network (splash guest or RADIUS users for a wireless network, or client VPN users for a wired network)

    List the users configured under Meraki Authentication for a network (splash guest or RADIUS users for a wireless network, or client VPN users for a wired network)

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_mqtt_broker_0(request: web.Request, network_id, mqtt_broker_id) -> web.Response:
    """Return an MQTT broker

    Return an MQTT broker

    :param network_id: 
    :type network_id: str
    :param mqtt_broker_id: 
    :type mqtt_broker_id: str

    """
    return web.Response(status=200)


async def get_network_mqtt_brokers_0(request: web.Request, network_id) -> web.Response:
    """List the MQTT brokers for this network

    List the MQTT brokers for this network

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_netflow_0(request: web.Request, network_id) -> web.Response:
    """Return the NetFlow traffic reporting settings for a network

    Return the NetFlow traffic reporting settings for a network

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_pii_pii_keys_0(request: web.Request, network_id, username=None, email=None, mac=None, serial=None, imei=None, bluetooth_mac=None) -> web.Response:
    """List the keys required to access Personally Identifiable Information (PII) for a given identifier

    List the keys required to access Personally Identifiable Information (PII) for a given identifier. Exactly one identifier will be accepted. If the organization contains org-wide Systems Manager users matching the key provided then there will be an entry with the key \&quot;0\&quot; containing the applicable keys.  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/piiKeys &#x60;&#x60;&#x60;

    :param network_id: 
    :type network_id: str
    :param username: The username of a Systems Manager user
    :type username: str
    :param email: The email of a network user account or a Systems Manager device
    :type email: str
    :param mac: The MAC of a network client device or a Systems Manager device
    :type mac: str
    :param serial: The serial of a Systems Manager device
    :type serial: str
    :param imei: The IMEI of a Systems Manager device
    :type imei: str
    :param bluetooth_mac: The MAC of a Bluetooth client
    :type bluetooth_mac: str

    """
    return web.Response(status=200)


async def get_network_pii_request_0(request: web.Request, network_id, request_id) -> web.Response:
    """Return a PII request

    Return a PII request  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/requests/{requestId} &#x60;&#x60;&#x60;

    :param network_id: 
    :type network_id: str
    :param request_id: 
    :type request_id: str

    """
    return web.Response(status=200)


async def get_network_pii_requests_0(request: web.Request, network_id) -> web.Response:
    """List the PII requests for this network or organization

    List the PII requests for this network or organization  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/requests &#x60;&#x60;&#x60;

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_pii_sm_devices_for_key_0(request: web.Request, network_id, username=None, email=None, mac=None, serial=None, imei=None, bluetooth_mac=None) -> web.Response:
    """Given a piece of Personally Identifiable Information (PII), return the Systems Manager device ID(s) associated with that identifier

    Given a piece of Personally Identifiable Information (PII), return the Systems Manager device ID(s) associated with that identifier. These device IDs can be used with the Systems Manager API endpoints to retrieve device details. Exactly one identifier will be accepted.  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/smDevicesForKey &#x60;&#x60;&#x60;

    :param network_id: 
    :type network_id: str
    :param username: The username of a Systems Manager user
    :type username: str
    :param email: The email of a network user account or a Systems Manager device
    :type email: str
    :param mac: The MAC of a network client device or a Systems Manager device
    :type mac: str
    :param serial: The serial of a Systems Manager device
    :type serial: str
    :param imei: The IMEI of a Systems Manager device
    :type imei: str
    :param bluetooth_mac: The MAC of a Bluetooth client
    :type bluetooth_mac: str

    """
    return web.Response(status=200)


async def get_network_pii_sm_owners_for_key_0(request: web.Request, network_id, username=None, email=None, mac=None, serial=None, imei=None, bluetooth_mac=None) -> web.Response:
    """Given a piece of Personally Identifiable Information (PII), return the Systems Manager owner ID(s) associated with that identifier

    Given a piece of Personally Identifiable Information (PII), return the Systems Manager owner ID(s) associated with that identifier. These owner IDs can be used with the Systems Manager API endpoints to retrieve owner details. Exactly one identifier will be accepted.  ## ALTERNATE PATH  &#x60;&#x60;&#x60; /organizations/{organizationId}/pii/smOwnersForKey &#x60;&#x60;&#x60;

    :param network_id: 
    :type network_id: str
    :param username: The username of a Systems Manager user
    :type username: str
    :param email: The email of a network user account or a Systems Manager device
    :type email: str
    :param mac: The MAC of a network client device or a Systems Manager device
    :type mac: str
    :param serial: The serial of a Systems Manager device
    :type serial: str
    :param imei: The IMEI of a Systems Manager device
    :type imei: str
    :param bluetooth_mac: The MAC of a Bluetooth client
    :type bluetooth_mac: str

    """
    return web.Response(status=200)


async def get_network_policies_by_client_0(request: web.Request, network_id, per_page=None, starting_after=None, ending_before=None, t0=None, timespan=None) -> web.Response:
    """Get policies for all clients with policies

    Get policies for all clients with policies

    :param network_id: 
    :type network_id: str
    :param per_page: The number of entries per page returned. Acceptable range is 3 - 1000. Default is 50.
    :type per_page: int
    :param starting_after: A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
    :type starting_after: str
    :param ending_before: A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
    :type ending_before: str
    :param t0: The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
    :type t0: str
    :param timespan: The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
    :type timespan: float

    """
    return web.Response(status=200)


async def get_network_sensor_alerts_profile_0(request: web.Request, network_id, id) -> web.Response:
    """Show details of a sensor alert profile for a network.

    Show details of a sensor alert profile for a network.

    :param network_id: 
    :type network_id: str
    :param id: 
    :type id: str

    """
    return web.Response(status=200)


async def get_network_sensor_alerts_profiles_0(request: web.Request, network_id) -> web.Response:
    """Lists all sensor alert profiles for a network.

    Lists all sensor alert profiles for a network.

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_sensor_relationships_0(request: web.Request, network_id) -> web.Response:
    """List the sensor roles for devices in a given network

    List the sensor roles for devices in a given network

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_settings_0(request: web.Request, network_id) -> web.Response:
    """Return the settings for a network

    Return the settings for a network

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_sm_bypass_activation_lock_attempt_0(request: web.Request, network_id, attempt_id) -> web.Response:
    """Bypass activation lock attempt status

    Bypass activation lock attempt status

    :param network_id: 
    :type network_id: str
    :param attempt_id: 
    :type attempt_id: str

    """
    return web.Response(status=200)


async def get_network_sm_device_certs_0(request: web.Request, network_id, device_id) -> web.Response:
    """List the certs on a device

    List the certs on a device

    :param network_id: 
    :type network_id: str
    :param device_id: 
    :type device_id: str

    """
    return web.Response(status=200)


async def get_network_sm_device_device_profiles_0(request: web.Request, network_id, device_id) -> web.Response:
    """Get the installed profiles associated with a device

    Get the installed profiles associated with a device

    :param network_id: 
    :type network_id: str
    :param device_id: 
    :type device_id: str

    """
    return web.Response(status=200)


async def get_network_sm_device_network_adapters_0(request: web.Request, network_id, device_id) -> web.Response:
    """List the network adapters of a device

    List the network adapters of a device

    :param network_id: 
    :type network_id: str
    :param device_id: 
    :type device_id: str

    """
    return web.Response(status=200)


async def get_network_sm_device_restrictions_0(request: web.Request, network_id, device_id) -> web.Response:
    """List the restrictions on a device

    List the restrictions on a device

    :param network_id: 
    :type network_id: str
    :param device_id: 
    :type device_id: str

    """
    return web.Response(status=200)


async def get_network_sm_device_security_centers_0(request: web.Request, network_id, device_id) -> web.Response:
    """List the security centers on a device

    List the security centers on a device

    :param network_id: 
    :type network_id: str
    :param device_id: 
    :type device_id: str

    """
    return web.Response(status=200)


async def get_network_sm_device_softwares_0(request: web.Request, network_id, device_id) -> web.Response:
    """Get a list of softwares associated with a device

    Get a list of softwares associated with a device

    :param network_id: 
    :type network_id: str
    :param device_id: 
    :type device_id: str

    """
    return web.Response(status=200)


async def get_network_sm_device_wlan_lists_0(request: web.Request, network_id, device_id) -> web.Response:
    """List the saved SSID names on a device

    List the saved SSID names on a device

    :param network_id: 
    :type network_id: str
    :param device_id: 
    :type device_id: str

    """
    return web.Response(status=200)


async def get_network_sm_devices_0(request: web.Request, network_id, fields=None, wifi_macs=None, serials=None, ids=None, scope=None, per_page=None, starting_after=None, ending_before=None) -> web.Response:
    """List the devices enrolled in an SM network with various specified fields and filters

    List the devices enrolled in an SM network with various specified fields and filters

    :param network_id: 
    :type network_id: str
    :param fields: Additional fields that will be displayed for each device.     The default fields are: id, name, tags, ssid, wifiMac, osName, systemModel, uuid, and serialNumber. The additional fields are: ip,     systemType, availableDeviceCapacity, kioskAppName, biosVersion, lastConnected, missingAppsCount, userSuppliedAddress, location, lastUser,     ownerEmail, ownerUsername, osBuild, publicIp, phoneNumber, diskInfoJson, deviceCapacity, isManaged, hadMdm, isSupervised, meid, imei, iccid,     simCarrierNetwork, cellularDataUsed, isHotspotEnabled, createdAt, batteryEstCharge, quarantined, avName, avRunning, asName, fwName,     isRooted, loginRequired, screenLockEnabled, screenLockDelay, autoLoginDisabled, autoTags, hasMdm, hasDesktopAgent, diskEncryptionEnabled,     hardwareEncryptionCaps, passCodeLock, usesHardwareKeystore, androidSecurityPatchVersion, and url.
    :type fields: List[str]
    :param wifi_macs: Filter devices by wifi mac(s).
    :type wifi_macs: List[str]
    :param serials: Filter devices by serial(s).
    :type serials: List[str]
    :param ids: Filter devices by id(s).
    :type ids: List[str]
    :param scope: Specify a scope (one of all, none, withAny, withAll, withoutAny, or withoutAll) and a set of tags.
    :type scope: List[str]
    :param per_page: The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
    :type per_page: int
    :param starting_after: A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
    :type starting_after: str
    :param ending_before: A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
    :type ending_before: str

    """
    return web.Response(status=200)


async def get_network_sm_profiles_0(request: web.Request, network_id) -> web.Response:
    """List all profiles in a network

    List all profiles in a network

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_sm_target_group_0(request: web.Request, network_id, target_group_id, with_details=None) -> web.Response:
    """Return a target group

    Return a target group

    :param network_id: 
    :type network_id: str
    :param target_group_id: 
    :type target_group_id: str
    :param with_details: Boolean indicating if the the ids of the devices or users scoped by the target group should be included in the response
    :type with_details: bool

    """
    return web.Response(status=200)


async def get_network_sm_target_groups_0(request: web.Request, network_id, with_details=None) -> web.Response:
    """List the target groups in this network

    List the target groups in this network

    :param network_id: 
    :type network_id: str
    :param with_details: Boolean indicating if the the ids of the devices or users scoped by the target group should be included in the response
    :type with_details: bool

    """
    return web.Response(status=200)


async def get_network_sm_trusted_access_configs_0(request: web.Request, network_id, per_page=None, starting_after=None, ending_before=None) -> web.Response:
    """List Trusted Access Configs

    List Trusted Access Configs

    :param network_id: 
    :type network_id: str
    :param per_page: The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100.
    :type per_page: int
    :param starting_after: A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
    :type starting_after: str
    :param ending_before: A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
    :type ending_before: str

    """
    return web.Response(status=200)


async def get_network_sm_user_access_devices_0(request: web.Request, network_id, per_page=None, starting_after=None, ending_before=None) -> web.Response:
    """List User Access Devices and its Trusted Access Connections

    List User Access Devices and its Trusted Access Connections

    :param network_id: 
    :type network_id: str
    :param per_page: The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100.
    :type per_page: int
    :param starting_after: A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
    :type starting_after: str
    :param ending_before: A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
    :type ending_before: str

    """
    return web.Response(status=200)


async def get_network_sm_user_device_profiles_0(request: web.Request, network_id, user_id) -> web.Response:
    """Get the profiles associated with a user

    Get the profiles associated with a user

    :param network_id: 
    :type network_id: str
    :param user_id: 
    :type user_id: str

    """
    return web.Response(status=200)


async def get_network_sm_user_softwares_0(request: web.Request, network_id, user_id) -> web.Response:
    """Get a list of softwares associated with a user

    Get a list of softwares associated with a user

    :param network_id: 
    :type network_id: str
    :param user_id: 
    :type user_id: str

    """
    return web.Response(status=200)


async def get_network_sm_users_0(request: web.Request, network_id, ids=None, usernames=None, emails=None, scope=None) -> web.Response:
    """List the owners in an SM network with various specified fields and filters

    List the owners in an SM network with various specified fields and filters

    :param network_id: 
    :type network_id: str
    :param ids: Filter users by id(s).
    :type ids: List[str]
    :param usernames: Filter users by username(s).
    :type usernames: List[str]
    :param emails: Filter users by email(s).
    :type emails: List[str]
    :param scope: Specifiy a scope (one of all, none, withAny, withAll, withoutAny, withoutAll) and a set of tags.
    :type scope: List[str]

    """
    return web.Response(status=200)


async def get_network_snmp_0(request: web.Request, network_id) -> web.Response:
    """Return the SNMP settings for a network

    Return the SNMP settings for a network

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_switch_access_control_lists_0(request: web.Request, network_id) -> web.Response:
    """Return the access control lists for a MS network

    Return the access control lists for a MS network

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_switch_access_policies_0(request: web.Request, network_id) -> web.Response:
    """List the access policies for a switch network

    List the access policies for a switch network. Only returns access policies with &#39;my RADIUS server&#39; as authentication method

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_switch_access_policy_0(request: web.Request, network_id, access_policy_number) -> web.Response:
    """Return a specific access policy for a switch network

    Return a specific access policy for a switch network

    :param network_id: 
    :type network_id: str
    :param access_policy_number: 
    :type access_policy_number: str

    """
    return web.Response(status=200)


async def get_network_switch_alternate_management_interface_0(request: web.Request, network_id) -> web.Response:
    """Return the switch alternate management interface for the network

    Return the switch alternate management interface for the network

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_switch_dhcp_server_policy_0(request: web.Request, network_id) -> web.Response:
    """Return the DHCP server settings

    Return the DHCP server settings. Blocked/allowed servers are only applied when default policy is allow/block, respectively

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_switch_dhcp_server_policy_arp_inspection_trusted_servers_0(request: web.Request, network_id, per_page=None, starting_after=None, ending_before=None) -> web.Response:
    """Return the list of servers trusted by Dynamic ARP Inspection on this network

    Return the list of servers trusted by Dynamic ARP Inspection on this network. These are also known as whitelisted snoop entries

    :param network_id: 
    :type network_id: str
    :param per_page: The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
    :type per_page: int
    :param starting_after: A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
    :type starting_after: str
    :param ending_before: A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
    :type ending_before: str

    """
    return web.Response(status=200)


async def get_network_switch_dhcp_server_policy_arp_inspection_warnings_by_device_0(request: web.Request, network_id, per_page=None, starting_after=None, ending_before=None) -> web.Response:
    """Return the devices that have a Dynamic ARP Inspection warning and their warnings

    Return the devices that have a Dynamic ARP Inspection warning and their warnings

    :param network_id: 
    :type network_id: str
    :param per_page: The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
    :type per_page: int
    :param starting_after: A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
    :type starting_after: str
    :param ending_before: A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
    :type ending_before: str

    """
    return web.Response(status=200)


async def get_network_switch_dhcp_v4_servers_seen_0(request: web.Request, network_id, t0=None, timespan=None, per_page=None, starting_after=None, ending_before=None) -> web.Response:
    """Return the network&#39;s DHCPv4 servers seen within the selected timeframe (default 1 day)

    Return the network&#39;s DHCPv4 servers seen within the selected timeframe (default 1 day)

    :param network_id: 
    :type network_id: str
    :param t0: The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
    :type t0: str
    :param timespan: The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
    :type timespan: float
    :param per_page: The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
    :type per_page: int
    :param starting_after: A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
    :type starting_after: str
    :param ending_before: A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
    :type ending_before: str

    """
    return web.Response(status=200)


async def get_network_switch_dscp_to_cos_mappings_0(request: web.Request, network_id) -> web.Response:
    """Return the DSCP to CoS mappings

    Return the DSCP to CoS mappings

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_switch_link_aggregations_0(request: web.Request, network_id) -> web.Response:
    """List link aggregation groups

    List link aggregation groups

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_switch_mtu_0(request: web.Request, network_id) -> web.Response:
    """Return the MTU configuration

    Return the MTU configuration

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_switch_port_schedules_0(request: web.Request, network_id) -> web.Response:
    """List switch port schedules

    List switch port schedules

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_switch_qos_rule_0(request: web.Request, network_id, qos_rule_id) -> web.Response:
    """Return a quality of service rule

    Return a quality of service rule

    :param network_id: 
    :type network_id: str
    :param qos_rule_id: 
    :type qos_rule_id: str

    """
    return web.Response(status=200)


async def get_network_switch_qos_rules_0(request: web.Request, network_id) -> web.Response:
    """List quality of service rules

    List quality of service rules

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_switch_qos_rules_order_0(request: web.Request, network_id) -> web.Response:
    """Return the quality of service rule IDs by order in which they will be processed by the switch

    Return the quality of service rule IDs by order in which they will be processed by the switch

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_switch_routing_multicast_0(request: web.Request, network_id) -> web.Response:
    """Return multicast settings for a network

    Return multicast settings for a network

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_switch_routing_multicast_rendezvous_point_0(request: web.Request, network_id, rendezvous_point_id) -> web.Response:
    """Return a multicast rendezvous point

    Return a multicast rendezvous point

    :param network_id: 
    :type network_id: str
    :param rendezvous_point_id: 
    :type rendezvous_point_id: str

    """
    return web.Response(status=200)


async def get_network_switch_routing_multicast_rendezvous_points_0(request: web.Request, network_id) -> web.Response:
    """List multicast rendezvous points

    List multicast rendezvous points

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_switch_routing_ospf_0(request: web.Request, network_id) -> web.Response:
    """Return layer 3 OSPF routing configuration

    Return layer 3 OSPF routing configuration

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_switch_settings_0(request: web.Request, network_id) -> web.Response:
    """Returns the switch network settings

    Returns the switch network settings

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_switch_stack_0(request: web.Request, network_id, switch_stack_id) -> web.Response:
    """Show a switch stack

    Show a switch stack

    :param network_id: 
    :type network_id: str
    :param switch_stack_id: 
    :type switch_stack_id: str

    """
    return web.Response(status=200)


async def get_network_switch_stack_routing_interface_0(request: web.Request, network_id, switch_stack_id, interface_id) -> web.Response:
    """Return a layer 3 interface from a switch stack

    Return a layer 3 interface from a switch stack

    :param network_id: 
    :type network_id: str
    :param switch_stack_id: 
    :type switch_stack_id: str
    :param interface_id: 
    :type interface_id: str

    """
    return web.Response(status=200)


async def get_network_switch_stack_routing_interface_dhcp_0(request: web.Request, network_id, switch_stack_id, interface_id) -> web.Response:
    """Return a layer 3 interface DHCP configuration for a switch stack

    Return a layer 3 interface DHCP configuration for a switch stack

    :param network_id: 
    :type network_id: str
    :param switch_stack_id: 
    :type switch_stack_id: str
    :param interface_id: 
    :type interface_id: str

    """
    return web.Response(status=200)


async def get_network_switch_stack_routing_interfaces_0(request: web.Request, network_id, switch_stack_id) -> web.Response:
    """List layer 3 interfaces for a switch stack

    List layer 3 interfaces for a switch stack

    :param network_id: 
    :type network_id: str
    :param switch_stack_id: 
    :type switch_stack_id: str

    """
    return web.Response(status=200)


async def get_network_switch_stack_routing_static_route_0(request: web.Request, network_id, switch_stack_id, static_route_id) -> web.Response:
    """Return a layer 3 static route for a switch stack

    Return a layer 3 static route for a switch stack

    :param network_id: 
    :type network_id: str
    :param switch_stack_id: 
    :type switch_stack_id: str
    :param static_route_id: 
    :type static_route_id: str

    """
    return web.Response(status=200)


async def get_network_switch_stack_routing_static_routes_0(request: web.Request, network_id, switch_stack_id) -> web.Response:
    """List layer 3 static routes for a switch stack

    List layer 3 static routes for a switch stack

    :param network_id: 
    :type network_id: str
    :param switch_stack_id: 
    :type switch_stack_id: str

    """
    return web.Response(status=200)


async def get_network_switch_stacks_0(request: web.Request, network_id) -> web.Response:
    """List the switch stacks in a network

    List the switch stacks in a network

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_switch_storm_control_0(request: web.Request, network_id) -> web.Response:
    """Return the storm control configuration for a switch network

    Return the storm control configuration for a switch network

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_switch_stp_0(request: web.Request, network_id) -> web.Response:
    """Returns STP settings

    Returns STP settings

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_syslog_servers_0(request: web.Request, network_id) -> web.Response:
    """List the syslog servers for a network

    List the syslog servers for a network

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_traffic_analysis_0(request: web.Request, network_id) -> web.Response:
    """Return the traffic analysis settings for a network

    Return the traffic analysis settings for a network

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_traffic_shaping_application_categories_0(request: web.Request, network_id) -> web.Response:
    """Returns the application categories for traffic shaping rules.

    Returns the application categories for traffic shaping rules.

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_traffic_shaping_dscp_tagging_options_0(request: web.Request, network_id) -> web.Response:
    """Returns the available DSCP tagging options for your traffic shaping rules.

    Returns the available DSCP tagging options for your traffic shaping rules.

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_webhooks_http_server_0(request: web.Request, network_id, http_server_id) -> web.Response:
    """Return an HTTP server for a network

    Return an HTTP server for a network

    :param network_id: 
    :type network_id: str
    :param http_server_id: 
    :type http_server_id: str

    """
    return web.Response(status=200)


async def get_network_webhooks_http_servers_0(request: web.Request, network_id) -> web.Response:
    """List the HTTP servers for a network

    List the HTTP servers for a network

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_webhooks_payload_template_0(request: web.Request, network_id, payload_template_id) -> web.Response:
    """Get the webhook payload template for a network

    Get the webhook payload template for a network

    :param network_id: 
    :type network_id: str
    :param payload_template_id: 
    :type payload_template_id: str

    """
    return web.Response(status=200)


async def get_network_webhooks_payload_templates_0(request: web.Request, network_id) -> web.Response:
    """List the webhook payload templates for a network

    List the webhook payload templates for a network

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_webhooks_webhook_test_0(request: web.Request, network_id, webhook_test_id) -> web.Response:
    """Return the status of a webhook test for a network

    Return the status of a webhook test for a network

    :param network_id: 
    :type network_id: str
    :param webhook_test_id: 
    :type webhook_test_id: str

    """
    return web.Response(status=200)


async def get_network_wireless_alternate_management_interface_0(request: web.Request, network_id) -> web.Response:
    """Return alternate management interface and devices with IP assigned

    Return alternate management interface and devices with IP assigned

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_wireless_billing_0(request: web.Request, network_id) -> web.Response:
    """Return the billing settings of this network

    Return the billing settings of this network

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_wireless_bluetooth_settings_0(request: web.Request, network_id) -> web.Response:
    """Return the Bluetooth settings for a network. &lt;a href&#x3D;\&quot;https://documentation.meraki.com/MR/Bluetooth/Bluetooth_Low_Energy_(BLE)\&quot;&gt;Bluetooth settings&lt;/a&gt; must be enabled on the network.

    Return the Bluetooth settings for a network. &lt;a href&#x3D;\&quot;https://documentation.meraki.com/MR/Bluetooth/Bluetooth_Low_Energy_(BLE)\&quot;&gt;Bluetooth settings&lt;/a&gt; must be enabled on the network.

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_wireless_rf_profile_0(request: web.Request, network_id, rf_profile_id) -> web.Response:
    """Return a RF profile

    Return a RF profile

    :param network_id: 
    :type network_id: str
    :param rf_profile_id: 
    :type rf_profile_id: str

    """
    return web.Response(status=200)


async def get_network_wireless_rf_profiles_0(request: web.Request, network_id, include_template_profiles=None) -> web.Response:
    """List the non-basic RF profiles for this network

    List the non-basic RF profiles for this network

    :param network_id: 
    :type network_id: str
    :param include_template_profiles: If the network is bound to a template, this parameter controls whether or not the non-basic RF profiles defined on the template should be included in the response alongside the non-basic profiles defined on the bound network. Defaults to false.
    :type include_template_profiles: bool

    """
    return web.Response(status=200)


async def get_network_wireless_settings_0(request: web.Request, network_id) -> web.Response:
    """Return the wireless settings for a network

    Return the wireless settings for a network

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_network_wireless_ssid_0(request: web.Request, network_id, number) -> web.Response:
    """Return a single MR SSID

    Return a single MR SSID

    :param network_id: 
    :type network_id: str
    :param number: 
    :type number: str

    """
    return web.Response(status=200)


async def get_network_wireless_ssid_bonjour_forwarding_0(request: web.Request, network_id, number) -> web.Response:
    """List the Bonjour forwarding setting and rules for the SSID

    List the Bonjour forwarding setting and rules for the SSID

    :param network_id: 
    :type network_id: str
    :param number: 
    :type number: str

    """
    return web.Response(status=200)


async def get_network_wireless_ssid_device_type_group_policies_0(request: web.Request, network_id, number) -> web.Response:
    """List the device type group policies for the SSID

    List the device type group policies for the SSID

    :param network_id: 
    :type network_id: str
    :param number: 
    :type number: str

    """
    return web.Response(status=200)


async def get_network_wireless_ssid_eap_override_0(request: web.Request, network_id, number) -> web.Response:
    """Return the EAP overridden parameters for an SSID

    Return the EAP overridden parameters for an SSID

    :param network_id: 
    :type network_id: str
    :param number: 
    :type number: str

    """
    return web.Response(status=200)


async def get_network_wireless_ssid_firewall_l3_firewall_rules_0(request: web.Request, network_id, number) -> web.Response:
    """Return the L3 firewall rules for an SSID on an MR network

    Return the L3 firewall rules for an SSID on an MR network

    :param network_id: 
    :type network_id: str
    :param number: 
    :type number: str

    """
    return web.Response(status=200)


async def get_network_wireless_ssid_firewall_l7_firewall_rules_0(request: web.Request, network_id, number) -> web.Response:
    """Return the L7 firewall rules for an SSID on an MR network

    Return the L7 firewall rules for an SSID on an MR network

    :param network_id: 
    :type network_id: str
    :param number: 
    :type number: str

    """
    return web.Response(status=200)


async def get_network_wireless_ssid_hotspot20_0(request: web.Request, network_id, number) -> web.Response:
    """Return the Hotspot 2.0 settings for an SSID

    Return the Hotspot 2.0 settings for an SSID

    :param network_id: 
    :type network_id: str
    :param number: 
    :type number: str

    """
    return web.Response(status=200)


async def get_network_wireless_ssid_identity_psk_0(request: web.Request, network_id, number, identity_psk_id) -> web.Response:
    """Return an Identity PSK

    Return an Identity PSK

    :param network_id: 
    :type network_id: str
    :param number: 
    :type number: str
    :param identity_psk_id: 
    :type identity_psk_id: str

    """
    return web.Response(status=200)


async def get_network_wireless_ssid_identity_psks_0(request: web.Request, network_id, number) -> web.Response:
    """List all Identity PSKs in a wireless network

    List all Identity PSKs in a wireless network

    :param network_id: 
    :type network_id: str
    :param number: 
    :type number: str

    """
    return web.Response(status=200)


async def get_network_wireless_ssid_schedules_0(request: web.Request, network_id, number) -> web.Response:
    """List the outage schedule for the SSID

    List the outage schedule for the SSID

    :param network_id: 
    :type network_id: str
    :param number: 
    :type number: str

    """
    return web.Response(status=200)


async def get_network_wireless_ssid_splash_settings_0(request: web.Request, network_id, number) -> web.Response:
    """Display the splash page settings for the given SSID

    Display the splash page settings for the given SSID

    :param network_id: 
    :type network_id: str
    :param number: 
    :type number: str

    """
    return web.Response(status=200)


async def get_network_wireless_ssid_traffic_shaping_rules_0(request: web.Request, network_id, number) -> web.Response:
    """Display the traffic shaping settings for a SSID on an MR network

    Display the traffic shaping settings for a SSID on an MR network

    :param network_id: 
    :type network_id: str
    :param number: 
    :type number: str

    """
    return web.Response(status=200)


async def get_network_wireless_ssid_vpn_0(request: web.Request, network_id, number) -> web.Response:
    """List the VPN settings for the SSID.

    List the VPN settings for the SSID.

    :param network_id: 
    :type network_id: str
    :param number: 
    :type number: str

    """
    return web.Response(status=200)


async def get_network_wireless_ssids_0(request: web.Request, network_id) -> web.Response:
    """List the MR SSIDs in a network

    List the MR SSIDs in a network

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def get_organization_0(request: web.Request, organization_id) -> web.Response:
    """Return an organization

    Return an organization

    :param organization_id: 
    :type organization_id: str

    """
    return web.Response(status=200)


async def get_organization_action_batch_0(request: web.Request, organization_id, action_batch_id) -> web.Response:
    """Return an action batch

    Return an action batch

    :param organization_id: 
    :type organization_id: str
    :param action_batch_id: 
    :type action_batch_id: str

    """
    return web.Response(status=200)


async def get_organization_action_batches_0(request: web.Request, organization_id, status=None) -> web.Response:
    """Return the list of action batches in the organization

    Return the list of action batches in the organization

    :param organization_id: 
    :type organization_id: str
    :param status: Filter batches by status. Valid types are pending, completed, and failed.
    :type status: str

    """
    return web.Response(status=200)


async def get_organization_adaptive_policy_acl_0(request: web.Request, organization_id, acl_id) -> web.Response:
    """Returns the adaptive policy ACL information

    Returns the adaptive policy ACL information

    :param organization_id: 
    :type organization_id: str
    :param acl_id: 
    :type acl_id: str

    """
    return web.Response(status=200)


async def get_organization_adaptive_policy_acls_0(request: web.Request, organization_id) -> web.Response:
    """List adaptive policy ACLs in a organization

    List adaptive policy ACLs in a organization

    :param organization_id: 
    :type organization_id: str

    """
    return web.Response(status=200)


async def get_organization_adaptive_policy_group_0(request: web.Request, organization_id, id) -> web.Response:
    """Returns an adaptive policy group

    Returns an adaptive policy group

    :param organization_id: 
    :type organization_id: str
    :param id: 
    :type id: str

    """
    return web.Response(status=200)


async def get_organization_adaptive_policy_groups_0(request: web.Request, organization_id) -> web.Response:
    """List adaptive policy groups in a organization

    List adaptive policy groups in a organization

    :param organization_id: 
    :type organization_id: str

    """
    return web.Response(status=200)


async def get_organization_adaptive_policy_policies_0(request: web.Request, organization_id) -> web.Response:
    """List adaptive policies in an organization

    List adaptive policies in an organization

    :param organization_id: 
    :type organization_id: str

    """
    return web.Response(status=200)


async def get_organization_adaptive_policy_policy_0(request: web.Request, organization_id, id) -> web.Response:
    """Return an adaptive policy

    Return an adaptive policy

    :param organization_id: 
    :type organization_id: str
    :param id: 
    :type id: str

    """
    return web.Response(status=200)


async def get_organization_adaptive_policy_settings_0(request: web.Request, organization_id) -> web.Response:
    """Returns global adaptive policy settings in an organization

    Returns global adaptive policy settings in an organization

    :param organization_id: 
    :type organization_id: str

    """
    return web.Response(status=200)


async def get_organization_admins_0(request: web.Request, organization_id) -> web.Response:
    """List the dashboard administrators in this organization

    List the dashboard administrators in this organization

    :param organization_id: 
    :type organization_id: str

    """
    return web.Response(status=200)


async def get_organization_alerts_profiles_0(request: web.Request, organization_id) -> web.Response:
    """List all organization-wide alert configurations

    List all organization-wide alert configurations

    :param organization_id: 
    :type organization_id: str

    """
    return web.Response(status=200)


async def get_organization_appliance_security_intrusion_0(request: web.Request, organization_id) -> web.Response:
    """Returns all supported intrusion settings for an organization

    Returns all supported intrusion settings for an organization

    :param organization_id: 
    :type organization_id: str

    """
    return web.Response(status=200)


async def get_organization_appliance_vpn_third_party_vpn_peers_0(request: web.Request, organization_id) -> web.Response:
    """Return the third party VPN peers for an organization

    Return the third party VPN peers for an organization

    :param organization_id: 
    :type organization_id: str

    """
    return web.Response(status=200)


async def get_organization_appliance_vpn_vpn_firewall_rules_0(request: web.Request, organization_id) -> web.Response:
    """Return the firewall rules for an organization&#39;s site-to-site VPN

    Return the firewall rules for an organization&#39;s site-to-site VPN

    :param organization_id: 
    :type organization_id: str

    """
    return web.Response(status=200)


async def get_organization_branding_policies_0(request: web.Request, organization_id) -> web.Response:
    """List the branding policies of an organization

    List the branding policies of an organization

    :param organization_id: 
    :type organization_id: str

    """
    return web.Response(status=200)


async def get_organization_branding_policies_priorities_0(request: web.Request, organization_id) -> web.Response:
    """Return the branding policy IDs of an organization in priority order

    Return the branding policy IDs of an organization in priority order. IDs are ordered in ascending order of priority (IDs later in the array have higher priority).

    :param organization_id: 
    :type organization_id: str

    """
    return web.Response(status=200)


async def get_organization_branding_policy_0(request: web.Request, organization_id, branding_policy_id) -> web.Response:
    """Return a branding policy

    Return a branding policy

    :param organization_id: 
    :type organization_id: str
    :param branding_policy_id: 
    :type branding_policy_id: str

    """
    return web.Response(status=200)


async def get_organization_camera_custom_analytics_artifact_0(request: web.Request, organization_id, artifact_id) -> web.Response:
    """Get Custom Analytics Artifact

    Get Custom Analytics Artifact

    :param organization_id: 
    :type organization_id: str
    :param artifact_id: 
    :type artifact_id: str

    """
    return web.Response(status=200)


async def get_organization_camera_custom_analytics_artifacts_0(request: web.Request, organization_id) -> web.Response:
    """List Custom Analytics Artifacts

    List Custom Analytics Artifacts

    :param organization_id: 
    :type organization_id: str

    """
    return web.Response(status=200)


async def get_organization_camera_onboarding_statuses_0(request: web.Request, organization_id, serials=None, network_ids=None) -> web.Response:
    """Fetch onboarding status of cameras

    Fetch onboarding status of cameras

    :param organization_id: 
    :type organization_id: str
    :param serials: A list of serial numbers. The returned cameras will be filtered to only include these serials.
    :type serials: List[str]
    :param network_ids: A list of network IDs. The returned cameras will be filtered to only include these networks.
    :type network_ids: List[str]

    """
    return web.Response(status=200)


async def get_organization_clients_search_0(request: web.Request, organization_id, mac, per_page=None, starting_after=None, ending_before=None) -> web.Response:
    """Return the client details in an organization

    Return the client details in an organization

    :param organization_id: 
    :type organization_id: str
    :param mac: The MAC address of the client. Required.
    :type mac: str
    :param per_page: The number of entries per page returned. Acceptable range is 3 - 5. Default is 5.
    :type per_page: int
    :param starting_after: A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
    :type starting_after: str
    :param ending_before: A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
    :type ending_before: str

    """
    return web.Response(status=200)


async def get_organization_config_template_0(request: web.Request, organization_id, config_template_id) -> web.Response:
    """Return a single configuration template

    Return a single configuration template

    :param organization_id: 
    :type organization_id: str
    :param config_template_id: 
    :type config_template_id: str

    """
    return web.Response(status=200)


async def get_organization_config_template_switch_profile_port_0(request: web.Request, organization_id, config_template_id, profile_id, port_id) -> web.Response:
    """Return a switch profile port

    Return a switch profile port

    :param organization_id: 
    :type organization_id: str
    :param config_template_id: 
    :type config_template_id: str
    :param profile_id: 
    :type profile_id: str
    :param port_id: 
    :type port_id: str

    """
    return web.Response(status=200)


async def get_organization_config_template_switch_profile_ports_0(request: web.Request, organization_id, config_template_id, profile_id) -> web.Response:
    """Return all the ports of a switch profile

    Return all the ports of a switch profile

    :param organization_id: 
    :type organization_id: str
    :param config_template_id: 
    :type config_template_id: str
    :param profile_id: 
    :type profile_id: str

    """
    return web.Response(status=200)


async def get_organization_config_template_switch_profiles_0(request: web.Request, organization_id, config_template_id) -> web.Response:
    """List the switch profiles for your switch template configuration

    List the switch profiles for your switch template configuration

    :param organization_id: 
    :type organization_id: str
    :param config_template_id: 
    :type config_template_id: str

    """
    return web.Response(status=200)


async def get_organization_config_templates_0(request: web.Request, organization_id) -> web.Response:
    """List the configuration templates for this organization

    List the configuration templates for this organization

    :param organization_id: 
    :type organization_id: str

    """
    return web.Response(status=200)


async def get_organization_devices_0(request: web.Request, organization_id, per_page=None, starting_after=None, ending_before=None, configuration_updated_after=None, network_ids=None, product_types=None, tags=None, tags_filter_type=None, name=None, mac=None, serial=None, model=None, macs=None, serials=None, sensor_metrics=None, sensor_alert_profile_ids=None, models=None) -> web.Response:
    """List the devices in an organization

    List the devices in an organization

    :param organization_id: 
    :type organization_id: str
    :param per_page: The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
    :type per_page: int
    :param starting_after: A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
    :type starting_after: str
    :param ending_before: A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
    :type ending_before: str
    :param configuration_updated_after: Filter results by whether or not the device&#39;s configuration has been updated after the given timestamp
    :type configuration_updated_after: str
    :param network_ids: Optional parameter to filter devices by network.
    :type network_ids: List[str]
    :param product_types: Optional parameter to filter devices by product type. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, and sensor.
    :type product_types: List[str]
    :param tags: Optional parameter to filter devices by tags.
    :type tags: List[str]
    :param tags_filter_type: Optional parameter of value &#39;withAnyTags&#39; or &#39;withAllTags&#39; to indicate whether to return networks which contain ANY or ALL of the included tags. If no type is included, &#39;withAnyTags&#39; will be selected.
    :type tags_filter_type: str
    :param name: Optional parameter to filter devices by name. All returned devices will have a name that contains the search term or is an exact match.
    :type name: str
    :param mac: Optional parameter to filter devices by MAC address. All returned devices will have a MAC address that contains the search term or is an exact match.
    :type mac: str
    :param serial: Optional parameter to filter devices by serial number. All returned devices will have a serial number that contains the search term or is an exact match.
    :type serial: str
    :param model: Optional parameter to filter devices by model. All returned devices will have a model that contains the search term or is an exact match.
    :type model: str
    :param macs: Optional parameter to filter devices by one or more MAC addresses. All returned devices will have a MAC address that is an exact match.
    :type macs: List[str]
    :param serials: Optional parameter to filter devices by one or more serial numbers. All returned devices will have a serial number that is an exact match.
    :type serials: List[str]
    :param sensor_metrics: Optional parameter to filter devices by the metrics that they provide. Only applies to sensor devices.
    :type sensor_metrics: List[str]
    :param sensor_alert_profile_ids: Optional parameter to filter devices by the alert profiles that are bound to them. Only applies to sensor devices.
    :type sensor_alert_profile_ids: List[str]
    :param models: Optional parameter to filter devices by one or more models. All returned devices will have a model that is an exact match.
    :type models: List[str]

    """
    return web.Response(status=200)


async def get_organization_early_access_features_0(request: web.Request, organization_id) -> web.Response:
    """List the available early access features for organization

    List the available early access features for organization

    :param organization_id: 
    :type organization_id: str

    """
    return web.Response(status=200)


async def get_organization_early_access_features_opt_in_0(request: web.Request, organization_id, opt_in_id) -> web.Response:
    """Show an early access feature opt-in for an organization

    Show an early access feature opt-in for an organization

    :param organization_id: 
    :type organization_id: str
    :param opt_in_id: 
    :type opt_in_id: str

    """
    return web.Response(status=200)


async def get_organization_early_access_features_opt_ins_0(request: web.Request, organization_id) -> web.Response:
    """List the early access feature opt-ins for an organization

    List the early access feature opt-ins for an organization

    :param organization_id: 
    :type organization_id: str

    """
    return web.Response(status=200)


async def get_organization_firmware_upgrades_0(request: web.Request, organization_id, status=None, product_type=None) -> web.Response:
    """Get firmware upgrade information for an organization

    Get firmware upgrade information for an organization

    :param organization_id: 
    :type organization_id: str
    :param status: The status of an upgrade 
    :type status: List[str]
    :param product_type: The product type in a given upgrade ID
    :type product_type: List[str]

    """
    return web.Response(status=200)


async def get_organization_firmware_upgrades_by_device_0(request: web.Request, organization_id, per_page=None, starting_after=None, ending_before=None, network_ids=None, serials=None, macs=None, firmware_upgrade_ids=None, firmware_upgrade_batch_ids=None) -> web.Response:
    """Get firmware upgrade status for the filtered devices

    Get firmware upgrade status for the filtered devices

    :param organization_id: 
    :type organization_id: str
    :param per_page: The number of entries per page returned. Acceptable range is 3 - 50. Default is 50.
    :type per_page: int
    :param starting_after: A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
    :type starting_after: str
    :param ending_before: A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
    :type ending_before: str
    :param network_ids: Optional parameter to filter by network
    :type network_ids: List[str]
    :param serials: Optional parameter to filter by serial number.  All returned devices will have a serial number that is an exact match.
    :type serials: List[str]
    :param macs: Optional parameter to filter by one or more MAC addresses belonging to devices. All devices returned belong to MAC addresses that are an exact match.
    :type macs: List[str]
    :param firmware_upgrade_ids: Optional parameter to filter by firmware upgrade ids.
    :type firmware_upgrade_ids: List[str]
    :param firmware_upgrade_batch_ids: Optional parameter to filter by firmware upgrade batch ids.
    :type firmware_upgrade_batch_ids: List[str]

    """
    return web.Response(status=200)


async def get_organization_insight_applications_0(request: web.Request, organization_id) -> web.Response:
    """List all Insight tracked applications

    List all Insight tracked applications

    :param organization_id: 
    :type organization_id: str

    """
    return web.Response(status=200)


async def get_organization_insight_monitored_media_server_0(request: web.Request, organization_id, monitored_media_server_id) -> web.Response:
    """Return a monitored media server for this organization

    Return a monitored media server for this organization. Only valid for organizations with Meraki Insight.

    :param organization_id: 
    :type organization_id: str
    :param monitored_media_server_id: 
    :type monitored_media_server_id: str

    """
    return web.Response(status=200)


async def get_organization_insight_monitored_media_servers_0(request: web.Request, organization_id) -> web.Response:
    """List the monitored media servers for this organization

    List the monitored media servers for this organization. Only valid for organizations with Meraki Insight.

    :param organization_id: 
    :type organization_id: str

    """
    return web.Response(status=200)


async def get_organization_inventory_device_0(request: web.Request, organization_id, serial) -> web.Response:
    """Return a single device from the inventory of an organization

    Return a single device from the inventory of an organization

    :param organization_id: 
    :type organization_id: str
    :param serial: 
    :type serial: str

    """
    return web.Response(status=200)


async def get_organization_inventory_devices_0(request: web.Request, organization_id, per_page=None, starting_after=None, ending_before=None, used_state=None, search=None, macs=None, network_ids=None, serials=None, models=None, order_numbers=None, tags=None, tags_filter_type=None, product_types=None) -> web.Response:
    """Return the device inventory for an organization

    Return the device inventory for an organization

    :param organization_id: 
    :type organization_id: str
    :param per_page: The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
    :type per_page: int
    :param starting_after: A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
    :type starting_after: str
    :param ending_before: A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
    :type ending_before: str
    :param used_state: Filter results by used or unused inventory. Accepted values are &#39;used&#39; or &#39;unused&#39;.
    :type used_state: str
    :param search: Search for devices in inventory based on serial number, mac address, or model.
    :type search: str
    :param macs: Search for devices in inventory based on mac addresses.
    :type macs: List[str]
    :param network_ids: Search for devices in inventory based on network ids.
    :type network_ids: List[str]
    :param serials: Search for devices in inventory based on serials.
    :type serials: List[str]
    :param models: Search for devices in inventory based on model.
    :type models: List[str]
    :param order_numbers: Search for devices in inventory based on order numbers.
    :type order_numbers: List[str]
    :param tags: Filter devices by tags. The filtering is case-sensitive. If tags are included, &#39;tagsFilterType&#39; should also be included (see below).
    :type tags: List[str]
    :param tags_filter_type: To use with &#39;tags&#39; parameter, to filter devices which contain ANY or ALL given tags. Accepted values are &#39;withAnyTags&#39; or &#39;withAllTags&#39;, default is &#39;withAnyTags&#39;.
    :type tags_filter_type: str
    :param product_types: Filter devices by product type. Accepted values are appliance, camera, cellularGateway, sensor, switch, systemsManager, and wireless.
    :type product_types: List[str]

    """
    return web.Response(status=200)


async def get_organization_inventory_onboarding_cloud_monitoring_imports_0(request: web.Request, organization_id, import_ids) -> web.Response:
    """Check the status of a committed Import operation

    Check the status of a committed Import operation

    :param organization_id: 
    :type organization_id: str
    :param import_ids: import ids from an imports
    :type import_ids: List[str]

    """
    return web.Response(status=200)


async def get_organization_inventory_onboarding_cloud_monitoring_networks_0(request: web.Request, organization_id, device_type, per_page=None, starting_after=None, ending_before=None) -> web.Response:
    """Returns list of networks eligible for adding cloud monitored device

    Returns list of networks eligible for adding cloud monitored device

    :param organization_id: 
    :type organization_id: str
    :param device_type: Device Type switch or wireless controller
    :type device_type: str
    :param per_page: The number of entries per page returned. Acceptable range is 3 - 100000. Default is 1000.
    :type per_page: int
    :param starting_after: A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
    :type starting_after: str
    :param ending_before: A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
    :type ending_before: str

    """
    return web.Response(status=200)


async def get_organization_license_0(request: web.Request, organization_id, license_id) -> web.Response:
    """Display a license

    Display a license

    :param organization_id: 
    :type organization_id: str
    :param license_id: 
    :type license_id: str

    """
    return web.Response(status=200)


async def get_organization_licenses_0(request: web.Request, organization_id, per_page=None, starting_after=None, ending_before=None, device_serial=None, network_id=None, state=None) -> web.Response:
    """List the licenses for an organization

    List the licenses for an organization

    :param organization_id: 
    :type organization_id: str
    :param per_page: The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
    :type per_page: int
    :param starting_after: A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
    :type starting_after: str
    :param ending_before: A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
    :type ending_before: str
    :param device_serial: Filter the licenses to those assigned to a particular device. Returned in the same order that they are queued to the device.
    :type device_serial: str
    :param network_id: Filter the licenses to those assigned in a particular network
    :type network_id: str
    :param state: Filter the licenses to those in a particular state. Can be one of &#39;active&#39;, &#39;expired&#39;, &#39;expiring&#39;, &#39;recentlyQueued&#39;, &#39;unused&#39; or &#39;unusedActive&#39;
    :type state: str

    """
    return web.Response(status=200)


async def get_organization_licensing_coterm_licenses_0(request: web.Request, organization_id, per_page=None, starting_after=None, ending_before=None, invalidated=None, expired=None) -> web.Response:
    """List the licenses in a coterm organization

    List the licenses in a coterm organization

    :param organization_id: 
    :type organization_id: str
    :param per_page: The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
    :type per_page: int
    :param starting_after: A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
    :type starting_after: str
    :param ending_before: A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
    :type ending_before: str
    :param invalidated: Filter for licenses that are invalidated
    :type invalidated: bool
    :param expired: Filter for licenses that are expired
    :type expired: bool

    """
    return web.Response(status=200)


async def get_organization_login_security_0(request: web.Request, organization_id) -> web.Response:
    """Returns the login security settings for an organization.

    Returns the login security settings for an organization.

    :param organization_id: 
    :type organization_id: str

    """
    return web.Response(status=200)


async def get_organization_networks_0(request: web.Request, organization_id, config_template_id=None, is_bound_to_config_template=None, tags=None, tags_filter_type=None, per_page=None, starting_after=None, ending_before=None) -> web.Response:
    """List the networks that the user has privileges on in an organization

    List the networks that the user has privileges on in an organization

    :param organization_id: 
    :type organization_id: str
    :param config_template_id: An optional parameter that is the ID of a config template. Will return all networks bound to that template.
    :type config_template_id: str
    :param is_bound_to_config_template: An optional parameter to filter config template bound networks. If configTemplateId is set, this cannot be false.
    :type is_bound_to_config_template: bool
    :param tags: An optional parameter to filter networks by tags. The filtering is case-sensitive. If tags are included, &#39;tagsFilterType&#39; should also be included (see below).
    :type tags: List[str]
    :param tags_filter_type: An optional parameter of value &#39;withAnyTags&#39; or &#39;withAllTags&#39; to indicate whether to return networks which contain ANY or ALL of the included tags. If no type is included, &#39;withAnyTags&#39; will be selected.
    :type tags_filter_type: str
    :param per_page: The number of entries per page returned. Acceptable range is 3 - 100000. Default is 1000.
    :type per_page: int
    :param starting_after: A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
    :type starting_after: str
    :param ending_before: A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
    :type ending_before: str

    """
    return web.Response(status=200)


async def get_organization_policy_object_0(request: web.Request, organization_id, policy_object_id) -> web.Response:
    """Shows details of a Policy Object.

    Shows details of a Policy Object.

    :param organization_id: 
    :type organization_id: str
    :param policy_object_id: 
    :type policy_object_id: str

    """
    return web.Response(status=200)


async def get_organization_policy_objects_0(request: web.Request, organization_id, per_page=None, starting_after=None, ending_before=None) -> web.Response:
    """Lists Policy Objects belonging to the organization.

    Lists Policy Objects belonging to the organization.

    :param organization_id: 
    :type organization_id: str
    :param per_page: The number of entries per page returned. Acceptable range is 10 - 5000. Default is 5000.
    :type per_page: int
    :param starting_after: A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
    :type starting_after: str
    :param ending_before: A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
    :type ending_before: str

    """
    return web.Response(status=200)


async def get_organization_policy_objects_group_0(request: web.Request, organization_id, policy_object_group_id) -> web.Response:
    """Shows details of a Policy Object Group.

    Shows details of a Policy Object Group.

    :param organization_id: 
    :type organization_id: str
    :param policy_object_group_id: 
    :type policy_object_group_id: str

    """
    return web.Response(status=200)


async def get_organization_policy_objects_groups_0(request: web.Request, organization_id, per_page=None, starting_after=None, ending_before=None) -> web.Response:
    """Lists Policy Object Groups belonging to the organization.

    Lists Policy Object Groups belonging to the organization.

    :param organization_id: 
    :type organization_id: str
    :param per_page: The number of entries per page returned. Acceptable range is 10 - 1000. Default is 1000.
    :type per_page: int
    :param starting_after: A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
    :type starting_after: str
    :param ending_before: A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
    :type ending_before: str

    """
    return web.Response(status=200)


async def get_organization_saml_0(request: web.Request, organization_id) -> web.Response:
    """Returns the SAML SSO enabled settings for an organization.

    Returns the SAML SSO enabled settings for an organization.

    :param organization_id: 
    :type organization_id: str

    """
    return web.Response(status=200)


async def get_organization_saml_idp_0(request: web.Request, organization_id, idp_id) -> web.Response:
    """Get a SAML IdP from your organization.

    Get a SAML IdP from your organization.

    :param organization_id: 
    :type organization_id: str
    :param idp_id: 
    :type idp_id: str

    """
    return web.Response(status=200)


async def get_organization_saml_idps_0(request: web.Request, organization_id) -> web.Response:
    """List the SAML IdPs in your organization.

    List the SAML IdPs in your organization.

    :param organization_id: 
    :type organization_id: str

    """
    return web.Response(status=200)


async def get_organization_saml_role_0(request: web.Request, organization_id, saml_role_id) -> web.Response:
    """Return a SAML role

    Return a SAML role

    :param organization_id: 
    :type organization_id: str
    :param saml_role_id: 
    :type saml_role_id: str

    """
    return web.Response(status=200)


async def get_organization_saml_roles_0(request: web.Request, organization_id) -> web.Response:
    """List the SAML roles for this organization

    List the SAML roles for this organization

    :param organization_id: 
    :type organization_id: str

    """
    return web.Response(status=200)


async def get_organization_sm_apns_cert_0(request: web.Request, organization_id) -> web.Response:
    """Get the organization&#39;s APNS certificate

    Get the organization&#39;s APNS certificate

    :param organization_id: 
    :type organization_id: str

    """
    return web.Response(status=200)


async def get_organization_sm_vpp_account_0(request: web.Request, organization_id, vpp_account_id) -> web.Response:
    """Get a hash containing the unparsed token of the VPP account with the given ID

    Get a hash containing the unparsed token of the VPP account with the given ID

    :param organization_id: 
    :type organization_id: str
    :param vpp_account_id: 
    :type vpp_account_id: str

    """
    return web.Response(status=200)


async def get_organization_sm_vpp_accounts_0(request: web.Request, organization_id) -> web.Response:
    """List the VPP accounts in the organization

    List the VPP accounts in the organization

    :param organization_id: 
    :type organization_id: str

    """
    return web.Response(status=200)


async def get_organization_snmp_0(request: web.Request, organization_id) -> web.Response:
    """Return the SNMP settings for an organization

    Return the SNMP settings for an organization

    :param organization_id: 
    :type organization_id: str

    """
    return web.Response(status=200)


async def get_organization_switch_ports_by_switch_0(request: web.Request, organization_id, per_page=None, starting_after=None, ending_before=None, network_ids=None, port_profile_ids=None, name=None, mac=None, macs=None, serial=None, serials=None, configuration_updated_after=None) -> web.Response:
    """List the switchports in an organization by switch

    List the switchports in an organization by switch

    :param organization_id: 
    :type organization_id: str
    :param per_page: The number of entries per page returned. Acceptable range is 3 - 50. Default is 50.
    :type per_page: int
    :param starting_after: A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
    :type starting_after: str
    :param ending_before: A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
    :type ending_before: str
    :param network_ids: Optional parameter to filter switchports by network.
    :type network_ids: List[str]
    :param port_profile_ids: Optional parameter to filter switchports belonging to the specified switchport profiles.
    :type port_profile_ids: List[str]
    :param name: Optional parameter to filter switchports belonging to switches by name. All returned switches will have a name that contains the search term or is an exact match.
    :type name: str
    :param mac: Optional parameter to filter switchports belonging to switches by MAC address. All returned switches will have a MAC address that contains the search term or is an exact match.
    :type mac: str
    :param macs: Optional parameter to filter switchports by one or more MAC addresses belonging to devices. All switchports returned belong to MAC addresses of switches that are an exact match.
    :type macs: List[str]
    :param serial: Optional parameter to filter switchports belonging to switches by serial number. All returned switches will have a serial number that contains the search term or is an exact match.
    :type serial: str
    :param serials: Optional parameter to filter switchports belonging to switches with one or more serial numbers. All switchports returned belong to serial numbers of switches that are an exact match.
    :type serials: List[str]
    :param configuration_updated_after: Optional parameter to filter results by switches where the configuration has been updated after the given timestamp.
    :type configuration_updated_after: str

    """
    return web.Response(status=200)


async def get_organization_wireless_devices_ethernet_statuses_0(request: web.Request, organization_id, per_page=None, starting_after=None, ending_before=None, network_ids=None) -> web.Response:
    """Endpoint to see power status for wireless devices

    Endpoint to see power status for wireless devices

    :param organization_id: 
    :type organization_id: str
    :param per_page: The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100.
    :type per_page: int
    :param starting_after: A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
    :type starting_after: str
    :param ending_before: A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
    :type ending_before: str
    :param network_ids: A list of Meraki network IDs to filter results to contain only specified networks. E.g.: networkIds[]&#x3D;N_12345678&amp;networkIds[]&#x3D;L_3456
    :type network_ids: List[str]

    """
    return web.Response(status=200)


async def get_organizations_0(request: web.Request, ) -> web.Response:
    """List the organizations that the user has privileges on

    List the organizations that the user has privileges on


    """
    return web.Response(status=200)


async def lock_network_sm_devices_0(request: web.Request, network_id, body=None) -> web.Response:
    """Lock a set of devices

    Lock a set of devices

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = LockNetworkSmDevicesRequest.from_dict(body)
    return web.Response(status=200)


async def modify_network_sm_devices_tags_0(request: web.Request, network_id, body) -> web.Response:
    """Add, delete, or update the tags of a set of devices

    Add, delete, or update the tags of a set of devices

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = ModifyNetworkSmDevicesTagsRequest.from_dict(body)
    return web.Response(status=200)


async def move_network_sm_devices_0(request: web.Request, network_id, body) -> web.Response:
    """Move a set of devices to a new network

    Move a set of devices to a new network

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = MoveNetworkSmDevicesRequest.from_dict(body)
    return web.Response(status=200)


async def move_organization_licenses_0(request: web.Request, organization_id, body) -> web.Response:
    """Move licenses to another organization

    Move licenses to another organization. This will also move any devices that the licenses are assigned to

    :param organization_id: 
    :type organization_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = MoveOrganizationLicensesRequest.from_dict(body)
    return web.Response(status=200)


async def move_organization_licenses_seats_0(request: web.Request, organization_id, body) -> web.Response:
    """Move SM seats to another organization

    Move SM seats to another organization

    :param organization_id: 
    :type organization_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = MoveOrganizationLicensesSeatsRequest.from_dict(body)
    return web.Response(status=200)


async def move_organization_licensing_coterm_licenses_0(request: web.Request, organization_id, body) -> web.Response:
    """Moves a license to a different organization (coterm only)

    Moves a license to a different organization (coterm only)

    :param organization_id: 
    :type organization_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = MoveOrganizationLicensingCotermLicensesRequest.from_dict(body)
    return web.Response(status=200)


async def provision_network_clients_0(request: web.Request, network_id, body) -> web.Response:
    """Provisions a client with a name and policy

    Provisions a client with a name and policy. Clients can be provisioned before they associate to the network.

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = ProvisionNetworkClientsRequest.from_dict(body)
    return web.Response(status=200)


async def refresh_network_sm_device_details_0(request: web.Request, network_id, device_id) -> web.Response:
    """Refresh the details of a device

    Refresh the details of a device

    :param network_id: 
    :type network_id: str
    :param device_id: 
    :type device_id: str

    """
    return web.Response(status=200)


async def release_from_organization_inventory_0(request: web.Request, organization_id, body=None) -> web.Response:
    """Release a list of claimed devices from an organization.

    Release a list of claimed devices from an organization.

    :param organization_id: 
    :type organization_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = ReleaseFromOrganizationInventoryRequest.from_dict(body)
    return web.Response(status=200)


async def remove_network_devices_0(request: web.Request, network_id, body) -> web.Response:
    """Remove a single device

    Remove a single device

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = RemoveNetworkDevicesRequest.from_dict(body)
    return web.Response(status=200)


async def remove_network_switch_stack_0(request: web.Request, network_id, switch_stack_id, body) -> web.Response:
    """Remove a switch from a stack

    Remove a switch from a stack

    :param network_id: 
    :type network_id: str
    :param switch_stack_id: 
    :type switch_stack_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = RemoveNetworkSwitchStackRequest.from_dict(body)
    return web.Response(status=200)


async def renew_organization_licenses_seats_0(request: web.Request, organization_id, body) -> web.Response:
    """Renew SM seats of a license

    Renew SM seats of a license. This will extend the license expiration date of managed SM devices covered by this license

    :param organization_id: 
    :type organization_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = RenewOrganizationLicensesSeatsRequest.from_dict(body)
    return web.Response(status=200)


async def rollbacks_network_firmware_upgrades_staged_events_0(request: web.Request, network_id, body) -> web.Response:
    """Rollback a Staged Upgrade Event for a network

    Rollback a Staged Upgrade Event for a network

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = RollbacksNetworkFirmwareUpgradesStagedEventsRequest.from_dict(body)
    return web.Response(status=200)


async def split_network_0(request: web.Request, network_id) -> web.Response:
    """Split a combined network into individual networks for each type of device

    Split a combined network into individual networks for each type of device

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def swap_network_appliance_warm_spare_0(request: web.Request, network_id) -> web.Response:
    """Swap MX primary and warm spare appliances

    Swap MX primary and warm spare appliances

    :param network_id: 
    :type network_id: str

    """
    return web.Response(status=200)


async def unbind_network_0(request: web.Request, network_id, body=None) -> web.Response:
    """Unbind a network from a template.

    Unbind a network from a template.

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UnbindNetworkRequest.from_dict(body)
    return web.Response(status=200)


async def unenroll_network_sm_device_0(request: web.Request, network_id, device_id) -> web.Response:
    """Unenroll a device

    Unenroll a device

    :param network_id: 
    :type network_id: str
    :param device_id: 
    :type device_id: str

    """
    return web.Response(status=200)


async def update_device_0(request: web.Request, serial, body=None) -> web.Response:
    """Update the attributes of a device

    Update the attributes of a device

    :param serial: 
    :type serial: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateDeviceRequest.from_dict(body)
    return web.Response(status=200)


async def update_device_appliance_uplinks_settings_0(request: web.Request, serial, body) -> web.Response:
    """Update the uplink settings for an MX appliance

    Update the uplink settings for an MX appliance

    :param serial: 
    :type serial: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateDeviceApplianceUplinksSettingsRequest.from_dict(body)
    return web.Response(status=200)


async def update_device_camera_custom_analytics_0(request: web.Request, serial, body=None) -> web.Response:
    """Update custom analytics settings for a camera

    Update custom analytics settings for a camera

    :param serial: 
    :type serial: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateDeviceCameraCustomAnalyticsRequest.from_dict(body)
    return web.Response(status=200)


async def update_device_camera_quality_and_retention_0(request: web.Request, serial, body=None) -> web.Response:
    """Update quality and retention settings for the given camera

    Update quality and retention settings for the given camera

    :param serial: 
    :type serial: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateDeviceCameraQualityAndRetentionRequest.from_dict(body)
    return web.Response(status=200)


async def update_device_camera_sense_0(request: web.Request, serial, body=None) -> web.Response:
    """Update sense settings for the given camera

    Update sense settings for the given camera

    :param serial: 
    :type serial: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateDeviceCameraSenseRequest.from_dict(body)
    return web.Response(status=200)


async def update_device_camera_video_settings_0(request: web.Request, serial, body=None) -> web.Response:
    """Update video settings for the given camera

    Update video settings for the given camera

    :param serial: 
    :type serial: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateDeviceCameraVideoSettingsRequest.from_dict(body)
    return web.Response(status=200)


async def update_device_camera_wireless_profiles_0(request: web.Request, serial, body) -> web.Response:
    """Assign wireless profiles to the given camera

    Assign wireless profiles to the given camera. Incremental updates are not supported, all profile assignment need to be supplied at once.

    :param serial: 
    :type serial: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateDeviceCameraWirelessProfilesRequest.from_dict(body)
    return web.Response(status=200)


async def update_device_cellular_gateway_lan_0(request: web.Request, serial, body=None) -> web.Response:
    """Update the LAN Settings for a single MG.

    Update the LAN Settings for a single MG.

    :param serial: 
    :type serial: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateDeviceCellularGatewayLanRequest.from_dict(body)
    return web.Response(status=200)


async def update_device_cellular_gateway_port_forwarding_rules_0(request: web.Request, serial, body=None) -> web.Response:
    """Updates the port forwarding rules for a single MG.

    Updates the port forwarding rules for a single MG.

    :param serial: 
    :type serial: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateDeviceCellularGatewayPortForwardingRulesRequest.from_dict(body)
    return web.Response(status=200)


async def update_device_cellular_sims_0(request: web.Request, serial, body=None) -> web.Response:
    """Updates the SIM and APN configurations for a cellular device.

    Updates the SIM and APN configurations for a cellular device.

    :param serial: 
    :type serial: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateDeviceCellularSimsRequest.from_dict(body)
    return web.Response(status=200)


async def update_device_management_interface_0(request: web.Request, serial, body=None) -> web.Response:
    """Update the management interface settings for a device

    Update the management interface settings for a device

    :param serial: 
    :type serial: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateDeviceManagementInterfaceRequest.from_dict(body)
    return web.Response(status=200)


async def update_device_sensor_relationships_0(request: web.Request, serial, body=None) -> web.Response:
    """Assign one or more sensor roles to a given sensor or camera device.

    Assign one or more sensor roles to a given sensor or camera device.

    :param serial: 
    :type serial: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateDeviceSensorRelationshipsRequest.from_dict(body)
    return web.Response(status=200)


async def update_device_switch_port_0(request: web.Request, serial, port_id, body=None) -> web.Response:
    """Update a switch port

    Update a switch port

    :param serial: 
    :type serial: str
    :param port_id: 
    :type port_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateDeviceSwitchPortRequest.from_dict(body)
    return web.Response(status=200)


async def update_device_switch_routing_interface_0(request: web.Request, serial, interface_id, body=None) -> web.Response:
    """Update a layer 3 interface for a switch

    Update a layer 3 interface for a switch

    :param serial: 
    :type serial: str
    :param interface_id: 
    :type interface_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = CreateDeviceSwitchRoutingInterfaceRequest.from_dict(body)
    return web.Response(status=200)


async def update_device_switch_routing_interface_dhcp_0(request: web.Request, serial, interface_id, body=None) -> web.Response:
    """Update a layer 3 interface DHCP configuration for a switch

    Update a layer 3 interface DHCP configuration for a switch

    :param serial: 
    :type serial: str
    :param interface_id: 
    :type interface_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateDeviceSwitchRoutingInterfaceDhcpRequest.from_dict(body)
    return web.Response(status=200)


async def update_device_switch_routing_static_route_0(request: web.Request, serial, static_route_id, body=None) -> web.Response:
    """Update a layer 3 static route for a switch

    Update a layer 3 static route for a switch

    :param serial: 
    :type serial: str
    :param static_route_id: 
    :type static_route_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateDeviceSwitchRoutingStaticRouteRequest.from_dict(body)
    return web.Response(status=200)


async def update_device_switch_warm_spare_0(request: web.Request, serial, body) -> web.Response:
    """Update warm spare configuration for a switch

    Update warm spare configuration for a switch. The spare will use the same L3 configuration as the primary. Note that this will irreversibly destroy any existing L3 configuration on the spare.

    :param serial: 
    :type serial: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateDeviceSwitchWarmSpareRequest.from_dict(body)
    return web.Response(status=200)


async def update_device_wireless_bluetooth_settings_0(request: web.Request, serial, body=None) -> web.Response:
    """Update the bluetooth settings for a wireless device

    Update the bluetooth settings for a wireless device

    :param serial: 
    :type serial: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateDeviceWirelessBluetoothSettingsRequest.from_dict(body)
    return web.Response(status=200)


async def update_device_wireless_radio_settings_0(request: web.Request, serial, body=None) -> web.Response:
    """Update the radio settings of a device

    Update the radio settings of a device

    :param serial: 
    :type serial: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateDeviceWirelessRadioSettingsRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_0(request: web.Request, network_id, body=None) -> web.Response:
    """Update a network

    Update a network

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_alerts_settings_0(request: web.Request, network_id, body=None) -> web.Response:
    """Update the alert configuration for this network

    Update the alert configuration for this network

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkAlertsSettingsRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_appliance_connectivity_monitoring_destinations_0(request: web.Request, network_id, body=None) -> web.Response:
    """Update the connectivity testing destinations for an MX network

    Update the connectivity testing destinations for an MX network

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkApplianceConnectivityMonitoringDestinationsRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_appliance_content_filtering_0(request: web.Request, network_id, body=None) -> web.Response:
    """Update the content filtering settings for an MX network

    Update the content filtering settings for an MX network

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkApplianceContentFilteringRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_appliance_firewall_cellular_firewall_rules_0(request: web.Request, network_id, body=None) -> web.Response:
    """Update the cellular firewall rules of an MX network

    Update the cellular firewall rules of an MX network

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkApplianceFirewallCellularFirewallRulesRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_appliance_firewall_firewalled_service_0(request: web.Request, network_id, service, body) -> web.Response:
    """Updates the accessibility settings for the given service (&#39;ICMP&#39;, &#39;web&#39;, or &#39;SNMP&#39;)

    Updates the accessibility settings for the given service (&#39;ICMP&#39;, &#39;web&#39;, or &#39;SNMP&#39;)

    :param network_id: 
    :type network_id: str
    :param service: 
    :type service: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkApplianceFirewallFirewalledServiceRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_appliance_firewall_inbound_cellular_firewall_rules_0(request: web.Request, network_id, body=None) -> web.Response:
    """Update the inbound cellular firewall rules of an MX network

    Update the inbound cellular firewall rules of an MX network

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkApplianceFirewallCellularFirewallRulesRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_appliance_firewall_inbound_firewall_rules_0(request: web.Request, network_id, body=None) -> web.Response:
    """Update the inbound firewall rules of an MX network

    Update the inbound firewall rules of an MX network

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkApplianceFirewallInboundFirewallRulesRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_appliance_firewall_l3_firewall_rules_0(request: web.Request, network_id, body=None) -> web.Response:
    """Update the L3 firewall rules of an MX network

    Update the L3 firewall rules of an MX network

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkApplianceFirewallInboundFirewallRulesRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_appliance_firewall_l7_firewall_rules_0(request: web.Request, network_id, body=None) -> web.Response:
    """Update the MX L7 firewall rules for an MX network

    Update the MX L7 firewall rules for an MX network

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkApplianceFirewallL7FirewallRulesRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_appliance_firewall_one_to_many_nat_rules_0(request: web.Request, network_id, body) -> web.Response:
    """Set the 1:Many NAT mapping rules for an MX network

    Set the 1:Many NAT mapping rules for an MX network

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkApplianceFirewallOneToManyNatRulesRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_appliance_firewall_one_to_one_nat_rules_0(request: web.Request, network_id, body) -> web.Response:
    """Set the 1:1 NAT mapping rules for an MX network

    Set the 1:1 NAT mapping rules for an MX network

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkApplianceFirewallOneToOneNatRulesRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_appliance_firewall_port_forwarding_rules_0(request: web.Request, network_id, body) -> web.Response:
    """Update the port forwarding rules for an MX network

    Update the port forwarding rules for an MX network

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkApplianceFirewallPortForwardingRulesRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_appliance_firewall_settings_0(request: web.Request, network_id, body=None) -> web.Response:
    """Update the firewall settings for this network

    Update the firewall settings for this network

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkApplianceFirewallSettingsRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_appliance_port_0(request: web.Request, network_id, port_id, body=None) -> web.Response:
    """Update the per-port VLAN settings for a single MX port.

    Update the per-port VLAN settings for a single MX port.

    :param network_id: 
    :type network_id: str
    :param port_id: 
    :type port_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkAppliancePortRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_appliance_prefixes_delegated_static_0(request: web.Request, network_id, static_delegated_prefix_id, body=None) -> web.Response:
    """Update a static delegated prefix from a network

    Update a static delegated prefix from a network

    :param network_id: 
    :type network_id: str
    :param static_delegated_prefix_id: 
    :type static_delegated_prefix_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkAppliancePrefixesDelegatedStaticRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_appliance_security_intrusion_0(request: web.Request, network_id, body=None) -> web.Response:
    """Set the supported intrusion settings for an MX network

    Set the supported intrusion settings for an MX network

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkApplianceSecurityIntrusionRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_appliance_security_malware_0(request: web.Request, network_id, body) -> web.Response:
    """Set the supported malware settings for an MX network

    Set the supported malware settings for an MX network

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkApplianceSecurityMalwareRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_appliance_settings_0(request: web.Request, network_id, body=None) -> web.Response:
    """Update the appliance settings for a network

    Update the appliance settings for a network

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkApplianceSettingsRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_appliance_single_lan_0(request: web.Request, network_id, body=None) -> web.Response:
    """Update single LAN configuration

    Update single LAN configuration

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkApplianceSingleLanRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_appliance_ssid_0(request: web.Request, network_id, number, body=None) -> web.Response:
    """Update the attributes of an MX SSID

    Update the attributes of an MX SSID

    :param network_id: 
    :type network_id: str
    :param number: 
    :type number: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkApplianceSsidRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_appliance_static_route_0(request: web.Request, network_id, static_route_id, body=None) -> web.Response:
    """Update a static route for an MX or teleworker network

    Update a static route for an MX or teleworker network

    :param network_id: 
    :type network_id: str
    :param static_route_id: 
    :type static_route_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkApplianceStaticRouteRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_appliance_traffic_shaping_0(request: web.Request, network_id, body=None) -> web.Response:
    """Update the traffic shaping settings for an MX network

    Update the traffic shaping settings for an MX network

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkApplianceTrafficShapingRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_appliance_traffic_shaping_custom_performance_class_0(request: web.Request, network_id, custom_performance_class_id, body=None) -> web.Response:
    """Update a custom performance class for an MX network

    Update a custom performance class for an MX network

    :param network_id: 
    :type network_id: str
    :param custom_performance_class_id: 
    :type custom_performance_class_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkApplianceTrafficShapingCustomPerformanceClassRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_appliance_traffic_shaping_rules_0(request: web.Request, network_id, body=None) -> web.Response:
    """Update the traffic shaping settings rules for an MX network

    Update the traffic shaping settings rules for an MX network

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkApplianceTrafficShapingRulesRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_appliance_traffic_shaping_uplink_bandwidth_0(request: web.Request, network_id, body=None) -> web.Response:
    """Updates the uplink bandwidth settings for your MX network.

    Updates the uplink bandwidth settings for your MX network.

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkApplianceTrafficShapingUplinkBandwidthRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_appliance_traffic_shaping_uplink_selection_0(request: web.Request, network_id, body=None) -> web.Response:
    """Update uplink selection settings for an MX network

    Update uplink selection settings for an MX network

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_appliance_vlan_0(request: web.Request, network_id, vlan_id, body=None) -> web.Response:
    """Update a VLAN

    Update a VLAN

    :param network_id: 
    :type network_id: str
    :param vlan_id: 
    :type vlan_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkApplianceVlanRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_appliance_vlans_settings_0(request: web.Request, network_id, body=None) -> web.Response:
    """Enable/Disable VLANs for the given network

    Enable/Disable VLANs for the given network

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkApplianceVlansSettingsRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_appliance_vpn_bgp_0(request: web.Request, network_id, body) -> web.Response:
    """Update a Hub BGP Configuration

    Update a Hub BGP Configuration

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkApplianceVpnBgpRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_appliance_vpn_site_to_site_vpn_0(request: web.Request, network_id, body) -> web.Response:
    """Update the site-to-site VPN settings of a network

    Update the site-to-site VPN settings of a network. Only valid for MX networks in NAT mode.

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkApplianceVpnSiteToSiteVpnRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_appliance_warm_spare_0(request: web.Request, network_id, body) -> web.Response:
    """Update MX warm spare settings

    Update MX warm spare settings

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkApplianceWarmSpareRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_camera_quality_retention_profile_0(request: web.Request, network_id, quality_retention_profile_id, body=None) -> web.Response:
    """Update an existing quality retention profile for this network.

    Update an existing quality retention profile for this network.

    :param network_id: 
    :type network_id: str
    :param quality_retention_profile_id: 
    :type quality_retention_profile_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkCameraQualityRetentionProfileRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_camera_wireless_profile_0(request: web.Request, network_id, wireless_profile_id, body=None) -> web.Response:
    """Update an existing camera wireless profile in this network.

    Update an existing camera wireless profile in this network.

    :param network_id: 
    :type network_id: str
    :param wireless_profile_id: 
    :type wireless_profile_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkCameraWirelessProfileRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_cellular_gateway_connectivity_monitoring_destinations_0(request: web.Request, network_id, body=None) -> web.Response:
    """Update the connectivity testing destinations for an MG network

    Update the connectivity testing destinations for an MG network

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkCellularGatewayConnectivityMonitoringDestinationsRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_cellular_gateway_dhcp_0(request: web.Request, network_id, body=None) -> web.Response:
    """Update common DHCP settings of MGs

    Update common DHCP settings of MGs

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkCellularGatewayDhcpRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_cellular_gateway_subnet_pool_0(request: web.Request, network_id, body=None) -> web.Response:
    """Update the subnet pool and mask configuration for MGs in the network.

    Update the subnet pool and mask configuration for MGs in the network.

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkCellularGatewaySubnetPoolRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_cellular_gateway_uplink_0(request: web.Request, network_id, body=None) -> web.Response:
    """Updates the uplink settings for your MG network.

    Updates the uplink settings for your MG network.

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkCellularGatewayUplinkRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_client_policy_0(request: web.Request, network_id, client_id, body) -> web.Response:
    """Update the policy assigned to a client on the network

    Update the policy assigned to a client on the network. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.

    :param network_id: 
    :type network_id: str
    :param client_id: 
    :type client_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkClientPolicyRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_client_splash_authorization_status_0(request: web.Request, network_id, client_id, body) -> web.Response:
    """Update a client&#39;s splash authorization

    Update a client&#39;s splash authorization. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.

    :param network_id: 
    :type network_id: str
    :param client_id: 
    :type client_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkClientSplashAuthorizationStatusRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_firmware_upgrades_0(request: web.Request, network_id, body=None) -> web.Response:
    """Update firmware upgrade information for a network

    Update firmware upgrade information for a network

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkFirmwareUpgradesRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_firmware_upgrades_staged_events_0(request: web.Request, network_id, body) -> web.Response:
    """Update the Staged Upgrade Event for a network

    Update the Staged Upgrade Event for a network

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkFirmwareUpgradesStagedEventsRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_firmware_upgrades_staged_group_0(request: web.Request, network_id, group_id, body) -> web.Response:
    """Update a Staged Upgrade Group for a network

    Update a Staged Upgrade Group for a network

    :param network_id: 
    :type network_id: str
    :param group_id: 
    :type group_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = CreateNetworkFirmwareUpgradesStagedGroupRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_firmware_upgrades_staged_stages_0(request: web.Request, network_id, body=None) -> web.Response:
    """Assign Staged Upgrade Group order in the sequence.

    Assign Staged Upgrade Group order in the sequence.

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkFirmwareUpgradesStagedStagesRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_floor_plan_0(request: web.Request, network_id, floor_plan_id, body=None) -> web.Response:
    """Update a floor plan&#39;s geolocation and other meta data

    Update a floor plan&#39;s geolocation and other meta data

    :param network_id: 
    :type network_id: str
    :param floor_plan_id: 
    :type floor_plan_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkFloorPlanRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_group_policy_0(request: web.Request, network_id, group_policy_id, body=None) -> web.Response:
    """Update a group policy

    Update a group policy

    :param network_id: 
    :type network_id: str
    :param group_policy_id: 
    :type group_policy_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkGroupPolicyRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_meraki_auth_user_0(request: web.Request, network_id, meraki_auth_user_id, body=None) -> web.Response:
    """Update a user configured with Meraki Authentication (currently, 802.1X RADIUS, splash guest, and client VPN users can be updated)

    Update a user configured with Meraki Authentication (currently, 802.1X RADIUS, splash guest, and client VPN users can be updated)

    :param network_id: 
    :type network_id: str
    :param meraki_auth_user_id: 
    :type meraki_auth_user_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkMerakiAuthUserRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_mqtt_broker_0(request: web.Request, network_id, mqtt_broker_id, body=None) -> web.Response:
    """Update an MQTT broker

    Update an MQTT broker

    :param network_id: 
    :type network_id: str
    :param mqtt_broker_id: 
    :type mqtt_broker_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkMqttBrokerRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_netflow_0(request: web.Request, network_id, body=None) -> web.Response:
    """Update the NetFlow traffic reporting settings for a network

    Update the NetFlow traffic reporting settings for a network

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkNetflowRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_sensor_alerts_profile_0(request: web.Request, network_id, id, body=None) -> web.Response:
    """Updates a sensor alert profile for a network.

    Updates a sensor alert profile for a network.

    :param network_id: 
    :type network_id: str
    :param id: 
    :type id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkSensorAlertsProfileRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_settings_0(request: web.Request, network_id, body=None) -> web.Response:
    """Update the settings for a network

    Update the settings for a network

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkSettingsRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_sm_devices_fields_0(request: web.Request, network_id, body) -> web.Response:
    """Modify the fields of a device

    Modify the fields of a device

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkSmDevicesFieldsRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_sm_target_group_0(request: web.Request, network_id, target_group_id, body=None) -> web.Response:
    """Update a target group

    Update a target group

    :param network_id: 
    :type network_id: str
    :param target_group_id: 
    :type target_group_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = CreateNetworkSmTargetGroupRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_snmp_0(request: web.Request, network_id, body=None) -> web.Response:
    """Update the SNMP settings for a network

    Update the SNMP settings for a network

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkSnmpRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_switch_access_control_lists_0(request: web.Request, network_id, body) -> web.Response:
    """Update the access control lists for a MS network

    Update the access control lists for a MS network

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkSwitchAccessControlListsRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_switch_access_policy_0(request: web.Request, network_id, access_policy_number, body=None) -> web.Response:
    """Update an access policy for a switch network

    Update an access policy for a switch network. If you would like to enable Meraki Authentication, set radiusServers to empty array.

    :param network_id: 
    :type network_id: str
    :param access_policy_number: 
    :type access_policy_number: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkSwitchAccessPolicyRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_switch_alternate_management_interface_0(request: web.Request, network_id, body=None) -> web.Response:
    """Update the switch alternate management interface for the network

    Update the switch alternate management interface for the network

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkSwitchAlternateManagementInterfaceRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_switch_dhcp_server_policy_0(request: web.Request, network_id, body=None) -> web.Response:
    """Update the DHCP server settings

    Update the DHCP server settings. Blocked/allowed servers are only applied when default policy is allow/block, respectively

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkSwitchDhcpServerPolicyRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_switch_dhcp_server_policy_arp_inspection_trusted_server_0(request: web.Request, network_id, trusted_server_id, body=None) -> web.Response:
    """Update a server that is trusted by Dynamic ARP Inspection on this network

    Update a server that is trusted by Dynamic ARP Inspection on this network

    :param network_id: 
    :type network_id: str
    :param trusted_server_id: 
    :type trusted_server_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_switch_dscp_to_cos_mappings_0(request: web.Request, network_id, body) -> web.Response:
    """Update the DSCP to CoS mappings

    Update the DSCP to CoS mappings

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkSwitchDscpToCosMappingsRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_switch_link_aggregation_0(request: web.Request, network_id, link_aggregation_id, body=None) -> web.Response:
    """Update a link aggregation group

    Update a link aggregation group

    :param network_id: 
    :type network_id: str
    :param link_aggregation_id: 
    :type link_aggregation_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkSwitchLinkAggregationRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_switch_mtu_0(request: web.Request, network_id, body=None) -> web.Response:
    """Update the MTU configuration

    Update the MTU configuration

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkSwitchMtuRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_switch_port_schedule_0(request: web.Request, network_id, port_schedule_id, body=None) -> web.Response:
    """Update a switch port schedule

    Update a switch port schedule

    :param network_id: 
    :type network_id: str
    :param port_schedule_id: 
    :type port_schedule_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkSwitchPortScheduleRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_switch_qos_rule_0(request: web.Request, network_id, qos_rule_id, body=None) -> web.Response:
    """Update a quality of service rule

    Update a quality of service rule

    :param network_id: 
    :type network_id: str
    :param qos_rule_id: 
    :type qos_rule_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkSwitchQosRuleRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_switch_qos_rules_order_0(request: web.Request, network_id, body) -> web.Response:
    """Update the order in which the rules should be processed by the switch

    Update the order in which the rules should be processed by the switch

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkSwitchQosRulesOrderRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_switch_routing_multicast_0(request: web.Request, network_id, body=None) -> web.Response:
    """Update multicast settings for a network

    Update multicast settings for a network

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkSwitchRoutingMulticastRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_switch_routing_multicast_rendezvous_point_0(request: web.Request, network_id, rendezvous_point_id, body) -> web.Response:
    """Update a multicast rendezvous point

    Update a multicast rendezvous point

    :param network_id: 
    :type network_id: str
    :param rendezvous_point_id: 
    :type rendezvous_point_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkSwitchRoutingMulticastRendezvousPointRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_switch_routing_ospf_0(request: web.Request, network_id, body=None) -> web.Response:
    """Update layer 3 OSPF routing configuration

    Update layer 3 OSPF routing configuration

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkSwitchRoutingOspfRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_switch_settings_0(request: web.Request, network_id, body=None) -> web.Response:
    """Update switch network settings

    Update switch network settings

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkSwitchSettingsRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_switch_stack_routing_interface_0(request: web.Request, network_id, switch_stack_id, interface_id, body=None) -> web.Response:
    """Update a layer 3 interface for a switch stack

    Update a layer 3 interface for a switch stack

    :param network_id: 
    :type network_id: str
    :param switch_stack_id: 
    :type switch_stack_id: str
    :param interface_id: 
    :type interface_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkSwitchStackRoutingInterfaceRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_switch_stack_routing_interface_dhcp_0(request: web.Request, network_id, switch_stack_id, interface_id, body=None) -> web.Response:
    """Update a layer 3 interface DHCP configuration for a switch stack

    Update a layer 3 interface DHCP configuration for a switch stack

    :param network_id: 
    :type network_id: str
    :param switch_stack_id: 
    :type switch_stack_id: str
    :param interface_id: 
    :type interface_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_switch_stack_routing_static_route_0(request: web.Request, network_id, switch_stack_id, static_route_id, body=None) -> web.Response:
    """Update a layer 3 static route for a switch stack

    Update a layer 3 static route for a switch stack

    :param network_id: 
    :type network_id: str
    :param switch_stack_id: 
    :type switch_stack_id: str
    :param static_route_id: 
    :type static_route_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateDeviceSwitchRoutingStaticRouteRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_switch_storm_control_0(request: web.Request, network_id, body=None) -> web.Response:
    """Update the storm control configuration for a switch network

    Update the storm control configuration for a switch network

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkSwitchStormControlRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_switch_stp_0(request: web.Request, network_id, body=None) -> web.Response:
    """Updates STP settings

    Updates STP settings

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkSwitchStpRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_syslog_servers_0(request: web.Request, network_id, body) -> web.Response:
    """Update the syslog servers for a network

    Update the syslog servers for a network

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkSyslogServersRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_traffic_analysis_0(request: web.Request, network_id, body=None) -> web.Response:
    """Update the traffic analysis settings for a network

    Update the traffic analysis settings for a network

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkTrafficAnalysisRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_webhooks_http_server_0(request: web.Request, network_id, http_server_id, body=None) -> web.Response:
    """Update an HTTP server

    Update an HTTP server. To change a URL, create a new HTTP server.

    :param network_id: 
    :type network_id: str
    :param http_server_id: 
    :type http_server_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkWebhooksHttpServerRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_webhooks_payload_template_0(request: web.Request, network_id, payload_template_id, body=None) -> web.Response:
    """Update a webhook payload template for a network

    Update a webhook payload template for a network

    :param network_id: 
    :type network_id: str
    :param payload_template_id: 
    :type payload_template_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkWebhooksPayloadTemplateRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_wireless_alternate_management_interface_0(request: web.Request, network_id, body=None) -> web.Response:
    """Update alternate management interface and device static IP

    Update alternate management interface and device static IP

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkWirelessAlternateManagementInterfaceRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_wireless_billing_0(request: web.Request, network_id, body=None) -> web.Response:
    """Update the billing settings

    Update the billing settings

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkWirelessBillingRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_wireless_bluetooth_settings_0(request: web.Request, network_id, body=None) -> web.Response:
    """Update the Bluetooth settings for a network

    Update the Bluetooth settings for a network. See the docs page for &lt;a href&#x3D;\&quot;https://documentation.meraki.com/MR/Bluetooth/Bluetooth_Low_Energy_(BLE)\&quot;&gt;Bluetooth settings&lt;/a&gt;.

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkWirelessBluetoothSettingsRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_wireless_rf_profile_0(request: web.Request, network_id, rf_profile_id, body=None) -> web.Response:
    """Updates specified RF profile for this network

    Updates specified RF profile for this network

    :param network_id: 
    :type network_id: str
    :param rf_profile_id: 
    :type rf_profile_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkWirelessRfProfileRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_wireless_settings_0(request: web.Request, network_id, body=None) -> web.Response:
    """Update the wireless settings for a network

    Update the wireless settings for a network

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkWirelessSettingsRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_wireless_ssid_0(request: web.Request, network_id, number, body=None) -> web.Response:
    """Update the attributes of an MR SSID

    Update the attributes of an MR SSID

    :param network_id: 
    :type network_id: str
    :param number: 
    :type number: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkWirelessSsidRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_wireless_ssid_bonjour_forwarding_0(request: web.Request, network_id, number, body=None) -> web.Response:
    """Update the bonjour forwarding setting and rules for the SSID

    Update the bonjour forwarding setting and rules for the SSID

    :param network_id: 
    :type network_id: str
    :param number: 
    :type number: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkWirelessSsidBonjourForwardingRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_wireless_ssid_device_type_group_policies_0(request: web.Request, network_id, number, body=None) -> web.Response:
    """Update the device type group policies for the SSID

    Update the device type group policies for the SSID

    :param network_id: 
    :type network_id: str
    :param number: 
    :type number: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_wireless_ssid_eap_override_0(request: web.Request, network_id, number, body=None) -> web.Response:
    """Update the EAP overridden parameters for an SSID.

    Update the EAP overridden parameters for an SSID.

    :param network_id: 
    :type network_id: str
    :param number: 
    :type number: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkWirelessSsidEapOverrideRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_wireless_ssid_firewall_l3_firewall_rules_0(request: web.Request, network_id, number, body=None) -> web.Response:
    """Update the L3 firewall rules of an SSID on an MR network

    Update the L3 firewall rules of an SSID on an MR network

    :param network_id: 
    :type network_id: str
    :param number: 
    :type number: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_wireless_ssid_firewall_l7_firewall_rules_0(request: web.Request, network_id, number, body=None) -> web.Response:
    """Update the L7 firewall rules of an SSID on an MR network

    Update the L7 firewall rules of an SSID on an MR network

    :param network_id: 
    :type network_id: str
    :param number: 
    :type number: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkWirelessSsidFirewallL7FirewallRulesRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_wireless_ssid_hotspot20_0(request: web.Request, network_id, number, body=None) -> web.Response:
    """Update the Hotspot 2.0 settings of an SSID

    Update the Hotspot 2.0 settings of an SSID

    :param network_id: 
    :type network_id: str
    :param number: 
    :type number: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkWirelessSsidHotspot20Request.from_dict(body)
    return web.Response(status=200)


async def update_network_wireless_ssid_identity_psk_0(request: web.Request, network_id, number, identity_psk_id, body=None) -> web.Response:
    """Update an Identity PSK

    Update an Identity PSK

    :param network_id: 
    :type network_id: str
    :param number: 
    :type number: str
    :param identity_psk_id: 
    :type identity_psk_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkWirelessSsidIdentityPskRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_wireless_ssid_schedules_0(request: web.Request, network_id, number, body=None) -> web.Response:
    """Update the outage schedule for the SSID

    Update the outage schedule for the SSID

    :param network_id: 
    :type network_id: str
    :param number: 
    :type number: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkWirelessSsidSchedulesRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_wireless_ssid_splash_settings_0(request: web.Request, network_id, number, body=None) -> web.Response:
    """Modify the splash page settings for the given SSID

    Modify the splash page settings for the given SSID

    :param network_id: 
    :type network_id: str
    :param number: 
    :type number: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkWirelessSsidSplashSettingsRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_wireless_ssid_traffic_shaping_rules_0(request: web.Request, network_id, number, body=None) -> web.Response:
    """Update the traffic shaping settings for an SSID on an MR network

    Update the traffic shaping settings for an SSID on an MR network

    :param network_id: 
    :type network_id: str
    :param number: 
    :type number: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkWirelessSsidTrafficShapingRulesRequest.from_dict(body)
    return web.Response(status=200)


async def update_network_wireless_ssid_vpn_0(request: web.Request, network_id, number, body=None) -> web.Response:
    """Update the VPN settings for the SSID

    Update the VPN settings for the SSID

    :param network_id: 
    :type network_id: str
    :param number: 
    :type number: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateNetworkWirelessSsidVpnRequest.from_dict(body)
    return web.Response(status=200)


async def update_organization_0(request: web.Request, organization_id, body=None) -> web.Response:
    """Update an organization

    Update an organization

    :param organization_id: 
    :type organization_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateOrganizationRequest.from_dict(body)
    return web.Response(status=200)


async def update_organization_action_batch_0(request: web.Request, organization_id, action_batch_id, body=None) -> web.Response:
    """Update an action batch

    Update an action batch

    :param organization_id: 
    :type organization_id: str
    :param action_batch_id: 
    :type action_batch_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateOrganizationActionBatchRequest.from_dict(body)
    return web.Response(status=200)


async def update_organization_adaptive_policy_acl_0(request: web.Request, organization_id, acl_id, body=None) -> web.Response:
    """Updates an adaptive policy ACL

    Updates an adaptive policy ACL

    :param organization_id: 
    :type organization_id: str
    :param acl_id: 
    :type acl_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateOrganizationAdaptivePolicyAclRequest.from_dict(body)
    return web.Response(status=200)


async def update_organization_adaptive_policy_group_0(request: web.Request, organization_id, id, body=None) -> web.Response:
    """Updates an adaptive policy group

    Updates an adaptive policy group. If updating \&quot;Infrastructure\&quot;, only the SGT is allowed. Cannot update \&quot;Unknown\&quot;.

    :param organization_id: 
    :type organization_id: str
    :param id: 
    :type id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateOrganizationAdaptivePolicyGroupRequest.from_dict(body)
    return web.Response(status=200)


async def update_organization_adaptive_policy_policy_0(request: web.Request, organization_id, id, body=None) -> web.Response:
    """Update an Adaptive Policy

    Update an Adaptive Policy

    :param organization_id: 
    :type organization_id: str
    :param id: 
    :type id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateOrganizationAdaptivePolicyPolicyRequest.from_dict(body)
    return web.Response(status=200)


async def update_organization_adaptive_policy_settings_0(request: web.Request, organization_id, body=None) -> web.Response:
    """Update global adaptive policy settings

    Update global adaptive policy settings

    :param organization_id: 
    :type organization_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateOrganizationAdaptivePolicySettingsRequest.from_dict(body)
    return web.Response(status=200)


async def update_organization_admin_0(request: web.Request, organization_id, admin_id, body=None) -> web.Response:
    """Update an administrator

    Update an administrator

    :param organization_id: 
    :type organization_id: str
    :param admin_id: 
    :type admin_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateOrganizationAdminRequest.from_dict(body)
    return web.Response(status=200)


async def update_organization_alerts_profile_0(request: web.Request, organization_id, alert_config_id, body=None) -> web.Response:
    """Update an organization-wide alert config

    Update an organization-wide alert config

    :param organization_id: 
    :type organization_id: str
    :param alert_config_id: 
    :type alert_config_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateOrganizationAlertsProfileRequest.from_dict(body)
    return web.Response(status=200)


async def update_organization_appliance_security_intrusion_0(request: web.Request, organization_id, body) -> web.Response:
    """Sets supported intrusion settings for an organization

    Sets supported intrusion settings for an organization

    :param organization_id: 
    :type organization_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateOrganizationApplianceSecurityIntrusionRequest.from_dict(body)
    return web.Response(status=200)


async def update_organization_appliance_vpn_third_party_vpn_peers_0(request: web.Request, organization_id, body) -> web.Response:
    """Update the third party VPN peers for an organization

    Update the third party VPN peers for an organization

    :param organization_id: 
    :type organization_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequest.from_dict(body)
    return web.Response(status=200)


async def update_organization_appliance_vpn_vpn_firewall_rules_0(request: web.Request, organization_id, body=None) -> web.Response:
    """Update the firewall rules of an organization&#39;s site-to-site VPN

    Update the firewall rules of an organization&#39;s site-to-site VPN

    :param organization_id: 
    :type organization_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateOrganizationApplianceVpnVpnFirewallRulesRequest.from_dict(body)
    return web.Response(status=200)


async def update_organization_branding_policies_priorities_0(request: web.Request, organization_id, body=None) -> web.Response:
    """Update the priority ordering of an organization&#39;s branding policies.

    Update the priority ordering of an organization&#39;s branding policies.

    :param organization_id: 
    :type organization_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateOrganizationBrandingPoliciesPrioritiesRequest.from_dict(body)
    return web.Response(status=200)


async def update_organization_branding_policy_0(request: web.Request, organization_id, branding_policy_id, body=None) -> web.Response:
    """Update a branding policy

    Update a branding policy

    :param organization_id: 
    :type organization_id: str
    :param branding_policy_id: 
    :type branding_policy_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateOrganizationBrandingPolicyRequest.from_dict(body)
    return web.Response(status=200)


async def update_organization_camera_onboarding_statuses_0(request: web.Request, organization_id, body=None) -> web.Response:
    """Notify that credential handoff to camera has completed

    Notify that credential handoff to camera has completed

    :param organization_id: 
    :type organization_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateOrganizationCameraOnboardingStatusesRequest.from_dict(body)
    return web.Response(status=200)


async def update_organization_config_template_0(request: web.Request, organization_id, config_template_id, body=None) -> web.Response:
    """Update a configuration template

    Update a configuration template

    :param organization_id: 
    :type organization_id: str
    :param config_template_id: 
    :type config_template_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateOrganizationConfigTemplateRequest.from_dict(body)
    return web.Response(status=200)


async def update_organization_config_template_switch_profile_port_0(request: web.Request, organization_id, config_template_id, profile_id, port_id, body=None) -> web.Response:
    """Update a switch profile port

    Update a switch profile port

    :param organization_id: 
    :type organization_id: str
    :param config_template_id: 
    :type config_template_id: str
    :param profile_id: 
    :type profile_id: str
    :param port_id: 
    :type port_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateOrganizationConfigTemplateSwitchProfilePortRequest.from_dict(body)
    return web.Response(status=200)


async def update_organization_early_access_features_opt_in_0(request: web.Request, organization_id, opt_in_id, body=None) -> web.Response:
    """Update an early access feature opt-in for an organization

    Update an early access feature opt-in for an organization

    :param organization_id: 
    :type organization_id: str
    :param opt_in_id: 
    :type opt_in_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateOrganizationEarlyAccessFeaturesOptInRequest.from_dict(body)
    return web.Response(status=200)


async def update_organization_insight_monitored_media_server_0(request: web.Request, organization_id, monitored_media_server_id, body=None) -> web.Response:
    """Update a monitored media server for this organization

    Update a monitored media server for this organization. Only valid for organizations with Meraki Insight.

    :param organization_id: 
    :type organization_id: str
    :param monitored_media_server_id: 
    :type monitored_media_server_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateOrganizationInsightMonitoredMediaServerRequest.from_dict(body)
    return web.Response(status=200)


async def update_organization_license_0(request: web.Request, organization_id, license_id, body=None) -> web.Response:
    """Update a license

    Update a license

    :param organization_id: 
    :type organization_id: str
    :param license_id: 
    :type license_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateOrganizationLicenseRequest.from_dict(body)
    return web.Response(status=200)


async def update_organization_login_security_0(request: web.Request, organization_id, body=None) -> web.Response:
    """Update the login security settings for an organization

    Update the login security settings for an organization

    :param organization_id: 
    :type organization_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateOrganizationLoginSecurityRequest.from_dict(body)
    return web.Response(status=200)


async def update_organization_policy_object_0(request: web.Request, organization_id, policy_object_id, body=None) -> web.Response:
    """Updates a Policy Object.

    Updates a Policy Object.

    :param organization_id: 
    :type organization_id: str
    :param policy_object_id: 
    :type policy_object_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateOrganizationPolicyObjectRequest.from_dict(body)
    return web.Response(status=200)


async def update_organization_policy_objects_group_0(request: web.Request, organization_id, policy_object_group_id, body=None) -> web.Response:
    """Updates a Policy Object Group.

    Updates a Policy Object Group.

    :param organization_id: 
    :type organization_id: str
    :param policy_object_group_id: 
    :type policy_object_group_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateOrganizationPolicyObjectsGroupRequest.from_dict(body)
    return web.Response(status=200)


async def update_organization_saml_0(request: web.Request, organization_id, body=None) -> web.Response:
    """Updates the SAML SSO enabled settings for an organization.

    Updates the SAML SSO enabled settings for an organization.

    :param organization_id: 
    :type organization_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateOrganizationSamlRequest.from_dict(body)
    return web.Response(status=200)


async def update_organization_saml_idp_0(request: web.Request, organization_id, idp_id, body=None) -> web.Response:
    """Update a SAML IdP in your organization

    Update a SAML IdP in your organization

    :param organization_id: 
    :type organization_id: str
    :param idp_id: 
    :type idp_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateOrganizationSamlIdpRequest.from_dict(body)
    return web.Response(status=200)


async def update_organization_saml_role_0(request: web.Request, organization_id, saml_role_id, body=None) -> web.Response:
    """Update a SAML role

    Update a SAML role

    :param organization_id: 
    :type organization_id: str
    :param saml_role_id: 
    :type saml_role_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateOrganizationSamlRoleRequest.from_dict(body)
    return web.Response(status=200)


async def update_organization_snmp_0(request: web.Request, organization_id, body=None) -> web.Response:
    """Update the SNMP settings for an organization

    Update the SNMP settings for an organization

    :param organization_id: 
    :type organization_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = UpdateOrganizationSnmpRequest.from_dict(body)
    return web.Response(status=200)


async def vmx_network_devices_claim_0(request: web.Request, network_id, body) -> web.Response:
    """Claim a vMX into a network

    Claim a vMX into a network

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = VmxNetworkDevicesClaimRequest.from_dict(body)
    return web.Response(status=200)


async def wipe_network_sm_devices_0(request: web.Request, network_id, body=None) -> web.Response:
    """Wipe a device

    Wipe a device

    :param network_id: 
    :type network_id: str
    :param body: 
    :type body: dict | bytes

    """
    body = WipeNetworkSmDevicesRequest.from_dict(body)
    return web.Response(status=200)
