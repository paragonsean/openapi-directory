# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_network_wireless_ssid_splash_settings_request_sentry_enrollment_systems_manager_network import UpdateNetworkWirelessSsidSplashSettingsRequestSentryEnrollmentSystemsManagerNetwork
from openapi_server import util


class UpdateNetworkWirelessSsidSplashSettingsRequestSentryEnrollment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enforced_systems: List[str]=None, strength: str=None, systems_manager_network: UpdateNetworkWirelessSsidSplashSettingsRequestSentryEnrollmentSystemsManagerNetwork=None):
        """UpdateNetworkWirelessSsidSplashSettingsRequestSentryEnrollment - a model defined in OpenAPI

        :param enforced_systems: The enforced_systems of this UpdateNetworkWirelessSsidSplashSettingsRequestSentryEnrollment.
        :param strength: The strength of this UpdateNetworkWirelessSsidSplashSettingsRequestSentryEnrollment.
        :param systems_manager_network: The systems_manager_network of this UpdateNetworkWirelessSsidSplashSettingsRequestSentryEnrollment.
        """
        self.openapi_types = {
            'enforced_systems': List[str],
            'strength': str,
            'systems_manager_network': UpdateNetworkWirelessSsidSplashSettingsRequestSentryEnrollmentSystemsManagerNetwork
        }

        self.attribute_map = {
            'enforced_systems': 'enforcedSystems',
            'strength': 'strength',
            'systems_manager_network': 'systemsManagerNetwork'
        }

        self._enforced_systems = enforced_systems
        self._strength = strength
        self._systems_manager_network = systems_manager_network

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateNetworkWirelessSsidSplashSettingsRequestSentryEnrollment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateNetworkWirelessSsidSplashSettings_request_sentryEnrollment of this UpdateNetworkWirelessSsidSplashSettingsRequestSentryEnrollment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enforced_systems(self):
        """Gets the enforced_systems of this UpdateNetworkWirelessSsidSplashSettingsRequestSentryEnrollment.

        The system types that the Sentry enforces. Must be included in: 'iOS, 'Android', 'macOS', and 'Windows'.

        :return: The enforced_systems of this UpdateNetworkWirelessSsidSplashSettingsRequestSentryEnrollment.
        :rtype: List[str]
        """
        return self._enforced_systems

    @enforced_systems.setter
    def enforced_systems(self, enforced_systems):
        """Sets the enforced_systems of this UpdateNetworkWirelessSsidSplashSettingsRequestSentryEnrollment.

        The system types that the Sentry enforces. Must be included in: 'iOS, 'Android', 'macOS', and 'Windows'.

        :param enforced_systems: The enforced_systems of this UpdateNetworkWirelessSsidSplashSettingsRequestSentryEnrollment.
        :type enforced_systems: List[str]
        """

        self._enforced_systems = enforced_systems

    @property
    def strength(self):
        """Gets the strength of this UpdateNetworkWirelessSsidSplashSettingsRequestSentryEnrollment.

        The strength of the enforcement of selected system types. Must be one of: 'focused', 'click-through', and 'strict'.

        :return: The strength of this UpdateNetworkWirelessSsidSplashSettingsRequestSentryEnrollment.
        :rtype: str
        """
        return self._strength

    @strength.setter
    def strength(self, strength):
        """Sets the strength of this UpdateNetworkWirelessSsidSplashSettingsRequestSentryEnrollment.

        The strength of the enforcement of selected system types. Must be one of: 'focused', 'click-through', and 'strict'.

        :param strength: The strength of this UpdateNetworkWirelessSsidSplashSettingsRequestSentryEnrollment.
        :type strength: str
        """
        allowed_values = ["click-through", "focused", "strict"]  # noqa: E501
        if strength not in allowed_values:
            raise ValueError(
                "Invalid value for `strength` ({0}), must be one of {1}"
                .format(strength, allowed_values)
            )

        self._strength = strength

    @property
    def systems_manager_network(self):
        """Gets the systems_manager_network of this UpdateNetworkWirelessSsidSplashSettingsRequestSentryEnrollment.


        :return: The systems_manager_network of this UpdateNetworkWirelessSsidSplashSettingsRequestSentryEnrollment.
        :rtype: UpdateNetworkWirelessSsidSplashSettingsRequestSentryEnrollmentSystemsManagerNetwork
        """
        return self._systems_manager_network

    @systems_manager_network.setter
    def systems_manager_network(self, systems_manager_network):
        """Sets the systems_manager_network of this UpdateNetworkWirelessSsidSplashSettingsRequestSentryEnrollment.


        :param systems_manager_network: The systems_manager_network of this UpdateNetworkWirelessSsidSplashSettingsRequestSentryEnrollment.
        :type systems_manager_network: UpdateNetworkWirelessSsidSplashSettingsRequestSentryEnrollmentSystemsManagerNetwork
        """

        self._systems_manager_network = systems_manager_network
