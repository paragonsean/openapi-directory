# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetNetworkSmDeviceCerts200ResponseInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cert_pem: str=None, device_id: str=None, id: str=None, issuer: str=None, name: str=None, not_valid_after: str=None, not_valid_before: str=None, subject: str=None):
        """GetNetworkSmDeviceCerts200ResponseInner - a model defined in OpenAPI

        :param cert_pem: The cert_pem of this GetNetworkSmDeviceCerts200ResponseInner.
        :param device_id: The device_id of this GetNetworkSmDeviceCerts200ResponseInner.
        :param id: The id of this GetNetworkSmDeviceCerts200ResponseInner.
        :param issuer: The issuer of this GetNetworkSmDeviceCerts200ResponseInner.
        :param name: The name of this GetNetworkSmDeviceCerts200ResponseInner.
        :param not_valid_after: The not_valid_after of this GetNetworkSmDeviceCerts200ResponseInner.
        :param not_valid_before: The not_valid_before of this GetNetworkSmDeviceCerts200ResponseInner.
        :param subject: The subject of this GetNetworkSmDeviceCerts200ResponseInner.
        """
        self.openapi_types = {
            'cert_pem': str,
            'device_id': str,
            'id': str,
            'issuer': str,
            'name': str,
            'not_valid_after': str,
            'not_valid_before': str,
            'subject': str
        }

        self.attribute_map = {
            'cert_pem': 'certPem',
            'device_id': 'deviceId',
            'id': 'id',
            'issuer': 'issuer',
            'name': 'name',
            'not_valid_after': 'notValidAfter',
            'not_valid_before': 'notValidBefore',
            'subject': 'subject'
        }

        self._cert_pem = cert_pem
        self._device_id = device_id
        self._id = id
        self._issuer = issuer
        self._name = name
        self._not_valid_after = not_valid_after
        self._not_valid_before = not_valid_before
        self._subject = subject

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetNetworkSmDeviceCerts200ResponseInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getNetworkSmDeviceCerts_200_response_inner of this GetNetworkSmDeviceCerts200ResponseInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cert_pem(self):
        """Gets the cert_pem of this GetNetworkSmDeviceCerts200ResponseInner.

        The PEM of the certificate.

        :return: The cert_pem of this GetNetworkSmDeviceCerts200ResponseInner.
        :rtype: str
        """
        return self._cert_pem

    @cert_pem.setter
    def cert_pem(self, cert_pem):
        """Sets the cert_pem of this GetNetworkSmDeviceCerts200ResponseInner.

        The PEM of the certificate.

        :param cert_pem: The cert_pem of this GetNetworkSmDeviceCerts200ResponseInner.
        :type cert_pem: str
        """

        self._cert_pem = cert_pem

    @property
    def device_id(self):
        """Gets the device_id of this GetNetworkSmDeviceCerts200ResponseInner.

        The Meraki managed device Id.

        :return: The device_id of this GetNetworkSmDeviceCerts200ResponseInner.
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this GetNetworkSmDeviceCerts200ResponseInner.

        The Meraki managed device Id.

        :param device_id: The device_id of this GetNetworkSmDeviceCerts200ResponseInner.
        :type device_id: str
        """

        self._device_id = device_id

    @property
    def id(self):
        """Gets the id of this GetNetworkSmDeviceCerts200ResponseInner.

        The Meraki Id of the certificate record.

        :return: The id of this GetNetworkSmDeviceCerts200ResponseInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetNetworkSmDeviceCerts200ResponseInner.

        The Meraki Id of the certificate record.

        :param id: The id of this GetNetworkSmDeviceCerts200ResponseInner.
        :type id: str
        """

        self._id = id

    @property
    def issuer(self):
        """Gets the issuer of this GetNetworkSmDeviceCerts200ResponseInner.

        The certificate issuer.

        :return: The issuer of this GetNetworkSmDeviceCerts200ResponseInner.
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this GetNetworkSmDeviceCerts200ResponseInner.

        The certificate issuer.

        :param issuer: The issuer of this GetNetworkSmDeviceCerts200ResponseInner.
        :type issuer: str
        """

        self._issuer = issuer

    @property
    def name(self):
        """Gets the name of this GetNetworkSmDeviceCerts200ResponseInner.

        The name of the certificate.

        :return: The name of this GetNetworkSmDeviceCerts200ResponseInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetNetworkSmDeviceCerts200ResponseInner.

        The name of the certificate.

        :param name: The name of this GetNetworkSmDeviceCerts200ResponseInner.
        :type name: str
        """

        self._name = name

    @property
    def not_valid_after(self):
        """Gets the not_valid_after of this GetNetworkSmDeviceCerts200ResponseInner.

        The date after which the certificate is no longer valid.

        :return: The not_valid_after of this GetNetworkSmDeviceCerts200ResponseInner.
        :rtype: str
        """
        return self._not_valid_after

    @not_valid_after.setter
    def not_valid_after(self, not_valid_after):
        """Sets the not_valid_after of this GetNetworkSmDeviceCerts200ResponseInner.

        The date after which the certificate is no longer valid.

        :param not_valid_after: The not_valid_after of this GetNetworkSmDeviceCerts200ResponseInner.
        :type not_valid_after: str
        """

        self._not_valid_after = not_valid_after

    @property
    def not_valid_before(self):
        """Gets the not_valid_before of this GetNetworkSmDeviceCerts200ResponseInner.

        The date before which the certificate is not valid.

        :return: The not_valid_before of this GetNetworkSmDeviceCerts200ResponseInner.
        :rtype: str
        """
        return self._not_valid_before

    @not_valid_before.setter
    def not_valid_before(self, not_valid_before):
        """Sets the not_valid_before of this GetNetworkSmDeviceCerts200ResponseInner.

        The date before which the certificate is not valid.

        :param not_valid_before: The not_valid_before of this GetNetworkSmDeviceCerts200ResponseInner.
        :type not_valid_before: str
        """

        self._not_valid_before = not_valid_before

    @property
    def subject(self):
        """Gets the subject of this GetNetworkSmDeviceCerts200ResponseInner.

        The subject of the certificate.

        :return: The subject of this GetNetworkSmDeviceCerts200ResponseInner.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this GetNetworkSmDeviceCerts200ResponseInner.

        The subject of the certificate.

        :param subject: The subject of this GetNetworkSmDeviceCerts200ResponseInner.
        :type subject: str
        """

        self._subject = subject
