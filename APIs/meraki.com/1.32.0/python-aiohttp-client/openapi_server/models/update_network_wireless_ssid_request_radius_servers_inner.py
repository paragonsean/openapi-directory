# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateNetworkWirelessSsidRequestRadiusServersInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ca_certificate: str=None, host: str=None, open_roaming_certificate_id: int=None, port: int=None, radsec_enabled: bool=None, secret: str=None):
        """UpdateNetworkWirelessSsidRequestRadiusServersInner - a model defined in OpenAPI

        :param ca_certificate: The ca_certificate of this UpdateNetworkWirelessSsidRequestRadiusServersInner.
        :param host: The host of this UpdateNetworkWirelessSsidRequestRadiusServersInner.
        :param open_roaming_certificate_id: The open_roaming_certificate_id of this UpdateNetworkWirelessSsidRequestRadiusServersInner.
        :param port: The port of this UpdateNetworkWirelessSsidRequestRadiusServersInner.
        :param radsec_enabled: The radsec_enabled of this UpdateNetworkWirelessSsidRequestRadiusServersInner.
        :param secret: The secret of this UpdateNetworkWirelessSsidRequestRadiusServersInner.
        """
        self.openapi_types = {
            'ca_certificate': str,
            'host': str,
            'open_roaming_certificate_id': int,
            'port': int,
            'radsec_enabled': bool,
            'secret': str
        }

        self.attribute_map = {
            'ca_certificate': 'caCertificate',
            'host': 'host',
            'open_roaming_certificate_id': 'openRoamingCertificateId',
            'port': 'port',
            'radsec_enabled': 'radsecEnabled',
            'secret': 'secret'
        }

        self._ca_certificate = ca_certificate
        self._host = host
        self._open_roaming_certificate_id = open_roaming_certificate_id
        self._port = port
        self._radsec_enabled = radsec_enabled
        self._secret = secret

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateNetworkWirelessSsidRequestRadiusServersInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateNetworkWirelessSsid_request_radiusServers_inner of this UpdateNetworkWirelessSsidRequestRadiusServersInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ca_certificate(self):
        """Gets the ca_certificate of this UpdateNetworkWirelessSsidRequestRadiusServersInner.

        Certificate used for authorization for the RADSEC Server

        :return: The ca_certificate of this UpdateNetworkWirelessSsidRequestRadiusServersInner.
        :rtype: str
        """
        return self._ca_certificate

    @ca_certificate.setter
    def ca_certificate(self, ca_certificate):
        """Sets the ca_certificate of this UpdateNetworkWirelessSsidRequestRadiusServersInner.

        Certificate used for authorization for the RADSEC Server

        :param ca_certificate: The ca_certificate of this UpdateNetworkWirelessSsidRequestRadiusServersInner.
        :type ca_certificate: str
        """

        self._ca_certificate = ca_certificate

    @property
    def host(self):
        """Gets the host of this UpdateNetworkWirelessSsidRequestRadiusServersInner.

        IP address of your RADIUS server

        :return: The host of this UpdateNetworkWirelessSsidRequestRadiusServersInner.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this UpdateNetworkWirelessSsidRequestRadiusServersInner.

        IP address of your RADIUS server

        :param host: The host of this UpdateNetworkWirelessSsidRequestRadiusServersInner.
        :type host: str
        """
        if host is None:
            raise ValueError("Invalid value for `host`, must not be `None`")

        self._host = host

    @property
    def open_roaming_certificate_id(self):
        """Gets the open_roaming_certificate_id of this UpdateNetworkWirelessSsidRequestRadiusServersInner.

        The ID of the Openroaming Certificate attached to radius server.

        :return: The open_roaming_certificate_id of this UpdateNetworkWirelessSsidRequestRadiusServersInner.
        :rtype: int
        """
        return self._open_roaming_certificate_id

    @open_roaming_certificate_id.setter
    def open_roaming_certificate_id(self, open_roaming_certificate_id):
        """Sets the open_roaming_certificate_id of this UpdateNetworkWirelessSsidRequestRadiusServersInner.

        The ID of the Openroaming Certificate attached to radius server.

        :param open_roaming_certificate_id: The open_roaming_certificate_id of this UpdateNetworkWirelessSsidRequestRadiusServersInner.
        :type open_roaming_certificate_id: int
        """

        self._open_roaming_certificate_id = open_roaming_certificate_id

    @property
    def port(self):
        """Gets the port of this UpdateNetworkWirelessSsidRequestRadiusServersInner.

        UDP port the RADIUS server listens on for Access-requests

        :return: The port of this UpdateNetworkWirelessSsidRequestRadiusServersInner.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this UpdateNetworkWirelessSsidRequestRadiusServersInner.

        UDP port the RADIUS server listens on for Access-requests

        :param port: The port of this UpdateNetworkWirelessSsidRequestRadiusServersInner.
        :type port: int
        """

        self._port = port

    @property
    def radsec_enabled(self):
        """Gets the radsec_enabled of this UpdateNetworkWirelessSsidRequestRadiusServersInner.

        Use RADSEC (TLS over TCP) to connect to this RADIUS server. Requires radiusProxyEnabled.

        :return: The radsec_enabled of this UpdateNetworkWirelessSsidRequestRadiusServersInner.
        :rtype: bool
        """
        return self._radsec_enabled

    @radsec_enabled.setter
    def radsec_enabled(self, radsec_enabled):
        """Sets the radsec_enabled of this UpdateNetworkWirelessSsidRequestRadiusServersInner.

        Use RADSEC (TLS over TCP) to connect to this RADIUS server. Requires radiusProxyEnabled.

        :param radsec_enabled: The radsec_enabled of this UpdateNetworkWirelessSsidRequestRadiusServersInner.
        :type radsec_enabled: bool
        """

        self._radsec_enabled = radsec_enabled

    @property
    def secret(self):
        """Gets the secret of this UpdateNetworkWirelessSsidRequestRadiusServersInner.

        RADIUS client shared secret

        :return: The secret of this UpdateNetworkWirelessSsidRequestRadiusServersInner.
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this UpdateNetworkWirelessSsidRequestRadiusServersInner.

        RADIUS client shared secret

        :param secret: The secret of this UpdateNetworkWirelessSsidRequestRadiusServersInner.
        :type secret: str
        """

        self._secret = secret
