# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateNetworkWirelessRfProfileRequestTwoFourGhzSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ax_enabled: bool=None, max_power: int=None, min_bitrate: float=None, min_power: int=None, rxsop: int=None, valid_auto_channels: List[int]=None):
        """UpdateNetworkWirelessRfProfileRequestTwoFourGhzSettings - a model defined in OpenAPI

        :param ax_enabled: The ax_enabled of this UpdateNetworkWirelessRfProfileRequestTwoFourGhzSettings.
        :param max_power: The max_power of this UpdateNetworkWirelessRfProfileRequestTwoFourGhzSettings.
        :param min_bitrate: The min_bitrate of this UpdateNetworkWirelessRfProfileRequestTwoFourGhzSettings.
        :param min_power: The min_power of this UpdateNetworkWirelessRfProfileRequestTwoFourGhzSettings.
        :param rxsop: The rxsop of this UpdateNetworkWirelessRfProfileRequestTwoFourGhzSettings.
        :param valid_auto_channels: The valid_auto_channels of this UpdateNetworkWirelessRfProfileRequestTwoFourGhzSettings.
        """
        self.openapi_types = {
            'ax_enabled': bool,
            'max_power': int,
            'min_bitrate': float,
            'min_power': int,
            'rxsop': int,
            'valid_auto_channels': List[int]
        }

        self.attribute_map = {
            'ax_enabled': 'axEnabled',
            'max_power': 'maxPower',
            'min_bitrate': 'minBitrate',
            'min_power': 'minPower',
            'rxsop': 'rxsop',
            'valid_auto_channels': 'validAutoChannels'
        }

        self._ax_enabled = ax_enabled
        self._max_power = max_power
        self._min_bitrate = min_bitrate
        self._min_power = min_power
        self._rxsop = rxsop
        self._valid_auto_channels = valid_auto_channels

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateNetworkWirelessRfProfileRequestTwoFourGhzSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateNetworkWirelessRfProfile_request_twoFourGhzSettings of this UpdateNetworkWirelessRfProfileRequestTwoFourGhzSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ax_enabled(self):
        """Gets the ax_enabled of this UpdateNetworkWirelessRfProfileRequestTwoFourGhzSettings.

        Determines whether ax radio on 2.4Ghz band is on or off. Can be either true or false. If false, we highly recommend disabling band steering.

        :return: The ax_enabled of this UpdateNetworkWirelessRfProfileRequestTwoFourGhzSettings.
        :rtype: bool
        """
        return self._ax_enabled

    @ax_enabled.setter
    def ax_enabled(self, ax_enabled):
        """Sets the ax_enabled of this UpdateNetworkWirelessRfProfileRequestTwoFourGhzSettings.

        Determines whether ax radio on 2.4Ghz band is on or off. Can be either true or false. If false, we highly recommend disabling band steering.

        :param ax_enabled: The ax_enabled of this UpdateNetworkWirelessRfProfileRequestTwoFourGhzSettings.
        :type ax_enabled: bool
        """

        self._ax_enabled = ax_enabled

    @property
    def max_power(self):
        """Gets the max_power of this UpdateNetworkWirelessRfProfileRequestTwoFourGhzSettings.

        Sets max power (dBm) of 2.4Ghz band. Can be integer between 2 and 30.

        :return: The max_power of this UpdateNetworkWirelessRfProfileRequestTwoFourGhzSettings.
        :rtype: int
        """
        return self._max_power

    @max_power.setter
    def max_power(self, max_power):
        """Sets the max_power of this UpdateNetworkWirelessRfProfileRequestTwoFourGhzSettings.

        Sets max power (dBm) of 2.4Ghz band. Can be integer between 2 and 30.

        :param max_power: The max_power of this UpdateNetworkWirelessRfProfileRequestTwoFourGhzSettings.
        :type max_power: int
        """

        self._max_power = max_power

    @property
    def min_bitrate(self):
        """Gets the min_bitrate of this UpdateNetworkWirelessRfProfileRequestTwoFourGhzSettings.

        Sets min bitrate (Mbps) of 2.4Ghz band. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.

        :return: The min_bitrate of this UpdateNetworkWirelessRfProfileRequestTwoFourGhzSettings.
        :rtype: float
        """
        return self._min_bitrate

    @min_bitrate.setter
    def min_bitrate(self, min_bitrate):
        """Sets the min_bitrate of this UpdateNetworkWirelessRfProfileRequestTwoFourGhzSettings.

        Sets min bitrate (Mbps) of 2.4Ghz band. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.

        :param min_bitrate: The min_bitrate of this UpdateNetworkWirelessRfProfileRequestTwoFourGhzSettings.
        :type min_bitrate: float
        """

        self._min_bitrate = min_bitrate

    @property
    def min_power(self):
        """Gets the min_power of this UpdateNetworkWirelessRfProfileRequestTwoFourGhzSettings.

        Sets min power (dBm) of 2.4Ghz band. Can be integer between 2 and 30.

        :return: The min_power of this UpdateNetworkWirelessRfProfileRequestTwoFourGhzSettings.
        :rtype: int
        """
        return self._min_power

    @min_power.setter
    def min_power(self, min_power):
        """Sets the min_power of this UpdateNetworkWirelessRfProfileRequestTwoFourGhzSettings.

        Sets min power (dBm) of 2.4Ghz band. Can be integer between 2 and 30.

        :param min_power: The min_power of this UpdateNetworkWirelessRfProfileRequestTwoFourGhzSettings.
        :type min_power: int
        """

        self._min_power = min_power

    @property
    def rxsop(self):
        """Gets the rxsop of this UpdateNetworkWirelessRfProfileRequestTwoFourGhzSettings.

        The RX-SOP level controls the sensitivity of the radio. It is strongly recommended to use RX-SOP only after consulting a wireless expert. RX-SOP can be configured in the range of -65 to -95 (dBm). A value of null will reset this to the default.

        :return: The rxsop of this UpdateNetworkWirelessRfProfileRequestTwoFourGhzSettings.
        :rtype: int
        """
        return self._rxsop

    @rxsop.setter
    def rxsop(self, rxsop):
        """Sets the rxsop of this UpdateNetworkWirelessRfProfileRequestTwoFourGhzSettings.

        The RX-SOP level controls the sensitivity of the radio. It is strongly recommended to use RX-SOP only after consulting a wireless expert. RX-SOP can be configured in the range of -65 to -95 (dBm). A value of null will reset this to the default.

        :param rxsop: The rxsop of this UpdateNetworkWirelessRfProfileRequestTwoFourGhzSettings.
        :type rxsop: int
        """

        self._rxsop = rxsop

    @property
    def valid_auto_channels(self):
        """Gets the valid_auto_channels of this UpdateNetworkWirelessRfProfileRequestTwoFourGhzSettings.

        Sets valid auto channels for 2.4Ghz band. Can be one of '1', '6' or '11'.

        :return: The valid_auto_channels of this UpdateNetworkWirelessRfProfileRequestTwoFourGhzSettings.
        :rtype: List[int]
        """
        return self._valid_auto_channels

    @valid_auto_channels.setter
    def valid_auto_channels(self, valid_auto_channels):
        """Sets the valid_auto_channels of this UpdateNetworkWirelessRfProfileRequestTwoFourGhzSettings.

        Sets valid auto channels for 2.4Ghz band. Can be one of '1', '6' or '11'.

        :param valid_auto_channels: The valid_auto_channels of this UpdateNetworkWirelessRfProfileRequestTwoFourGhzSettings.
        :type valid_auto_channels: List[int]
        """

        self._valid_auto_channels = valid_auto_channels
