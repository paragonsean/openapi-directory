# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_network_meraki_auth_user_request_authorizations_inner import UpdateNetworkMerakiAuthUserRequestAuthorizationsInner
from openapi_server import util


class UpdateNetworkMerakiAuthUserRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authorizations: List[UpdateNetworkMerakiAuthUserRequestAuthorizationsInner]=None, email_password_to_user: bool=None, name: str=None, password: str=None):
        """UpdateNetworkMerakiAuthUserRequest - a model defined in OpenAPI

        :param authorizations: The authorizations of this UpdateNetworkMerakiAuthUserRequest.
        :param email_password_to_user: The email_password_to_user of this UpdateNetworkMerakiAuthUserRequest.
        :param name: The name of this UpdateNetworkMerakiAuthUserRequest.
        :param password: The password of this UpdateNetworkMerakiAuthUserRequest.
        """
        self.openapi_types = {
            'authorizations': List[UpdateNetworkMerakiAuthUserRequestAuthorizationsInner],
            'email_password_to_user': bool,
            'name': str,
            'password': str
        }

        self.attribute_map = {
            'authorizations': 'authorizations',
            'email_password_to_user': 'emailPasswordToUser',
            'name': 'name',
            'password': 'password'
        }

        self._authorizations = authorizations
        self._email_password_to_user = email_password_to_user
        self._name = name
        self._password = password

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateNetworkMerakiAuthUserRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateNetworkMerakiAuthUser_request of this UpdateNetworkMerakiAuthUserRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authorizations(self):
        """Gets the authorizations of this UpdateNetworkMerakiAuthUserRequest.

        Authorization zones and expiration dates for the user.

        :return: The authorizations of this UpdateNetworkMerakiAuthUserRequest.
        :rtype: List[UpdateNetworkMerakiAuthUserRequestAuthorizationsInner]
        """
        return self._authorizations

    @authorizations.setter
    def authorizations(self, authorizations):
        """Sets the authorizations of this UpdateNetworkMerakiAuthUserRequest.

        Authorization zones and expiration dates for the user.

        :param authorizations: The authorizations of this UpdateNetworkMerakiAuthUserRequest.
        :type authorizations: List[UpdateNetworkMerakiAuthUserRequestAuthorizationsInner]
        """

        self._authorizations = authorizations

    @property
    def email_password_to_user(self):
        """Gets the email_password_to_user of this UpdateNetworkMerakiAuthUserRequest.

        Whether or not Meraki should email the password to user. Default is false.

        :return: The email_password_to_user of this UpdateNetworkMerakiAuthUserRequest.
        :rtype: bool
        """
        return self._email_password_to_user

    @email_password_to_user.setter
    def email_password_to_user(self, email_password_to_user):
        """Sets the email_password_to_user of this UpdateNetworkMerakiAuthUserRequest.

        Whether or not Meraki should email the password to user. Default is false.

        :param email_password_to_user: The email_password_to_user of this UpdateNetworkMerakiAuthUserRequest.
        :type email_password_to_user: bool
        """

        self._email_password_to_user = email_password_to_user

    @property
    def name(self):
        """Gets the name of this UpdateNetworkMerakiAuthUserRequest.

        Name of the user. Only allowed If the user is not Dashboard administrator.

        :return: The name of this UpdateNetworkMerakiAuthUserRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateNetworkMerakiAuthUserRequest.

        Name of the user. Only allowed If the user is not Dashboard administrator.

        :param name: The name of this UpdateNetworkMerakiAuthUserRequest.
        :type name: str
        """

        self._name = name

    @property
    def password(self):
        """Gets the password of this UpdateNetworkMerakiAuthUserRequest.

        The password for this user account. Only allowed If the user is not Dashboard administrator.

        :return: The password of this UpdateNetworkMerakiAuthUserRequest.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this UpdateNetworkMerakiAuthUserRequest.

        The password for this user account. Only allowed If the user is not Dashboard administrator.

        :param password: The password of this UpdateNetworkMerakiAuthUserRequest.
        :type password: str
        """

        self._password = password
