# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_network_camera_wireless_profile_request_identity import CreateNetworkCameraWirelessProfileRequestIdentity
from openapi_server.models.create_network_camera_wireless_profile_request_ssid import CreateNetworkCameraWirelessProfileRequestSsid
from openapi_server import util


class CreateNetworkCameraWirelessProfileRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, identity: CreateNetworkCameraWirelessProfileRequestIdentity=None, name: str=None, ssid: CreateNetworkCameraWirelessProfileRequestSsid=None):
        """CreateNetworkCameraWirelessProfileRequest - a model defined in OpenAPI

        :param identity: The identity of this CreateNetworkCameraWirelessProfileRequest.
        :param name: The name of this CreateNetworkCameraWirelessProfileRequest.
        :param ssid: The ssid of this CreateNetworkCameraWirelessProfileRequest.
        """
        self.openapi_types = {
            'identity': CreateNetworkCameraWirelessProfileRequestIdentity,
            'name': str,
            'ssid': CreateNetworkCameraWirelessProfileRequestSsid
        }

        self.attribute_map = {
            'identity': 'identity',
            'name': 'name',
            'ssid': 'ssid'
        }

        self._identity = identity
        self._name = name
        self._ssid = ssid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateNetworkCameraWirelessProfileRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The createNetworkCameraWirelessProfile_request of this CreateNetworkCameraWirelessProfileRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def identity(self):
        """Gets the identity of this CreateNetworkCameraWirelessProfileRequest.


        :return: The identity of this CreateNetworkCameraWirelessProfileRequest.
        :rtype: CreateNetworkCameraWirelessProfileRequestIdentity
        """
        return self._identity

    @identity.setter
    def identity(self, identity):
        """Sets the identity of this CreateNetworkCameraWirelessProfileRequest.


        :param identity: The identity of this CreateNetworkCameraWirelessProfileRequest.
        :type identity: CreateNetworkCameraWirelessProfileRequestIdentity
        """

        self._identity = identity

    @property
    def name(self):
        """Gets the name of this CreateNetworkCameraWirelessProfileRequest.

        The name of the camera wireless profile. This parameter is required.

        :return: The name of this CreateNetworkCameraWirelessProfileRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateNetworkCameraWirelessProfileRequest.

        The name of the camera wireless profile. This parameter is required.

        :param name: The name of this CreateNetworkCameraWirelessProfileRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def ssid(self):
        """Gets the ssid of this CreateNetworkCameraWirelessProfileRequest.


        :return: The ssid of this CreateNetworkCameraWirelessProfileRequest.
        :rtype: CreateNetworkCameraWirelessProfileRequestSsid
        """
        return self._ssid

    @ssid.setter
    def ssid(self, ssid):
        """Sets the ssid of this CreateNetworkCameraWirelessProfileRequest.


        :param ssid: The ssid of this CreateNetworkCameraWirelessProfileRequest.
        :type ssid: CreateNetworkCameraWirelessProfileRequestSsid
        """
        if ssid is None:
            raise ValueError("Invalid value for `ssid`, must not be `None`")

        self._ssid = ssid
