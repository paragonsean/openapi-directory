# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_network_appliance_traffic_shaping_uplink_selection200_response_wan_traffic_uplink_preferences_inner_traffic_filters_inner import GetNetworkApplianceTrafficShapingUplinkSelection200ResponseWanTrafficUplinkPreferencesInnerTrafficFiltersInner
from openapi_server import util


class GetNetworkApplianceTrafficShapingUplinkSelection200ResponseWanTrafficUplinkPreferencesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, preferred_uplink: str=None, traffic_filters: List[GetNetworkApplianceTrafficShapingUplinkSelection200ResponseWanTrafficUplinkPreferencesInnerTrafficFiltersInner]=None):
        """GetNetworkApplianceTrafficShapingUplinkSelection200ResponseWanTrafficUplinkPreferencesInner - a model defined in OpenAPI

        :param preferred_uplink: The preferred_uplink of this GetNetworkApplianceTrafficShapingUplinkSelection200ResponseWanTrafficUplinkPreferencesInner.
        :param traffic_filters: The traffic_filters of this GetNetworkApplianceTrafficShapingUplinkSelection200ResponseWanTrafficUplinkPreferencesInner.
        """
        self.openapi_types = {
            'preferred_uplink': str,
            'traffic_filters': List[GetNetworkApplianceTrafficShapingUplinkSelection200ResponseWanTrafficUplinkPreferencesInnerTrafficFiltersInner]
        }

        self.attribute_map = {
            'preferred_uplink': 'preferredUplink',
            'traffic_filters': 'trafficFilters'
        }

        self._preferred_uplink = preferred_uplink
        self._traffic_filters = traffic_filters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetNetworkApplianceTrafficShapingUplinkSelection200ResponseWanTrafficUplinkPreferencesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getNetworkApplianceTrafficShapingUplinkSelection_200_response_wanTrafficUplinkPreferences_inner of this GetNetworkApplianceTrafficShapingUplinkSelection200ResponseWanTrafficUplinkPreferencesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def preferred_uplink(self):
        """Gets the preferred_uplink of this GetNetworkApplianceTrafficShapingUplinkSelection200ResponseWanTrafficUplinkPreferencesInner.

        Preferred uplink for uplink preference rule. Must be one of: 'wan1' or 'wan2'

        :return: The preferred_uplink of this GetNetworkApplianceTrafficShapingUplinkSelection200ResponseWanTrafficUplinkPreferencesInner.
        :rtype: str
        """
        return self._preferred_uplink

    @preferred_uplink.setter
    def preferred_uplink(self, preferred_uplink):
        """Sets the preferred_uplink of this GetNetworkApplianceTrafficShapingUplinkSelection200ResponseWanTrafficUplinkPreferencesInner.

        Preferred uplink for uplink preference rule. Must be one of: 'wan1' or 'wan2'

        :param preferred_uplink: The preferred_uplink of this GetNetworkApplianceTrafficShapingUplinkSelection200ResponseWanTrafficUplinkPreferencesInner.
        :type preferred_uplink: str
        """
        allowed_values = ["wan1", "wan2"]  # noqa: E501
        if preferred_uplink not in allowed_values:
            raise ValueError(
                "Invalid value for `preferred_uplink` ({0}), must be one of {1}"
                .format(preferred_uplink, allowed_values)
            )

        self._preferred_uplink = preferred_uplink

    @property
    def traffic_filters(self):
        """Gets the traffic_filters of this GetNetworkApplianceTrafficShapingUplinkSelection200ResponseWanTrafficUplinkPreferencesInner.

        Traffic filters

        :return: The traffic_filters of this GetNetworkApplianceTrafficShapingUplinkSelection200ResponseWanTrafficUplinkPreferencesInner.
        :rtype: List[GetNetworkApplianceTrafficShapingUplinkSelection200ResponseWanTrafficUplinkPreferencesInnerTrafficFiltersInner]
        """
        return self._traffic_filters

    @traffic_filters.setter
    def traffic_filters(self, traffic_filters):
        """Sets the traffic_filters of this GetNetworkApplianceTrafficShapingUplinkSelection200ResponseWanTrafficUplinkPreferencesInner.

        Traffic filters

        :param traffic_filters: The traffic_filters of this GetNetworkApplianceTrafficShapingUplinkSelection200ResponseWanTrafficUplinkPreferencesInner.
        :type traffic_filters: List[GetNetworkApplianceTrafficShapingUplinkSelection200ResponseWanTrafficUplinkPreferencesInnerTrafficFiltersInner]
        """
        if traffic_filters is None:
            raise ValueError("Invalid value for `traffic_filters`, must not be `None`")

        self._traffic_filters = traffic_filters
