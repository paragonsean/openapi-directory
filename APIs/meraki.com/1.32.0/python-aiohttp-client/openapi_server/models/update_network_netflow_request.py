# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateNetworkNetflowRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, collector_ip: str=None, collector_port: int=None, eta_dst_port: int=None, eta_enabled: bool=None, reporting_enabled: bool=None):
        """UpdateNetworkNetflowRequest - a model defined in OpenAPI

        :param collector_ip: The collector_ip of this UpdateNetworkNetflowRequest.
        :param collector_port: The collector_port of this UpdateNetworkNetflowRequest.
        :param eta_dst_port: The eta_dst_port of this UpdateNetworkNetflowRequest.
        :param eta_enabled: The eta_enabled of this UpdateNetworkNetflowRequest.
        :param reporting_enabled: The reporting_enabled of this UpdateNetworkNetflowRequest.
        """
        self.openapi_types = {
            'collector_ip': str,
            'collector_port': int,
            'eta_dst_port': int,
            'eta_enabled': bool,
            'reporting_enabled': bool
        }

        self.attribute_map = {
            'collector_ip': 'collectorIp',
            'collector_port': 'collectorPort',
            'eta_dst_port': 'etaDstPort',
            'eta_enabled': 'etaEnabled',
            'reporting_enabled': 'reportingEnabled'
        }

        self._collector_ip = collector_ip
        self._collector_port = collector_port
        self._eta_dst_port = eta_dst_port
        self._eta_enabled = eta_enabled
        self._reporting_enabled = reporting_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateNetworkNetflowRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateNetworkNetflow_request of this UpdateNetworkNetflowRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def collector_ip(self):
        """Gets the collector_ip of this UpdateNetworkNetflowRequest.

        The IPv4 address of the NetFlow collector.

        :return: The collector_ip of this UpdateNetworkNetflowRequest.
        :rtype: str
        """
        return self._collector_ip

    @collector_ip.setter
    def collector_ip(self, collector_ip):
        """Sets the collector_ip of this UpdateNetworkNetflowRequest.

        The IPv4 address of the NetFlow collector.

        :param collector_ip: The collector_ip of this UpdateNetworkNetflowRequest.
        :type collector_ip: str
        """

        self._collector_ip = collector_ip

    @property
    def collector_port(self):
        """Gets the collector_port of this UpdateNetworkNetflowRequest.

        The port that the NetFlow collector will be listening on.

        :return: The collector_port of this UpdateNetworkNetflowRequest.
        :rtype: int
        """
        return self._collector_port

    @collector_port.setter
    def collector_port(self, collector_port):
        """Sets the collector_port of this UpdateNetworkNetflowRequest.

        The port that the NetFlow collector will be listening on.

        :param collector_port: The collector_port of this UpdateNetworkNetflowRequest.
        :type collector_port: int
        """

        self._collector_port = collector_port

    @property
    def eta_dst_port(self):
        """Gets the eta_dst_port of this UpdateNetworkNetflowRequest.

        The port that the Encrypted Traffic Analytics collector will be listening on.

        :return: The eta_dst_port of this UpdateNetworkNetflowRequest.
        :rtype: int
        """
        return self._eta_dst_port

    @eta_dst_port.setter
    def eta_dst_port(self, eta_dst_port):
        """Sets the eta_dst_port of this UpdateNetworkNetflowRequest.

        The port that the Encrypted Traffic Analytics collector will be listening on.

        :param eta_dst_port: The eta_dst_port of this UpdateNetworkNetflowRequest.
        :type eta_dst_port: int
        """

        self._eta_dst_port = eta_dst_port

    @property
    def eta_enabled(self):
        """Gets the eta_enabled of this UpdateNetworkNetflowRequest.

        Boolean indicating whether Encrypted Traffic Analytics is enabled (true) or disabled (false).

        :return: The eta_enabled of this UpdateNetworkNetflowRequest.
        :rtype: bool
        """
        return self._eta_enabled

    @eta_enabled.setter
    def eta_enabled(self, eta_enabled):
        """Sets the eta_enabled of this UpdateNetworkNetflowRequest.

        Boolean indicating whether Encrypted Traffic Analytics is enabled (true) or disabled (false).

        :param eta_enabled: The eta_enabled of this UpdateNetworkNetflowRequest.
        :type eta_enabled: bool
        """

        self._eta_enabled = eta_enabled

    @property
    def reporting_enabled(self):
        """Gets the reporting_enabled of this UpdateNetworkNetflowRequest.

        Boolean indicating whether NetFlow traffic reporting is enabled (true) or disabled (false).

        :return: The reporting_enabled of this UpdateNetworkNetflowRequest.
        :rtype: bool
        """
        return self._reporting_enabled

    @reporting_enabled.setter
    def reporting_enabled(self, reporting_enabled):
        """Sets the reporting_enabled of this UpdateNetworkNetflowRequest.

        Boolean indicating whether NetFlow traffic reporting is enabled (true) or disabled (false).

        :param reporting_enabled: The reporting_enabled of this UpdateNetworkNetflowRequest.
        :type reporting_enabled: bool
        """

        self._reporting_enabled = reporting_enabled
