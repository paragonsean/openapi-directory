# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_network_wireless_ssid_request_gre_concentrator import UpdateNetworkWirelessSsidRequestGreConcentrator
from openapi_server import util


class UpdateNetworkWirelessSsidRequestGre(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, concentrator: UpdateNetworkWirelessSsidRequestGreConcentrator=None, key: int=None):
        """UpdateNetworkWirelessSsidRequestGre - a model defined in OpenAPI

        :param concentrator: The concentrator of this UpdateNetworkWirelessSsidRequestGre.
        :param key: The key of this UpdateNetworkWirelessSsidRequestGre.
        """
        self.openapi_types = {
            'concentrator': UpdateNetworkWirelessSsidRequestGreConcentrator,
            'key': int
        }

        self.attribute_map = {
            'concentrator': 'concentrator',
            'key': 'key'
        }

        self._concentrator = concentrator
        self._key = key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateNetworkWirelessSsidRequestGre':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateNetworkWirelessSsid_request_gre of this UpdateNetworkWirelessSsidRequestGre.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def concentrator(self):
        """Gets the concentrator of this UpdateNetworkWirelessSsidRequestGre.


        :return: The concentrator of this UpdateNetworkWirelessSsidRequestGre.
        :rtype: UpdateNetworkWirelessSsidRequestGreConcentrator
        """
        return self._concentrator

    @concentrator.setter
    def concentrator(self, concentrator):
        """Sets the concentrator of this UpdateNetworkWirelessSsidRequestGre.


        :param concentrator: The concentrator of this UpdateNetworkWirelessSsidRequestGre.
        :type concentrator: UpdateNetworkWirelessSsidRequestGreConcentrator
        """

        self._concentrator = concentrator

    @property
    def key(self):
        """Gets the key of this UpdateNetworkWirelessSsidRequestGre.

        Optional numerical identifier that will add the GRE key field to the GRE header. Used to identify an individual traffic flow within a tunnel.

        :return: The key of this UpdateNetworkWirelessSsidRequestGre.
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this UpdateNetworkWirelessSsidRequestGre.

        Optional numerical identifier that will add the GRE key field to the GRE header. Used to identify an individual traffic flow within a tunnel.

        :param key: The key of this UpdateNetworkWirelessSsidRequestGre.
        :type key: int
        """

        self._key = key
