# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_network_wireless_ssid_traffic_shaping_rules_request_rules_inner import UpdateNetworkWirelessSsidTrafficShapingRulesRequestRulesInner
from openapi_server import util


class UpdateNetworkWirelessSsidTrafficShapingRulesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default_rules_enabled: bool=None, rules: List[UpdateNetworkWirelessSsidTrafficShapingRulesRequestRulesInner]=None, traffic_shaping_enabled: bool=None):
        """UpdateNetworkWirelessSsidTrafficShapingRulesRequest - a model defined in OpenAPI

        :param default_rules_enabled: The default_rules_enabled of this UpdateNetworkWirelessSsidTrafficShapingRulesRequest.
        :param rules: The rules of this UpdateNetworkWirelessSsidTrafficShapingRulesRequest.
        :param traffic_shaping_enabled: The traffic_shaping_enabled of this UpdateNetworkWirelessSsidTrafficShapingRulesRequest.
        """
        self.openapi_types = {
            'default_rules_enabled': bool,
            'rules': List[UpdateNetworkWirelessSsidTrafficShapingRulesRequestRulesInner],
            'traffic_shaping_enabled': bool
        }

        self.attribute_map = {
            'default_rules_enabled': 'defaultRulesEnabled',
            'rules': 'rules',
            'traffic_shaping_enabled': 'trafficShapingEnabled'
        }

        self._default_rules_enabled = default_rules_enabled
        self._rules = rules
        self._traffic_shaping_enabled = traffic_shaping_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateNetworkWirelessSsidTrafficShapingRulesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateNetworkWirelessSsidTrafficShapingRules_request of this UpdateNetworkWirelessSsidTrafficShapingRulesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default_rules_enabled(self):
        """Gets the default_rules_enabled of this UpdateNetworkWirelessSsidTrafficShapingRulesRequest.

        Whether default traffic shaping rules are enabled (true) or disabled (false). There are 4 default rules, which can be seen on your network's traffic shaping page. Note that default rules count against the rule limit of 8.

        :return: The default_rules_enabled of this UpdateNetworkWirelessSsidTrafficShapingRulesRequest.
        :rtype: bool
        """
        return self._default_rules_enabled

    @default_rules_enabled.setter
    def default_rules_enabled(self, default_rules_enabled):
        """Sets the default_rules_enabled of this UpdateNetworkWirelessSsidTrafficShapingRulesRequest.

        Whether default traffic shaping rules are enabled (true) or disabled (false). There are 4 default rules, which can be seen on your network's traffic shaping page. Note that default rules count against the rule limit of 8.

        :param default_rules_enabled: The default_rules_enabled of this UpdateNetworkWirelessSsidTrafficShapingRulesRequest.
        :type default_rules_enabled: bool
        """

        self._default_rules_enabled = default_rules_enabled

    @property
    def rules(self):
        """Gets the rules of this UpdateNetworkWirelessSsidTrafficShapingRulesRequest.

            An array of traffic shaping rules. Rules are applied in the order that     they are specified in. An empty list (or null) means no rules. Note that     you are allowed a maximum of 8 rules. 

        :return: The rules of this UpdateNetworkWirelessSsidTrafficShapingRulesRequest.
        :rtype: List[UpdateNetworkWirelessSsidTrafficShapingRulesRequestRulesInner]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this UpdateNetworkWirelessSsidTrafficShapingRulesRequest.

            An array of traffic shaping rules. Rules are applied in the order that     they are specified in. An empty list (or null) means no rules. Note that     you are allowed a maximum of 8 rules. 

        :param rules: The rules of this UpdateNetworkWirelessSsidTrafficShapingRulesRequest.
        :type rules: List[UpdateNetworkWirelessSsidTrafficShapingRulesRequestRulesInner]
        """

        self._rules = rules

    @property
    def traffic_shaping_enabled(self):
        """Gets the traffic_shaping_enabled of this UpdateNetworkWirelessSsidTrafficShapingRulesRequest.

        Whether traffic shaping rules are applied to clients on your SSID.

        :return: The traffic_shaping_enabled of this UpdateNetworkWirelessSsidTrafficShapingRulesRequest.
        :rtype: bool
        """
        return self._traffic_shaping_enabled

    @traffic_shaping_enabled.setter
    def traffic_shaping_enabled(self, traffic_shaping_enabled):
        """Sets the traffic_shaping_enabled of this UpdateNetworkWirelessSsidTrafficShapingRulesRequest.

        Whether traffic shaping rules are applied to clients on your SSID.

        :param traffic_shaping_enabled: The traffic_shaping_enabled of this UpdateNetworkWirelessSsidTrafficShapingRulesRequest.
        :type traffic_shaping_enabled: bool
        """

        self._traffic_shaping_enabled = traffic_shaping_enabled
