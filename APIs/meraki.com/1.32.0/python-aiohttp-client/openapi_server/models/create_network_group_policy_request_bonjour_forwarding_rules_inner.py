# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateNetworkGroupPolicyRequestBonjourForwardingRulesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, services: List[str]=None, vlan_id: str=None):
        """CreateNetworkGroupPolicyRequestBonjourForwardingRulesInner - a model defined in OpenAPI

        :param description: The description of this CreateNetworkGroupPolicyRequestBonjourForwardingRulesInner.
        :param services: The services of this CreateNetworkGroupPolicyRequestBonjourForwardingRulesInner.
        :param vlan_id: The vlan_id of this CreateNetworkGroupPolicyRequestBonjourForwardingRulesInner.
        """
        self.openapi_types = {
            'description': str,
            'services': List[str],
            'vlan_id': str
        }

        self.attribute_map = {
            'description': 'description',
            'services': 'services',
            'vlan_id': 'vlanId'
        }

        self._description = description
        self._services = services
        self._vlan_id = vlan_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateNetworkGroupPolicyRequestBonjourForwardingRulesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The createNetworkGroupPolicy_request_bonjourForwarding_rules_inner of this CreateNetworkGroupPolicyRequestBonjourForwardingRulesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this CreateNetworkGroupPolicyRequestBonjourForwardingRulesInner.

        A description for your Bonjour forwarding rule. Optional.

        :return: The description of this CreateNetworkGroupPolicyRequestBonjourForwardingRulesInner.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateNetworkGroupPolicyRequestBonjourForwardingRulesInner.

        A description for your Bonjour forwarding rule. Optional.

        :param description: The description of this CreateNetworkGroupPolicyRequestBonjourForwardingRulesInner.
        :type description: str
        """

        self._description = description

    @property
    def services(self):
        """Gets the services of this CreateNetworkGroupPolicyRequestBonjourForwardingRulesInner.

        A list of Bonjour services. At least one service must be specified. Available services are 'All Services', 'AirPlay', 'AFP', 'BitTorrent', 'FTP', 'iChat', 'iTunes', 'Printers', 'Samba', 'Scanners' and 'SSH'

        :return: The services of this CreateNetworkGroupPolicyRequestBonjourForwardingRulesInner.
        :rtype: List[str]
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this CreateNetworkGroupPolicyRequestBonjourForwardingRulesInner.

        A list of Bonjour services. At least one service must be specified. Available services are 'All Services', 'AirPlay', 'AFP', 'BitTorrent', 'FTP', 'iChat', 'iTunes', 'Printers', 'Samba', 'Scanners' and 'SSH'

        :param services: The services of this CreateNetworkGroupPolicyRequestBonjourForwardingRulesInner.
        :type services: List[str]
        """
        allowed_values = ["AFP", "AirPlay", "All Services", "BitTorrent", "FTP", "Printers", "SSH", "Samba", "Scanners", "iChat", "iTunes"]  # noqa: E501
        if not set(services).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `services` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(services) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._services = services

    @property
    def vlan_id(self):
        """Gets the vlan_id of this CreateNetworkGroupPolicyRequestBonjourForwardingRulesInner.

        The ID of the service VLAN. Required.

        :return: The vlan_id of this CreateNetworkGroupPolicyRequestBonjourForwardingRulesInner.
        :rtype: str
        """
        return self._vlan_id

    @vlan_id.setter
    def vlan_id(self, vlan_id):
        """Sets the vlan_id of this CreateNetworkGroupPolicyRequestBonjourForwardingRulesInner.

        The ID of the service VLAN. Required.

        :param vlan_id: The vlan_id of this CreateNetworkGroupPolicyRequestBonjourForwardingRulesInner.
        :type vlan_id: str
        """
        if vlan_id is None:
            raise ValueError("Invalid value for `vlan_id`, must not be `None`")

        self._vlan_id = vlan_id
