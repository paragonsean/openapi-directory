# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_network_appliance_vpn_site_to_site_vpn200_response_hubs_inner import GetNetworkApplianceVpnSiteToSiteVpn200ResponseHubsInner
from openapi_server.models.get_network_appliance_vpn_site_to_site_vpn200_response_subnets_inner import GetNetworkApplianceVpnSiteToSiteVpn200ResponseSubnetsInner
from openapi_server import util


class GetNetworkApplianceVpnSiteToSiteVpn200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hubs: List[GetNetworkApplianceVpnSiteToSiteVpn200ResponseHubsInner]=None, mode: str=None, subnets: List[GetNetworkApplianceVpnSiteToSiteVpn200ResponseSubnetsInner]=None):
        """GetNetworkApplianceVpnSiteToSiteVpn200Response - a model defined in OpenAPI

        :param hubs: The hubs of this GetNetworkApplianceVpnSiteToSiteVpn200Response.
        :param mode: The mode of this GetNetworkApplianceVpnSiteToSiteVpn200Response.
        :param subnets: The subnets of this GetNetworkApplianceVpnSiteToSiteVpn200Response.
        """
        self.openapi_types = {
            'hubs': List[GetNetworkApplianceVpnSiteToSiteVpn200ResponseHubsInner],
            'mode': str,
            'subnets': List[GetNetworkApplianceVpnSiteToSiteVpn200ResponseSubnetsInner]
        }

        self.attribute_map = {
            'hubs': 'hubs',
            'mode': 'mode',
            'subnets': 'subnets'
        }

        self._hubs = hubs
        self._mode = mode
        self._subnets = subnets

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetNetworkApplianceVpnSiteToSiteVpn200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getNetworkApplianceVpnSiteToSiteVpn_200_response of this GetNetworkApplianceVpnSiteToSiteVpn200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hubs(self):
        """Gets the hubs of this GetNetworkApplianceVpnSiteToSiteVpn200Response.

        The list of VPN hubs, in order of preference.

        :return: The hubs of this GetNetworkApplianceVpnSiteToSiteVpn200Response.
        :rtype: List[GetNetworkApplianceVpnSiteToSiteVpn200ResponseHubsInner]
        """
        return self._hubs

    @hubs.setter
    def hubs(self, hubs):
        """Sets the hubs of this GetNetworkApplianceVpnSiteToSiteVpn200Response.

        The list of VPN hubs, in order of preference.

        :param hubs: The hubs of this GetNetworkApplianceVpnSiteToSiteVpn200Response.
        :type hubs: List[GetNetworkApplianceVpnSiteToSiteVpn200ResponseHubsInner]
        """

        self._hubs = hubs

    @property
    def mode(self):
        """Gets the mode of this GetNetworkApplianceVpnSiteToSiteVpn200Response.

        The site-to-site VPN mode.

        :return: The mode of this GetNetworkApplianceVpnSiteToSiteVpn200Response.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this GetNetworkApplianceVpnSiteToSiteVpn200Response.

        The site-to-site VPN mode.

        :param mode: The mode of this GetNetworkApplianceVpnSiteToSiteVpn200Response.
        :type mode: str
        """

        self._mode = mode

    @property
    def subnets(self):
        """Gets the subnets of this GetNetworkApplianceVpnSiteToSiteVpn200Response.

        The list of subnets and their VPN presence.

        :return: The subnets of this GetNetworkApplianceVpnSiteToSiteVpn200Response.
        :rtype: List[GetNetworkApplianceVpnSiteToSiteVpn200ResponseSubnetsInner]
        """
        return self._subnets

    @subnets.setter
    def subnets(self, subnets):
        """Sets the subnets of this GetNetworkApplianceVpnSiteToSiteVpn200Response.

        The list of subnets and their VPN presence.

        :param subnets: The subnets of this GetNetworkApplianceVpnSiteToSiteVpn200Response.
        :type subnets: List[GetNetworkApplianceVpnSiteToSiteVpn200ResponseSubnetsInner]
        """

        self._subnets = subnets
