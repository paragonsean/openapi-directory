# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_organization_branding_policy_request_custom_logo import CreateOrganizationBrandingPolicyRequestCustomLogo
from openapi_server.models.create_organization_branding_policy_request_help_settings import CreateOrganizationBrandingPolicyRequestHelpSettings
from openapi_server.models.get_organization_branding_policies200_response_inner_admin_settings import GetOrganizationBrandingPolicies200ResponseInnerAdminSettings
from openapi_server import util


class CreateOrganizationBrandingPolicyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, admin_settings: GetOrganizationBrandingPolicies200ResponseInnerAdminSettings=None, custom_logo: CreateOrganizationBrandingPolicyRequestCustomLogo=None, enabled: bool=None, help_settings: CreateOrganizationBrandingPolicyRequestHelpSettings=None, name: str=None):
        """CreateOrganizationBrandingPolicyRequest - a model defined in OpenAPI

        :param admin_settings: The admin_settings of this CreateOrganizationBrandingPolicyRequest.
        :param custom_logo: The custom_logo of this CreateOrganizationBrandingPolicyRequest.
        :param enabled: The enabled of this CreateOrganizationBrandingPolicyRequest.
        :param help_settings: The help_settings of this CreateOrganizationBrandingPolicyRequest.
        :param name: The name of this CreateOrganizationBrandingPolicyRequest.
        """
        self.openapi_types = {
            'admin_settings': GetOrganizationBrandingPolicies200ResponseInnerAdminSettings,
            'custom_logo': CreateOrganizationBrandingPolicyRequestCustomLogo,
            'enabled': bool,
            'help_settings': CreateOrganizationBrandingPolicyRequestHelpSettings,
            'name': str
        }

        self.attribute_map = {
            'admin_settings': 'adminSettings',
            'custom_logo': 'customLogo',
            'enabled': 'enabled',
            'help_settings': 'helpSettings',
            'name': 'name'
        }

        self._admin_settings = admin_settings
        self._custom_logo = custom_logo
        self._enabled = enabled
        self._help_settings = help_settings
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateOrganizationBrandingPolicyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The createOrganizationBrandingPolicy_request of this CreateOrganizationBrandingPolicyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def admin_settings(self):
        """Gets the admin_settings of this CreateOrganizationBrandingPolicyRequest.


        :return: The admin_settings of this CreateOrganizationBrandingPolicyRequest.
        :rtype: GetOrganizationBrandingPolicies200ResponseInnerAdminSettings
        """
        return self._admin_settings

    @admin_settings.setter
    def admin_settings(self, admin_settings):
        """Sets the admin_settings of this CreateOrganizationBrandingPolicyRequest.


        :param admin_settings: The admin_settings of this CreateOrganizationBrandingPolicyRequest.
        :type admin_settings: GetOrganizationBrandingPolicies200ResponseInnerAdminSettings
        """

        self._admin_settings = admin_settings

    @property
    def custom_logo(self):
        """Gets the custom_logo of this CreateOrganizationBrandingPolicyRequest.


        :return: The custom_logo of this CreateOrganizationBrandingPolicyRequest.
        :rtype: CreateOrganizationBrandingPolicyRequestCustomLogo
        """
        return self._custom_logo

    @custom_logo.setter
    def custom_logo(self, custom_logo):
        """Sets the custom_logo of this CreateOrganizationBrandingPolicyRequest.


        :param custom_logo: The custom_logo of this CreateOrganizationBrandingPolicyRequest.
        :type custom_logo: CreateOrganizationBrandingPolicyRequestCustomLogo
        """

        self._custom_logo = custom_logo

    @property
    def enabled(self):
        """Gets the enabled of this CreateOrganizationBrandingPolicyRequest.

        Boolean indicating whether this policy is enabled.

        :return: The enabled of this CreateOrganizationBrandingPolicyRequest.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this CreateOrganizationBrandingPolicyRequest.

        Boolean indicating whether this policy is enabled.

        :param enabled: The enabled of this CreateOrganizationBrandingPolicyRequest.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def help_settings(self):
        """Gets the help_settings of this CreateOrganizationBrandingPolicyRequest.


        :return: The help_settings of this CreateOrganizationBrandingPolicyRequest.
        :rtype: CreateOrganizationBrandingPolicyRequestHelpSettings
        """
        return self._help_settings

    @help_settings.setter
    def help_settings(self, help_settings):
        """Sets the help_settings of this CreateOrganizationBrandingPolicyRequest.


        :param help_settings: The help_settings of this CreateOrganizationBrandingPolicyRequest.
        :type help_settings: CreateOrganizationBrandingPolicyRequestHelpSettings
        """

        self._help_settings = help_settings

    @property
    def name(self):
        """Gets the name of this CreateOrganizationBrandingPolicyRequest.

        Name of the Dashboard branding policy.

        :return: The name of this CreateOrganizationBrandingPolicyRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateOrganizationBrandingPolicyRequest.

        Name of the Dashboard branding policy.

        :param name: The name of this CreateOrganizationBrandingPolicyRequest.
        :type name: str
        """

        self._name = name
