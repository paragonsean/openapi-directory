# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateNetworkWirelessSettingsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ipv6_bridge_enabled: bool=None, led_lights_on: bool=None, location_analytics_enabled: bool=None, meshing_enabled: bool=None, upgrade_strategy: str=None):
        """UpdateNetworkWirelessSettingsRequest - a model defined in OpenAPI

        :param ipv6_bridge_enabled: The ipv6_bridge_enabled of this UpdateNetworkWirelessSettingsRequest.
        :param led_lights_on: The led_lights_on of this UpdateNetworkWirelessSettingsRequest.
        :param location_analytics_enabled: The location_analytics_enabled of this UpdateNetworkWirelessSettingsRequest.
        :param meshing_enabled: The meshing_enabled of this UpdateNetworkWirelessSettingsRequest.
        :param upgrade_strategy: The upgrade_strategy of this UpdateNetworkWirelessSettingsRequest.
        """
        self.openapi_types = {
            'ipv6_bridge_enabled': bool,
            'led_lights_on': bool,
            'location_analytics_enabled': bool,
            'meshing_enabled': bool,
            'upgrade_strategy': str
        }

        self.attribute_map = {
            'ipv6_bridge_enabled': 'ipv6BridgeEnabled',
            'led_lights_on': 'ledLightsOn',
            'location_analytics_enabled': 'locationAnalyticsEnabled',
            'meshing_enabled': 'meshingEnabled',
            'upgrade_strategy': 'upgradeStrategy'
        }

        self._ipv6_bridge_enabled = ipv6_bridge_enabled
        self._led_lights_on = led_lights_on
        self._location_analytics_enabled = location_analytics_enabled
        self._meshing_enabled = meshing_enabled
        self._upgrade_strategy = upgrade_strategy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateNetworkWirelessSettingsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateNetworkWirelessSettings_request of this UpdateNetworkWirelessSettingsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ipv6_bridge_enabled(self):
        """Gets the ipv6_bridge_enabled of this UpdateNetworkWirelessSettingsRequest.

        Toggle for enabling or disabling IPv6 bridging in a network (Note: if enabled, SSIDs must also be configured to use bridge mode)

        :return: The ipv6_bridge_enabled of this UpdateNetworkWirelessSettingsRequest.
        :rtype: bool
        """
        return self._ipv6_bridge_enabled

    @ipv6_bridge_enabled.setter
    def ipv6_bridge_enabled(self, ipv6_bridge_enabled):
        """Sets the ipv6_bridge_enabled of this UpdateNetworkWirelessSettingsRequest.

        Toggle for enabling or disabling IPv6 bridging in a network (Note: if enabled, SSIDs must also be configured to use bridge mode)

        :param ipv6_bridge_enabled: The ipv6_bridge_enabled of this UpdateNetworkWirelessSettingsRequest.
        :type ipv6_bridge_enabled: bool
        """

        self._ipv6_bridge_enabled = ipv6_bridge_enabled

    @property
    def led_lights_on(self):
        """Gets the led_lights_on of this UpdateNetworkWirelessSettingsRequest.

        Toggle for enabling or disabling LED lights on all APs in the network (making them run dark)

        :return: The led_lights_on of this UpdateNetworkWirelessSettingsRequest.
        :rtype: bool
        """
        return self._led_lights_on

    @led_lights_on.setter
    def led_lights_on(self, led_lights_on):
        """Sets the led_lights_on of this UpdateNetworkWirelessSettingsRequest.

        Toggle for enabling or disabling LED lights on all APs in the network (making them run dark)

        :param led_lights_on: The led_lights_on of this UpdateNetworkWirelessSettingsRequest.
        :type led_lights_on: bool
        """

        self._led_lights_on = led_lights_on

    @property
    def location_analytics_enabled(self):
        """Gets the location_analytics_enabled of this UpdateNetworkWirelessSettingsRequest.

        Toggle for enabling or disabling location analytics for your network

        :return: The location_analytics_enabled of this UpdateNetworkWirelessSettingsRequest.
        :rtype: bool
        """
        return self._location_analytics_enabled

    @location_analytics_enabled.setter
    def location_analytics_enabled(self, location_analytics_enabled):
        """Sets the location_analytics_enabled of this UpdateNetworkWirelessSettingsRequest.

        Toggle for enabling or disabling location analytics for your network

        :param location_analytics_enabled: The location_analytics_enabled of this UpdateNetworkWirelessSettingsRequest.
        :type location_analytics_enabled: bool
        """

        self._location_analytics_enabled = location_analytics_enabled

    @property
    def meshing_enabled(self):
        """Gets the meshing_enabled of this UpdateNetworkWirelessSettingsRequest.

        Toggle for enabling or disabling meshing in a network

        :return: The meshing_enabled of this UpdateNetworkWirelessSettingsRequest.
        :rtype: bool
        """
        return self._meshing_enabled

    @meshing_enabled.setter
    def meshing_enabled(self, meshing_enabled):
        """Sets the meshing_enabled of this UpdateNetworkWirelessSettingsRequest.

        Toggle for enabling or disabling meshing in a network

        :param meshing_enabled: The meshing_enabled of this UpdateNetworkWirelessSettingsRequest.
        :type meshing_enabled: bool
        """

        self._meshing_enabled = meshing_enabled

    @property
    def upgrade_strategy(self):
        """Gets the upgrade_strategy of this UpdateNetworkWirelessSettingsRequest.

        The upgrade strategy to apply to the network. Must be one of 'minimizeUpgradeTime' or 'minimizeClientDowntime'. Requires firmware version MR 26.8 or higher'

        :return: The upgrade_strategy of this UpdateNetworkWirelessSettingsRequest.
        :rtype: str
        """
        return self._upgrade_strategy

    @upgrade_strategy.setter
    def upgrade_strategy(self, upgrade_strategy):
        """Sets the upgrade_strategy of this UpdateNetworkWirelessSettingsRequest.

        The upgrade strategy to apply to the network. Must be one of 'minimizeUpgradeTime' or 'minimizeClientDowntime'. Requires firmware version MR 26.8 or higher'

        :param upgrade_strategy: The upgrade_strategy of this UpdateNetworkWirelessSettingsRequest.
        :type upgrade_strategy: str
        """
        allowed_values = ["minimizeClientDowntime", "minimizeUpgradeTime"]  # noqa: E501
        if upgrade_strategy not in allowed_values:
            raise ValueError(
                "Invalid value for `upgrade_strategy` ({0}), must be one of {1}"
                .format(upgrade_strategy, allowed_values)
            )

        self._upgrade_strategy = upgrade_strategy
