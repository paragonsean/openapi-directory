# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_organization_devices_uplinks_addresses_by_device200_response_inner_uplinks_inner_addresses_inner import GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInnerAddressesInner
from openapi_server import util


class GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, addresses: List[GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInnerAddressesInner]=None, interface: str=None):
        """GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInner - a model defined in OpenAPI

        :param addresses: The addresses of this GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInner.
        :param interface: The interface of this GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInner.
        """
        self.openapi_types = {
            'addresses': List[GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInnerAddressesInner],
            'interface': str
        }

        self.attribute_map = {
            'addresses': 'addresses',
            'interface': 'interface'
        }

        self._addresses = addresses
        self._interface = interface

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getOrganizationDevicesUplinksAddressesByDevice_200_response_inner_uplinks_inner of this GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def addresses(self):
        """Gets the addresses of this GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInner.

        Available addresses for the interface.

        :return: The addresses of this GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInner.
        :rtype: List[GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInnerAddressesInner]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInner.

        Available addresses for the interface.

        :param addresses: The addresses of this GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInner.
        :type addresses: List[GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInnerAddressesInner]
        """

        self._addresses = addresses

    @property
    def interface(self):
        """Gets the interface of this GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInner.

        Interface for the device uplink. Available options are: cellular, man1, man2, wan1, wan2

        :return: The interface of this GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInner.
        :rtype: str
        """
        return self._interface

    @interface.setter
    def interface(self, interface):
        """Sets the interface of this GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInner.

        Interface for the device uplink. Available options are: cellular, man1, man2, wan1, wan2

        :param interface: The interface of this GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInner.
        :type interface: str
        """
        allowed_values = ["cellular", "man1", "man2", "wan1", "wan2"]  # noqa: E501
        if interface not in allowed_values:
            raise ValueError(
                "Invalid value for `interface` ({0}), must be one of {1}"
                .format(interface, allowed_values)
            )

        self._interface = interface
