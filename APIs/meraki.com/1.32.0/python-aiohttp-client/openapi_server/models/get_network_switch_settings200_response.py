# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_network_switch_settings200_response_power_exceptions_inner import GetNetworkSwitchSettings200ResponsePowerExceptionsInner
from openapi_server import util


class GetNetworkSwitchSettings200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, power_exceptions: List[GetNetworkSwitchSettings200ResponsePowerExceptionsInner]=None, use_combined_power: bool=None, vlan: int=None):
        """GetNetworkSwitchSettings200Response - a model defined in OpenAPI

        :param power_exceptions: The power_exceptions of this GetNetworkSwitchSettings200Response.
        :param use_combined_power: The use_combined_power of this GetNetworkSwitchSettings200Response.
        :param vlan: The vlan of this GetNetworkSwitchSettings200Response.
        """
        self.openapi_types = {
            'power_exceptions': List[GetNetworkSwitchSettings200ResponsePowerExceptionsInner],
            'use_combined_power': bool,
            'vlan': int
        }

        self.attribute_map = {
            'power_exceptions': 'powerExceptions',
            'use_combined_power': 'useCombinedPower',
            'vlan': 'vlan'
        }

        self._power_exceptions = power_exceptions
        self._use_combined_power = use_combined_power
        self._vlan = vlan

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetNetworkSwitchSettings200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getNetworkSwitchSettings_200_response of this GetNetworkSwitchSettings200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def power_exceptions(self):
        """Gets the power_exceptions of this GetNetworkSwitchSettings200Response.

        Exceptions on a per switch basis to \"useCombinedPower\"

        :return: The power_exceptions of this GetNetworkSwitchSettings200Response.
        :rtype: List[GetNetworkSwitchSettings200ResponsePowerExceptionsInner]
        """
        return self._power_exceptions

    @power_exceptions.setter
    def power_exceptions(self, power_exceptions):
        """Sets the power_exceptions of this GetNetworkSwitchSettings200Response.

        Exceptions on a per switch basis to \"useCombinedPower\"

        :param power_exceptions: The power_exceptions of this GetNetworkSwitchSettings200Response.
        :type power_exceptions: List[GetNetworkSwitchSettings200ResponsePowerExceptionsInner]
        """

        self._power_exceptions = power_exceptions

    @property
    def use_combined_power(self):
        """Gets the use_combined_power of this GetNetworkSwitchSettings200Response.

        The use Combined Power as the default behavior of secondary power supplies on supported devices.

        :return: The use_combined_power of this GetNetworkSwitchSettings200Response.
        :rtype: bool
        """
        return self._use_combined_power

    @use_combined_power.setter
    def use_combined_power(self, use_combined_power):
        """Sets the use_combined_power of this GetNetworkSwitchSettings200Response.

        The use Combined Power as the default behavior of secondary power supplies on supported devices.

        :param use_combined_power: The use_combined_power of this GetNetworkSwitchSettings200Response.
        :type use_combined_power: bool
        """

        self._use_combined_power = use_combined_power

    @property
    def vlan(self):
        """Gets the vlan of this GetNetworkSwitchSettings200Response.

        Management VLAN

        :return: The vlan of this GetNetworkSwitchSettings200Response.
        :rtype: int
        """
        return self._vlan

    @vlan.setter
    def vlan(self, vlan):
        """Sets the vlan of this GetNetworkSwitchSettings200Response.

        Management VLAN

        :param vlan: The vlan of this GetNetworkSwitchSettings200Response.
        :type vlan: int
        """

        self._vlan = vlan
