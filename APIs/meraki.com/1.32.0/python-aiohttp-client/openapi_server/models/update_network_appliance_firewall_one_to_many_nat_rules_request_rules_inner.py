# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_network_appliance_firewall_one_to_many_nat_rules_request_rules_inner_port_rules_inner import UpdateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInnerPortRulesInner
from openapi_server import util


class UpdateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, port_rules: List[UpdateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInnerPortRulesInner]=None, public_ip: str=None, uplink: str=None):
        """UpdateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInner - a model defined in OpenAPI

        :param port_rules: The port_rules of this UpdateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInner.
        :param public_ip: The public_ip of this UpdateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInner.
        :param uplink: The uplink of this UpdateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInner.
        """
        self.openapi_types = {
            'port_rules': List[UpdateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInnerPortRulesInner],
            'public_ip': str,
            'uplink': str
        }

        self.attribute_map = {
            'port_rules': 'portRules',
            'public_ip': 'publicIp',
            'uplink': 'uplink'
        }

        self._port_rules = port_rules
        self._public_ip = public_ip
        self._uplink = uplink

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateNetworkApplianceFirewallOneToManyNatRules_request_rules_inner of this UpdateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def port_rules(self):
        """Gets the port_rules of this UpdateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInner.

        An array of associated forwarding rules

        :return: The port_rules of this UpdateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInner.
        :rtype: List[UpdateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInnerPortRulesInner]
        """
        return self._port_rules

    @port_rules.setter
    def port_rules(self, port_rules):
        """Sets the port_rules of this UpdateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInner.

        An array of associated forwarding rules

        :param port_rules: The port_rules of this UpdateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInner.
        :type port_rules: List[UpdateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInnerPortRulesInner]
        """
        if port_rules is None:
            raise ValueError("Invalid value for `port_rules`, must not be `None`")

        self._port_rules = port_rules

    @property
    def public_ip(self):
        """Gets the public_ip of this UpdateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInner.

        The IP address that will be used to access the internal resource from the WAN

        :return: The public_ip of this UpdateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInner.
        :rtype: str
        """
        return self._public_ip

    @public_ip.setter
    def public_ip(self, public_ip):
        """Sets the public_ip of this UpdateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInner.

        The IP address that will be used to access the internal resource from the WAN

        :param public_ip: The public_ip of this UpdateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInner.
        :type public_ip: str
        """
        if public_ip is None:
            raise ValueError("Invalid value for `public_ip`, must not be `None`")

        self._public_ip = public_ip

    @property
    def uplink(self):
        """Gets the uplink of this UpdateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInner.

        The physical WAN interface on which the traffic will arrive ('internet1' or, if available, 'internet2')

        :return: The uplink of this UpdateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInner.
        :rtype: str
        """
        return self._uplink

    @uplink.setter
    def uplink(self, uplink):
        """Sets the uplink of this UpdateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInner.

        The physical WAN interface on which the traffic will arrive ('internet1' or, if available, 'internet2')

        :param uplink: The uplink of this UpdateNetworkApplianceFirewallOneToManyNatRulesRequestRulesInner.
        :type uplink: str
        """
        allowed_values = ["internet1", "internet2"]  # noqa: E501
        if uplink not in allowed_values:
            raise ValueError(
                "Invalid value for `uplink` ({0}), must be one of {1}"
                .format(uplink, allowed_values)
            )

        self._uplink = uplink
