# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetNetworkSwitchSettings200ResponsePowerExceptionsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, power_type: str=None, serial: str=None):
        """GetNetworkSwitchSettings200ResponsePowerExceptionsInner - a model defined in OpenAPI

        :param power_type: The power_type of this GetNetworkSwitchSettings200ResponsePowerExceptionsInner.
        :param serial: The serial of this GetNetworkSwitchSettings200ResponsePowerExceptionsInner.
        """
        self.openapi_types = {
            'power_type': str,
            'serial': str
        }

        self.attribute_map = {
            'power_type': 'powerType',
            'serial': 'serial'
        }

        self._power_type = power_type
        self._serial = serial

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetNetworkSwitchSettings200ResponsePowerExceptionsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getNetworkSwitchSettings_200_response_powerExceptions_inner of this GetNetworkSwitchSettings200ResponsePowerExceptionsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def power_type(self):
        """Gets the power_type of this GetNetworkSwitchSettings200ResponsePowerExceptionsInner.

        Per switch exception (combined, redundant, useNetworkSetting)

        :return: The power_type of this GetNetworkSwitchSettings200ResponsePowerExceptionsInner.
        :rtype: str
        """
        return self._power_type

    @power_type.setter
    def power_type(self, power_type):
        """Sets the power_type of this GetNetworkSwitchSettings200ResponsePowerExceptionsInner.

        Per switch exception (combined, redundant, useNetworkSetting)

        :param power_type: The power_type of this GetNetworkSwitchSettings200ResponsePowerExceptionsInner.
        :type power_type: str
        """
        allowed_values = ["combined", "redundant", "useNetworkSetting"]  # noqa: E501
        if power_type not in allowed_values:
            raise ValueError(
                "Invalid value for `power_type` ({0}), must be one of {1}"
                .format(power_type, allowed_values)
            )

        self._power_type = power_type

    @property
    def serial(self):
        """Gets the serial of this GetNetworkSwitchSettings200ResponsePowerExceptionsInner.

        Serial number of the switch

        :return: The serial of this GetNetworkSwitchSettings200ResponsePowerExceptionsInner.
        :rtype: str
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """Sets the serial of this GetNetworkSwitchSettings200ResponsePowerExceptionsInner.

        Serial number of the switch

        :param serial: The serial of this GetNetworkSwitchSettings200ResponsePowerExceptionsInner.
        :type serial: str
        """

        self._serial = serial
