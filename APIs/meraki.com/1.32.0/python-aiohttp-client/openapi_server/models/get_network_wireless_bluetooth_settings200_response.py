# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetNetworkWirelessBluetoothSettings200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, advertising_enabled: bool=None, esl_enabled: bool=None, major: int=None, major_minor_assignment_mode: str=None, minor: int=None, scanning_enabled: bool=None, uuid: str=None):
        """GetNetworkWirelessBluetoothSettings200Response - a model defined in OpenAPI

        :param advertising_enabled: The advertising_enabled of this GetNetworkWirelessBluetoothSettings200Response.
        :param esl_enabled: The esl_enabled of this GetNetworkWirelessBluetoothSettings200Response.
        :param major: The major of this GetNetworkWirelessBluetoothSettings200Response.
        :param major_minor_assignment_mode: The major_minor_assignment_mode of this GetNetworkWirelessBluetoothSettings200Response.
        :param minor: The minor of this GetNetworkWirelessBluetoothSettings200Response.
        :param scanning_enabled: The scanning_enabled of this GetNetworkWirelessBluetoothSettings200Response.
        :param uuid: The uuid of this GetNetworkWirelessBluetoothSettings200Response.
        """
        self.openapi_types = {
            'advertising_enabled': bool,
            'esl_enabled': bool,
            'major': int,
            'major_minor_assignment_mode': str,
            'minor': int,
            'scanning_enabled': bool,
            'uuid': str
        }

        self.attribute_map = {
            'advertising_enabled': 'advertisingEnabled',
            'esl_enabled': 'eslEnabled',
            'major': 'major',
            'major_minor_assignment_mode': 'majorMinorAssignmentMode',
            'minor': 'minor',
            'scanning_enabled': 'scanningEnabled',
            'uuid': 'uuid'
        }

        self._advertising_enabled = advertising_enabled
        self._esl_enabled = esl_enabled
        self._major = major
        self._major_minor_assignment_mode = major_minor_assignment_mode
        self._minor = minor
        self._scanning_enabled = scanning_enabled
        self._uuid = uuid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetNetworkWirelessBluetoothSettings200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getNetworkWirelessBluetoothSettings_200_response of this GetNetworkWirelessBluetoothSettings200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def advertising_enabled(self):
        """Gets the advertising_enabled of this GetNetworkWirelessBluetoothSettings200Response.

        Whether APs will advertise beacons.

        :return: The advertising_enabled of this GetNetworkWirelessBluetoothSettings200Response.
        :rtype: bool
        """
        return self._advertising_enabled

    @advertising_enabled.setter
    def advertising_enabled(self, advertising_enabled):
        """Sets the advertising_enabled of this GetNetworkWirelessBluetoothSettings200Response.

        Whether APs will advertise beacons.

        :param advertising_enabled: The advertising_enabled of this GetNetworkWirelessBluetoothSettings200Response.
        :type advertising_enabled: bool
        """

        self._advertising_enabled = advertising_enabled

    @property
    def esl_enabled(self):
        """Gets the esl_enabled of this GetNetworkWirelessBluetoothSettings200Response.

        Whether ESL is enabled on this network.

        :return: The esl_enabled of this GetNetworkWirelessBluetoothSettings200Response.
        :rtype: bool
        """
        return self._esl_enabled

    @esl_enabled.setter
    def esl_enabled(self, esl_enabled):
        """Sets the esl_enabled of this GetNetworkWirelessBluetoothSettings200Response.

        Whether ESL is enabled on this network.

        :param esl_enabled: The esl_enabled of this GetNetworkWirelessBluetoothSettings200Response.
        :type esl_enabled: bool
        """

        self._esl_enabled = esl_enabled

    @property
    def major(self):
        """Gets the major of this GetNetworkWirelessBluetoothSettings200Response.

        The major number to be used in the beacon identifier. Only valid in 'Non-unique' mode.

        :return: The major of this GetNetworkWirelessBluetoothSettings200Response.
        :rtype: int
        """
        return self._major

    @major.setter
    def major(self, major):
        """Sets the major of this GetNetworkWirelessBluetoothSettings200Response.

        The major number to be used in the beacon identifier. Only valid in 'Non-unique' mode.

        :param major: The major of this GetNetworkWirelessBluetoothSettings200Response.
        :type major: int
        """

        self._major = major

    @property
    def major_minor_assignment_mode(self):
        """Gets the major_minor_assignment_mode of this GetNetworkWirelessBluetoothSettings200Response.

        The way major and minor number should be assigned to nodes in the network. ('Unique', 'Non-unique')

        :return: The major_minor_assignment_mode of this GetNetworkWirelessBluetoothSettings200Response.
        :rtype: str
        """
        return self._major_minor_assignment_mode

    @major_minor_assignment_mode.setter
    def major_minor_assignment_mode(self, major_minor_assignment_mode):
        """Sets the major_minor_assignment_mode of this GetNetworkWirelessBluetoothSettings200Response.

        The way major and minor number should be assigned to nodes in the network. ('Unique', 'Non-unique')

        :param major_minor_assignment_mode: The major_minor_assignment_mode of this GetNetworkWirelessBluetoothSettings200Response.
        :type major_minor_assignment_mode: str
        """

        self._major_minor_assignment_mode = major_minor_assignment_mode

    @property
    def minor(self):
        """Gets the minor of this GetNetworkWirelessBluetoothSettings200Response.

        The minor number to be used in the beacon identifier. Only valid in 'Non-unique' mode.

        :return: The minor of this GetNetworkWirelessBluetoothSettings200Response.
        :rtype: int
        """
        return self._minor

    @minor.setter
    def minor(self, minor):
        """Sets the minor of this GetNetworkWirelessBluetoothSettings200Response.

        The minor number to be used in the beacon identifier. Only valid in 'Non-unique' mode.

        :param minor: The minor of this GetNetworkWirelessBluetoothSettings200Response.
        :type minor: int
        """

        self._minor = minor

    @property
    def scanning_enabled(self):
        """Gets the scanning_enabled of this GetNetworkWirelessBluetoothSettings200Response.

        Whether APs will scan for Bluetooth enabled clients.

        :return: The scanning_enabled of this GetNetworkWirelessBluetoothSettings200Response.
        :rtype: bool
        """
        return self._scanning_enabled

    @scanning_enabled.setter
    def scanning_enabled(self, scanning_enabled):
        """Sets the scanning_enabled of this GetNetworkWirelessBluetoothSettings200Response.

        Whether APs will scan for Bluetooth enabled clients.

        :param scanning_enabled: The scanning_enabled of this GetNetworkWirelessBluetoothSettings200Response.
        :type scanning_enabled: bool
        """

        self._scanning_enabled = scanning_enabled

    @property
    def uuid(self):
        """Gets the uuid of this GetNetworkWirelessBluetoothSettings200Response.

        The UUID to be used in the beacon identifier.

        :return: The uuid of this GetNetworkWirelessBluetoothSettings200Response.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this GetNetworkWirelessBluetoothSettings200Response.

        The UUID to be used in the beacon identifier.

        :param uuid: The uuid of this GetNetworkWirelessBluetoothSettings200Response.
        :type uuid: str
        """

        self._uuid = uuid
