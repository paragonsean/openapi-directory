# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, log_event: str=None, request: str=None, target_os: str=None, timestamp: int=None):
        """CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest - a model defined in OpenAPI

        :param log_event: The log_event of this CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest.
        :param request: The request of this CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest.
        :param target_os: The target_os of this CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest.
        :param timestamp: The timestamp of this CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest.
        """
        self.openapi_types = {
            'log_event': str,
            'request': str,
            'target_os': str,
            'timestamp': int
        }

        self.attribute_map = {
            'log_event': 'logEvent',
            'request': 'request',
            'target_os': 'targetOS',
            'timestamp': 'timestamp'
        }

        self._log_event = log_event
        self._request = request
        self._target_os = target_os
        self._timestamp = timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The createOrganizationInventoryOnboardingCloudMonitoringExportEvent_request of this CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def log_event(self):
        """Gets the log_event of this CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest.

        The type of log event this is recording, e.g. download or opening a banner

        :return: The log_event of this CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest.
        :rtype: str
        """
        return self._log_event

    @log_event.setter
    def log_event(self, log_event):
        """Sets the log_event of this CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest.

        The type of log event this is recording, e.g. download or opening a banner

        :param log_event: The log_event of this CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest.
        :type log_event: str
        """
        if log_event is None:
            raise ValueError("Invalid value for `log_event`, must not be `None`")

        self._log_event = log_event

    @property
    def request(self):
        """Gets the request of this CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest.

        Used to describe if this event was the result of a redirect. E.g. a query param if an info banner is being used

        :return: The request of this CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest.
        :rtype: str
        """
        return self._request

    @request.setter
    def request(self, request):
        """Sets the request of this CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest.

        Used to describe if this event was the result of a redirect. E.g. a query param if an info banner is being used

        :param request: The request of this CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest.
        :type request: str
        """

        self._request = request

    @property
    def target_os(self):
        """Gets the target_os of this CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest.

        The name of the onboarding distro being downloaded

        :return: The target_os of this CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest.
        :rtype: str
        """
        return self._target_os

    @target_os.setter
    def target_os(self, target_os):
        """Sets the target_os of this CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest.

        The name of the onboarding distro being downloaded

        :param target_os: The target_os of this CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest.
        :type target_os: str
        """

        self._target_os = target_os

    @property
    def timestamp(self):
        """Gets the timestamp of this CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest.

        A JavaScript UTC datetime stamp for when the even occurred

        :return: The timestamp of this CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest.
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest.

        A JavaScript UTC datetime stamp for when the even occurred

        :param timestamp: The timestamp of this CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest.
        :type timestamp: int
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")

        self._timestamp = timestamp
