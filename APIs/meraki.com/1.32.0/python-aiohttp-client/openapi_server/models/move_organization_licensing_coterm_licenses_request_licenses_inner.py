# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.move_organization_licensing_coterm_licenses_request_licenses_inner_counts_inner import MoveOrganizationLicensingCotermLicensesRequestLicensesInnerCountsInner
from openapi_server import util


class MoveOrganizationLicensingCotermLicensesRequestLicensesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, counts: List[MoveOrganizationLicensingCotermLicensesRequestLicensesInnerCountsInner]=None, key: str=None):
        """MoveOrganizationLicensingCotermLicensesRequestLicensesInner - a model defined in OpenAPI

        :param counts: The counts of this MoveOrganizationLicensingCotermLicensesRequestLicensesInner.
        :param key: The key of this MoveOrganizationLicensingCotermLicensesRequestLicensesInner.
        """
        self.openapi_types = {
            'counts': List[MoveOrganizationLicensingCotermLicensesRequestLicensesInnerCountsInner],
            'key': str
        }

        self.attribute_map = {
            'counts': 'counts',
            'key': 'key'
        }

        self._counts = counts
        self._key = key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MoveOrganizationLicensingCotermLicensesRequestLicensesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The moveOrganizationLicensingCotermLicenses_request_licenses_inner of this MoveOrganizationLicensingCotermLicensesRequestLicensesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def counts(self):
        """Gets the counts of this MoveOrganizationLicensingCotermLicensesRequestLicensesInner.

        The counts to move from the license by model type

        :return: The counts of this MoveOrganizationLicensingCotermLicensesRequestLicensesInner.
        :rtype: List[MoveOrganizationLicensingCotermLicensesRequestLicensesInnerCountsInner]
        """
        return self._counts

    @counts.setter
    def counts(self, counts):
        """Sets the counts of this MoveOrganizationLicensingCotermLicensesRequestLicensesInner.

        The counts to move from the license by model type

        :param counts: The counts of this MoveOrganizationLicensingCotermLicensesRequestLicensesInner.
        :type counts: List[MoveOrganizationLicensingCotermLicensesRequestLicensesInnerCountsInner]
        """
        if counts is None:
            raise ValueError("Invalid value for `counts`, must not be `None`")

        self._counts = counts

    @property
    def key(self):
        """Gets the key of this MoveOrganizationLicensingCotermLicensesRequestLicensesInner.

        The license key to move counts from

        :return: The key of this MoveOrganizationLicensingCotermLicensesRequestLicensesInner.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this MoveOrganizationLicensingCotermLicensesRequestLicensesInner.

        The license key to move counts from

        :param key: The key of this MoveOrganizationLicensingCotermLicensesRequestLicensesInner.
        :type key: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")

        self._key = key
