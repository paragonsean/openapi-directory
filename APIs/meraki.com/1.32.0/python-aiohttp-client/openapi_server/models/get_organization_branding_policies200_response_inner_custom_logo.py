# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_organization_branding_policies200_response_inner_custom_logo_image import GetOrganizationBrandingPolicies200ResponseInnerCustomLogoImage
from openapi_server import util


class GetOrganizationBrandingPolicies200ResponseInnerCustomLogo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=None, image: GetOrganizationBrandingPolicies200ResponseInnerCustomLogoImage=None):
        """GetOrganizationBrandingPolicies200ResponseInnerCustomLogo - a model defined in OpenAPI

        :param enabled: The enabled of this GetOrganizationBrandingPolicies200ResponseInnerCustomLogo.
        :param image: The image of this GetOrganizationBrandingPolicies200ResponseInnerCustomLogo.
        """
        self.openapi_types = {
            'enabled': bool,
            'image': GetOrganizationBrandingPolicies200ResponseInnerCustomLogoImage
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'image': 'image'
        }

        self._enabled = enabled
        self._image = image

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetOrganizationBrandingPolicies200ResponseInnerCustomLogo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getOrganizationBrandingPolicies_200_response_inner_customLogo of this GetOrganizationBrandingPolicies200ResponseInnerCustomLogo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this GetOrganizationBrandingPolicies200ResponseInnerCustomLogo.

        Whether or not there is a custom logo enabled.

        :return: The enabled of this GetOrganizationBrandingPolicies200ResponseInnerCustomLogo.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this GetOrganizationBrandingPolicies200ResponseInnerCustomLogo.

        Whether or not there is a custom logo enabled.

        :param enabled: The enabled of this GetOrganizationBrandingPolicies200ResponseInnerCustomLogo.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def image(self):
        """Gets the image of this GetOrganizationBrandingPolicies200ResponseInnerCustomLogo.


        :return: The image of this GetOrganizationBrandingPolicies200ResponseInnerCustomLogo.
        :rtype: GetOrganizationBrandingPolicies200ResponseInnerCustomLogoImage
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this GetOrganizationBrandingPolicies200ResponseInnerCustomLogo.


        :param image: The image of this GetOrganizationBrandingPolicies200ResponseInnerCustomLogo.
        :type image: GetOrganizationBrandingPolicies200ResponseInnerCustomLogoImage
        """

        self._image = image
