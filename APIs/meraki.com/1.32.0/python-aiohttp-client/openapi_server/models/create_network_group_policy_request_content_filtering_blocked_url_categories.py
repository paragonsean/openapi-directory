# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateNetworkGroupPolicyRequestContentFilteringBlockedUrlCategories(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, categories: List[str]=None, settings: str=None):
        """CreateNetworkGroupPolicyRequestContentFilteringBlockedUrlCategories - a model defined in OpenAPI

        :param categories: The categories of this CreateNetworkGroupPolicyRequestContentFilteringBlockedUrlCategories.
        :param settings: The settings of this CreateNetworkGroupPolicyRequestContentFilteringBlockedUrlCategories.
        """
        self.openapi_types = {
            'categories': List[str],
            'settings': str
        }

        self.attribute_map = {
            'categories': 'categories',
            'settings': 'settings'
        }

        self._categories = categories
        self._settings = settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateNetworkGroupPolicyRequestContentFilteringBlockedUrlCategories':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The createNetworkGroupPolicy_request_contentFiltering_blockedUrlCategories of this CreateNetworkGroupPolicyRequestContentFilteringBlockedUrlCategories.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def categories(self):
        """Gets the categories of this CreateNetworkGroupPolicyRequestContentFilteringBlockedUrlCategories.

        A list of URL categories to block

        :return: The categories of this CreateNetworkGroupPolicyRequestContentFilteringBlockedUrlCategories.
        :rtype: List[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this CreateNetworkGroupPolicyRequestContentFilteringBlockedUrlCategories.

        A list of URL categories to block

        :param categories: The categories of this CreateNetworkGroupPolicyRequestContentFilteringBlockedUrlCategories.
        :type categories: List[str]
        """

        self._categories = categories

    @property
    def settings(self):
        """Gets the settings of this CreateNetworkGroupPolicyRequestContentFilteringBlockedUrlCategories.

        How URL categories are applied. Can be 'network default', 'append' or 'override'.

        :return: The settings of this CreateNetworkGroupPolicyRequestContentFilteringBlockedUrlCategories.
        :rtype: str
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this CreateNetworkGroupPolicyRequestContentFilteringBlockedUrlCategories.

        How URL categories are applied. Can be 'network default', 'append' or 'override'.

        :param settings: The settings of this CreateNetworkGroupPolicyRequestContentFilteringBlockedUrlCategories.
        :type settings: str
        """
        allowed_values = ["append", "network default", "override"]  # noqa: E501
        if settings not in allowed_values:
            raise ValueError(
                "Invalid value for `settings` ({0}), must be one of {1}"
                .format(settings, allowed_values)
            )

        self._settings = settings
