# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_organization_summary_top_devices_models_by_usage200_response_inner_usage import GetOrganizationSummaryTopDevicesModelsByUsage200ResponseInnerUsage
from openapi_server import util


class GetOrganizationSummaryTopDevicesModelsByUsage200ResponseInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, model: str=None, usage: GetOrganizationSummaryTopDevicesModelsByUsage200ResponseInnerUsage=None):
        """GetOrganizationSummaryTopDevicesModelsByUsage200ResponseInner - a model defined in OpenAPI

        :param count: The count of this GetOrganizationSummaryTopDevicesModelsByUsage200ResponseInner.
        :param model: The model of this GetOrganizationSummaryTopDevicesModelsByUsage200ResponseInner.
        :param usage: The usage of this GetOrganizationSummaryTopDevicesModelsByUsage200ResponseInner.
        """
        self.openapi_types = {
            'count': int,
            'model': str,
            'usage': GetOrganizationSummaryTopDevicesModelsByUsage200ResponseInnerUsage
        }

        self.attribute_map = {
            'count': 'count',
            'model': 'model',
            'usage': 'usage'
        }

        self._count = count
        self._model = model
        self._usage = usage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetOrganizationSummaryTopDevicesModelsByUsage200ResponseInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getOrganizationSummaryTopDevicesModelsByUsage_200_response_inner of this GetOrganizationSummaryTopDevicesModelsByUsage200ResponseInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this GetOrganizationSummaryTopDevicesModelsByUsage200ResponseInner.

        Total number of devices per model

        :return: The count of this GetOrganizationSummaryTopDevicesModelsByUsage200ResponseInner.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this GetOrganizationSummaryTopDevicesModelsByUsage200ResponseInner.

        Total number of devices per model

        :param count: The count of this GetOrganizationSummaryTopDevicesModelsByUsage200ResponseInner.
        :type count: int
        """

        self._count = count

    @property
    def model(self):
        """Gets the model of this GetOrganizationSummaryTopDevicesModelsByUsage200ResponseInner.

        The device model

        :return: The model of this GetOrganizationSummaryTopDevicesModelsByUsage200ResponseInner.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this GetOrganizationSummaryTopDevicesModelsByUsage200ResponseInner.

        The device model

        :param model: The model of this GetOrganizationSummaryTopDevicesModelsByUsage200ResponseInner.
        :type model: str
        """

        self._model = model

    @property
    def usage(self):
        """Gets the usage of this GetOrganizationSummaryTopDevicesModelsByUsage200ResponseInner.


        :return: The usage of this GetOrganizationSummaryTopDevicesModelsByUsage200ResponseInner.
        :rtype: GetOrganizationSummaryTopDevicesModelsByUsage200ResponseInnerUsage
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this GetOrganizationSummaryTopDevicesModelsByUsage200ResponseInner.


        :param usage: The usage of this GetOrganizationSummaryTopDevicesModelsByUsage200ResponseInner.
        :type usage: GetOrganizationSummaryTopDevicesModelsByUsage200ResponseInnerUsage
        """

        self._usage = usage
