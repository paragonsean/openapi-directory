# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_network_webhooks_payload_template_request_headers_inner import CreateNetworkWebhooksPayloadTemplateRequestHeadersInner
from openapi_server import util


class CreateNetworkWebhooksPayloadTemplateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body: str=None, body_file: str=None, headers: List[CreateNetworkWebhooksPayloadTemplateRequestHeadersInner]=None, headers_file: str=None, name: str=None):
        """CreateNetworkWebhooksPayloadTemplateRequest - a model defined in OpenAPI

        :param body: The body of this CreateNetworkWebhooksPayloadTemplateRequest.
        :param body_file: The body_file of this CreateNetworkWebhooksPayloadTemplateRequest.
        :param headers: The headers of this CreateNetworkWebhooksPayloadTemplateRequest.
        :param headers_file: The headers_file of this CreateNetworkWebhooksPayloadTemplateRequest.
        :param name: The name of this CreateNetworkWebhooksPayloadTemplateRequest.
        """
        self.openapi_types = {
            'body': str,
            'body_file': str,
            'headers': List[CreateNetworkWebhooksPayloadTemplateRequestHeadersInner],
            'headers_file': str,
            'name': str
        }

        self.attribute_map = {
            'body': 'body',
            'body_file': 'bodyFile',
            'headers': 'headers',
            'headers_file': 'headersFile',
            'name': 'name'
        }

        self._body = body
        self._body_file = body_file
        self._headers = headers
        self._headers_file = headers_file
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateNetworkWebhooksPayloadTemplateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The createNetworkWebhooksPayloadTemplate_request of this CreateNetworkWebhooksPayloadTemplateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body(self):
        """Gets the body of this CreateNetworkWebhooksPayloadTemplateRequest.

        The liquid template used for the body of the webhook message. Either `body` or `bodyFile` must be specified.

        :return: The body of this CreateNetworkWebhooksPayloadTemplateRequest.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this CreateNetworkWebhooksPayloadTemplateRequest.

        The liquid template used for the body of the webhook message. Either `body` or `bodyFile` must be specified.

        :param body: The body of this CreateNetworkWebhooksPayloadTemplateRequest.
        :type body: str
        """

        self._body = body

    @property
    def body_file(self):
        """Gets the body_file of this CreateNetworkWebhooksPayloadTemplateRequest.

        A file containing liquid template used for the body of the webhook message. Either `body` or `bodyFile` must be specified.

        :return: The body_file of this CreateNetworkWebhooksPayloadTemplateRequest.
        :rtype: str
        """
        return self._body_file

    @body_file.setter
    def body_file(self, body_file):
        """Sets the body_file of this CreateNetworkWebhooksPayloadTemplateRequest.

        A file containing liquid template used for the body of the webhook message. Either `body` or `bodyFile` must be specified.

        :param body_file: The body_file of this CreateNetworkWebhooksPayloadTemplateRequest.
        :type body_file: str
        """

        self._body_file = body_file

    @property
    def headers(self):
        """Gets the headers of this CreateNetworkWebhooksPayloadTemplateRequest.

        The liquid template used with the webhook headers.

        :return: The headers of this CreateNetworkWebhooksPayloadTemplateRequest.
        :rtype: List[CreateNetworkWebhooksPayloadTemplateRequestHeadersInner]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this CreateNetworkWebhooksPayloadTemplateRequest.

        The liquid template used with the webhook headers.

        :param headers: The headers of this CreateNetworkWebhooksPayloadTemplateRequest.
        :type headers: List[CreateNetworkWebhooksPayloadTemplateRequestHeadersInner]
        """

        self._headers = headers

    @property
    def headers_file(self):
        """Gets the headers_file of this CreateNetworkWebhooksPayloadTemplateRequest.

        A file containing the liquid template used with the webhook headers.

        :return: The headers_file of this CreateNetworkWebhooksPayloadTemplateRequest.
        :rtype: str
        """
        return self._headers_file

    @headers_file.setter
    def headers_file(self, headers_file):
        """Sets the headers_file of this CreateNetworkWebhooksPayloadTemplateRequest.

        A file containing the liquid template used with the webhook headers.

        :param headers_file: The headers_file of this CreateNetworkWebhooksPayloadTemplateRequest.
        :type headers_file: str
        """

        self._headers_file = headers_file

    @property
    def name(self):
        """Gets the name of this CreateNetworkWebhooksPayloadTemplateRequest.

        The name of the new template

        :return: The name of this CreateNetworkWebhooksPayloadTemplateRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateNetworkWebhooksPayloadTemplateRequest.

        The name of the new template

        :param name: The name of this CreateNetworkWebhooksPayloadTemplateRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
