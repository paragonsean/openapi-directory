# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_network_switch_alternate_management_interface_request_switches_inner import UpdateNetworkSwitchAlternateManagementInterfaceRequestSwitchesInner
from openapi_server import util


class UpdateNetworkSwitchAlternateManagementInterfaceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=None, protocols: List[str]=None, switches: List[UpdateNetworkSwitchAlternateManagementInterfaceRequestSwitchesInner]=None, vlan_id: int=None):
        """UpdateNetworkSwitchAlternateManagementInterfaceRequest - a model defined in OpenAPI

        :param enabled: The enabled of this UpdateNetworkSwitchAlternateManagementInterfaceRequest.
        :param protocols: The protocols of this UpdateNetworkSwitchAlternateManagementInterfaceRequest.
        :param switches: The switches of this UpdateNetworkSwitchAlternateManagementInterfaceRequest.
        :param vlan_id: The vlan_id of this UpdateNetworkSwitchAlternateManagementInterfaceRequest.
        """
        self.openapi_types = {
            'enabled': bool,
            'protocols': List[str],
            'switches': List[UpdateNetworkSwitchAlternateManagementInterfaceRequestSwitchesInner],
            'vlan_id': int
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'protocols': 'protocols',
            'switches': 'switches',
            'vlan_id': 'vlanId'
        }

        self._enabled = enabled
        self._protocols = protocols
        self._switches = switches
        self._vlan_id = vlan_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateNetworkSwitchAlternateManagementInterfaceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateNetworkSwitchAlternateManagementInterface_request of this UpdateNetworkSwitchAlternateManagementInterfaceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this UpdateNetworkSwitchAlternateManagementInterfaceRequest.

        Boolean value to enable or disable AMI configuration. If enabled, VLAN and protocols must be set

        :return: The enabled of this UpdateNetworkSwitchAlternateManagementInterfaceRequest.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this UpdateNetworkSwitchAlternateManagementInterfaceRequest.

        Boolean value to enable or disable AMI configuration. If enabled, VLAN and protocols must be set

        :param enabled: The enabled of this UpdateNetworkSwitchAlternateManagementInterfaceRequest.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def protocols(self):
        """Gets the protocols of this UpdateNetworkSwitchAlternateManagementInterfaceRequest.

        Can be one or more of the following values: 'radius', 'snmp' or 'syslog'

        :return: The protocols of this UpdateNetworkSwitchAlternateManagementInterfaceRequest.
        :rtype: List[str]
        """
        return self._protocols

    @protocols.setter
    def protocols(self, protocols):
        """Sets the protocols of this UpdateNetworkSwitchAlternateManagementInterfaceRequest.

        Can be one or more of the following values: 'radius', 'snmp' or 'syslog'

        :param protocols: The protocols of this UpdateNetworkSwitchAlternateManagementInterfaceRequest.
        :type protocols: List[str]
        """
        allowed_values = ["radius", "snmp", "syslog"]  # noqa: E501
        if not set(protocols).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `protocols` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(protocols) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._protocols = protocols

    @property
    def switches(self):
        """Gets the switches of this UpdateNetworkSwitchAlternateManagementInterfaceRequest.

        Array of switch serial number and IP assignment. If parameter is present, it cannot have empty body. Note: switches parameter is not applicable for template networks, in other words, do not put 'switches' in the body when updating template networks. Also, an empty 'switches' array will remove all previous assignments

        :return: The switches of this UpdateNetworkSwitchAlternateManagementInterfaceRequest.
        :rtype: List[UpdateNetworkSwitchAlternateManagementInterfaceRequestSwitchesInner]
        """
        return self._switches

    @switches.setter
    def switches(self, switches):
        """Sets the switches of this UpdateNetworkSwitchAlternateManagementInterfaceRequest.

        Array of switch serial number and IP assignment. If parameter is present, it cannot have empty body. Note: switches parameter is not applicable for template networks, in other words, do not put 'switches' in the body when updating template networks. Also, an empty 'switches' array will remove all previous assignments

        :param switches: The switches of this UpdateNetworkSwitchAlternateManagementInterfaceRequest.
        :type switches: List[UpdateNetworkSwitchAlternateManagementInterfaceRequestSwitchesInner]
        """

        self._switches = switches

    @property
    def vlan_id(self):
        """Gets the vlan_id of this UpdateNetworkSwitchAlternateManagementInterfaceRequest.

        Alternate management VLAN, must be between 1 and 4094

        :return: The vlan_id of this UpdateNetworkSwitchAlternateManagementInterfaceRequest.
        :rtype: int
        """
        return self._vlan_id

    @vlan_id.setter
    def vlan_id(self, vlan_id):
        """Sets the vlan_id of this UpdateNetworkSwitchAlternateManagementInterfaceRequest.

        Alternate management VLAN, must be between 1 and 4094

        :param vlan_id: The vlan_id of this UpdateNetworkSwitchAlternateManagementInterfaceRequest.
        :type vlan_id: int
        """

        self._vlan_id = vlan_id
