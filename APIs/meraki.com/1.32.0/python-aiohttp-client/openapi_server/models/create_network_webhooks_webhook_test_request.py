# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateNetworkWebhooksWebhookTestRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alert_type_id: str='power_supply_down', payload_template_id: str=None, payload_template_name: str=None, shared_secret: str='', url: str=None):
        """CreateNetworkWebhooksWebhookTestRequest - a model defined in OpenAPI

        :param alert_type_id: The alert_type_id of this CreateNetworkWebhooksWebhookTestRequest.
        :param payload_template_id: The payload_template_id of this CreateNetworkWebhooksWebhookTestRequest.
        :param payload_template_name: The payload_template_name of this CreateNetworkWebhooksWebhookTestRequest.
        :param shared_secret: The shared_secret of this CreateNetworkWebhooksWebhookTestRequest.
        :param url: The url of this CreateNetworkWebhooksWebhookTestRequest.
        """
        self.openapi_types = {
            'alert_type_id': str,
            'payload_template_id': str,
            'payload_template_name': str,
            'shared_secret': str,
            'url': str
        }

        self.attribute_map = {
            'alert_type_id': 'alertTypeId',
            'payload_template_id': 'payloadTemplateId',
            'payload_template_name': 'payloadTemplateName',
            'shared_secret': 'sharedSecret',
            'url': 'url'
        }

        self._alert_type_id = alert_type_id
        self._payload_template_id = payload_template_id
        self._payload_template_name = payload_template_name
        self._shared_secret = shared_secret
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateNetworkWebhooksWebhookTestRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The createNetworkWebhooksWebhookTest_request of this CreateNetworkWebhooksWebhookTestRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alert_type_id(self):
        """Gets the alert_type_id of this CreateNetworkWebhooksWebhookTestRequest.

        The type of alert which the test webhook will send. Optional. Defaults to power_supply_down.

        :return: The alert_type_id of this CreateNetworkWebhooksWebhookTestRequest.
        :rtype: str
        """
        return self._alert_type_id

    @alert_type_id.setter
    def alert_type_id(self, alert_type_id):
        """Sets the alert_type_id of this CreateNetworkWebhooksWebhookTestRequest.

        The type of alert which the test webhook will send. Optional. Defaults to power_supply_down.

        :param alert_type_id: The alert_type_id of this CreateNetworkWebhooksWebhookTestRequest.
        :type alert_type_id: str
        """

        self._alert_type_id = alert_type_id

    @property
    def payload_template_id(self):
        """Gets the payload_template_id of this CreateNetworkWebhooksWebhookTestRequest.

        The ID of the payload template of the test webhook. Defaults to the HTTP server's template ID if one exists for the given URL, or Generic template ID otherwise

        :return: The payload_template_id of this CreateNetworkWebhooksWebhookTestRequest.
        :rtype: str
        """
        return self._payload_template_id

    @payload_template_id.setter
    def payload_template_id(self, payload_template_id):
        """Sets the payload_template_id of this CreateNetworkWebhooksWebhookTestRequest.

        The ID of the payload template of the test webhook. Defaults to the HTTP server's template ID if one exists for the given URL, or Generic template ID otherwise

        :param payload_template_id: The payload_template_id of this CreateNetworkWebhooksWebhookTestRequest.
        :type payload_template_id: str
        """

        self._payload_template_id = payload_template_id

    @property
    def payload_template_name(self):
        """Gets the payload_template_name of this CreateNetworkWebhooksWebhookTestRequest.

        The name of the payload template.

        :return: The payload_template_name of this CreateNetworkWebhooksWebhookTestRequest.
        :rtype: str
        """
        return self._payload_template_name

    @payload_template_name.setter
    def payload_template_name(self, payload_template_name):
        """Sets the payload_template_name of this CreateNetworkWebhooksWebhookTestRequest.

        The name of the payload template.

        :param payload_template_name: The payload_template_name of this CreateNetworkWebhooksWebhookTestRequest.
        :type payload_template_name: str
        """

        self._payload_template_name = payload_template_name

    @property
    def shared_secret(self):
        """Gets the shared_secret of this CreateNetworkWebhooksWebhookTestRequest.

        The shared secret the test webhook will send. Optional. Defaults to an empty string.

        :return: The shared_secret of this CreateNetworkWebhooksWebhookTestRequest.
        :rtype: str
        """
        return self._shared_secret

    @shared_secret.setter
    def shared_secret(self, shared_secret):
        """Sets the shared_secret of this CreateNetworkWebhooksWebhookTestRequest.

        The shared secret the test webhook will send. Optional. Defaults to an empty string.

        :param shared_secret: The shared_secret of this CreateNetworkWebhooksWebhookTestRequest.
        :type shared_secret: str
        """

        self._shared_secret = shared_secret

    @property
    def url(self):
        """Gets the url of this CreateNetworkWebhooksWebhookTestRequest.

        The URL where the test webhook will be sent

        :return: The url of this CreateNetworkWebhooksWebhookTestRequest.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CreateNetworkWebhooksWebhookTestRequest.

        The URL where the test webhook will be sent

        :param url: The url of this CreateNetworkWebhooksWebhookTestRequest.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
