# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_network_camera_quality_retention_profile_request_video_settings import CreateNetworkCameraQualityRetentionProfileRequestVideoSettings
from openapi_server import util


class CreateNetworkCameraQualityRetentionProfileRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audio_recording_enabled: bool=None, cloud_archive_enabled: bool=None, max_retention_days: int=None, motion_based_retention_enabled: bool=None, motion_detector_version: int=None, name: str=None, restricted_bandwidth_mode_enabled: bool=None, schedule_id: str=None, video_settings: CreateNetworkCameraQualityRetentionProfileRequestVideoSettings=None):
        """CreateNetworkCameraQualityRetentionProfileRequest - a model defined in OpenAPI

        :param audio_recording_enabled: The audio_recording_enabled of this CreateNetworkCameraQualityRetentionProfileRequest.
        :param cloud_archive_enabled: The cloud_archive_enabled of this CreateNetworkCameraQualityRetentionProfileRequest.
        :param max_retention_days: The max_retention_days of this CreateNetworkCameraQualityRetentionProfileRequest.
        :param motion_based_retention_enabled: The motion_based_retention_enabled of this CreateNetworkCameraQualityRetentionProfileRequest.
        :param motion_detector_version: The motion_detector_version of this CreateNetworkCameraQualityRetentionProfileRequest.
        :param name: The name of this CreateNetworkCameraQualityRetentionProfileRequest.
        :param restricted_bandwidth_mode_enabled: The restricted_bandwidth_mode_enabled of this CreateNetworkCameraQualityRetentionProfileRequest.
        :param schedule_id: The schedule_id of this CreateNetworkCameraQualityRetentionProfileRequest.
        :param video_settings: The video_settings of this CreateNetworkCameraQualityRetentionProfileRequest.
        """
        self.openapi_types = {
            'audio_recording_enabled': bool,
            'cloud_archive_enabled': bool,
            'max_retention_days': int,
            'motion_based_retention_enabled': bool,
            'motion_detector_version': int,
            'name': str,
            'restricted_bandwidth_mode_enabled': bool,
            'schedule_id': str,
            'video_settings': CreateNetworkCameraQualityRetentionProfileRequestVideoSettings
        }

        self.attribute_map = {
            'audio_recording_enabled': 'audioRecordingEnabled',
            'cloud_archive_enabled': 'cloudArchiveEnabled',
            'max_retention_days': 'maxRetentionDays',
            'motion_based_retention_enabled': 'motionBasedRetentionEnabled',
            'motion_detector_version': 'motionDetectorVersion',
            'name': 'name',
            'restricted_bandwidth_mode_enabled': 'restrictedBandwidthModeEnabled',
            'schedule_id': 'scheduleId',
            'video_settings': 'videoSettings'
        }

        self._audio_recording_enabled = audio_recording_enabled
        self._cloud_archive_enabled = cloud_archive_enabled
        self._max_retention_days = max_retention_days
        self._motion_based_retention_enabled = motion_based_retention_enabled
        self._motion_detector_version = motion_detector_version
        self._name = name
        self._restricted_bandwidth_mode_enabled = restricted_bandwidth_mode_enabled
        self._schedule_id = schedule_id
        self._video_settings = video_settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateNetworkCameraQualityRetentionProfileRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The createNetworkCameraQualityRetentionProfile_request of this CreateNetworkCameraQualityRetentionProfileRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audio_recording_enabled(self):
        """Gets the audio_recording_enabled of this CreateNetworkCameraQualityRetentionProfileRequest.

        Whether or not to record audio. Can be either true or false. Defaults to false.

        :return: The audio_recording_enabled of this CreateNetworkCameraQualityRetentionProfileRequest.
        :rtype: bool
        """
        return self._audio_recording_enabled

    @audio_recording_enabled.setter
    def audio_recording_enabled(self, audio_recording_enabled):
        """Sets the audio_recording_enabled of this CreateNetworkCameraQualityRetentionProfileRequest.

        Whether or not to record audio. Can be either true or false. Defaults to false.

        :param audio_recording_enabled: The audio_recording_enabled of this CreateNetworkCameraQualityRetentionProfileRequest.
        :type audio_recording_enabled: bool
        """

        self._audio_recording_enabled = audio_recording_enabled

    @property
    def cloud_archive_enabled(self):
        """Gets the cloud_archive_enabled of this CreateNetworkCameraQualityRetentionProfileRequest.

        Create redundant video backup using Cloud Archive. Can be either true or false. Defaults to false.

        :return: The cloud_archive_enabled of this CreateNetworkCameraQualityRetentionProfileRequest.
        :rtype: bool
        """
        return self._cloud_archive_enabled

    @cloud_archive_enabled.setter
    def cloud_archive_enabled(self, cloud_archive_enabled):
        """Sets the cloud_archive_enabled of this CreateNetworkCameraQualityRetentionProfileRequest.

        Create redundant video backup using Cloud Archive. Can be either true or false. Defaults to false.

        :param cloud_archive_enabled: The cloud_archive_enabled of this CreateNetworkCameraQualityRetentionProfileRequest.
        :type cloud_archive_enabled: bool
        """

        self._cloud_archive_enabled = cloud_archive_enabled

    @property
    def max_retention_days(self):
        """Gets the max_retention_days of this CreateNetworkCameraQualityRetentionProfileRequest.

        The maximum number of days for which the data will be stored, or 'null' to keep data until storage space runs out. If the former, it can be one of [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 30, 60, 90] days.

        :return: The max_retention_days of this CreateNetworkCameraQualityRetentionProfileRequest.
        :rtype: int
        """
        return self._max_retention_days

    @max_retention_days.setter
    def max_retention_days(self, max_retention_days):
        """Sets the max_retention_days of this CreateNetworkCameraQualityRetentionProfileRequest.

        The maximum number of days for which the data will be stored, or 'null' to keep data until storage space runs out. If the former, it can be one of [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 30, 60, 90] days.

        :param max_retention_days: The max_retention_days of this CreateNetworkCameraQualityRetentionProfileRequest.
        :type max_retention_days: int
        """

        self._max_retention_days = max_retention_days

    @property
    def motion_based_retention_enabled(self):
        """Gets the motion_based_retention_enabled of this CreateNetworkCameraQualityRetentionProfileRequest.

        Deletes footage older than 3 days in which no motion was detected. Can be either true or false. Defaults to false. This setting does not apply to MV2 cameras.

        :return: The motion_based_retention_enabled of this CreateNetworkCameraQualityRetentionProfileRequest.
        :rtype: bool
        """
        return self._motion_based_retention_enabled

    @motion_based_retention_enabled.setter
    def motion_based_retention_enabled(self, motion_based_retention_enabled):
        """Sets the motion_based_retention_enabled of this CreateNetworkCameraQualityRetentionProfileRequest.

        Deletes footage older than 3 days in which no motion was detected. Can be either true or false. Defaults to false. This setting does not apply to MV2 cameras.

        :param motion_based_retention_enabled: The motion_based_retention_enabled of this CreateNetworkCameraQualityRetentionProfileRequest.
        :type motion_based_retention_enabled: bool
        """

        self._motion_based_retention_enabled = motion_based_retention_enabled

    @property
    def motion_detector_version(self):
        """Gets the motion_detector_version of this CreateNetworkCameraQualityRetentionProfileRequest.

        The version of the motion detector that will be used by the camera. Only applies to Gen 2 cameras. Defaults to v2.

        :return: The motion_detector_version of this CreateNetworkCameraQualityRetentionProfileRequest.
        :rtype: int
        """
        return self._motion_detector_version

    @motion_detector_version.setter
    def motion_detector_version(self, motion_detector_version):
        """Sets the motion_detector_version of this CreateNetworkCameraQualityRetentionProfileRequest.

        The version of the motion detector that will be used by the camera. Only applies to Gen 2 cameras. Defaults to v2.

        :param motion_detector_version: The motion_detector_version of this CreateNetworkCameraQualityRetentionProfileRequest.
        :type motion_detector_version: int
        """

        self._motion_detector_version = motion_detector_version

    @property
    def name(self):
        """Gets the name of this CreateNetworkCameraQualityRetentionProfileRequest.

        The name of the new profile. Must be unique. This parameter is required.

        :return: The name of this CreateNetworkCameraQualityRetentionProfileRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateNetworkCameraQualityRetentionProfileRequest.

        The name of the new profile. Must be unique. This parameter is required.

        :param name: The name of this CreateNetworkCameraQualityRetentionProfileRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def restricted_bandwidth_mode_enabled(self):
        """Gets the restricted_bandwidth_mode_enabled of this CreateNetworkCameraQualityRetentionProfileRequest.

        Disable features that require additional bandwidth such as Motion Recap. Can be either true or false. Defaults to false. This setting does not apply to MV2 cameras.

        :return: The restricted_bandwidth_mode_enabled of this CreateNetworkCameraQualityRetentionProfileRequest.
        :rtype: bool
        """
        return self._restricted_bandwidth_mode_enabled

    @restricted_bandwidth_mode_enabled.setter
    def restricted_bandwidth_mode_enabled(self, restricted_bandwidth_mode_enabled):
        """Sets the restricted_bandwidth_mode_enabled of this CreateNetworkCameraQualityRetentionProfileRequest.

        Disable features that require additional bandwidth such as Motion Recap. Can be either true or false. Defaults to false. This setting does not apply to MV2 cameras.

        :param restricted_bandwidth_mode_enabled: The restricted_bandwidth_mode_enabled of this CreateNetworkCameraQualityRetentionProfileRequest.
        :type restricted_bandwidth_mode_enabled: bool
        """

        self._restricted_bandwidth_mode_enabled = restricted_bandwidth_mode_enabled

    @property
    def schedule_id(self):
        """Gets the schedule_id of this CreateNetworkCameraQualityRetentionProfileRequest.

        Schedule for which this camera will record video, or 'null' to always record.

        :return: The schedule_id of this CreateNetworkCameraQualityRetentionProfileRequest.
        :rtype: str
        """
        return self._schedule_id

    @schedule_id.setter
    def schedule_id(self, schedule_id):
        """Sets the schedule_id of this CreateNetworkCameraQualityRetentionProfileRequest.

        Schedule for which this camera will record video, or 'null' to always record.

        :param schedule_id: The schedule_id of this CreateNetworkCameraQualityRetentionProfileRequest.
        :type schedule_id: str
        """

        self._schedule_id = schedule_id

    @property
    def video_settings(self):
        """Gets the video_settings of this CreateNetworkCameraQualityRetentionProfileRequest.


        :return: The video_settings of this CreateNetworkCameraQualityRetentionProfileRequest.
        :rtype: CreateNetworkCameraQualityRetentionProfileRequestVideoSettings
        """
        return self._video_settings

    @video_settings.setter
    def video_settings(self, video_settings):
        """Sets the video_settings of this CreateNetworkCameraQualityRetentionProfileRequest.


        :param video_settings: The video_settings of this CreateNetworkCameraQualityRetentionProfileRequest.
        :type video_settings: CreateNetworkCameraQualityRetentionProfileRequestVideoSettings
        """

        self._video_settings = video_settings
