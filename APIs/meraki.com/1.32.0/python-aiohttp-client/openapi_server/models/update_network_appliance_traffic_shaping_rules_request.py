# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_network_appliance_traffic_shaping_rules_request_rules_inner import UpdateNetworkApplianceTrafficShapingRulesRequestRulesInner
from openapi_server import util


class UpdateNetworkApplianceTrafficShapingRulesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default_rules_enabled: bool=None, rules: List[UpdateNetworkApplianceTrafficShapingRulesRequestRulesInner]=None):
        """UpdateNetworkApplianceTrafficShapingRulesRequest - a model defined in OpenAPI

        :param default_rules_enabled: The default_rules_enabled of this UpdateNetworkApplianceTrafficShapingRulesRequest.
        :param rules: The rules of this UpdateNetworkApplianceTrafficShapingRulesRequest.
        """
        self.openapi_types = {
            'default_rules_enabled': bool,
            'rules': List[UpdateNetworkApplianceTrafficShapingRulesRequestRulesInner]
        }

        self.attribute_map = {
            'default_rules_enabled': 'defaultRulesEnabled',
            'rules': 'rules'
        }

        self._default_rules_enabled = default_rules_enabled
        self._rules = rules

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateNetworkApplianceTrafficShapingRulesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateNetworkApplianceTrafficShapingRules_request of this UpdateNetworkApplianceTrafficShapingRulesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default_rules_enabled(self):
        """Gets the default_rules_enabled of this UpdateNetworkApplianceTrafficShapingRulesRequest.

        Whether default traffic shaping rules are enabled (true) or disabled (false). There are 4 default rules, which can be seen on your network's traffic shaping page. Note that default rules count against the rule limit of 8.

        :return: The default_rules_enabled of this UpdateNetworkApplianceTrafficShapingRulesRequest.
        :rtype: bool
        """
        return self._default_rules_enabled

    @default_rules_enabled.setter
    def default_rules_enabled(self, default_rules_enabled):
        """Sets the default_rules_enabled of this UpdateNetworkApplianceTrafficShapingRulesRequest.

        Whether default traffic shaping rules are enabled (true) or disabled (false). There are 4 default rules, which can be seen on your network's traffic shaping page. Note that default rules count against the rule limit of 8.

        :param default_rules_enabled: The default_rules_enabled of this UpdateNetworkApplianceTrafficShapingRulesRequest.
        :type default_rules_enabled: bool
        """

        self._default_rules_enabled = default_rules_enabled

    @property
    def rules(self):
        """Gets the rules of this UpdateNetworkApplianceTrafficShapingRulesRequest.

            An array of traffic shaping rules. Rules are applied in the order that     they are specified in. An empty list (or null) means no rules. Note that     you are allowed a maximum of 8 rules. 

        :return: The rules of this UpdateNetworkApplianceTrafficShapingRulesRequest.
        :rtype: List[UpdateNetworkApplianceTrafficShapingRulesRequestRulesInner]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this UpdateNetworkApplianceTrafficShapingRulesRequest.

            An array of traffic shaping rules. Rules are applied in the order that     they are specified in. An empty list (or null) means no rules. Note that     you are allowed a maximum of 8 rules. 

        :param rules: The rules of this UpdateNetworkApplianceTrafficShapingRulesRequest.
        :type rules: List[UpdateNetworkApplianceTrafficShapingRulesRequestRulesInner]
        """

        self._rules = rules
