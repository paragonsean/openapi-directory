# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_network_switch_dhcp_v4_servers_seen200_response_inner_device import GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerDevice
from openapi_server.models.get_network_switch_dhcp_v4_servers_seen200_response_inner_ipv4 import GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerIpv4
from openapi_server.models.get_network_switch_dhcp_v4_servers_seen200_response_inner_last_ack import GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastAck
from openapi_server.models.get_network_switch_dhcp_v4_servers_seen200_response_inner_last_packet import GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacket
from openapi_server.models.get_network_switch_dhcp_v4_servers_seen200_response_inner_seen_by_inner import GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerSeenByInner
from openapi_server import util


class GetNetworkSwitchDhcpV4ServersSeen200ResponseInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_id: str=None, device: GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerDevice=None, ipv4: GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerIpv4=None, is_allowed: bool=None, is_configured: bool=None, last_ack: GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastAck=None, last_packet: GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacket=None, last_seen_at: datetime=None, mac: str=None, seen_by: List[GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerSeenByInner]=None, type: str=None, vlan: int=None):
        """GetNetworkSwitchDhcpV4ServersSeen200ResponseInner - a model defined in OpenAPI

        :param client_id: The client_id of this GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.
        :param device: The device of this GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.
        :param ipv4: The ipv4 of this GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.
        :param is_allowed: The is_allowed of this GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.
        :param is_configured: The is_configured of this GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.
        :param last_ack: The last_ack of this GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.
        :param last_packet: The last_packet of this GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.
        :param last_seen_at: The last_seen_at of this GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.
        :param mac: The mac of this GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.
        :param seen_by: The seen_by of this GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.
        :param type: The type of this GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.
        :param vlan: The vlan of this GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.
        """
        self.openapi_types = {
            'client_id': str,
            'device': GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerDevice,
            'ipv4': GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerIpv4,
            'is_allowed': bool,
            'is_configured': bool,
            'last_ack': GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastAck,
            'last_packet': GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacket,
            'last_seen_at': datetime,
            'mac': str,
            'seen_by': List[GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerSeenByInner],
            'type': str,
            'vlan': int
        }

        self.attribute_map = {
            'client_id': 'clientId',
            'device': 'device',
            'ipv4': 'ipv4',
            'is_allowed': 'isAllowed',
            'is_configured': 'isConfigured',
            'last_ack': 'lastAck',
            'last_packet': 'lastPacket',
            'last_seen_at': 'lastSeenAt',
            'mac': 'mac',
            'seen_by': 'seenBy',
            'type': 'type',
            'vlan': 'vlan'
        }

        self._client_id = client_id
        self._device = device
        self._ipv4 = ipv4
        self._is_allowed = is_allowed
        self._is_configured = is_configured
        self._last_ack = last_ack
        self._last_packet = last_packet
        self._last_seen_at = last_seen_at
        self._mac = mac
        self._seen_by = seen_by
        self._type = type
        self._vlan = vlan

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetNetworkSwitchDhcpV4ServersSeen200ResponseInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getNetworkSwitchDhcpV4ServersSeen_200_response_inner of this GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_id(self):
        """Gets the client_id of this GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.

        Client id of the server if available.

        :return: The client_id of this GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.

        Client id of the server if available.

        :param client_id: The client_id of this GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.
        :type client_id: str
        """

        self._client_id = client_id

    @property
    def device(self):
        """Gets the device of this GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.


        :return: The device of this GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.
        :rtype: GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerDevice
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.


        :param device: The device of this GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.
        :type device: GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerDevice
        """

        self._device = device

    @property
    def ipv4(self):
        """Gets the ipv4 of this GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.


        :return: The ipv4 of this GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.
        :rtype: GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerIpv4
        """
        return self._ipv4

    @ipv4.setter
    def ipv4(self, ipv4):
        """Sets the ipv4 of this GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.


        :param ipv4: The ipv4 of this GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.
        :type ipv4: GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerIpv4
        """

        self._ipv4 = ipv4

    @property
    def is_allowed(self):
        """Gets the is_allowed of this GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.

        Whether the server is allowed or blocked. Always true for configured servers.

        :return: The is_allowed of this GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.
        :rtype: bool
        """
        return self._is_allowed

    @is_allowed.setter
    def is_allowed(self, is_allowed):
        """Sets the is_allowed of this GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.

        Whether the server is allowed or blocked. Always true for configured servers.

        :param is_allowed: The is_allowed of this GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.
        :type is_allowed: bool
        """

        self._is_allowed = is_allowed

    @property
    def is_configured(self):
        """Gets the is_configured of this GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.

        Whether the server is configured.

        :return: The is_configured of this GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.
        :rtype: bool
        """
        return self._is_configured

    @is_configured.setter
    def is_configured(self, is_configured):
        """Sets the is_configured of this GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.

        Whether the server is configured.

        :param is_configured: The is_configured of this GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.
        :type is_configured: bool
        """

        self._is_configured = is_configured

    @property
    def last_ack(self):
        """Gets the last_ack of this GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.


        :return: The last_ack of this GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.
        :rtype: GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastAck
        """
        return self._last_ack

    @last_ack.setter
    def last_ack(self, last_ack):
        """Sets the last_ack of this GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.


        :param last_ack: The last_ack of this GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.
        :type last_ack: GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastAck
        """

        self._last_ack = last_ack

    @property
    def last_packet(self):
        """Gets the last_packet of this GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.


        :return: The last_packet of this GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.
        :rtype: GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacket
        """
        return self._last_packet

    @last_packet.setter
    def last_packet(self, last_packet):
        """Sets the last_packet of this GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.


        :param last_packet: The last_packet of this GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.
        :type last_packet: GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacket
        """

        self._last_packet = last_packet

    @property
    def last_seen_at(self):
        """Gets the last_seen_at of this GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.

        Last time the server was seen.

        :return: The last_seen_at of this GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.
        :rtype: datetime
        """
        return self._last_seen_at

    @last_seen_at.setter
    def last_seen_at(self, last_seen_at):
        """Sets the last_seen_at of this GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.

        Last time the server was seen.

        :param last_seen_at: The last_seen_at of this GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.
        :type last_seen_at: datetime
        """

        self._last_seen_at = last_seen_at

    @property
    def mac(self):
        """Gets the mac of this GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.

        Mac address of the server.

        :return: The mac of this GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.
        :rtype: str
        """
        return self._mac

    @mac.setter
    def mac(self, mac):
        """Sets the mac of this GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.

        Mac address of the server.

        :param mac: The mac of this GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.
        :type mac: str
        """

        self._mac = mac

    @property
    def seen_by(self):
        """Gets the seen_by of this GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.

        Devices that saw the server.

        :return: The seen_by of this GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.
        :rtype: List[GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerSeenByInner]
        """
        return self._seen_by

    @seen_by.setter
    def seen_by(self, seen_by):
        """Sets the seen_by of this GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.

        Devices that saw the server.

        :param seen_by: The seen_by of this GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.
        :type seen_by: List[GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerSeenByInner]
        """

        self._seen_by = seen_by

    @property
    def type(self):
        """Gets the type of this GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.

        server type. Can be a 'device', 'stack', or 'discovered' (i.e client).

        :return: The type of this GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.

        server type. Can be a 'device', 'stack', or 'discovered' (i.e client).

        :param type: The type of this GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.
        :type type: str
        """
        allowed_values = ["device", "discovered", "stack"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def vlan(self):
        """Gets the vlan of this GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.

        Vlan id of the server.

        :return: The vlan of this GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.
        :rtype: int
        """
        return self._vlan

    @vlan.setter
    def vlan(self, vlan):
        """Sets the vlan of this GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.

        Vlan id of the server.

        :param vlan: The vlan of this GetNetworkSwitchDhcpV4ServersSeen200ResponseInner.
        :type vlan: int
        """

        self._vlan = vlan
