# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_organization_action_batch201_response_status_created_resources_inner import CreateOrganizationActionBatch201ResponseStatusCreatedResourcesInner
from openapi_server import util


class CreateOrganizationActionBatch201ResponseStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, completed: bool=None, created_resources: List[CreateOrganizationActionBatch201ResponseStatusCreatedResourcesInner]=None, errors: List[str]=None, failed: bool=None):
        """CreateOrganizationActionBatch201ResponseStatus - a model defined in OpenAPI

        :param completed: The completed of this CreateOrganizationActionBatch201ResponseStatus.
        :param created_resources: The created_resources of this CreateOrganizationActionBatch201ResponseStatus.
        :param errors: The errors of this CreateOrganizationActionBatch201ResponseStatus.
        :param failed: The failed of this CreateOrganizationActionBatch201ResponseStatus.
        """
        self.openapi_types = {
            'completed': bool,
            'created_resources': List[CreateOrganizationActionBatch201ResponseStatusCreatedResourcesInner],
            'errors': List[str],
            'failed': bool
        }

        self.attribute_map = {
            'completed': 'completed',
            'created_resources': 'createdResources',
            'errors': 'errors',
            'failed': 'failed'
        }

        self._completed = completed
        self._created_resources = created_resources
        self._errors = errors
        self._failed = failed

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateOrganizationActionBatch201ResponseStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The createOrganizationActionBatch_201_response_status of this CreateOrganizationActionBatch201ResponseStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def completed(self):
        """Gets the completed of this CreateOrganizationActionBatch201ResponseStatus.

        Flag describing whether all actions in the action batch have completed

        :return: The completed of this CreateOrganizationActionBatch201ResponseStatus.
        :rtype: bool
        """
        return self._completed

    @completed.setter
    def completed(self, completed):
        """Sets the completed of this CreateOrganizationActionBatch201ResponseStatus.

        Flag describing whether all actions in the action batch have completed

        :param completed: The completed of this CreateOrganizationActionBatch201ResponseStatus.
        :type completed: bool
        """

        self._completed = completed

    @property
    def created_resources(self):
        """Gets the created_resources of this CreateOrganizationActionBatch201ResponseStatus.

        Resources created as a result of this action batch

        :return: The created_resources of this CreateOrganizationActionBatch201ResponseStatus.
        :rtype: List[CreateOrganizationActionBatch201ResponseStatusCreatedResourcesInner]
        """
        return self._created_resources

    @created_resources.setter
    def created_resources(self, created_resources):
        """Sets the created_resources of this CreateOrganizationActionBatch201ResponseStatus.

        Resources created as a result of this action batch

        :param created_resources: The created_resources of this CreateOrganizationActionBatch201ResponseStatus.
        :type created_resources: List[CreateOrganizationActionBatch201ResponseStatusCreatedResourcesInner]
        """
        if created_resources is None:
            raise ValueError("Invalid value for `created_resources`, must not be `None`")

        self._created_resources = created_resources

    @property
    def errors(self):
        """Gets the errors of this CreateOrganizationActionBatch201ResponseStatus.

        List of errors encountered when running actions in the action batch

        :return: The errors of this CreateOrganizationActionBatch201ResponseStatus.
        :rtype: List[str]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this CreateOrganizationActionBatch201ResponseStatus.

        List of errors encountered when running actions in the action batch

        :param errors: The errors of this CreateOrganizationActionBatch201ResponseStatus.
        :type errors: List[str]
        """

        self._errors = errors

    @property
    def failed(self):
        """Gets the failed of this CreateOrganizationActionBatch201ResponseStatus.

        Flag describing whether any actions in the action batch failed

        :return: The failed of this CreateOrganizationActionBatch201ResponseStatus.
        :rtype: bool
        """
        return self._failed

    @failed.setter
    def failed(self, failed):
        """Sets the failed of this CreateOrganizationActionBatch201ResponseStatus.

        Flag describing whether any actions in the action batch failed

        :param failed: The failed of this CreateOrganizationActionBatch201ResponseStatus.
        :type failed: bool
        """

        self._failed = failed
