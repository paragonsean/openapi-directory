# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_organization_inventory_onboarding_cloud_monitoring_prepare201_response_inner_config_params_tunnel_root_certificate import CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInnerConfigParamsTunnelRootCertificate
from openapi_server import util


class CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInnerConfigParamsTunnel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, host: str=None, mode: str=None, name: str=None, port: str=None, root_certificate: CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInnerConfigParamsTunnelRootCertificate=None):
        """CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInnerConfigParamsTunnel - a model defined in OpenAPI

        :param host: The host of this CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInnerConfigParamsTunnel.
        :param mode: The mode of this CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInnerConfigParamsTunnel.
        :param name: The name of this CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInnerConfigParamsTunnel.
        :param port: The port of this CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInnerConfigParamsTunnel.
        :param root_certificate: The root_certificate of this CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInnerConfigParamsTunnel.
        """
        self.openapi_types = {
            'host': str,
            'mode': str,
            'name': str,
            'port': str,
            'root_certificate': CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInnerConfigParamsTunnelRootCertificate
        }

        self.attribute_map = {
            'host': 'host',
            'mode': 'mode',
            'name': 'name',
            'port': 'port',
            'root_certificate': 'rootCertificate'
        }

        self._host = host
        self._mode = mode
        self._name = name
        self._port = port
        self._root_certificate = root_certificate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInnerConfigParamsTunnel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The createOrganizationInventoryOnboardingCloudMonitoringPrepare_201_response_inner_configParams_tunnel of this CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInnerConfigParamsTunnel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def host(self):
        """Gets the host of this CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInnerConfigParamsTunnel.

        SSH tunnel URL used to connect to the device

        :return: The host of this CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInnerConfigParamsTunnel.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInnerConfigParamsTunnel.

        SSH tunnel URL used to connect to the device

        :param host: The host of this CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInnerConfigParamsTunnel.
        :type host: str
        """

        self._host = host

    @property
    def mode(self):
        """Gets the mode of this CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInnerConfigParamsTunnel.

        

        :return: The mode of this CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInnerConfigParamsTunnel.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInnerConfigParamsTunnel.

        

        :param mode: The mode of this CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInnerConfigParamsTunnel.
        :type mode: str
        """

        self._mode = mode

    @property
    def name(self):
        """Gets the name of this CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInnerConfigParamsTunnel.

        The name of the tunnel we are attempting to connect to

        :return: The name of this CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInnerConfigParamsTunnel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInnerConfigParamsTunnel.

        The name of the tunnel we are attempting to connect to

        :param name: The name of this CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInnerConfigParamsTunnel.
        :type name: str
        """

        self._name = name

    @property
    def port(self):
        """Gets the port of this CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInnerConfigParamsTunnel.

        The port used for the ssh tunnel.

        :return: The port of this CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInnerConfigParamsTunnel.
        :rtype: str
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInnerConfigParamsTunnel.

        The port used for the ssh tunnel.

        :param port: The port of this CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInnerConfigParamsTunnel.
        :type port: str
        """

        self._port = port

    @property
    def root_certificate(self):
        """Gets the root_certificate of this CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInnerConfigParamsTunnel.


        :return: The root_certificate of this CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInnerConfigParamsTunnel.
        :rtype: CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInnerConfigParamsTunnelRootCertificate
        """
        return self._root_certificate

    @root_certificate.setter
    def root_certificate(self, root_certificate):
        """Sets the root_certificate of this CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInnerConfigParamsTunnel.


        :param root_certificate: The root_certificate of this CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInnerConfigParamsTunnel.
        :type root_certificate: CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInnerConfigParamsTunnelRootCertificate
        """

        self._root_certificate = root_certificate
