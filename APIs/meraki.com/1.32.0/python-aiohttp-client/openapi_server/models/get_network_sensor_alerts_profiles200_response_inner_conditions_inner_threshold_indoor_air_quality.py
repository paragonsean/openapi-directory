# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThresholdIndoorAirQuality(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, quality: str=None, score: int=None):
        """GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThresholdIndoorAirQuality - a model defined in OpenAPI

        :param quality: The quality of this GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThresholdIndoorAirQuality.
        :param score: The score of this GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThresholdIndoorAirQuality.
        """
        self.openapi_types = {
            'quality': str,
            'score': int
        }

        self.attribute_map = {
            'quality': 'quality',
            'score': 'score'
        }

        self._quality = quality
        self._score = score

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThresholdIndoorAirQuality':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getNetworkSensorAlertsProfiles_200_response_inner_conditions_inner_threshold_indoorAirQuality of this GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThresholdIndoorAirQuality.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def quality(self):
        """Gets the quality of this GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThresholdIndoorAirQuality.

        Alerting threshold as a qualitative indoor air quality level.

        :return: The quality of this GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThresholdIndoorAirQuality.
        :rtype: str
        """
        return self._quality

    @quality.setter
    def quality(self, quality):
        """Sets the quality of this GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThresholdIndoorAirQuality.

        Alerting threshold as a qualitative indoor air quality level.

        :param quality: The quality of this GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThresholdIndoorAirQuality.
        :type quality: str
        """
        allowed_values = ["fair", "good", "inadequate", "poor"]  # noqa: E501
        if quality not in allowed_values:
            raise ValueError(
                "Invalid value for `quality` ({0}), must be one of {1}"
                .format(quality, allowed_values)
            )

        self._quality = quality

    @property
    def score(self):
        """Gets the score of this GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThresholdIndoorAirQuality.

        Alerting threshold as indoor air quality score.

        :return: The score of this GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThresholdIndoorAirQuality.
        :rtype: int
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThresholdIndoorAirQuality.

        Alerting threshold as indoor air quality score.

        :param score: The score of this GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThresholdIndoorAirQuality.
        :type score: int
        """

        self._score = score
