# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_network_group_policy_request_bonjour_forwarding_rules_inner import CreateNetworkGroupPolicyRequestBonjourForwardingRulesInner
from openapi_server import util


class CreateNetworkGroupPolicyRequestBonjourForwarding(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rules: List[CreateNetworkGroupPolicyRequestBonjourForwardingRulesInner]=None, settings: str=None):
        """CreateNetworkGroupPolicyRequestBonjourForwarding - a model defined in OpenAPI

        :param rules: The rules of this CreateNetworkGroupPolicyRequestBonjourForwarding.
        :param settings: The settings of this CreateNetworkGroupPolicyRequestBonjourForwarding.
        """
        self.openapi_types = {
            'rules': List[CreateNetworkGroupPolicyRequestBonjourForwardingRulesInner],
            'settings': str
        }

        self.attribute_map = {
            'rules': 'rules',
            'settings': 'settings'
        }

        self._rules = rules
        self._settings = settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateNetworkGroupPolicyRequestBonjourForwarding':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The createNetworkGroupPolicy_request_bonjourForwarding of this CreateNetworkGroupPolicyRequestBonjourForwarding.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rules(self):
        """Gets the rules of this CreateNetworkGroupPolicyRequestBonjourForwarding.

        A list of the Bonjour forwarding rules for your group policy. If 'settings' is set to 'custom', at least one rule must be specified.

        :return: The rules of this CreateNetworkGroupPolicyRequestBonjourForwarding.
        :rtype: List[CreateNetworkGroupPolicyRequestBonjourForwardingRulesInner]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this CreateNetworkGroupPolicyRequestBonjourForwarding.

        A list of the Bonjour forwarding rules for your group policy. If 'settings' is set to 'custom', at least one rule must be specified.

        :param rules: The rules of this CreateNetworkGroupPolicyRequestBonjourForwarding.
        :type rules: List[CreateNetworkGroupPolicyRequestBonjourForwardingRulesInner]
        """

        self._rules = rules

    @property
    def settings(self):
        """Gets the settings of this CreateNetworkGroupPolicyRequestBonjourForwarding.

        How Bonjour rules are applied. Can be 'network default', 'ignore' or 'custom'.

        :return: The settings of this CreateNetworkGroupPolicyRequestBonjourForwarding.
        :rtype: str
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this CreateNetworkGroupPolicyRequestBonjourForwarding.

        How Bonjour rules are applied. Can be 'network default', 'ignore' or 'custom'.

        :param settings: The settings of this CreateNetworkGroupPolicyRequestBonjourForwarding.
        :type settings: str
        """
        allowed_values = ["custom", "ignore", "network default"]  # noqa: E501
        if settings not in allowed_values:
            raise ValueError(
                "Invalid value for `settings` ({0}), must be one of {1}"
                .format(settings, allowed_values)
            )

        self._settings = settings
