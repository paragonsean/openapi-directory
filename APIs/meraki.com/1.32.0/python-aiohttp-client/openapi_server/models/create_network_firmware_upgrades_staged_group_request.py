# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_network_firmware_upgrades_staged_group_request_assigned_devices import CreateNetworkFirmwareUpgradesStagedGroupRequestAssignedDevices
from openapi_server import util


class CreateNetworkFirmwareUpgradesStagedGroupRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assigned_devices: CreateNetworkFirmwareUpgradesStagedGroupRequestAssignedDevices=None, description: str=None, is_default: bool=None, name: str=None):
        """CreateNetworkFirmwareUpgradesStagedGroupRequest - a model defined in OpenAPI

        :param assigned_devices: The assigned_devices of this CreateNetworkFirmwareUpgradesStagedGroupRequest.
        :param description: The description of this CreateNetworkFirmwareUpgradesStagedGroupRequest.
        :param is_default: The is_default of this CreateNetworkFirmwareUpgradesStagedGroupRequest.
        :param name: The name of this CreateNetworkFirmwareUpgradesStagedGroupRequest.
        """
        self.openapi_types = {
            'assigned_devices': CreateNetworkFirmwareUpgradesStagedGroupRequestAssignedDevices,
            'description': str,
            'is_default': bool,
            'name': str
        }

        self.attribute_map = {
            'assigned_devices': 'assignedDevices',
            'description': 'description',
            'is_default': 'isDefault',
            'name': 'name'
        }

        self._assigned_devices = assigned_devices
        self._description = description
        self._is_default = is_default
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateNetworkFirmwareUpgradesStagedGroupRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The createNetworkFirmwareUpgradesStagedGroup_request of this CreateNetworkFirmwareUpgradesStagedGroupRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assigned_devices(self):
        """Gets the assigned_devices of this CreateNetworkFirmwareUpgradesStagedGroupRequest.


        :return: The assigned_devices of this CreateNetworkFirmwareUpgradesStagedGroupRequest.
        :rtype: CreateNetworkFirmwareUpgradesStagedGroupRequestAssignedDevices
        """
        return self._assigned_devices

    @assigned_devices.setter
    def assigned_devices(self, assigned_devices):
        """Sets the assigned_devices of this CreateNetworkFirmwareUpgradesStagedGroupRequest.


        :param assigned_devices: The assigned_devices of this CreateNetworkFirmwareUpgradesStagedGroupRequest.
        :type assigned_devices: CreateNetworkFirmwareUpgradesStagedGroupRequestAssignedDevices
        """

        self._assigned_devices = assigned_devices

    @property
    def description(self):
        """Gets the description of this CreateNetworkFirmwareUpgradesStagedGroupRequest.

        Description of the Staged Upgrade Group. Length must be 1 to 255 characters

        :return: The description of this CreateNetworkFirmwareUpgradesStagedGroupRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateNetworkFirmwareUpgradesStagedGroupRequest.

        Description of the Staged Upgrade Group. Length must be 1 to 255 characters

        :param description: The description of this CreateNetworkFirmwareUpgradesStagedGroupRequest.
        :type description: str
        """

        self._description = description

    @property
    def is_default(self):
        """Gets the is_default of this CreateNetworkFirmwareUpgradesStagedGroupRequest.

        Boolean indicating the default Group. Any device that does not have a group explicitly assigned will upgrade with this group

        :return: The is_default of this CreateNetworkFirmwareUpgradesStagedGroupRequest.
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this CreateNetworkFirmwareUpgradesStagedGroupRequest.

        Boolean indicating the default Group. Any device that does not have a group explicitly assigned will upgrade with this group

        :param is_default: The is_default of this CreateNetworkFirmwareUpgradesStagedGroupRequest.
        :type is_default: bool
        """
        if is_default is None:
            raise ValueError("Invalid value for `is_default`, must not be `None`")

        self._is_default = is_default

    @property
    def name(self):
        """Gets the name of this CreateNetworkFirmwareUpgradesStagedGroupRequest.

        Name of the Staged Upgrade Group. Length must be 1 to 255 characters

        :return: The name of this CreateNetworkFirmwareUpgradesStagedGroupRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateNetworkFirmwareUpgradesStagedGroupRequest.

        Name of the Staged Upgrade Group. Length must be 1 to 255 characters

        :param name: The name of this CreateNetworkFirmwareUpgradesStagedGroupRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
