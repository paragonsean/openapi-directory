# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_device_appliance_uplinks_settings_request_interfaces import UpdateDeviceApplianceUplinksSettingsRequestInterfaces
from openapi_server import util


class UpdateDeviceApplianceUplinksSettingsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, interfaces: UpdateDeviceApplianceUplinksSettingsRequestInterfaces=None):
        """UpdateDeviceApplianceUplinksSettingsRequest - a model defined in OpenAPI

        :param interfaces: The interfaces of this UpdateDeviceApplianceUplinksSettingsRequest.
        """
        self.openapi_types = {
            'interfaces': UpdateDeviceApplianceUplinksSettingsRequestInterfaces
        }

        self.attribute_map = {
            'interfaces': 'interfaces'
        }

        self._interfaces = interfaces

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateDeviceApplianceUplinksSettingsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateDeviceApplianceUplinksSettings_request of this UpdateDeviceApplianceUplinksSettingsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def interfaces(self):
        """Gets the interfaces of this UpdateDeviceApplianceUplinksSettingsRequest.


        :return: The interfaces of this UpdateDeviceApplianceUplinksSettingsRequest.
        :rtype: UpdateDeviceApplianceUplinksSettingsRequestInterfaces
        """
        return self._interfaces

    @interfaces.setter
    def interfaces(self, interfaces):
        """Sets the interfaces of this UpdateDeviceApplianceUplinksSettingsRequest.


        :param interfaces: The interfaces of this UpdateDeviceApplianceUplinksSettingsRequest.
        :type interfaces: UpdateDeviceApplianceUplinksSettingsRequestInterfaces
        """
        if interfaces is None:
            raise ValueError("Invalid value for `interfaces`, must not be `None`")

        self._interfaces = interfaces
