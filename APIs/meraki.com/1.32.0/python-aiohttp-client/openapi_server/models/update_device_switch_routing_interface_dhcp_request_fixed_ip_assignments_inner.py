# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateDeviceSwitchRoutingInterfaceDhcpRequestFixedIpAssignmentsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ip: str=None, mac: str=None, name: str=None):
        """UpdateDeviceSwitchRoutingInterfaceDhcpRequestFixedIpAssignmentsInner - a model defined in OpenAPI

        :param ip: The ip of this UpdateDeviceSwitchRoutingInterfaceDhcpRequestFixedIpAssignmentsInner.
        :param mac: The mac of this UpdateDeviceSwitchRoutingInterfaceDhcpRequestFixedIpAssignmentsInner.
        :param name: The name of this UpdateDeviceSwitchRoutingInterfaceDhcpRequestFixedIpAssignmentsInner.
        """
        self.openapi_types = {
            'ip': str,
            'mac': str,
            'name': str
        }

        self.attribute_map = {
            'ip': 'ip',
            'mac': 'mac',
            'name': 'name'
        }

        self._ip = ip
        self._mac = mac
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateDeviceSwitchRoutingInterfaceDhcpRequestFixedIpAssignmentsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateDeviceSwitchRoutingInterfaceDhcp_request_fixedIpAssignments_inner of this UpdateDeviceSwitchRoutingInterfaceDhcpRequestFixedIpAssignmentsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ip(self):
        """Gets the ip of this UpdateDeviceSwitchRoutingInterfaceDhcpRequestFixedIpAssignmentsInner.

        The IP address of the client which has fixed IP address assigned to it

        :return: The ip of this UpdateDeviceSwitchRoutingInterfaceDhcpRequestFixedIpAssignmentsInner.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this UpdateDeviceSwitchRoutingInterfaceDhcpRequestFixedIpAssignmentsInner.

        The IP address of the client which has fixed IP address assigned to it

        :param ip: The ip of this UpdateDeviceSwitchRoutingInterfaceDhcpRequestFixedIpAssignmentsInner.
        :type ip: str
        """
        if ip is None:
            raise ValueError("Invalid value for `ip`, must not be `None`")

        self._ip = ip

    @property
    def mac(self):
        """Gets the mac of this UpdateDeviceSwitchRoutingInterfaceDhcpRequestFixedIpAssignmentsInner.

        The MAC address of the client which has fixed IP address

        :return: The mac of this UpdateDeviceSwitchRoutingInterfaceDhcpRequestFixedIpAssignmentsInner.
        :rtype: str
        """
        return self._mac

    @mac.setter
    def mac(self, mac):
        """Sets the mac of this UpdateDeviceSwitchRoutingInterfaceDhcpRequestFixedIpAssignmentsInner.

        The MAC address of the client which has fixed IP address

        :param mac: The mac of this UpdateDeviceSwitchRoutingInterfaceDhcpRequestFixedIpAssignmentsInner.
        :type mac: str
        """
        if mac is None:
            raise ValueError("Invalid value for `mac`, must not be `None`")

        self._mac = mac

    @property
    def name(self):
        """Gets the name of this UpdateDeviceSwitchRoutingInterfaceDhcpRequestFixedIpAssignmentsInner.

        The name of the client which has fixed IP address

        :return: The name of this UpdateDeviceSwitchRoutingInterfaceDhcpRequestFixedIpAssignmentsInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateDeviceSwitchRoutingInterfaceDhcpRequestFixedIpAssignmentsInner.

        The name of the client which has fixed IP address

        :param name: The name of this UpdateDeviceSwitchRoutingInterfaceDhcpRequestFixedIpAssignmentsInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
