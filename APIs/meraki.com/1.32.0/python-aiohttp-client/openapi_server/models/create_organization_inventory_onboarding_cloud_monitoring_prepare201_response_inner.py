# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_organization_inventory_onboarding_cloud_monitoring_prepare201_response_inner_config_params import CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInnerConfigParams
from openapi_server import util


class CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, config_params: CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInnerConfigParams=None, device_id: str=None, message: str=None, status: str=None, udi: str=None):
        """CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner - a model defined in OpenAPI

        :param config_params: The config_params of this CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner.
        :param device_id: The device_id of this CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner.
        :param message: The message of this CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner.
        :param status: The status of this CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner.
        :param udi: The udi of this CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner.
        """
        self.openapi_types = {
            'config_params': CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInnerConfigParams,
            'device_id': str,
            'message': str,
            'status': str,
            'udi': str
        }

        self.attribute_map = {
            'config_params': 'configParams',
            'device_id': 'deviceId',
            'message': 'message',
            'status': 'status',
            'udi': 'udi'
        }

        self._config_params = config_params
        self._device_id = device_id
        self._message = message
        self._status = status
        self._udi = udi

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The createOrganizationInventoryOnboardingCloudMonitoringPrepare_201_response_inner of this CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def config_params(self):
        """Gets the config_params of this CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner.


        :return: The config_params of this CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner.
        :rtype: CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInnerConfigParams
        """
        return self._config_params

    @config_params.setter
    def config_params(self, config_params):
        """Sets the config_params of this CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner.


        :param config_params: The config_params of this CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner.
        :type config_params: CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInnerConfigParams
        """

        self._config_params = config_params

    @property
    def device_id(self):
        """Gets the device_id of this CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner.

        Import ID from the Import operation

        :return: The device_id of this CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner.
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner.

        Import ID from the Import operation

        :param device_id: The device_id of this CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner.
        :type device_id: str
        """

        self._device_id = device_id

    @property
    def message(self):
        """Gets the message of this CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner.

        Message related to whether or not the device was found and can be imported.

        :return: The message of this CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner.

        Message related to whether or not the device was found and can be imported.

        :param message: The message of this CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner.
        :type message: str
        """

        self._message = message

    @property
    def status(self):
        """Gets the status of this CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner.

        The import status of the device

        :return: The status of this CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner.

        The import status of the device

        :param status: The status of this CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner.
        :type status: str
        """

        self._status = status

    @property
    def udi(self):
        """Gets the udi of this CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner.

        Device UDI certificate

        :return: The udi of this CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner.
        :rtype: str
        """
        return self._udi

    @udi.setter
    def udi(self, udi):
        """Sets the udi of this CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner.

        Device UDI certificate

        :param udi: The udi of this CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner.
        :type udi: str
        """

        self._udi = udi
