# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateOrganizationActionBatch201ResponseActionsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, operation: str=None, resource: str=None):
        """CreateOrganizationActionBatch201ResponseActionsInner - a model defined in OpenAPI

        :param operation: The operation of this CreateOrganizationActionBatch201ResponseActionsInner.
        :param resource: The resource of this CreateOrganizationActionBatch201ResponseActionsInner.
        """
        self.openapi_types = {
            'operation': str,
            'resource': str
        }

        self.attribute_map = {
            'operation': 'operation',
            'resource': 'resource'
        }

        self._operation = operation
        self._resource = resource

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateOrganizationActionBatch201ResponseActionsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The createOrganizationActionBatch_201_response_actions_inner of this CreateOrganizationActionBatch201ResponseActionsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def operation(self):
        """Gets the operation of this CreateOrganizationActionBatch201ResponseActionsInner.

        The operation to be used by this action

        :return: The operation of this CreateOrganizationActionBatch201ResponseActionsInner.
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this CreateOrganizationActionBatch201ResponseActionsInner.

        The operation to be used by this action

        :param operation: The operation of this CreateOrganizationActionBatch201ResponseActionsInner.
        :type operation: str
        """
        if operation is None:
            raise ValueError("Invalid value for `operation`, must not be `None`")

        self._operation = operation

    @property
    def resource(self):
        """Gets the resource of this CreateOrganizationActionBatch201ResponseActionsInner.

        Unique identifier for the resource to be acted on

        :return: The resource of this CreateOrganizationActionBatch201ResponseActionsInner.
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this CreateOrganizationActionBatch201ResponseActionsInner.

        Unique identifier for the resource to be acted on

        :param resource: The resource of this CreateOrganizationActionBatch201ResponseActionsInner.
        :type resource: str
        """
        if resource is None:
            raise ValueError("Invalid value for `resource`, must not be `None`")

        self._resource = resource
