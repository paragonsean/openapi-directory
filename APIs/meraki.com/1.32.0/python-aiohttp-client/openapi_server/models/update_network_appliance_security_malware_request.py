# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_network_appliance_security_malware_request_allowed_files_inner import UpdateNetworkApplianceSecurityMalwareRequestAllowedFilesInner
from openapi_server.models.update_network_appliance_security_malware_request_allowed_urls_inner import UpdateNetworkApplianceSecurityMalwareRequestAllowedUrlsInner
from openapi_server import util


class UpdateNetworkApplianceSecurityMalwareRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_files: List[UpdateNetworkApplianceSecurityMalwareRequestAllowedFilesInner]=None, allowed_urls: List[UpdateNetworkApplianceSecurityMalwareRequestAllowedUrlsInner]=None, mode: str=None):
        """UpdateNetworkApplianceSecurityMalwareRequest - a model defined in OpenAPI

        :param allowed_files: The allowed_files of this UpdateNetworkApplianceSecurityMalwareRequest.
        :param allowed_urls: The allowed_urls of this UpdateNetworkApplianceSecurityMalwareRequest.
        :param mode: The mode of this UpdateNetworkApplianceSecurityMalwareRequest.
        """
        self.openapi_types = {
            'allowed_files': List[UpdateNetworkApplianceSecurityMalwareRequestAllowedFilesInner],
            'allowed_urls': List[UpdateNetworkApplianceSecurityMalwareRequestAllowedUrlsInner],
            'mode': str
        }

        self.attribute_map = {
            'allowed_files': 'allowedFiles',
            'allowed_urls': 'allowedUrls',
            'mode': 'mode'
        }

        self._allowed_files = allowed_files
        self._allowed_urls = allowed_urls
        self._mode = mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateNetworkApplianceSecurityMalwareRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateNetworkApplianceSecurityMalware_request of this UpdateNetworkApplianceSecurityMalwareRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_files(self):
        """Gets the allowed_files of this UpdateNetworkApplianceSecurityMalwareRequest.

        The sha256 digests of files that should be permitted by the malware detection engine. If omitted, the current config will remain unchanged. This is available only if your network supports AMP allow listing

        :return: The allowed_files of this UpdateNetworkApplianceSecurityMalwareRequest.
        :rtype: List[UpdateNetworkApplianceSecurityMalwareRequestAllowedFilesInner]
        """
        return self._allowed_files

    @allowed_files.setter
    def allowed_files(self, allowed_files):
        """Sets the allowed_files of this UpdateNetworkApplianceSecurityMalwareRequest.

        The sha256 digests of files that should be permitted by the malware detection engine. If omitted, the current config will remain unchanged. This is available only if your network supports AMP allow listing

        :param allowed_files: The allowed_files of this UpdateNetworkApplianceSecurityMalwareRequest.
        :type allowed_files: List[UpdateNetworkApplianceSecurityMalwareRequestAllowedFilesInner]
        """

        self._allowed_files = allowed_files

    @property
    def allowed_urls(self):
        """Gets the allowed_urls of this UpdateNetworkApplianceSecurityMalwareRequest.

        The urls that should be permitted by the malware detection engine. If omitted, the current config will remain unchanged. This is available only if your network supports AMP allow listing

        :return: The allowed_urls of this UpdateNetworkApplianceSecurityMalwareRequest.
        :rtype: List[UpdateNetworkApplianceSecurityMalwareRequestAllowedUrlsInner]
        """
        return self._allowed_urls

    @allowed_urls.setter
    def allowed_urls(self, allowed_urls):
        """Sets the allowed_urls of this UpdateNetworkApplianceSecurityMalwareRequest.

        The urls that should be permitted by the malware detection engine. If omitted, the current config will remain unchanged. This is available only if your network supports AMP allow listing

        :param allowed_urls: The allowed_urls of this UpdateNetworkApplianceSecurityMalwareRequest.
        :type allowed_urls: List[UpdateNetworkApplianceSecurityMalwareRequestAllowedUrlsInner]
        """

        self._allowed_urls = allowed_urls

    @property
    def mode(self):
        """Gets the mode of this UpdateNetworkApplianceSecurityMalwareRequest.

        Set mode to 'enabled' to enable malware prevention, otherwise 'disabled'

        :return: The mode of this UpdateNetworkApplianceSecurityMalwareRequest.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this UpdateNetworkApplianceSecurityMalwareRequest.

        Set mode to 'enabled' to enable malware prevention, otherwise 'disabled'

        :param mode: The mode of this UpdateNetworkApplianceSecurityMalwareRequest.
        :type mode: str
        """
        allowed_values = ["disabled", "enabled"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode
