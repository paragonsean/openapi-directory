# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VmxNetworkDevicesClaimRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, size: str=None):
        """VmxNetworkDevicesClaimRequest - a model defined in OpenAPI

        :param size: The size of this VmxNetworkDevicesClaimRequest.
        """
        self.openapi_types = {
            'size': str
        }

        self.attribute_map = {
            'size': 'size'
        }

        self._size = size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VmxNetworkDevicesClaimRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The vmxNetworkDevicesClaim_request of this VmxNetworkDevicesClaimRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def size(self):
        """Gets the size of this VmxNetworkDevicesClaimRequest.

        The size of the vMX you claim. It can be one of: small, medium, large, 100

        :return: The size of this VmxNetworkDevicesClaimRequest.
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this VmxNetworkDevicesClaimRequest.

        The size of the vMX you claim. It can be one of: small, medium, large, 100

        :param size: The size of this VmxNetworkDevicesClaimRequest.
        :type size: str
        """
        allowed_values = ["100", "large", "medium", "small"]  # noqa: E501
        if size not in allowed_values:
            raise ValueError(
                "Invalid value for `size` ({0}), must be one of {1}"
                .format(size, allowed_values)
            )

        self._size = size
