# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_network_wireless_rf_profile201_response_ap_band_settings import CreateNetworkWirelessRfProfile201ResponseApBandSettings
from openapi_server.models.create_network_wireless_rf_profile201_response_per_ssid_settings import CreateNetworkWirelessRfProfile201ResponsePerSsidSettings
from openapi_server.models.create_network_wireless_rf_profile_request_five_ghz_settings import CreateNetworkWirelessRfProfileRequestFiveGhzSettings
from openapi_server.models.create_network_wireless_rf_profile_request_transmission import CreateNetworkWirelessRfProfileRequestTransmission
from openapi_server.models.create_network_wireless_rf_profile_request_two_four_ghz_settings import CreateNetworkWirelessRfProfileRequestTwoFourGhzSettings
from openapi_server import util


class CreateNetworkWirelessRfProfile201Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ap_band_settings: CreateNetworkWirelessRfProfile201ResponseApBandSettings=None, band_selection_type: str=None, client_balancing_enabled: bool=None, five_ghz_settings: CreateNetworkWirelessRfProfileRequestFiveGhzSettings=None, id: str=None, min_bitrate_type: str=None, name: str=None, network_id: str=None, per_ssid_settings: CreateNetworkWirelessRfProfile201ResponsePerSsidSettings=None, transmission: CreateNetworkWirelessRfProfileRequestTransmission=None, two_four_ghz_settings: CreateNetworkWirelessRfProfileRequestTwoFourGhzSettings=None):
        """CreateNetworkWirelessRfProfile201Response - a model defined in OpenAPI

        :param ap_band_settings: The ap_band_settings of this CreateNetworkWirelessRfProfile201Response.
        :param band_selection_type: The band_selection_type of this CreateNetworkWirelessRfProfile201Response.
        :param client_balancing_enabled: The client_balancing_enabled of this CreateNetworkWirelessRfProfile201Response.
        :param five_ghz_settings: The five_ghz_settings of this CreateNetworkWirelessRfProfile201Response.
        :param id: The id of this CreateNetworkWirelessRfProfile201Response.
        :param min_bitrate_type: The min_bitrate_type of this CreateNetworkWirelessRfProfile201Response.
        :param name: The name of this CreateNetworkWirelessRfProfile201Response.
        :param network_id: The network_id of this CreateNetworkWirelessRfProfile201Response.
        :param per_ssid_settings: The per_ssid_settings of this CreateNetworkWirelessRfProfile201Response.
        :param transmission: The transmission of this CreateNetworkWirelessRfProfile201Response.
        :param two_four_ghz_settings: The two_four_ghz_settings of this CreateNetworkWirelessRfProfile201Response.
        """
        self.openapi_types = {
            'ap_band_settings': CreateNetworkWirelessRfProfile201ResponseApBandSettings,
            'band_selection_type': str,
            'client_balancing_enabled': bool,
            'five_ghz_settings': CreateNetworkWirelessRfProfileRequestFiveGhzSettings,
            'id': str,
            'min_bitrate_type': str,
            'name': str,
            'network_id': str,
            'per_ssid_settings': CreateNetworkWirelessRfProfile201ResponsePerSsidSettings,
            'transmission': CreateNetworkWirelessRfProfileRequestTransmission,
            'two_four_ghz_settings': CreateNetworkWirelessRfProfileRequestTwoFourGhzSettings
        }

        self.attribute_map = {
            'ap_band_settings': 'apBandSettings',
            'band_selection_type': 'bandSelectionType',
            'client_balancing_enabled': 'clientBalancingEnabled',
            'five_ghz_settings': 'fiveGhzSettings',
            'id': 'id',
            'min_bitrate_type': 'minBitrateType',
            'name': 'name',
            'network_id': 'networkId',
            'per_ssid_settings': 'perSsidSettings',
            'transmission': 'transmission',
            'two_four_ghz_settings': 'twoFourGhzSettings'
        }

        self._ap_band_settings = ap_band_settings
        self._band_selection_type = band_selection_type
        self._client_balancing_enabled = client_balancing_enabled
        self._five_ghz_settings = five_ghz_settings
        self._id = id
        self._min_bitrate_type = min_bitrate_type
        self._name = name
        self._network_id = network_id
        self._per_ssid_settings = per_ssid_settings
        self._transmission = transmission
        self._two_four_ghz_settings = two_four_ghz_settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateNetworkWirelessRfProfile201Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The createNetworkWirelessRfProfile_201_response of this CreateNetworkWirelessRfProfile201Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ap_band_settings(self):
        """Gets the ap_band_settings of this CreateNetworkWirelessRfProfile201Response.


        :return: The ap_band_settings of this CreateNetworkWirelessRfProfile201Response.
        :rtype: CreateNetworkWirelessRfProfile201ResponseApBandSettings
        """
        return self._ap_band_settings

    @ap_band_settings.setter
    def ap_band_settings(self, ap_band_settings):
        """Sets the ap_band_settings of this CreateNetworkWirelessRfProfile201Response.


        :param ap_band_settings: The ap_band_settings of this CreateNetworkWirelessRfProfile201Response.
        :type ap_band_settings: CreateNetworkWirelessRfProfile201ResponseApBandSettings
        """

        self._ap_band_settings = ap_band_settings

    @property
    def band_selection_type(self):
        """Gets the band_selection_type of this CreateNetworkWirelessRfProfile201Response.

        Band selection can be set to either 'ssid' or 'ap'. This param is required on creation.

        :return: The band_selection_type of this CreateNetworkWirelessRfProfile201Response.
        :rtype: str
        """
        return self._band_selection_type

    @band_selection_type.setter
    def band_selection_type(self, band_selection_type):
        """Sets the band_selection_type of this CreateNetworkWirelessRfProfile201Response.

        Band selection can be set to either 'ssid' or 'ap'. This param is required on creation.

        :param band_selection_type: The band_selection_type of this CreateNetworkWirelessRfProfile201Response.
        :type band_selection_type: str
        """

        self._band_selection_type = band_selection_type

    @property
    def client_balancing_enabled(self):
        """Gets the client_balancing_enabled of this CreateNetworkWirelessRfProfile201Response.

        Steers client to best available access point. Can be either true or false. Defaults to true.

        :return: The client_balancing_enabled of this CreateNetworkWirelessRfProfile201Response.
        :rtype: bool
        """
        return self._client_balancing_enabled

    @client_balancing_enabled.setter
    def client_balancing_enabled(self, client_balancing_enabled):
        """Sets the client_balancing_enabled of this CreateNetworkWirelessRfProfile201Response.

        Steers client to best available access point. Can be either true or false. Defaults to true.

        :param client_balancing_enabled: The client_balancing_enabled of this CreateNetworkWirelessRfProfile201Response.
        :type client_balancing_enabled: bool
        """

        self._client_balancing_enabled = client_balancing_enabled

    @property
    def five_ghz_settings(self):
        """Gets the five_ghz_settings of this CreateNetworkWirelessRfProfile201Response.


        :return: The five_ghz_settings of this CreateNetworkWirelessRfProfile201Response.
        :rtype: CreateNetworkWirelessRfProfileRequestFiveGhzSettings
        """
        return self._five_ghz_settings

    @five_ghz_settings.setter
    def five_ghz_settings(self, five_ghz_settings):
        """Sets the five_ghz_settings of this CreateNetworkWirelessRfProfile201Response.


        :param five_ghz_settings: The five_ghz_settings of this CreateNetworkWirelessRfProfile201Response.
        :type five_ghz_settings: CreateNetworkWirelessRfProfileRequestFiveGhzSettings
        """

        self._five_ghz_settings = five_ghz_settings

    @property
    def id(self):
        """Gets the id of this CreateNetworkWirelessRfProfile201Response.

        The name of the new profile. Must be unique.

        :return: The id of this CreateNetworkWirelessRfProfile201Response.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CreateNetworkWirelessRfProfile201Response.

        The name of the new profile. Must be unique.

        :param id: The id of this CreateNetworkWirelessRfProfile201Response.
        :type id: str
        """

        self._id = id

    @property
    def min_bitrate_type(self):
        """Gets the min_bitrate_type of this CreateNetworkWirelessRfProfile201Response.

        Minimum bitrate can be set to either 'band' or 'ssid'. Defaults to band.

        :return: The min_bitrate_type of this CreateNetworkWirelessRfProfile201Response.
        :rtype: str
        """
        return self._min_bitrate_type

    @min_bitrate_type.setter
    def min_bitrate_type(self, min_bitrate_type):
        """Sets the min_bitrate_type of this CreateNetworkWirelessRfProfile201Response.

        Minimum bitrate can be set to either 'band' or 'ssid'. Defaults to band.

        :param min_bitrate_type: The min_bitrate_type of this CreateNetworkWirelessRfProfile201Response.
        :type min_bitrate_type: str
        """

        self._min_bitrate_type = min_bitrate_type

    @property
    def name(self):
        """Gets the name of this CreateNetworkWirelessRfProfile201Response.

        The name of the new profile. Must be unique. This param is required on creation.

        :return: The name of this CreateNetworkWirelessRfProfile201Response.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateNetworkWirelessRfProfile201Response.

        The name of the new profile. Must be unique. This param is required on creation.

        :param name: The name of this CreateNetworkWirelessRfProfile201Response.
        :type name: str
        """

        self._name = name

    @property
    def network_id(self):
        """Gets the network_id of this CreateNetworkWirelessRfProfile201Response.

        The network ID of the RF Profile

        :return: The network_id of this CreateNetworkWirelessRfProfile201Response.
        :rtype: str
        """
        return self._network_id

    @network_id.setter
    def network_id(self, network_id):
        """Sets the network_id of this CreateNetworkWirelessRfProfile201Response.

        The network ID of the RF Profile

        :param network_id: The network_id of this CreateNetworkWirelessRfProfile201Response.
        :type network_id: str
        """

        self._network_id = network_id

    @property
    def per_ssid_settings(self):
        """Gets the per_ssid_settings of this CreateNetworkWirelessRfProfile201Response.


        :return: The per_ssid_settings of this CreateNetworkWirelessRfProfile201Response.
        :rtype: CreateNetworkWirelessRfProfile201ResponsePerSsidSettings
        """
        return self._per_ssid_settings

    @per_ssid_settings.setter
    def per_ssid_settings(self, per_ssid_settings):
        """Sets the per_ssid_settings of this CreateNetworkWirelessRfProfile201Response.


        :param per_ssid_settings: The per_ssid_settings of this CreateNetworkWirelessRfProfile201Response.
        :type per_ssid_settings: CreateNetworkWirelessRfProfile201ResponsePerSsidSettings
        """

        self._per_ssid_settings = per_ssid_settings

    @property
    def transmission(self):
        """Gets the transmission of this CreateNetworkWirelessRfProfile201Response.


        :return: The transmission of this CreateNetworkWirelessRfProfile201Response.
        :rtype: CreateNetworkWirelessRfProfileRequestTransmission
        """
        return self._transmission

    @transmission.setter
    def transmission(self, transmission):
        """Sets the transmission of this CreateNetworkWirelessRfProfile201Response.


        :param transmission: The transmission of this CreateNetworkWirelessRfProfile201Response.
        :type transmission: CreateNetworkWirelessRfProfileRequestTransmission
        """

        self._transmission = transmission

    @property
    def two_four_ghz_settings(self):
        """Gets the two_four_ghz_settings of this CreateNetworkWirelessRfProfile201Response.


        :return: The two_four_ghz_settings of this CreateNetworkWirelessRfProfile201Response.
        :rtype: CreateNetworkWirelessRfProfileRequestTwoFourGhzSettings
        """
        return self._two_four_ghz_settings

    @two_four_ghz_settings.setter
    def two_four_ghz_settings(self, two_four_ghz_settings):
        """Sets the two_four_ghz_settings of this CreateNetworkWirelessRfProfile201Response.


        :param two_four_ghz_settings: The two_four_ghz_settings of this CreateNetworkWirelessRfProfile201Response.
        :type two_four_ghz_settings: CreateNetworkWirelessRfProfileRequestTwoFourGhzSettings
        """

        self._two_four_ghz_settings = two_four_ghz_settings
