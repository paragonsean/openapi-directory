# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateDeviceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, floor_plan_id: str=None, lat: float=None, lng: float=None, move_map_marker: bool=None, name: str=None, notes: str=None, switch_profile_id: str=None, tags: List[str]=None):
        """UpdateDeviceRequest - a model defined in OpenAPI

        :param address: The address of this UpdateDeviceRequest.
        :param floor_plan_id: The floor_plan_id of this UpdateDeviceRequest.
        :param lat: The lat of this UpdateDeviceRequest.
        :param lng: The lng of this UpdateDeviceRequest.
        :param move_map_marker: The move_map_marker of this UpdateDeviceRequest.
        :param name: The name of this UpdateDeviceRequest.
        :param notes: The notes of this UpdateDeviceRequest.
        :param switch_profile_id: The switch_profile_id of this UpdateDeviceRequest.
        :param tags: The tags of this UpdateDeviceRequest.
        """
        self.openapi_types = {
            'address': str,
            'floor_plan_id': str,
            'lat': float,
            'lng': float,
            'move_map_marker': bool,
            'name': str,
            'notes': str,
            'switch_profile_id': str,
            'tags': List[str]
        }

        self.attribute_map = {
            'address': 'address',
            'floor_plan_id': 'floorPlanId',
            'lat': 'lat',
            'lng': 'lng',
            'move_map_marker': 'moveMapMarker',
            'name': 'name',
            'notes': 'notes',
            'switch_profile_id': 'switchProfileId',
            'tags': 'tags'
        }

        self._address = address
        self._floor_plan_id = floor_plan_id
        self._lat = lat
        self._lng = lng
        self._move_map_marker = move_map_marker
        self._name = name
        self._notes = notes
        self._switch_profile_id = switch_profile_id
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateDeviceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateDevice_request of this UpdateDeviceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this UpdateDeviceRequest.

        The address of a device

        :return: The address of this UpdateDeviceRequest.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this UpdateDeviceRequest.

        The address of a device

        :param address: The address of this UpdateDeviceRequest.
        :type address: str
        """

        self._address = address

    @property
    def floor_plan_id(self):
        """Gets the floor_plan_id of this UpdateDeviceRequest.

        The floor plan to associate to this device. null disassociates the device from the floorplan.

        :return: The floor_plan_id of this UpdateDeviceRequest.
        :rtype: str
        """
        return self._floor_plan_id

    @floor_plan_id.setter
    def floor_plan_id(self, floor_plan_id):
        """Sets the floor_plan_id of this UpdateDeviceRequest.

        The floor plan to associate to this device. null disassociates the device from the floorplan.

        :param floor_plan_id: The floor_plan_id of this UpdateDeviceRequest.
        :type floor_plan_id: str
        """

        self._floor_plan_id = floor_plan_id

    @property
    def lat(self):
        """Gets the lat of this UpdateDeviceRequest.

        The latitude of a device

        :return: The lat of this UpdateDeviceRequest.
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this UpdateDeviceRequest.

        The latitude of a device

        :param lat: The lat of this UpdateDeviceRequest.
        :type lat: float
        """

        self._lat = lat

    @property
    def lng(self):
        """Gets the lng of this UpdateDeviceRequest.

        The longitude of a device

        :return: The lng of this UpdateDeviceRequest.
        :rtype: float
        """
        return self._lng

    @lng.setter
    def lng(self, lng):
        """Sets the lng of this UpdateDeviceRequest.

        The longitude of a device

        :param lng: The lng of this UpdateDeviceRequest.
        :type lng: float
        """

        self._lng = lng

    @property
    def move_map_marker(self):
        """Gets the move_map_marker of this UpdateDeviceRequest.

        Whether or not to set the latitude and longitude of a device based on the new address. Only applies when lat and lng are not specified.

        :return: The move_map_marker of this UpdateDeviceRequest.
        :rtype: bool
        """
        return self._move_map_marker

    @move_map_marker.setter
    def move_map_marker(self, move_map_marker):
        """Sets the move_map_marker of this UpdateDeviceRequest.

        Whether or not to set the latitude and longitude of a device based on the new address. Only applies when lat and lng are not specified.

        :param move_map_marker: The move_map_marker of this UpdateDeviceRequest.
        :type move_map_marker: bool
        """

        self._move_map_marker = move_map_marker

    @property
    def name(self):
        """Gets the name of this UpdateDeviceRequest.

        The name of a device

        :return: The name of this UpdateDeviceRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateDeviceRequest.

        The name of a device

        :param name: The name of this UpdateDeviceRequest.
        :type name: str
        """

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this UpdateDeviceRequest.

        The notes for the device. String. Limited to 255 characters.

        :return: The notes of this UpdateDeviceRequest.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this UpdateDeviceRequest.

        The notes for the device. String. Limited to 255 characters.

        :param notes: The notes of this UpdateDeviceRequest.
        :type notes: str
        """

        self._notes = notes

    @property
    def switch_profile_id(self):
        """Gets the switch_profile_id of this UpdateDeviceRequest.

        The ID of a switch profile to bind to the device (for available switch profiles, see the 'Switch Profiles' endpoint). Use null to unbind the switch device from the current profile. For a device to be bindable to a switch profile, it must (1) be a switch, and (2) belong to a network that is bound to a configuration template.

        :return: The switch_profile_id of this UpdateDeviceRequest.
        :rtype: str
        """
        return self._switch_profile_id

    @switch_profile_id.setter
    def switch_profile_id(self, switch_profile_id):
        """Sets the switch_profile_id of this UpdateDeviceRequest.

        The ID of a switch profile to bind to the device (for available switch profiles, see the 'Switch Profiles' endpoint). Use null to unbind the switch device from the current profile. For a device to be bindable to a switch profile, it must (1) be a switch, and (2) belong to a network that is bound to a configuration template.

        :param switch_profile_id: The switch_profile_id of this UpdateDeviceRequest.
        :type switch_profile_id: str
        """

        self._switch_profile_id = switch_profile_id

    @property
    def tags(self):
        """Gets the tags of this UpdateDeviceRequest.

        The list of tags of a device

        :return: The tags of this UpdateDeviceRequest.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this UpdateDeviceRequest.

        The list of tags of a device

        :param tags: The tags of this UpdateDeviceRequest.
        :type tags: List[str]
        """

        self._tags = tags
