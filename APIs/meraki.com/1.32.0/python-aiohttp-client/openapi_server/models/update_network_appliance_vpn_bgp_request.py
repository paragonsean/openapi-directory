# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_network_appliance_vpn_bgp_request_neighbors_inner import UpdateNetworkApplianceVpnBgpRequestNeighborsInner
from openapi_server import util


class UpdateNetworkApplianceVpnBgpRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, as_number: int=None, enabled: bool=None, ibgp_hold_timer: int=None, neighbors: List[UpdateNetworkApplianceVpnBgpRequestNeighborsInner]=None):
        """UpdateNetworkApplianceVpnBgpRequest - a model defined in OpenAPI

        :param as_number: The as_number of this UpdateNetworkApplianceVpnBgpRequest.
        :param enabled: The enabled of this UpdateNetworkApplianceVpnBgpRequest.
        :param ibgp_hold_timer: The ibgp_hold_timer of this UpdateNetworkApplianceVpnBgpRequest.
        :param neighbors: The neighbors of this UpdateNetworkApplianceVpnBgpRequest.
        """
        self.openapi_types = {
            'as_number': int,
            'enabled': bool,
            'ibgp_hold_timer': int,
            'neighbors': List[UpdateNetworkApplianceVpnBgpRequestNeighborsInner]
        }

        self.attribute_map = {
            'as_number': 'asNumber',
            'enabled': 'enabled',
            'ibgp_hold_timer': 'ibgpHoldTimer',
            'neighbors': 'neighbors'
        }

        self._as_number = as_number
        self._enabled = enabled
        self._ibgp_hold_timer = ibgp_hold_timer
        self._neighbors = neighbors

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateNetworkApplianceVpnBgpRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateNetworkApplianceVpnBgp_request of this UpdateNetworkApplianceVpnBgpRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def as_number(self):
        """Gets the as_number of this UpdateNetworkApplianceVpnBgpRequest.

        An Autonomous System Number (ASN) is required if you are to run BGP and peer with another BGP Speaker outside of the Auto VPN domain. This ASN will be applied to the entire Auto VPN domain. The entire 4-byte ASN range is supported. So, the ASN must be an integer between 1 and 4294967295. When absent, this field is not updated. If no value exists then it defaults to 64512.

        :return: The as_number of this UpdateNetworkApplianceVpnBgpRequest.
        :rtype: int
        """
        return self._as_number

    @as_number.setter
    def as_number(self, as_number):
        """Sets the as_number of this UpdateNetworkApplianceVpnBgpRequest.

        An Autonomous System Number (ASN) is required if you are to run BGP and peer with another BGP Speaker outside of the Auto VPN domain. This ASN will be applied to the entire Auto VPN domain. The entire 4-byte ASN range is supported. So, the ASN must be an integer between 1 and 4294967295. When absent, this field is not updated. If no value exists then it defaults to 64512.

        :param as_number: The as_number of this UpdateNetworkApplianceVpnBgpRequest.
        :type as_number: int
        """

        self._as_number = as_number

    @property
    def enabled(self):
        """Gets the enabled of this UpdateNetworkApplianceVpnBgpRequest.

        Boolean value to enable or disable the BGP configuration. When BGP is enabled, the asNumber (ASN) will be autopopulated with the preconfigured ASN at other Hubs or a default value if there is no ASN configured.

        :return: The enabled of this UpdateNetworkApplianceVpnBgpRequest.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this UpdateNetworkApplianceVpnBgpRequest.

        Boolean value to enable or disable the BGP configuration. When BGP is enabled, the asNumber (ASN) will be autopopulated with the preconfigured ASN at other Hubs or a default value if there is no ASN configured.

        :param enabled: The enabled of this UpdateNetworkApplianceVpnBgpRequest.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def ibgp_hold_timer(self):
        """Gets the ibgp_hold_timer of this UpdateNetworkApplianceVpnBgpRequest.

        The IBGP holdtimer in seconds. The IBGP holdtimer must be an integer between 12 and 240. When absent, this field is not updated. If no value exists then it defaults to 240.

        :return: The ibgp_hold_timer of this UpdateNetworkApplianceVpnBgpRequest.
        :rtype: int
        """
        return self._ibgp_hold_timer

    @ibgp_hold_timer.setter
    def ibgp_hold_timer(self, ibgp_hold_timer):
        """Sets the ibgp_hold_timer of this UpdateNetworkApplianceVpnBgpRequest.

        The IBGP holdtimer in seconds. The IBGP holdtimer must be an integer between 12 and 240. When absent, this field is not updated. If no value exists then it defaults to 240.

        :param ibgp_hold_timer: The ibgp_hold_timer of this UpdateNetworkApplianceVpnBgpRequest.
        :type ibgp_hold_timer: int
        """

        self._ibgp_hold_timer = ibgp_hold_timer

    @property
    def neighbors(self):
        """Gets the neighbors of this UpdateNetworkApplianceVpnBgpRequest.

        List of BGP neighbors. This list replaces the existing set of neighbors. When absent, this field is not updated.

        :return: The neighbors of this UpdateNetworkApplianceVpnBgpRequest.
        :rtype: List[UpdateNetworkApplianceVpnBgpRequestNeighborsInner]
        """
        return self._neighbors

    @neighbors.setter
    def neighbors(self, neighbors):
        """Sets the neighbors of this UpdateNetworkApplianceVpnBgpRequest.

        List of BGP neighbors. This list replaces the existing set of neighbors. When absent, this field is not updated.

        :param neighbors: The neighbors of this UpdateNetworkApplianceVpnBgpRequest.
        :type neighbors: List[UpdateNetworkApplianceVpnBgpRequestNeighborsInner]
        """

        self._neighbors = neighbors
