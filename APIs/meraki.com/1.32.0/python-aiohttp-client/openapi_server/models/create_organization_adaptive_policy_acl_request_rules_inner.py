# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateOrganizationAdaptivePolicyAclRequestRulesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dst_port: str=None, policy: str=None, protocol: str=None, src_port: str=None):
        """CreateOrganizationAdaptivePolicyAclRequestRulesInner - a model defined in OpenAPI

        :param dst_port: The dst_port of this CreateOrganizationAdaptivePolicyAclRequestRulesInner.
        :param policy: The policy of this CreateOrganizationAdaptivePolicyAclRequestRulesInner.
        :param protocol: The protocol of this CreateOrganizationAdaptivePolicyAclRequestRulesInner.
        :param src_port: The src_port of this CreateOrganizationAdaptivePolicyAclRequestRulesInner.
        """
        self.openapi_types = {
            'dst_port': str,
            'policy': str,
            'protocol': str,
            'src_port': str
        }

        self.attribute_map = {
            'dst_port': 'dstPort',
            'policy': 'policy',
            'protocol': 'protocol',
            'src_port': 'srcPort'
        }

        self._dst_port = dst_port
        self._policy = policy
        self._protocol = protocol
        self._src_port = src_port

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateOrganizationAdaptivePolicyAclRequestRulesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The createOrganizationAdaptivePolicyAcl_request_rules_inner of this CreateOrganizationAdaptivePolicyAclRequestRulesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dst_port(self):
        """Gets the dst_port of this CreateOrganizationAdaptivePolicyAclRequestRulesInner.

        Destination port. Must be in the format of single port: '1', port list: '1,2' or port range: '1-10', and in the range of 1-65535, or 'any'. Default is 'any'.

        :return: The dst_port of this CreateOrganizationAdaptivePolicyAclRequestRulesInner.
        :rtype: str
        """
        return self._dst_port

    @dst_port.setter
    def dst_port(self, dst_port):
        """Sets the dst_port of this CreateOrganizationAdaptivePolicyAclRequestRulesInner.

        Destination port. Must be in the format of single port: '1', port list: '1,2' or port range: '1-10', and in the range of 1-65535, or 'any'. Default is 'any'.

        :param dst_port: The dst_port of this CreateOrganizationAdaptivePolicyAclRequestRulesInner.
        :type dst_port: str
        """

        self._dst_port = dst_port

    @property
    def policy(self):
        """Gets the policy of this CreateOrganizationAdaptivePolicyAclRequestRulesInner.

        'allow' or 'deny' traffic specified by this rule.

        :return: The policy of this CreateOrganizationAdaptivePolicyAclRequestRulesInner.
        :rtype: str
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this CreateOrganizationAdaptivePolicyAclRequestRulesInner.

        'allow' or 'deny' traffic specified by this rule.

        :param policy: The policy of this CreateOrganizationAdaptivePolicyAclRequestRulesInner.
        :type policy: str
        """
        allowed_values = ["allow", "deny"]  # noqa: E501
        if policy not in allowed_values:
            raise ValueError(
                "Invalid value for `policy` ({0}), must be one of {1}"
                .format(policy, allowed_values)
            )

        self._policy = policy

    @property
    def protocol(self):
        """Gets the protocol of this CreateOrganizationAdaptivePolicyAclRequestRulesInner.

        The type of protocol (must be 'tcp', 'udp', 'icmp' or 'any').

        :return: The protocol of this CreateOrganizationAdaptivePolicyAclRequestRulesInner.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this CreateOrganizationAdaptivePolicyAclRequestRulesInner.

        The type of protocol (must be 'tcp', 'udp', 'icmp' or 'any').

        :param protocol: The protocol of this CreateOrganizationAdaptivePolicyAclRequestRulesInner.
        :type protocol: str
        """
        allowed_values = ["any", "icmp", "tcp", "udp"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def src_port(self):
        """Gets the src_port of this CreateOrganizationAdaptivePolicyAclRequestRulesInner.

        Source port. Must be in the format of single port: '1', port list: '1,2' or port range: '1-10', and in the range of 1-65535, or 'any'. Default is 'any'.

        :return: The src_port of this CreateOrganizationAdaptivePolicyAclRequestRulesInner.
        :rtype: str
        """
        return self._src_port

    @src_port.setter
    def src_port(self, src_port):
        """Sets the src_port of this CreateOrganizationAdaptivePolicyAclRequestRulesInner.

        Source port. Must be in the format of single port: '1', port list: '1,2' or port range: '1-10', and in the range of 1-65535, or 'any'. Default is 'any'.

        :param src_port: The src_port of this CreateOrganizationAdaptivePolicyAclRequestRulesInner.
        :type src_port: str
        """

        self._src_port = src_port
