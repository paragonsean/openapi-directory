# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetOrganizations200ResponseInnerLicensing(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, model: str=None):
        """GetOrganizations200ResponseInnerLicensing - a model defined in OpenAPI

        :param model: The model of this GetOrganizations200ResponseInnerLicensing.
        """
        self.openapi_types = {
            'model': str
        }

        self.attribute_map = {
            'model': 'model'
        }

        self._model = model

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetOrganizations200ResponseInnerLicensing':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getOrganizations_200_response_inner_licensing of this GetOrganizations200ResponseInnerLicensing.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def model(self):
        """Gets the model of this GetOrganizations200ResponseInnerLicensing.

        Organization licensing model. Can be 'co-term', 'per-device', or 'subscription'.

        :return: The model of this GetOrganizations200ResponseInnerLicensing.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this GetOrganizations200ResponseInnerLicensing.

        Organization licensing model. Can be 'co-term', 'per-device', or 'subscription'.

        :param model: The model of this GetOrganizations200ResponseInnerLicensing.
        :type model: str
        """
        allowed_values = ["co-term", "per-device", "subscription"]  # noqa: E501
        if model not in allowed_values:
            raise ValueError(
                "Invalid value for `model` ({0}), must be one of {1}"
                .format(model, allowed_values)
            )

        self._model = model
