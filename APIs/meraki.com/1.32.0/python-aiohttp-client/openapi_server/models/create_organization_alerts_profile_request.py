# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_organization_alerts_profile_request_alert_condition import CreateOrganizationAlertsProfileRequestAlertCondition
from openapi_server.models.create_organization_alerts_profile_request_recipients import CreateOrganizationAlertsProfileRequestRecipients
from openapi_server import util


class CreateOrganizationAlertsProfileRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alert_condition: CreateOrganizationAlertsProfileRequestAlertCondition=None, description: str=None, network_tags: List[str]=None, recipients: CreateOrganizationAlertsProfileRequestRecipients=None, type: str=None):
        """CreateOrganizationAlertsProfileRequest - a model defined in OpenAPI

        :param alert_condition: The alert_condition of this CreateOrganizationAlertsProfileRequest.
        :param description: The description of this CreateOrganizationAlertsProfileRequest.
        :param network_tags: The network_tags of this CreateOrganizationAlertsProfileRequest.
        :param recipients: The recipients of this CreateOrganizationAlertsProfileRequest.
        :param type: The type of this CreateOrganizationAlertsProfileRequest.
        """
        self.openapi_types = {
            'alert_condition': CreateOrganizationAlertsProfileRequestAlertCondition,
            'description': str,
            'network_tags': List[str],
            'recipients': CreateOrganizationAlertsProfileRequestRecipients,
            'type': str
        }

        self.attribute_map = {
            'alert_condition': 'alertCondition',
            'description': 'description',
            'network_tags': 'networkTags',
            'recipients': 'recipients',
            'type': 'type'
        }

        self._alert_condition = alert_condition
        self._description = description
        self._network_tags = network_tags
        self._recipients = recipients
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateOrganizationAlertsProfileRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The createOrganizationAlertsProfile_request of this CreateOrganizationAlertsProfileRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alert_condition(self):
        """Gets the alert_condition of this CreateOrganizationAlertsProfileRequest.


        :return: The alert_condition of this CreateOrganizationAlertsProfileRequest.
        :rtype: CreateOrganizationAlertsProfileRequestAlertCondition
        """
        return self._alert_condition

    @alert_condition.setter
    def alert_condition(self, alert_condition):
        """Sets the alert_condition of this CreateOrganizationAlertsProfileRequest.


        :param alert_condition: The alert_condition of this CreateOrganizationAlertsProfileRequest.
        :type alert_condition: CreateOrganizationAlertsProfileRequestAlertCondition
        """
        if alert_condition is None:
            raise ValueError("Invalid value for `alert_condition`, must not be `None`")

        self._alert_condition = alert_condition

    @property
    def description(self):
        """Gets the description of this CreateOrganizationAlertsProfileRequest.

        User supplied description of the alert

        :return: The description of this CreateOrganizationAlertsProfileRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateOrganizationAlertsProfileRequest.

        User supplied description of the alert

        :param description: The description of this CreateOrganizationAlertsProfileRequest.
        :type description: str
        """

        self._description = description

    @property
    def network_tags(self):
        """Gets the network_tags of this CreateOrganizationAlertsProfileRequest.

        Networks with these tags will be monitored for the alert

        :return: The network_tags of this CreateOrganizationAlertsProfileRequest.
        :rtype: List[str]
        """
        return self._network_tags

    @network_tags.setter
    def network_tags(self, network_tags):
        """Sets the network_tags of this CreateOrganizationAlertsProfileRequest.

        Networks with these tags will be monitored for the alert

        :param network_tags: The network_tags of this CreateOrganizationAlertsProfileRequest.
        :type network_tags: List[str]
        """
        if network_tags is None:
            raise ValueError("Invalid value for `network_tags`, must not be `None`")

        self._network_tags = network_tags

    @property
    def recipients(self):
        """Gets the recipients of this CreateOrganizationAlertsProfileRequest.


        :return: The recipients of this CreateOrganizationAlertsProfileRequest.
        :rtype: CreateOrganizationAlertsProfileRequestRecipients
        """
        return self._recipients

    @recipients.setter
    def recipients(self, recipients):
        """Sets the recipients of this CreateOrganizationAlertsProfileRequest.


        :param recipients: The recipients of this CreateOrganizationAlertsProfileRequest.
        :type recipients: CreateOrganizationAlertsProfileRequestRecipients
        """
        if recipients is None:
            raise ValueError("Invalid value for `recipients`, must not be `None`")

        self._recipients = recipients

    @property
    def type(self):
        """Gets the type of this CreateOrganizationAlertsProfileRequest.

        The alert type

        :return: The type of this CreateOrganizationAlertsProfileRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateOrganizationAlertsProfileRequest.

        The alert type

        :param type: The type of this CreateOrganizationAlertsProfileRequest.
        :type type: str
        """
        allowed_values = ["appOutage", "voipJitter", "voipMos", "voipPacketLoss", "wanLatency", "wanPacketLoss", "wanStatus", "wanUtilization"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
