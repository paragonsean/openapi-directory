# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_network200_response import GetNetwork200Response
from openapi_server import util


class SplitNetwork200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resulting_networks: List[GetNetwork200Response]=None):
        """SplitNetwork200Response - a model defined in OpenAPI

        :param resulting_networks: The resulting_networks of this SplitNetwork200Response.
        """
        self.openapi_types = {
            'resulting_networks': List[GetNetwork200Response]
        }

        self.attribute_map = {
            'resulting_networks': 'resultingNetworks'
        }

        self._resulting_networks = resulting_networks

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SplitNetwork200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The splitNetwork_200_response of this SplitNetwork200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resulting_networks(self):
        """Gets the resulting_networks of this SplitNetwork200Response.

        Networks after the split

        :return: The resulting_networks of this SplitNetwork200Response.
        :rtype: List[GetNetwork200Response]
        """
        return self._resulting_networks

    @resulting_networks.setter
    def resulting_networks(self, resulting_networks):
        """Sets the resulting_networks of this SplitNetwork200Response.

        Networks after the split

        :param resulting_networks: The resulting_networks of this SplitNetwork200Response.
        :type resulting_networks: List[GetNetwork200Response]
        """

        self._resulting_networks = resulting_networks
