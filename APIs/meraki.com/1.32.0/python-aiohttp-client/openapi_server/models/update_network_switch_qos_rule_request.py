# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateNetworkSwitchQosRuleRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dscp: int=None, dst_port: int=None, dst_port_range: str=None, protocol: str=None, src_port: int=None, src_port_range: str=None, vlan: int=None):
        """UpdateNetworkSwitchQosRuleRequest - a model defined in OpenAPI

        :param dscp: The dscp of this UpdateNetworkSwitchQosRuleRequest.
        :param dst_port: The dst_port of this UpdateNetworkSwitchQosRuleRequest.
        :param dst_port_range: The dst_port_range of this UpdateNetworkSwitchQosRuleRequest.
        :param protocol: The protocol of this UpdateNetworkSwitchQosRuleRequest.
        :param src_port: The src_port of this UpdateNetworkSwitchQosRuleRequest.
        :param src_port_range: The src_port_range of this UpdateNetworkSwitchQosRuleRequest.
        :param vlan: The vlan of this UpdateNetworkSwitchQosRuleRequest.
        """
        self.openapi_types = {
            'dscp': int,
            'dst_port': int,
            'dst_port_range': str,
            'protocol': str,
            'src_port': int,
            'src_port_range': str,
            'vlan': int
        }

        self.attribute_map = {
            'dscp': 'dscp',
            'dst_port': 'dstPort',
            'dst_port_range': 'dstPortRange',
            'protocol': 'protocol',
            'src_port': 'srcPort',
            'src_port_range': 'srcPortRange',
            'vlan': 'vlan'
        }

        self._dscp = dscp
        self._dst_port = dst_port
        self._dst_port_range = dst_port_range
        self._protocol = protocol
        self._src_port = src_port
        self._src_port_range = src_port_range
        self._vlan = vlan

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateNetworkSwitchQosRuleRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateNetworkSwitchQosRule_request of this UpdateNetworkSwitchQosRuleRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dscp(self):
        """Gets the dscp of this UpdateNetworkSwitchQosRuleRequest.

        DSCP tag that should be assigned to incoming packet. Set this to -1 to trust incoming DSCP. Default value is 0.

        :return: The dscp of this UpdateNetworkSwitchQosRuleRequest.
        :rtype: int
        """
        return self._dscp

    @dscp.setter
    def dscp(self, dscp):
        """Sets the dscp of this UpdateNetworkSwitchQosRuleRequest.

        DSCP tag that should be assigned to incoming packet. Set this to -1 to trust incoming DSCP. Default value is 0.

        :param dscp: The dscp of this UpdateNetworkSwitchQosRuleRequest.
        :type dscp: int
        """

        self._dscp = dscp

    @property
    def dst_port(self):
        """Gets the dst_port of this UpdateNetworkSwitchQosRuleRequest.

        The destination port of the incoming packet. Applicable only if protocol is TCP or UDP.

        :return: The dst_port of this UpdateNetworkSwitchQosRuleRequest.
        :rtype: int
        """
        return self._dst_port

    @dst_port.setter
    def dst_port(self, dst_port):
        """Sets the dst_port of this UpdateNetworkSwitchQosRuleRequest.

        The destination port of the incoming packet. Applicable only if protocol is TCP or UDP.

        :param dst_port: The dst_port of this UpdateNetworkSwitchQosRuleRequest.
        :type dst_port: int
        """

        self._dst_port = dst_port

    @property
    def dst_port_range(self):
        """Gets the dst_port_range of this UpdateNetworkSwitchQosRuleRequest.

        The destination port range of the incoming packet. Applicable only if protocol is set to TCP or UDP. Example: 70-80

        :return: The dst_port_range of this UpdateNetworkSwitchQosRuleRequest.
        :rtype: str
        """
        return self._dst_port_range

    @dst_port_range.setter
    def dst_port_range(self, dst_port_range):
        """Sets the dst_port_range of this UpdateNetworkSwitchQosRuleRequest.

        The destination port range of the incoming packet. Applicable only if protocol is set to TCP or UDP. Example: 70-80

        :param dst_port_range: The dst_port_range of this UpdateNetworkSwitchQosRuleRequest.
        :type dst_port_range: str
        """

        self._dst_port_range = dst_port_range

    @property
    def protocol(self):
        """Gets the protocol of this UpdateNetworkSwitchQosRuleRequest.

        The protocol of the incoming packet. Can be one of \"ANY\", \"TCP\" or \"UDP\". Default value is \"ANY\".

        :return: The protocol of this UpdateNetworkSwitchQosRuleRequest.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this UpdateNetworkSwitchQosRuleRequest.

        The protocol of the incoming packet. Can be one of \"ANY\", \"TCP\" or \"UDP\". Default value is \"ANY\".

        :param protocol: The protocol of this UpdateNetworkSwitchQosRuleRequest.
        :type protocol: str
        """
        allowed_values = ["ANY", "TCP", "UDP"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def src_port(self):
        """Gets the src_port of this UpdateNetworkSwitchQosRuleRequest.

        The source port of the incoming packet. Applicable only if protocol is TCP or UDP.

        :return: The src_port of this UpdateNetworkSwitchQosRuleRequest.
        :rtype: int
        """
        return self._src_port

    @src_port.setter
    def src_port(self, src_port):
        """Sets the src_port of this UpdateNetworkSwitchQosRuleRequest.

        The source port of the incoming packet. Applicable only if protocol is TCP or UDP.

        :param src_port: The src_port of this UpdateNetworkSwitchQosRuleRequest.
        :type src_port: int
        """

        self._src_port = src_port

    @property
    def src_port_range(self):
        """Gets the src_port_range of this UpdateNetworkSwitchQosRuleRequest.

        The source port range of the incoming packet. Applicable only if protocol is set to TCP or UDP. Example: 70-80

        :return: The src_port_range of this UpdateNetworkSwitchQosRuleRequest.
        :rtype: str
        """
        return self._src_port_range

    @src_port_range.setter
    def src_port_range(self, src_port_range):
        """Sets the src_port_range of this UpdateNetworkSwitchQosRuleRequest.

        The source port range of the incoming packet. Applicable only if protocol is set to TCP or UDP. Example: 70-80

        :param src_port_range: The src_port_range of this UpdateNetworkSwitchQosRuleRequest.
        :type src_port_range: str
        """

        self._src_port_range = src_port_range

    @property
    def vlan(self):
        """Gets the vlan of this UpdateNetworkSwitchQosRuleRequest.

        The VLAN of the incoming packet. A null value will match any VLAN.

        :return: The vlan of this UpdateNetworkSwitchQosRuleRequest.
        :rtype: int
        """
        return self._vlan

    @vlan.setter
    def vlan(self, vlan):
        """Sets the vlan of this UpdateNetworkSwitchQosRuleRequest.

        The VLAN of the incoming packet. A null value will match any VLAN.

        :param vlan: The vlan of this UpdateNetworkSwitchQosRuleRequest.
        :type vlan: int
        """

        self._vlan = vlan
