# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_network_wireless_alternate_management_interface_request_access_points_inner import UpdateNetworkWirelessAlternateManagementInterfaceRequestAccessPointsInner
from openapi_server import util


class UpdateNetworkWirelessAlternateManagementInterfaceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_points: List[UpdateNetworkWirelessAlternateManagementInterfaceRequestAccessPointsInner]=None, enabled: bool=None, protocols: List[str]=None, vlan_id: int=None):
        """UpdateNetworkWirelessAlternateManagementInterfaceRequest - a model defined in OpenAPI

        :param access_points: The access_points of this UpdateNetworkWirelessAlternateManagementInterfaceRequest.
        :param enabled: The enabled of this UpdateNetworkWirelessAlternateManagementInterfaceRequest.
        :param protocols: The protocols of this UpdateNetworkWirelessAlternateManagementInterfaceRequest.
        :param vlan_id: The vlan_id of this UpdateNetworkWirelessAlternateManagementInterfaceRequest.
        """
        self.openapi_types = {
            'access_points': List[UpdateNetworkWirelessAlternateManagementInterfaceRequestAccessPointsInner],
            'enabled': bool,
            'protocols': List[str],
            'vlan_id': int
        }

        self.attribute_map = {
            'access_points': 'accessPoints',
            'enabled': 'enabled',
            'protocols': 'protocols',
            'vlan_id': 'vlanId'
        }

        self._access_points = access_points
        self._enabled = enabled
        self._protocols = protocols
        self._vlan_id = vlan_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateNetworkWirelessAlternateManagementInterfaceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateNetworkWirelessAlternateManagementInterface_request of this UpdateNetworkWirelessAlternateManagementInterfaceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_points(self):
        """Gets the access_points of this UpdateNetworkWirelessAlternateManagementInterfaceRequest.

        Array of access point serial number and IP assignment. Note: accessPoints IP assignment is not applicable for template networks, in other words, do not put 'accessPoints' in the body when updating template networks. Also, an empty 'accessPoints' array will remove all previous static IP assignments

        :return: The access_points of this UpdateNetworkWirelessAlternateManagementInterfaceRequest.
        :rtype: List[UpdateNetworkWirelessAlternateManagementInterfaceRequestAccessPointsInner]
        """
        return self._access_points

    @access_points.setter
    def access_points(self, access_points):
        """Sets the access_points of this UpdateNetworkWirelessAlternateManagementInterfaceRequest.

        Array of access point serial number and IP assignment. Note: accessPoints IP assignment is not applicable for template networks, in other words, do not put 'accessPoints' in the body when updating template networks. Also, an empty 'accessPoints' array will remove all previous static IP assignments

        :param access_points: The access_points of this UpdateNetworkWirelessAlternateManagementInterfaceRequest.
        :type access_points: List[UpdateNetworkWirelessAlternateManagementInterfaceRequestAccessPointsInner]
        """

        self._access_points = access_points

    @property
    def enabled(self):
        """Gets the enabled of this UpdateNetworkWirelessAlternateManagementInterfaceRequest.

        Boolean value to enable or disable alternate management interface

        :return: The enabled of this UpdateNetworkWirelessAlternateManagementInterfaceRequest.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this UpdateNetworkWirelessAlternateManagementInterfaceRequest.

        Boolean value to enable or disable alternate management interface

        :param enabled: The enabled of this UpdateNetworkWirelessAlternateManagementInterfaceRequest.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def protocols(self):
        """Gets the protocols of this UpdateNetworkWirelessAlternateManagementInterfaceRequest.

        Can be one or more of the following values: 'radius', 'snmp', 'syslog' or 'ldap'

        :return: The protocols of this UpdateNetworkWirelessAlternateManagementInterfaceRequest.
        :rtype: List[str]
        """
        return self._protocols

    @protocols.setter
    def protocols(self, protocols):
        """Sets the protocols of this UpdateNetworkWirelessAlternateManagementInterfaceRequest.

        Can be one or more of the following values: 'radius', 'snmp', 'syslog' or 'ldap'

        :param protocols: The protocols of this UpdateNetworkWirelessAlternateManagementInterfaceRequest.
        :type protocols: List[str]
        """
        allowed_values = ["ldap", "radius", "snmp", "syslog"]  # noqa: E501
        if not set(protocols).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `protocols` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(protocols) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._protocols = protocols

    @property
    def vlan_id(self):
        """Gets the vlan_id of this UpdateNetworkWirelessAlternateManagementInterfaceRequest.

        Alternate management interface VLAN, must be between 1 and 4094

        :return: The vlan_id of this UpdateNetworkWirelessAlternateManagementInterfaceRequest.
        :rtype: int
        """
        return self._vlan_id

    @vlan_id.setter
    def vlan_id(self, vlan_id):
        """Sets the vlan_id of this UpdateNetworkWirelessAlternateManagementInterfaceRequest.

        Alternate management interface VLAN, must be between 1 and 4094

        :param vlan_id: The vlan_id of this UpdateNetworkWirelessAlternateManagementInterfaceRequest.
        :type vlan_id: int
        """

        self._vlan_id = vlan_id
