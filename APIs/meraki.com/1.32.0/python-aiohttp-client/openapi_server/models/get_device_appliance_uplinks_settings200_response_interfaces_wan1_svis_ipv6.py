# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_device_appliance_uplinks_settings200_response_interfaces_wan1_svis_ipv4_nameservers import GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv4Nameservers
from openapi_server import util


class GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv6(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, assignment_mode: str=None, gateway: str=None, nameservers: GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv4Nameservers=None):
        """GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv6 - a model defined in OpenAPI

        :param address: The address of this GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv6.
        :param assignment_mode: The assignment_mode of this GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv6.
        :param gateway: The gateway of this GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv6.
        :param nameservers: The nameservers of this GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv6.
        """
        self.openapi_types = {
            'address': str,
            'assignment_mode': str,
            'gateway': str,
            'nameservers': GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv4Nameservers
        }

        self.attribute_map = {
            'address': 'address',
            'assignment_mode': 'assignmentMode',
            'gateway': 'gateway',
            'nameservers': 'nameservers'
        }

        self._address = address
        self._assignment_mode = assignment_mode
        self._gateway = gateway
        self._nameservers = nameservers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv6':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getDeviceApplianceUplinksSettings_200_response_interfaces_wan1_svis_ipv6 of this GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv6.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv6.

        Static address that will override the one(s) received by SLAAC.

        :return: The address of this GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv6.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv6.

        Static address that will override the one(s) received by SLAAC.

        :param address: The address of this GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv6.
        :type address: str
        """

        self._address = address

    @property
    def assignment_mode(self):
        """Gets the assignment_mode of this GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv6.

        The assignment mode for this SVI. Applies only when PPPoE is disabled.

        :return: The assignment_mode of this GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv6.
        :rtype: str
        """
        return self._assignment_mode

    @assignment_mode.setter
    def assignment_mode(self, assignment_mode):
        """Sets the assignment_mode of this GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv6.

        The assignment mode for this SVI. Applies only when PPPoE is disabled.

        :param assignment_mode: The assignment_mode of this GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv6.
        :type assignment_mode: str
        """
        allowed_values = ["dynamic", "static"]  # noqa: E501
        if assignment_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `assignment_mode` ({0}), must be one of {1}"
                .format(assignment_mode, allowed_values)
            )

        self._assignment_mode = assignment_mode

    @property
    def gateway(self):
        """Gets the gateway of this GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv6.

        Static gateway that will override the one received by autoconf.

        :return: The gateway of this GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv6.
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv6.

        Static gateway that will override the one received by autoconf.

        :param gateway: The gateway of this GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv6.
        :type gateway: str
        """

        self._gateway = gateway

    @property
    def nameservers(self):
        """Gets the nameservers of this GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv6.


        :return: The nameservers of this GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv6.
        :rtype: GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv4Nameservers
        """
        return self._nameservers

    @nameservers.setter
    def nameservers(self, nameservers):
        """Sets the nameservers of this GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv6.


        :param nameservers: The nameservers of this GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv6.
        :type nameservers: GetDeviceApplianceUplinksSettings200ResponseInterfacesWan1SvisIpv4Nameservers
        """

        self._nameservers = nameservers
