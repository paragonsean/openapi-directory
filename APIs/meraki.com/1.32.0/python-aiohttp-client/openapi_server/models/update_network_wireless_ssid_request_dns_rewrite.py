# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateNetworkWirelessSsidRequestDnsRewrite(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dns_custom_nameservers: List[str]=None, enabled: bool=None):
        """UpdateNetworkWirelessSsidRequestDnsRewrite - a model defined in OpenAPI

        :param dns_custom_nameservers: The dns_custom_nameservers of this UpdateNetworkWirelessSsidRequestDnsRewrite.
        :param enabled: The enabled of this UpdateNetworkWirelessSsidRequestDnsRewrite.
        """
        self.openapi_types = {
            'dns_custom_nameservers': List[str],
            'enabled': bool
        }

        self.attribute_map = {
            'dns_custom_nameservers': 'dnsCustomNameservers',
            'enabled': 'enabled'
        }

        self._dns_custom_nameservers = dns_custom_nameservers
        self._enabled = enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateNetworkWirelessSsidRequestDnsRewrite':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateNetworkWirelessSsid_request_dnsRewrite of this UpdateNetworkWirelessSsidRequestDnsRewrite.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dns_custom_nameservers(self):
        """Gets the dns_custom_nameservers of this UpdateNetworkWirelessSsidRequestDnsRewrite.

        User specified DNS servers (up to two servers)

        :return: The dns_custom_nameservers of this UpdateNetworkWirelessSsidRequestDnsRewrite.
        :rtype: List[str]
        """
        return self._dns_custom_nameservers

    @dns_custom_nameservers.setter
    def dns_custom_nameservers(self, dns_custom_nameservers):
        """Sets the dns_custom_nameservers of this UpdateNetworkWirelessSsidRequestDnsRewrite.

        User specified DNS servers (up to two servers)

        :param dns_custom_nameservers: The dns_custom_nameservers of this UpdateNetworkWirelessSsidRequestDnsRewrite.
        :type dns_custom_nameservers: List[str]
        """

        self._dns_custom_nameservers = dns_custom_nameservers

    @property
    def enabled(self):
        """Gets the enabled of this UpdateNetworkWirelessSsidRequestDnsRewrite.

        Boolean indicating whether or not DNS server rewrite is enabled. If disabled, upstream DNS will be used

        :return: The enabled of this UpdateNetworkWirelessSsidRequestDnsRewrite.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this UpdateNetworkWirelessSsidRequestDnsRewrite.

        Boolean indicating whether or not DNS server rewrite is enabled. If disabled, upstream DNS will be used

        :param enabled: The enabled of this UpdateNetworkWirelessSsidRequestDnsRewrite.
        :type enabled: bool
        """

        self._enabled = enabled
