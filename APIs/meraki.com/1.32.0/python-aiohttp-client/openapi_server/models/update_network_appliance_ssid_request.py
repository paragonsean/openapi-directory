# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_network_appliance_ssid_request_dhcp_enforced_deauthentication import UpdateNetworkApplianceSsidRequestDhcpEnforcedDeauthentication
from openapi_server.models.update_network_appliance_ssid_request_radius_servers_inner import UpdateNetworkApplianceSsidRequestRadiusServersInner
from openapi_server import util


class UpdateNetworkApplianceSsidRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auth_mode: str=None, default_vlan_id: int=None, dhcp_enforced_deauthentication: UpdateNetworkApplianceSsidRequestDhcpEnforcedDeauthentication=None, enabled: bool=None, encryption_mode: str=None, name: str=None, psk: str=None, radius_servers: List[UpdateNetworkApplianceSsidRequestRadiusServersInner]=None, visible: bool=None, wpa_encryption_mode: str=None):
        """UpdateNetworkApplianceSsidRequest - a model defined in OpenAPI

        :param auth_mode: The auth_mode of this UpdateNetworkApplianceSsidRequest.
        :param default_vlan_id: The default_vlan_id of this UpdateNetworkApplianceSsidRequest.
        :param dhcp_enforced_deauthentication: The dhcp_enforced_deauthentication of this UpdateNetworkApplianceSsidRequest.
        :param enabled: The enabled of this UpdateNetworkApplianceSsidRequest.
        :param encryption_mode: The encryption_mode of this UpdateNetworkApplianceSsidRequest.
        :param name: The name of this UpdateNetworkApplianceSsidRequest.
        :param psk: The psk of this UpdateNetworkApplianceSsidRequest.
        :param radius_servers: The radius_servers of this UpdateNetworkApplianceSsidRequest.
        :param visible: The visible of this UpdateNetworkApplianceSsidRequest.
        :param wpa_encryption_mode: The wpa_encryption_mode of this UpdateNetworkApplianceSsidRequest.
        """
        self.openapi_types = {
            'auth_mode': str,
            'default_vlan_id': int,
            'dhcp_enforced_deauthentication': UpdateNetworkApplianceSsidRequestDhcpEnforcedDeauthentication,
            'enabled': bool,
            'encryption_mode': str,
            'name': str,
            'psk': str,
            'radius_servers': List[UpdateNetworkApplianceSsidRequestRadiusServersInner],
            'visible': bool,
            'wpa_encryption_mode': str
        }

        self.attribute_map = {
            'auth_mode': 'authMode',
            'default_vlan_id': 'defaultVlanId',
            'dhcp_enforced_deauthentication': 'dhcpEnforcedDeauthentication',
            'enabled': 'enabled',
            'encryption_mode': 'encryptionMode',
            'name': 'name',
            'psk': 'psk',
            'radius_servers': 'radiusServers',
            'visible': 'visible',
            'wpa_encryption_mode': 'wpaEncryptionMode'
        }

        self._auth_mode = auth_mode
        self._default_vlan_id = default_vlan_id
        self._dhcp_enforced_deauthentication = dhcp_enforced_deauthentication
        self._enabled = enabled
        self._encryption_mode = encryption_mode
        self._name = name
        self._psk = psk
        self._radius_servers = radius_servers
        self._visible = visible
        self._wpa_encryption_mode = wpa_encryption_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateNetworkApplianceSsidRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateNetworkApplianceSsid_request of this UpdateNetworkApplianceSsidRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auth_mode(self):
        """Gets the auth_mode of this UpdateNetworkApplianceSsidRequest.

        The association control method for the SSID ('open', 'psk', '8021x-meraki' or '8021x-radius').

        :return: The auth_mode of this UpdateNetworkApplianceSsidRequest.
        :rtype: str
        """
        return self._auth_mode

    @auth_mode.setter
    def auth_mode(self, auth_mode):
        """Sets the auth_mode of this UpdateNetworkApplianceSsidRequest.

        The association control method for the SSID ('open', 'psk', '8021x-meraki' or '8021x-radius').

        :param auth_mode: The auth_mode of this UpdateNetworkApplianceSsidRequest.
        :type auth_mode: str
        """
        allowed_values = ["8021x-meraki", "8021x-radius", "open", "psk"]  # noqa: E501
        if auth_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `auth_mode` ({0}), must be one of {1}"
                .format(auth_mode, allowed_values)
            )

        self._auth_mode = auth_mode

    @property
    def default_vlan_id(self):
        """Gets the default_vlan_id of this UpdateNetworkApplianceSsidRequest.

        The VLAN ID of the VLAN associated to this SSID. This parameter is only valid if the network is in routed mode.

        :return: The default_vlan_id of this UpdateNetworkApplianceSsidRequest.
        :rtype: int
        """
        return self._default_vlan_id

    @default_vlan_id.setter
    def default_vlan_id(self, default_vlan_id):
        """Sets the default_vlan_id of this UpdateNetworkApplianceSsidRequest.

        The VLAN ID of the VLAN associated to this SSID. This parameter is only valid if the network is in routed mode.

        :param default_vlan_id: The default_vlan_id of this UpdateNetworkApplianceSsidRequest.
        :type default_vlan_id: int
        """

        self._default_vlan_id = default_vlan_id

    @property
    def dhcp_enforced_deauthentication(self):
        """Gets the dhcp_enforced_deauthentication of this UpdateNetworkApplianceSsidRequest.


        :return: The dhcp_enforced_deauthentication of this UpdateNetworkApplianceSsidRequest.
        :rtype: UpdateNetworkApplianceSsidRequestDhcpEnforcedDeauthentication
        """
        return self._dhcp_enforced_deauthentication

    @dhcp_enforced_deauthentication.setter
    def dhcp_enforced_deauthentication(self, dhcp_enforced_deauthentication):
        """Sets the dhcp_enforced_deauthentication of this UpdateNetworkApplianceSsidRequest.


        :param dhcp_enforced_deauthentication: The dhcp_enforced_deauthentication of this UpdateNetworkApplianceSsidRequest.
        :type dhcp_enforced_deauthentication: UpdateNetworkApplianceSsidRequestDhcpEnforcedDeauthentication
        """

        self._dhcp_enforced_deauthentication = dhcp_enforced_deauthentication

    @property
    def enabled(self):
        """Gets the enabled of this UpdateNetworkApplianceSsidRequest.

        Whether or not the SSID is enabled.

        :return: The enabled of this UpdateNetworkApplianceSsidRequest.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this UpdateNetworkApplianceSsidRequest.

        Whether or not the SSID is enabled.

        :param enabled: The enabled of this UpdateNetworkApplianceSsidRequest.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def encryption_mode(self):
        """Gets the encryption_mode of this UpdateNetworkApplianceSsidRequest.

        The psk encryption mode for the SSID ('wep' or 'wpa'). This param is only valid if the authMode is 'psk'.

        :return: The encryption_mode of this UpdateNetworkApplianceSsidRequest.
        :rtype: str
        """
        return self._encryption_mode

    @encryption_mode.setter
    def encryption_mode(self, encryption_mode):
        """Sets the encryption_mode of this UpdateNetworkApplianceSsidRequest.

        The psk encryption mode for the SSID ('wep' or 'wpa'). This param is only valid if the authMode is 'psk'.

        :param encryption_mode: The encryption_mode of this UpdateNetworkApplianceSsidRequest.
        :type encryption_mode: str
        """
        allowed_values = ["wep", "wpa"]  # noqa: E501
        if encryption_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `encryption_mode` ({0}), must be one of {1}"
                .format(encryption_mode, allowed_values)
            )

        self._encryption_mode = encryption_mode

    @property
    def name(self):
        """Gets the name of this UpdateNetworkApplianceSsidRequest.

        The name of the SSID.

        :return: The name of this UpdateNetworkApplianceSsidRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateNetworkApplianceSsidRequest.

        The name of the SSID.

        :param name: The name of this UpdateNetworkApplianceSsidRequest.
        :type name: str
        """

        self._name = name

    @property
    def psk(self):
        """Gets the psk of this UpdateNetworkApplianceSsidRequest.

        The passkey for the SSID. This param is only valid if the authMode is 'psk'.

        :return: The psk of this UpdateNetworkApplianceSsidRequest.
        :rtype: str
        """
        return self._psk

    @psk.setter
    def psk(self, psk):
        """Sets the psk of this UpdateNetworkApplianceSsidRequest.

        The passkey for the SSID. This param is only valid if the authMode is 'psk'.

        :param psk: The psk of this UpdateNetworkApplianceSsidRequest.
        :type psk: str
        """

        self._psk = psk

    @property
    def radius_servers(self):
        """Gets the radius_servers of this UpdateNetworkApplianceSsidRequest.

        The RADIUS 802.1x servers to be used for authentication. This param is only valid if the authMode is '8021x-radius'.

        :return: The radius_servers of this UpdateNetworkApplianceSsidRequest.
        :rtype: List[UpdateNetworkApplianceSsidRequestRadiusServersInner]
        """
        return self._radius_servers

    @radius_servers.setter
    def radius_servers(self, radius_servers):
        """Sets the radius_servers of this UpdateNetworkApplianceSsidRequest.

        The RADIUS 802.1x servers to be used for authentication. This param is only valid if the authMode is '8021x-radius'.

        :param radius_servers: The radius_servers of this UpdateNetworkApplianceSsidRequest.
        :type radius_servers: List[UpdateNetworkApplianceSsidRequestRadiusServersInner]
        """

        self._radius_servers = radius_servers

    @property
    def visible(self):
        """Gets the visible of this UpdateNetworkApplianceSsidRequest.

        Boolean indicating whether the MX should advertise or hide this SSID.

        :return: The visible of this UpdateNetworkApplianceSsidRequest.
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this UpdateNetworkApplianceSsidRequest.

        Boolean indicating whether the MX should advertise or hide this SSID.

        :param visible: The visible of this UpdateNetworkApplianceSsidRequest.
        :type visible: bool
        """

        self._visible = visible

    @property
    def wpa_encryption_mode(self):
        """Gets the wpa_encryption_mode of this UpdateNetworkApplianceSsidRequest.

        The types of WPA encryption. ('WPA1 and WPA2', 'WPA2 only', 'WPA3 Transition Mode' or 'WPA3 only'). This param is only valid if (1) the authMode is 'psk' & the encryptionMode is 'wpa' OR (2) the authMode is '8021x-meraki' OR (3) the authMode is '8021x-radius'

        :return: The wpa_encryption_mode of this UpdateNetworkApplianceSsidRequest.
        :rtype: str
        """
        return self._wpa_encryption_mode

    @wpa_encryption_mode.setter
    def wpa_encryption_mode(self, wpa_encryption_mode):
        """Sets the wpa_encryption_mode of this UpdateNetworkApplianceSsidRequest.

        The types of WPA encryption. ('WPA1 and WPA2', 'WPA2 only', 'WPA3 Transition Mode' or 'WPA3 only'). This param is only valid if (1) the authMode is 'psk' & the encryptionMode is 'wpa' OR (2) the authMode is '8021x-meraki' OR (3) the authMode is '8021x-radius'

        :param wpa_encryption_mode: The wpa_encryption_mode of this UpdateNetworkApplianceSsidRequest.
        :type wpa_encryption_mode: str
        """
        allowed_values = ["WPA1 and WPA2", "WPA2 only", "WPA3 Transition Mode", "WPA3 only"]  # noqa: E501
        if wpa_encryption_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `wpa_encryption_mode` ({0}), must be one of {1}"
                .format(wpa_encryption_mode, allowed_values)
            )

        self._wpa_encryption_mode = wpa_encryption_mode
