# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_device_wireless_radio_settings_request_five_ghz_settings import UpdateDeviceWirelessRadioSettingsRequestFiveGhzSettings
from openapi_server.models.update_device_wireless_radio_settings_request_two_four_ghz_settings import UpdateDeviceWirelessRadioSettingsRequestTwoFourGhzSettings
from openapi_server import util


class UpdateDeviceWirelessRadioSettingsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, five_ghz_settings: UpdateDeviceWirelessRadioSettingsRequestFiveGhzSettings=None, rf_profile_id: str=None, two_four_ghz_settings: UpdateDeviceWirelessRadioSettingsRequestTwoFourGhzSettings=None):
        """UpdateDeviceWirelessRadioSettingsRequest - a model defined in OpenAPI

        :param five_ghz_settings: The five_ghz_settings of this UpdateDeviceWirelessRadioSettingsRequest.
        :param rf_profile_id: The rf_profile_id of this UpdateDeviceWirelessRadioSettingsRequest.
        :param two_four_ghz_settings: The two_four_ghz_settings of this UpdateDeviceWirelessRadioSettingsRequest.
        """
        self.openapi_types = {
            'five_ghz_settings': UpdateDeviceWirelessRadioSettingsRequestFiveGhzSettings,
            'rf_profile_id': str,
            'two_four_ghz_settings': UpdateDeviceWirelessRadioSettingsRequestTwoFourGhzSettings
        }

        self.attribute_map = {
            'five_ghz_settings': 'fiveGhzSettings',
            'rf_profile_id': 'rfProfileId',
            'two_four_ghz_settings': 'twoFourGhzSettings'
        }

        self._five_ghz_settings = five_ghz_settings
        self._rf_profile_id = rf_profile_id
        self._two_four_ghz_settings = two_four_ghz_settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateDeviceWirelessRadioSettingsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateDeviceWirelessRadioSettings_request of this UpdateDeviceWirelessRadioSettingsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def five_ghz_settings(self):
        """Gets the five_ghz_settings of this UpdateDeviceWirelessRadioSettingsRequest.


        :return: The five_ghz_settings of this UpdateDeviceWirelessRadioSettingsRequest.
        :rtype: UpdateDeviceWirelessRadioSettingsRequestFiveGhzSettings
        """
        return self._five_ghz_settings

    @five_ghz_settings.setter
    def five_ghz_settings(self, five_ghz_settings):
        """Sets the five_ghz_settings of this UpdateDeviceWirelessRadioSettingsRequest.


        :param five_ghz_settings: The five_ghz_settings of this UpdateDeviceWirelessRadioSettingsRequest.
        :type five_ghz_settings: UpdateDeviceWirelessRadioSettingsRequestFiveGhzSettings
        """

        self._five_ghz_settings = five_ghz_settings

    @property
    def rf_profile_id(self):
        """Gets the rf_profile_id of this UpdateDeviceWirelessRadioSettingsRequest.

        The ID of an RF profile to assign to the device. If the value of this parameter is null, the appropriate basic RF profile (indoor or outdoor) will be assigned to the device. Assigning an RF profile will clear ALL manually configured overrides on the device (channel width, channel, power).

        :return: The rf_profile_id of this UpdateDeviceWirelessRadioSettingsRequest.
        :rtype: str
        """
        return self._rf_profile_id

    @rf_profile_id.setter
    def rf_profile_id(self, rf_profile_id):
        """Sets the rf_profile_id of this UpdateDeviceWirelessRadioSettingsRequest.

        The ID of an RF profile to assign to the device. If the value of this parameter is null, the appropriate basic RF profile (indoor or outdoor) will be assigned to the device. Assigning an RF profile will clear ALL manually configured overrides on the device (channel width, channel, power).

        :param rf_profile_id: The rf_profile_id of this UpdateDeviceWirelessRadioSettingsRequest.
        :type rf_profile_id: str
        """

        self._rf_profile_id = rf_profile_id

    @property
    def two_four_ghz_settings(self):
        """Gets the two_four_ghz_settings of this UpdateDeviceWirelessRadioSettingsRequest.


        :return: The two_four_ghz_settings of this UpdateDeviceWirelessRadioSettingsRequest.
        :rtype: UpdateDeviceWirelessRadioSettingsRequestTwoFourGhzSettings
        """
        return self._two_four_ghz_settings

    @two_four_ghz_settings.setter
    def two_four_ghz_settings(self, two_four_ghz_settings):
        """Sets the two_four_ghz_settings of this UpdateDeviceWirelessRadioSettingsRequest.


        :param two_four_ghz_settings: The two_four_ghz_settings of this UpdateDeviceWirelessRadioSettingsRequest.
        :type two_four_ghz_settings: UpdateDeviceWirelessRadioSettingsRequestTwoFourGhzSettings
        """

        self._two_four_ghz_settings = two_four_ghz_settings
