# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_network_appliance_vpn_bgp_request_neighbors_inner_ipv6 import UpdateNetworkApplianceVpnBgpRequestNeighborsInnerIpv6
from openapi_server import util


class UpdateNetworkApplianceVpnBgpRequestNeighborsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_transit: bool=None, ebgp_hold_timer: int=None, ebgp_multihop: int=None, ip: str=None, ipv6: UpdateNetworkApplianceVpnBgpRequestNeighborsInnerIpv6=None, receive_limit: int=None, remote_as_number: int=None):
        """UpdateNetworkApplianceVpnBgpRequestNeighborsInner - a model defined in OpenAPI

        :param allow_transit: The allow_transit of this UpdateNetworkApplianceVpnBgpRequestNeighborsInner.
        :param ebgp_hold_timer: The ebgp_hold_timer of this UpdateNetworkApplianceVpnBgpRequestNeighborsInner.
        :param ebgp_multihop: The ebgp_multihop of this UpdateNetworkApplianceVpnBgpRequestNeighborsInner.
        :param ip: The ip of this UpdateNetworkApplianceVpnBgpRequestNeighborsInner.
        :param ipv6: The ipv6 of this UpdateNetworkApplianceVpnBgpRequestNeighborsInner.
        :param receive_limit: The receive_limit of this UpdateNetworkApplianceVpnBgpRequestNeighborsInner.
        :param remote_as_number: The remote_as_number of this UpdateNetworkApplianceVpnBgpRequestNeighborsInner.
        """
        self.openapi_types = {
            'allow_transit': bool,
            'ebgp_hold_timer': int,
            'ebgp_multihop': int,
            'ip': str,
            'ipv6': UpdateNetworkApplianceVpnBgpRequestNeighborsInnerIpv6,
            'receive_limit': int,
            'remote_as_number': int
        }

        self.attribute_map = {
            'allow_transit': 'allowTransit',
            'ebgp_hold_timer': 'ebgpHoldTimer',
            'ebgp_multihop': 'ebgpMultihop',
            'ip': 'ip',
            'ipv6': 'ipv6',
            'receive_limit': 'receiveLimit',
            'remote_as_number': 'remoteAsNumber'
        }

        self._allow_transit = allow_transit
        self._ebgp_hold_timer = ebgp_hold_timer
        self._ebgp_multihop = ebgp_multihop
        self._ip = ip
        self._ipv6 = ipv6
        self._receive_limit = receive_limit
        self._remote_as_number = remote_as_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateNetworkApplianceVpnBgpRequestNeighborsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateNetworkApplianceVpnBgp_request_neighbors_inner of this UpdateNetworkApplianceVpnBgpRequestNeighborsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_transit(self):
        """Gets the allow_transit of this UpdateNetworkApplianceVpnBgpRequestNeighborsInner.

        When this feature is on, the Meraki device will advertise routes learned from other Autonomous Systems, thereby allowing traffic between Autonomous Systems to transit this AS. When absent, it defaults to false.

        :return: The allow_transit of this UpdateNetworkApplianceVpnBgpRequestNeighborsInner.
        :rtype: bool
        """
        return self._allow_transit

    @allow_transit.setter
    def allow_transit(self, allow_transit):
        """Sets the allow_transit of this UpdateNetworkApplianceVpnBgpRequestNeighborsInner.

        When this feature is on, the Meraki device will advertise routes learned from other Autonomous Systems, thereby allowing traffic between Autonomous Systems to transit this AS. When absent, it defaults to false.

        :param allow_transit: The allow_transit of this UpdateNetworkApplianceVpnBgpRequestNeighborsInner.
        :type allow_transit: bool
        """

        self._allow_transit = allow_transit

    @property
    def ebgp_hold_timer(self):
        """Gets the ebgp_hold_timer of this UpdateNetworkApplianceVpnBgpRequestNeighborsInner.

        The EBGP hold timer in seconds for each neighbor. The EBGP hold timer must be an integer between 12 and 240.

        :return: The ebgp_hold_timer of this UpdateNetworkApplianceVpnBgpRequestNeighborsInner.
        :rtype: int
        """
        return self._ebgp_hold_timer

    @ebgp_hold_timer.setter
    def ebgp_hold_timer(self, ebgp_hold_timer):
        """Sets the ebgp_hold_timer of this UpdateNetworkApplianceVpnBgpRequestNeighborsInner.

        The EBGP hold timer in seconds for each neighbor. The EBGP hold timer must be an integer between 12 and 240.

        :param ebgp_hold_timer: The ebgp_hold_timer of this UpdateNetworkApplianceVpnBgpRequestNeighborsInner.
        :type ebgp_hold_timer: int
        """
        if ebgp_hold_timer is None:
            raise ValueError("Invalid value for `ebgp_hold_timer`, must not be `None`")

        self._ebgp_hold_timer = ebgp_hold_timer

    @property
    def ebgp_multihop(self):
        """Gets the ebgp_multihop of this UpdateNetworkApplianceVpnBgpRequestNeighborsInner.

        Configure this if the neighbor is not adjacent. The EBGP multi-hop must be an integer between 1 and 255.

        :return: The ebgp_multihop of this UpdateNetworkApplianceVpnBgpRequestNeighborsInner.
        :rtype: int
        """
        return self._ebgp_multihop

    @ebgp_multihop.setter
    def ebgp_multihop(self, ebgp_multihop):
        """Sets the ebgp_multihop of this UpdateNetworkApplianceVpnBgpRequestNeighborsInner.

        Configure this if the neighbor is not adjacent. The EBGP multi-hop must be an integer between 1 and 255.

        :param ebgp_multihop: The ebgp_multihop of this UpdateNetworkApplianceVpnBgpRequestNeighborsInner.
        :type ebgp_multihop: int
        """
        if ebgp_multihop is None:
            raise ValueError("Invalid value for `ebgp_multihop`, must not be `None`")

        self._ebgp_multihop = ebgp_multihop

    @property
    def ip(self):
        """Gets the ip of this UpdateNetworkApplianceVpnBgpRequestNeighborsInner.

        The IPv4 address of the neighbor

        :return: The ip of this UpdateNetworkApplianceVpnBgpRequestNeighborsInner.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this UpdateNetworkApplianceVpnBgpRequestNeighborsInner.

        The IPv4 address of the neighbor

        :param ip: The ip of this UpdateNetworkApplianceVpnBgpRequestNeighborsInner.
        :type ip: str
        """

        self._ip = ip

    @property
    def ipv6(self):
        """Gets the ipv6 of this UpdateNetworkApplianceVpnBgpRequestNeighborsInner.


        :return: The ipv6 of this UpdateNetworkApplianceVpnBgpRequestNeighborsInner.
        :rtype: UpdateNetworkApplianceVpnBgpRequestNeighborsInnerIpv6
        """
        return self._ipv6

    @ipv6.setter
    def ipv6(self, ipv6):
        """Sets the ipv6 of this UpdateNetworkApplianceVpnBgpRequestNeighborsInner.


        :param ipv6: The ipv6 of this UpdateNetworkApplianceVpnBgpRequestNeighborsInner.
        :type ipv6: UpdateNetworkApplianceVpnBgpRequestNeighborsInnerIpv6
        """

        self._ipv6 = ipv6

    @property
    def receive_limit(self):
        """Gets the receive_limit of this UpdateNetworkApplianceVpnBgpRequestNeighborsInner.

        The receive limit is the maximum number of routes that can be received from any BGP peer. The receive limit must be an integer between 0 and 4294967295. When absent, it defaults to 0.

        :return: The receive_limit of this UpdateNetworkApplianceVpnBgpRequestNeighborsInner.
        :rtype: int
        """
        return self._receive_limit

    @receive_limit.setter
    def receive_limit(self, receive_limit):
        """Sets the receive_limit of this UpdateNetworkApplianceVpnBgpRequestNeighborsInner.

        The receive limit is the maximum number of routes that can be received from any BGP peer. The receive limit must be an integer between 0 and 4294967295. When absent, it defaults to 0.

        :param receive_limit: The receive_limit of this UpdateNetworkApplianceVpnBgpRequestNeighborsInner.
        :type receive_limit: int
        """

        self._receive_limit = receive_limit

    @property
    def remote_as_number(self):
        """Gets the remote_as_number of this UpdateNetworkApplianceVpnBgpRequestNeighborsInner.

        Remote ASN of the neighbor. The remote ASN must be an integer between 1 and 4294967295.

        :return: The remote_as_number of this UpdateNetworkApplianceVpnBgpRequestNeighborsInner.
        :rtype: int
        """
        return self._remote_as_number

    @remote_as_number.setter
    def remote_as_number(self, remote_as_number):
        """Sets the remote_as_number of this UpdateNetworkApplianceVpnBgpRequestNeighborsInner.

        Remote ASN of the neighbor. The remote ASN must be an integer between 1 and 4294967295.

        :param remote_as_number: The remote_as_number of this UpdateNetworkApplianceVpnBgpRequestNeighborsInner.
        :type remote_as_number: int
        """
        if remote_as_number is None:
            raise ValueError("Invalid value for `remote_as_number`, must not be `None`")

        self._remote_as_number = remote_as_number
