# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_organization_login_security200_response_api_authentication import GetOrganizationLoginSecurity200ResponseApiAuthentication
from openapi_server import util


class GetOrganizationLoginSecurity200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_lockout_attempts: int=None, api_authentication: GetOrganizationLoginSecurity200ResponseApiAuthentication=None, enforce_account_lockout: bool=None, enforce_different_passwords: bool=None, enforce_idle_timeout: bool=None, enforce_login_ip_ranges: bool=None, enforce_password_expiration: bool=None, enforce_strong_passwords: bool=None, enforce_two_factor_auth: bool=None, idle_timeout_minutes: int=None, login_ip_ranges: List[str]=None, num_different_passwords: int=None, password_expiration_days: int=None):
        """GetOrganizationLoginSecurity200Response - a model defined in OpenAPI

        :param account_lockout_attempts: The account_lockout_attempts of this GetOrganizationLoginSecurity200Response.
        :param api_authentication: The api_authentication of this GetOrganizationLoginSecurity200Response.
        :param enforce_account_lockout: The enforce_account_lockout of this GetOrganizationLoginSecurity200Response.
        :param enforce_different_passwords: The enforce_different_passwords of this GetOrganizationLoginSecurity200Response.
        :param enforce_idle_timeout: The enforce_idle_timeout of this GetOrganizationLoginSecurity200Response.
        :param enforce_login_ip_ranges: The enforce_login_ip_ranges of this GetOrganizationLoginSecurity200Response.
        :param enforce_password_expiration: The enforce_password_expiration of this GetOrganizationLoginSecurity200Response.
        :param enforce_strong_passwords: The enforce_strong_passwords of this GetOrganizationLoginSecurity200Response.
        :param enforce_two_factor_auth: The enforce_two_factor_auth of this GetOrganizationLoginSecurity200Response.
        :param idle_timeout_minutes: The idle_timeout_minutes of this GetOrganizationLoginSecurity200Response.
        :param login_ip_ranges: The login_ip_ranges of this GetOrganizationLoginSecurity200Response.
        :param num_different_passwords: The num_different_passwords of this GetOrganizationLoginSecurity200Response.
        :param password_expiration_days: The password_expiration_days of this GetOrganizationLoginSecurity200Response.
        """
        self.openapi_types = {
            'account_lockout_attempts': int,
            'api_authentication': GetOrganizationLoginSecurity200ResponseApiAuthentication,
            'enforce_account_lockout': bool,
            'enforce_different_passwords': bool,
            'enforce_idle_timeout': bool,
            'enforce_login_ip_ranges': bool,
            'enforce_password_expiration': bool,
            'enforce_strong_passwords': bool,
            'enforce_two_factor_auth': bool,
            'idle_timeout_minutes': int,
            'login_ip_ranges': List[str],
            'num_different_passwords': int,
            'password_expiration_days': int
        }

        self.attribute_map = {
            'account_lockout_attempts': 'accountLockoutAttempts',
            'api_authentication': 'apiAuthentication',
            'enforce_account_lockout': 'enforceAccountLockout',
            'enforce_different_passwords': 'enforceDifferentPasswords',
            'enforce_idle_timeout': 'enforceIdleTimeout',
            'enforce_login_ip_ranges': 'enforceLoginIpRanges',
            'enforce_password_expiration': 'enforcePasswordExpiration',
            'enforce_strong_passwords': 'enforceStrongPasswords',
            'enforce_two_factor_auth': 'enforceTwoFactorAuth',
            'idle_timeout_minutes': 'idleTimeoutMinutes',
            'login_ip_ranges': 'loginIpRanges',
            'num_different_passwords': 'numDifferentPasswords',
            'password_expiration_days': 'passwordExpirationDays'
        }

        self._account_lockout_attempts = account_lockout_attempts
        self._api_authentication = api_authentication
        self._enforce_account_lockout = enforce_account_lockout
        self._enforce_different_passwords = enforce_different_passwords
        self._enforce_idle_timeout = enforce_idle_timeout
        self._enforce_login_ip_ranges = enforce_login_ip_ranges
        self._enforce_password_expiration = enforce_password_expiration
        self._enforce_strong_passwords = enforce_strong_passwords
        self._enforce_two_factor_auth = enforce_two_factor_auth
        self._idle_timeout_minutes = idle_timeout_minutes
        self._login_ip_ranges = login_ip_ranges
        self._num_different_passwords = num_different_passwords
        self._password_expiration_days = password_expiration_days

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetOrganizationLoginSecurity200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getOrganizationLoginSecurity_200_response of this GetOrganizationLoginSecurity200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_lockout_attempts(self):
        """Gets the account_lockout_attempts of this GetOrganizationLoginSecurity200Response.

        Number of consecutive failed login attempts after which users' accounts will be locked.

        :return: The account_lockout_attempts of this GetOrganizationLoginSecurity200Response.
        :rtype: int
        """
        return self._account_lockout_attempts

    @account_lockout_attempts.setter
    def account_lockout_attempts(self, account_lockout_attempts):
        """Sets the account_lockout_attempts of this GetOrganizationLoginSecurity200Response.

        Number of consecutive failed login attempts after which users' accounts will be locked.

        :param account_lockout_attempts: The account_lockout_attempts of this GetOrganizationLoginSecurity200Response.
        :type account_lockout_attempts: int
        """

        self._account_lockout_attempts = account_lockout_attempts

    @property
    def api_authentication(self):
        """Gets the api_authentication of this GetOrganizationLoginSecurity200Response.


        :return: The api_authentication of this GetOrganizationLoginSecurity200Response.
        :rtype: GetOrganizationLoginSecurity200ResponseApiAuthentication
        """
        return self._api_authentication

    @api_authentication.setter
    def api_authentication(self, api_authentication):
        """Sets the api_authentication of this GetOrganizationLoginSecurity200Response.


        :param api_authentication: The api_authentication of this GetOrganizationLoginSecurity200Response.
        :type api_authentication: GetOrganizationLoginSecurity200ResponseApiAuthentication
        """

        self._api_authentication = api_authentication

    @property
    def enforce_account_lockout(self):
        """Gets the enforce_account_lockout of this GetOrganizationLoginSecurity200Response.

        Boolean indicating whether users' Dashboard accounts will be locked out after a specified number of consecutive failed login attempts.

        :return: The enforce_account_lockout of this GetOrganizationLoginSecurity200Response.
        :rtype: bool
        """
        return self._enforce_account_lockout

    @enforce_account_lockout.setter
    def enforce_account_lockout(self, enforce_account_lockout):
        """Sets the enforce_account_lockout of this GetOrganizationLoginSecurity200Response.

        Boolean indicating whether users' Dashboard accounts will be locked out after a specified number of consecutive failed login attempts.

        :param enforce_account_lockout: The enforce_account_lockout of this GetOrganizationLoginSecurity200Response.
        :type enforce_account_lockout: bool
        """

        self._enforce_account_lockout = enforce_account_lockout

    @property
    def enforce_different_passwords(self):
        """Gets the enforce_different_passwords of this GetOrganizationLoginSecurity200Response.

        Boolean indicating whether users, when setting a new password, are forced to choose a new password that is different from any past passwords.

        :return: The enforce_different_passwords of this GetOrganizationLoginSecurity200Response.
        :rtype: bool
        """
        return self._enforce_different_passwords

    @enforce_different_passwords.setter
    def enforce_different_passwords(self, enforce_different_passwords):
        """Sets the enforce_different_passwords of this GetOrganizationLoginSecurity200Response.

        Boolean indicating whether users, when setting a new password, are forced to choose a new password that is different from any past passwords.

        :param enforce_different_passwords: The enforce_different_passwords of this GetOrganizationLoginSecurity200Response.
        :type enforce_different_passwords: bool
        """

        self._enforce_different_passwords = enforce_different_passwords

    @property
    def enforce_idle_timeout(self):
        """Gets the enforce_idle_timeout of this GetOrganizationLoginSecurity200Response.

        Boolean indicating whether users will be logged out after being idle for the specified number of minutes.

        :return: The enforce_idle_timeout of this GetOrganizationLoginSecurity200Response.
        :rtype: bool
        """
        return self._enforce_idle_timeout

    @enforce_idle_timeout.setter
    def enforce_idle_timeout(self, enforce_idle_timeout):
        """Sets the enforce_idle_timeout of this GetOrganizationLoginSecurity200Response.

        Boolean indicating whether users will be logged out after being idle for the specified number of minutes.

        :param enforce_idle_timeout: The enforce_idle_timeout of this GetOrganizationLoginSecurity200Response.
        :type enforce_idle_timeout: bool
        """

        self._enforce_idle_timeout = enforce_idle_timeout

    @property
    def enforce_login_ip_ranges(self):
        """Gets the enforce_login_ip_ranges of this GetOrganizationLoginSecurity200Response.

        Boolean indicating whether organization will restrict access to Dashboard (including the API) from certain IP addresses.

        :return: The enforce_login_ip_ranges of this GetOrganizationLoginSecurity200Response.
        :rtype: bool
        """
        return self._enforce_login_ip_ranges

    @enforce_login_ip_ranges.setter
    def enforce_login_ip_ranges(self, enforce_login_ip_ranges):
        """Sets the enforce_login_ip_ranges of this GetOrganizationLoginSecurity200Response.

        Boolean indicating whether organization will restrict access to Dashboard (including the API) from certain IP addresses.

        :param enforce_login_ip_ranges: The enforce_login_ip_ranges of this GetOrganizationLoginSecurity200Response.
        :type enforce_login_ip_ranges: bool
        """

        self._enforce_login_ip_ranges = enforce_login_ip_ranges

    @property
    def enforce_password_expiration(self):
        """Gets the enforce_password_expiration of this GetOrganizationLoginSecurity200Response.

        Boolean indicating whether users are forced to change their password every X number of days.

        :return: The enforce_password_expiration of this GetOrganizationLoginSecurity200Response.
        :rtype: bool
        """
        return self._enforce_password_expiration

    @enforce_password_expiration.setter
    def enforce_password_expiration(self, enforce_password_expiration):
        """Sets the enforce_password_expiration of this GetOrganizationLoginSecurity200Response.

        Boolean indicating whether users are forced to change their password every X number of days.

        :param enforce_password_expiration: The enforce_password_expiration of this GetOrganizationLoginSecurity200Response.
        :type enforce_password_expiration: bool
        """

        self._enforce_password_expiration = enforce_password_expiration

    @property
    def enforce_strong_passwords(self):
        """Gets the enforce_strong_passwords of this GetOrganizationLoginSecurity200Response.

        Boolean indicating whether users will be forced to choose strong passwords for their accounts. Strong passwords are at least 8 characters that contain 3 of the following: number, uppercase letter, lowercase letter, and symbol

        :return: The enforce_strong_passwords of this GetOrganizationLoginSecurity200Response.
        :rtype: bool
        """
        return self._enforce_strong_passwords

    @enforce_strong_passwords.setter
    def enforce_strong_passwords(self, enforce_strong_passwords):
        """Sets the enforce_strong_passwords of this GetOrganizationLoginSecurity200Response.

        Boolean indicating whether users will be forced to choose strong passwords for their accounts. Strong passwords are at least 8 characters that contain 3 of the following: number, uppercase letter, lowercase letter, and symbol

        :param enforce_strong_passwords: The enforce_strong_passwords of this GetOrganizationLoginSecurity200Response.
        :type enforce_strong_passwords: bool
        """

        self._enforce_strong_passwords = enforce_strong_passwords

    @property
    def enforce_two_factor_auth(self):
        """Gets the enforce_two_factor_auth of this GetOrganizationLoginSecurity200Response.

        Boolean indicating whether users in this organization will be required to use an extra verification code when logging in to Dashboard. This code will be sent to their mobile phone via SMS, or can be generated by the authenticator application.

        :return: The enforce_two_factor_auth of this GetOrganizationLoginSecurity200Response.
        :rtype: bool
        """
        return self._enforce_two_factor_auth

    @enforce_two_factor_auth.setter
    def enforce_two_factor_auth(self, enforce_two_factor_auth):
        """Sets the enforce_two_factor_auth of this GetOrganizationLoginSecurity200Response.

        Boolean indicating whether users in this organization will be required to use an extra verification code when logging in to Dashboard. This code will be sent to their mobile phone via SMS, or can be generated by the authenticator application.

        :param enforce_two_factor_auth: The enforce_two_factor_auth of this GetOrganizationLoginSecurity200Response.
        :type enforce_two_factor_auth: bool
        """

        self._enforce_two_factor_auth = enforce_two_factor_auth

    @property
    def idle_timeout_minutes(self):
        """Gets the idle_timeout_minutes of this GetOrganizationLoginSecurity200Response.

        Number of minutes users can remain idle before being logged out of their accounts.

        :return: The idle_timeout_minutes of this GetOrganizationLoginSecurity200Response.
        :rtype: int
        """
        return self._idle_timeout_minutes

    @idle_timeout_minutes.setter
    def idle_timeout_minutes(self, idle_timeout_minutes):
        """Sets the idle_timeout_minutes of this GetOrganizationLoginSecurity200Response.

        Number of minutes users can remain idle before being logged out of their accounts.

        :param idle_timeout_minutes: The idle_timeout_minutes of this GetOrganizationLoginSecurity200Response.
        :type idle_timeout_minutes: int
        """

        self._idle_timeout_minutes = idle_timeout_minutes

    @property
    def login_ip_ranges(self):
        """Gets the login_ip_ranges of this GetOrganizationLoginSecurity200Response.

        List of acceptable IP ranges. Entries can be single IP addresses, IP address ranges, and CIDR subnets.

        :return: The login_ip_ranges of this GetOrganizationLoginSecurity200Response.
        :rtype: List[str]
        """
        return self._login_ip_ranges

    @login_ip_ranges.setter
    def login_ip_ranges(self, login_ip_ranges):
        """Sets the login_ip_ranges of this GetOrganizationLoginSecurity200Response.

        List of acceptable IP ranges. Entries can be single IP addresses, IP address ranges, and CIDR subnets.

        :param login_ip_ranges: The login_ip_ranges of this GetOrganizationLoginSecurity200Response.
        :type login_ip_ranges: List[str]
        """

        self._login_ip_ranges = login_ip_ranges

    @property
    def num_different_passwords(self):
        """Gets the num_different_passwords of this GetOrganizationLoginSecurity200Response.

        Number of recent passwords that new password must be distinct from.

        :return: The num_different_passwords of this GetOrganizationLoginSecurity200Response.
        :rtype: int
        """
        return self._num_different_passwords

    @num_different_passwords.setter
    def num_different_passwords(self, num_different_passwords):
        """Sets the num_different_passwords of this GetOrganizationLoginSecurity200Response.

        Number of recent passwords that new password must be distinct from.

        :param num_different_passwords: The num_different_passwords of this GetOrganizationLoginSecurity200Response.
        :type num_different_passwords: int
        """

        self._num_different_passwords = num_different_passwords

    @property
    def password_expiration_days(self):
        """Gets the password_expiration_days of this GetOrganizationLoginSecurity200Response.

        Number of days after which users will be forced to change their password.

        :return: The password_expiration_days of this GetOrganizationLoginSecurity200Response.
        :rtype: int
        """
        return self._password_expiration_days

    @password_expiration_days.setter
    def password_expiration_days(self, password_expiration_days):
        """Sets the password_expiration_days of this GetOrganizationLoginSecurity200Response.

        Number of days after which users will be forced to change their password.

        :param password_expiration_days: The password_expiration_days of this GetOrganizationLoginSecurity200Response.
        :type password_expiration_days: int
        """

        self._password_expiration_days = password_expiration_days
