# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThresholdPm25(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, concentration: int=None, quality: str=None):
        """GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThresholdPm25 - a model defined in OpenAPI

        :param concentration: The concentration of this GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThresholdPm25.
        :param quality: The quality of this GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThresholdPm25.
        """
        self.openapi_types = {
            'concentration': int,
            'quality': str
        }

        self.attribute_map = {
            'concentration': 'concentration',
            'quality': 'quality'
        }

        self._concentration = concentration
        self._quality = quality

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThresholdPm25':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getNetworkSensorAlertsProfiles_200_response_inner_conditions_inner_threshold_pm25 of this GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThresholdPm25.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def concentration(self):
        """Gets the concentration of this GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThresholdPm25.

        Alerting threshold as PM2.5 parts per million.

        :return: The concentration of this GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThresholdPm25.
        :rtype: int
        """
        return self._concentration

    @concentration.setter
    def concentration(self, concentration):
        """Sets the concentration of this GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThresholdPm25.

        Alerting threshold as PM2.5 parts per million.

        :param concentration: The concentration of this GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThresholdPm25.
        :type concentration: int
        """

        self._concentration = concentration

    @property
    def quality(self):
        """Gets the quality of this GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThresholdPm25.

        Alerting threshold as a qualitative PM2.5 level.

        :return: The quality of this GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThresholdPm25.
        :rtype: str
        """
        return self._quality

    @quality.setter
    def quality(self, quality):
        """Sets the quality of this GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThresholdPm25.

        Alerting threshold as a qualitative PM2.5 level.

        :param quality: The quality of this GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThresholdPm25.
        :type quality: str
        """
        allowed_values = ["fair", "good", "inadequate", "poor"]  # noqa: E501
        if quality not in allowed_values:
            raise ValueError(
                "Invalid value for `quality` ({0}), must be one of {1}"
                .format(quality, allowed_values)
            )

        self._quality = quality
