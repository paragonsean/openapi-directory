# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_network_wireless_ssid_request_active_directory import UpdateNetworkWirelessSsidRequestActiveDirectory
from openapi_server.models.update_network_wireless_ssid_request_ap_tags_and_vlan_ids_inner import UpdateNetworkWirelessSsidRequestApTagsAndVlanIdsInner
from openapi_server.models.update_network_wireless_ssid_request_dns_rewrite import UpdateNetworkWirelessSsidRequestDnsRewrite
from openapi_server.models.update_network_wireless_ssid_request_dot11r import UpdateNetworkWirelessSsidRequestDot11r
from openapi_server.models.update_network_wireless_ssid_request_dot11w import UpdateNetworkWirelessSsidRequestDot11w
from openapi_server.models.update_network_wireless_ssid_request_gre import UpdateNetworkWirelessSsidRequestGre
from openapi_server.models.update_network_wireless_ssid_request_ldap import UpdateNetworkWirelessSsidRequestLdap
from openapi_server.models.update_network_wireless_ssid_request_local_radius import UpdateNetworkWirelessSsidRequestLocalRadius
from openapi_server.models.update_network_wireless_ssid_request_oauth import UpdateNetworkWirelessSsidRequestOauth
from openapi_server.models.update_network_wireless_ssid_request_radius_accounting_servers_inner import UpdateNetworkWirelessSsidRequestRadiusAccountingServersInner
from openapi_server.models.update_network_wireless_ssid_request_radius_servers_inner import UpdateNetworkWirelessSsidRequestRadiusServersInner
from openapi_server.models.update_network_wireless_ssid_request_speed_burst import UpdateNetworkWirelessSsidRequestSpeedBurst
from openapi_server import util


class UpdateNetworkWirelessSsidRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_directory: UpdateNetworkWirelessSsidRequestActiveDirectory=None, adult_content_filtering_enabled: bool=None, ap_tags_and_vlan_ids: List[UpdateNetworkWirelessSsidRequestApTagsAndVlanIdsInner]=None, auth_mode: str=None, availability_tags: List[str]=None, available_on_all_aps: bool=None, band_selection: str=None, concentrator_network_id: str=None, default_vlan_id: int=None, disassociate_clients_on_vpn_failover: bool=None, dns_rewrite: UpdateNetworkWirelessSsidRequestDnsRewrite=None, dot11r: UpdateNetworkWirelessSsidRequestDot11r=None, dot11w: UpdateNetworkWirelessSsidRequestDot11w=None, enabled: bool=None, encryption_mode: str=None, enterprise_admin_access: str=None, gre: UpdateNetworkWirelessSsidRequestGre=None, ip_assignment_mode: str=None, lan_isolation_enabled: bool=None, ldap: UpdateNetworkWirelessSsidRequestLdap=None, local_radius: UpdateNetworkWirelessSsidRequestLocalRadius=None, mandatory_dhcp_enabled: bool=None, min_bitrate: float=None, name: str=None, oauth: UpdateNetworkWirelessSsidRequestOauth=None, per_client_bandwidth_limit_down: int=None, per_client_bandwidth_limit_up: int=None, per_ssid_bandwidth_limit_down: int=None, per_ssid_bandwidth_limit_up: int=None, psk: str=None, radius_accounting_enabled: bool=None, radius_accounting_interim_interval: int=None, radius_accounting_servers: List[UpdateNetworkWirelessSsidRequestRadiusAccountingServersInner]=None, radius_attribute_for_group_policies: str=None, radius_authentication_nas_id: str=None, radius_called_station_id: str=None, radius_coa_enabled: bool=None, radius_failover_policy: str=None, radius_fallback_enabled: bool=None, radius_guest_vlan_enabled: bool=None, radius_guest_vlan_id: int=None, radius_load_balancing_policy: str=None, radius_override: bool=None, radius_proxy_enabled: bool=None, radius_server_attempts_limit: int=None, radius_server_timeout: int=None, radius_servers: List[UpdateNetworkWirelessSsidRequestRadiusServersInner]=None, radius_testing_enabled: bool=None, secondary_concentrator_network_id: str=None, speed_burst: UpdateNetworkWirelessSsidRequestSpeedBurst=None, splash_guest_sponsor_domains: List[str]=None, splash_page: str=None, use_vlan_tagging: bool=None, visible: bool=None, vlan_id: int=None, walled_garden_enabled: bool=None, walled_garden_ranges: List[str]=None, wpa_encryption_mode: str=None):
        """UpdateNetworkWirelessSsidRequest - a model defined in OpenAPI

        :param active_directory: The active_directory of this UpdateNetworkWirelessSsidRequest.
        :param adult_content_filtering_enabled: The adult_content_filtering_enabled of this UpdateNetworkWirelessSsidRequest.
        :param ap_tags_and_vlan_ids: The ap_tags_and_vlan_ids of this UpdateNetworkWirelessSsidRequest.
        :param auth_mode: The auth_mode of this UpdateNetworkWirelessSsidRequest.
        :param availability_tags: The availability_tags of this UpdateNetworkWirelessSsidRequest.
        :param available_on_all_aps: The available_on_all_aps of this UpdateNetworkWirelessSsidRequest.
        :param band_selection: The band_selection of this UpdateNetworkWirelessSsidRequest.
        :param concentrator_network_id: The concentrator_network_id of this UpdateNetworkWirelessSsidRequest.
        :param default_vlan_id: The default_vlan_id of this UpdateNetworkWirelessSsidRequest.
        :param disassociate_clients_on_vpn_failover: The disassociate_clients_on_vpn_failover of this UpdateNetworkWirelessSsidRequest.
        :param dns_rewrite: The dns_rewrite of this UpdateNetworkWirelessSsidRequest.
        :param dot11r: The dot11r of this UpdateNetworkWirelessSsidRequest.
        :param dot11w: The dot11w of this UpdateNetworkWirelessSsidRequest.
        :param enabled: The enabled of this UpdateNetworkWirelessSsidRequest.
        :param encryption_mode: The encryption_mode of this UpdateNetworkWirelessSsidRequest.
        :param enterprise_admin_access: The enterprise_admin_access of this UpdateNetworkWirelessSsidRequest.
        :param gre: The gre of this UpdateNetworkWirelessSsidRequest.
        :param ip_assignment_mode: The ip_assignment_mode of this UpdateNetworkWirelessSsidRequest.
        :param lan_isolation_enabled: The lan_isolation_enabled of this UpdateNetworkWirelessSsidRequest.
        :param ldap: The ldap of this UpdateNetworkWirelessSsidRequest.
        :param local_radius: The local_radius of this UpdateNetworkWirelessSsidRequest.
        :param mandatory_dhcp_enabled: The mandatory_dhcp_enabled of this UpdateNetworkWirelessSsidRequest.
        :param min_bitrate: The min_bitrate of this UpdateNetworkWirelessSsidRequest.
        :param name: The name of this UpdateNetworkWirelessSsidRequest.
        :param oauth: The oauth of this UpdateNetworkWirelessSsidRequest.
        :param per_client_bandwidth_limit_down: The per_client_bandwidth_limit_down of this UpdateNetworkWirelessSsidRequest.
        :param per_client_bandwidth_limit_up: The per_client_bandwidth_limit_up of this UpdateNetworkWirelessSsidRequest.
        :param per_ssid_bandwidth_limit_down: The per_ssid_bandwidth_limit_down of this UpdateNetworkWirelessSsidRequest.
        :param per_ssid_bandwidth_limit_up: The per_ssid_bandwidth_limit_up of this UpdateNetworkWirelessSsidRequest.
        :param psk: The psk of this UpdateNetworkWirelessSsidRequest.
        :param radius_accounting_enabled: The radius_accounting_enabled of this UpdateNetworkWirelessSsidRequest.
        :param radius_accounting_interim_interval: The radius_accounting_interim_interval of this UpdateNetworkWirelessSsidRequest.
        :param radius_accounting_servers: The radius_accounting_servers of this UpdateNetworkWirelessSsidRequest.
        :param radius_attribute_for_group_policies: The radius_attribute_for_group_policies of this UpdateNetworkWirelessSsidRequest.
        :param radius_authentication_nas_id: The radius_authentication_nas_id of this UpdateNetworkWirelessSsidRequest.
        :param radius_called_station_id: The radius_called_station_id of this UpdateNetworkWirelessSsidRequest.
        :param radius_coa_enabled: The radius_coa_enabled of this UpdateNetworkWirelessSsidRequest.
        :param radius_failover_policy: The radius_failover_policy of this UpdateNetworkWirelessSsidRequest.
        :param radius_fallback_enabled: The radius_fallback_enabled of this UpdateNetworkWirelessSsidRequest.
        :param radius_guest_vlan_enabled: The radius_guest_vlan_enabled of this UpdateNetworkWirelessSsidRequest.
        :param radius_guest_vlan_id: The radius_guest_vlan_id of this UpdateNetworkWirelessSsidRequest.
        :param radius_load_balancing_policy: The radius_load_balancing_policy of this UpdateNetworkWirelessSsidRequest.
        :param radius_override: The radius_override of this UpdateNetworkWirelessSsidRequest.
        :param radius_proxy_enabled: The radius_proxy_enabled of this UpdateNetworkWirelessSsidRequest.
        :param radius_server_attempts_limit: The radius_server_attempts_limit of this UpdateNetworkWirelessSsidRequest.
        :param radius_server_timeout: The radius_server_timeout of this UpdateNetworkWirelessSsidRequest.
        :param radius_servers: The radius_servers of this UpdateNetworkWirelessSsidRequest.
        :param radius_testing_enabled: The radius_testing_enabled of this UpdateNetworkWirelessSsidRequest.
        :param secondary_concentrator_network_id: The secondary_concentrator_network_id of this UpdateNetworkWirelessSsidRequest.
        :param speed_burst: The speed_burst of this UpdateNetworkWirelessSsidRequest.
        :param splash_guest_sponsor_domains: The splash_guest_sponsor_domains of this UpdateNetworkWirelessSsidRequest.
        :param splash_page: The splash_page of this UpdateNetworkWirelessSsidRequest.
        :param use_vlan_tagging: The use_vlan_tagging of this UpdateNetworkWirelessSsidRequest.
        :param visible: The visible of this UpdateNetworkWirelessSsidRequest.
        :param vlan_id: The vlan_id of this UpdateNetworkWirelessSsidRequest.
        :param walled_garden_enabled: The walled_garden_enabled of this UpdateNetworkWirelessSsidRequest.
        :param walled_garden_ranges: The walled_garden_ranges of this UpdateNetworkWirelessSsidRequest.
        :param wpa_encryption_mode: The wpa_encryption_mode of this UpdateNetworkWirelessSsidRequest.
        """
        self.openapi_types = {
            'active_directory': UpdateNetworkWirelessSsidRequestActiveDirectory,
            'adult_content_filtering_enabled': bool,
            'ap_tags_and_vlan_ids': List[UpdateNetworkWirelessSsidRequestApTagsAndVlanIdsInner],
            'auth_mode': str,
            'availability_tags': List[str],
            'available_on_all_aps': bool,
            'band_selection': str,
            'concentrator_network_id': str,
            'default_vlan_id': int,
            'disassociate_clients_on_vpn_failover': bool,
            'dns_rewrite': UpdateNetworkWirelessSsidRequestDnsRewrite,
            'dot11r': UpdateNetworkWirelessSsidRequestDot11r,
            'dot11w': UpdateNetworkWirelessSsidRequestDot11w,
            'enabled': bool,
            'encryption_mode': str,
            'enterprise_admin_access': str,
            'gre': UpdateNetworkWirelessSsidRequestGre,
            'ip_assignment_mode': str,
            'lan_isolation_enabled': bool,
            'ldap': UpdateNetworkWirelessSsidRequestLdap,
            'local_radius': UpdateNetworkWirelessSsidRequestLocalRadius,
            'mandatory_dhcp_enabled': bool,
            'min_bitrate': float,
            'name': str,
            'oauth': UpdateNetworkWirelessSsidRequestOauth,
            'per_client_bandwidth_limit_down': int,
            'per_client_bandwidth_limit_up': int,
            'per_ssid_bandwidth_limit_down': int,
            'per_ssid_bandwidth_limit_up': int,
            'psk': str,
            'radius_accounting_enabled': bool,
            'radius_accounting_interim_interval': int,
            'radius_accounting_servers': List[UpdateNetworkWirelessSsidRequestRadiusAccountingServersInner],
            'radius_attribute_for_group_policies': str,
            'radius_authentication_nas_id': str,
            'radius_called_station_id': str,
            'radius_coa_enabled': bool,
            'radius_failover_policy': str,
            'radius_fallback_enabled': bool,
            'radius_guest_vlan_enabled': bool,
            'radius_guest_vlan_id': int,
            'radius_load_balancing_policy': str,
            'radius_override': bool,
            'radius_proxy_enabled': bool,
            'radius_server_attempts_limit': int,
            'radius_server_timeout': int,
            'radius_servers': List[UpdateNetworkWirelessSsidRequestRadiusServersInner],
            'radius_testing_enabled': bool,
            'secondary_concentrator_network_id': str,
            'speed_burst': UpdateNetworkWirelessSsidRequestSpeedBurst,
            'splash_guest_sponsor_domains': List[str],
            'splash_page': str,
            'use_vlan_tagging': bool,
            'visible': bool,
            'vlan_id': int,
            'walled_garden_enabled': bool,
            'walled_garden_ranges': List[str],
            'wpa_encryption_mode': str
        }

        self.attribute_map = {
            'active_directory': 'activeDirectory',
            'adult_content_filtering_enabled': 'adultContentFilteringEnabled',
            'ap_tags_and_vlan_ids': 'apTagsAndVlanIds',
            'auth_mode': 'authMode',
            'availability_tags': 'availabilityTags',
            'available_on_all_aps': 'availableOnAllAps',
            'band_selection': 'bandSelection',
            'concentrator_network_id': 'concentratorNetworkId',
            'default_vlan_id': 'defaultVlanId',
            'disassociate_clients_on_vpn_failover': 'disassociateClientsOnVpnFailover',
            'dns_rewrite': 'dnsRewrite',
            'dot11r': 'dot11r',
            'dot11w': 'dot11w',
            'enabled': 'enabled',
            'encryption_mode': 'encryptionMode',
            'enterprise_admin_access': 'enterpriseAdminAccess',
            'gre': 'gre',
            'ip_assignment_mode': 'ipAssignmentMode',
            'lan_isolation_enabled': 'lanIsolationEnabled',
            'ldap': 'ldap',
            'local_radius': 'localRadius',
            'mandatory_dhcp_enabled': 'mandatoryDhcpEnabled',
            'min_bitrate': 'minBitrate',
            'name': 'name',
            'oauth': 'oauth',
            'per_client_bandwidth_limit_down': 'perClientBandwidthLimitDown',
            'per_client_bandwidth_limit_up': 'perClientBandwidthLimitUp',
            'per_ssid_bandwidth_limit_down': 'perSsidBandwidthLimitDown',
            'per_ssid_bandwidth_limit_up': 'perSsidBandwidthLimitUp',
            'psk': 'psk',
            'radius_accounting_enabled': 'radiusAccountingEnabled',
            'radius_accounting_interim_interval': 'radiusAccountingInterimInterval',
            'radius_accounting_servers': 'radiusAccountingServers',
            'radius_attribute_for_group_policies': 'radiusAttributeForGroupPolicies',
            'radius_authentication_nas_id': 'radiusAuthenticationNasId',
            'radius_called_station_id': 'radiusCalledStationId',
            'radius_coa_enabled': 'radiusCoaEnabled',
            'radius_failover_policy': 'radiusFailoverPolicy',
            'radius_fallback_enabled': 'radiusFallbackEnabled',
            'radius_guest_vlan_enabled': 'radiusGuestVlanEnabled',
            'radius_guest_vlan_id': 'radiusGuestVlanId',
            'radius_load_balancing_policy': 'radiusLoadBalancingPolicy',
            'radius_override': 'radiusOverride',
            'radius_proxy_enabled': 'radiusProxyEnabled',
            'radius_server_attempts_limit': 'radiusServerAttemptsLimit',
            'radius_server_timeout': 'radiusServerTimeout',
            'radius_servers': 'radiusServers',
            'radius_testing_enabled': 'radiusTestingEnabled',
            'secondary_concentrator_network_id': 'secondaryConcentratorNetworkId',
            'speed_burst': 'speedBurst',
            'splash_guest_sponsor_domains': 'splashGuestSponsorDomains',
            'splash_page': 'splashPage',
            'use_vlan_tagging': 'useVlanTagging',
            'visible': 'visible',
            'vlan_id': 'vlanId',
            'walled_garden_enabled': 'walledGardenEnabled',
            'walled_garden_ranges': 'walledGardenRanges',
            'wpa_encryption_mode': 'wpaEncryptionMode'
        }

        self._active_directory = active_directory
        self._adult_content_filtering_enabled = adult_content_filtering_enabled
        self._ap_tags_and_vlan_ids = ap_tags_and_vlan_ids
        self._auth_mode = auth_mode
        self._availability_tags = availability_tags
        self._available_on_all_aps = available_on_all_aps
        self._band_selection = band_selection
        self._concentrator_network_id = concentrator_network_id
        self._default_vlan_id = default_vlan_id
        self._disassociate_clients_on_vpn_failover = disassociate_clients_on_vpn_failover
        self._dns_rewrite = dns_rewrite
        self._dot11r = dot11r
        self._dot11w = dot11w
        self._enabled = enabled
        self._encryption_mode = encryption_mode
        self._enterprise_admin_access = enterprise_admin_access
        self._gre = gre
        self._ip_assignment_mode = ip_assignment_mode
        self._lan_isolation_enabled = lan_isolation_enabled
        self._ldap = ldap
        self._local_radius = local_radius
        self._mandatory_dhcp_enabled = mandatory_dhcp_enabled
        self._min_bitrate = min_bitrate
        self._name = name
        self._oauth = oauth
        self._per_client_bandwidth_limit_down = per_client_bandwidth_limit_down
        self._per_client_bandwidth_limit_up = per_client_bandwidth_limit_up
        self._per_ssid_bandwidth_limit_down = per_ssid_bandwidth_limit_down
        self._per_ssid_bandwidth_limit_up = per_ssid_bandwidth_limit_up
        self._psk = psk
        self._radius_accounting_enabled = radius_accounting_enabled
        self._radius_accounting_interim_interval = radius_accounting_interim_interval
        self._radius_accounting_servers = radius_accounting_servers
        self._radius_attribute_for_group_policies = radius_attribute_for_group_policies
        self._radius_authentication_nas_id = radius_authentication_nas_id
        self._radius_called_station_id = radius_called_station_id
        self._radius_coa_enabled = radius_coa_enabled
        self._radius_failover_policy = radius_failover_policy
        self._radius_fallback_enabled = radius_fallback_enabled
        self._radius_guest_vlan_enabled = radius_guest_vlan_enabled
        self._radius_guest_vlan_id = radius_guest_vlan_id
        self._radius_load_balancing_policy = radius_load_balancing_policy
        self._radius_override = radius_override
        self._radius_proxy_enabled = radius_proxy_enabled
        self._radius_server_attempts_limit = radius_server_attempts_limit
        self._radius_server_timeout = radius_server_timeout
        self._radius_servers = radius_servers
        self._radius_testing_enabled = radius_testing_enabled
        self._secondary_concentrator_network_id = secondary_concentrator_network_id
        self._speed_burst = speed_burst
        self._splash_guest_sponsor_domains = splash_guest_sponsor_domains
        self._splash_page = splash_page
        self._use_vlan_tagging = use_vlan_tagging
        self._visible = visible
        self._vlan_id = vlan_id
        self._walled_garden_enabled = walled_garden_enabled
        self._walled_garden_ranges = walled_garden_ranges
        self._wpa_encryption_mode = wpa_encryption_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateNetworkWirelessSsidRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateNetworkWirelessSsid_request of this UpdateNetworkWirelessSsidRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_directory(self):
        """Gets the active_directory of this UpdateNetworkWirelessSsidRequest.


        :return: The active_directory of this UpdateNetworkWirelessSsidRequest.
        :rtype: UpdateNetworkWirelessSsidRequestActiveDirectory
        """
        return self._active_directory

    @active_directory.setter
    def active_directory(self, active_directory):
        """Sets the active_directory of this UpdateNetworkWirelessSsidRequest.


        :param active_directory: The active_directory of this UpdateNetworkWirelessSsidRequest.
        :type active_directory: UpdateNetworkWirelessSsidRequestActiveDirectory
        """

        self._active_directory = active_directory

    @property
    def adult_content_filtering_enabled(self):
        """Gets the adult_content_filtering_enabled of this UpdateNetworkWirelessSsidRequest.

        Boolean indicating whether or not adult content will be blocked

        :return: The adult_content_filtering_enabled of this UpdateNetworkWirelessSsidRequest.
        :rtype: bool
        """
        return self._adult_content_filtering_enabled

    @adult_content_filtering_enabled.setter
    def adult_content_filtering_enabled(self, adult_content_filtering_enabled):
        """Sets the adult_content_filtering_enabled of this UpdateNetworkWirelessSsidRequest.

        Boolean indicating whether or not adult content will be blocked

        :param adult_content_filtering_enabled: The adult_content_filtering_enabled of this UpdateNetworkWirelessSsidRequest.
        :type adult_content_filtering_enabled: bool
        """

        self._adult_content_filtering_enabled = adult_content_filtering_enabled

    @property
    def ap_tags_and_vlan_ids(self):
        """Gets the ap_tags_and_vlan_ids of this UpdateNetworkWirelessSsidRequest.

        The list of tags and VLAN IDs used for VLAN tagging. This param is only valid when the ipAssignmentMode is 'Bridge mode' or 'Layer 3 roaming'

        :return: The ap_tags_and_vlan_ids of this UpdateNetworkWirelessSsidRequest.
        :rtype: List[UpdateNetworkWirelessSsidRequestApTagsAndVlanIdsInner]
        """
        return self._ap_tags_and_vlan_ids

    @ap_tags_and_vlan_ids.setter
    def ap_tags_and_vlan_ids(self, ap_tags_and_vlan_ids):
        """Sets the ap_tags_and_vlan_ids of this UpdateNetworkWirelessSsidRequest.

        The list of tags and VLAN IDs used for VLAN tagging. This param is only valid when the ipAssignmentMode is 'Bridge mode' or 'Layer 3 roaming'

        :param ap_tags_and_vlan_ids: The ap_tags_and_vlan_ids of this UpdateNetworkWirelessSsidRequest.
        :type ap_tags_and_vlan_ids: List[UpdateNetworkWirelessSsidRequestApTagsAndVlanIdsInner]
        """

        self._ap_tags_and_vlan_ids = ap_tags_and_vlan_ids

    @property
    def auth_mode(self):
        """Gets the auth_mode of this UpdateNetworkWirelessSsidRequest.

        The association control method for the SSID ('open', 'open-enhanced', 'psk', 'open-with-radius', 'open-with-nac', '8021x-meraki', '8021x-nac', '8021x-radius', '8021x-google', '8021x-localradius', 'ipsk-with-radius' or 'ipsk-without-radius')

        :return: The auth_mode of this UpdateNetworkWirelessSsidRequest.
        :rtype: str
        """
        return self._auth_mode

    @auth_mode.setter
    def auth_mode(self, auth_mode):
        """Sets the auth_mode of this UpdateNetworkWirelessSsidRequest.

        The association control method for the SSID ('open', 'open-enhanced', 'psk', 'open-with-radius', 'open-with-nac', '8021x-meraki', '8021x-nac', '8021x-radius', '8021x-google', '8021x-localradius', 'ipsk-with-radius' or 'ipsk-without-radius')

        :param auth_mode: The auth_mode of this UpdateNetworkWirelessSsidRequest.
        :type auth_mode: str
        """
        allowed_values = ["8021x-google", "8021x-localradius", "8021x-meraki", "8021x-nac", "8021x-radius", "ipsk-with-radius", "ipsk-without-radius", "open", "open-enhanced", "open-with-nac", "open-with-radius", "psk"]  # noqa: E501
        if auth_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `auth_mode` ({0}), must be one of {1}"
                .format(auth_mode, allowed_values)
            )

        self._auth_mode = auth_mode

    @property
    def availability_tags(self):
        """Gets the availability_tags of this UpdateNetworkWirelessSsidRequest.

        Accepts a list of tags for this SSID. If availableOnAllAps is false, then the SSID will only be broadcast by APs with tags matching any of the tags in this list.

        :return: The availability_tags of this UpdateNetworkWirelessSsidRequest.
        :rtype: List[str]
        """
        return self._availability_tags

    @availability_tags.setter
    def availability_tags(self, availability_tags):
        """Sets the availability_tags of this UpdateNetworkWirelessSsidRequest.

        Accepts a list of tags for this SSID. If availableOnAllAps is false, then the SSID will only be broadcast by APs with tags matching any of the tags in this list.

        :param availability_tags: The availability_tags of this UpdateNetworkWirelessSsidRequest.
        :type availability_tags: List[str]
        """

        self._availability_tags = availability_tags

    @property
    def available_on_all_aps(self):
        """Gets the available_on_all_aps of this UpdateNetworkWirelessSsidRequest.

        Boolean indicating whether all APs should broadcast the SSID or if it should be restricted to APs matching any availability tags. Can only be false if the SSID has availability tags.

        :return: The available_on_all_aps of this UpdateNetworkWirelessSsidRequest.
        :rtype: bool
        """
        return self._available_on_all_aps

    @available_on_all_aps.setter
    def available_on_all_aps(self, available_on_all_aps):
        """Sets the available_on_all_aps of this UpdateNetworkWirelessSsidRequest.

        Boolean indicating whether all APs should broadcast the SSID or if it should be restricted to APs matching any availability tags. Can only be false if the SSID has availability tags.

        :param available_on_all_aps: The available_on_all_aps of this UpdateNetworkWirelessSsidRequest.
        :type available_on_all_aps: bool
        """

        self._available_on_all_aps = available_on_all_aps

    @property
    def band_selection(self):
        """Gets the band_selection of this UpdateNetworkWirelessSsidRequest.

        The client-serving radio frequencies of this SSID in the default indoor RF profile. ('Dual band operation', '5 GHz band only' or 'Dual band operation with Band Steering')

        :return: The band_selection of this UpdateNetworkWirelessSsidRequest.
        :rtype: str
        """
        return self._band_selection

    @band_selection.setter
    def band_selection(self, band_selection):
        """Sets the band_selection of this UpdateNetworkWirelessSsidRequest.

        The client-serving radio frequencies of this SSID in the default indoor RF profile. ('Dual band operation', '5 GHz band only' or 'Dual band operation with Band Steering')

        :param band_selection: The band_selection of this UpdateNetworkWirelessSsidRequest.
        :type band_selection: str
        """

        self._band_selection = band_selection

    @property
    def concentrator_network_id(self):
        """Gets the concentrator_network_id of this UpdateNetworkWirelessSsidRequest.

        The concentrator to use when the ipAssignmentMode is 'Layer 3 roaming with a concentrator' or 'VPN'.

        :return: The concentrator_network_id of this UpdateNetworkWirelessSsidRequest.
        :rtype: str
        """
        return self._concentrator_network_id

    @concentrator_network_id.setter
    def concentrator_network_id(self, concentrator_network_id):
        """Sets the concentrator_network_id of this UpdateNetworkWirelessSsidRequest.

        The concentrator to use when the ipAssignmentMode is 'Layer 3 roaming with a concentrator' or 'VPN'.

        :param concentrator_network_id: The concentrator_network_id of this UpdateNetworkWirelessSsidRequest.
        :type concentrator_network_id: str
        """

        self._concentrator_network_id = concentrator_network_id

    @property
    def default_vlan_id(self):
        """Gets the default_vlan_id of this UpdateNetworkWirelessSsidRequest.

        The default VLAN ID used for 'all other APs'. This param is only valid when the ipAssignmentMode is 'Bridge mode' or 'Layer 3 roaming'

        :return: The default_vlan_id of this UpdateNetworkWirelessSsidRequest.
        :rtype: int
        """
        return self._default_vlan_id

    @default_vlan_id.setter
    def default_vlan_id(self, default_vlan_id):
        """Sets the default_vlan_id of this UpdateNetworkWirelessSsidRequest.

        The default VLAN ID used for 'all other APs'. This param is only valid when the ipAssignmentMode is 'Bridge mode' or 'Layer 3 roaming'

        :param default_vlan_id: The default_vlan_id of this UpdateNetworkWirelessSsidRequest.
        :type default_vlan_id: int
        """

        self._default_vlan_id = default_vlan_id

    @property
    def disassociate_clients_on_vpn_failover(self):
        """Gets the disassociate_clients_on_vpn_failover of this UpdateNetworkWirelessSsidRequest.

        Disassociate clients when 'VPN' concentrator failover occurs in order to trigger clients to re-associate and generate new DHCP requests. This param is only valid if ipAssignmentMode is 'VPN'.

        :return: The disassociate_clients_on_vpn_failover of this UpdateNetworkWirelessSsidRequest.
        :rtype: bool
        """
        return self._disassociate_clients_on_vpn_failover

    @disassociate_clients_on_vpn_failover.setter
    def disassociate_clients_on_vpn_failover(self, disassociate_clients_on_vpn_failover):
        """Sets the disassociate_clients_on_vpn_failover of this UpdateNetworkWirelessSsidRequest.

        Disassociate clients when 'VPN' concentrator failover occurs in order to trigger clients to re-associate and generate new DHCP requests. This param is only valid if ipAssignmentMode is 'VPN'.

        :param disassociate_clients_on_vpn_failover: The disassociate_clients_on_vpn_failover of this UpdateNetworkWirelessSsidRequest.
        :type disassociate_clients_on_vpn_failover: bool
        """

        self._disassociate_clients_on_vpn_failover = disassociate_clients_on_vpn_failover

    @property
    def dns_rewrite(self):
        """Gets the dns_rewrite of this UpdateNetworkWirelessSsidRequest.


        :return: The dns_rewrite of this UpdateNetworkWirelessSsidRequest.
        :rtype: UpdateNetworkWirelessSsidRequestDnsRewrite
        """
        return self._dns_rewrite

    @dns_rewrite.setter
    def dns_rewrite(self, dns_rewrite):
        """Sets the dns_rewrite of this UpdateNetworkWirelessSsidRequest.


        :param dns_rewrite: The dns_rewrite of this UpdateNetworkWirelessSsidRequest.
        :type dns_rewrite: UpdateNetworkWirelessSsidRequestDnsRewrite
        """

        self._dns_rewrite = dns_rewrite

    @property
    def dot11r(self):
        """Gets the dot11r of this UpdateNetworkWirelessSsidRequest.


        :return: The dot11r of this UpdateNetworkWirelessSsidRequest.
        :rtype: UpdateNetworkWirelessSsidRequestDot11r
        """
        return self._dot11r

    @dot11r.setter
    def dot11r(self, dot11r):
        """Sets the dot11r of this UpdateNetworkWirelessSsidRequest.


        :param dot11r: The dot11r of this UpdateNetworkWirelessSsidRequest.
        :type dot11r: UpdateNetworkWirelessSsidRequestDot11r
        """

        self._dot11r = dot11r

    @property
    def dot11w(self):
        """Gets the dot11w of this UpdateNetworkWirelessSsidRequest.


        :return: The dot11w of this UpdateNetworkWirelessSsidRequest.
        :rtype: UpdateNetworkWirelessSsidRequestDot11w
        """
        return self._dot11w

    @dot11w.setter
    def dot11w(self, dot11w):
        """Sets the dot11w of this UpdateNetworkWirelessSsidRequest.


        :param dot11w: The dot11w of this UpdateNetworkWirelessSsidRequest.
        :type dot11w: UpdateNetworkWirelessSsidRequestDot11w
        """

        self._dot11w = dot11w

    @property
    def enabled(self):
        """Gets the enabled of this UpdateNetworkWirelessSsidRequest.

        Whether or not the SSID is enabled

        :return: The enabled of this UpdateNetworkWirelessSsidRequest.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this UpdateNetworkWirelessSsidRequest.

        Whether or not the SSID is enabled

        :param enabled: The enabled of this UpdateNetworkWirelessSsidRequest.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def encryption_mode(self):
        """Gets the encryption_mode of this UpdateNetworkWirelessSsidRequest.

        The psk encryption mode for the SSID ('wep' or 'wpa'). This param is only valid if the authMode is 'psk'

        :return: The encryption_mode of this UpdateNetworkWirelessSsidRequest.
        :rtype: str
        """
        return self._encryption_mode

    @encryption_mode.setter
    def encryption_mode(self, encryption_mode):
        """Sets the encryption_mode of this UpdateNetworkWirelessSsidRequest.

        The psk encryption mode for the SSID ('wep' or 'wpa'). This param is only valid if the authMode is 'psk'

        :param encryption_mode: The encryption_mode of this UpdateNetworkWirelessSsidRequest.
        :type encryption_mode: str
        """
        allowed_values = ["wep", "wpa"]  # noqa: E501
        if encryption_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `encryption_mode` ({0}), must be one of {1}"
                .format(encryption_mode, allowed_values)
            )

        self._encryption_mode = encryption_mode

    @property
    def enterprise_admin_access(self):
        """Gets the enterprise_admin_access of this UpdateNetworkWirelessSsidRequest.

        Whether or not an SSID is accessible by 'enterprise' administrators ('access disabled' or 'access enabled')

        :return: The enterprise_admin_access of this UpdateNetworkWirelessSsidRequest.
        :rtype: str
        """
        return self._enterprise_admin_access

    @enterprise_admin_access.setter
    def enterprise_admin_access(self, enterprise_admin_access):
        """Sets the enterprise_admin_access of this UpdateNetworkWirelessSsidRequest.

        Whether or not an SSID is accessible by 'enterprise' administrators ('access disabled' or 'access enabled')

        :param enterprise_admin_access: The enterprise_admin_access of this UpdateNetworkWirelessSsidRequest.
        :type enterprise_admin_access: str
        """
        allowed_values = ["access disabled", "access enabled"]  # noqa: E501
        if enterprise_admin_access not in allowed_values:
            raise ValueError(
                "Invalid value for `enterprise_admin_access` ({0}), must be one of {1}"
                .format(enterprise_admin_access, allowed_values)
            )

        self._enterprise_admin_access = enterprise_admin_access

    @property
    def gre(self):
        """Gets the gre of this UpdateNetworkWirelessSsidRequest.


        :return: The gre of this UpdateNetworkWirelessSsidRequest.
        :rtype: UpdateNetworkWirelessSsidRequestGre
        """
        return self._gre

    @gre.setter
    def gre(self, gre):
        """Sets the gre of this UpdateNetworkWirelessSsidRequest.


        :param gre: The gre of this UpdateNetworkWirelessSsidRequest.
        :type gre: UpdateNetworkWirelessSsidRequestGre
        """

        self._gre = gre

    @property
    def ip_assignment_mode(self):
        """Gets the ip_assignment_mode of this UpdateNetworkWirelessSsidRequest.

        The client IP assignment mode ('NAT mode', 'Bridge mode', 'Layer 3 roaming', 'Ethernet over GRE', 'Layer 3 roaming with a concentrator' or 'VPN')

        :return: The ip_assignment_mode of this UpdateNetworkWirelessSsidRequest.
        :rtype: str
        """
        return self._ip_assignment_mode

    @ip_assignment_mode.setter
    def ip_assignment_mode(self, ip_assignment_mode):
        """Sets the ip_assignment_mode of this UpdateNetworkWirelessSsidRequest.

        The client IP assignment mode ('NAT mode', 'Bridge mode', 'Layer 3 roaming', 'Ethernet over GRE', 'Layer 3 roaming with a concentrator' or 'VPN')

        :param ip_assignment_mode: The ip_assignment_mode of this UpdateNetworkWirelessSsidRequest.
        :type ip_assignment_mode: str
        """

        self._ip_assignment_mode = ip_assignment_mode

    @property
    def lan_isolation_enabled(self):
        """Gets the lan_isolation_enabled of this UpdateNetworkWirelessSsidRequest.

        Boolean indicating whether Layer 2 LAN isolation should be enabled or disabled. Only configurable when ipAssignmentMode is 'Bridge mode'.

        :return: The lan_isolation_enabled of this UpdateNetworkWirelessSsidRequest.
        :rtype: bool
        """
        return self._lan_isolation_enabled

    @lan_isolation_enabled.setter
    def lan_isolation_enabled(self, lan_isolation_enabled):
        """Sets the lan_isolation_enabled of this UpdateNetworkWirelessSsidRequest.

        Boolean indicating whether Layer 2 LAN isolation should be enabled or disabled. Only configurable when ipAssignmentMode is 'Bridge mode'.

        :param lan_isolation_enabled: The lan_isolation_enabled of this UpdateNetworkWirelessSsidRequest.
        :type lan_isolation_enabled: bool
        """

        self._lan_isolation_enabled = lan_isolation_enabled

    @property
    def ldap(self):
        """Gets the ldap of this UpdateNetworkWirelessSsidRequest.


        :return: The ldap of this UpdateNetworkWirelessSsidRequest.
        :rtype: UpdateNetworkWirelessSsidRequestLdap
        """
        return self._ldap

    @ldap.setter
    def ldap(self, ldap):
        """Sets the ldap of this UpdateNetworkWirelessSsidRequest.


        :param ldap: The ldap of this UpdateNetworkWirelessSsidRequest.
        :type ldap: UpdateNetworkWirelessSsidRequestLdap
        """

        self._ldap = ldap

    @property
    def local_radius(self):
        """Gets the local_radius of this UpdateNetworkWirelessSsidRequest.


        :return: The local_radius of this UpdateNetworkWirelessSsidRequest.
        :rtype: UpdateNetworkWirelessSsidRequestLocalRadius
        """
        return self._local_radius

    @local_radius.setter
    def local_radius(self, local_radius):
        """Sets the local_radius of this UpdateNetworkWirelessSsidRequest.


        :param local_radius: The local_radius of this UpdateNetworkWirelessSsidRequest.
        :type local_radius: UpdateNetworkWirelessSsidRequestLocalRadius
        """

        self._local_radius = local_radius

    @property
    def mandatory_dhcp_enabled(self):
        """Gets the mandatory_dhcp_enabled of this UpdateNetworkWirelessSsidRequest.

        If true, Mandatory DHCP will enforce that clients connecting to this SSID must use the IP address assigned by the DHCP server. Clients who use a static IP address won't be able to associate.

        :return: The mandatory_dhcp_enabled of this UpdateNetworkWirelessSsidRequest.
        :rtype: bool
        """
        return self._mandatory_dhcp_enabled

    @mandatory_dhcp_enabled.setter
    def mandatory_dhcp_enabled(self, mandatory_dhcp_enabled):
        """Sets the mandatory_dhcp_enabled of this UpdateNetworkWirelessSsidRequest.

        If true, Mandatory DHCP will enforce that clients connecting to this SSID must use the IP address assigned by the DHCP server. Clients who use a static IP address won't be able to associate.

        :param mandatory_dhcp_enabled: The mandatory_dhcp_enabled of this UpdateNetworkWirelessSsidRequest.
        :type mandatory_dhcp_enabled: bool
        """

        self._mandatory_dhcp_enabled = mandatory_dhcp_enabled

    @property
    def min_bitrate(self):
        """Gets the min_bitrate of this UpdateNetworkWirelessSsidRequest.

        The minimum bitrate in Mbps of this SSID in the default indoor RF profile. ('1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54')

        :return: The min_bitrate of this UpdateNetworkWirelessSsidRequest.
        :rtype: float
        """
        return self._min_bitrate

    @min_bitrate.setter
    def min_bitrate(self, min_bitrate):
        """Sets the min_bitrate of this UpdateNetworkWirelessSsidRequest.

        The minimum bitrate in Mbps of this SSID in the default indoor RF profile. ('1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54')

        :param min_bitrate: The min_bitrate of this UpdateNetworkWirelessSsidRequest.
        :type min_bitrate: float
        """

        self._min_bitrate = min_bitrate

    @property
    def name(self):
        """Gets the name of this UpdateNetworkWirelessSsidRequest.

        The name of the SSID

        :return: The name of this UpdateNetworkWirelessSsidRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateNetworkWirelessSsidRequest.

        The name of the SSID

        :param name: The name of this UpdateNetworkWirelessSsidRequest.
        :type name: str
        """

        self._name = name

    @property
    def oauth(self):
        """Gets the oauth of this UpdateNetworkWirelessSsidRequest.


        :return: The oauth of this UpdateNetworkWirelessSsidRequest.
        :rtype: UpdateNetworkWirelessSsidRequestOauth
        """
        return self._oauth

    @oauth.setter
    def oauth(self, oauth):
        """Sets the oauth of this UpdateNetworkWirelessSsidRequest.


        :param oauth: The oauth of this UpdateNetworkWirelessSsidRequest.
        :type oauth: UpdateNetworkWirelessSsidRequestOauth
        """

        self._oauth = oauth

    @property
    def per_client_bandwidth_limit_down(self):
        """Gets the per_client_bandwidth_limit_down of this UpdateNetworkWirelessSsidRequest.

        The download bandwidth limit in Kbps. (0 represents no limit.)

        :return: The per_client_bandwidth_limit_down of this UpdateNetworkWirelessSsidRequest.
        :rtype: int
        """
        return self._per_client_bandwidth_limit_down

    @per_client_bandwidth_limit_down.setter
    def per_client_bandwidth_limit_down(self, per_client_bandwidth_limit_down):
        """Sets the per_client_bandwidth_limit_down of this UpdateNetworkWirelessSsidRequest.

        The download bandwidth limit in Kbps. (0 represents no limit.)

        :param per_client_bandwidth_limit_down: The per_client_bandwidth_limit_down of this UpdateNetworkWirelessSsidRequest.
        :type per_client_bandwidth_limit_down: int
        """

        self._per_client_bandwidth_limit_down = per_client_bandwidth_limit_down

    @property
    def per_client_bandwidth_limit_up(self):
        """Gets the per_client_bandwidth_limit_up of this UpdateNetworkWirelessSsidRequest.

        The upload bandwidth limit in Kbps. (0 represents no limit.)

        :return: The per_client_bandwidth_limit_up of this UpdateNetworkWirelessSsidRequest.
        :rtype: int
        """
        return self._per_client_bandwidth_limit_up

    @per_client_bandwidth_limit_up.setter
    def per_client_bandwidth_limit_up(self, per_client_bandwidth_limit_up):
        """Sets the per_client_bandwidth_limit_up of this UpdateNetworkWirelessSsidRequest.

        The upload bandwidth limit in Kbps. (0 represents no limit.)

        :param per_client_bandwidth_limit_up: The per_client_bandwidth_limit_up of this UpdateNetworkWirelessSsidRequest.
        :type per_client_bandwidth_limit_up: int
        """

        self._per_client_bandwidth_limit_up = per_client_bandwidth_limit_up

    @property
    def per_ssid_bandwidth_limit_down(self):
        """Gets the per_ssid_bandwidth_limit_down of this UpdateNetworkWirelessSsidRequest.

        The total download bandwidth limit in Kbps. (0 represents no limit.)

        :return: The per_ssid_bandwidth_limit_down of this UpdateNetworkWirelessSsidRequest.
        :rtype: int
        """
        return self._per_ssid_bandwidth_limit_down

    @per_ssid_bandwidth_limit_down.setter
    def per_ssid_bandwidth_limit_down(self, per_ssid_bandwidth_limit_down):
        """Sets the per_ssid_bandwidth_limit_down of this UpdateNetworkWirelessSsidRequest.

        The total download bandwidth limit in Kbps. (0 represents no limit.)

        :param per_ssid_bandwidth_limit_down: The per_ssid_bandwidth_limit_down of this UpdateNetworkWirelessSsidRequest.
        :type per_ssid_bandwidth_limit_down: int
        """

        self._per_ssid_bandwidth_limit_down = per_ssid_bandwidth_limit_down

    @property
    def per_ssid_bandwidth_limit_up(self):
        """Gets the per_ssid_bandwidth_limit_up of this UpdateNetworkWirelessSsidRequest.

        The total upload bandwidth limit in Kbps. (0 represents no limit.)

        :return: The per_ssid_bandwidth_limit_up of this UpdateNetworkWirelessSsidRequest.
        :rtype: int
        """
        return self._per_ssid_bandwidth_limit_up

    @per_ssid_bandwidth_limit_up.setter
    def per_ssid_bandwidth_limit_up(self, per_ssid_bandwidth_limit_up):
        """Sets the per_ssid_bandwidth_limit_up of this UpdateNetworkWirelessSsidRequest.

        The total upload bandwidth limit in Kbps. (0 represents no limit.)

        :param per_ssid_bandwidth_limit_up: The per_ssid_bandwidth_limit_up of this UpdateNetworkWirelessSsidRequest.
        :type per_ssid_bandwidth_limit_up: int
        """

        self._per_ssid_bandwidth_limit_up = per_ssid_bandwidth_limit_up

    @property
    def psk(self):
        """Gets the psk of this UpdateNetworkWirelessSsidRequest.

        The passkey for the SSID. This param is only valid if the authMode is 'psk'

        :return: The psk of this UpdateNetworkWirelessSsidRequest.
        :rtype: str
        """
        return self._psk

    @psk.setter
    def psk(self, psk):
        """Sets the psk of this UpdateNetworkWirelessSsidRequest.

        The passkey for the SSID. This param is only valid if the authMode is 'psk'

        :param psk: The psk of this UpdateNetworkWirelessSsidRequest.
        :type psk: str
        """

        self._psk = psk

    @property
    def radius_accounting_enabled(self):
        """Gets the radius_accounting_enabled of this UpdateNetworkWirelessSsidRequest.

        Whether or not RADIUS accounting is enabled. This param is only valid if the authMode is 'open-with-radius', '8021x-radius' or 'ipsk-with-radius'

        :return: The radius_accounting_enabled of this UpdateNetworkWirelessSsidRequest.
        :rtype: bool
        """
        return self._radius_accounting_enabled

    @radius_accounting_enabled.setter
    def radius_accounting_enabled(self, radius_accounting_enabled):
        """Sets the radius_accounting_enabled of this UpdateNetworkWirelessSsidRequest.

        Whether or not RADIUS accounting is enabled. This param is only valid if the authMode is 'open-with-radius', '8021x-radius' or 'ipsk-with-radius'

        :param radius_accounting_enabled: The radius_accounting_enabled of this UpdateNetworkWirelessSsidRequest.
        :type radius_accounting_enabled: bool
        """

        self._radius_accounting_enabled = radius_accounting_enabled

    @property
    def radius_accounting_interim_interval(self):
        """Gets the radius_accounting_interim_interval of this UpdateNetworkWirelessSsidRequest.

        The interval (in seconds) in which accounting information is updated and sent to the RADIUS accounting server.

        :return: The radius_accounting_interim_interval of this UpdateNetworkWirelessSsidRequest.
        :rtype: int
        """
        return self._radius_accounting_interim_interval

    @radius_accounting_interim_interval.setter
    def radius_accounting_interim_interval(self, radius_accounting_interim_interval):
        """Sets the radius_accounting_interim_interval of this UpdateNetworkWirelessSsidRequest.

        The interval (in seconds) in which accounting information is updated and sent to the RADIUS accounting server.

        :param radius_accounting_interim_interval: The radius_accounting_interim_interval of this UpdateNetworkWirelessSsidRequest.
        :type radius_accounting_interim_interval: int
        """

        self._radius_accounting_interim_interval = radius_accounting_interim_interval

    @property
    def radius_accounting_servers(self):
        """Gets the radius_accounting_servers of this UpdateNetworkWirelessSsidRequest.

        The RADIUS accounting 802.1X servers to be used for authentication. This param is only valid if the authMode is 'open-with-radius', '8021x-radius' or 'ipsk-with-radius' and radiusAccountingEnabled is 'true'

        :return: The radius_accounting_servers of this UpdateNetworkWirelessSsidRequest.
        :rtype: List[UpdateNetworkWirelessSsidRequestRadiusAccountingServersInner]
        """
        return self._radius_accounting_servers

    @radius_accounting_servers.setter
    def radius_accounting_servers(self, radius_accounting_servers):
        """Sets the radius_accounting_servers of this UpdateNetworkWirelessSsidRequest.

        The RADIUS accounting 802.1X servers to be used for authentication. This param is only valid if the authMode is 'open-with-radius', '8021x-radius' or 'ipsk-with-radius' and radiusAccountingEnabled is 'true'

        :param radius_accounting_servers: The radius_accounting_servers of this UpdateNetworkWirelessSsidRequest.
        :type radius_accounting_servers: List[UpdateNetworkWirelessSsidRequestRadiusAccountingServersInner]
        """

        self._radius_accounting_servers = radius_accounting_servers

    @property
    def radius_attribute_for_group_policies(self):
        """Gets the radius_attribute_for_group_policies of this UpdateNetworkWirelessSsidRequest.

        Specify the RADIUS attribute used to look up group policies ('Filter-Id', 'Reply-Message', 'Airespace-ACL-Name' or 'Aruba-User-Role'). Access points must receive this attribute in the RADIUS Access-Accept message

        :return: The radius_attribute_for_group_policies of this UpdateNetworkWirelessSsidRequest.
        :rtype: str
        """
        return self._radius_attribute_for_group_policies

    @radius_attribute_for_group_policies.setter
    def radius_attribute_for_group_policies(self, radius_attribute_for_group_policies):
        """Sets the radius_attribute_for_group_policies of this UpdateNetworkWirelessSsidRequest.

        Specify the RADIUS attribute used to look up group policies ('Filter-Id', 'Reply-Message', 'Airespace-ACL-Name' or 'Aruba-User-Role'). Access points must receive this attribute in the RADIUS Access-Accept message

        :param radius_attribute_for_group_policies: The radius_attribute_for_group_policies of this UpdateNetworkWirelessSsidRequest.
        :type radius_attribute_for_group_policies: str
        """
        allowed_values = ["Airespace-ACL-Name", "Aruba-User-Role", "Filter-Id", "Reply-Message"]  # noqa: E501
        if radius_attribute_for_group_policies not in allowed_values:
            raise ValueError(
                "Invalid value for `radius_attribute_for_group_policies` ({0}), must be one of {1}"
                .format(radius_attribute_for_group_policies, allowed_values)
            )

        self._radius_attribute_for_group_policies = radius_attribute_for_group_policies

    @property
    def radius_authentication_nas_id(self):
        """Gets the radius_authentication_nas_id of this UpdateNetworkWirelessSsidRequest.

        The template of the NAS identifier to be used for RADIUS authentication (ex. $NODE_MAC$:$VAP_NUM$).

        :return: The radius_authentication_nas_id of this UpdateNetworkWirelessSsidRequest.
        :rtype: str
        """
        return self._radius_authentication_nas_id

    @radius_authentication_nas_id.setter
    def radius_authentication_nas_id(self, radius_authentication_nas_id):
        """Sets the radius_authentication_nas_id of this UpdateNetworkWirelessSsidRequest.

        The template of the NAS identifier to be used for RADIUS authentication (ex. $NODE_MAC$:$VAP_NUM$).

        :param radius_authentication_nas_id: The radius_authentication_nas_id of this UpdateNetworkWirelessSsidRequest.
        :type radius_authentication_nas_id: str
        """

        self._radius_authentication_nas_id = radius_authentication_nas_id

    @property
    def radius_called_station_id(self):
        """Gets the radius_called_station_id of this UpdateNetworkWirelessSsidRequest.

        The template of the called station identifier to be used for RADIUS (ex. $NODE_MAC$:$VAP_NUM$).

        :return: The radius_called_station_id of this UpdateNetworkWirelessSsidRequest.
        :rtype: str
        """
        return self._radius_called_station_id

    @radius_called_station_id.setter
    def radius_called_station_id(self, radius_called_station_id):
        """Sets the radius_called_station_id of this UpdateNetworkWirelessSsidRequest.

        The template of the called station identifier to be used for RADIUS (ex. $NODE_MAC$:$VAP_NUM$).

        :param radius_called_station_id: The radius_called_station_id of this UpdateNetworkWirelessSsidRequest.
        :type radius_called_station_id: str
        """

        self._radius_called_station_id = radius_called_station_id

    @property
    def radius_coa_enabled(self):
        """Gets the radius_coa_enabled of this UpdateNetworkWirelessSsidRequest.

        If true, Meraki devices will act as a RADIUS Dynamic Authorization Server and will respond to RADIUS Change-of-Authorization and Disconnect messages sent by the RADIUS server.

        :return: The radius_coa_enabled of this UpdateNetworkWirelessSsidRequest.
        :rtype: bool
        """
        return self._radius_coa_enabled

    @radius_coa_enabled.setter
    def radius_coa_enabled(self, radius_coa_enabled):
        """Sets the radius_coa_enabled of this UpdateNetworkWirelessSsidRequest.

        If true, Meraki devices will act as a RADIUS Dynamic Authorization Server and will respond to RADIUS Change-of-Authorization and Disconnect messages sent by the RADIUS server.

        :param radius_coa_enabled: The radius_coa_enabled of this UpdateNetworkWirelessSsidRequest.
        :type radius_coa_enabled: bool
        """

        self._radius_coa_enabled = radius_coa_enabled

    @property
    def radius_failover_policy(self):
        """Gets the radius_failover_policy of this UpdateNetworkWirelessSsidRequest.

        This policy determines how authentication requests should be handled in the event that all of the configured RADIUS servers are unreachable ('Deny access' or 'Allow access')

        :return: The radius_failover_policy of this UpdateNetworkWirelessSsidRequest.
        :rtype: str
        """
        return self._radius_failover_policy

    @radius_failover_policy.setter
    def radius_failover_policy(self, radius_failover_policy):
        """Sets the radius_failover_policy of this UpdateNetworkWirelessSsidRequest.

        This policy determines how authentication requests should be handled in the event that all of the configured RADIUS servers are unreachable ('Deny access' or 'Allow access')

        :param radius_failover_policy: The radius_failover_policy of this UpdateNetworkWirelessSsidRequest.
        :type radius_failover_policy: str
        """
        allowed_values = ["Allow access", "Deny access"]  # noqa: E501
        if radius_failover_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `radius_failover_policy` ({0}), must be one of {1}"
                .format(radius_failover_policy, allowed_values)
            )

        self._radius_failover_policy = radius_failover_policy

    @property
    def radius_fallback_enabled(self):
        """Gets the radius_fallback_enabled of this UpdateNetworkWirelessSsidRequest.

        Whether or not higher priority RADIUS servers should be retried after 60 seconds.

        :return: The radius_fallback_enabled of this UpdateNetworkWirelessSsidRequest.
        :rtype: bool
        """
        return self._radius_fallback_enabled

    @radius_fallback_enabled.setter
    def radius_fallback_enabled(self, radius_fallback_enabled):
        """Sets the radius_fallback_enabled of this UpdateNetworkWirelessSsidRequest.

        Whether or not higher priority RADIUS servers should be retried after 60 seconds.

        :param radius_fallback_enabled: The radius_fallback_enabled of this UpdateNetworkWirelessSsidRequest.
        :type radius_fallback_enabled: bool
        """

        self._radius_fallback_enabled = radius_fallback_enabled

    @property
    def radius_guest_vlan_enabled(self):
        """Gets the radius_guest_vlan_enabled of this UpdateNetworkWirelessSsidRequest.

        Whether or not RADIUS Guest VLAN is enabled. This param is only valid if the authMode is 'open-with-radius' and addressing mode is not set to 'isolated' or 'nat' mode

        :return: The radius_guest_vlan_enabled of this UpdateNetworkWirelessSsidRequest.
        :rtype: bool
        """
        return self._radius_guest_vlan_enabled

    @radius_guest_vlan_enabled.setter
    def radius_guest_vlan_enabled(self, radius_guest_vlan_enabled):
        """Sets the radius_guest_vlan_enabled of this UpdateNetworkWirelessSsidRequest.

        Whether or not RADIUS Guest VLAN is enabled. This param is only valid if the authMode is 'open-with-radius' and addressing mode is not set to 'isolated' or 'nat' mode

        :param radius_guest_vlan_enabled: The radius_guest_vlan_enabled of this UpdateNetworkWirelessSsidRequest.
        :type radius_guest_vlan_enabled: bool
        """

        self._radius_guest_vlan_enabled = radius_guest_vlan_enabled

    @property
    def radius_guest_vlan_id(self):
        """Gets the radius_guest_vlan_id of this UpdateNetworkWirelessSsidRequest.

        VLAN ID of the RADIUS Guest VLAN. This param is only valid if the authMode is 'open-with-radius' and addressing mode is not set to 'isolated' or 'nat' mode

        :return: The radius_guest_vlan_id of this UpdateNetworkWirelessSsidRequest.
        :rtype: int
        """
        return self._radius_guest_vlan_id

    @radius_guest_vlan_id.setter
    def radius_guest_vlan_id(self, radius_guest_vlan_id):
        """Sets the radius_guest_vlan_id of this UpdateNetworkWirelessSsidRequest.

        VLAN ID of the RADIUS Guest VLAN. This param is only valid if the authMode is 'open-with-radius' and addressing mode is not set to 'isolated' or 'nat' mode

        :param radius_guest_vlan_id: The radius_guest_vlan_id of this UpdateNetworkWirelessSsidRequest.
        :type radius_guest_vlan_id: int
        """

        self._radius_guest_vlan_id = radius_guest_vlan_id

    @property
    def radius_load_balancing_policy(self):
        """Gets the radius_load_balancing_policy of this UpdateNetworkWirelessSsidRequest.

        This policy determines which RADIUS server will be contacted first in an authentication attempt and the ordering of any necessary retry attempts ('Strict priority order' or 'Round robin')

        :return: The radius_load_balancing_policy of this UpdateNetworkWirelessSsidRequest.
        :rtype: str
        """
        return self._radius_load_balancing_policy

    @radius_load_balancing_policy.setter
    def radius_load_balancing_policy(self, radius_load_balancing_policy):
        """Sets the radius_load_balancing_policy of this UpdateNetworkWirelessSsidRequest.

        This policy determines which RADIUS server will be contacted first in an authentication attempt and the ordering of any necessary retry attempts ('Strict priority order' or 'Round robin')

        :param radius_load_balancing_policy: The radius_load_balancing_policy of this UpdateNetworkWirelessSsidRequest.
        :type radius_load_balancing_policy: str
        """
        allowed_values = ["Round robin", "Strict priority order"]  # noqa: E501
        if radius_load_balancing_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `radius_load_balancing_policy` ({0}), must be one of {1}"
                .format(radius_load_balancing_policy, allowed_values)
            )

        self._radius_load_balancing_policy = radius_load_balancing_policy

    @property
    def radius_override(self):
        """Gets the radius_override of this UpdateNetworkWirelessSsidRequest.

        If true, the RADIUS response can override VLAN tag. This is not valid when ipAssignmentMode is 'NAT mode'.

        :return: The radius_override of this UpdateNetworkWirelessSsidRequest.
        :rtype: bool
        """
        return self._radius_override

    @radius_override.setter
    def radius_override(self, radius_override):
        """Sets the radius_override of this UpdateNetworkWirelessSsidRequest.

        If true, the RADIUS response can override VLAN tag. This is not valid when ipAssignmentMode is 'NAT mode'.

        :param radius_override: The radius_override of this UpdateNetworkWirelessSsidRequest.
        :type radius_override: bool
        """

        self._radius_override = radius_override

    @property
    def radius_proxy_enabled(self):
        """Gets the radius_proxy_enabled of this UpdateNetworkWirelessSsidRequest.

        If true, Meraki devices will proxy RADIUS messages through the Meraki cloud to the configured RADIUS auth and accounting servers.

        :return: The radius_proxy_enabled of this UpdateNetworkWirelessSsidRequest.
        :rtype: bool
        """
        return self._radius_proxy_enabled

    @radius_proxy_enabled.setter
    def radius_proxy_enabled(self, radius_proxy_enabled):
        """Sets the radius_proxy_enabled of this UpdateNetworkWirelessSsidRequest.

        If true, Meraki devices will proxy RADIUS messages through the Meraki cloud to the configured RADIUS auth and accounting servers.

        :param radius_proxy_enabled: The radius_proxy_enabled of this UpdateNetworkWirelessSsidRequest.
        :type radius_proxy_enabled: bool
        """

        self._radius_proxy_enabled = radius_proxy_enabled

    @property
    def radius_server_attempts_limit(self):
        """Gets the radius_server_attempts_limit of this UpdateNetworkWirelessSsidRequest.

        The maximum number of transmit attempts after which a RADIUS server is failed over (must be between 1-5).

        :return: The radius_server_attempts_limit of this UpdateNetworkWirelessSsidRequest.
        :rtype: int
        """
        return self._radius_server_attempts_limit

    @radius_server_attempts_limit.setter
    def radius_server_attempts_limit(self, radius_server_attempts_limit):
        """Sets the radius_server_attempts_limit of this UpdateNetworkWirelessSsidRequest.

        The maximum number of transmit attempts after which a RADIUS server is failed over (must be between 1-5).

        :param radius_server_attempts_limit: The radius_server_attempts_limit of this UpdateNetworkWirelessSsidRequest.
        :type radius_server_attempts_limit: int
        """

        self._radius_server_attempts_limit = radius_server_attempts_limit

    @property
    def radius_server_timeout(self):
        """Gets the radius_server_timeout of this UpdateNetworkWirelessSsidRequest.

        The amount of time for which a RADIUS client waits for a reply from the RADIUS server (must be between 1-10 seconds).

        :return: The radius_server_timeout of this UpdateNetworkWirelessSsidRequest.
        :rtype: int
        """
        return self._radius_server_timeout

    @radius_server_timeout.setter
    def radius_server_timeout(self, radius_server_timeout):
        """Sets the radius_server_timeout of this UpdateNetworkWirelessSsidRequest.

        The amount of time for which a RADIUS client waits for a reply from the RADIUS server (must be between 1-10 seconds).

        :param radius_server_timeout: The radius_server_timeout of this UpdateNetworkWirelessSsidRequest.
        :type radius_server_timeout: int
        """

        self._radius_server_timeout = radius_server_timeout

    @property
    def radius_servers(self):
        """Gets the radius_servers of this UpdateNetworkWirelessSsidRequest.

        The RADIUS 802.1X servers to be used for authentication. This param is only valid if the authMode is 'open-with-radius', '8021x-radius' or 'ipsk-with-radius'

        :return: The radius_servers of this UpdateNetworkWirelessSsidRequest.
        :rtype: List[UpdateNetworkWirelessSsidRequestRadiusServersInner]
        """
        return self._radius_servers

    @radius_servers.setter
    def radius_servers(self, radius_servers):
        """Sets the radius_servers of this UpdateNetworkWirelessSsidRequest.

        The RADIUS 802.1X servers to be used for authentication. This param is only valid if the authMode is 'open-with-radius', '8021x-radius' or 'ipsk-with-radius'

        :param radius_servers: The radius_servers of this UpdateNetworkWirelessSsidRequest.
        :type radius_servers: List[UpdateNetworkWirelessSsidRequestRadiusServersInner]
        """

        self._radius_servers = radius_servers

    @property
    def radius_testing_enabled(self):
        """Gets the radius_testing_enabled of this UpdateNetworkWirelessSsidRequest.

        If true, Meraki devices will periodically send Access-Request messages to configured RADIUS servers using identity 'meraki_8021x_test' to ensure that the RADIUS servers are reachable.

        :return: The radius_testing_enabled of this UpdateNetworkWirelessSsidRequest.
        :rtype: bool
        """
        return self._radius_testing_enabled

    @radius_testing_enabled.setter
    def radius_testing_enabled(self, radius_testing_enabled):
        """Sets the radius_testing_enabled of this UpdateNetworkWirelessSsidRequest.

        If true, Meraki devices will periodically send Access-Request messages to configured RADIUS servers using identity 'meraki_8021x_test' to ensure that the RADIUS servers are reachable.

        :param radius_testing_enabled: The radius_testing_enabled of this UpdateNetworkWirelessSsidRequest.
        :type radius_testing_enabled: bool
        """

        self._radius_testing_enabled = radius_testing_enabled

    @property
    def secondary_concentrator_network_id(self):
        """Gets the secondary_concentrator_network_id of this UpdateNetworkWirelessSsidRequest.

        The secondary concentrator to use when the ipAssignmentMode is 'VPN'. If configured, the APs will switch to using this concentrator if the primary concentrator is unreachable. This param is optional. ('disabled' represents no secondary concentrator.)

        :return: The secondary_concentrator_network_id of this UpdateNetworkWirelessSsidRequest.
        :rtype: str
        """
        return self._secondary_concentrator_network_id

    @secondary_concentrator_network_id.setter
    def secondary_concentrator_network_id(self, secondary_concentrator_network_id):
        """Sets the secondary_concentrator_network_id of this UpdateNetworkWirelessSsidRequest.

        The secondary concentrator to use when the ipAssignmentMode is 'VPN'. If configured, the APs will switch to using this concentrator if the primary concentrator is unreachable. This param is optional. ('disabled' represents no secondary concentrator.)

        :param secondary_concentrator_network_id: The secondary_concentrator_network_id of this UpdateNetworkWirelessSsidRequest.
        :type secondary_concentrator_network_id: str
        """

        self._secondary_concentrator_network_id = secondary_concentrator_network_id

    @property
    def speed_burst(self):
        """Gets the speed_burst of this UpdateNetworkWirelessSsidRequest.


        :return: The speed_burst of this UpdateNetworkWirelessSsidRequest.
        :rtype: UpdateNetworkWirelessSsidRequestSpeedBurst
        """
        return self._speed_burst

    @speed_burst.setter
    def speed_burst(self, speed_burst):
        """Sets the speed_burst of this UpdateNetworkWirelessSsidRequest.


        :param speed_burst: The speed_burst of this UpdateNetworkWirelessSsidRequest.
        :type speed_burst: UpdateNetworkWirelessSsidRequestSpeedBurst
        """

        self._speed_burst = speed_burst

    @property
    def splash_guest_sponsor_domains(self):
        """Gets the splash_guest_sponsor_domains of this UpdateNetworkWirelessSsidRequest.

        Array of valid sponsor email domains for sponsored guest splash type.

        :return: The splash_guest_sponsor_domains of this UpdateNetworkWirelessSsidRequest.
        :rtype: List[str]
        """
        return self._splash_guest_sponsor_domains

    @splash_guest_sponsor_domains.setter
    def splash_guest_sponsor_domains(self, splash_guest_sponsor_domains):
        """Sets the splash_guest_sponsor_domains of this UpdateNetworkWirelessSsidRequest.

        Array of valid sponsor email domains for sponsored guest splash type.

        :param splash_guest_sponsor_domains: The splash_guest_sponsor_domains of this UpdateNetworkWirelessSsidRequest.
        :type splash_guest_sponsor_domains: List[str]
        """

        self._splash_guest_sponsor_domains = splash_guest_sponsor_domains

    @property
    def splash_page(self):
        """Gets the splash_page of this UpdateNetworkWirelessSsidRequest.

        The type of splash page for the SSID ('None', 'Click-through splash page', 'Billing', 'Password-protected with Meraki RADIUS', 'Password-protected with custom RADIUS', 'Password-protected with Active Directory', 'Password-protected with LDAP', 'SMS authentication', 'Systems Manager Sentry', 'Facebook Wi-Fi', 'Google OAuth', 'Sponsored guest', 'Cisco ISE' or 'Google Apps domain'). This attribute is not supported for template children.

        :return: The splash_page of this UpdateNetworkWirelessSsidRequest.
        :rtype: str
        """
        return self._splash_page

    @splash_page.setter
    def splash_page(self, splash_page):
        """Sets the splash_page of this UpdateNetworkWirelessSsidRequest.

        The type of splash page for the SSID ('None', 'Click-through splash page', 'Billing', 'Password-protected with Meraki RADIUS', 'Password-protected with custom RADIUS', 'Password-protected with Active Directory', 'Password-protected with LDAP', 'SMS authentication', 'Systems Manager Sentry', 'Facebook Wi-Fi', 'Google OAuth', 'Sponsored guest', 'Cisco ISE' or 'Google Apps domain'). This attribute is not supported for template children.

        :param splash_page: The splash_page of this UpdateNetworkWirelessSsidRequest.
        :type splash_page: str
        """
        allowed_values = ["Billing", "Cisco ISE", "Click-through splash page", "Facebook Wi-Fi", "Google Apps domain", "Google OAuth", "None", "Password-protected with Active Directory", "Password-protected with LDAP", "Password-protected with Meraki RADIUS", "Password-protected with custom RADIUS", "SMS authentication", "Sponsored guest", "Systems Manager Sentry"]  # noqa: E501
        if splash_page not in allowed_values:
            raise ValueError(
                "Invalid value for `splash_page` ({0}), must be one of {1}"
                .format(splash_page, allowed_values)
            )

        self._splash_page = splash_page

    @property
    def use_vlan_tagging(self):
        """Gets the use_vlan_tagging of this UpdateNetworkWirelessSsidRequest.

        Whether or not traffic should be directed to use specific VLANs. This param is only valid if the ipAssignmentMode is 'Bridge mode' or 'Layer 3 roaming'

        :return: The use_vlan_tagging of this UpdateNetworkWirelessSsidRequest.
        :rtype: bool
        """
        return self._use_vlan_tagging

    @use_vlan_tagging.setter
    def use_vlan_tagging(self, use_vlan_tagging):
        """Sets the use_vlan_tagging of this UpdateNetworkWirelessSsidRequest.

        Whether or not traffic should be directed to use specific VLANs. This param is only valid if the ipAssignmentMode is 'Bridge mode' or 'Layer 3 roaming'

        :param use_vlan_tagging: The use_vlan_tagging of this UpdateNetworkWirelessSsidRequest.
        :type use_vlan_tagging: bool
        """

        self._use_vlan_tagging = use_vlan_tagging

    @property
    def visible(self):
        """Gets the visible of this UpdateNetworkWirelessSsidRequest.

        Boolean indicating whether APs should advertise or hide this SSID. APs will only broadcast this SSID if set to true

        :return: The visible of this UpdateNetworkWirelessSsidRequest.
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this UpdateNetworkWirelessSsidRequest.

        Boolean indicating whether APs should advertise or hide this SSID. APs will only broadcast this SSID if set to true

        :param visible: The visible of this UpdateNetworkWirelessSsidRequest.
        :type visible: bool
        """

        self._visible = visible

    @property
    def vlan_id(self):
        """Gets the vlan_id of this UpdateNetworkWirelessSsidRequest.

        The VLAN ID used for VLAN tagging. This param is only valid when the ipAssignmentMode is 'Layer 3 roaming with a concentrator' or 'VPN'

        :return: The vlan_id of this UpdateNetworkWirelessSsidRequest.
        :rtype: int
        """
        return self._vlan_id

    @vlan_id.setter
    def vlan_id(self, vlan_id):
        """Sets the vlan_id of this UpdateNetworkWirelessSsidRequest.

        The VLAN ID used for VLAN tagging. This param is only valid when the ipAssignmentMode is 'Layer 3 roaming with a concentrator' or 'VPN'

        :param vlan_id: The vlan_id of this UpdateNetworkWirelessSsidRequest.
        :type vlan_id: int
        """

        self._vlan_id = vlan_id

    @property
    def walled_garden_enabled(self):
        """Gets the walled_garden_enabled of this UpdateNetworkWirelessSsidRequest.

        Allow access to a configurable list of IP ranges, which users may access prior to sign-on.

        :return: The walled_garden_enabled of this UpdateNetworkWirelessSsidRequest.
        :rtype: bool
        """
        return self._walled_garden_enabled

    @walled_garden_enabled.setter
    def walled_garden_enabled(self, walled_garden_enabled):
        """Sets the walled_garden_enabled of this UpdateNetworkWirelessSsidRequest.

        Allow access to a configurable list of IP ranges, which users may access prior to sign-on.

        :param walled_garden_enabled: The walled_garden_enabled of this UpdateNetworkWirelessSsidRequest.
        :type walled_garden_enabled: bool
        """

        self._walled_garden_enabled = walled_garden_enabled

    @property
    def walled_garden_ranges(self):
        """Gets the walled_garden_ranges of this UpdateNetworkWirelessSsidRequest.

        Specify your walled garden by entering an array of addresses, ranges using CIDR notation, domain names, and domain wildcards (e.g. '192.168.1.1/24', '192.168.37.10/32', 'www.yahoo.com', '*.google.com']). Meraki's splash page is automatically included in your walled garden.

        :return: The walled_garden_ranges of this UpdateNetworkWirelessSsidRequest.
        :rtype: List[str]
        """
        return self._walled_garden_ranges

    @walled_garden_ranges.setter
    def walled_garden_ranges(self, walled_garden_ranges):
        """Sets the walled_garden_ranges of this UpdateNetworkWirelessSsidRequest.

        Specify your walled garden by entering an array of addresses, ranges using CIDR notation, domain names, and domain wildcards (e.g. '192.168.1.1/24', '192.168.37.10/32', 'www.yahoo.com', '*.google.com']). Meraki's splash page is automatically included in your walled garden.

        :param walled_garden_ranges: The walled_garden_ranges of this UpdateNetworkWirelessSsidRequest.
        :type walled_garden_ranges: List[str]
        """

        self._walled_garden_ranges = walled_garden_ranges

    @property
    def wpa_encryption_mode(self):
        """Gets the wpa_encryption_mode of this UpdateNetworkWirelessSsidRequest.

        The types of WPA encryption. ('WPA1 only', 'WPA1 and WPA2', 'WPA2 only', 'WPA3 Transition Mode', 'WPA3 only' or 'WPA3 192-bit Security')

        :return: The wpa_encryption_mode of this UpdateNetworkWirelessSsidRequest.
        :rtype: str
        """
        return self._wpa_encryption_mode

    @wpa_encryption_mode.setter
    def wpa_encryption_mode(self, wpa_encryption_mode):
        """Sets the wpa_encryption_mode of this UpdateNetworkWirelessSsidRequest.

        The types of WPA encryption. ('WPA1 only', 'WPA1 and WPA2', 'WPA2 only', 'WPA3 Transition Mode', 'WPA3 only' or 'WPA3 192-bit Security')

        :param wpa_encryption_mode: The wpa_encryption_mode of this UpdateNetworkWirelessSsidRequest.
        :type wpa_encryption_mode: str
        """
        allowed_values = ["WPA1 and WPA2", "WPA1 only", "WPA2 only", "WPA3 192-bit Security", "WPA3 Transition Mode", "WPA3 only"]  # noqa: E501
        if wpa_encryption_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `wpa_encryption_mode` ({0}), must be one of {1}"
                .format(wpa_encryption_mode, allowed_values)
            )

        self._wpa_encryption_mode = wpa_encryption_mode
