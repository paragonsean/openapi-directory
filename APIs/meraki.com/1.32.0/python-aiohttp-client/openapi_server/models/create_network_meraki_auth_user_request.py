# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_network_meraki_auth_user_request_authorizations_inner import CreateNetworkMerakiAuthUserRequestAuthorizationsInner
from openapi_server import util


class CreateNetworkMerakiAuthUserRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_type: str='802.1X', authorizations: List[CreateNetworkMerakiAuthUserRequestAuthorizationsInner]=None, email: str=None, email_password_to_user: bool=None, is_admin: bool=None, name: str=None, password: str=None):
        """CreateNetworkMerakiAuthUserRequest - a model defined in OpenAPI

        :param account_type: The account_type of this CreateNetworkMerakiAuthUserRequest.
        :param authorizations: The authorizations of this CreateNetworkMerakiAuthUserRequest.
        :param email: The email of this CreateNetworkMerakiAuthUserRequest.
        :param email_password_to_user: The email_password_to_user of this CreateNetworkMerakiAuthUserRequest.
        :param is_admin: The is_admin of this CreateNetworkMerakiAuthUserRequest.
        :param name: The name of this CreateNetworkMerakiAuthUserRequest.
        :param password: The password of this CreateNetworkMerakiAuthUserRequest.
        """
        self.openapi_types = {
            'account_type': str,
            'authorizations': List[CreateNetworkMerakiAuthUserRequestAuthorizationsInner],
            'email': str,
            'email_password_to_user': bool,
            'is_admin': bool,
            'name': str,
            'password': str
        }

        self.attribute_map = {
            'account_type': 'accountType',
            'authorizations': 'authorizations',
            'email': 'email',
            'email_password_to_user': 'emailPasswordToUser',
            'is_admin': 'isAdmin',
            'name': 'name',
            'password': 'password'
        }

        self._account_type = account_type
        self._authorizations = authorizations
        self._email = email
        self._email_password_to_user = email_password_to_user
        self._is_admin = is_admin
        self._name = name
        self._password = password

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateNetworkMerakiAuthUserRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The createNetworkMerakiAuthUser_request of this CreateNetworkMerakiAuthUserRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_type(self):
        """Gets the account_type of this CreateNetworkMerakiAuthUserRequest.

        Authorization type for user. Can be 'Guest' or '802.1X' for wireless networks, or 'Client VPN' for wired networks. Defaults to '802.1X'.

        :return: The account_type of this CreateNetworkMerakiAuthUserRequest.
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this CreateNetworkMerakiAuthUserRequest.

        Authorization type for user. Can be 'Guest' or '802.1X' for wireless networks, or 'Client VPN' for wired networks. Defaults to '802.1X'.

        :param account_type: The account_type of this CreateNetworkMerakiAuthUserRequest.
        :type account_type: str
        """
        allowed_values = ["802.1X", "Client VPN", "Guest"]  # noqa: E501
        if account_type not in allowed_values:
            raise ValueError(
                "Invalid value for `account_type` ({0}), must be one of {1}"
                .format(account_type, allowed_values)
            )

        self._account_type = account_type

    @property
    def authorizations(self):
        """Gets the authorizations of this CreateNetworkMerakiAuthUserRequest.

        Authorization zones and expiration dates for the user.

        :return: The authorizations of this CreateNetworkMerakiAuthUserRequest.
        :rtype: List[CreateNetworkMerakiAuthUserRequestAuthorizationsInner]
        """
        return self._authorizations

    @authorizations.setter
    def authorizations(self, authorizations):
        """Sets the authorizations of this CreateNetworkMerakiAuthUserRequest.

        Authorization zones and expiration dates for the user.

        :param authorizations: The authorizations of this CreateNetworkMerakiAuthUserRequest.
        :type authorizations: List[CreateNetworkMerakiAuthUserRequestAuthorizationsInner]
        """
        if authorizations is None:
            raise ValueError("Invalid value for `authorizations`, must not be `None`")

        self._authorizations = authorizations

    @property
    def email(self):
        """Gets the email of this CreateNetworkMerakiAuthUserRequest.

        Email address of the user

        :return: The email of this CreateNetworkMerakiAuthUserRequest.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CreateNetworkMerakiAuthUserRequest.

        Email address of the user

        :param email: The email of this CreateNetworkMerakiAuthUserRequest.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def email_password_to_user(self):
        """Gets the email_password_to_user of this CreateNetworkMerakiAuthUserRequest.

        Whether or not Meraki should email the password to user. Default is false.

        :return: The email_password_to_user of this CreateNetworkMerakiAuthUserRequest.
        :rtype: bool
        """
        return self._email_password_to_user

    @email_password_to_user.setter
    def email_password_to_user(self, email_password_to_user):
        """Sets the email_password_to_user of this CreateNetworkMerakiAuthUserRequest.

        Whether or not Meraki should email the password to user. Default is false.

        :param email_password_to_user: The email_password_to_user of this CreateNetworkMerakiAuthUserRequest.
        :type email_password_to_user: bool
        """

        self._email_password_to_user = email_password_to_user

    @property
    def is_admin(self):
        """Gets the is_admin of this CreateNetworkMerakiAuthUserRequest.

        Whether or not the user is a Dashboard administrator.

        :return: The is_admin of this CreateNetworkMerakiAuthUserRequest.
        :rtype: bool
        """
        return self._is_admin

    @is_admin.setter
    def is_admin(self, is_admin):
        """Sets the is_admin of this CreateNetworkMerakiAuthUserRequest.

        Whether or not the user is a Dashboard administrator.

        :param is_admin: The is_admin of this CreateNetworkMerakiAuthUserRequest.
        :type is_admin: bool
        """

        self._is_admin = is_admin

    @property
    def name(self):
        """Gets the name of this CreateNetworkMerakiAuthUserRequest.

        Name of the user. Only required If the user is not a Dashboard administrator.

        :return: The name of this CreateNetworkMerakiAuthUserRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateNetworkMerakiAuthUserRequest.

        Name of the user. Only required If the user is not a Dashboard administrator.

        :param name: The name of this CreateNetworkMerakiAuthUserRequest.
        :type name: str
        """

        self._name = name

    @property
    def password(self):
        """Gets the password of this CreateNetworkMerakiAuthUserRequest.

        The password for this user account. Only required If the user is not a Dashboard administrator.

        :return: The password of this CreateNetworkMerakiAuthUserRequest.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this CreateNetworkMerakiAuthUserRequest.

        The password for this user account. Only required If the user is not a Dashboard administrator.

        :param password: The password of this CreateNetworkMerakiAuthUserRequest.
        :type password: str
        """

        self._password = password
