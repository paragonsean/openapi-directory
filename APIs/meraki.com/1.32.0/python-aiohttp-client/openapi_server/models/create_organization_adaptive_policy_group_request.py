# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_organization_adaptive_policy_group_request_policy_objects_inner import CreateOrganizationAdaptivePolicyGroupRequestPolicyObjectsInner
from openapi_server import util


class CreateOrganizationAdaptivePolicyGroupRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, name: str=None, policy_objects: List[CreateOrganizationAdaptivePolicyGroupRequestPolicyObjectsInner]=None, sgt: int=None):
        """CreateOrganizationAdaptivePolicyGroupRequest - a model defined in OpenAPI

        :param description: The description of this CreateOrganizationAdaptivePolicyGroupRequest.
        :param name: The name of this CreateOrganizationAdaptivePolicyGroupRequest.
        :param policy_objects: The policy_objects of this CreateOrganizationAdaptivePolicyGroupRequest.
        :param sgt: The sgt of this CreateOrganizationAdaptivePolicyGroupRequest.
        """
        self.openapi_types = {
            'description': str,
            'name': str,
            'policy_objects': List[CreateOrganizationAdaptivePolicyGroupRequestPolicyObjectsInner],
            'sgt': int
        }

        self.attribute_map = {
            'description': 'description',
            'name': 'name',
            'policy_objects': 'policyObjects',
            'sgt': 'sgt'
        }

        self._description = description
        self._name = name
        self._policy_objects = policy_objects
        self._sgt = sgt

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateOrganizationAdaptivePolicyGroupRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The createOrganizationAdaptivePolicyGroup_request of this CreateOrganizationAdaptivePolicyGroupRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this CreateOrganizationAdaptivePolicyGroupRequest.

        Description of the group (default: \"\")

        :return: The description of this CreateOrganizationAdaptivePolicyGroupRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateOrganizationAdaptivePolicyGroupRequest.

        Description of the group (default: \"\")

        :param description: The description of this CreateOrganizationAdaptivePolicyGroupRequest.
        :type description: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this CreateOrganizationAdaptivePolicyGroupRequest.

        Name of the group

        :return: The name of this CreateOrganizationAdaptivePolicyGroupRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateOrganizationAdaptivePolicyGroupRequest.

        Name of the group

        :param name: The name of this CreateOrganizationAdaptivePolicyGroupRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def policy_objects(self):
        """Gets the policy_objects of this CreateOrganizationAdaptivePolicyGroupRequest.

        The policy objects that belong to this group; traffic from addresses specified by these policy objects will be tagged with this group's SGT value if no other tagging scheme is being used (each requires one unique attribute) (default: [])

        :return: The policy_objects of this CreateOrganizationAdaptivePolicyGroupRequest.
        :rtype: List[CreateOrganizationAdaptivePolicyGroupRequestPolicyObjectsInner]
        """
        return self._policy_objects

    @policy_objects.setter
    def policy_objects(self, policy_objects):
        """Sets the policy_objects of this CreateOrganizationAdaptivePolicyGroupRequest.

        The policy objects that belong to this group; traffic from addresses specified by these policy objects will be tagged with this group's SGT value if no other tagging scheme is being used (each requires one unique attribute) (default: [])

        :param policy_objects: The policy_objects of this CreateOrganizationAdaptivePolicyGroupRequest.
        :type policy_objects: List[CreateOrganizationAdaptivePolicyGroupRequestPolicyObjectsInner]
        """

        self._policy_objects = policy_objects

    @property
    def sgt(self):
        """Gets the sgt of this CreateOrganizationAdaptivePolicyGroupRequest.

        SGT value of the group

        :return: The sgt of this CreateOrganizationAdaptivePolicyGroupRequest.
        :rtype: int
        """
        return self._sgt

    @sgt.setter
    def sgt(self, sgt):
        """Sets the sgt of this CreateOrganizationAdaptivePolicyGroupRequest.

        SGT value of the group

        :param sgt: The sgt of this CreateOrganizationAdaptivePolicyGroupRequest.
        :type sgt: int
        """
        if sgt is None:
            raise ValueError("Invalid value for `sgt`, must not be `None`")

        self._sgt = sgt
