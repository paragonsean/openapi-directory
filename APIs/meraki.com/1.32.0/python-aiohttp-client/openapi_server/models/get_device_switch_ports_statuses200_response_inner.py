# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_device_switch_ports_statuses200_response_inner_cdp import GetDeviceSwitchPortsStatuses200ResponseInnerCdp
from openapi_server.models.get_device_switch_ports_statuses200_response_inner_lldp import GetDeviceSwitchPortsStatuses200ResponseInnerLldp
from openapi_server.models.get_device_switch_ports_statuses200_response_inner_secure_port import GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort
from openapi_server.models.get_device_switch_ports_statuses200_response_inner_traffic_in_kbps import GetDeviceSwitchPortsStatuses200ResponseInnerTrafficInKbps
from openapi_server.models.get_device_switch_ports_statuses200_response_inner_usage_in_kb import GetDeviceSwitchPortsStatuses200ResponseInnerUsageInKb
from openapi_server import util


class GetDeviceSwitchPortsStatuses200ResponseInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cdp: GetDeviceSwitchPortsStatuses200ResponseInnerCdp=None, client_count: int=None, duplex: str=None, enabled: bool=None, errors: List[str]=None, is_uplink: bool=None, lldp: GetDeviceSwitchPortsStatuses200ResponseInnerLldp=None, port_id: str=None, power_usage_in_wh: float=None, secure_port: GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort=None, speed: str=None, status: str=None, traffic_in_kbps: GetDeviceSwitchPortsStatuses200ResponseInnerTrafficInKbps=None, usage_in_kb: GetDeviceSwitchPortsStatuses200ResponseInnerUsageInKb=None, warnings: List[str]=None):
        """GetDeviceSwitchPortsStatuses200ResponseInner - a model defined in OpenAPI

        :param cdp: The cdp of this GetDeviceSwitchPortsStatuses200ResponseInner.
        :param client_count: The client_count of this GetDeviceSwitchPortsStatuses200ResponseInner.
        :param duplex: The duplex of this GetDeviceSwitchPortsStatuses200ResponseInner.
        :param enabled: The enabled of this GetDeviceSwitchPortsStatuses200ResponseInner.
        :param errors: The errors of this GetDeviceSwitchPortsStatuses200ResponseInner.
        :param is_uplink: The is_uplink of this GetDeviceSwitchPortsStatuses200ResponseInner.
        :param lldp: The lldp of this GetDeviceSwitchPortsStatuses200ResponseInner.
        :param port_id: The port_id of this GetDeviceSwitchPortsStatuses200ResponseInner.
        :param power_usage_in_wh: The power_usage_in_wh of this GetDeviceSwitchPortsStatuses200ResponseInner.
        :param secure_port: The secure_port of this GetDeviceSwitchPortsStatuses200ResponseInner.
        :param speed: The speed of this GetDeviceSwitchPortsStatuses200ResponseInner.
        :param status: The status of this GetDeviceSwitchPortsStatuses200ResponseInner.
        :param traffic_in_kbps: The traffic_in_kbps of this GetDeviceSwitchPortsStatuses200ResponseInner.
        :param usage_in_kb: The usage_in_kb of this GetDeviceSwitchPortsStatuses200ResponseInner.
        :param warnings: The warnings of this GetDeviceSwitchPortsStatuses200ResponseInner.
        """
        self.openapi_types = {
            'cdp': GetDeviceSwitchPortsStatuses200ResponseInnerCdp,
            'client_count': int,
            'duplex': str,
            'enabled': bool,
            'errors': List[str],
            'is_uplink': bool,
            'lldp': GetDeviceSwitchPortsStatuses200ResponseInnerLldp,
            'port_id': str,
            'power_usage_in_wh': float,
            'secure_port': GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort,
            'speed': str,
            'status': str,
            'traffic_in_kbps': GetDeviceSwitchPortsStatuses200ResponseInnerTrafficInKbps,
            'usage_in_kb': GetDeviceSwitchPortsStatuses200ResponseInnerUsageInKb,
            'warnings': List[str]
        }

        self.attribute_map = {
            'cdp': 'cdp',
            'client_count': 'clientCount',
            'duplex': 'duplex',
            'enabled': 'enabled',
            'errors': 'errors',
            'is_uplink': 'isUplink',
            'lldp': 'lldp',
            'port_id': 'portId',
            'power_usage_in_wh': 'powerUsageInWh',
            'secure_port': 'securePort',
            'speed': 'speed',
            'status': 'status',
            'traffic_in_kbps': 'trafficInKbps',
            'usage_in_kb': 'usageInKb',
            'warnings': 'warnings'
        }

        self._cdp = cdp
        self._client_count = client_count
        self._duplex = duplex
        self._enabled = enabled
        self._errors = errors
        self._is_uplink = is_uplink
        self._lldp = lldp
        self._port_id = port_id
        self._power_usage_in_wh = power_usage_in_wh
        self._secure_port = secure_port
        self._speed = speed
        self._status = status
        self._traffic_in_kbps = traffic_in_kbps
        self._usage_in_kb = usage_in_kb
        self._warnings = warnings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetDeviceSwitchPortsStatuses200ResponseInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getDeviceSwitchPortsStatuses_200_response_inner of this GetDeviceSwitchPortsStatuses200ResponseInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cdp(self):
        """Gets the cdp of this GetDeviceSwitchPortsStatuses200ResponseInner.


        :return: The cdp of this GetDeviceSwitchPortsStatuses200ResponseInner.
        :rtype: GetDeviceSwitchPortsStatuses200ResponseInnerCdp
        """
        return self._cdp

    @cdp.setter
    def cdp(self, cdp):
        """Sets the cdp of this GetDeviceSwitchPortsStatuses200ResponseInner.


        :param cdp: The cdp of this GetDeviceSwitchPortsStatuses200ResponseInner.
        :type cdp: GetDeviceSwitchPortsStatuses200ResponseInnerCdp
        """

        self._cdp = cdp

    @property
    def client_count(self):
        """Gets the client_count of this GetDeviceSwitchPortsStatuses200ResponseInner.

        The number of clients connected through this port.

        :return: The client_count of this GetDeviceSwitchPortsStatuses200ResponseInner.
        :rtype: int
        """
        return self._client_count

    @client_count.setter
    def client_count(self, client_count):
        """Sets the client_count of this GetDeviceSwitchPortsStatuses200ResponseInner.

        The number of clients connected through this port.

        :param client_count: The client_count of this GetDeviceSwitchPortsStatuses200ResponseInner.
        :type client_count: int
        """

        self._client_count = client_count

    @property
    def duplex(self):
        """Gets the duplex of this GetDeviceSwitchPortsStatuses200ResponseInner.

        The current duplex of a connected port.

        :return: The duplex of this GetDeviceSwitchPortsStatuses200ResponseInner.
        :rtype: str
        """
        return self._duplex

    @duplex.setter
    def duplex(self, duplex):
        """Sets the duplex of this GetDeviceSwitchPortsStatuses200ResponseInner.

        The current duplex of a connected port.

        :param duplex: The duplex of this GetDeviceSwitchPortsStatuses200ResponseInner.
        :type duplex: str
        """
        allowed_values = ["", "full", "half"]  # noqa: E501
        if duplex not in allowed_values:
            raise ValueError(
                "Invalid value for `duplex` ({0}), must be one of {1}"
                .format(duplex, allowed_values)
            )

        self._duplex = duplex

    @property
    def enabled(self):
        """Gets the enabled of this GetDeviceSwitchPortsStatuses200ResponseInner.

        Whether the port is configured to be enabled.

        :return: The enabled of this GetDeviceSwitchPortsStatuses200ResponseInner.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this GetDeviceSwitchPortsStatuses200ResponseInner.

        Whether the port is configured to be enabled.

        :param enabled: The enabled of this GetDeviceSwitchPortsStatuses200ResponseInner.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def errors(self):
        """Gets the errors of this GetDeviceSwitchPortsStatuses200ResponseInner.

        All errors present on the port.

        :return: The errors of this GetDeviceSwitchPortsStatuses200ResponseInner.
        :rtype: List[str]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this GetDeviceSwitchPortsStatuses200ResponseInner.

        All errors present on the port.

        :param errors: The errors of this GetDeviceSwitchPortsStatuses200ResponseInner.
        :type errors: List[str]
        """

        self._errors = errors

    @property
    def is_uplink(self):
        """Gets the is_uplink of this GetDeviceSwitchPortsStatuses200ResponseInner.

        Whether the port is the switch's uplink.

        :return: The is_uplink of this GetDeviceSwitchPortsStatuses200ResponseInner.
        :rtype: bool
        """
        return self._is_uplink

    @is_uplink.setter
    def is_uplink(self, is_uplink):
        """Sets the is_uplink of this GetDeviceSwitchPortsStatuses200ResponseInner.

        Whether the port is the switch's uplink.

        :param is_uplink: The is_uplink of this GetDeviceSwitchPortsStatuses200ResponseInner.
        :type is_uplink: bool
        """

        self._is_uplink = is_uplink

    @property
    def lldp(self):
        """Gets the lldp of this GetDeviceSwitchPortsStatuses200ResponseInner.


        :return: The lldp of this GetDeviceSwitchPortsStatuses200ResponseInner.
        :rtype: GetDeviceSwitchPortsStatuses200ResponseInnerLldp
        """
        return self._lldp

    @lldp.setter
    def lldp(self, lldp):
        """Sets the lldp of this GetDeviceSwitchPortsStatuses200ResponseInner.


        :param lldp: The lldp of this GetDeviceSwitchPortsStatuses200ResponseInner.
        :type lldp: GetDeviceSwitchPortsStatuses200ResponseInnerLldp
        """

        self._lldp = lldp

    @property
    def port_id(self):
        """Gets the port_id of this GetDeviceSwitchPortsStatuses200ResponseInner.

        The string identifier of this port on the switch. This is commonly just the port number but may contain additional identifying information such as the slot and module-type if the port is located on a port module.

        :return: The port_id of this GetDeviceSwitchPortsStatuses200ResponseInner.
        :rtype: str
        """
        return self._port_id

    @port_id.setter
    def port_id(self, port_id):
        """Sets the port_id of this GetDeviceSwitchPortsStatuses200ResponseInner.

        The string identifier of this port on the switch. This is commonly just the port number but may contain additional identifying information such as the slot and module-type if the port is located on a port module.

        :param port_id: The port_id of this GetDeviceSwitchPortsStatuses200ResponseInner.
        :type port_id: str
        """

        self._port_id = port_id

    @property
    def power_usage_in_wh(self):
        """Gets the power_usage_in_wh of this GetDeviceSwitchPortsStatuses200ResponseInner.

        How much power (in watt-hours) has been delivered by this port during the timespan.

        :return: The power_usage_in_wh of this GetDeviceSwitchPortsStatuses200ResponseInner.
        :rtype: float
        """
        return self._power_usage_in_wh

    @power_usage_in_wh.setter
    def power_usage_in_wh(self, power_usage_in_wh):
        """Sets the power_usage_in_wh of this GetDeviceSwitchPortsStatuses200ResponseInner.

        How much power (in watt-hours) has been delivered by this port during the timespan.

        :param power_usage_in_wh: The power_usage_in_wh of this GetDeviceSwitchPortsStatuses200ResponseInner.
        :type power_usage_in_wh: float
        """

        self._power_usage_in_wh = power_usage_in_wh

    @property
    def secure_port(self):
        """Gets the secure_port of this GetDeviceSwitchPortsStatuses200ResponseInner.


        :return: The secure_port of this GetDeviceSwitchPortsStatuses200ResponseInner.
        :rtype: GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort
        """
        return self._secure_port

    @secure_port.setter
    def secure_port(self, secure_port):
        """Sets the secure_port of this GetDeviceSwitchPortsStatuses200ResponseInner.


        :param secure_port: The secure_port of this GetDeviceSwitchPortsStatuses200ResponseInner.
        :type secure_port: GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort
        """

        self._secure_port = secure_port

    @property
    def speed(self):
        """Gets the speed of this GetDeviceSwitchPortsStatuses200ResponseInner.

        The current data transfer rate which the port is operating at.

        :return: The speed of this GetDeviceSwitchPortsStatuses200ResponseInner.
        :rtype: str
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this GetDeviceSwitchPortsStatuses200ResponseInner.

        The current data transfer rate which the port is operating at.

        :param speed: The speed of this GetDeviceSwitchPortsStatuses200ResponseInner.
        :type speed: str
        """
        allowed_values = ["", "1 Gbps", "10 Gbps", "10 Mbps", "100 Gbps", "100 Mbps", "2.5 Gbps", "20 Gbps", "40 Gbps", "5 Gbps"]  # noqa: E501
        if speed not in allowed_values:
            raise ValueError(
                "Invalid value for `speed` ({0}), must be one of {1}"
                .format(speed, allowed_values)
            )

        self._speed = speed

    @property
    def status(self):
        """Gets the status of this GetDeviceSwitchPortsStatuses200ResponseInner.

        The current connection status of the port.

        :return: The status of this GetDeviceSwitchPortsStatuses200ResponseInner.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetDeviceSwitchPortsStatuses200ResponseInner.

        The current connection status of the port.

        :param status: The status of this GetDeviceSwitchPortsStatuses200ResponseInner.
        :type status: str
        """
        allowed_values = ["Connected", "Disabled", "Disconnected"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def traffic_in_kbps(self):
        """Gets the traffic_in_kbps of this GetDeviceSwitchPortsStatuses200ResponseInner.


        :return: The traffic_in_kbps of this GetDeviceSwitchPortsStatuses200ResponseInner.
        :rtype: GetDeviceSwitchPortsStatuses200ResponseInnerTrafficInKbps
        """
        return self._traffic_in_kbps

    @traffic_in_kbps.setter
    def traffic_in_kbps(self, traffic_in_kbps):
        """Sets the traffic_in_kbps of this GetDeviceSwitchPortsStatuses200ResponseInner.


        :param traffic_in_kbps: The traffic_in_kbps of this GetDeviceSwitchPortsStatuses200ResponseInner.
        :type traffic_in_kbps: GetDeviceSwitchPortsStatuses200ResponseInnerTrafficInKbps
        """

        self._traffic_in_kbps = traffic_in_kbps

    @property
    def usage_in_kb(self):
        """Gets the usage_in_kb of this GetDeviceSwitchPortsStatuses200ResponseInner.


        :return: The usage_in_kb of this GetDeviceSwitchPortsStatuses200ResponseInner.
        :rtype: GetDeviceSwitchPortsStatuses200ResponseInnerUsageInKb
        """
        return self._usage_in_kb

    @usage_in_kb.setter
    def usage_in_kb(self, usage_in_kb):
        """Sets the usage_in_kb of this GetDeviceSwitchPortsStatuses200ResponseInner.


        :param usage_in_kb: The usage_in_kb of this GetDeviceSwitchPortsStatuses200ResponseInner.
        :type usage_in_kb: GetDeviceSwitchPortsStatuses200ResponseInnerUsageInKb
        """

        self._usage_in_kb = usage_in_kb

    @property
    def warnings(self):
        """Gets the warnings of this GetDeviceSwitchPortsStatuses200ResponseInner.

        All warnings present on the port.

        :return: The warnings of this GetDeviceSwitchPortsStatuses200ResponseInner.
        :rtype: List[str]
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this GetDeviceSwitchPortsStatuses200ResponseInner.

        All warnings present on the port.

        :param warnings: The warnings of this GetDeviceSwitchPortsStatuses200ResponseInner.
        :type warnings: List[str]
        """

        self._warnings = warnings
