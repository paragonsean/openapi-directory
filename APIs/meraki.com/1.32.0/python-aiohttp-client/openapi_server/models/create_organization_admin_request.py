# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_organization_admin_request_networks_inner import CreateOrganizationAdminRequestNetworksInner
from openapi_server.models.create_organization_admin_request_tags_inner import CreateOrganizationAdminRequestTagsInner
from openapi_server import util


class CreateOrganizationAdminRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authentication_method: str=None, email: str=None, name: str=None, networks: List[CreateOrganizationAdminRequestNetworksInner]=None, org_access: str=None, tags: List[CreateOrganizationAdminRequestTagsInner]=None):
        """CreateOrganizationAdminRequest - a model defined in OpenAPI

        :param authentication_method: The authentication_method of this CreateOrganizationAdminRequest.
        :param email: The email of this CreateOrganizationAdminRequest.
        :param name: The name of this CreateOrganizationAdminRequest.
        :param networks: The networks of this CreateOrganizationAdminRequest.
        :param org_access: The org_access of this CreateOrganizationAdminRequest.
        :param tags: The tags of this CreateOrganizationAdminRequest.
        """
        self.openapi_types = {
            'authentication_method': str,
            'email': str,
            'name': str,
            'networks': List[CreateOrganizationAdminRequestNetworksInner],
            'org_access': str,
            'tags': List[CreateOrganizationAdminRequestTagsInner]
        }

        self.attribute_map = {
            'authentication_method': 'authenticationMethod',
            'email': 'email',
            'name': 'name',
            'networks': 'networks',
            'org_access': 'orgAccess',
            'tags': 'tags'
        }

        self._authentication_method = authentication_method
        self._email = email
        self._name = name
        self._networks = networks
        self._org_access = org_access
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateOrganizationAdminRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The createOrganizationAdmin_request of this CreateOrganizationAdminRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authentication_method(self):
        """Gets the authentication_method of this CreateOrganizationAdminRequest.

        The method of authentication the user will use to sign in to the Meraki dashboard. Can be one of 'Email' or 'Cisco SecureX Sign-On'. The default is Email authentication

        :return: The authentication_method of this CreateOrganizationAdminRequest.
        :rtype: str
        """
        return self._authentication_method

    @authentication_method.setter
    def authentication_method(self, authentication_method):
        """Sets the authentication_method of this CreateOrganizationAdminRequest.

        The method of authentication the user will use to sign in to the Meraki dashboard. Can be one of 'Email' or 'Cisco SecureX Sign-On'. The default is Email authentication

        :param authentication_method: The authentication_method of this CreateOrganizationAdminRequest.
        :type authentication_method: str
        """
        allowed_values = ["Cisco SecureX Sign-On", "Email"]  # noqa: E501
        if authentication_method not in allowed_values:
            raise ValueError(
                "Invalid value for `authentication_method` ({0}), must be one of {1}"
                .format(authentication_method, allowed_values)
            )

        self._authentication_method = authentication_method

    @property
    def email(self):
        """Gets the email of this CreateOrganizationAdminRequest.

        The email of the dashboard administrator. This attribute can not be updated.

        :return: The email of this CreateOrganizationAdminRequest.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CreateOrganizationAdminRequest.

        The email of the dashboard administrator. This attribute can not be updated.

        :param email: The email of this CreateOrganizationAdminRequest.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def name(self):
        """Gets the name of this CreateOrganizationAdminRequest.

        The name of the dashboard administrator

        :return: The name of this CreateOrganizationAdminRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateOrganizationAdminRequest.

        The name of the dashboard administrator

        :param name: The name of this CreateOrganizationAdminRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def networks(self):
        """Gets the networks of this CreateOrganizationAdminRequest.

        The list of networks that the dashboard administrator has privileges on

        :return: The networks of this CreateOrganizationAdminRequest.
        :rtype: List[CreateOrganizationAdminRequestNetworksInner]
        """
        return self._networks

    @networks.setter
    def networks(self, networks):
        """Sets the networks of this CreateOrganizationAdminRequest.

        The list of networks that the dashboard administrator has privileges on

        :param networks: The networks of this CreateOrganizationAdminRequest.
        :type networks: List[CreateOrganizationAdminRequestNetworksInner]
        """

        self._networks = networks

    @property
    def org_access(self):
        """Gets the org_access of this CreateOrganizationAdminRequest.

        The privilege of the dashboard administrator on the organization. Can be one of 'full', 'read-only', 'enterprise' or 'none'

        :return: The org_access of this CreateOrganizationAdminRequest.
        :rtype: str
        """
        return self._org_access

    @org_access.setter
    def org_access(self, org_access):
        """Sets the org_access of this CreateOrganizationAdminRequest.

        The privilege of the dashboard administrator on the organization. Can be one of 'full', 'read-only', 'enterprise' or 'none'

        :param org_access: The org_access of this CreateOrganizationAdminRequest.
        :type org_access: str
        """
        allowed_values = ["enterprise", "full", "none", "read-only"]  # noqa: E501
        if org_access not in allowed_values:
            raise ValueError(
                "Invalid value for `org_access` ({0}), must be one of {1}"
                .format(org_access, allowed_values)
            )

        self._org_access = org_access

    @property
    def tags(self):
        """Gets the tags of this CreateOrganizationAdminRequest.

        The list of tags that the dashboard administrator has privileges on

        :return: The tags of this CreateOrganizationAdminRequest.
        :rtype: List[CreateOrganizationAdminRequestTagsInner]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateOrganizationAdminRequest.

        The list of tags that the dashboard administrator has privileges on

        :param tags: The tags of this CreateOrganizationAdminRequest.
        :type tags: List[CreateOrganizationAdminRequestTagsInner]
        """

        self._tags = tags
