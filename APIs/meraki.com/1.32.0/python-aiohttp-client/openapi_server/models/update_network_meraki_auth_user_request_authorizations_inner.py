# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateNetworkMerakiAuthUserRequestAuthorizationsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expires_at: str='Never', ssid_number: int=None):
        """UpdateNetworkMerakiAuthUserRequestAuthorizationsInner - a model defined in OpenAPI

        :param expires_at: The expires_at of this UpdateNetworkMerakiAuthUserRequestAuthorizationsInner.
        :param ssid_number: The ssid_number of this UpdateNetworkMerakiAuthUserRequestAuthorizationsInner.
        """
        self.openapi_types = {
            'expires_at': str,
            'ssid_number': int
        }

        self.attribute_map = {
            'expires_at': 'expiresAt',
            'ssid_number': 'ssidNumber'
        }

        self._expires_at = expires_at
        self._ssid_number = ssid_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateNetworkMerakiAuthUserRequestAuthorizationsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateNetworkMerakiAuthUser_request_authorizations_inner of this UpdateNetworkMerakiAuthUserRequestAuthorizationsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expires_at(self):
        """Gets the expires_at of this UpdateNetworkMerakiAuthUserRequestAuthorizationsInner.

        Date for authorization to expire. Default is for authorization to not expire.

        :return: The expires_at of this UpdateNetworkMerakiAuthUserRequestAuthorizationsInner.
        :rtype: str
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this UpdateNetworkMerakiAuthUserRequestAuthorizationsInner.

        Date for authorization to expire. Default is for authorization to not expire.

        :param expires_at: The expires_at of this UpdateNetworkMerakiAuthUserRequestAuthorizationsInner.
        :type expires_at: str
        """

        self._expires_at = expires_at

    @property
    def ssid_number(self):
        """Gets the ssid_number of this UpdateNetworkMerakiAuthUserRequestAuthorizationsInner.

        SSID for which the user is being authorized

        :return: The ssid_number of this UpdateNetworkMerakiAuthUserRequestAuthorizationsInner.
        :rtype: int
        """
        return self._ssid_number

    @ssid_number.setter
    def ssid_number(self, ssid_number):
        """Sets the ssid_number of this UpdateNetworkMerakiAuthUserRequestAuthorizationsInner.

        SSID for which the user is being authorized

        :param ssid_number: The ssid_number of this UpdateNetworkMerakiAuthUserRequestAuthorizationsInner.
        :type ssid_number: int
        """
        if ssid_number is None:
            raise ValueError("Invalid value for `ssid_number`, must not be `None`")

        self._ssid_number = ssid_number
