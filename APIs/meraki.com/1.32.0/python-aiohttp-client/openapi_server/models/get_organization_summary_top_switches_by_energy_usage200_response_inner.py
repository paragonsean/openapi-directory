# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_organization_summary_top_appliances_by_utilization200_response_inner_network import GetOrganizationSummaryTopAppliancesByUtilization200ResponseInnerNetwork
from openapi_server.models.get_organization_summary_top_switches_by_energy_usage200_response_inner_usage import GetOrganizationSummaryTopSwitchesByEnergyUsage200ResponseInnerUsage
from openapi_server import util


class GetOrganizationSummaryTopSwitchesByEnergyUsage200ResponseInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mac: str=None, model: str=None, name: str=None, network: GetOrganizationSummaryTopAppliancesByUtilization200ResponseInnerNetwork=None, usage: GetOrganizationSummaryTopSwitchesByEnergyUsage200ResponseInnerUsage=None):
        """GetOrganizationSummaryTopSwitchesByEnergyUsage200ResponseInner - a model defined in OpenAPI

        :param mac: The mac of this GetOrganizationSummaryTopSwitchesByEnergyUsage200ResponseInner.
        :param model: The model of this GetOrganizationSummaryTopSwitchesByEnergyUsage200ResponseInner.
        :param name: The name of this GetOrganizationSummaryTopSwitchesByEnergyUsage200ResponseInner.
        :param network: The network of this GetOrganizationSummaryTopSwitchesByEnergyUsage200ResponseInner.
        :param usage: The usage of this GetOrganizationSummaryTopSwitchesByEnergyUsage200ResponseInner.
        """
        self.openapi_types = {
            'mac': str,
            'model': str,
            'name': str,
            'network': GetOrganizationSummaryTopAppliancesByUtilization200ResponseInnerNetwork,
            'usage': GetOrganizationSummaryTopSwitchesByEnergyUsage200ResponseInnerUsage
        }

        self.attribute_map = {
            'mac': 'mac',
            'model': 'model',
            'name': 'name',
            'network': 'network',
            'usage': 'usage'
        }

        self._mac = mac
        self._model = model
        self._name = name
        self._network = network
        self._usage = usage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetOrganizationSummaryTopSwitchesByEnergyUsage200ResponseInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getOrganizationSummaryTopSwitchesByEnergyUsage_200_response_inner of this GetOrganizationSummaryTopSwitchesByEnergyUsage200ResponseInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mac(self):
        """Gets the mac of this GetOrganizationSummaryTopSwitchesByEnergyUsage200ResponseInner.

        Mac address of the switch

        :return: The mac of this GetOrganizationSummaryTopSwitchesByEnergyUsage200ResponseInner.
        :rtype: str
        """
        return self._mac

    @mac.setter
    def mac(self, mac):
        """Sets the mac of this GetOrganizationSummaryTopSwitchesByEnergyUsage200ResponseInner.

        Mac address of the switch

        :param mac: The mac of this GetOrganizationSummaryTopSwitchesByEnergyUsage200ResponseInner.
        :type mac: str
        """

        self._mac = mac

    @property
    def model(self):
        """Gets the model of this GetOrganizationSummaryTopSwitchesByEnergyUsage200ResponseInner.

        Model of the switch

        :return: The model of this GetOrganizationSummaryTopSwitchesByEnergyUsage200ResponseInner.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this GetOrganizationSummaryTopSwitchesByEnergyUsage200ResponseInner.

        Model of the switch

        :param model: The model of this GetOrganizationSummaryTopSwitchesByEnergyUsage200ResponseInner.
        :type model: str
        """

        self._model = model

    @property
    def name(self):
        """Gets the name of this GetOrganizationSummaryTopSwitchesByEnergyUsage200ResponseInner.

        Name of the switch

        :return: The name of this GetOrganizationSummaryTopSwitchesByEnergyUsage200ResponseInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetOrganizationSummaryTopSwitchesByEnergyUsage200ResponseInner.

        Name of the switch

        :param name: The name of this GetOrganizationSummaryTopSwitchesByEnergyUsage200ResponseInner.
        :type name: str
        """

        self._name = name

    @property
    def network(self):
        """Gets the network of this GetOrganizationSummaryTopSwitchesByEnergyUsage200ResponseInner.


        :return: The network of this GetOrganizationSummaryTopSwitchesByEnergyUsage200ResponseInner.
        :rtype: GetOrganizationSummaryTopAppliancesByUtilization200ResponseInnerNetwork
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this GetOrganizationSummaryTopSwitchesByEnergyUsage200ResponseInner.


        :param network: The network of this GetOrganizationSummaryTopSwitchesByEnergyUsage200ResponseInner.
        :type network: GetOrganizationSummaryTopAppliancesByUtilization200ResponseInnerNetwork
        """

        self._network = network

    @property
    def usage(self):
        """Gets the usage of this GetOrganizationSummaryTopSwitchesByEnergyUsage200ResponseInner.


        :return: The usage of this GetOrganizationSummaryTopSwitchesByEnergyUsage200ResponseInner.
        :rtype: GetOrganizationSummaryTopSwitchesByEnergyUsage200ResponseInnerUsage
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this GetOrganizationSummaryTopSwitchesByEnergyUsage200ResponseInner.


        :param usage: The usage of this GetOrganizationSummaryTopSwitchesByEnergyUsage200ResponseInner.
        :type usage: GetOrganizationSummaryTopSwitchesByEnergyUsage200ResponseInnerUsage
        """

        self._usage = usage
