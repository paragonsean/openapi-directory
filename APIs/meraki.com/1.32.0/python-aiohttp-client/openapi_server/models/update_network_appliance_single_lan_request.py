# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_network_appliance_single_lan_request_ipv6 import UpdateNetworkApplianceSingleLanRequestIpv6
from openapi_server.models.update_network_appliance_single_lan_request_mandatory_dhcp import UpdateNetworkApplianceSingleLanRequestMandatoryDhcp
from openapi_server import util


class UpdateNetworkApplianceSingleLanRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, appliance_ip: str=None, ipv6: UpdateNetworkApplianceSingleLanRequestIpv6=None, mandatory_dhcp: UpdateNetworkApplianceSingleLanRequestMandatoryDhcp=None, subnet: str=None):
        """UpdateNetworkApplianceSingleLanRequest - a model defined in OpenAPI

        :param appliance_ip: The appliance_ip of this UpdateNetworkApplianceSingleLanRequest.
        :param ipv6: The ipv6 of this UpdateNetworkApplianceSingleLanRequest.
        :param mandatory_dhcp: The mandatory_dhcp of this UpdateNetworkApplianceSingleLanRequest.
        :param subnet: The subnet of this UpdateNetworkApplianceSingleLanRequest.
        """
        self.openapi_types = {
            'appliance_ip': str,
            'ipv6': UpdateNetworkApplianceSingleLanRequestIpv6,
            'mandatory_dhcp': UpdateNetworkApplianceSingleLanRequestMandatoryDhcp,
            'subnet': str
        }

        self.attribute_map = {
            'appliance_ip': 'applianceIp',
            'ipv6': 'ipv6',
            'mandatory_dhcp': 'mandatoryDhcp',
            'subnet': 'subnet'
        }

        self._appliance_ip = appliance_ip
        self._ipv6 = ipv6
        self._mandatory_dhcp = mandatory_dhcp
        self._subnet = subnet

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateNetworkApplianceSingleLanRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateNetworkApplianceSingleLan_request of this UpdateNetworkApplianceSingleLanRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def appliance_ip(self):
        """Gets the appliance_ip of this UpdateNetworkApplianceSingleLanRequest.

        The appliance IP address of the single LAN

        :return: The appliance_ip of this UpdateNetworkApplianceSingleLanRequest.
        :rtype: str
        """
        return self._appliance_ip

    @appliance_ip.setter
    def appliance_ip(self, appliance_ip):
        """Sets the appliance_ip of this UpdateNetworkApplianceSingleLanRequest.

        The appliance IP address of the single LAN

        :param appliance_ip: The appliance_ip of this UpdateNetworkApplianceSingleLanRequest.
        :type appliance_ip: str
        """

        self._appliance_ip = appliance_ip

    @property
    def ipv6(self):
        """Gets the ipv6 of this UpdateNetworkApplianceSingleLanRequest.


        :return: The ipv6 of this UpdateNetworkApplianceSingleLanRequest.
        :rtype: UpdateNetworkApplianceSingleLanRequestIpv6
        """
        return self._ipv6

    @ipv6.setter
    def ipv6(self, ipv6):
        """Sets the ipv6 of this UpdateNetworkApplianceSingleLanRequest.


        :param ipv6: The ipv6 of this UpdateNetworkApplianceSingleLanRequest.
        :type ipv6: UpdateNetworkApplianceSingleLanRequestIpv6
        """

        self._ipv6 = ipv6

    @property
    def mandatory_dhcp(self):
        """Gets the mandatory_dhcp of this UpdateNetworkApplianceSingleLanRequest.


        :return: The mandatory_dhcp of this UpdateNetworkApplianceSingleLanRequest.
        :rtype: UpdateNetworkApplianceSingleLanRequestMandatoryDhcp
        """
        return self._mandatory_dhcp

    @mandatory_dhcp.setter
    def mandatory_dhcp(self, mandatory_dhcp):
        """Sets the mandatory_dhcp of this UpdateNetworkApplianceSingleLanRequest.


        :param mandatory_dhcp: The mandatory_dhcp of this UpdateNetworkApplianceSingleLanRequest.
        :type mandatory_dhcp: UpdateNetworkApplianceSingleLanRequestMandatoryDhcp
        """

        self._mandatory_dhcp = mandatory_dhcp

    @property
    def subnet(self):
        """Gets the subnet of this UpdateNetworkApplianceSingleLanRequest.

        The subnet of the single LAN configuration

        :return: The subnet of this UpdateNetworkApplianceSingleLanRequest.
        :rtype: str
        """
        return self._subnet

    @subnet.setter
    def subnet(self, subnet):
        """Sets the subnet of this UpdateNetworkApplianceSingleLanRequest.

        The subnet of the single LAN configuration

        :param subnet: The subnet of this UpdateNetworkApplianceSingleLanRequest.
        :type subnet: str
        """

        self._subnet = subnet
