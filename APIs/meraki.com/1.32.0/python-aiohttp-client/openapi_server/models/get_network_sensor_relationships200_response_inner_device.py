# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetNetworkSensorRelationships200ResponseInnerDevice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, product_type: str=None, serial: str=None):
        """GetNetworkSensorRelationships200ResponseInnerDevice - a model defined in OpenAPI

        :param name: The name of this GetNetworkSensorRelationships200ResponseInnerDevice.
        :param product_type: The product_type of this GetNetworkSensorRelationships200ResponseInnerDevice.
        :param serial: The serial of this GetNetworkSensorRelationships200ResponseInnerDevice.
        """
        self.openapi_types = {
            'name': str,
            'product_type': str,
            'serial': str
        }

        self.attribute_map = {
            'name': 'name',
            'product_type': 'productType',
            'serial': 'serial'
        }

        self._name = name
        self._product_type = product_type
        self._serial = serial

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetNetworkSensorRelationships200ResponseInnerDevice':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getNetworkSensorRelationships_200_response_inner_device of this GetNetworkSensorRelationships200ResponseInnerDevice.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this GetNetworkSensorRelationships200ResponseInnerDevice.

        The name of the device

        :return: The name of this GetNetworkSensorRelationships200ResponseInnerDevice.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetNetworkSensorRelationships200ResponseInnerDevice.

        The name of the device

        :param name: The name of this GetNetworkSensorRelationships200ResponseInnerDevice.
        :type name: str
        """

        self._name = name

    @property
    def product_type(self):
        """Gets the product_type of this GetNetworkSensorRelationships200ResponseInnerDevice.

        The product type of the device

        :return: The product_type of this GetNetworkSensorRelationships200ResponseInnerDevice.
        :rtype: str
        """
        return self._product_type

    @product_type.setter
    def product_type(self, product_type):
        """Sets the product_type of this GetNetworkSensorRelationships200ResponseInnerDevice.

        The product type of the device

        :param product_type: The product_type of this GetNetworkSensorRelationships200ResponseInnerDevice.
        :type product_type: str
        """
        allowed_values = ["camera", "sensor"]  # noqa: E501
        if product_type not in allowed_values:
            raise ValueError(
                "Invalid value for `product_type` ({0}), must be one of {1}"
                .format(product_type, allowed_values)
            )

        self._product_type = product_type

    @property
    def serial(self):
        """Gets the serial of this GetNetworkSensorRelationships200ResponseInnerDevice.

        The serial of the device

        :return: The serial of this GetNetworkSensorRelationships200ResponseInnerDevice.
        :rtype: str
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """Sets the serial of this GetNetworkSensorRelationships200ResponseInnerDevice.

        The serial of the device

        :param serial: The serial of this GetNetworkSensorRelationships200ResponseInnerDevice.
        :type serial: str
        """

        self._serial = serial
