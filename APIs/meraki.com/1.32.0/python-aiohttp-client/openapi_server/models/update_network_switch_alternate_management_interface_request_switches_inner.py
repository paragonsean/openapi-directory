# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateNetworkSwitchAlternateManagementInterfaceRequestSwitchesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alternate_management_ip: str=None, gateway: str=None, serial: str=None, subnet_mask: str=None):
        """UpdateNetworkSwitchAlternateManagementInterfaceRequestSwitchesInner - a model defined in OpenAPI

        :param alternate_management_ip: The alternate_management_ip of this UpdateNetworkSwitchAlternateManagementInterfaceRequestSwitchesInner.
        :param gateway: The gateway of this UpdateNetworkSwitchAlternateManagementInterfaceRequestSwitchesInner.
        :param serial: The serial of this UpdateNetworkSwitchAlternateManagementInterfaceRequestSwitchesInner.
        :param subnet_mask: The subnet_mask of this UpdateNetworkSwitchAlternateManagementInterfaceRequestSwitchesInner.
        """
        self.openapi_types = {
            'alternate_management_ip': str,
            'gateway': str,
            'serial': str,
            'subnet_mask': str
        }

        self.attribute_map = {
            'alternate_management_ip': 'alternateManagementIp',
            'gateway': 'gateway',
            'serial': 'serial',
            'subnet_mask': 'subnetMask'
        }

        self._alternate_management_ip = alternate_management_ip
        self._gateway = gateway
        self._serial = serial
        self._subnet_mask = subnet_mask

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateNetworkSwitchAlternateManagementInterfaceRequestSwitchesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateNetworkSwitchAlternateManagementInterface_request_switches_inner of this UpdateNetworkSwitchAlternateManagementInterfaceRequestSwitchesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alternate_management_ip(self):
        """Gets the alternate_management_ip of this UpdateNetworkSwitchAlternateManagementInterfaceRequestSwitchesInner.

        Switch alternative management IP. To remove a prior IP setting, provide an empty string

        :return: The alternate_management_ip of this UpdateNetworkSwitchAlternateManagementInterfaceRequestSwitchesInner.
        :rtype: str
        """
        return self._alternate_management_ip

    @alternate_management_ip.setter
    def alternate_management_ip(self, alternate_management_ip):
        """Sets the alternate_management_ip of this UpdateNetworkSwitchAlternateManagementInterfaceRequestSwitchesInner.

        Switch alternative management IP. To remove a prior IP setting, provide an empty string

        :param alternate_management_ip: The alternate_management_ip of this UpdateNetworkSwitchAlternateManagementInterfaceRequestSwitchesInner.
        :type alternate_management_ip: str
        """
        if alternate_management_ip is None:
            raise ValueError("Invalid value for `alternate_management_ip`, must not be `None`")

        self._alternate_management_ip = alternate_management_ip

    @property
    def gateway(self):
        """Gets the gateway of this UpdateNetworkSwitchAlternateManagementInterfaceRequestSwitchesInner.

        Switch gateway must be in IP format. Only and must be specified for Polaris switches

        :return: The gateway of this UpdateNetworkSwitchAlternateManagementInterfaceRequestSwitchesInner.
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this UpdateNetworkSwitchAlternateManagementInterfaceRequestSwitchesInner.

        Switch gateway must be in IP format. Only and must be specified for Polaris switches

        :param gateway: The gateway of this UpdateNetworkSwitchAlternateManagementInterfaceRequestSwitchesInner.
        :type gateway: str
        """

        self._gateway = gateway

    @property
    def serial(self):
        """Gets the serial of this UpdateNetworkSwitchAlternateManagementInterfaceRequestSwitchesInner.

        Switch serial number

        :return: The serial of this UpdateNetworkSwitchAlternateManagementInterfaceRequestSwitchesInner.
        :rtype: str
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """Sets the serial of this UpdateNetworkSwitchAlternateManagementInterfaceRequestSwitchesInner.

        Switch serial number

        :param serial: The serial of this UpdateNetworkSwitchAlternateManagementInterfaceRequestSwitchesInner.
        :type serial: str
        """
        if serial is None:
            raise ValueError("Invalid value for `serial`, must not be `None`")

        self._serial = serial

    @property
    def subnet_mask(self):
        """Gets the subnet_mask of this UpdateNetworkSwitchAlternateManagementInterfaceRequestSwitchesInner.

        Switch subnet mask must be in IP format. Only and must be specified for Polaris switches

        :return: The subnet_mask of this UpdateNetworkSwitchAlternateManagementInterfaceRequestSwitchesInner.
        :rtype: str
        """
        return self._subnet_mask

    @subnet_mask.setter
    def subnet_mask(self, subnet_mask):
        """Sets the subnet_mask of this UpdateNetworkSwitchAlternateManagementInterfaceRequestSwitchesInner.

        Switch subnet mask must be in IP format. Only and must be specified for Polaris switches

        :param subnet_mask: The subnet_mask of this UpdateNetworkSwitchAlternateManagementInterfaceRequestSwitchesInner.
        :type subnet_mask: str
        """

        self._subnet_mask = subnet_mask
