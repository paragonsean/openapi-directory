# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_device_switch_ports200_response_inner_profile import GetDeviceSwitchPorts200ResponseInnerProfile
from openapi_server import util


class GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_policy_number: int=None, access_policy_type: str=None, allowed_vlans: str=None, dai_trusted: bool=None, enabled: bool=None, flexible_stacking_enabled: bool=None, isolation_enabled: bool=None, link_negotiation: str=None, link_negotiation_capabilities: List[str]=None, mac_allow_list: List[str]=None, name: str=None, poe_enabled: bool=None, port_id: str=None, port_schedule_id: str=None, profile: GetDeviceSwitchPorts200ResponseInnerProfile=None, rstp_enabled: bool=None, sticky_mac_allow_list: List[str]=None, sticky_mac_allow_list_limit: int=None, storm_control_enabled: bool=None, stp_guard: str=None, tags: List[str]=None, type: str=None, udld: str=None, vlan: int=None, voice_vlan: int=None):
        """GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner - a model defined in OpenAPI

        :param access_policy_number: The access_policy_number of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :param access_policy_type: The access_policy_type of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :param allowed_vlans: The allowed_vlans of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :param dai_trusted: The dai_trusted of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :param enabled: The enabled of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :param flexible_stacking_enabled: The flexible_stacking_enabled of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :param isolation_enabled: The isolation_enabled of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :param link_negotiation: The link_negotiation of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :param link_negotiation_capabilities: The link_negotiation_capabilities of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :param mac_allow_list: The mac_allow_list of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :param name: The name of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :param poe_enabled: The poe_enabled of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :param port_id: The port_id of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :param port_schedule_id: The port_schedule_id of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :param profile: The profile of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :param rstp_enabled: The rstp_enabled of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :param sticky_mac_allow_list: The sticky_mac_allow_list of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :param sticky_mac_allow_list_limit: The sticky_mac_allow_list_limit of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :param storm_control_enabled: The storm_control_enabled of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :param stp_guard: The stp_guard of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :param tags: The tags of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :param type: The type of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :param udld: The udld of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :param vlan: The vlan of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :param voice_vlan: The voice_vlan of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        """
        self.openapi_types = {
            'access_policy_number': int,
            'access_policy_type': str,
            'allowed_vlans': str,
            'dai_trusted': bool,
            'enabled': bool,
            'flexible_stacking_enabled': bool,
            'isolation_enabled': bool,
            'link_negotiation': str,
            'link_negotiation_capabilities': List[str],
            'mac_allow_list': List[str],
            'name': str,
            'poe_enabled': bool,
            'port_id': str,
            'port_schedule_id': str,
            'profile': GetDeviceSwitchPorts200ResponseInnerProfile,
            'rstp_enabled': bool,
            'sticky_mac_allow_list': List[str],
            'sticky_mac_allow_list_limit': int,
            'storm_control_enabled': bool,
            'stp_guard': str,
            'tags': List[str],
            'type': str,
            'udld': str,
            'vlan': int,
            'voice_vlan': int
        }

        self.attribute_map = {
            'access_policy_number': 'accessPolicyNumber',
            'access_policy_type': 'accessPolicyType',
            'allowed_vlans': 'allowedVlans',
            'dai_trusted': 'daiTrusted',
            'enabled': 'enabled',
            'flexible_stacking_enabled': 'flexibleStackingEnabled',
            'isolation_enabled': 'isolationEnabled',
            'link_negotiation': 'linkNegotiation',
            'link_negotiation_capabilities': 'linkNegotiationCapabilities',
            'mac_allow_list': 'macAllowList',
            'name': 'name',
            'poe_enabled': 'poeEnabled',
            'port_id': 'portId',
            'port_schedule_id': 'portScheduleId',
            'profile': 'profile',
            'rstp_enabled': 'rstpEnabled',
            'sticky_mac_allow_list': 'stickyMacAllowList',
            'sticky_mac_allow_list_limit': 'stickyMacAllowListLimit',
            'storm_control_enabled': 'stormControlEnabled',
            'stp_guard': 'stpGuard',
            'tags': 'tags',
            'type': 'type',
            'udld': 'udld',
            'vlan': 'vlan',
            'voice_vlan': 'voiceVlan'
        }

        self._access_policy_number = access_policy_number
        self._access_policy_type = access_policy_type
        self._allowed_vlans = allowed_vlans
        self._dai_trusted = dai_trusted
        self._enabled = enabled
        self._flexible_stacking_enabled = flexible_stacking_enabled
        self._isolation_enabled = isolation_enabled
        self._link_negotiation = link_negotiation
        self._link_negotiation_capabilities = link_negotiation_capabilities
        self._mac_allow_list = mac_allow_list
        self._name = name
        self._poe_enabled = poe_enabled
        self._port_id = port_id
        self._port_schedule_id = port_schedule_id
        self._profile = profile
        self._rstp_enabled = rstp_enabled
        self._sticky_mac_allow_list = sticky_mac_allow_list
        self._sticky_mac_allow_list_limit = sticky_mac_allow_list_limit
        self._storm_control_enabled = storm_control_enabled
        self._stp_guard = stp_guard
        self._tags = tags
        self._type = type
        self._udld = udld
        self._vlan = vlan
        self._voice_vlan = voice_vlan

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getOrganizationConfigTemplateSwitchProfilePorts_200_response_inner of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_policy_number(self):
        """Gets the access_policy_number of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.

        The number of a custom access policy to configure on the switch profile port. Only applicable when 'accessPolicyType' is 'Custom access policy'.

        :return: The access_policy_number of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :rtype: int
        """
        return self._access_policy_number

    @access_policy_number.setter
    def access_policy_number(self, access_policy_number):
        """Sets the access_policy_number of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.

        The number of a custom access policy to configure on the switch profile port. Only applicable when 'accessPolicyType' is 'Custom access policy'.

        :param access_policy_number: The access_policy_number of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :type access_policy_number: int
        """

        self._access_policy_number = access_policy_number

    @property
    def access_policy_type(self):
        """Gets the access_policy_type of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.

        The type of the access policy of the switch profile port. Only applicable to access ports. Can be one of 'Open', 'Custom access policy', 'MAC allow list' or 'Sticky MAC allow list'.

        :return: The access_policy_type of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :rtype: str
        """
        return self._access_policy_type

    @access_policy_type.setter
    def access_policy_type(self, access_policy_type):
        """Sets the access_policy_type of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.

        The type of the access policy of the switch profile port. Only applicable to access ports. Can be one of 'Open', 'Custom access policy', 'MAC allow list' or 'Sticky MAC allow list'.

        :param access_policy_type: The access_policy_type of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :type access_policy_type: str
        """
        allowed_values = ["Custom access policy", "MAC allow list", "Open", "Sticky MAC allow list"]  # noqa: E501
        if access_policy_type not in allowed_values:
            raise ValueError(
                "Invalid value for `access_policy_type` ({0}), must be one of {1}"
                .format(access_policy_type, allowed_values)
            )

        self._access_policy_type = access_policy_type

    @property
    def allowed_vlans(self):
        """Gets the allowed_vlans of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.

        The VLANs allowed on the switch profile port. Only applicable to trunk ports.

        :return: The allowed_vlans of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :rtype: str
        """
        return self._allowed_vlans

    @allowed_vlans.setter
    def allowed_vlans(self, allowed_vlans):
        """Sets the allowed_vlans of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.

        The VLANs allowed on the switch profile port. Only applicable to trunk ports.

        :param allowed_vlans: The allowed_vlans of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :type allowed_vlans: str
        """

        self._allowed_vlans = allowed_vlans

    @property
    def dai_trusted(self):
        """Gets the dai_trusted of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.

        If true, ARP packets for this port will be considered trusted, and Dynamic ARP Inspection will allow the traffic.

        :return: The dai_trusted of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :rtype: bool
        """
        return self._dai_trusted

    @dai_trusted.setter
    def dai_trusted(self, dai_trusted):
        """Sets the dai_trusted of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.

        If true, ARP packets for this port will be considered trusted, and Dynamic ARP Inspection will allow the traffic.

        :param dai_trusted: The dai_trusted of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :type dai_trusted: bool
        """

        self._dai_trusted = dai_trusted

    @property
    def enabled(self):
        """Gets the enabled of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.

        The status of the switch profile port.

        :return: The enabled of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.

        The status of the switch profile port.

        :param enabled: The enabled of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def flexible_stacking_enabled(self):
        """Gets the flexible_stacking_enabled of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.

        For supported switches (e.g. MS420/MS425), whether or not the port has flexible stacking enabled.

        :return: The flexible_stacking_enabled of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :rtype: bool
        """
        return self._flexible_stacking_enabled

    @flexible_stacking_enabled.setter
    def flexible_stacking_enabled(self, flexible_stacking_enabled):
        """Sets the flexible_stacking_enabled of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.

        For supported switches (e.g. MS420/MS425), whether or not the port has flexible stacking enabled.

        :param flexible_stacking_enabled: The flexible_stacking_enabled of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :type flexible_stacking_enabled: bool
        """

        self._flexible_stacking_enabled = flexible_stacking_enabled

    @property
    def isolation_enabled(self):
        """Gets the isolation_enabled of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.

        The isolation status of the switch profile port.

        :return: The isolation_enabled of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :rtype: bool
        """
        return self._isolation_enabled

    @isolation_enabled.setter
    def isolation_enabled(self, isolation_enabled):
        """Sets the isolation_enabled of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.

        The isolation status of the switch profile port.

        :param isolation_enabled: The isolation_enabled of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :type isolation_enabled: bool
        """

        self._isolation_enabled = isolation_enabled

    @property
    def link_negotiation(self):
        """Gets the link_negotiation of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.

        The link speed for the switch profile port.

        :return: The link_negotiation of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :rtype: str
        """
        return self._link_negotiation

    @link_negotiation.setter
    def link_negotiation(self, link_negotiation):
        """Sets the link_negotiation of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.

        The link speed for the switch profile port.

        :param link_negotiation: The link_negotiation of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :type link_negotiation: str
        """

        self._link_negotiation = link_negotiation

    @property
    def link_negotiation_capabilities(self):
        """Gets the link_negotiation_capabilities of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.

        Available link speeds for the switch profile port.

        :return: The link_negotiation_capabilities of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :rtype: List[str]
        """
        return self._link_negotiation_capabilities

    @link_negotiation_capabilities.setter
    def link_negotiation_capabilities(self, link_negotiation_capabilities):
        """Sets the link_negotiation_capabilities of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.

        Available link speeds for the switch profile port.

        :param link_negotiation_capabilities: The link_negotiation_capabilities of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :type link_negotiation_capabilities: List[str]
        """

        self._link_negotiation_capabilities = link_negotiation_capabilities

    @property
    def mac_allow_list(self):
        """Gets the mac_allow_list of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.

        Only devices with MAC addresses specified in this list will have access to this port. Up to 20 MAC addresses can be defined. Only applicable when 'accessPolicyType' is 'MAC allow list'.

        :return: The mac_allow_list of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :rtype: List[str]
        """
        return self._mac_allow_list

    @mac_allow_list.setter
    def mac_allow_list(self, mac_allow_list):
        """Sets the mac_allow_list of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.

        Only devices with MAC addresses specified in this list will have access to this port. Up to 20 MAC addresses can be defined. Only applicable when 'accessPolicyType' is 'MAC allow list'.

        :param mac_allow_list: The mac_allow_list of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :type mac_allow_list: List[str]
        """

        self._mac_allow_list = mac_allow_list

    @property
    def name(self):
        """Gets the name of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.

        The name of the switch profile port.

        :return: The name of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.

        The name of the switch profile port.

        :param name: The name of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :type name: str
        """

        self._name = name

    @property
    def poe_enabled(self):
        """Gets the poe_enabled of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.

        The PoE status of the switch profile port.

        :return: The poe_enabled of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :rtype: bool
        """
        return self._poe_enabled

    @poe_enabled.setter
    def poe_enabled(self, poe_enabled):
        """Sets the poe_enabled of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.

        The PoE status of the switch profile port.

        :param poe_enabled: The poe_enabled of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :type poe_enabled: bool
        """

        self._poe_enabled = poe_enabled

    @property
    def port_id(self):
        """Gets the port_id of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.

        The identifier of the switch profile port.

        :return: The port_id of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :rtype: str
        """
        return self._port_id

    @port_id.setter
    def port_id(self, port_id):
        """Sets the port_id of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.

        The identifier of the switch profile port.

        :param port_id: The port_id of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :type port_id: str
        """

        self._port_id = port_id

    @property
    def port_schedule_id(self):
        """Gets the port_schedule_id of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.

        The ID of the port schedule. A value of null will clear the port schedule.

        :return: The port_schedule_id of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :rtype: str
        """
        return self._port_schedule_id

    @port_schedule_id.setter
    def port_schedule_id(self, port_schedule_id):
        """Sets the port_schedule_id of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.

        The ID of the port schedule. A value of null will clear the port schedule.

        :param port_schedule_id: The port_schedule_id of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :type port_schedule_id: str
        """

        self._port_schedule_id = port_schedule_id

    @property
    def profile(self):
        """Gets the profile of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.


        :return: The profile of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :rtype: GetDeviceSwitchPorts200ResponseInnerProfile
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.


        :param profile: The profile of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :type profile: GetDeviceSwitchPorts200ResponseInnerProfile
        """

        self._profile = profile

    @property
    def rstp_enabled(self):
        """Gets the rstp_enabled of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.

        The rapid spanning tree protocol status.

        :return: The rstp_enabled of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :rtype: bool
        """
        return self._rstp_enabled

    @rstp_enabled.setter
    def rstp_enabled(self, rstp_enabled):
        """Sets the rstp_enabled of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.

        The rapid spanning tree protocol status.

        :param rstp_enabled: The rstp_enabled of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :type rstp_enabled: bool
        """

        self._rstp_enabled = rstp_enabled

    @property
    def sticky_mac_allow_list(self):
        """Gets the sticky_mac_allow_list of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.

        The initial list of MAC addresses for sticky Mac allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.

        :return: The sticky_mac_allow_list of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :rtype: List[str]
        """
        return self._sticky_mac_allow_list

    @sticky_mac_allow_list.setter
    def sticky_mac_allow_list(self, sticky_mac_allow_list):
        """Sets the sticky_mac_allow_list of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.

        The initial list of MAC addresses for sticky Mac allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.

        :param sticky_mac_allow_list: The sticky_mac_allow_list of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :type sticky_mac_allow_list: List[str]
        """

        self._sticky_mac_allow_list = sticky_mac_allow_list

    @property
    def sticky_mac_allow_list_limit(self):
        """Gets the sticky_mac_allow_list_limit of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.

        The maximum number of MAC addresses for sticky MAC allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.

        :return: The sticky_mac_allow_list_limit of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :rtype: int
        """
        return self._sticky_mac_allow_list_limit

    @sticky_mac_allow_list_limit.setter
    def sticky_mac_allow_list_limit(self, sticky_mac_allow_list_limit):
        """Sets the sticky_mac_allow_list_limit of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.

        The maximum number of MAC addresses for sticky MAC allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.

        :param sticky_mac_allow_list_limit: The sticky_mac_allow_list_limit of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :type sticky_mac_allow_list_limit: int
        """

        self._sticky_mac_allow_list_limit = sticky_mac_allow_list_limit

    @property
    def storm_control_enabled(self):
        """Gets the storm_control_enabled of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.

        The storm control status of the switch profile port.

        :return: The storm_control_enabled of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :rtype: bool
        """
        return self._storm_control_enabled

    @storm_control_enabled.setter
    def storm_control_enabled(self, storm_control_enabled):
        """Sets the storm_control_enabled of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.

        The storm control status of the switch profile port.

        :param storm_control_enabled: The storm_control_enabled of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :type storm_control_enabled: bool
        """

        self._storm_control_enabled = storm_control_enabled

    @property
    def stp_guard(self):
        """Gets the stp_guard of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.

        The state of the STP guard ('disabled', 'root guard', 'bpdu guard' or 'loop guard').

        :return: The stp_guard of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :rtype: str
        """
        return self._stp_guard

    @stp_guard.setter
    def stp_guard(self, stp_guard):
        """Sets the stp_guard of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.

        The state of the STP guard ('disabled', 'root guard', 'bpdu guard' or 'loop guard').

        :param stp_guard: The stp_guard of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :type stp_guard: str
        """
        allowed_values = ["bpdu guard", "disabled", "loop guard", "root guard"]  # noqa: E501
        if stp_guard not in allowed_values:
            raise ValueError(
                "Invalid value for `stp_guard` ({0}), must be one of {1}"
                .format(stp_guard, allowed_values)
            )

        self._stp_guard = stp_guard

    @property
    def tags(self):
        """Gets the tags of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.

        The list of tags of the switch profile port.

        :return: The tags of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.

        The list of tags of the switch profile port.

        :param tags: The tags of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def type(self):
        """Gets the type of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.

        The type of the switch profile port ('trunk' or 'access').

        :return: The type of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.

        The type of the switch profile port ('trunk' or 'access').

        :param type: The type of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :type type: str
        """
        allowed_values = ["access", "trunk"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def udld(self):
        """Gets the udld of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.

        The action to take when Unidirectional Link is detected (Alert only, Enforce). Default configuration is Alert only.

        :return: The udld of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :rtype: str
        """
        return self._udld

    @udld.setter
    def udld(self, udld):
        """Sets the udld of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.

        The action to take when Unidirectional Link is detected (Alert only, Enforce). Default configuration is Alert only.

        :param udld: The udld of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :type udld: str
        """
        allowed_values = ["Alert only", "Enforce"]  # noqa: E501
        if udld not in allowed_values:
            raise ValueError(
                "Invalid value for `udld` ({0}), must be one of {1}"
                .format(udld, allowed_values)
            )

        self._udld = udld

    @property
    def vlan(self):
        """Gets the vlan of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.

        The VLAN of the switch profile port. A null value will clear the value set for trunk ports.

        :return: The vlan of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :rtype: int
        """
        return self._vlan

    @vlan.setter
    def vlan(self, vlan):
        """Sets the vlan of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.

        The VLAN of the switch profile port. A null value will clear the value set for trunk ports.

        :param vlan: The vlan of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :type vlan: int
        """

        self._vlan = vlan

    @property
    def voice_vlan(self):
        """Gets the voice_vlan of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.

        The voice VLAN of the switch profile port. Only applicable to access ports.

        :return: The voice_vlan of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :rtype: int
        """
        return self._voice_vlan

    @voice_vlan.setter
    def voice_vlan(self, voice_vlan):
        """Sets the voice_vlan of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.

        The voice VLAN of the switch profile port. Only applicable to access ports.

        :param voice_vlan: The voice_vlan of this GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner.
        :type voice_vlan: int
        """

        self._voice_vlan = voice_vlan
