# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateNetworkApplianceContentFilteringRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_url_patterns: List[str]=None, blocked_url_categories: List[str]=None, blocked_url_patterns: List[str]=None, url_category_list_size: str=None):
        """UpdateNetworkApplianceContentFilteringRequest - a model defined in OpenAPI

        :param allowed_url_patterns: The allowed_url_patterns of this UpdateNetworkApplianceContentFilteringRequest.
        :param blocked_url_categories: The blocked_url_categories of this UpdateNetworkApplianceContentFilteringRequest.
        :param blocked_url_patterns: The blocked_url_patterns of this UpdateNetworkApplianceContentFilteringRequest.
        :param url_category_list_size: The url_category_list_size of this UpdateNetworkApplianceContentFilteringRequest.
        """
        self.openapi_types = {
            'allowed_url_patterns': List[str],
            'blocked_url_categories': List[str],
            'blocked_url_patterns': List[str],
            'url_category_list_size': str
        }

        self.attribute_map = {
            'allowed_url_patterns': 'allowedUrlPatterns',
            'blocked_url_categories': 'blockedUrlCategories',
            'blocked_url_patterns': 'blockedUrlPatterns',
            'url_category_list_size': 'urlCategoryListSize'
        }

        self._allowed_url_patterns = allowed_url_patterns
        self._blocked_url_categories = blocked_url_categories
        self._blocked_url_patterns = blocked_url_patterns
        self._url_category_list_size = url_category_list_size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateNetworkApplianceContentFilteringRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateNetworkApplianceContentFiltering_request of this UpdateNetworkApplianceContentFilteringRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_url_patterns(self):
        """Gets the allowed_url_patterns of this UpdateNetworkApplianceContentFilteringRequest.

        A list of URL patterns that are allowed

        :return: The allowed_url_patterns of this UpdateNetworkApplianceContentFilteringRequest.
        :rtype: List[str]
        """
        return self._allowed_url_patterns

    @allowed_url_patterns.setter
    def allowed_url_patterns(self, allowed_url_patterns):
        """Sets the allowed_url_patterns of this UpdateNetworkApplianceContentFilteringRequest.

        A list of URL patterns that are allowed

        :param allowed_url_patterns: The allowed_url_patterns of this UpdateNetworkApplianceContentFilteringRequest.
        :type allowed_url_patterns: List[str]
        """

        self._allowed_url_patterns = allowed_url_patterns

    @property
    def blocked_url_categories(self):
        """Gets the blocked_url_categories of this UpdateNetworkApplianceContentFilteringRequest.

        A list of URL categories to block

        :return: The blocked_url_categories of this UpdateNetworkApplianceContentFilteringRequest.
        :rtype: List[str]
        """
        return self._blocked_url_categories

    @blocked_url_categories.setter
    def blocked_url_categories(self, blocked_url_categories):
        """Sets the blocked_url_categories of this UpdateNetworkApplianceContentFilteringRequest.

        A list of URL categories to block

        :param blocked_url_categories: The blocked_url_categories of this UpdateNetworkApplianceContentFilteringRequest.
        :type blocked_url_categories: List[str]
        """

        self._blocked_url_categories = blocked_url_categories

    @property
    def blocked_url_patterns(self):
        """Gets the blocked_url_patterns of this UpdateNetworkApplianceContentFilteringRequest.

        A list of URL patterns that are blocked

        :return: The blocked_url_patterns of this UpdateNetworkApplianceContentFilteringRequest.
        :rtype: List[str]
        """
        return self._blocked_url_patterns

    @blocked_url_patterns.setter
    def blocked_url_patterns(self, blocked_url_patterns):
        """Sets the blocked_url_patterns of this UpdateNetworkApplianceContentFilteringRequest.

        A list of URL patterns that are blocked

        :param blocked_url_patterns: The blocked_url_patterns of this UpdateNetworkApplianceContentFilteringRequest.
        :type blocked_url_patterns: List[str]
        """

        self._blocked_url_patterns = blocked_url_patterns

    @property
    def url_category_list_size(self):
        """Gets the url_category_list_size of this UpdateNetworkApplianceContentFilteringRequest.

        URL category list size which is either 'topSites' or 'fullList'

        :return: The url_category_list_size of this UpdateNetworkApplianceContentFilteringRequest.
        :rtype: str
        """
        return self._url_category_list_size

    @url_category_list_size.setter
    def url_category_list_size(self, url_category_list_size):
        """Sets the url_category_list_size of this UpdateNetworkApplianceContentFilteringRequest.

        URL category list size which is either 'topSites' or 'fullList'

        :param url_category_list_size: The url_category_list_size of this UpdateNetworkApplianceContentFilteringRequest.
        :type url_category_list_size: str
        """
        allowed_values = ["fullList", "topSites"]  # noqa: E501
        if url_category_list_size not in allowed_values:
            raise ValueError(
                "Invalid value for `url_category_list_size` ({0}), must be one of {1}"
                .format(url_category_list_size, allowed_values)
            )

        self._url_category_list_size = url_category_list_size
