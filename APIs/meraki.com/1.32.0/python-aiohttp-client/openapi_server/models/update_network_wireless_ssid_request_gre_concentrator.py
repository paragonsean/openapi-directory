# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateNetworkWirelessSsidRequestGreConcentrator(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, host: str=None):
        """UpdateNetworkWirelessSsidRequestGreConcentrator - a model defined in OpenAPI

        :param host: The host of this UpdateNetworkWirelessSsidRequestGreConcentrator.
        """
        self.openapi_types = {
            'host': str
        }

        self.attribute_map = {
            'host': 'host'
        }

        self._host = host

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateNetworkWirelessSsidRequestGreConcentrator':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateNetworkWirelessSsid_request_gre_concentrator of this UpdateNetworkWirelessSsidRequestGreConcentrator.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def host(self):
        """Gets the host of this UpdateNetworkWirelessSsidRequestGreConcentrator.

        The EoGRE concentrator's IP or FQDN. This param is required when ipAssignmentMode is 'Ethernet over GRE'.

        :return: The host of this UpdateNetworkWirelessSsidRequestGreConcentrator.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this UpdateNetworkWirelessSsidRequestGreConcentrator.

        The EoGRE concentrator's IP or FQDN. This param is required when ipAssignmentMode is 'Ethernet over GRE'.

        :param host: The host of this UpdateNetworkWirelessSsidRequestGreConcentrator.
        :type host: str
        """
        if host is None:
            raise ValueError("Invalid value for `host`, must not be `None`")

        self._host = host
