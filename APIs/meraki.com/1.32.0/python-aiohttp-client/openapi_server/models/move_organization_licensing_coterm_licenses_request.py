# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.move_organization_licensing_coterm_licenses_request_destination import MoveOrganizationLicensingCotermLicensesRequestDestination
from openapi_server.models.move_organization_licensing_coterm_licenses_request_licenses_inner import MoveOrganizationLicensingCotermLicensesRequestLicensesInner
from openapi_server import util


class MoveOrganizationLicensingCotermLicensesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination: MoveOrganizationLicensingCotermLicensesRequestDestination=None, licenses: List[MoveOrganizationLicensingCotermLicensesRequestLicensesInner]=None):
        """MoveOrganizationLicensingCotermLicensesRequest - a model defined in OpenAPI

        :param destination: The destination of this MoveOrganizationLicensingCotermLicensesRequest.
        :param licenses: The licenses of this MoveOrganizationLicensingCotermLicensesRequest.
        """
        self.openapi_types = {
            'destination': MoveOrganizationLicensingCotermLicensesRequestDestination,
            'licenses': List[MoveOrganizationLicensingCotermLicensesRequestLicensesInner]
        }

        self.attribute_map = {
            'destination': 'destination',
            'licenses': 'licenses'
        }

        self._destination = destination
        self._licenses = licenses

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MoveOrganizationLicensingCotermLicensesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The moveOrganizationLicensingCotermLicenses_request of this MoveOrganizationLicensingCotermLicensesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination(self):
        """Gets the destination of this MoveOrganizationLicensingCotermLicensesRequest.


        :return: The destination of this MoveOrganizationLicensingCotermLicensesRequest.
        :rtype: MoveOrganizationLicensingCotermLicensesRequestDestination
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this MoveOrganizationLicensingCotermLicensesRequest.


        :param destination: The destination of this MoveOrganizationLicensingCotermLicensesRequest.
        :type destination: MoveOrganizationLicensingCotermLicensesRequestDestination
        """
        if destination is None:
            raise ValueError("Invalid value for `destination`, must not be `None`")

        self._destination = destination

    @property
    def licenses(self):
        """Gets the licenses of this MoveOrganizationLicensingCotermLicensesRequest.

        The list of licenses to move

        :return: The licenses of this MoveOrganizationLicensingCotermLicensesRequest.
        :rtype: List[MoveOrganizationLicensingCotermLicensesRequestLicensesInner]
        """
        return self._licenses

    @licenses.setter
    def licenses(self, licenses):
        """Sets the licenses of this MoveOrganizationLicensingCotermLicensesRequest.

        The list of licenses to move

        :param licenses: The licenses of this MoveOrganizationLicensingCotermLicensesRequest.
        :type licenses: List[MoveOrganizationLicensingCotermLicensesRequestLicensesInner]
        """
        if licenses is None:
            raise ValueError("Invalid value for `licenses`, must not be `None`")

        self._licenses = licenses
