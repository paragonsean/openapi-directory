# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MoveOrganizationLicensesSeats200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dest_organization_id: str=None, license_id: str=None, seat_count: int=None):
        """MoveOrganizationLicensesSeats200Response - a model defined in OpenAPI

        :param dest_organization_id: The dest_organization_id of this MoveOrganizationLicensesSeats200Response.
        :param license_id: The license_id of this MoveOrganizationLicensesSeats200Response.
        :param seat_count: The seat_count of this MoveOrganizationLicensesSeats200Response.
        """
        self.openapi_types = {
            'dest_organization_id': str,
            'license_id': str,
            'seat_count': int
        }

        self.attribute_map = {
            'dest_organization_id': 'destOrganizationId',
            'license_id': 'licenseId',
            'seat_count': 'seatCount'
        }

        self._dest_organization_id = dest_organization_id
        self._license_id = license_id
        self._seat_count = seat_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MoveOrganizationLicensesSeats200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The moveOrganizationLicensesSeats_200_response of this MoveOrganizationLicensesSeats200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dest_organization_id(self):
        """Gets the dest_organization_id of this MoveOrganizationLicensesSeats200Response.

        The ID of the organization to move the SM seats to

        :return: The dest_organization_id of this MoveOrganizationLicensesSeats200Response.
        :rtype: str
        """
        return self._dest_organization_id

    @dest_organization_id.setter
    def dest_organization_id(self, dest_organization_id):
        """Sets the dest_organization_id of this MoveOrganizationLicensesSeats200Response.

        The ID of the organization to move the SM seats to

        :param dest_organization_id: The dest_organization_id of this MoveOrganizationLicensesSeats200Response.
        :type dest_organization_id: str
        """

        self._dest_organization_id = dest_organization_id

    @property
    def license_id(self):
        """Gets the license_id of this MoveOrganizationLicensesSeats200Response.

        The ID of the SM license to move the seats from

        :return: The license_id of this MoveOrganizationLicensesSeats200Response.
        :rtype: str
        """
        return self._license_id

    @license_id.setter
    def license_id(self, license_id):
        """Sets the license_id of this MoveOrganizationLicensesSeats200Response.

        The ID of the SM license to move the seats from

        :param license_id: The license_id of this MoveOrganizationLicensesSeats200Response.
        :type license_id: str
        """

        self._license_id = license_id

    @property
    def seat_count(self):
        """Gets the seat_count of this MoveOrganizationLicensesSeats200Response.

        The number of seats to move to the new organization. Must be less than or equal to the total number of seats of the license

        :return: The seat_count of this MoveOrganizationLicensesSeats200Response.
        :rtype: int
        """
        return self._seat_count

    @seat_count.setter
    def seat_count(self, seat_count):
        """Sets the seat_count of this MoveOrganizationLicensesSeats200Response.

        The number of seats to move to the new organization. Must be less than or equal to the total number of seats of the license

        :param seat_count: The seat_count of this MoveOrganizationLicensesSeats200Response.
        :type seat_count: int
        """

        self._seat_count = seat_count
