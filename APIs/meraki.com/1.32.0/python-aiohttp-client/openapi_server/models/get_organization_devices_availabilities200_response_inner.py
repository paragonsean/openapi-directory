# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_organization_devices_availabilities200_response_inner_network import GetOrganizationDevicesAvailabilities200ResponseInnerNetwork
from openapi_server import util


class GetOrganizationDevicesAvailabilities200ResponseInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mac: str=None, name: str=None, network: GetOrganizationDevicesAvailabilities200ResponseInnerNetwork=None, product_type: str=None, serial: str=None, status: str=None, tags: List[str]=None):
        """GetOrganizationDevicesAvailabilities200ResponseInner - a model defined in OpenAPI

        :param mac: The mac of this GetOrganizationDevicesAvailabilities200ResponseInner.
        :param name: The name of this GetOrganizationDevicesAvailabilities200ResponseInner.
        :param network: The network of this GetOrganizationDevicesAvailabilities200ResponseInner.
        :param product_type: The product_type of this GetOrganizationDevicesAvailabilities200ResponseInner.
        :param serial: The serial of this GetOrganizationDevicesAvailabilities200ResponseInner.
        :param status: The status of this GetOrganizationDevicesAvailabilities200ResponseInner.
        :param tags: The tags of this GetOrganizationDevicesAvailabilities200ResponseInner.
        """
        self.openapi_types = {
            'mac': str,
            'name': str,
            'network': GetOrganizationDevicesAvailabilities200ResponseInnerNetwork,
            'product_type': str,
            'serial': str,
            'status': str,
            'tags': List[str]
        }

        self.attribute_map = {
            'mac': 'mac',
            'name': 'name',
            'network': 'network',
            'product_type': 'productType',
            'serial': 'serial',
            'status': 'status',
            'tags': 'tags'
        }

        self._mac = mac
        self._name = name
        self._network = network
        self._product_type = product_type
        self._serial = serial
        self._status = status
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetOrganizationDevicesAvailabilities200ResponseInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getOrganizationDevicesAvailabilities_200_response_inner of this GetOrganizationDevicesAvailabilities200ResponseInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mac(self):
        """Gets the mac of this GetOrganizationDevicesAvailabilities200ResponseInner.

        The device MAC address.

        :return: The mac of this GetOrganizationDevicesAvailabilities200ResponseInner.
        :rtype: str
        """
        return self._mac

    @mac.setter
    def mac(self, mac):
        """Sets the mac of this GetOrganizationDevicesAvailabilities200ResponseInner.

        The device MAC address.

        :param mac: The mac of this GetOrganizationDevicesAvailabilities200ResponseInner.
        :type mac: str
        """

        self._mac = mac

    @property
    def name(self):
        """Gets the name of this GetOrganizationDevicesAvailabilities200ResponseInner.

        The device name.

        :return: The name of this GetOrganizationDevicesAvailabilities200ResponseInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetOrganizationDevicesAvailabilities200ResponseInner.

        The device name.

        :param name: The name of this GetOrganizationDevicesAvailabilities200ResponseInner.
        :type name: str
        """

        self._name = name

    @property
    def network(self):
        """Gets the network of this GetOrganizationDevicesAvailabilities200ResponseInner.


        :return: The network of this GetOrganizationDevicesAvailabilities200ResponseInner.
        :rtype: GetOrganizationDevicesAvailabilities200ResponseInnerNetwork
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this GetOrganizationDevicesAvailabilities200ResponseInner.


        :param network: The network of this GetOrganizationDevicesAvailabilities200ResponseInner.
        :type network: GetOrganizationDevicesAvailabilities200ResponseInnerNetwork
        """

        self._network = network

    @property
    def product_type(self):
        """Gets the product_type of this GetOrganizationDevicesAvailabilities200ResponseInner.

        Device product type.

        :return: The product_type of this GetOrganizationDevicesAvailabilities200ResponseInner.
        :rtype: str
        """
        return self._product_type

    @product_type.setter
    def product_type(self, product_type):
        """Sets the product_type of this GetOrganizationDevicesAvailabilities200ResponseInner.

        Device product type.

        :param product_type: The product_type of this GetOrganizationDevicesAvailabilities200ResponseInner.
        :type product_type: str
        """
        allowed_values = ["appliance", "camera", "cellularGateway", "sensor", "switch", "systemsManager", "wireless"]  # noqa: E501
        if product_type not in allowed_values:
            raise ValueError(
                "Invalid value for `product_type` ({0}), must be one of {1}"
                .format(product_type, allowed_values)
            )

        self._product_type = product_type

    @property
    def serial(self):
        """Gets the serial of this GetOrganizationDevicesAvailabilities200ResponseInner.

        The device serial number.

        :return: The serial of this GetOrganizationDevicesAvailabilities200ResponseInner.
        :rtype: str
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """Sets the serial of this GetOrganizationDevicesAvailabilities200ResponseInner.

        The device serial number.

        :param serial: The serial of this GetOrganizationDevicesAvailabilities200ResponseInner.
        :type serial: str
        """

        self._serial = serial

    @property
    def status(self):
        """Gets the status of this GetOrganizationDevicesAvailabilities200ResponseInner.

        Status of the device. Possible values are: online, alerting, offline, dormant.

        :return: The status of this GetOrganizationDevicesAvailabilities200ResponseInner.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetOrganizationDevicesAvailabilities200ResponseInner.

        Status of the device. Possible values are: online, alerting, offline, dormant.

        :param status: The status of this GetOrganizationDevicesAvailabilities200ResponseInner.
        :type status: str
        """
        allowed_values = ["alerting", "dormant", "offline", "online"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this GetOrganizationDevicesAvailabilities200ResponseInner.

        List of custom tags for the device.

        :return: The tags of this GetOrganizationDevicesAvailabilities200ResponseInner.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this GetOrganizationDevicesAvailabilities200ResponseInner.

        List of custom tags for the device.

        :param tags: The tags of this GetOrganizationDevicesAvailabilities200ResponseInner.
        :type tags: List[str]
        """

        self._tags = tags
