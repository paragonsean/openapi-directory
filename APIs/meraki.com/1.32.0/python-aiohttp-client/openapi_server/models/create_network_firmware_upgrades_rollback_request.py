# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_network_firmware_upgrades_rollback_request_reasons_inner import CreateNetworkFirmwareUpgradesRollbackRequestReasonsInner
from openapi_server.models.create_network_firmware_upgrades_rollback_request_to_version import CreateNetworkFirmwareUpgradesRollbackRequestToVersion
from openapi_server import util


class CreateNetworkFirmwareUpgradesRollbackRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, product: str=None, reasons: List[CreateNetworkFirmwareUpgradesRollbackRequestReasonsInner]=None, time: datetime=None, to_version: CreateNetworkFirmwareUpgradesRollbackRequestToVersion=None):
        """CreateNetworkFirmwareUpgradesRollbackRequest - a model defined in OpenAPI

        :param product: The product of this CreateNetworkFirmwareUpgradesRollbackRequest.
        :param reasons: The reasons of this CreateNetworkFirmwareUpgradesRollbackRequest.
        :param time: The time of this CreateNetworkFirmwareUpgradesRollbackRequest.
        :param to_version: The to_version of this CreateNetworkFirmwareUpgradesRollbackRequest.
        """
        self.openapi_types = {
            'product': str,
            'reasons': List[CreateNetworkFirmwareUpgradesRollbackRequestReasonsInner],
            'time': datetime,
            'to_version': CreateNetworkFirmwareUpgradesRollbackRequestToVersion
        }

        self.attribute_map = {
            'product': 'product',
            'reasons': 'reasons',
            'time': 'time',
            'to_version': 'toVersion'
        }

        self._product = product
        self._reasons = reasons
        self._time = time
        self._to_version = to_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateNetworkFirmwareUpgradesRollbackRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The createNetworkFirmwareUpgradesRollback_request of this CreateNetworkFirmwareUpgradesRollbackRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def product(self):
        """Gets the product of this CreateNetworkFirmwareUpgradesRollbackRequest.

        Product type to rollback (if the network is a combined network)

        :return: The product of this CreateNetworkFirmwareUpgradesRollbackRequest.
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this CreateNetworkFirmwareUpgradesRollbackRequest.

        Product type to rollback (if the network is a combined network)

        :param product: The product of this CreateNetworkFirmwareUpgradesRollbackRequest.
        :type product: str
        """
        allowed_values = ["appliance", "camera", "cellularGateway", "switch", "wireless"]  # noqa: E501
        if product not in allowed_values:
            raise ValueError(
                "Invalid value for `product` ({0}), must be one of {1}"
                .format(product, allowed_values)
            )

        self._product = product

    @property
    def reasons(self):
        """Gets the reasons of this CreateNetworkFirmwareUpgradesRollbackRequest.

        Reasons for the rollback

        :return: The reasons of this CreateNetworkFirmwareUpgradesRollbackRequest.
        :rtype: List[CreateNetworkFirmwareUpgradesRollbackRequestReasonsInner]
        """
        return self._reasons

    @reasons.setter
    def reasons(self, reasons):
        """Sets the reasons of this CreateNetworkFirmwareUpgradesRollbackRequest.

        Reasons for the rollback

        :param reasons: The reasons of this CreateNetworkFirmwareUpgradesRollbackRequest.
        :type reasons: List[CreateNetworkFirmwareUpgradesRollbackRequestReasonsInner]
        """
        if reasons is None:
            raise ValueError("Invalid value for `reasons`, must not be `None`")

        self._reasons = reasons

    @property
    def time(self):
        """Gets the time of this CreateNetworkFirmwareUpgradesRollbackRequest.

        Scheduled time for the rollback

        :return: The time of this CreateNetworkFirmwareUpgradesRollbackRequest.
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this CreateNetworkFirmwareUpgradesRollbackRequest.

        Scheduled time for the rollback

        :param time: The time of this CreateNetworkFirmwareUpgradesRollbackRequest.
        :type time: datetime
        """

        self._time = time

    @property
    def to_version(self):
        """Gets the to_version of this CreateNetworkFirmwareUpgradesRollbackRequest.


        :return: The to_version of this CreateNetworkFirmwareUpgradesRollbackRequest.
        :rtype: CreateNetworkFirmwareUpgradesRollbackRequestToVersion
        """
        return self._to_version

    @to_version.setter
    def to_version(self, to_version):
        """Sets the to_version of this CreateNetworkFirmwareUpgradesRollbackRequest.


        :param to_version: The to_version of this CreateNetworkFirmwareUpgradesRollbackRequest.
        :type to_version: CreateNetworkFirmwareUpgradesRollbackRequestToVersion
        """

        self._to_version = to_version
