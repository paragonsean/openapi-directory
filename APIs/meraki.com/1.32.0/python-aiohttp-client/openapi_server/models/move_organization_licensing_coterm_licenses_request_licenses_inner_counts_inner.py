# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MoveOrganizationLicensingCotermLicensesRequestLicensesInnerCountsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, model: str=None):
        """MoveOrganizationLicensingCotermLicensesRequestLicensesInnerCountsInner - a model defined in OpenAPI

        :param count: The count of this MoveOrganizationLicensingCotermLicensesRequestLicensesInnerCountsInner.
        :param model: The model of this MoveOrganizationLicensingCotermLicensesRequestLicensesInnerCountsInner.
        """
        self.openapi_types = {
            'count': int,
            'model': str
        }

        self.attribute_map = {
            'count': 'count',
            'model': 'model'
        }

        self._count = count
        self._model = model

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MoveOrganizationLicensingCotermLicensesRequestLicensesInnerCountsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The moveOrganizationLicensingCotermLicenses_request_licenses_inner_counts_inner of this MoveOrganizationLicensingCotermLicensesRequestLicensesInnerCountsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this MoveOrganizationLicensingCotermLicensesRequestLicensesInnerCountsInner.

        The number of counts to move

        :return: The count of this MoveOrganizationLicensingCotermLicensesRequestLicensesInnerCountsInner.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this MoveOrganizationLicensingCotermLicensesRequestLicensesInnerCountsInner.

        The number of counts to move

        :param count: The count of this MoveOrganizationLicensingCotermLicensesRequestLicensesInnerCountsInner.
        :type count: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")

        self._count = count

    @property
    def model(self):
        """Gets the model of this MoveOrganizationLicensingCotermLicensesRequestLicensesInnerCountsInner.

        The license model type to move counts of

        :return: The model of this MoveOrganizationLicensingCotermLicensesRequestLicensesInnerCountsInner.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this MoveOrganizationLicensingCotermLicensesRequestLicensesInnerCountsInner.

        The license model type to move counts of

        :param model: The model of this MoveOrganizationLicensingCotermLicensesRequestLicensesInnerCountsInner.
        :type model: str
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")

        self._model = model
