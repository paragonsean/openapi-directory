# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetNetworkFirmwareUpgrades200ResponseUpgradeWindow(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, day_of_week: str=None, hour_of_day: str=None):
        """GetNetworkFirmwareUpgrades200ResponseUpgradeWindow - a model defined in OpenAPI

        :param day_of_week: The day_of_week of this GetNetworkFirmwareUpgrades200ResponseUpgradeWindow.
        :param hour_of_day: The hour_of_day of this GetNetworkFirmwareUpgrades200ResponseUpgradeWindow.
        """
        self.openapi_types = {
            'day_of_week': str,
            'hour_of_day': str
        }

        self.attribute_map = {
            'day_of_week': 'dayOfWeek',
            'hour_of_day': 'hourOfDay'
        }

        self._day_of_week = day_of_week
        self._hour_of_day = hour_of_day

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetNetworkFirmwareUpgrades200ResponseUpgradeWindow':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getNetworkFirmwareUpgrades_200_response_upgradeWindow of this GetNetworkFirmwareUpgrades200ResponseUpgradeWindow.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def day_of_week(self):
        """Gets the day_of_week of this GetNetworkFirmwareUpgrades200ResponseUpgradeWindow.

        Day of the week

        :return: The day_of_week of this GetNetworkFirmwareUpgrades200ResponseUpgradeWindow.
        :rtype: str
        """
        return self._day_of_week

    @day_of_week.setter
    def day_of_week(self, day_of_week):
        """Sets the day_of_week of this GetNetworkFirmwareUpgrades200ResponseUpgradeWindow.

        Day of the week

        :param day_of_week: The day_of_week of this GetNetworkFirmwareUpgrades200ResponseUpgradeWindow.
        :type day_of_week: str
        """
        allowed_values = ["fri", "friday", "mon", "monday", "sat", "saturday", "sun", "sunday", "thu", "thursday", "tue", "tuesday", "wed", "wednesday"]  # noqa: E501
        if day_of_week not in allowed_values:
            raise ValueError(
                "Invalid value for `day_of_week` ({0}), must be one of {1}"
                .format(day_of_week, allowed_values)
            )

        self._day_of_week = day_of_week

    @property
    def hour_of_day(self):
        """Gets the hour_of_day of this GetNetworkFirmwareUpgrades200ResponseUpgradeWindow.

        Hour of the day

        :return: The hour_of_day of this GetNetworkFirmwareUpgrades200ResponseUpgradeWindow.
        :rtype: str
        """
        return self._hour_of_day

    @hour_of_day.setter
    def hour_of_day(self, hour_of_day):
        """Sets the hour_of_day of this GetNetworkFirmwareUpgrades200ResponseUpgradeWindow.

        Hour of the day

        :param hour_of_day: The hour_of_day of this GetNetworkFirmwareUpgrades200ResponseUpgradeWindow.
        :type hour_of_day: str
        """
        allowed_values = ["0:00", "600", "660", "720", "780", "840", "900", "960", "1020", "1080", "1140", "60", "1200", "1260", "1320", "1380", "120", "180", "240", "300", "360", "420", "480", "540"]  # noqa: E501
        if hour_of_day not in allowed_values:
            raise ValueError(
                "Invalid value for `hour_of_day` ({0}), must be one of {1}"
                .format(hour_of_day, allowed_values)
            )

        self._hour_of_day = hour_of_day
