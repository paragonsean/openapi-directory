# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetNetworkSwitchAccessPolicies200ResponseInnerDot1x(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, control_direction: str=None):
        """GetNetworkSwitchAccessPolicies200ResponseInnerDot1x - a model defined in OpenAPI

        :param control_direction: The control_direction of this GetNetworkSwitchAccessPolicies200ResponseInnerDot1x.
        """
        self.openapi_types = {
            'control_direction': str
        }

        self.attribute_map = {
            'control_direction': 'controlDirection'
        }

        self._control_direction = control_direction

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetNetworkSwitchAccessPolicies200ResponseInnerDot1x':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getNetworkSwitchAccessPolicies_200_response_inner_dot1x of this GetNetworkSwitchAccessPolicies200ResponseInnerDot1x.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def control_direction(self):
        """Gets the control_direction of this GetNetworkSwitchAccessPolicies200ResponseInnerDot1x.

        Supports either 'both' or 'inbound'. Set to 'inbound' to allow unauthorized egress on the switchport. Set to 'both' to control both traffic directions with authorization. Defaults to 'both'

        :return: The control_direction of this GetNetworkSwitchAccessPolicies200ResponseInnerDot1x.
        :rtype: str
        """
        return self._control_direction

    @control_direction.setter
    def control_direction(self, control_direction):
        """Sets the control_direction of this GetNetworkSwitchAccessPolicies200ResponseInnerDot1x.

        Supports either 'both' or 'inbound'. Set to 'inbound' to allow unauthorized egress on the switchport. Set to 'both' to control both traffic directions with authorization. Defaults to 'both'

        :param control_direction: The control_direction of this GetNetworkSwitchAccessPolicies200ResponseInnerDot1x.
        :type control_direction: str
        """
        allowed_values = ["both", "inbound"]  # noqa: E501
        if control_direction not in allowed_values:
            raise ValueError(
                "Invalid value for `control_direction` ({0}), must be one of {1}"
                .format(control_direction, allowed_values)
            )

        self._control_direction = control_direction
