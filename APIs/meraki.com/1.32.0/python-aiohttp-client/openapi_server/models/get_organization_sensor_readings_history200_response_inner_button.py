# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetOrganizationSensorReadingsHistory200ResponseInnerButton(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, press_type: str=None):
        """GetOrganizationSensorReadingsHistory200ResponseInnerButton - a model defined in OpenAPI

        :param press_type: The press_type of this GetOrganizationSensorReadingsHistory200ResponseInnerButton.
        """
        self.openapi_types = {
            'press_type': str
        }

        self.attribute_map = {
            'press_type': 'pressType'
        }

        self._press_type = press_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetOrganizationSensorReadingsHistory200ResponseInnerButton':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getOrganizationSensorReadingsHistory_200_response_inner_button of this GetOrganizationSensorReadingsHistory200ResponseInnerButton.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def press_type(self):
        """Gets the press_type of this GetOrganizationSensorReadingsHistory200ResponseInnerButton.

        Type of button press that occurred.

        :return: The press_type of this GetOrganizationSensorReadingsHistory200ResponseInnerButton.
        :rtype: str
        """
        return self._press_type

    @press_type.setter
    def press_type(self, press_type):
        """Sets the press_type of this GetOrganizationSensorReadingsHistory200ResponseInnerButton.

        Type of button press that occurred.

        :param press_type: The press_type of this GetOrganizationSensorReadingsHistory200ResponseInnerButton.
        :type press_type: str
        """
        allowed_values = ["long", "short"]  # noqa: E501
        if press_type not in allowed_values:
            raise ValueError(
                "Invalid value for `press_type` ({0}), must be one of {1}"
                .format(press_type, allowed_values)
            )

        self._press_type = press_type
