# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateDeviceSwitchRoutingInterfaceRequestOspfV3(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, area: str=None, cost: int=None, is_passive_enabled: bool=None):
        """CreateDeviceSwitchRoutingInterfaceRequestOspfV3 - a model defined in OpenAPI

        :param area: The area of this CreateDeviceSwitchRoutingInterfaceRequestOspfV3.
        :param cost: The cost of this CreateDeviceSwitchRoutingInterfaceRequestOspfV3.
        :param is_passive_enabled: The is_passive_enabled of this CreateDeviceSwitchRoutingInterfaceRequestOspfV3.
        """
        self.openapi_types = {
            'area': str,
            'cost': int,
            'is_passive_enabled': bool
        }

        self.attribute_map = {
            'area': 'area',
            'cost': 'cost',
            'is_passive_enabled': 'isPassiveEnabled'
        }

        self._area = area
        self._cost = cost
        self._is_passive_enabled = is_passive_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateDeviceSwitchRoutingInterfaceRequestOspfV3':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The createDeviceSwitchRoutingInterface_request_ospfV3 of this CreateDeviceSwitchRoutingInterfaceRequestOspfV3.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def area(self):
        """Gets the area of this CreateDeviceSwitchRoutingInterfaceRequestOspfV3.

        The OSPFv3 area to which this interface should belong. Can be either 'disabled' or the identifier of an           existing OSPFv3 area. Defaults to 'disabled'.

        :return: The area of this CreateDeviceSwitchRoutingInterfaceRequestOspfV3.
        :rtype: str
        """
        return self._area

    @area.setter
    def area(self, area):
        """Sets the area of this CreateDeviceSwitchRoutingInterfaceRequestOspfV3.

        The OSPFv3 area to which this interface should belong. Can be either 'disabled' or the identifier of an           existing OSPFv3 area. Defaults to 'disabled'.

        :param area: The area of this CreateDeviceSwitchRoutingInterfaceRequestOspfV3.
        :type area: str
        """

        self._area = area

    @property
    def cost(self):
        """Gets the cost of this CreateDeviceSwitchRoutingInterfaceRequestOspfV3.

        The path cost for this interface. Defaults to 1, but can be increased up to 65535           to give lower priority.

        :return: The cost of this CreateDeviceSwitchRoutingInterfaceRequestOspfV3.
        :rtype: int
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this CreateDeviceSwitchRoutingInterfaceRequestOspfV3.

        The path cost for this interface. Defaults to 1, but can be increased up to 65535           to give lower priority.

        :param cost: The cost of this CreateDeviceSwitchRoutingInterfaceRequestOspfV3.
        :type cost: int
        """

        self._cost = cost

    @property
    def is_passive_enabled(self):
        """Gets the is_passive_enabled of this CreateDeviceSwitchRoutingInterfaceRequestOspfV3.

        When enabled, OSPFv3 will not run on the interface, but the subnet will still be advertised.

        :return: The is_passive_enabled of this CreateDeviceSwitchRoutingInterfaceRequestOspfV3.
        :rtype: bool
        """
        return self._is_passive_enabled

    @is_passive_enabled.setter
    def is_passive_enabled(self, is_passive_enabled):
        """Sets the is_passive_enabled of this CreateDeviceSwitchRoutingInterfaceRequestOspfV3.

        When enabled, OSPFv3 will not run on the interface, but the subnet will still be advertised.

        :param is_passive_enabled: The is_passive_enabled of this CreateDeviceSwitchRoutingInterfaceRequestOspfV3.
        :type is_passive_enabled: bool
        """

        self._is_passive_enabled = is_passive_enabled
