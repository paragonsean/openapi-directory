# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateOrganizationNetworkRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, copy_from_network_id: str=None, name: str=None, notes: str=None, product_types: List[str]=None, tags: List[str]=None, time_zone: str=None):
        """CreateOrganizationNetworkRequest - a model defined in OpenAPI

        :param copy_from_network_id: The copy_from_network_id of this CreateOrganizationNetworkRequest.
        :param name: The name of this CreateOrganizationNetworkRequest.
        :param notes: The notes of this CreateOrganizationNetworkRequest.
        :param product_types: The product_types of this CreateOrganizationNetworkRequest.
        :param tags: The tags of this CreateOrganizationNetworkRequest.
        :param time_zone: The time_zone of this CreateOrganizationNetworkRequest.
        """
        self.openapi_types = {
            'copy_from_network_id': str,
            'name': str,
            'notes': str,
            'product_types': List[str],
            'tags': List[str],
            'time_zone': str
        }

        self.attribute_map = {
            'copy_from_network_id': 'copyFromNetworkId',
            'name': 'name',
            'notes': 'notes',
            'product_types': 'productTypes',
            'tags': 'tags',
            'time_zone': 'timeZone'
        }

        self._copy_from_network_id = copy_from_network_id
        self._name = name
        self._notes = notes
        self._product_types = product_types
        self._tags = tags
        self._time_zone = time_zone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateOrganizationNetworkRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The createOrganizationNetwork_request of this CreateOrganizationNetworkRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def copy_from_network_id(self):
        """Gets the copy_from_network_id of this CreateOrganizationNetworkRequest.

        The ID of the network to copy configuration from. Other provided parameters will override the copied configuration, except type which must match this network's type exactly.

        :return: The copy_from_network_id of this CreateOrganizationNetworkRequest.
        :rtype: str
        """
        return self._copy_from_network_id

    @copy_from_network_id.setter
    def copy_from_network_id(self, copy_from_network_id):
        """Sets the copy_from_network_id of this CreateOrganizationNetworkRequest.

        The ID of the network to copy configuration from. Other provided parameters will override the copied configuration, except type which must match this network's type exactly.

        :param copy_from_network_id: The copy_from_network_id of this CreateOrganizationNetworkRequest.
        :type copy_from_network_id: str
        """

        self._copy_from_network_id = copy_from_network_id

    @property
    def name(self):
        """Gets the name of this CreateOrganizationNetworkRequest.

        The name of the new network

        :return: The name of this CreateOrganizationNetworkRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateOrganizationNetworkRequest.

        The name of the new network

        :param name: The name of this CreateOrganizationNetworkRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this CreateOrganizationNetworkRequest.

        Add any notes or additional information about this network here.

        :return: The notes of this CreateOrganizationNetworkRequest.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this CreateOrganizationNetworkRequest.

        Add any notes or additional information about this network here.

        :param notes: The notes of this CreateOrganizationNetworkRequest.
        :type notes: str
        """

        self._notes = notes

    @property
    def product_types(self):
        """Gets the product_types of this CreateOrganizationNetworkRequest.

        The product type(s) of the new network. If more than one type is included, the network will be a combined network.

        :return: The product_types of this CreateOrganizationNetworkRequest.
        :rtype: List[str]
        """
        return self._product_types

    @product_types.setter
    def product_types(self, product_types):
        """Sets the product_types of this CreateOrganizationNetworkRequest.

        The product type(s) of the new network. If more than one type is included, the network will be a combined network.

        :param product_types: The product_types of this CreateOrganizationNetworkRequest.
        :type product_types: List[str]
        """
        allowed_values = ["appliance", "camera", "cellularGateway", "sensor", "switch", "systemsManager", "wireless"]  # noqa: E501
        if not set(product_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `product_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(product_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._product_types = product_types

    @property
    def tags(self):
        """Gets the tags of this CreateOrganizationNetworkRequest.

        A list of tags to be applied to the network

        :return: The tags of this CreateOrganizationNetworkRequest.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateOrganizationNetworkRequest.

        A list of tags to be applied to the network

        :param tags: The tags of this CreateOrganizationNetworkRequest.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def time_zone(self):
        """Gets the time_zone of this CreateOrganizationNetworkRequest.

        The timezone of the network. For a list of allowed timezones, please see the 'TZ' column in the table in <a target='_blank' href='https://en.wikipedia.org/wiki/List_of_tz_database_time_zones'>this article.</a>

        :return: The time_zone of this CreateOrganizationNetworkRequest.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this CreateOrganizationNetworkRequest.

        The timezone of the network. For a list of allowed timezones, please see the 'TZ' column in the table in <a target='_blank' href='https://en.wikipedia.org/wiki/List_of_tz_database_time_zones'>this article.</a>

        :param time_zone: The time_zone of this CreateOrganizationNetworkRequest.
        :type time_zone: str
        """

        self._time_zone = time_zone
