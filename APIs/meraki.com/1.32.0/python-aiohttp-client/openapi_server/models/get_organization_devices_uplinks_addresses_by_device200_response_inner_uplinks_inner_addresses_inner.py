# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_organization_devices_uplinks_addresses_by_device200_response_inner_uplinks_inner_addresses_inner_public import GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInnerAddressesInnerPublic
from openapi_server import util


class GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInnerAddressesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, assignment_mode: str=None, gateway: str=None, protocol: str=None, public: GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInnerAddressesInnerPublic=None):
        """GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInnerAddressesInner - a model defined in OpenAPI

        :param address: The address of this GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInnerAddressesInner.
        :param assignment_mode: The assignment_mode of this GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInnerAddressesInner.
        :param gateway: The gateway of this GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInnerAddressesInner.
        :param protocol: The protocol of this GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInnerAddressesInner.
        :param public: The public of this GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInnerAddressesInner.
        """
        self.openapi_types = {
            'address': str,
            'assignment_mode': str,
            'gateway': str,
            'protocol': str,
            'public': GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInnerAddressesInnerPublic
        }

        self.attribute_map = {
            'address': 'address',
            'assignment_mode': 'assignmentMode',
            'gateway': 'gateway',
            'protocol': 'protocol',
            'public': 'public'
        }

        self._address = address
        self._assignment_mode = assignment_mode
        self._gateway = gateway
        self._protocol = protocol
        self._public = public

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInnerAddressesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getOrganizationDevicesUplinksAddressesByDevice_200_response_inner_uplinks_inner_addresses_inner of this GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInnerAddressesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInnerAddressesInner.

        Device uplink address.

        :return: The address of this GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInnerAddressesInner.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInnerAddressesInner.

        Device uplink address.

        :param address: The address of this GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInnerAddressesInner.
        :type address: str
        """

        self._address = address

    @property
    def assignment_mode(self):
        """Gets the assignment_mode of this GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInnerAddressesInner.

        Indicates how the device uplink address is assigned. Available options are: static, dynamic.

        :return: The assignment_mode of this GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInnerAddressesInner.
        :rtype: str
        """
        return self._assignment_mode

    @assignment_mode.setter
    def assignment_mode(self, assignment_mode):
        """Sets the assignment_mode of this GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInnerAddressesInner.

        Indicates how the device uplink address is assigned. Available options are: static, dynamic.

        :param assignment_mode: The assignment_mode of this GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInnerAddressesInner.
        :type assignment_mode: str
        """
        allowed_values = ["dynamic", "static"]  # noqa: E501
        if assignment_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `assignment_mode` ({0}), must be one of {1}"
                .format(assignment_mode, allowed_values)
            )

        self._assignment_mode = assignment_mode

    @property
    def gateway(self):
        """Gets the gateway of this GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInnerAddressesInner.

        Device uplink gateway address.

        :return: The gateway of this GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInnerAddressesInner.
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInnerAddressesInner.

        Device uplink gateway address.

        :param gateway: The gateway of this GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInnerAddressesInner.
        :type gateway: str
        """

        self._gateway = gateway

    @property
    def protocol(self):
        """Gets the protocol of this GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInnerAddressesInner.

        Type of address for the device uplink. Available options are: ipv4, ipv6.

        :return: The protocol of this GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInnerAddressesInner.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInnerAddressesInner.

        Type of address for the device uplink. Available options are: ipv4, ipv6.

        :param protocol: The protocol of this GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInnerAddressesInner.
        :type protocol: str
        """
        allowed_values = ["ipv4", "ipv6"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def public(self):
        """Gets the public of this GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInnerAddressesInner.


        :return: The public of this GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInnerAddressesInner.
        :rtype: GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInnerAddressesInnerPublic
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInnerAddressesInner.


        :param public: The public of this GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInnerAddressesInner.
        :type public: GetOrganizationDevicesUplinksAddressesByDevice200ResponseInnerUplinksInnerAddressesInnerPublic
        """

        self._public = public
