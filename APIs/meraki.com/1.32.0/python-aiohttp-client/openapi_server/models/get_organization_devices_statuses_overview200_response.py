# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_organization_devices_statuses_overview200_response_counts import GetOrganizationDevicesStatusesOverview200ResponseCounts
from openapi_server import util


class GetOrganizationDevicesStatusesOverview200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, counts: GetOrganizationDevicesStatusesOverview200ResponseCounts=None):
        """GetOrganizationDevicesStatusesOverview200Response - a model defined in OpenAPI

        :param counts: The counts of this GetOrganizationDevicesStatusesOverview200Response.
        """
        self.openapi_types = {
            'counts': GetOrganizationDevicesStatusesOverview200ResponseCounts
        }

        self.attribute_map = {
            'counts': 'counts'
        }

        self._counts = counts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetOrganizationDevicesStatusesOverview200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getOrganizationDevicesStatusesOverview_200_response of this GetOrganizationDevicesStatusesOverview200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def counts(self):
        """Gets the counts of this GetOrganizationDevicesStatusesOverview200Response.


        :return: The counts of this GetOrganizationDevicesStatusesOverview200Response.
        :rtype: GetOrganizationDevicesStatusesOverview200ResponseCounts
        """
        return self._counts

    @counts.setter
    def counts(self, counts):
        """Sets the counts of this GetOrganizationDevicesStatusesOverview200Response.


        :param counts: The counts of this GetOrganizationDevicesStatusesOverview200Response.
        :type counts: GetOrganizationDevicesStatusesOverview200ResponseCounts
        """

        self._counts = counts
