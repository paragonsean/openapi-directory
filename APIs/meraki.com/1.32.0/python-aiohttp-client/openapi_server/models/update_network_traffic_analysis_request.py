# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_network_traffic_analysis_request_custom_pie_chart_items_inner import UpdateNetworkTrafficAnalysisRequestCustomPieChartItemsInner
from openapi_server import util


class UpdateNetworkTrafficAnalysisRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_pie_chart_items: List[UpdateNetworkTrafficAnalysisRequestCustomPieChartItemsInner]=None, mode: str=None):
        """UpdateNetworkTrafficAnalysisRequest - a model defined in OpenAPI

        :param custom_pie_chart_items: The custom_pie_chart_items of this UpdateNetworkTrafficAnalysisRequest.
        :param mode: The mode of this UpdateNetworkTrafficAnalysisRequest.
        """
        self.openapi_types = {
            'custom_pie_chart_items': List[UpdateNetworkTrafficAnalysisRequestCustomPieChartItemsInner],
            'mode': str
        }

        self.attribute_map = {
            'custom_pie_chart_items': 'customPieChartItems',
            'mode': 'mode'
        }

        self._custom_pie_chart_items = custom_pie_chart_items
        self._mode = mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateNetworkTrafficAnalysisRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateNetworkTrafficAnalysis_request of this UpdateNetworkTrafficAnalysisRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_pie_chart_items(self):
        """Gets the custom_pie_chart_items of this UpdateNetworkTrafficAnalysisRequest.

        The list of items that make up the custom pie chart for traffic reporting.

        :return: The custom_pie_chart_items of this UpdateNetworkTrafficAnalysisRequest.
        :rtype: List[UpdateNetworkTrafficAnalysisRequestCustomPieChartItemsInner]
        """
        return self._custom_pie_chart_items

    @custom_pie_chart_items.setter
    def custom_pie_chart_items(self, custom_pie_chart_items):
        """Sets the custom_pie_chart_items of this UpdateNetworkTrafficAnalysisRequest.

        The list of items that make up the custom pie chart for traffic reporting.

        :param custom_pie_chart_items: The custom_pie_chart_items of this UpdateNetworkTrafficAnalysisRequest.
        :type custom_pie_chart_items: List[UpdateNetworkTrafficAnalysisRequestCustomPieChartItemsInner]
        """

        self._custom_pie_chart_items = custom_pie_chart_items

    @property
    def mode(self):
        """Gets the mode of this UpdateNetworkTrafficAnalysisRequest.

            The traffic analysis mode for the network. Can be one of 'disabled' (do not collect traffic types),     'basic' (collect generic traffic categories), or 'detailed' (collect destination hostnames). 

        :return: The mode of this UpdateNetworkTrafficAnalysisRequest.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this UpdateNetworkTrafficAnalysisRequest.

            The traffic analysis mode for the network. Can be one of 'disabled' (do not collect traffic types),     'basic' (collect generic traffic categories), or 'detailed' (collect destination hostnames). 

        :param mode: The mode of this UpdateNetworkTrafficAnalysisRequest.
        :type mode: str
        """
        allowed_values = ["basic", "detailed", "disabled"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode
