# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateNetworkSwitchAccessControlListsRequestRulesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comment: str=None, dst_cidr: str=None, dst_port: str=None, ip_version: str=None, policy: str=None, protocol: str=None, src_cidr: str=None, src_port: str=None, vlan: str=None):
        """UpdateNetworkSwitchAccessControlListsRequestRulesInner - a model defined in OpenAPI

        :param comment: The comment of this UpdateNetworkSwitchAccessControlListsRequestRulesInner.
        :param dst_cidr: The dst_cidr of this UpdateNetworkSwitchAccessControlListsRequestRulesInner.
        :param dst_port: The dst_port of this UpdateNetworkSwitchAccessControlListsRequestRulesInner.
        :param ip_version: The ip_version of this UpdateNetworkSwitchAccessControlListsRequestRulesInner.
        :param policy: The policy of this UpdateNetworkSwitchAccessControlListsRequestRulesInner.
        :param protocol: The protocol of this UpdateNetworkSwitchAccessControlListsRequestRulesInner.
        :param src_cidr: The src_cidr of this UpdateNetworkSwitchAccessControlListsRequestRulesInner.
        :param src_port: The src_port of this UpdateNetworkSwitchAccessControlListsRequestRulesInner.
        :param vlan: The vlan of this UpdateNetworkSwitchAccessControlListsRequestRulesInner.
        """
        self.openapi_types = {
            'comment': str,
            'dst_cidr': str,
            'dst_port': str,
            'ip_version': str,
            'policy': str,
            'protocol': str,
            'src_cidr': str,
            'src_port': str,
            'vlan': str
        }

        self.attribute_map = {
            'comment': 'comment',
            'dst_cidr': 'dstCidr',
            'dst_port': 'dstPort',
            'ip_version': 'ipVersion',
            'policy': 'policy',
            'protocol': 'protocol',
            'src_cidr': 'srcCidr',
            'src_port': 'srcPort',
            'vlan': 'vlan'
        }

        self._comment = comment
        self._dst_cidr = dst_cidr
        self._dst_port = dst_port
        self._ip_version = ip_version
        self._policy = policy
        self._protocol = protocol
        self._src_cidr = src_cidr
        self._src_port = src_port
        self._vlan = vlan

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateNetworkSwitchAccessControlListsRequestRulesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateNetworkSwitchAccessControlLists_request_rules_inner of this UpdateNetworkSwitchAccessControlListsRequestRulesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comment(self):
        """Gets the comment of this UpdateNetworkSwitchAccessControlListsRequestRulesInner.

        Description of the rule (optional).

        :return: The comment of this UpdateNetworkSwitchAccessControlListsRequestRulesInner.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this UpdateNetworkSwitchAccessControlListsRequestRulesInner.

        Description of the rule (optional).

        :param comment: The comment of this UpdateNetworkSwitchAccessControlListsRequestRulesInner.
        :type comment: str
        """

        self._comment = comment

    @property
    def dst_cidr(self):
        """Gets the dst_cidr of this UpdateNetworkSwitchAccessControlListsRequestRulesInner.

        Destination IP address (in IP or CIDR notation) or 'any'.

        :return: The dst_cidr of this UpdateNetworkSwitchAccessControlListsRequestRulesInner.
        :rtype: str
        """
        return self._dst_cidr

    @dst_cidr.setter
    def dst_cidr(self, dst_cidr):
        """Sets the dst_cidr of this UpdateNetworkSwitchAccessControlListsRequestRulesInner.

        Destination IP address (in IP or CIDR notation) or 'any'.

        :param dst_cidr: The dst_cidr of this UpdateNetworkSwitchAccessControlListsRequestRulesInner.
        :type dst_cidr: str
        """
        if dst_cidr is None:
            raise ValueError("Invalid value for `dst_cidr`, must not be `None`")

        self._dst_cidr = dst_cidr

    @property
    def dst_port(self):
        """Gets the dst_port of this UpdateNetworkSwitchAccessControlListsRequestRulesInner.

        Destination port. Must be in the range of 1-65535 or 'any'. Default is 'any'.

        :return: The dst_port of this UpdateNetworkSwitchAccessControlListsRequestRulesInner.
        :rtype: str
        """
        return self._dst_port

    @dst_port.setter
    def dst_port(self, dst_port):
        """Sets the dst_port of this UpdateNetworkSwitchAccessControlListsRequestRulesInner.

        Destination port. Must be in the range of 1-65535 or 'any'. Default is 'any'.

        :param dst_port: The dst_port of this UpdateNetworkSwitchAccessControlListsRequestRulesInner.
        :type dst_port: str
        """

        self._dst_port = dst_port

    @property
    def ip_version(self):
        """Gets the ip_version of this UpdateNetworkSwitchAccessControlListsRequestRulesInner.

        IP address version (must be 'any', 'ipv4' or 'ipv6'). Applicable only if network supports IPv6. Default value is 'ipv4'.

        :return: The ip_version of this UpdateNetworkSwitchAccessControlListsRequestRulesInner.
        :rtype: str
        """
        return self._ip_version

    @ip_version.setter
    def ip_version(self, ip_version):
        """Sets the ip_version of this UpdateNetworkSwitchAccessControlListsRequestRulesInner.

        IP address version (must be 'any', 'ipv4' or 'ipv6'). Applicable only if network supports IPv6. Default value is 'ipv4'.

        :param ip_version: The ip_version of this UpdateNetworkSwitchAccessControlListsRequestRulesInner.
        :type ip_version: str
        """
        allowed_values = ["any", "ipv4", "ipv6"]  # noqa: E501
        if ip_version not in allowed_values:
            raise ValueError(
                "Invalid value for `ip_version` ({0}), must be one of {1}"
                .format(ip_version, allowed_values)
            )

        self._ip_version = ip_version

    @property
    def policy(self):
        """Gets the policy of this UpdateNetworkSwitchAccessControlListsRequestRulesInner.

        'allow' or 'deny' traffic specified by this rule.

        :return: The policy of this UpdateNetworkSwitchAccessControlListsRequestRulesInner.
        :rtype: str
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this UpdateNetworkSwitchAccessControlListsRequestRulesInner.

        'allow' or 'deny' traffic specified by this rule.

        :param policy: The policy of this UpdateNetworkSwitchAccessControlListsRequestRulesInner.
        :type policy: str
        """
        allowed_values = ["allow", "deny"]  # noqa: E501
        if policy not in allowed_values:
            raise ValueError(
                "Invalid value for `policy` ({0}), must be one of {1}"
                .format(policy, allowed_values)
            )

        self._policy = policy

    @property
    def protocol(self):
        """Gets the protocol of this UpdateNetworkSwitchAccessControlListsRequestRulesInner.

        The type of protocol (must be 'tcp', 'udp', or 'any').

        :return: The protocol of this UpdateNetworkSwitchAccessControlListsRequestRulesInner.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this UpdateNetworkSwitchAccessControlListsRequestRulesInner.

        The type of protocol (must be 'tcp', 'udp', or 'any').

        :param protocol: The protocol of this UpdateNetworkSwitchAccessControlListsRequestRulesInner.
        :type protocol: str
        """
        allowed_values = ["any", "tcp", "udp"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def src_cidr(self):
        """Gets the src_cidr of this UpdateNetworkSwitchAccessControlListsRequestRulesInner.

        Source IP address (in IP or CIDR notation) or 'any'.

        :return: The src_cidr of this UpdateNetworkSwitchAccessControlListsRequestRulesInner.
        :rtype: str
        """
        return self._src_cidr

    @src_cidr.setter
    def src_cidr(self, src_cidr):
        """Sets the src_cidr of this UpdateNetworkSwitchAccessControlListsRequestRulesInner.

        Source IP address (in IP or CIDR notation) or 'any'.

        :param src_cidr: The src_cidr of this UpdateNetworkSwitchAccessControlListsRequestRulesInner.
        :type src_cidr: str
        """
        if src_cidr is None:
            raise ValueError("Invalid value for `src_cidr`, must not be `None`")

        self._src_cidr = src_cidr

    @property
    def src_port(self):
        """Gets the src_port of this UpdateNetworkSwitchAccessControlListsRequestRulesInner.

        Source port. Must be in the range  of 1-65535 or 'any'. Default is 'any'.

        :return: The src_port of this UpdateNetworkSwitchAccessControlListsRequestRulesInner.
        :rtype: str
        """
        return self._src_port

    @src_port.setter
    def src_port(self, src_port):
        """Sets the src_port of this UpdateNetworkSwitchAccessControlListsRequestRulesInner.

        Source port. Must be in the range  of 1-65535 or 'any'. Default is 'any'.

        :param src_port: The src_port of this UpdateNetworkSwitchAccessControlListsRequestRulesInner.
        :type src_port: str
        """

        self._src_port = src_port

    @property
    def vlan(self):
        """Gets the vlan of this UpdateNetworkSwitchAccessControlListsRequestRulesInner.

        Incoming traffic VLAN. Must be in the range of 1-4095 or 'any'. Default is 'any'.

        :return: The vlan of this UpdateNetworkSwitchAccessControlListsRequestRulesInner.
        :rtype: str
        """
        return self._vlan

    @vlan.setter
    def vlan(self, vlan):
        """Sets the vlan of this UpdateNetworkSwitchAccessControlListsRequestRulesInner.

        Incoming traffic VLAN. Must be in the range of 1-4095 or 'any'. Default is 'any'.

        :param vlan: The vlan of this UpdateNetworkSwitchAccessControlListsRequestRulesInner.
        :type vlan: str
        """

        self._vlan = vlan
