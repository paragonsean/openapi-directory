# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateDeviceCameraQualityAndRetentionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audio_recording_enabled: bool=None, motion_based_retention_enabled: bool=None, motion_detector_version: int=None, profile_id: str=None, quality: str=None, resolution: str=None, restricted_bandwidth_mode_enabled: bool=None):
        """UpdateDeviceCameraQualityAndRetentionRequest - a model defined in OpenAPI

        :param audio_recording_enabled: The audio_recording_enabled of this UpdateDeviceCameraQualityAndRetentionRequest.
        :param motion_based_retention_enabled: The motion_based_retention_enabled of this UpdateDeviceCameraQualityAndRetentionRequest.
        :param motion_detector_version: The motion_detector_version of this UpdateDeviceCameraQualityAndRetentionRequest.
        :param profile_id: The profile_id of this UpdateDeviceCameraQualityAndRetentionRequest.
        :param quality: The quality of this UpdateDeviceCameraQualityAndRetentionRequest.
        :param resolution: The resolution of this UpdateDeviceCameraQualityAndRetentionRequest.
        :param restricted_bandwidth_mode_enabled: The restricted_bandwidth_mode_enabled of this UpdateDeviceCameraQualityAndRetentionRequest.
        """
        self.openapi_types = {
            'audio_recording_enabled': bool,
            'motion_based_retention_enabled': bool,
            'motion_detector_version': int,
            'profile_id': str,
            'quality': str,
            'resolution': str,
            'restricted_bandwidth_mode_enabled': bool
        }

        self.attribute_map = {
            'audio_recording_enabled': 'audioRecordingEnabled',
            'motion_based_retention_enabled': 'motionBasedRetentionEnabled',
            'motion_detector_version': 'motionDetectorVersion',
            'profile_id': 'profileId',
            'quality': 'quality',
            'resolution': 'resolution',
            'restricted_bandwidth_mode_enabled': 'restrictedBandwidthModeEnabled'
        }

        self._audio_recording_enabled = audio_recording_enabled
        self._motion_based_retention_enabled = motion_based_retention_enabled
        self._motion_detector_version = motion_detector_version
        self._profile_id = profile_id
        self._quality = quality
        self._resolution = resolution
        self._restricted_bandwidth_mode_enabled = restricted_bandwidth_mode_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateDeviceCameraQualityAndRetentionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateDeviceCameraQualityAndRetention_request of this UpdateDeviceCameraQualityAndRetentionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audio_recording_enabled(self):
        """Gets the audio_recording_enabled of this UpdateDeviceCameraQualityAndRetentionRequest.

        Boolean indicating if audio recording is enabled(true) or disabled(false) on the camera

        :return: The audio_recording_enabled of this UpdateDeviceCameraQualityAndRetentionRequest.
        :rtype: bool
        """
        return self._audio_recording_enabled

    @audio_recording_enabled.setter
    def audio_recording_enabled(self, audio_recording_enabled):
        """Sets the audio_recording_enabled of this UpdateDeviceCameraQualityAndRetentionRequest.

        Boolean indicating if audio recording is enabled(true) or disabled(false) on the camera

        :param audio_recording_enabled: The audio_recording_enabled of this UpdateDeviceCameraQualityAndRetentionRequest.
        :type audio_recording_enabled: bool
        """

        self._audio_recording_enabled = audio_recording_enabled

    @property
    def motion_based_retention_enabled(self):
        """Gets the motion_based_retention_enabled of this UpdateDeviceCameraQualityAndRetentionRequest.

        Boolean indicating if motion-based retention is enabled(true) or disabled(false) on the camera.

        :return: The motion_based_retention_enabled of this UpdateDeviceCameraQualityAndRetentionRequest.
        :rtype: bool
        """
        return self._motion_based_retention_enabled

    @motion_based_retention_enabled.setter
    def motion_based_retention_enabled(self, motion_based_retention_enabled):
        """Sets the motion_based_retention_enabled of this UpdateDeviceCameraQualityAndRetentionRequest.

        Boolean indicating if motion-based retention is enabled(true) or disabled(false) on the camera.

        :param motion_based_retention_enabled: The motion_based_retention_enabled of this UpdateDeviceCameraQualityAndRetentionRequest.
        :type motion_based_retention_enabled: bool
        """

        self._motion_based_retention_enabled = motion_based_retention_enabled

    @property
    def motion_detector_version(self):
        """Gets the motion_detector_version of this UpdateDeviceCameraQualityAndRetentionRequest.

        The version of the motion detector that will be used by the camera. Only applies to Gen 2 cameras. Defaults to v2.

        :return: The motion_detector_version of this UpdateDeviceCameraQualityAndRetentionRequest.
        :rtype: int
        """
        return self._motion_detector_version

    @motion_detector_version.setter
    def motion_detector_version(self, motion_detector_version):
        """Sets the motion_detector_version of this UpdateDeviceCameraQualityAndRetentionRequest.

        The version of the motion detector that will be used by the camera. Only applies to Gen 2 cameras. Defaults to v2.

        :param motion_detector_version: The motion_detector_version of this UpdateDeviceCameraQualityAndRetentionRequest.
        :type motion_detector_version: int
        """
        allowed_values = [1, 2]  # noqa: E501
        if motion_detector_version not in allowed_values:
            raise ValueError(
                "Invalid value for `motion_detector_version` ({0}), must be one of {1}"
                .format(motion_detector_version, allowed_values)
            )

        self._motion_detector_version = motion_detector_version

    @property
    def profile_id(self):
        """Gets the profile_id of this UpdateDeviceCameraQualityAndRetentionRequest.

        The ID of a quality and retention profile to assign to the camera. The profile's settings will override all of the per-camera quality and retention settings. If the value of this parameter is null, any existing profile will be unassigned from the camera.

        :return: The profile_id of this UpdateDeviceCameraQualityAndRetentionRequest.
        :rtype: str
        """
        return self._profile_id

    @profile_id.setter
    def profile_id(self, profile_id):
        """Sets the profile_id of this UpdateDeviceCameraQualityAndRetentionRequest.

        The ID of a quality and retention profile to assign to the camera. The profile's settings will override all of the per-camera quality and retention settings. If the value of this parameter is null, any existing profile will be unassigned from the camera.

        :param profile_id: The profile_id of this UpdateDeviceCameraQualityAndRetentionRequest.
        :type profile_id: str
        """

        self._profile_id = profile_id

    @property
    def quality(self):
        """Gets the quality of this UpdateDeviceCameraQualityAndRetentionRequest.

        Quality of the camera. Can be one of 'Standard', 'High' or 'Enhanced'. Not all qualities are supported by every camera model.

        :return: The quality of this UpdateDeviceCameraQualityAndRetentionRequest.
        :rtype: str
        """
        return self._quality

    @quality.setter
    def quality(self, quality):
        """Sets the quality of this UpdateDeviceCameraQualityAndRetentionRequest.

        Quality of the camera. Can be one of 'Standard', 'High' or 'Enhanced'. Not all qualities are supported by every camera model.

        :param quality: The quality of this UpdateDeviceCameraQualityAndRetentionRequest.
        :type quality: str
        """
        allowed_values = ["Enhanced", "High", "Standard"]  # noqa: E501
        if quality not in allowed_values:
            raise ValueError(
                "Invalid value for `quality` ({0}), must be one of {1}"
                .format(quality, allowed_values)
            )

        self._quality = quality

    @property
    def resolution(self):
        """Gets the resolution of this UpdateDeviceCameraQualityAndRetentionRequest.

        Resolution of the camera. Can be one of '1280x720', '1920x1080', '1080x1080', '2058x2058', '2112x2112', '2880x2880', '2688x1512' or '3840x2160'.Not all resolutions are supported by every camera model.

        :return: The resolution of this UpdateDeviceCameraQualityAndRetentionRequest.
        :rtype: str
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this UpdateDeviceCameraQualityAndRetentionRequest.

        Resolution of the camera. Can be one of '1280x720', '1920x1080', '1080x1080', '2058x2058', '2112x2112', '2880x2880', '2688x1512' or '3840x2160'.Not all resolutions are supported by every camera model.

        :param resolution: The resolution of this UpdateDeviceCameraQualityAndRetentionRequest.
        :type resolution: str
        """
        allowed_values = ["1080x1080", "1280x720", "1920x1080", "2058x2058", "2112x2112", "2688x1512", "2880x2880", "3840x2160"]  # noqa: E501
        if resolution not in allowed_values:
            raise ValueError(
                "Invalid value for `resolution` ({0}), must be one of {1}"
                .format(resolution, allowed_values)
            )

        self._resolution = resolution

    @property
    def restricted_bandwidth_mode_enabled(self):
        """Gets the restricted_bandwidth_mode_enabled of this UpdateDeviceCameraQualityAndRetentionRequest.

        Boolean indicating if restricted bandwidth is enabled(true) or disabled(false) on the camera. This setting does not apply to MV2 cameras.

        :return: The restricted_bandwidth_mode_enabled of this UpdateDeviceCameraQualityAndRetentionRequest.
        :rtype: bool
        """
        return self._restricted_bandwidth_mode_enabled

    @restricted_bandwidth_mode_enabled.setter
    def restricted_bandwidth_mode_enabled(self, restricted_bandwidth_mode_enabled):
        """Sets the restricted_bandwidth_mode_enabled of this UpdateDeviceCameraQualityAndRetentionRequest.

        Boolean indicating if restricted bandwidth is enabled(true) or disabled(false) on the camera. This setting does not apply to MV2 cameras.

        :param restricted_bandwidth_mode_enabled: The restricted_bandwidth_mode_enabled of this UpdateDeviceCameraQualityAndRetentionRequest.
        :type restricted_bandwidth_mode_enabled: bool
        """

        self._restricted_bandwidth_mode_enabled = restricted_bandwidth_mode_enabled
