# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_network_appliance_traffic_shaping_uplink_selection_request_vpn_traffic_uplink_preferences_inner_performance_class import UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestVpnTrafficUplinkPreferencesInnerPerformanceClass
from openapi_server.models.update_network_appliance_traffic_shaping_uplink_selection_request_vpn_traffic_uplink_preferences_inner_traffic_filters_inner import UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestVpnTrafficUplinkPreferencesInnerTrafficFiltersInner
from openapi_server import util


class UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestVpnTrafficUplinkPreferencesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fail_over_criterion: str=None, performance_class: UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestVpnTrafficUplinkPreferencesInnerPerformanceClass=None, preferred_uplink: str=None, traffic_filters: List[UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestVpnTrafficUplinkPreferencesInnerTrafficFiltersInner]=None):
        """UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestVpnTrafficUplinkPreferencesInner - a model defined in OpenAPI

        :param fail_over_criterion: The fail_over_criterion of this UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestVpnTrafficUplinkPreferencesInner.
        :param performance_class: The performance_class of this UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestVpnTrafficUplinkPreferencesInner.
        :param preferred_uplink: The preferred_uplink of this UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestVpnTrafficUplinkPreferencesInner.
        :param traffic_filters: The traffic_filters of this UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestVpnTrafficUplinkPreferencesInner.
        """
        self.openapi_types = {
            'fail_over_criterion': str,
            'performance_class': UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestVpnTrafficUplinkPreferencesInnerPerformanceClass,
            'preferred_uplink': str,
            'traffic_filters': List[UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestVpnTrafficUplinkPreferencesInnerTrafficFiltersInner]
        }

        self.attribute_map = {
            'fail_over_criterion': 'failOverCriterion',
            'performance_class': 'performanceClass',
            'preferred_uplink': 'preferredUplink',
            'traffic_filters': 'trafficFilters'
        }

        self._fail_over_criterion = fail_over_criterion
        self._performance_class = performance_class
        self._preferred_uplink = preferred_uplink
        self._traffic_filters = traffic_filters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestVpnTrafficUplinkPreferencesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateNetworkApplianceTrafficShapingUplinkSelection_request_vpnTrafficUplinkPreferences_inner of this UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestVpnTrafficUplinkPreferencesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fail_over_criterion(self):
        """Gets the fail_over_criterion of this UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestVpnTrafficUplinkPreferencesInner.

        Fail over criterion for this uplink preference rule. Must be one of: 'poorPerformance' or 'uplinkDown'

        :return: The fail_over_criterion of this UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestVpnTrafficUplinkPreferencesInner.
        :rtype: str
        """
        return self._fail_over_criterion

    @fail_over_criterion.setter
    def fail_over_criterion(self, fail_over_criterion):
        """Sets the fail_over_criterion of this UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestVpnTrafficUplinkPreferencesInner.

        Fail over criterion for this uplink preference rule. Must be one of: 'poorPerformance' or 'uplinkDown'

        :param fail_over_criterion: The fail_over_criterion of this UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestVpnTrafficUplinkPreferencesInner.
        :type fail_over_criterion: str
        """
        allowed_values = ["poorPerformance", "uplinkDown"]  # noqa: E501
        if fail_over_criterion not in allowed_values:
            raise ValueError(
                "Invalid value for `fail_over_criterion` ({0}), must be one of {1}"
                .format(fail_over_criterion, allowed_values)
            )

        self._fail_over_criterion = fail_over_criterion

    @property
    def performance_class(self):
        """Gets the performance_class of this UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestVpnTrafficUplinkPreferencesInner.


        :return: The performance_class of this UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestVpnTrafficUplinkPreferencesInner.
        :rtype: UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestVpnTrafficUplinkPreferencesInnerPerformanceClass
        """
        return self._performance_class

    @performance_class.setter
    def performance_class(self, performance_class):
        """Sets the performance_class of this UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestVpnTrafficUplinkPreferencesInner.


        :param performance_class: The performance_class of this UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestVpnTrafficUplinkPreferencesInner.
        :type performance_class: UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestVpnTrafficUplinkPreferencesInnerPerformanceClass
        """

        self._performance_class = performance_class

    @property
    def preferred_uplink(self):
        """Gets the preferred_uplink of this UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestVpnTrafficUplinkPreferencesInner.

        Preferred uplink for this uplink preference rule. Must be one of: 'wan1', 'wan2', 'bestForVoIP', 'loadBalancing' or 'defaultUplink'

        :return: The preferred_uplink of this UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestVpnTrafficUplinkPreferencesInner.
        :rtype: str
        """
        return self._preferred_uplink

    @preferred_uplink.setter
    def preferred_uplink(self, preferred_uplink):
        """Sets the preferred_uplink of this UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestVpnTrafficUplinkPreferencesInner.

        Preferred uplink for this uplink preference rule. Must be one of: 'wan1', 'wan2', 'bestForVoIP', 'loadBalancing' or 'defaultUplink'

        :param preferred_uplink: The preferred_uplink of this UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestVpnTrafficUplinkPreferencesInner.
        :type preferred_uplink: str
        """
        allowed_values = ["bestForVoIP", "defaultUplink", "loadBalancing", "wan1", "wan2"]  # noqa: E501
        if preferred_uplink not in allowed_values:
            raise ValueError(
                "Invalid value for `preferred_uplink` ({0}), must be one of {1}"
                .format(preferred_uplink, allowed_values)
            )

        self._preferred_uplink = preferred_uplink

    @property
    def traffic_filters(self):
        """Gets the traffic_filters of this UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestVpnTrafficUplinkPreferencesInner.

        Array of traffic filters for this uplink preference rule

        :return: The traffic_filters of this UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestVpnTrafficUplinkPreferencesInner.
        :rtype: List[UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestVpnTrafficUplinkPreferencesInnerTrafficFiltersInner]
        """
        return self._traffic_filters

    @traffic_filters.setter
    def traffic_filters(self, traffic_filters):
        """Sets the traffic_filters of this UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestVpnTrafficUplinkPreferencesInner.

        Array of traffic filters for this uplink preference rule

        :param traffic_filters: The traffic_filters of this UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestVpnTrafficUplinkPreferencesInner.
        :type traffic_filters: List[UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestVpnTrafficUplinkPreferencesInnerTrafficFiltersInner]
        """
        if traffic_filters is None:
            raise ValueError("Invalid value for `traffic_filters`, must not be `None`")

        self._traffic_filters = traffic_filters
