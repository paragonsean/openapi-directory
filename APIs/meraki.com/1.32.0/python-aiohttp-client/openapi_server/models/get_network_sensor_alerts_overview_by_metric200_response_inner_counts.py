# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_network_sensor_alerts_overview_by_metric200_response_inner_counts_noise import GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCountsNoise
from openapi_server import util


class GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, door: int=None, humidity: int=None, indoor_air_quality: int=None, noise: GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCountsNoise=None, pm25: int=None, temperature: int=None, tvoc: int=None, water: int=None):
        """GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts - a model defined in OpenAPI

        :param door: The door of this GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts.
        :param humidity: The humidity of this GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts.
        :param indoor_air_quality: The indoor_air_quality of this GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts.
        :param noise: The noise of this GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts.
        :param pm25: The pm25 of this GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts.
        :param temperature: The temperature of this GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts.
        :param tvoc: The tvoc of this GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts.
        :param water: The water of this GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts.
        """
        self.openapi_types = {
            'door': int,
            'humidity': int,
            'indoor_air_quality': int,
            'noise': GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCountsNoise,
            'pm25': int,
            'temperature': int,
            'tvoc': int,
            'water': int
        }

        self.attribute_map = {
            'door': 'door',
            'humidity': 'humidity',
            'indoor_air_quality': 'indoorAirQuality',
            'noise': 'noise',
            'pm25': 'pm25',
            'temperature': 'temperature',
            'tvoc': 'tvoc',
            'water': 'water'
        }

        self._door = door
        self._humidity = humidity
        self._indoor_air_quality = indoor_air_quality
        self._noise = noise
        self._pm25 = pm25
        self._temperature = temperature
        self._tvoc = tvoc
        self._water = water

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getNetworkSensorAlertsOverviewByMetric_200_response_inner_counts of this GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def door(self):
        """Gets the door of this GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts.

        Number of sensor alerts that occurred due to an open door

        :return: The door of this GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts.
        :rtype: int
        """
        return self._door

    @door.setter
    def door(self, door):
        """Sets the door of this GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts.

        Number of sensor alerts that occurred due to an open door

        :param door: The door of this GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts.
        :type door: int
        """

        self._door = door

    @property
    def humidity(self):
        """Gets the humidity of this GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts.

        Number of sensor alerts that occurred due to humidity readings

        :return: The humidity of this GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts.
        :rtype: int
        """
        return self._humidity

    @humidity.setter
    def humidity(self, humidity):
        """Sets the humidity of this GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts.

        Number of sensor alerts that occurred due to humidity readings

        :param humidity: The humidity of this GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts.
        :type humidity: int
        """

        self._humidity = humidity

    @property
    def indoor_air_quality(self):
        """Gets the indoor_air_quality of this GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts.

        Number of sensor alerts that occurred due to indoor air quality readings

        :return: The indoor_air_quality of this GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts.
        :rtype: int
        """
        return self._indoor_air_quality

    @indoor_air_quality.setter
    def indoor_air_quality(self, indoor_air_quality):
        """Sets the indoor_air_quality of this GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts.

        Number of sensor alerts that occurred due to indoor air quality readings

        :param indoor_air_quality: The indoor_air_quality of this GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts.
        :type indoor_air_quality: int
        """

        self._indoor_air_quality = indoor_air_quality

    @property
    def noise(self):
        """Gets the noise of this GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts.


        :return: The noise of this GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts.
        :rtype: GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCountsNoise
        """
        return self._noise

    @noise.setter
    def noise(self, noise):
        """Sets the noise of this GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts.


        :param noise: The noise of this GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts.
        :type noise: GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCountsNoise
        """

        self._noise = noise

    @property
    def pm25(self):
        """Gets the pm25 of this GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts.

        Number of sensor alerts that occurred due to PM2.5 readings

        :return: The pm25 of this GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts.
        :rtype: int
        """
        return self._pm25

    @pm25.setter
    def pm25(self, pm25):
        """Sets the pm25 of this GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts.

        Number of sensor alerts that occurred due to PM2.5 readings

        :param pm25: The pm25 of this GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts.
        :type pm25: int
        """

        self._pm25 = pm25

    @property
    def temperature(self):
        """Gets the temperature of this GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts.

        Number of sensor alerts that occurred due to temperature readings

        :return: The temperature of this GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts.
        :rtype: int
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature):
        """Sets the temperature of this GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts.

        Number of sensor alerts that occurred due to temperature readings

        :param temperature: The temperature of this GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts.
        :type temperature: int
        """

        self._temperature = temperature

    @property
    def tvoc(self):
        """Gets the tvoc of this GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts.

        Number of sensor alerts that occurred due to TVOC readings

        :return: The tvoc of this GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts.
        :rtype: int
        """
        return self._tvoc

    @tvoc.setter
    def tvoc(self, tvoc):
        """Sets the tvoc of this GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts.

        Number of sensor alerts that occurred due to TVOC readings

        :param tvoc: The tvoc of this GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts.
        :type tvoc: int
        """

        self._tvoc = tvoc

    @property
    def water(self):
        """Gets the water of this GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts.

        Number of sensor alerts that occurred due to the presence of water

        :return: The water of this GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts.
        :rtype: int
        """
        return self._water

    @water.setter
    def water(self, water):
        """Sets the water of this GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts.

        Number of sensor alerts that occurred due to the presence of water

        :param water: The water of this GetNetworkSensorAlertsOverviewByMetric200ResponseInnerCounts.
        :type water: int
        """

        self._water = water
