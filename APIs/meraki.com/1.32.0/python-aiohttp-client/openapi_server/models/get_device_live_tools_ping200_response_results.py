# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_device_live_tools_ping200_response_results_latencies import GetDeviceLiveToolsPing200ResponseResultsLatencies
from openapi_server.models.get_device_live_tools_ping200_response_results_loss import GetDeviceLiveToolsPing200ResponseResultsLoss
from openapi_server.models.get_device_live_tools_ping200_response_results_replies_inner import GetDeviceLiveToolsPing200ResponseResultsRepliesInner
from openapi_server import util


class GetDeviceLiveToolsPing200ResponseResults(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, latencies: GetDeviceLiveToolsPing200ResponseResultsLatencies=None, loss: GetDeviceLiveToolsPing200ResponseResultsLoss=None, received: int=None, replies: List[GetDeviceLiveToolsPing200ResponseResultsRepliesInner]=None, sent: int=None):
        """GetDeviceLiveToolsPing200ResponseResults - a model defined in OpenAPI

        :param latencies: The latencies of this GetDeviceLiveToolsPing200ResponseResults.
        :param loss: The loss of this GetDeviceLiveToolsPing200ResponseResults.
        :param received: The received of this GetDeviceLiveToolsPing200ResponseResults.
        :param replies: The replies of this GetDeviceLiveToolsPing200ResponseResults.
        :param sent: The sent of this GetDeviceLiveToolsPing200ResponseResults.
        """
        self.openapi_types = {
            'latencies': GetDeviceLiveToolsPing200ResponseResultsLatencies,
            'loss': GetDeviceLiveToolsPing200ResponseResultsLoss,
            'received': int,
            'replies': List[GetDeviceLiveToolsPing200ResponseResultsRepliesInner],
            'sent': int
        }

        self.attribute_map = {
            'latencies': 'latencies',
            'loss': 'loss',
            'received': 'received',
            'replies': 'replies',
            'sent': 'sent'
        }

        self._latencies = latencies
        self._loss = loss
        self._received = received
        self._replies = replies
        self._sent = sent

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetDeviceLiveToolsPing200ResponseResults':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getDeviceLiveToolsPing_200_response_results of this GetDeviceLiveToolsPing200ResponseResults.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def latencies(self):
        """Gets the latencies of this GetDeviceLiveToolsPing200ResponseResults.


        :return: The latencies of this GetDeviceLiveToolsPing200ResponseResults.
        :rtype: GetDeviceLiveToolsPing200ResponseResultsLatencies
        """
        return self._latencies

    @latencies.setter
    def latencies(self, latencies):
        """Sets the latencies of this GetDeviceLiveToolsPing200ResponseResults.


        :param latencies: The latencies of this GetDeviceLiveToolsPing200ResponseResults.
        :type latencies: GetDeviceLiveToolsPing200ResponseResultsLatencies
        """

        self._latencies = latencies

    @property
    def loss(self):
        """Gets the loss of this GetDeviceLiveToolsPing200ResponseResults.


        :return: The loss of this GetDeviceLiveToolsPing200ResponseResults.
        :rtype: GetDeviceLiveToolsPing200ResponseResultsLoss
        """
        return self._loss

    @loss.setter
    def loss(self, loss):
        """Sets the loss of this GetDeviceLiveToolsPing200ResponseResults.


        :param loss: The loss of this GetDeviceLiveToolsPing200ResponseResults.
        :type loss: GetDeviceLiveToolsPing200ResponseResultsLoss
        """

        self._loss = loss

    @property
    def received(self):
        """Gets the received of this GetDeviceLiveToolsPing200ResponseResults.

        Number of packets received

        :return: The received of this GetDeviceLiveToolsPing200ResponseResults.
        :rtype: int
        """
        return self._received

    @received.setter
    def received(self, received):
        """Sets the received of this GetDeviceLiveToolsPing200ResponseResults.

        Number of packets received

        :param received: The received of this GetDeviceLiveToolsPing200ResponseResults.
        :type received: int
        """

        self._received = received

    @property
    def replies(self):
        """Gets the replies of this GetDeviceLiveToolsPing200ResponseResults.

        Received packets

        :return: The replies of this GetDeviceLiveToolsPing200ResponseResults.
        :rtype: List[GetDeviceLiveToolsPing200ResponseResultsRepliesInner]
        """
        return self._replies

    @replies.setter
    def replies(self, replies):
        """Sets the replies of this GetDeviceLiveToolsPing200ResponseResults.

        Received packets

        :param replies: The replies of this GetDeviceLiveToolsPing200ResponseResults.
        :type replies: List[GetDeviceLiveToolsPing200ResponseResultsRepliesInner]
        """

        self._replies = replies

    @property
    def sent(self):
        """Gets the sent of this GetDeviceLiveToolsPing200ResponseResults.

        Number of packets sent

        :return: The sent of this GetDeviceLiveToolsPing200ResponseResults.
        :rtype: int
        """
        return self._sent

    @sent.setter
    def sent(self, sent):
        """Sets the sent of this GetDeviceLiveToolsPing200ResponseResults.

        Number of packets sent

        :param sent: The sent of this GetDeviceLiveToolsPing200ResponseResults.
        :type sent: int
        """

        self._sent = sent
