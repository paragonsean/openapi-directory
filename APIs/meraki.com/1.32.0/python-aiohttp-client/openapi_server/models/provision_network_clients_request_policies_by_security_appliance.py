# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProvisionNetworkClientsRequestPoliciesBySecurityAppliance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device_policy: str=None):
        """ProvisionNetworkClientsRequestPoliciesBySecurityAppliance - a model defined in OpenAPI

        :param device_policy: The device_policy of this ProvisionNetworkClientsRequestPoliciesBySecurityAppliance.
        """
        self.openapi_types = {
            'device_policy': str
        }

        self.attribute_map = {
            'device_policy': 'devicePolicy'
        }

        self._device_policy = device_policy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProvisionNetworkClientsRequestPoliciesBySecurityAppliance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The provisionNetworkClients_request_policiesBySecurityAppliance of this ProvisionNetworkClientsRequestPoliciesBySecurityAppliance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_policy(self):
        """Gets the device_policy of this ProvisionNetworkClientsRequestPoliciesBySecurityAppliance.

        The policy to apply to the specified client. Can be 'Allowed', 'Blocked' or 'Normal'. Required.

        :return: The device_policy of this ProvisionNetworkClientsRequestPoliciesBySecurityAppliance.
        :rtype: str
        """
        return self._device_policy

    @device_policy.setter
    def device_policy(self, device_policy):
        """Sets the device_policy of this ProvisionNetworkClientsRequestPoliciesBySecurityAppliance.

        The policy to apply to the specified client. Can be 'Allowed', 'Blocked' or 'Normal'. Required.

        :param device_policy: The device_policy of this ProvisionNetworkClientsRequestPoliciesBySecurityAppliance.
        :type device_policy: str
        """
        allowed_values = ["Allowed", "Blocked", "Normal"]  # noqa: E501
        if device_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `device_policy` ({0}), must be one of {1}"
                .format(device_policy, allowed_values)
            )

        self._device_policy = device_policy
