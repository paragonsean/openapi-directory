# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ClaimIntoOrganizationRequestLicensesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key: str=None, mode: str=None):
        """ClaimIntoOrganizationRequestLicensesInner - a model defined in OpenAPI

        :param key: The key of this ClaimIntoOrganizationRequestLicensesInner.
        :param mode: The mode of this ClaimIntoOrganizationRequestLicensesInner.
        """
        self.openapi_types = {
            'key': str,
            'mode': str
        }

        self.attribute_map = {
            'key': 'key',
            'mode': 'mode'
        }

        self._key = key
        self._mode = mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClaimIntoOrganizationRequestLicensesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The claimIntoOrganization_request_licenses_inner of this ClaimIntoOrganizationRequestLicensesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key(self):
        """Gets the key of this ClaimIntoOrganizationRequestLicensesInner.

        The key of the license

        :return: The key of this ClaimIntoOrganizationRequestLicensesInner.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this ClaimIntoOrganizationRequestLicensesInner.

        The key of the license

        :param key: The key of this ClaimIntoOrganizationRequestLicensesInner.
        :type key: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")

        self._key = key

    @property
    def mode(self):
        """Gets the mode of this ClaimIntoOrganizationRequestLicensesInner.

        Either 'renew' or 'addDevices'. 'addDevices' will increase the license limit, while 'renew' will extend the amount of time until expiration. Defaults to 'addDevices'. All licenses must be claimed with the same mode, and at most one renewal can be claimed at a time. This parameter is legacy and does not apply to organizations with per-device licensing enabled.

        :return: The mode of this ClaimIntoOrganizationRequestLicensesInner.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this ClaimIntoOrganizationRequestLicensesInner.

        Either 'renew' or 'addDevices'. 'addDevices' will increase the license limit, while 'renew' will extend the amount of time until expiration. Defaults to 'addDevices'. All licenses must be claimed with the same mode, and at most one renewal can be claimed at a time. This parameter is legacy and does not apply to organizations with per-device licensing enabled.

        :param mode: The mode of this ClaimIntoOrganizationRequestLicensesInner.
        :type mode: str
        """
        allowed_values = ["addDevices", "renew"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode
