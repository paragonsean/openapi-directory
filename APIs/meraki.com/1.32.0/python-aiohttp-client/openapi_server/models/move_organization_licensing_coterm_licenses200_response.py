# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_organization_licensing_coterm_licenses200_response_inner import GetOrganizationLicensingCotermLicenses200ResponseInner
from openapi_server import util


class MoveOrganizationLicensingCotermLicenses200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, moved_licenses: List[GetOrganizationLicensingCotermLicenses200ResponseInner]=None, remainder_licenses: List[GetOrganizationLicensingCotermLicenses200ResponseInner]=None):
        """MoveOrganizationLicensingCotermLicenses200Response - a model defined in OpenAPI

        :param moved_licenses: The moved_licenses of this MoveOrganizationLicensingCotermLicenses200Response.
        :param remainder_licenses: The remainder_licenses of this MoveOrganizationLicensingCotermLicenses200Response.
        """
        self.openapi_types = {
            'moved_licenses': List[GetOrganizationLicensingCotermLicenses200ResponseInner],
            'remainder_licenses': List[GetOrganizationLicensingCotermLicenses200ResponseInner]
        }

        self.attribute_map = {
            'moved_licenses': 'movedLicenses',
            'remainder_licenses': 'remainderLicenses'
        }

        self._moved_licenses = moved_licenses
        self._remainder_licenses = remainder_licenses

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MoveOrganizationLicensingCotermLicenses200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The moveOrganizationLicensingCotermLicenses_200_response of this MoveOrganizationLicensingCotermLicenses200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def moved_licenses(self):
        """Gets the moved_licenses of this MoveOrganizationLicensingCotermLicenses200Response.

        Newly moved licenses created in the destination organization of the license move operation

        :return: The moved_licenses of this MoveOrganizationLicensingCotermLicenses200Response.
        :rtype: List[GetOrganizationLicensingCotermLicenses200ResponseInner]
        """
        return self._moved_licenses

    @moved_licenses.setter
    def moved_licenses(self, moved_licenses):
        """Sets the moved_licenses of this MoveOrganizationLicensingCotermLicenses200Response.

        Newly moved licenses created in the destination organization of the license move operation

        :param moved_licenses: The moved_licenses of this MoveOrganizationLicensingCotermLicenses200Response.
        :type moved_licenses: List[GetOrganizationLicensingCotermLicenses200ResponseInner]
        """

        self._moved_licenses = moved_licenses

    @property
    def remainder_licenses(self):
        """Gets the remainder_licenses of this MoveOrganizationLicensingCotermLicenses200Response.

        Remainder licenses created in the source organization as a result of moving a subset of the counts of a license

        :return: The remainder_licenses of this MoveOrganizationLicensingCotermLicenses200Response.
        :rtype: List[GetOrganizationLicensingCotermLicenses200ResponseInner]
        """
        return self._remainder_licenses

    @remainder_licenses.setter
    def remainder_licenses(self, remainder_licenses):
        """Sets the remainder_licenses of this MoveOrganizationLicensingCotermLicenses200Response.

        Remainder licenses created in the source organization as a result of moving a subset of the counts of a license

        :param remainder_licenses: The remainder_licenses of this MoveOrganizationLicensingCotermLicenses200Response.
        :type remainder_licenses: List[GetOrganizationLicensingCotermLicenses200ResponseInner]
        """

        self._remainder_licenses = remainder_licenses
