# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_network_group_policy_request_bandwidth_bandwidth_limits import CreateNetworkGroupPolicyRequestBandwidthBandwidthLimits
from openapi_server import util


class CreateNetworkGroupPolicyRequestBandwidth(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bandwidth_limits: CreateNetworkGroupPolicyRequestBandwidthBandwidthLimits=None, settings: str=None):
        """CreateNetworkGroupPolicyRequestBandwidth - a model defined in OpenAPI

        :param bandwidth_limits: The bandwidth_limits of this CreateNetworkGroupPolicyRequestBandwidth.
        :param settings: The settings of this CreateNetworkGroupPolicyRequestBandwidth.
        """
        self.openapi_types = {
            'bandwidth_limits': CreateNetworkGroupPolicyRequestBandwidthBandwidthLimits,
            'settings': str
        }

        self.attribute_map = {
            'bandwidth_limits': 'bandwidthLimits',
            'settings': 'settings'
        }

        self._bandwidth_limits = bandwidth_limits
        self._settings = settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateNetworkGroupPolicyRequestBandwidth':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The createNetworkGroupPolicy_request_bandwidth of this CreateNetworkGroupPolicyRequestBandwidth.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bandwidth_limits(self):
        """Gets the bandwidth_limits of this CreateNetworkGroupPolicyRequestBandwidth.


        :return: The bandwidth_limits of this CreateNetworkGroupPolicyRequestBandwidth.
        :rtype: CreateNetworkGroupPolicyRequestBandwidthBandwidthLimits
        """
        return self._bandwidth_limits

    @bandwidth_limits.setter
    def bandwidth_limits(self, bandwidth_limits):
        """Sets the bandwidth_limits of this CreateNetworkGroupPolicyRequestBandwidth.


        :param bandwidth_limits: The bandwidth_limits of this CreateNetworkGroupPolicyRequestBandwidth.
        :type bandwidth_limits: CreateNetworkGroupPolicyRequestBandwidthBandwidthLimits
        """

        self._bandwidth_limits = bandwidth_limits

    @property
    def settings(self):
        """Gets the settings of this CreateNetworkGroupPolicyRequestBandwidth.

        How bandwidth limits are enforced. Can be 'network default', 'ignore' or 'custom'.

        :return: The settings of this CreateNetworkGroupPolicyRequestBandwidth.
        :rtype: str
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this CreateNetworkGroupPolicyRequestBandwidth.

        How bandwidth limits are enforced. Can be 'network default', 'ignore' or 'custom'.

        :param settings: The settings of this CreateNetworkGroupPolicyRequestBandwidth.
        :type settings: str
        """
        allowed_values = ["custom", "ignore", "network default"]  # noqa: E501
        if settings not in allowed_values:
            raise ValueError(
                "Invalid value for `settings` ({0}), must be one of {1}"
                .format(settings, allowed_values)
            )

        self._settings = settings
