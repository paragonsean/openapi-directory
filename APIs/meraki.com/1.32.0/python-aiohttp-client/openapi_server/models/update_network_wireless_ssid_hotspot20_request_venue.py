# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateNetworkWirelessSsidHotspot20RequestVenue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, type: str=None):
        """UpdateNetworkWirelessSsidHotspot20RequestVenue - a model defined in OpenAPI

        :param name: The name of this UpdateNetworkWirelessSsidHotspot20RequestVenue.
        :param type: The type of this UpdateNetworkWirelessSsidHotspot20RequestVenue.
        """
        self.openapi_types = {
            'name': str,
            'type': str
        }

        self.attribute_map = {
            'name': 'name',
            'type': 'type'
        }

        self._name = name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateNetworkWirelessSsidHotspot20RequestVenue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateNetworkWirelessSsidHotspot20_request_venue of this UpdateNetworkWirelessSsidHotspot20RequestVenue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this UpdateNetworkWirelessSsidHotspot20RequestVenue.

        Venue name

        :return: The name of this UpdateNetworkWirelessSsidHotspot20RequestVenue.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateNetworkWirelessSsidHotspot20RequestVenue.

        Venue name

        :param name: The name of this UpdateNetworkWirelessSsidHotspot20RequestVenue.
        :type name: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this UpdateNetworkWirelessSsidHotspot20RequestVenue.

        Venue type ('Unspecified', 'Unspecified Assembly', 'Arena', 'Stadium', 'Passenger Terminal', 'Amphitheater', 'Amusement Park', 'Place of Worship', 'Convention Center', 'Library', 'Museum', 'Restaurant', 'Theater', 'Bar', 'Coffee Shop', 'Zoo or Aquarium', 'Emergency Coordination Center', 'Unspecified Business', 'Doctor or Dentist office', 'Bank', 'Fire Station', 'Police Station', 'Post Office', 'Professional Office', 'Research and Development Facility', 'Attorney Office', 'Unspecified Educational', 'School, Primary', 'School, Secondary', 'University or College', 'Unspecified Factory and Industrial', 'Factory', 'Unspecified Institutional', 'Hospital', 'Long-Term Care Facility', 'Alcohol and Drug Rehabilitation Center', 'Group Home', 'Prison or Jail', 'Unspecified Mercantile', 'Retail Store', 'Grocery Market', 'Automotive Service Station', 'Shopping Mall', 'Gas Station', 'Unspecified Residential', 'Private Residence', 'Hotel or Motel', 'Dormitory', 'Boarding House', 'Unspecified Storage', 'Unspecified Utility and Miscellaneous', 'Unspecified Vehicular', 'Automobile or Truck', 'Airplane', 'Bus', 'Ferry', 'Ship or Boat', 'Train', 'Motor Bike', 'Unspecified Outdoor', 'Muni-mesh Network', 'City Park', 'Rest Area', 'Traffic Control', 'Bus Stop', 'Kiosk')

        :return: The type of this UpdateNetworkWirelessSsidHotspot20RequestVenue.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this UpdateNetworkWirelessSsidHotspot20RequestVenue.

        Venue type ('Unspecified', 'Unspecified Assembly', 'Arena', 'Stadium', 'Passenger Terminal', 'Amphitheater', 'Amusement Park', 'Place of Worship', 'Convention Center', 'Library', 'Museum', 'Restaurant', 'Theater', 'Bar', 'Coffee Shop', 'Zoo or Aquarium', 'Emergency Coordination Center', 'Unspecified Business', 'Doctor or Dentist office', 'Bank', 'Fire Station', 'Police Station', 'Post Office', 'Professional Office', 'Research and Development Facility', 'Attorney Office', 'Unspecified Educational', 'School, Primary', 'School, Secondary', 'University or College', 'Unspecified Factory and Industrial', 'Factory', 'Unspecified Institutional', 'Hospital', 'Long-Term Care Facility', 'Alcohol and Drug Rehabilitation Center', 'Group Home', 'Prison or Jail', 'Unspecified Mercantile', 'Retail Store', 'Grocery Market', 'Automotive Service Station', 'Shopping Mall', 'Gas Station', 'Unspecified Residential', 'Private Residence', 'Hotel or Motel', 'Dormitory', 'Boarding House', 'Unspecified Storage', 'Unspecified Utility and Miscellaneous', 'Unspecified Vehicular', 'Automobile or Truck', 'Airplane', 'Bus', 'Ferry', 'Ship or Boat', 'Train', 'Motor Bike', 'Unspecified Outdoor', 'Muni-mesh Network', 'City Park', 'Rest Area', 'Traffic Control', 'Bus Stop', 'Kiosk')

        :param type: The type of this UpdateNetworkWirelessSsidHotspot20RequestVenue.
        :type type: str
        """
        allowed_values = ["Airplane", "Alcohol and Drug Rehabilitation Center", "Amphitheater", "Amusement Park", "Arena", "Attorney Office", "Automobile or Truck", "Automotive Service Station", "Bank", "Bar", "Boarding House", "Bus", "Bus Stop", "City Park", "Coffee Shop", "Convention Center", "Doctor or Dentist office", "Dormitory", "Emergency Coordination Center", "Factory", "Ferry", "Fire Station", "Gas Station", "Grocery Market", "Group Home", "Hospital", "Hotel or Motel", "Kiosk", "Library", "Long-Term Care Facility", "Motor Bike", "Muni-mesh Network", "Museum", "Passenger Terminal", "Place of Worship", "Police Station", "Post Office", "Prison or Jail", "Private Residence", "Professional Office", "Research and Development Facility", "Rest Area", "Restaurant", "Retail Store", "School, Primary", "School, Secondary", "Ship or Boat", "Shopping Mall", "Stadium", "Theater", "Traffic Control", "Train", "University or College", "Unspecified", "Unspecified Assembly", "Unspecified Business", "Unspecified Educational", "Unspecified Factory and Industrial", "Unspecified Institutional", "Unspecified Mercantile", "Unspecified Outdoor", "Unspecified Residential", "Unspecified Storage", "Unspecified Utility and Miscellaneous", "Unspecified Vehicular", "Zoo or Aquarium"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
