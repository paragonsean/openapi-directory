# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateNetworkApplianceFirewallFirewalledServiceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access: str=None, allowed_ips: List[str]=None):
        """UpdateNetworkApplianceFirewallFirewalledServiceRequest - a model defined in OpenAPI

        :param access: The access of this UpdateNetworkApplianceFirewallFirewalledServiceRequest.
        :param allowed_ips: The allowed_ips of this UpdateNetworkApplianceFirewallFirewalledServiceRequest.
        """
        self.openapi_types = {
            'access': str,
            'allowed_ips': List[str]
        }

        self.attribute_map = {
            'access': 'access',
            'allowed_ips': 'allowedIps'
        }

        self._access = access
        self._allowed_ips = allowed_ips

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateNetworkApplianceFirewallFirewalledServiceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateNetworkApplianceFirewallFirewalledService_request of this UpdateNetworkApplianceFirewallFirewalledServiceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access(self):
        """Gets the access of this UpdateNetworkApplianceFirewallFirewalledServiceRequest.

        A string indicating the rule for which IPs are allowed to use the specified service. Acceptable values are \"blocked\" (no remote IPs can access the service), \"restricted\" (only allowed IPs can access the service), and \"unrestriced\" (any remote IP can access the service). This field is required

        :return: The access of this UpdateNetworkApplianceFirewallFirewalledServiceRequest.
        :rtype: str
        """
        return self._access

    @access.setter
    def access(self, access):
        """Sets the access of this UpdateNetworkApplianceFirewallFirewalledServiceRequest.

        A string indicating the rule for which IPs are allowed to use the specified service. Acceptable values are \"blocked\" (no remote IPs can access the service), \"restricted\" (only allowed IPs can access the service), and \"unrestriced\" (any remote IP can access the service). This field is required

        :param access: The access of this UpdateNetworkApplianceFirewallFirewalledServiceRequest.
        :type access: str
        """
        allowed_values = ["blocked", "restricted", "unrestricted"]  # noqa: E501
        if access not in allowed_values:
            raise ValueError(
                "Invalid value for `access` ({0}), must be one of {1}"
                .format(access, allowed_values)
            )

        self._access = access

    @property
    def allowed_ips(self):
        """Gets the allowed_ips of this UpdateNetworkApplianceFirewallFirewalledServiceRequest.

        An array of allowed IPs that can access the service. This field is required if \"access\" is set to \"restricted\". Otherwise this field is ignored

        :return: The allowed_ips of this UpdateNetworkApplianceFirewallFirewalledServiceRequest.
        :rtype: List[str]
        """
        return self._allowed_ips

    @allowed_ips.setter
    def allowed_ips(self, allowed_ips):
        """Sets the allowed_ips of this UpdateNetworkApplianceFirewallFirewalledServiceRequest.

        An array of allowed IPs that can access the service. This field is required if \"access\" is set to \"restricted\". Otherwise this field is ignored

        :param allowed_ips: The allowed_ips of this UpdateNetworkApplianceFirewallFirewalledServiceRequest.
        :type allowed_ips: List[str]
        """

        self._allowed_ips = allowed_ips
