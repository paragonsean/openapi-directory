# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateNetworkApplianceConnectivityMonitoringDestinationsRequestDestinationsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default: bool=None, description: str=None, ip: str=None):
        """UpdateNetworkApplianceConnectivityMonitoringDestinationsRequestDestinationsInner - a model defined in OpenAPI

        :param default: The default of this UpdateNetworkApplianceConnectivityMonitoringDestinationsRequestDestinationsInner.
        :param description: The description of this UpdateNetworkApplianceConnectivityMonitoringDestinationsRequestDestinationsInner.
        :param ip: The ip of this UpdateNetworkApplianceConnectivityMonitoringDestinationsRequestDestinationsInner.
        """
        self.openapi_types = {
            'default': bool,
            'description': str,
            'ip': str
        }

        self.attribute_map = {
            'default': 'default',
            'description': 'description',
            'ip': 'ip'
        }

        self._default = default
        self._description = description
        self._ip = ip

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateNetworkApplianceConnectivityMonitoringDestinationsRequestDestinationsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateNetworkApplianceConnectivityMonitoringDestinations_request_destinations_inner of this UpdateNetworkApplianceConnectivityMonitoringDestinationsRequestDestinationsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default(self):
        """Gets the default of this UpdateNetworkApplianceConnectivityMonitoringDestinationsRequestDestinationsInner.

        Boolean indicating whether this is the default testing destination (true) or not (false). Defaults to false. Only one default is allowed

        :return: The default of this UpdateNetworkApplianceConnectivityMonitoringDestinationsRequestDestinationsInner.
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this UpdateNetworkApplianceConnectivityMonitoringDestinationsRequestDestinationsInner.

        Boolean indicating whether this is the default testing destination (true) or not (false). Defaults to false. Only one default is allowed

        :param default: The default of this UpdateNetworkApplianceConnectivityMonitoringDestinationsRequestDestinationsInner.
        :type default: bool
        """

        self._default = default

    @property
    def description(self):
        """Gets the description of this UpdateNetworkApplianceConnectivityMonitoringDestinationsRequestDestinationsInner.

        Description of the testing destination. Optional, defaults to null

        :return: The description of this UpdateNetworkApplianceConnectivityMonitoringDestinationsRequestDestinationsInner.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateNetworkApplianceConnectivityMonitoringDestinationsRequestDestinationsInner.

        Description of the testing destination. Optional, defaults to null

        :param description: The description of this UpdateNetworkApplianceConnectivityMonitoringDestinationsRequestDestinationsInner.
        :type description: str
        """

        self._description = description

    @property
    def ip(self):
        """Gets the ip of this UpdateNetworkApplianceConnectivityMonitoringDestinationsRequestDestinationsInner.

        The IP address to test connectivity with

        :return: The ip of this UpdateNetworkApplianceConnectivityMonitoringDestinationsRequestDestinationsInner.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this UpdateNetworkApplianceConnectivityMonitoringDestinationsRequestDestinationsInner.

        The IP address to test connectivity with

        :param ip: The ip of this UpdateNetworkApplianceConnectivityMonitoringDestinationsRequestDestinationsInner.
        :type ip: str
        """
        if ip is None:
            raise ValueError("Invalid value for `ip`, must not be `None`")

        self._ip = ip
