# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateNetworkGroupPolicyRequestVlanTagging(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, settings: str=None, vlan_id: str=None):
        """CreateNetworkGroupPolicyRequestVlanTagging - a model defined in OpenAPI

        :param settings: The settings of this CreateNetworkGroupPolicyRequestVlanTagging.
        :param vlan_id: The vlan_id of this CreateNetworkGroupPolicyRequestVlanTagging.
        """
        self.openapi_types = {
            'settings': str,
            'vlan_id': str
        }

        self.attribute_map = {
            'settings': 'settings',
            'vlan_id': 'vlanId'
        }

        self._settings = settings
        self._vlan_id = vlan_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateNetworkGroupPolicyRequestVlanTagging':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The createNetworkGroupPolicy_request_vlanTagging of this CreateNetworkGroupPolicyRequestVlanTagging.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def settings(self):
        """Gets the settings of this CreateNetworkGroupPolicyRequestVlanTagging.

        How VLAN tagging is applied. Can be 'network default', 'ignore' or 'custom'.

        :return: The settings of this CreateNetworkGroupPolicyRequestVlanTagging.
        :rtype: str
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this CreateNetworkGroupPolicyRequestVlanTagging.

        How VLAN tagging is applied. Can be 'network default', 'ignore' or 'custom'.

        :param settings: The settings of this CreateNetworkGroupPolicyRequestVlanTagging.
        :type settings: str
        """
        allowed_values = ["custom", "ignore", "network default"]  # noqa: E501
        if settings not in allowed_values:
            raise ValueError(
                "Invalid value for `settings` ({0}), must be one of {1}"
                .format(settings, allowed_values)
            )

        self._settings = settings

    @property
    def vlan_id(self):
        """Gets the vlan_id of this CreateNetworkGroupPolicyRequestVlanTagging.

        The ID of the vlan you want to tag. This only applies if 'settings' is set to 'custom'.

        :return: The vlan_id of this CreateNetworkGroupPolicyRequestVlanTagging.
        :rtype: str
        """
        return self._vlan_id

    @vlan_id.setter
    def vlan_id(self, vlan_id):
        """Sets the vlan_id of this CreateNetworkGroupPolicyRequestVlanTagging.

        The ID of the vlan you want to tag. This only applies if 'settings' is set to 'custom'.

        :param vlan_id: The vlan_id of this CreateNetworkGroupPolicyRequestVlanTagging.
        :type vlan_id: str
        """

        self._vlan_id = vlan_id
