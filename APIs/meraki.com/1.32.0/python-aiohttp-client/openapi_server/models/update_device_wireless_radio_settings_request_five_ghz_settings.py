# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateDeviceWirelessRadioSettingsRequestFiveGhzSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel: int=None, channel_width: int=None, target_power: int=None):
        """UpdateDeviceWirelessRadioSettingsRequestFiveGhzSettings - a model defined in OpenAPI

        :param channel: The channel of this UpdateDeviceWirelessRadioSettingsRequestFiveGhzSettings.
        :param channel_width: The channel_width of this UpdateDeviceWirelessRadioSettingsRequestFiveGhzSettings.
        :param target_power: The target_power of this UpdateDeviceWirelessRadioSettingsRequestFiveGhzSettings.
        """
        self.openapi_types = {
            'channel': int,
            'channel_width': int,
            'target_power': int
        }

        self.attribute_map = {
            'channel': 'channel',
            'channel_width': 'channelWidth',
            'target_power': 'targetPower'
        }

        self._channel = channel
        self._channel_width = channel_width
        self._target_power = target_power

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateDeviceWirelessRadioSettingsRequestFiveGhzSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateDeviceWirelessRadioSettings_request_fiveGhzSettings of this UpdateDeviceWirelessRadioSettingsRequestFiveGhzSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel(self):
        """Gets the channel of this UpdateDeviceWirelessRadioSettingsRequestFiveGhzSettings.

        Sets a manual channel for 5 GHz. Can be '36', '40', '44', '48', '52', '56', '60', '64', '100', '104', '108', '112', '116', '120', '124', '128', '132', '136', '140', '144', '149', '153', '157', '161', '165', '169', '173' or '177' or null for using auto channel.

        :return: The channel of this UpdateDeviceWirelessRadioSettingsRequestFiveGhzSettings.
        :rtype: int
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this UpdateDeviceWirelessRadioSettingsRequestFiveGhzSettings.

        Sets a manual channel for 5 GHz. Can be '36', '40', '44', '48', '52', '56', '60', '64', '100', '104', '108', '112', '116', '120', '124', '128', '132', '136', '140', '144', '149', '153', '157', '161', '165', '169', '173' or '177' or null for using auto channel.

        :param channel: The channel of this UpdateDeviceWirelessRadioSettingsRequestFiveGhzSettings.
        :type channel: int
        """
        allowed_values = [36, 40, 44, 48, 52, 56, 60, 64, 100, 104, 108, 112, 116, 120, 124, 128, 132, 136, 140, 144, 149, 153, 157, 161, 165, 169, 173, 177]  # noqa: E501
        if channel not in allowed_values:
            raise ValueError(
                "Invalid value for `channel` ({0}), must be one of {1}"
                .format(channel, allowed_values)
            )

        self._channel = channel

    @property
    def channel_width(self):
        """Gets the channel_width of this UpdateDeviceWirelessRadioSettingsRequestFiveGhzSettings.

        Sets a manual channel for 5 GHz. Can be '0', '20', '40', '80' or '160' or null for using auto channel width.

        :return: The channel_width of this UpdateDeviceWirelessRadioSettingsRequestFiveGhzSettings.
        :rtype: int
        """
        return self._channel_width

    @channel_width.setter
    def channel_width(self, channel_width):
        """Sets the channel_width of this UpdateDeviceWirelessRadioSettingsRequestFiveGhzSettings.

        Sets a manual channel for 5 GHz. Can be '0', '20', '40', '80' or '160' or null for using auto channel width.

        :param channel_width: The channel_width of this UpdateDeviceWirelessRadioSettingsRequestFiveGhzSettings.
        :type channel_width: int
        """
        allowed_values = [0, 20, 40, 80, 160]  # noqa: E501
        if channel_width not in allowed_values:
            raise ValueError(
                "Invalid value for `channel_width` ({0}), must be one of {1}"
                .format(channel_width, allowed_values)
            )

        self._channel_width = channel_width

    @property
    def target_power(self):
        """Gets the target_power of this UpdateDeviceWirelessRadioSettingsRequestFiveGhzSettings.

        Set a manual target power for 5 GHz. Can be between '8' or '30' or null for using auto power range.

        :return: The target_power of this UpdateDeviceWirelessRadioSettingsRequestFiveGhzSettings.
        :rtype: int
        """
        return self._target_power

    @target_power.setter
    def target_power(self, target_power):
        """Sets the target_power of this UpdateDeviceWirelessRadioSettingsRequestFiveGhzSettings.

        Set a manual target power for 5 GHz. Can be between '8' or '30' or null for using auto power range.

        :param target_power: The target_power of this UpdateDeviceWirelessRadioSettingsRequestFiveGhzSettings.
        :type target_power: int
        """

        self._target_power = target_power
