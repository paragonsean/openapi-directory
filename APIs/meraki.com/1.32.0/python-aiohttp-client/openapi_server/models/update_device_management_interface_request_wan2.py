# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateDeviceManagementInterfaceRequestWan2(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, static_dns: List[str]=None, static_gateway_ip: str=None, static_ip: str=None, static_subnet_mask: str=None, using_static_ip: bool=None, vlan: int=None, wan_enabled: str=None):
        """UpdateDeviceManagementInterfaceRequestWan2 - a model defined in OpenAPI

        :param static_dns: The static_dns of this UpdateDeviceManagementInterfaceRequestWan2.
        :param static_gateway_ip: The static_gateway_ip of this UpdateDeviceManagementInterfaceRequestWan2.
        :param static_ip: The static_ip of this UpdateDeviceManagementInterfaceRequestWan2.
        :param static_subnet_mask: The static_subnet_mask of this UpdateDeviceManagementInterfaceRequestWan2.
        :param using_static_ip: The using_static_ip of this UpdateDeviceManagementInterfaceRequestWan2.
        :param vlan: The vlan of this UpdateDeviceManagementInterfaceRequestWan2.
        :param wan_enabled: The wan_enabled of this UpdateDeviceManagementInterfaceRequestWan2.
        """
        self.openapi_types = {
            'static_dns': List[str],
            'static_gateway_ip': str,
            'static_ip': str,
            'static_subnet_mask': str,
            'using_static_ip': bool,
            'vlan': int,
            'wan_enabled': str
        }

        self.attribute_map = {
            'static_dns': 'staticDns',
            'static_gateway_ip': 'staticGatewayIp',
            'static_ip': 'staticIp',
            'static_subnet_mask': 'staticSubnetMask',
            'using_static_ip': 'usingStaticIp',
            'vlan': 'vlan',
            'wan_enabled': 'wanEnabled'
        }

        self._static_dns = static_dns
        self._static_gateway_ip = static_gateway_ip
        self._static_ip = static_ip
        self._static_subnet_mask = static_subnet_mask
        self._using_static_ip = using_static_ip
        self._vlan = vlan
        self._wan_enabled = wan_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateDeviceManagementInterfaceRequestWan2':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateDeviceManagementInterface_request_wan2 of this UpdateDeviceManagementInterfaceRequestWan2.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def static_dns(self):
        """Gets the static_dns of this UpdateDeviceManagementInterfaceRequestWan2.

        Up to two DNS IPs.

        :return: The static_dns of this UpdateDeviceManagementInterfaceRequestWan2.
        :rtype: List[str]
        """
        return self._static_dns

    @static_dns.setter
    def static_dns(self, static_dns):
        """Sets the static_dns of this UpdateDeviceManagementInterfaceRequestWan2.

        Up to two DNS IPs.

        :param static_dns: The static_dns of this UpdateDeviceManagementInterfaceRequestWan2.
        :type static_dns: List[str]
        """

        self._static_dns = static_dns

    @property
    def static_gateway_ip(self):
        """Gets the static_gateway_ip of this UpdateDeviceManagementInterfaceRequestWan2.

        The IP of the gateway on the WAN.

        :return: The static_gateway_ip of this UpdateDeviceManagementInterfaceRequestWan2.
        :rtype: str
        """
        return self._static_gateway_ip

    @static_gateway_ip.setter
    def static_gateway_ip(self, static_gateway_ip):
        """Sets the static_gateway_ip of this UpdateDeviceManagementInterfaceRequestWan2.

        The IP of the gateway on the WAN.

        :param static_gateway_ip: The static_gateway_ip of this UpdateDeviceManagementInterfaceRequestWan2.
        :type static_gateway_ip: str
        """

        self._static_gateway_ip = static_gateway_ip

    @property
    def static_ip(self):
        """Gets the static_ip of this UpdateDeviceManagementInterfaceRequestWan2.

        The IP the device should use on the WAN.

        :return: The static_ip of this UpdateDeviceManagementInterfaceRequestWan2.
        :rtype: str
        """
        return self._static_ip

    @static_ip.setter
    def static_ip(self, static_ip):
        """Sets the static_ip of this UpdateDeviceManagementInterfaceRequestWan2.

        The IP the device should use on the WAN.

        :param static_ip: The static_ip of this UpdateDeviceManagementInterfaceRequestWan2.
        :type static_ip: str
        """

        self._static_ip = static_ip

    @property
    def static_subnet_mask(self):
        """Gets the static_subnet_mask of this UpdateDeviceManagementInterfaceRequestWan2.

        The subnet mask for the WAN.

        :return: The static_subnet_mask of this UpdateDeviceManagementInterfaceRequestWan2.
        :rtype: str
        """
        return self._static_subnet_mask

    @static_subnet_mask.setter
    def static_subnet_mask(self, static_subnet_mask):
        """Sets the static_subnet_mask of this UpdateDeviceManagementInterfaceRequestWan2.

        The subnet mask for the WAN.

        :param static_subnet_mask: The static_subnet_mask of this UpdateDeviceManagementInterfaceRequestWan2.
        :type static_subnet_mask: str
        """

        self._static_subnet_mask = static_subnet_mask

    @property
    def using_static_ip(self):
        """Gets the using_static_ip of this UpdateDeviceManagementInterfaceRequestWan2.

        Configure the interface to have static IP settings or use DHCP.

        :return: The using_static_ip of this UpdateDeviceManagementInterfaceRequestWan2.
        :rtype: bool
        """
        return self._using_static_ip

    @using_static_ip.setter
    def using_static_ip(self, using_static_ip):
        """Sets the using_static_ip of this UpdateDeviceManagementInterfaceRequestWan2.

        Configure the interface to have static IP settings or use DHCP.

        :param using_static_ip: The using_static_ip of this UpdateDeviceManagementInterfaceRequestWan2.
        :type using_static_ip: bool
        """

        self._using_static_ip = using_static_ip

    @property
    def vlan(self):
        """Gets the vlan of this UpdateDeviceManagementInterfaceRequestWan2.

        The VLAN that management traffic should be tagged with. Applies whether usingStaticIp is true or false.

        :return: The vlan of this UpdateDeviceManagementInterfaceRequestWan2.
        :rtype: int
        """
        return self._vlan

    @vlan.setter
    def vlan(self, vlan):
        """Sets the vlan of this UpdateDeviceManagementInterfaceRequestWan2.

        The VLAN that management traffic should be tagged with. Applies whether usingStaticIp is true or false.

        :param vlan: The vlan of this UpdateDeviceManagementInterfaceRequestWan2.
        :type vlan: int
        """

        self._vlan = vlan

    @property
    def wan_enabled(self):
        """Gets the wan_enabled of this UpdateDeviceManagementInterfaceRequestWan2.

        Enable or disable the interface (only for MX devices). Valid values are 'enabled', 'disabled', and 'not configured'.

        :return: The wan_enabled of this UpdateDeviceManagementInterfaceRequestWan2.
        :rtype: str
        """
        return self._wan_enabled

    @wan_enabled.setter
    def wan_enabled(self, wan_enabled):
        """Sets the wan_enabled of this UpdateDeviceManagementInterfaceRequestWan2.

        Enable or disable the interface (only for MX devices). Valid values are 'enabled', 'disabled', and 'not configured'.

        :param wan_enabled: The wan_enabled of this UpdateDeviceManagementInterfaceRequestWan2.
        :type wan_enabled: str
        """
        allowed_values = ["disabled", "enabled", "not configured"]  # noqa: E501
        if wan_enabled not in allowed_values:
            raise ValueError(
                "Invalid value for `wan_enabled` ({0}), must be one of {1}"
                .format(wan_enabled, allowed_values)
            )

        self._wan_enabled = wan_enabled
