# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AssignOrganizationLicensesSeatsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, license_id: str=None, network_id: str=None, seat_count: int=None):
        """AssignOrganizationLicensesSeatsRequest - a model defined in OpenAPI

        :param license_id: The license_id of this AssignOrganizationLicensesSeatsRequest.
        :param network_id: The network_id of this AssignOrganizationLicensesSeatsRequest.
        :param seat_count: The seat_count of this AssignOrganizationLicensesSeatsRequest.
        """
        self.openapi_types = {
            'license_id': str,
            'network_id': str,
            'seat_count': int
        }

        self.attribute_map = {
            'license_id': 'licenseId',
            'network_id': 'networkId',
            'seat_count': 'seatCount'
        }

        self._license_id = license_id
        self._network_id = network_id
        self._seat_count = seat_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssignOrganizationLicensesSeatsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The assignOrganizationLicensesSeats_request of this AssignOrganizationLicensesSeatsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def license_id(self):
        """Gets the license_id of this AssignOrganizationLicensesSeatsRequest.

        The ID of the SM license to assign seats from

        :return: The license_id of this AssignOrganizationLicensesSeatsRequest.
        :rtype: str
        """
        return self._license_id

    @license_id.setter
    def license_id(self, license_id):
        """Sets the license_id of this AssignOrganizationLicensesSeatsRequest.

        The ID of the SM license to assign seats from

        :param license_id: The license_id of this AssignOrganizationLicensesSeatsRequest.
        :type license_id: str
        """
        if license_id is None:
            raise ValueError("Invalid value for `license_id`, must not be `None`")

        self._license_id = license_id

    @property
    def network_id(self):
        """Gets the network_id of this AssignOrganizationLicensesSeatsRequest.

        The ID of the SM network to assign the seats to

        :return: The network_id of this AssignOrganizationLicensesSeatsRequest.
        :rtype: str
        """
        return self._network_id

    @network_id.setter
    def network_id(self, network_id):
        """Sets the network_id of this AssignOrganizationLicensesSeatsRequest.

        The ID of the SM network to assign the seats to

        :param network_id: The network_id of this AssignOrganizationLicensesSeatsRequest.
        :type network_id: str
        """
        if network_id is None:
            raise ValueError("Invalid value for `network_id`, must not be `None`")

        self._network_id = network_id

    @property
    def seat_count(self):
        """Gets the seat_count of this AssignOrganizationLicensesSeatsRequest.

        The number of seats to assign to the SM network. Must be less than or equal to the total number of seats of the license

        :return: The seat_count of this AssignOrganizationLicensesSeatsRequest.
        :rtype: int
        """
        return self._seat_count

    @seat_count.setter
    def seat_count(self, seat_count):
        """Sets the seat_count of this AssignOrganizationLicensesSeatsRequest.

        The number of seats to assign to the SM network. Must be less than or equal to the total number of seats of the license

        :param seat_count: The seat_count of this AssignOrganizationLicensesSeatsRequest.
        :type seat_count: int
        """
        if seat_count is None:
            raise ValueError("Invalid value for `seat_count`, must not be `None`")

        self._seat_count = seat_count
