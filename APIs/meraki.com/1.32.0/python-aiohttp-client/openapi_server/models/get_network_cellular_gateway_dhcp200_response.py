# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetNetworkCellularGatewayDhcp200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dhcp_lease_time: str=None, dns_custom_nameservers: List[str]=None, dns_nameservers: str=None):
        """GetNetworkCellularGatewayDhcp200Response - a model defined in OpenAPI

        :param dhcp_lease_time: The dhcp_lease_time of this GetNetworkCellularGatewayDhcp200Response.
        :param dns_custom_nameservers: The dns_custom_nameservers of this GetNetworkCellularGatewayDhcp200Response.
        :param dns_nameservers: The dns_nameservers of this GetNetworkCellularGatewayDhcp200Response.
        """
        self.openapi_types = {
            'dhcp_lease_time': str,
            'dns_custom_nameservers': List[str],
            'dns_nameservers': str
        }

        self.attribute_map = {
            'dhcp_lease_time': 'dhcpLeaseTime',
            'dns_custom_nameservers': 'dnsCustomNameservers',
            'dns_nameservers': 'dnsNameservers'
        }

        self._dhcp_lease_time = dhcp_lease_time
        self._dns_custom_nameservers = dns_custom_nameservers
        self._dns_nameservers = dns_nameservers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetNetworkCellularGatewayDhcp200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getNetworkCellularGatewayDhcp_200_response of this GetNetworkCellularGatewayDhcp200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dhcp_lease_time(self):
        """Gets the dhcp_lease_time of this GetNetworkCellularGatewayDhcp200Response.

        DHCP Lease time for all MG in the network.

        :return: The dhcp_lease_time of this GetNetworkCellularGatewayDhcp200Response.
        :rtype: str
        """
        return self._dhcp_lease_time

    @dhcp_lease_time.setter
    def dhcp_lease_time(self, dhcp_lease_time):
        """Sets the dhcp_lease_time of this GetNetworkCellularGatewayDhcp200Response.

        DHCP Lease time for all MG in the network.

        :param dhcp_lease_time: The dhcp_lease_time of this GetNetworkCellularGatewayDhcp200Response.
        :type dhcp_lease_time: str
        """
        allowed_values = ["1 day", "1 hour", "1 week", "12 hours", "30 minutes", "4 hours"]  # noqa: E501
        if dhcp_lease_time not in allowed_values:
            raise ValueError(
                "Invalid value for `dhcp_lease_time` ({0}), must be one of {1}"
                .format(dhcp_lease_time, allowed_values)
            )

        self._dhcp_lease_time = dhcp_lease_time

    @property
    def dns_custom_nameservers(self):
        """Gets the dns_custom_nameservers of this GetNetworkCellularGatewayDhcp200Response.

        List of fixed IPs representing the the DNS Name servers when the mode is 'custom'.

        :return: The dns_custom_nameservers of this GetNetworkCellularGatewayDhcp200Response.
        :rtype: List[str]
        """
        return self._dns_custom_nameservers

    @dns_custom_nameservers.setter
    def dns_custom_nameservers(self, dns_custom_nameservers):
        """Sets the dns_custom_nameservers of this GetNetworkCellularGatewayDhcp200Response.

        List of fixed IPs representing the the DNS Name servers when the mode is 'custom'.

        :param dns_custom_nameservers: The dns_custom_nameservers of this GetNetworkCellularGatewayDhcp200Response.
        :type dns_custom_nameservers: List[str]
        """

        self._dns_custom_nameservers = dns_custom_nameservers

    @property
    def dns_nameservers(self):
        """Gets the dns_nameservers of this GetNetworkCellularGatewayDhcp200Response.

        DNS name servers mode for all MG in the network.

        :return: The dns_nameservers of this GetNetworkCellularGatewayDhcp200Response.
        :rtype: str
        """
        return self._dns_nameservers

    @dns_nameservers.setter
    def dns_nameservers(self, dns_nameservers):
        """Sets the dns_nameservers of this GetNetworkCellularGatewayDhcp200Response.

        DNS name servers mode for all MG in the network.

        :param dns_nameservers: The dns_nameservers of this GetNetworkCellularGatewayDhcp200Response.
        :type dns_nameservers: str
        """
        allowed_values = ["custom", "google_dns", "opendns", "upstream_dns"]  # noqa: E501
        if dns_nameservers not in allowed_values:
            raise ValueError(
                "Invalid value for `dns_nameservers` ({0}), must be one of {1}"
                .format(dns_nameservers, allowed_values)
            )

        self._dns_nameservers = dns_nameservers
