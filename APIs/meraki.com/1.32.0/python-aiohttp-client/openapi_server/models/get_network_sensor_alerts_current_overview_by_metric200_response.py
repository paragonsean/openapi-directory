# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_network_sensor_alerts_current_overview_by_metric200_response_counts import GetNetworkSensorAlertsCurrentOverviewByMetric200ResponseCounts
from openapi_server import util


class GetNetworkSensorAlertsCurrentOverviewByMetric200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, counts: GetNetworkSensorAlertsCurrentOverviewByMetric200ResponseCounts=None, supported_metrics: List[str]=None):
        """GetNetworkSensorAlertsCurrentOverviewByMetric200Response - a model defined in OpenAPI

        :param counts: The counts of this GetNetworkSensorAlertsCurrentOverviewByMetric200Response.
        :param supported_metrics: The supported_metrics of this GetNetworkSensorAlertsCurrentOverviewByMetric200Response.
        """
        self.openapi_types = {
            'counts': GetNetworkSensorAlertsCurrentOverviewByMetric200ResponseCounts,
            'supported_metrics': List[str]
        }

        self.attribute_map = {
            'counts': 'counts',
            'supported_metrics': 'supportedMetrics'
        }

        self._counts = counts
        self._supported_metrics = supported_metrics

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetNetworkSensorAlertsCurrentOverviewByMetric200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getNetworkSensorAlertsCurrentOverviewByMetric_200_response of this GetNetworkSensorAlertsCurrentOverviewByMetric200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def counts(self):
        """Gets the counts of this GetNetworkSensorAlertsCurrentOverviewByMetric200Response.


        :return: The counts of this GetNetworkSensorAlertsCurrentOverviewByMetric200Response.
        :rtype: GetNetworkSensorAlertsCurrentOverviewByMetric200ResponseCounts
        """
        return self._counts

    @counts.setter
    def counts(self, counts):
        """Sets the counts of this GetNetworkSensorAlertsCurrentOverviewByMetric200Response.


        :param counts: The counts of this GetNetworkSensorAlertsCurrentOverviewByMetric200Response.
        :type counts: GetNetworkSensorAlertsCurrentOverviewByMetric200ResponseCounts
        """

        self._counts = counts

    @property
    def supported_metrics(self):
        """Gets the supported_metrics of this GetNetworkSensorAlertsCurrentOverviewByMetric200Response.

        List of metrics that are supported for alerts, based on available sensor devices in the network

        :return: The supported_metrics of this GetNetworkSensorAlertsCurrentOverviewByMetric200Response.
        :rtype: List[str]
        """
        return self._supported_metrics

    @supported_metrics.setter
    def supported_metrics(self, supported_metrics):
        """Sets the supported_metrics of this GetNetworkSensorAlertsCurrentOverviewByMetric200Response.

        List of metrics that are supported for alerts, based on available sensor devices in the network

        :param supported_metrics: The supported_metrics of this GetNetworkSensorAlertsCurrentOverviewByMetric200Response.
        :type supported_metrics: List[str]
        """
        allowed_values = ["door", "humidity", "indoorAirQuality", "noise", "pm25", "temperature", "tvoc", "water"]  # noqa: E501
        if not set(supported_metrics).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `supported_metrics` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(supported_metrics) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._supported_metrics = supported_metrics
