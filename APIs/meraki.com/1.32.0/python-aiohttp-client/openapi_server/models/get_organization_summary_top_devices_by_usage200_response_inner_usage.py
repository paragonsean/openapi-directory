# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetOrganizationSummaryTopDevicesByUsage200ResponseInnerUsage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, percentage: float=None, total: float=None):
        """GetOrganizationSummaryTopDevicesByUsage200ResponseInnerUsage - a model defined in OpenAPI

        :param percentage: The percentage of this GetOrganizationSummaryTopDevicesByUsage200ResponseInnerUsage.
        :param total: The total of this GetOrganizationSummaryTopDevicesByUsage200ResponseInnerUsage.
        """
        self.openapi_types = {
            'percentage': float,
            'total': float
        }

        self.attribute_map = {
            'percentage': 'percentage',
            'total': 'total'
        }

        self._percentage = percentage
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetOrganizationSummaryTopDevicesByUsage200ResponseInnerUsage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getOrganizationSummaryTopDevicesByUsage_200_response_inner_usage of this GetOrganizationSummaryTopDevicesByUsage200ResponseInnerUsage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def percentage(self):
        """Gets the percentage of this GetOrganizationSummaryTopDevicesByUsage200ResponseInnerUsage.

        Data usage of the device by percentage

        :return: The percentage of this GetOrganizationSummaryTopDevicesByUsage200ResponseInnerUsage.
        :rtype: float
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this GetOrganizationSummaryTopDevicesByUsage200ResponseInnerUsage.

        Data usage of the device by percentage

        :param percentage: The percentage of this GetOrganizationSummaryTopDevicesByUsage200ResponseInnerUsage.
        :type percentage: float
        """

        self._percentage = percentage

    @property
    def total(self):
        """Gets the total of this GetOrganizationSummaryTopDevicesByUsage200ResponseInnerUsage.

        Total data usage of the device

        :return: The total of this GetOrganizationSummaryTopDevicesByUsage200ResponseInnerUsage.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this GetOrganizationSummaryTopDevicesByUsage200ResponseInnerUsage.

        Total data usage of the device

        :param total: The total of this GetOrganizationSummaryTopDevicesByUsage200ResponseInnerUsage.
        :type total: float
        """

        self._total = total
