# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateOrganizationSnmpRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, peer_ips: List[str]=None, v2c_enabled: bool=None, v3_auth_mode: str=None, v3_auth_pass: str=None, v3_enabled: bool=None, v3_priv_mode: str=None, v3_priv_pass: str=None):
        """UpdateOrganizationSnmpRequest - a model defined in OpenAPI

        :param peer_ips: The peer_ips of this UpdateOrganizationSnmpRequest.
        :param v2c_enabled: The v2c_enabled of this UpdateOrganizationSnmpRequest.
        :param v3_auth_mode: The v3_auth_mode of this UpdateOrganizationSnmpRequest.
        :param v3_auth_pass: The v3_auth_pass of this UpdateOrganizationSnmpRequest.
        :param v3_enabled: The v3_enabled of this UpdateOrganizationSnmpRequest.
        :param v3_priv_mode: The v3_priv_mode of this UpdateOrganizationSnmpRequest.
        :param v3_priv_pass: The v3_priv_pass of this UpdateOrganizationSnmpRequest.
        """
        self.openapi_types = {
            'peer_ips': List[str],
            'v2c_enabled': bool,
            'v3_auth_mode': str,
            'v3_auth_pass': str,
            'v3_enabled': bool,
            'v3_priv_mode': str,
            'v3_priv_pass': str
        }

        self.attribute_map = {
            'peer_ips': 'peerIps',
            'v2c_enabled': 'v2cEnabled',
            'v3_auth_mode': 'v3AuthMode',
            'v3_auth_pass': 'v3AuthPass',
            'v3_enabled': 'v3Enabled',
            'v3_priv_mode': 'v3PrivMode',
            'v3_priv_pass': 'v3PrivPass'
        }

        self._peer_ips = peer_ips
        self._v2c_enabled = v2c_enabled
        self._v3_auth_mode = v3_auth_mode
        self._v3_auth_pass = v3_auth_pass
        self._v3_enabled = v3_enabled
        self._v3_priv_mode = v3_priv_mode
        self._v3_priv_pass = v3_priv_pass

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateOrganizationSnmpRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateOrganizationSnmp_request of this UpdateOrganizationSnmpRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def peer_ips(self):
        """Gets the peer_ips of this UpdateOrganizationSnmpRequest.

        The list of IPv4 addresses that are allowed to access the SNMP server.

        :return: The peer_ips of this UpdateOrganizationSnmpRequest.
        :rtype: List[str]
        """
        return self._peer_ips

    @peer_ips.setter
    def peer_ips(self, peer_ips):
        """Sets the peer_ips of this UpdateOrganizationSnmpRequest.

        The list of IPv4 addresses that are allowed to access the SNMP server.

        :param peer_ips: The peer_ips of this UpdateOrganizationSnmpRequest.
        :type peer_ips: List[str]
        """

        self._peer_ips = peer_ips

    @property
    def v2c_enabled(self):
        """Gets the v2c_enabled of this UpdateOrganizationSnmpRequest.

        Boolean indicating whether SNMP version 2c is enabled for the organization.

        :return: The v2c_enabled of this UpdateOrganizationSnmpRequest.
        :rtype: bool
        """
        return self._v2c_enabled

    @v2c_enabled.setter
    def v2c_enabled(self, v2c_enabled):
        """Sets the v2c_enabled of this UpdateOrganizationSnmpRequest.

        Boolean indicating whether SNMP version 2c is enabled for the organization.

        :param v2c_enabled: The v2c_enabled of this UpdateOrganizationSnmpRequest.
        :type v2c_enabled: bool
        """

        self._v2c_enabled = v2c_enabled

    @property
    def v3_auth_mode(self):
        """Gets the v3_auth_mode of this UpdateOrganizationSnmpRequest.

        The SNMP version 3 authentication mode. Can be either 'MD5' or 'SHA'.

        :return: The v3_auth_mode of this UpdateOrganizationSnmpRequest.
        :rtype: str
        """
        return self._v3_auth_mode

    @v3_auth_mode.setter
    def v3_auth_mode(self, v3_auth_mode):
        """Sets the v3_auth_mode of this UpdateOrganizationSnmpRequest.

        The SNMP version 3 authentication mode. Can be either 'MD5' or 'SHA'.

        :param v3_auth_mode: The v3_auth_mode of this UpdateOrganizationSnmpRequest.
        :type v3_auth_mode: str
        """
        allowed_values = ["MD5", "SHA"]  # noqa: E501
        if v3_auth_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `v3_auth_mode` ({0}), must be one of {1}"
                .format(v3_auth_mode, allowed_values)
            )

        self._v3_auth_mode = v3_auth_mode

    @property
    def v3_auth_pass(self):
        """Gets the v3_auth_pass of this UpdateOrganizationSnmpRequest.

        The SNMP version 3 authentication password. Must be at least 8 characters if specified.

        :return: The v3_auth_pass of this UpdateOrganizationSnmpRequest.
        :rtype: str
        """
        return self._v3_auth_pass

    @v3_auth_pass.setter
    def v3_auth_pass(self, v3_auth_pass):
        """Sets the v3_auth_pass of this UpdateOrganizationSnmpRequest.

        The SNMP version 3 authentication password. Must be at least 8 characters if specified.

        :param v3_auth_pass: The v3_auth_pass of this UpdateOrganizationSnmpRequest.
        :type v3_auth_pass: str
        """

        self._v3_auth_pass = v3_auth_pass

    @property
    def v3_enabled(self):
        """Gets the v3_enabled of this UpdateOrganizationSnmpRequest.

        Boolean indicating whether SNMP version 3 is enabled for the organization.

        :return: The v3_enabled of this UpdateOrganizationSnmpRequest.
        :rtype: bool
        """
        return self._v3_enabled

    @v3_enabled.setter
    def v3_enabled(self, v3_enabled):
        """Sets the v3_enabled of this UpdateOrganizationSnmpRequest.

        Boolean indicating whether SNMP version 3 is enabled for the organization.

        :param v3_enabled: The v3_enabled of this UpdateOrganizationSnmpRequest.
        :type v3_enabled: bool
        """

        self._v3_enabled = v3_enabled

    @property
    def v3_priv_mode(self):
        """Gets the v3_priv_mode of this UpdateOrganizationSnmpRequest.

        The SNMP version 3 privacy mode. Can be either 'DES' or 'AES128'.

        :return: The v3_priv_mode of this UpdateOrganizationSnmpRequest.
        :rtype: str
        """
        return self._v3_priv_mode

    @v3_priv_mode.setter
    def v3_priv_mode(self, v3_priv_mode):
        """Sets the v3_priv_mode of this UpdateOrganizationSnmpRequest.

        The SNMP version 3 privacy mode. Can be either 'DES' or 'AES128'.

        :param v3_priv_mode: The v3_priv_mode of this UpdateOrganizationSnmpRequest.
        :type v3_priv_mode: str
        """
        allowed_values = ["AES128", "DES"]  # noqa: E501
        if v3_priv_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `v3_priv_mode` ({0}), must be one of {1}"
                .format(v3_priv_mode, allowed_values)
            )

        self._v3_priv_mode = v3_priv_mode

    @property
    def v3_priv_pass(self):
        """Gets the v3_priv_pass of this UpdateOrganizationSnmpRequest.

        The SNMP version 3 privacy password. Must be at least 8 characters if specified.

        :return: The v3_priv_pass of this UpdateOrganizationSnmpRequest.
        :rtype: str
        """
        return self._v3_priv_pass

    @v3_priv_pass.setter
    def v3_priv_pass(self, v3_priv_pass):
        """Sets the v3_priv_pass of this UpdateOrganizationSnmpRequest.

        The SNMP version 3 privacy password. Must be at least 8 characters if specified.

        :param v3_priv_pass: The v3_priv_pass of this UpdateOrganizationSnmpRequest.
        :type v3_priv_pass: str
        """

        self._v3_priv_pass = v3_priv_pass
