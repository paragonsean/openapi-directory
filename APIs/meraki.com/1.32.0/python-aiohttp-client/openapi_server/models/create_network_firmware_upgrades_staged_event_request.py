# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_network_firmware_upgrades_staged_event_request_products import CreateNetworkFirmwareUpgradesStagedEventRequestProducts
from openapi_server.models.update_network_firmware_upgrades_staged_events_request_stages_inner import UpdateNetworkFirmwareUpgradesStagedEventsRequestStagesInner
from openapi_server import util


class CreateNetworkFirmwareUpgradesStagedEventRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, products: CreateNetworkFirmwareUpgradesStagedEventRequestProducts=None, stages: List[UpdateNetworkFirmwareUpgradesStagedEventsRequestStagesInner]=None):
        """CreateNetworkFirmwareUpgradesStagedEventRequest - a model defined in OpenAPI

        :param products: The products of this CreateNetworkFirmwareUpgradesStagedEventRequest.
        :param stages: The stages of this CreateNetworkFirmwareUpgradesStagedEventRequest.
        """
        self.openapi_types = {
            'products': CreateNetworkFirmwareUpgradesStagedEventRequestProducts,
            'stages': List[UpdateNetworkFirmwareUpgradesStagedEventsRequestStagesInner]
        }

        self.attribute_map = {
            'products': 'products',
            'stages': 'stages'
        }

        self._products = products
        self._stages = stages

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateNetworkFirmwareUpgradesStagedEventRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The createNetworkFirmwareUpgradesStagedEvent_request of this CreateNetworkFirmwareUpgradesStagedEventRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def products(self):
        """Gets the products of this CreateNetworkFirmwareUpgradesStagedEventRequest.


        :return: The products of this CreateNetworkFirmwareUpgradesStagedEventRequest.
        :rtype: CreateNetworkFirmwareUpgradesStagedEventRequestProducts
        """
        return self._products

    @products.setter
    def products(self, products):
        """Sets the products of this CreateNetworkFirmwareUpgradesStagedEventRequest.


        :param products: The products of this CreateNetworkFirmwareUpgradesStagedEventRequest.
        :type products: CreateNetworkFirmwareUpgradesStagedEventRequestProducts
        """

        self._products = products

    @property
    def stages(self):
        """Gets the stages of this CreateNetworkFirmwareUpgradesStagedEventRequest.

        All firmware upgrade stages in the network with their start time.

        :return: The stages of this CreateNetworkFirmwareUpgradesStagedEventRequest.
        :rtype: List[UpdateNetworkFirmwareUpgradesStagedEventsRequestStagesInner]
        """
        return self._stages

    @stages.setter
    def stages(self, stages):
        """Sets the stages of this CreateNetworkFirmwareUpgradesStagedEventRequest.

        All firmware upgrade stages in the network with their start time.

        :param stages: The stages of this CreateNetworkFirmwareUpgradesStagedEventRequest.
        :type stages: List[UpdateNetworkFirmwareUpgradesStagedEventsRequestStagesInner]
        """
        if stages is None:
            raise ValueError("Invalid value for `stages`, must not be `None`")

        self._stages = stages
