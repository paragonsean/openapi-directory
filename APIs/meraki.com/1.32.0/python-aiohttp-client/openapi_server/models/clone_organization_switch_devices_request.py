# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CloneOrganizationSwitchDevicesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, source_serial: str=None, target_serials: List[str]=None):
        """CloneOrganizationSwitchDevicesRequest - a model defined in OpenAPI

        :param source_serial: The source_serial of this CloneOrganizationSwitchDevicesRequest.
        :param target_serials: The target_serials of this CloneOrganizationSwitchDevicesRequest.
        """
        self.openapi_types = {
            'source_serial': str,
            'target_serials': List[str]
        }

        self.attribute_map = {
            'source_serial': 'sourceSerial',
            'target_serials': 'targetSerials'
        }

        self._source_serial = source_serial
        self._target_serials = target_serials

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CloneOrganizationSwitchDevicesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The cloneOrganizationSwitchDevices_request of this CloneOrganizationSwitchDevicesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def source_serial(self):
        """Gets the source_serial of this CloneOrganizationSwitchDevicesRequest.

        Serial number of the source switch (must be on a network not bound to a template)

        :return: The source_serial of this CloneOrganizationSwitchDevicesRequest.
        :rtype: str
        """
        return self._source_serial

    @source_serial.setter
    def source_serial(self, source_serial):
        """Sets the source_serial of this CloneOrganizationSwitchDevicesRequest.

        Serial number of the source switch (must be on a network not bound to a template)

        :param source_serial: The source_serial of this CloneOrganizationSwitchDevicesRequest.
        :type source_serial: str
        """
        if source_serial is None:
            raise ValueError("Invalid value for `source_serial`, must not be `None`")

        self._source_serial = source_serial

    @property
    def target_serials(self):
        """Gets the target_serials of this CloneOrganizationSwitchDevicesRequest.

        Array of serial numbers of one or more target switches (must be on a network not bound to a template)

        :return: The target_serials of this CloneOrganizationSwitchDevicesRequest.
        :rtype: List[str]
        """
        return self._target_serials

    @target_serials.setter
    def target_serials(self, target_serials):
        """Sets the target_serials of this CloneOrganizationSwitchDevicesRequest.

        Array of serial numbers of one or more target switches (must be on a network not bound to a template)

        :param target_serials: The target_serials of this CloneOrganizationSwitchDevicesRequest.
        :type target_serials: List[str]
        """
        if target_serials is None:
            raise ValueError("Invalid value for `target_serials`, must not be `None`")

        self._target_serials = target_serials
