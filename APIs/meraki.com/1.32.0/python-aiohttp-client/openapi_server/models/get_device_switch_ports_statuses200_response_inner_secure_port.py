# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_device_switch_ports_statuses200_response_inner_secure_port_config_overrides import GetDeviceSwitchPortsStatuses200ResponseInnerSecurePortConfigOverrides
from openapi_server import util


class GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, authentication_status: str=None, config_overrides: GetDeviceSwitchPortsStatuses200ResponseInnerSecurePortConfigOverrides=None, enabled: bool=None):
        """GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort - a model defined in OpenAPI

        :param active: The active of this GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort.
        :param authentication_status: The authentication_status of this GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort.
        :param config_overrides: The config_overrides of this GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort.
        :param enabled: The enabled of this GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort.
        """
        self.openapi_types = {
            'active': bool,
            'authentication_status': str,
            'config_overrides': GetDeviceSwitchPortsStatuses200ResponseInnerSecurePortConfigOverrides,
            'enabled': bool
        }

        self.attribute_map = {
            'active': 'active',
            'authentication_status': 'authenticationStatus',
            'config_overrides': 'configOverrides',
            'enabled': 'enabled'
        }

        self._active = active
        self._authentication_status = authentication_status
        self._config_overrides = config_overrides
        self._enabled = enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getDeviceSwitchPortsStatuses_200_response_inner_securePort of this GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort.

        Whether Secure Port is currently active for this port.

        :return: The active of this GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort.

        Whether Secure Port is currently active for this port.

        :param active: The active of this GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort.
        :type active: bool
        """

        self._active = active

    @property
    def authentication_status(self):
        """Gets the authentication_status of this GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort.

        The current Secure Port status.

        :return: The authentication_status of this GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort.
        :rtype: str
        """
        return self._authentication_status

    @authentication_status.setter
    def authentication_status(self, authentication_status):
        """Sets the authentication_status of this GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort.

        The current Secure Port status.

        :param authentication_status: The authentication_status of this GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort.
        :type authentication_status: str
        """
        allowed_values = ["Authentication failure", "Authentication in progress", "Authentication successful", "Authentication timed out", "Disabled", "Enabled"]  # noqa: E501
        if authentication_status not in allowed_values:
            raise ValueError(
                "Invalid value for `authentication_status` ({0}), must be one of {1}"
                .format(authentication_status, allowed_values)
            )

        self._authentication_status = authentication_status

    @property
    def config_overrides(self):
        """Gets the config_overrides of this GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort.


        :return: The config_overrides of this GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort.
        :rtype: GetDeviceSwitchPortsStatuses200ResponseInnerSecurePortConfigOverrides
        """
        return self._config_overrides

    @config_overrides.setter
    def config_overrides(self, config_overrides):
        """Sets the config_overrides of this GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort.


        :param config_overrides: The config_overrides of this GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort.
        :type config_overrides: GetDeviceSwitchPortsStatuses200ResponseInnerSecurePortConfigOverrides
        """

        self._config_overrides = config_overrides

    @property
    def enabled(self):
        """Gets the enabled of this GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort.

        Whether Secure Port is turned on for this port.

        :return: The enabled of this GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort.

        Whether Secure Port is turned on for this port.

        :param enabled: The enabled of this GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort.
        :type enabled: bool
        """

        self._enabled = enabled
