# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateNetworkGroupPolicyRequestFirewallAndTrafficShapingL7FirewallRulesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, policy: str=None, type: str=None, value: str=None):
        """CreateNetworkGroupPolicyRequestFirewallAndTrafficShapingL7FirewallRulesInner - a model defined in OpenAPI

        :param policy: The policy of this CreateNetworkGroupPolicyRequestFirewallAndTrafficShapingL7FirewallRulesInner.
        :param type: The type of this CreateNetworkGroupPolicyRequestFirewallAndTrafficShapingL7FirewallRulesInner.
        :param value: The value of this CreateNetworkGroupPolicyRequestFirewallAndTrafficShapingL7FirewallRulesInner.
        """
        self.openapi_types = {
            'policy': str,
            'type': str,
            'value': str
        }

        self.attribute_map = {
            'policy': 'policy',
            'type': 'type',
            'value': 'value'
        }

        self._policy = policy
        self._type = type
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateNetworkGroupPolicyRequestFirewallAndTrafficShapingL7FirewallRulesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The createNetworkGroupPolicy_request_firewallAndTrafficShaping_l7FirewallRules_inner of this CreateNetworkGroupPolicyRequestFirewallAndTrafficShapingL7FirewallRulesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def policy(self):
        """Gets the policy of this CreateNetworkGroupPolicyRequestFirewallAndTrafficShapingL7FirewallRulesInner.

        The policy applied to matching traffic. Must be 'deny'.

        :return: The policy of this CreateNetworkGroupPolicyRequestFirewallAndTrafficShapingL7FirewallRulesInner.
        :rtype: str
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this CreateNetworkGroupPolicyRequestFirewallAndTrafficShapingL7FirewallRulesInner.

        The policy applied to matching traffic. Must be 'deny'.

        :param policy: The policy of this CreateNetworkGroupPolicyRequestFirewallAndTrafficShapingL7FirewallRulesInner.
        :type policy: str
        """
        allowed_values = ["deny"]  # noqa: E501
        if policy not in allowed_values:
            raise ValueError(
                "Invalid value for `policy` ({0}), must be one of {1}"
                .format(policy, allowed_values)
            )

        self._policy = policy

    @property
    def type(self):
        """Gets the type of this CreateNetworkGroupPolicyRequestFirewallAndTrafficShapingL7FirewallRulesInner.

        Type of the L7 Rule. Must be 'application', 'applicationCategory', 'host', 'port' or 'ipRange'

        :return: The type of this CreateNetworkGroupPolicyRequestFirewallAndTrafficShapingL7FirewallRulesInner.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateNetworkGroupPolicyRequestFirewallAndTrafficShapingL7FirewallRulesInner.

        Type of the L7 Rule. Must be 'application', 'applicationCategory', 'host', 'port' or 'ipRange'

        :param type: The type of this CreateNetworkGroupPolicyRequestFirewallAndTrafficShapingL7FirewallRulesInner.
        :type type: str
        """
        allowed_values = ["application", "applicationCategory", "host", "ipRange", "port"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def value(self):
        """Gets the value of this CreateNetworkGroupPolicyRequestFirewallAndTrafficShapingL7FirewallRulesInner.

        The 'value' of what you want to block. If 'type' is 'host', 'port' or 'ipRange', 'value' must be a string matching either a hostname (e.g. somewhere.com), a port (e.g. 8080), or an IP range (e.g. 192.1.0.0/16). If 'type' is 'application' or 'applicationCategory', then 'value' must be an object with an ID for the application.

        :return: The value of this CreateNetworkGroupPolicyRequestFirewallAndTrafficShapingL7FirewallRulesInner.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this CreateNetworkGroupPolicyRequestFirewallAndTrafficShapingL7FirewallRulesInner.

        The 'value' of what you want to block. If 'type' is 'host', 'port' or 'ipRange', 'value' must be a string matching either a hostname (e.g. somewhere.com), a port (e.g. 8080), or an IP range (e.g. 192.1.0.0/16). If 'type' is 'application' or 'applicationCategory', then 'value' must be an object with an ID for the application.

        :param value: The value of this CreateNetworkGroupPolicyRequestFirewallAndTrafficShapingL7FirewallRulesInner.
        :type value: str
        """

        self._value = value
