# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_organization_action_batch201_response_actions_inner import CreateOrganizationActionBatch201ResponseActionsInner
from openapi_server.models.create_organization_action_batch201_response_status import CreateOrganizationActionBatch201ResponseStatus
from openapi_server import util


class CreateOrganizationActionBatch201Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actions: List[CreateOrganizationActionBatch201ResponseActionsInner]=None, confirmed: bool=None, id: str=None, organization_id: str=None, status: CreateOrganizationActionBatch201ResponseStatus=None, synchronous: bool=None):
        """CreateOrganizationActionBatch201Response - a model defined in OpenAPI

        :param actions: The actions of this CreateOrganizationActionBatch201Response.
        :param confirmed: The confirmed of this CreateOrganizationActionBatch201Response.
        :param id: The id of this CreateOrganizationActionBatch201Response.
        :param organization_id: The organization_id of this CreateOrganizationActionBatch201Response.
        :param status: The status of this CreateOrganizationActionBatch201Response.
        :param synchronous: The synchronous of this CreateOrganizationActionBatch201Response.
        """
        self.openapi_types = {
            'actions': List[CreateOrganizationActionBatch201ResponseActionsInner],
            'confirmed': bool,
            'id': str,
            'organization_id': str,
            'status': CreateOrganizationActionBatch201ResponseStatus,
            'synchronous': bool
        }

        self.attribute_map = {
            'actions': 'actions',
            'confirmed': 'confirmed',
            'id': 'id',
            'organization_id': 'organizationId',
            'status': 'status',
            'synchronous': 'synchronous'
        }

        self._actions = actions
        self._confirmed = confirmed
        self._id = id
        self._organization_id = organization_id
        self._status = status
        self._synchronous = synchronous

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateOrganizationActionBatch201Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The createOrganizationActionBatch_201_response of this CreateOrganizationActionBatch201Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actions(self):
        """Gets the actions of this CreateOrganizationActionBatch201Response.

        A set of changes made as part of this action (<a href='https://developer.cisco.com/meraki/api/#/rest/guides/action-batches/'>more details</a>)

        :return: The actions of this CreateOrganizationActionBatch201Response.
        :rtype: List[CreateOrganizationActionBatch201ResponseActionsInner]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this CreateOrganizationActionBatch201Response.

        A set of changes made as part of this action (<a href='https://developer.cisco.com/meraki/api/#/rest/guides/action-batches/'>more details</a>)

        :param actions: The actions of this CreateOrganizationActionBatch201Response.
        :type actions: List[CreateOrganizationActionBatch201ResponseActionsInner]
        """
        if actions is None:
            raise ValueError("Invalid value for `actions`, must not be `None`")

        self._actions = actions

    @property
    def confirmed(self):
        """Gets the confirmed of this CreateOrganizationActionBatch201Response.

        Flag describing whether the action should be previewed before executing or not

        :return: The confirmed of this CreateOrganizationActionBatch201Response.
        :rtype: bool
        """
        return self._confirmed

    @confirmed.setter
    def confirmed(self, confirmed):
        """Sets the confirmed of this CreateOrganizationActionBatch201Response.

        Flag describing whether the action should be previewed before executing or not

        :param confirmed: The confirmed of this CreateOrganizationActionBatch201Response.
        :type confirmed: bool
        """

        self._confirmed = confirmed

    @property
    def id(self):
        """Gets the id of this CreateOrganizationActionBatch201Response.

        ID of the action batch. Can be used to check the status of the action batch at /organizations/{organizationId}/actionBatches/{actionBatchId}

        :return: The id of this CreateOrganizationActionBatch201Response.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CreateOrganizationActionBatch201Response.

        ID of the action batch. Can be used to check the status of the action batch at /organizations/{organizationId}/actionBatches/{actionBatchId}

        :param id: The id of this CreateOrganizationActionBatch201Response.
        :type id: str
        """

        self._id = id

    @property
    def organization_id(self):
        """Gets the organization_id of this CreateOrganizationActionBatch201Response.

        ID of the organization this action batch belongs to

        :return: The organization_id of this CreateOrganizationActionBatch201Response.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this CreateOrganizationActionBatch201Response.

        ID of the organization this action batch belongs to

        :param organization_id: The organization_id of this CreateOrganizationActionBatch201Response.
        :type organization_id: str
        """

        self._organization_id = organization_id

    @property
    def status(self):
        """Gets the status of this CreateOrganizationActionBatch201Response.


        :return: The status of this CreateOrganizationActionBatch201Response.
        :rtype: CreateOrganizationActionBatch201ResponseStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CreateOrganizationActionBatch201Response.


        :param status: The status of this CreateOrganizationActionBatch201Response.
        :type status: CreateOrganizationActionBatch201ResponseStatus
        """

        self._status = status

    @property
    def synchronous(self):
        """Gets the synchronous of this CreateOrganizationActionBatch201Response.

        Flag describing whether actions should run synchronously or asynchronously

        :return: The synchronous of this CreateOrganizationActionBatch201Response.
        :rtype: bool
        """
        return self._synchronous

    @synchronous.setter
    def synchronous(self, synchronous):
        """Sets the synchronous of this CreateOrganizationActionBatch201Response.

        Flag describing whether actions should run synchronously or asynchronously

        :param synchronous: The synchronous of this CreateOrganizationActionBatch201Response.
        :type synchronous: bool
        """

        self._synchronous = synchronous
