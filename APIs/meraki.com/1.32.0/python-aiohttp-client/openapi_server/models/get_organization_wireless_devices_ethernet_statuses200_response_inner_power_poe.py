# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetOrganizationWirelessDevicesEthernetStatuses200ResponseInnerPowerPoe(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_connected: bool=None):
        """GetOrganizationWirelessDevicesEthernetStatuses200ResponseInnerPowerPoe - a model defined in OpenAPI

        :param is_connected: The is_connected of this GetOrganizationWirelessDevicesEthernetStatuses200ResponseInnerPowerPoe.
        """
        self.openapi_types = {
            'is_connected': bool
        }

        self.attribute_map = {
            'is_connected': 'isConnected'
        }

        self._is_connected = is_connected

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetOrganizationWirelessDevicesEthernetStatuses200ResponseInnerPowerPoe':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getOrganizationWirelessDevicesEthernetStatuses_200_response_inner_power_poe of this GetOrganizationWirelessDevicesEthernetStatuses200ResponseInnerPowerPoe.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_connected(self):
        """Gets the is_connected of this GetOrganizationWirelessDevicesEthernetStatuses200ResponseInnerPowerPoe.

        PoE power connected

        :return: The is_connected of this GetOrganizationWirelessDevicesEthernetStatuses200ResponseInnerPowerPoe.
        :rtype: bool
        """
        return self._is_connected

    @is_connected.setter
    def is_connected(self, is_connected):
        """Sets the is_connected of this GetOrganizationWirelessDevicesEthernetStatuses200ResponseInnerPowerPoe.

        PoE power connected

        :param is_connected: The is_connected of this GetOrganizationWirelessDevicesEthernetStatuses200ResponseInnerPowerPoe.
        :type is_connected: bool
        """

        self._is_connected = is_connected
