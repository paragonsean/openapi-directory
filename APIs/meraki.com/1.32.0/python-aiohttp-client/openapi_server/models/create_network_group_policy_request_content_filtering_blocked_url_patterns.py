# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateNetworkGroupPolicyRequestContentFilteringBlockedUrlPatterns(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, patterns: List[str]=None, settings: str=None):
        """CreateNetworkGroupPolicyRequestContentFilteringBlockedUrlPatterns - a model defined in OpenAPI

        :param patterns: The patterns of this CreateNetworkGroupPolicyRequestContentFilteringBlockedUrlPatterns.
        :param settings: The settings of this CreateNetworkGroupPolicyRequestContentFilteringBlockedUrlPatterns.
        """
        self.openapi_types = {
            'patterns': List[str],
            'settings': str
        }

        self.attribute_map = {
            'patterns': 'patterns',
            'settings': 'settings'
        }

        self._patterns = patterns
        self._settings = settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateNetworkGroupPolicyRequestContentFilteringBlockedUrlPatterns':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The createNetworkGroupPolicy_request_contentFiltering_blockedUrlPatterns of this CreateNetworkGroupPolicyRequestContentFilteringBlockedUrlPatterns.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def patterns(self):
        """Gets the patterns of this CreateNetworkGroupPolicyRequestContentFilteringBlockedUrlPatterns.

        A list of URL patterns that are blocked

        :return: The patterns of this CreateNetworkGroupPolicyRequestContentFilteringBlockedUrlPatterns.
        :rtype: List[str]
        """
        return self._patterns

    @patterns.setter
    def patterns(self, patterns):
        """Sets the patterns of this CreateNetworkGroupPolicyRequestContentFilteringBlockedUrlPatterns.

        A list of URL patterns that are blocked

        :param patterns: The patterns of this CreateNetworkGroupPolicyRequestContentFilteringBlockedUrlPatterns.
        :type patterns: List[str]
        """

        self._patterns = patterns

    @property
    def settings(self):
        """Gets the settings of this CreateNetworkGroupPolicyRequestContentFilteringBlockedUrlPatterns.

        How URL patterns are applied. Can be 'network default', 'append' or 'override'.

        :return: The settings of this CreateNetworkGroupPolicyRequestContentFilteringBlockedUrlPatterns.
        :rtype: str
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this CreateNetworkGroupPolicyRequestContentFilteringBlockedUrlPatterns.

        How URL patterns are applied. Can be 'network default', 'append' or 'override'.

        :param settings: The settings of this CreateNetworkGroupPolicyRequestContentFilteringBlockedUrlPatterns.
        :type settings: str
        """
        allowed_values = ["append", "network default", "override"]  # noqa: E501
        if settings not in allowed_values:
            raise ValueError(
                "Invalid value for `settings` ({0}), must be one of {1}"
                .format(settings, allowed_values)
            )

        self._settings = settings
