# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_network_appliance_settings200_response_dynamic_dns import GetNetworkApplianceSettings200ResponseDynamicDns
from openapi_server import util


class GetNetworkApplianceSettings200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_tracking_method: str=None, deployment_mode: str=None, dynamic_dns: GetNetworkApplianceSettings200ResponseDynamicDns=None):
        """GetNetworkApplianceSettings200Response - a model defined in OpenAPI

        :param client_tracking_method: The client_tracking_method of this GetNetworkApplianceSettings200Response.
        :param deployment_mode: The deployment_mode of this GetNetworkApplianceSettings200Response.
        :param dynamic_dns: The dynamic_dns of this GetNetworkApplianceSettings200Response.
        """
        self.openapi_types = {
            'client_tracking_method': str,
            'deployment_mode': str,
            'dynamic_dns': GetNetworkApplianceSettings200ResponseDynamicDns
        }

        self.attribute_map = {
            'client_tracking_method': 'clientTrackingMethod',
            'deployment_mode': 'deploymentMode',
            'dynamic_dns': 'dynamicDns'
        }

        self._client_tracking_method = client_tracking_method
        self._deployment_mode = deployment_mode
        self._dynamic_dns = dynamic_dns

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetNetworkApplianceSettings200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getNetworkApplianceSettings_200_response of this GetNetworkApplianceSettings200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_tracking_method(self):
        """Gets the client_tracking_method of this GetNetworkApplianceSettings200Response.

        Client tracking method of a network

        :return: The client_tracking_method of this GetNetworkApplianceSettings200Response.
        :rtype: str
        """
        return self._client_tracking_method

    @client_tracking_method.setter
    def client_tracking_method(self, client_tracking_method):
        """Sets the client_tracking_method of this GetNetworkApplianceSettings200Response.

        Client tracking method of a network

        :param client_tracking_method: The client_tracking_method of this GetNetworkApplianceSettings200Response.
        :type client_tracking_method: str
        """
        allowed_values = ["IP address", "MAC address", "Unique client identifier"]  # noqa: E501
        if client_tracking_method not in allowed_values:
            raise ValueError(
                "Invalid value for `client_tracking_method` ({0}), must be one of {1}"
                .format(client_tracking_method, allowed_values)
            )

        self._client_tracking_method = client_tracking_method

    @property
    def deployment_mode(self):
        """Gets the deployment_mode of this GetNetworkApplianceSettings200Response.

        Deployment mode of a network

        :return: The deployment_mode of this GetNetworkApplianceSettings200Response.
        :rtype: str
        """
        return self._deployment_mode

    @deployment_mode.setter
    def deployment_mode(self, deployment_mode):
        """Sets the deployment_mode of this GetNetworkApplianceSettings200Response.

        Deployment mode of a network

        :param deployment_mode: The deployment_mode of this GetNetworkApplianceSettings200Response.
        :type deployment_mode: str
        """
        allowed_values = ["passthrough", "routed"]  # noqa: E501
        if deployment_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `deployment_mode` ({0}), must be one of {1}"
                .format(deployment_mode, allowed_values)
            )

        self._deployment_mode = deployment_mode

    @property
    def dynamic_dns(self):
        """Gets the dynamic_dns of this GetNetworkApplianceSettings200Response.


        :return: The dynamic_dns of this GetNetworkApplianceSettings200Response.
        :rtype: GetNetworkApplianceSettings200ResponseDynamicDns
        """
        return self._dynamic_dns

    @dynamic_dns.setter
    def dynamic_dns(self, dynamic_dns):
        """Sets the dynamic_dns of this GetNetworkApplianceSettings200Response.


        :param dynamic_dns: The dynamic_dns of this GetNetworkApplianceSettings200Response.
        :type dynamic_dns: GetNetworkApplianceSettings200ResponseDynamicDns
        """

        self._dynamic_dns = dynamic_dns
