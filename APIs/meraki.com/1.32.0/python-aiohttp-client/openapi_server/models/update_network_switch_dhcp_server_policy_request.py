# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_network_switch_dhcp_server_policy_request_alerts import UpdateNetworkSwitchDhcpServerPolicyRequestAlerts
from openapi_server.models.update_network_switch_dhcp_server_policy_request_arp_inspection import UpdateNetworkSwitchDhcpServerPolicyRequestArpInspection
from openapi_server import util


class UpdateNetworkSwitchDhcpServerPolicyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alerts: UpdateNetworkSwitchDhcpServerPolicyRequestAlerts=None, allowed_servers: List[str]=None, arp_inspection: UpdateNetworkSwitchDhcpServerPolicyRequestArpInspection=None, blocked_servers: List[str]=None, default_policy: str=None):
        """UpdateNetworkSwitchDhcpServerPolicyRequest - a model defined in OpenAPI

        :param alerts: The alerts of this UpdateNetworkSwitchDhcpServerPolicyRequest.
        :param allowed_servers: The allowed_servers of this UpdateNetworkSwitchDhcpServerPolicyRequest.
        :param arp_inspection: The arp_inspection of this UpdateNetworkSwitchDhcpServerPolicyRequest.
        :param blocked_servers: The blocked_servers of this UpdateNetworkSwitchDhcpServerPolicyRequest.
        :param default_policy: The default_policy of this UpdateNetworkSwitchDhcpServerPolicyRequest.
        """
        self.openapi_types = {
            'alerts': UpdateNetworkSwitchDhcpServerPolicyRequestAlerts,
            'allowed_servers': List[str],
            'arp_inspection': UpdateNetworkSwitchDhcpServerPolicyRequestArpInspection,
            'blocked_servers': List[str],
            'default_policy': str
        }

        self.attribute_map = {
            'alerts': 'alerts',
            'allowed_servers': 'allowedServers',
            'arp_inspection': 'arpInspection',
            'blocked_servers': 'blockedServers',
            'default_policy': 'defaultPolicy'
        }

        self._alerts = alerts
        self._allowed_servers = allowed_servers
        self._arp_inspection = arp_inspection
        self._blocked_servers = blocked_servers
        self._default_policy = default_policy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateNetworkSwitchDhcpServerPolicyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateNetworkSwitchDhcpServerPolicy_request of this UpdateNetworkSwitchDhcpServerPolicyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alerts(self):
        """Gets the alerts of this UpdateNetworkSwitchDhcpServerPolicyRequest.


        :return: The alerts of this UpdateNetworkSwitchDhcpServerPolicyRequest.
        :rtype: UpdateNetworkSwitchDhcpServerPolicyRequestAlerts
        """
        return self._alerts

    @alerts.setter
    def alerts(self, alerts):
        """Sets the alerts of this UpdateNetworkSwitchDhcpServerPolicyRequest.


        :param alerts: The alerts of this UpdateNetworkSwitchDhcpServerPolicyRequest.
        :type alerts: UpdateNetworkSwitchDhcpServerPolicyRequestAlerts
        """

        self._alerts = alerts

    @property
    def allowed_servers(self):
        """Gets the allowed_servers of this UpdateNetworkSwitchDhcpServerPolicyRequest.

        List the MAC addresses of DHCP servers to permit on the network when defaultPolicy is set to block. An empty array will clear the entries.

        :return: The allowed_servers of this UpdateNetworkSwitchDhcpServerPolicyRequest.
        :rtype: List[str]
        """
        return self._allowed_servers

    @allowed_servers.setter
    def allowed_servers(self, allowed_servers):
        """Sets the allowed_servers of this UpdateNetworkSwitchDhcpServerPolicyRequest.

        List the MAC addresses of DHCP servers to permit on the network when defaultPolicy is set to block. An empty array will clear the entries.

        :param allowed_servers: The allowed_servers of this UpdateNetworkSwitchDhcpServerPolicyRequest.
        :type allowed_servers: List[str]
        """

        self._allowed_servers = allowed_servers

    @property
    def arp_inspection(self):
        """Gets the arp_inspection of this UpdateNetworkSwitchDhcpServerPolicyRequest.


        :return: The arp_inspection of this UpdateNetworkSwitchDhcpServerPolicyRequest.
        :rtype: UpdateNetworkSwitchDhcpServerPolicyRequestArpInspection
        """
        return self._arp_inspection

    @arp_inspection.setter
    def arp_inspection(self, arp_inspection):
        """Sets the arp_inspection of this UpdateNetworkSwitchDhcpServerPolicyRequest.


        :param arp_inspection: The arp_inspection of this UpdateNetworkSwitchDhcpServerPolicyRequest.
        :type arp_inspection: UpdateNetworkSwitchDhcpServerPolicyRequestArpInspection
        """

        self._arp_inspection = arp_inspection

    @property
    def blocked_servers(self):
        """Gets the blocked_servers of this UpdateNetworkSwitchDhcpServerPolicyRequest.

        List the MAC addresses of DHCP servers to block on the network when defaultPolicy is set to allow. An empty array will clear the entries.

        :return: The blocked_servers of this UpdateNetworkSwitchDhcpServerPolicyRequest.
        :rtype: List[str]
        """
        return self._blocked_servers

    @blocked_servers.setter
    def blocked_servers(self, blocked_servers):
        """Sets the blocked_servers of this UpdateNetworkSwitchDhcpServerPolicyRequest.

        List the MAC addresses of DHCP servers to block on the network when defaultPolicy is set to allow. An empty array will clear the entries.

        :param blocked_servers: The blocked_servers of this UpdateNetworkSwitchDhcpServerPolicyRequest.
        :type blocked_servers: List[str]
        """

        self._blocked_servers = blocked_servers

    @property
    def default_policy(self):
        """Gets the default_policy of this UpdateNetworkSwitchDhcpServerPolicyRequest.

        'allow' or 'block' new DHCP servers. Default value is 'allow'.

        :return: The default_policy of this UpdateNetworkSwitchDhcpServerPolicyRequest.
        :rtype: str
        """
        return self._default_policy

    @default_policy.setter
    def default_policy(self, default_policy):
        """Sets the default_policy of this UpdateNetworkSwitchDhcpServerPolicyRequest.

        'allow' or 'block' new DHCP servers. Default value is 'allow'.

        :param default_policy: The default_policy of this UpdateNetworkSwitchDhcpServerPolicyRequest.
        :type default_policy: str
        """
        allowed_values = ["allow", "block"]  # noqa: E501
        if default_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `default_policy` ({0}), must be one of {1}"
                .format(default_policy, allowed_values)
            )

        self._default_policy = default_policy
