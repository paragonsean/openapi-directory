# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateNetworkAppliancePortRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_policy: str=None, allowed_vlans: str=None, drop_untagged_traffic: bool=None, enabled: bool=None, type: str=None, vlan: int=None):
        """UpdateNetworkAppliancePortRequest - a model defined in OpenAPI

        :param access_policy: The access_policy of this UpdateNetworkAppliancePortRequest.
        :param allowed_vlans: The allowed_vlans of this UpdateNetworkAppliancePortRequest.
        :param drop_untagged_traffic: The drop_untagged_traffic of this UpdateNetworkAppliancePortRequest.
        :param enabled: The enabled of this UpdateNetworkAppliancePortRequest.
        :param type: The type of this UpdateNetworkAppliancePortRequest.
        :param vlan: The vlan of this UpdateNetworkAppliancePortRequest.
        """
        self.openapi_types = {
            'access_policy': str,
            'allowed_vlans': str,
            'drop_untagged_traffic': bool,
            'enabled': bool,
            'type': str,
            'vlan': int
        }

        self.attribute_map = {
            'access_policy': 'accessPolicy',
            'allowed_vlans': 'allowedVlans',
            'drop_untagged_traffic': 'dropUntaggedTraffic',
            'enabled': 'enabled',
            'type': 'type',
            'vlan': 'vlan'
        }

        self._access_policy = access_policy
        self._allowed_vlans = allowed_vlans
        self._drop_untagged_traffic = drop_untagged_traffic
        self._enabled = enabled
        self._type = type
        self._vlan = vlan

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateNetworkAppliancePortRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateNetworkAppliancePort_request of this UpdateNetworkAppliancePortRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_policy(self):
        """Gets the access_policy of this UpdateNetworkAppliancePortRequest.

        The name of the policy. Only applicable to Access ports. Valid values are: 'open', '8021x-radius', 'mac-radius', 'hybris-radius' for MX64 or Z3 or any MX supporting the per port authentication feature. Otherwise, 'open' is the only valid value and 'open' is the default value if the field is missing.

        :return: The access_policy of this UpdateNetworkAppliancePortRequest.
        :rtype: str
        """
        return self._access_policy

    @access_policy.setter
    def access_policy(self, access_policy):
        """Sets the access_policy of this UpdateNetworkAppliancePortRequest.

        The name of the policy. Only applicable to Access ports. Valid values are: 'open', '8021x-radius', 'mac-radius', 'hybris-radius' for MX64 or Z3 or any MX supporting the per port authentication feature. Otherwise, 'open' is the only valid value and 'open' is the default value if the field is missing.

        :param access_policy: The access_policy of this UpdateNetworkAppliancePortRequest.
        :type access_policy: str
        """

        self._access_policy = access_policy

    @property
    def allowed_vlans(self):
        """Gets the allowed_vlans of this UpdateNetworkAppliancePortRequest.

        Comma-delimited list of the VLAN ID's allowed on the port, or 'all' to permit all VLAN's on the port.

        :return: The allowed_vlans of this UpdateNetworkAppliancePortRequest.
        :rtype: str
        """
        return self._allowed_vlans

    @allowed_vlans.setter
    def allowed_vlans(self, allowed_vlans):
        """Sets the allowed_vlans of this UpdateNetworkAppliancePortRequest.

        Comma-delimited list of the VLAN ID's allowed on the port, or 'all' to permit all VLAN's on the port.

        :param allowed_vlans: The allowed_vlans of this UpdateNetworkAppliancePortRequest.
        :type allowed_vlans: str
        """

        self._allowed_vlans = allowed_vlans

    @property
    def drop_untagged_traffic(self):
        """Gets the drop_untagged_traffic of this UpdateNetworkAppliancePortRequest.

        Trunk port can Drop all Untagged traffic. When true, no VLAN is required. Access ports cannot have dropUntaggedTraffic set to true.

        :return: The drop_untagged_traffic of this UpdateNetworkAppliancePortRequest.
        :rtype: bool
        """
        return self._drop_untagged_traffic

    @drop_untagged_traffic.setter
    def drop_untagged_traffic(self, drop_untagged_traffic):
        """Sets the drop_untagged_traffic of this UpdateNetworkAppliancePortRequest.

        Trunk port can Drop all Untagged traffic. When true, no VLAN is required. Access ports cannot have dropUntaggedTraffic set to true.

        :param drop_untagged_traffic: The drop_untagged_traffic of this UpdateNetworkAppliancePortRequest.
        :type drop_untagged_traffic: bool
        """

        self._drop_untagged_traffic = drop_untagged_traffic

    @property
    def enabled(self):
        """Gets the enabled of this UpdateNetworkAppliancePortRequest.

        The status of the port

        :return: The enabled of this UpdateNetworkAppliancePortRequest.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this UpdateNetworkAppliancePortRequest.

        The status of the port

        :param enabled: The enabled of this UpdateNetworkAppliancePortRequest.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def type(self):
        """Gets the type of this UpdateNetworkAppliancePortRequest.

        The type of the port: 'access' or 'trunk'.

        :return: The type of this UpdateNetworkAppliancePortRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this UpdateNetworkAppliancePortRequest.

        The type of the port: 'access' or 'trunk'.

        :param type: The type of this UpdateNetworkAppliancePortRequest.
        :type type: str
        """

        self._type = type

    @property
    def vlan(self):
        """Gets the vlan of this UpdateNetworkAppliancePortRequest.

        Native VLAN when the port is in Trunk mode. Access VLAN when the port is in Access mode.

        :return: The vlan of this UpdateNetworkAppliancePortRequest.
        :rtype: int
        """
        return self._vlan

    @vlan.setter
    def vlan(self, vlan):
        """Sets the vlan of this UpdateNetworkAppliancePortRequest.

        Native VLAN when the port is in Trunk mode. Access VLAN when the port is in Access mode.

        :param vlan: The vlan of this UpdateNetworkAppliancePortRequest.
        :type vlan: int
        """

        self._vlan = vlan
