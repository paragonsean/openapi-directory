# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_network_switch_access_policy_request_radius_accounting_servers_inner import CreateNetworkSwitchAccessPolicyRequestRadiusAccountingServersInner
from openapi_server.models.create_network_switch_access_policy_request_radius_servers_inner import CreateNetworkSwitchAccessPolicyRequestRadiusServersInner
from openapi_server.models.get_network_switch_access_policies200_response_inner_dot1x import GetNetworkSwitchAccessPolicies200ResponseInnerDot1x
from openapi_server.models.get_network_switch_access_policies200_response_inner_radius import GetNetworkSwitchAccessPolicies200ResponseInnerRadius
from openapi_server import util


class CreateNetworkSwitchAccessPolicyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_policy_type: str=None, dot1x: GetNetworkSwitchAccessPolicies200ResponseInnerDot1x=None, guest_port_bouncing: bool=None, guest_vlan_id: int=None, host_mode: str=None, increase_access_speed: bool=None, name: str=None, radius: GetNetworkSwitchAccessPolicies200ResponseInnerRadius=None, radius_accounting_enabled: bool=None, radius_accounting_servers: List[CreateNetworkSwitchAccessPolicyRequestRadiusAccountingServersInner]=None, radius_coa_support_enabled: bool=None, radius_group_attribute: str=None, radius_servers: List[CreateNetworkSwitchAccessPolicyRequestRadiusServersInner]=None, radius_testing_enabled: bool=None, url_redirect_walled_garden_enabled: bool=None, url_redirect_walled_garden_ranges: List[str]=None, voice_vlan_clients: bool=None):
        """CreateNetworkSwitchAccessPolicyRequest - a model defined in OpenAPI

        :param access_policy_type: The access_policy_type of this CreateNetworkSwitchAccessPolicyRequest.
        :param dot1x: The dot1x of this CreateNetworkSwitchAccessPolicyRequest.
        :param guest_port_bouncing: The guest_port_bouncing of this CreateNetworkSwitchAccessPolicyRequest.
        :param guest_vlan_id: The guest_vlan_id of this CreateNetworkSwitchAccessPolicyRequest.
        :param host_mode: The host_mode of this CreateNetworkSwitchAccessPolicyRequest.
        :param increase_access_speed: The increase_access_speed of this CreateNetworkSwitchAccessPolicyRequest.
        :param name: The name of this CreateNetworkSwitchAccessPolicyRequest.
        :param radius: The radius of this CreateNetworkSwitchAccessPolicyRequest.
        :param radius_accounting_enabled: The radius_accounting_enabled of this CreateNetworkSwitchAccessPolicyRequest.
        :param radius_accounting_servers: The radius_accounting_servers of this CreateNetworkSwitchAccessPolicyRequest.
        :param radius_coa_support_enabled: The radius_coa_support_enabled of this CreateNetworkSwitchAccessPolicyRequest.
        :param radius_group_attribute: The radius_group_attribute of this CreateNetworkSwitchAccessPolicyRequest.
        :param radius_servers: The radius_servers of this CreateNetworkSwitchAccessPolicyRequest.
        :param radius_testing_enabled: The radius_testing_enabled of this CreateNetworkSwitchAccessPolicyRequest.
        :param url_redirect_walled_garden_enabled: The url_redirect_walled_garden_enabled of this CreateNetworkSwitchAccessPolicyRequest.
        :param url_redirect_walled_garden_ranges: The url_redirect_walled_garden_ranges of this CreateNetworkSwitchAccessPolicyRequest.
        :param voice_vlan_clients: The voice_vlan_clients of this CreateNetworkSwitchAccessPolicyRequest.
        """
        self.openapi_types = {
            'access_policy_type': str,
            'dot1x': GetNetworkSwitchAccessPolicies200ResponseInnerDot1x,
            'guest_port_bouncing': bool,
            'guest_vlan_id': int,
            'host_mode': str,
            'increase_access_speed': bool,
            'name': str,
            'radius': GetNetworkSwitchAccessPolicies200ResponseInnerRadius,
            'radius_accounting_enabled': bool,
            'radius_accounting_servers': List[CreateNetworkSwitchAccessPolicyRequestRadiusAccountingServersInner],
            'radius_coa_support_enabled': bool,
            'radius_group_attribute': str,
            'radius_servers': List[CreateNetworkSwitchAccessPolicyRequestRadiusServersInner],
            'radius_testing_enabled': bool,
            'url_redirect_walled_garden_enabled': bool,
            'url_redirect_walled_garden_ranges': List[str],
            'voice_vlan_clients': bool
        }

        self.attribute_map = {
            'access_policy_type': 'accessPolicyType',
            'dot1x': 'dot1x',
            'guest_port_bouncing': 'guestPortBouncing',
            'guest_vlan_id': 'guestVlanId',
            'host_mode': 'hostMode',
            'increase_access_speed': 'increaseAccessSpeed',
            'name': 'name',
            'radius': 'radius',
            'radius_accounting_enabled': 'radiusAccountingEnabled',
            'radius_accounting_servers': 'radiusAccountingServers',
            'radius_coa_support_enabled': 'radiusCoaSupportEnabled',
            'radius_group_attribute': 'radiusGroupAttribute',
            'radius_servers': 'radiusServers',
            'radius_testing_enabled': 'radiusTestingEnabled',
            'url_redirect_walled_garden_enabled': 'urlRedirectWalledGardenEnabled',
            'url_redirect_walled_garden_ranges': 'urlRedirectWalledGardenRanges',
            'voice_vlan_clients': 'voiceVlanClients'
        }

        self._access_policy_type = access_policy_type
        self._dot1x = dot1x
        self._guest_port_bouncing = guest_port_bouncing
        self._guest_vlan_id = guest_vlan_id
        self._host_mode = host_mode
        self._increase_access_speed = increase_access_speed
        self._name = name
        self._radius = radius
        self._radius_accounting_enabled = radius_accounting_enabled
        self._radius_accounting_servers = radius_accounting_servers
        self._radius_coa_support_enabled = radius_coa_support_enabled
        self._radius_group_attribute = radius_group_attribute
        self._radius_servers = radius_servers
        self._radius_testing_enabled = radius_testing_enabled
        self._url_redirect_walled_garden_enabled = url_redirect_walled_garden_enabled
        self._url_redirect_walled_garden_ranges = url_redirect_walled_garden_ranges
        self._voice_vlan_clients = voice_vlan_clients

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateNetworkSwitchAccessPolicyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The createNetworkSwitchAccessPolicy_request of this CreateNetworkSwitchAccessPolicyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_policy_type(self):
        """Gets the access_policy_type of this CreateNetworkSwitchAccessPolicyRequest.

        Access Type of the policy. Automatically 'Hybrid authentication' when hostMode is 'Multi-Domain'.

        :return: The access_policy_type of this CreateNetworkSwitchAccessPolicyRequest.
        :rtype: str
        """
        return self._access_policy_type

    @access_policy_type.setter
    def access_policy_type(self, access_policy_type):
        """Sets the access_policy_type of this CreateNetworkSwitchAccessPolicyRequest.

        Access Type of the policy. Automatically 'Hybrid authentication' when hostMode is 'Multi-Domain'.

        :param access_policy_type: The access_policy_type of this CreateNetworkSwitchAccessPolicyRequest.
        :type access_policy_type: str
        """
        allowed_values = ["802.1x", "Hybrid authentication", "MAC authentication bypass"]  # noqa: E501
        if access_policy_type not in allowed_values:
            raise ValueError(
                "Invalid value for `access_policy_type` ({0}), must be one of {1}"
                .format(access_policy_type, allowed_values)
            )

        self._access_policy_type = access_policy_type

    @property
    def dot1x(self):
        """Gets the dot1x of this CreateNetworkSwitchAccessPolicyRequest.


        :return: The dot1x of this CreateNetworkSwitchAccessPolicyRequest.
        :rtype: GetNetworkSwitchAccessPolicies200ResponseInnerDot1x
        """
        return self._dot1x

    @dot1x.setter
    def dot1x(self, dot1x):
        """Sets the dot1x of this CreateNetworkSwitchAccessPolicyRequest.


        :param dot1x: The dot1x of this CreateNetworkSwitchAccessPolicyRequest.
        :type dot1x: GetNetworkSwitchAccessPolicies200ResponseInnerDot1x
        """

        self._dot1x = dot1x

    @property
    def guest_port_bouncing(self):
        """Gets the guest_port_bouncing of this CreateNetworkSwitchAccessPolicyRequest.

        If enabled, Meraki devices will periodically send access-request messages to these RADIUS servers

        :return: The guest_port_bouncing of this CreateNetworkSwitchAccessPolicyRequest.
        :rtype: bool
        """
        return self._guest_port_bouncing

    @guest_port_bouncing.setter
    def guest_port_bouncing(self, guest_port_bouncing):
        """Sets the guest_port_bouncing of this CreateNetworkSwitchAccessPolicyRequest.

        If enabled, Meraki devices will periodically send access-request messages to these RADIUS servers

        :param guest_port_bouncing: The guest_port_bouncing of this CreateNetworkSwitchAccessPolicyRequest.
        :type guest_port_bouncing: bool
        """

        self._guest_port_bouncing = guest_port_bouncing

    @property
    def guest_vlan_id(self):
        """Gets the guest_vlan_id of this CreateNetworkSwitchAccessPolicyRequest.

        ID for the guest VLAN allow unauthorized devices access to limited network resources

        :return: The guest_vlan_id of this CreateNetworkSwitchAccessPolicyRequest.
        :rtype: int
        """
        return self._guest_vlan_id

    @guest_vlan_id.setter
    def guest_vlan_id(self, guest_vlan_id):
        """Sets the guest_vlan_id of this CreateNetworkSwitchAccessPolicyRequest.

        ID for the guest VLAN allow unauthorized devices access to limited network resources

        :param guest_vlan_id: The guest_vlan_id of this CreateNetworkSwitchAccessPolicyRequest.
        :type guest_vlan_id: int
        """

        self._guest_vlan_id = guest_vlan_id

    @property
    def host_mode(self):
        """Gets the host_mode of this CreateNetworkSwitchAccessPolicyRequest.

        Choose the Host Mode for the access policy.

        :return: The host_mode of this CreateNetworkSwitchAccessPolicyRequest.
        :rtype: str
        """
        return self._host_mode

    @host_mode.setter
    def host_mode(self, host_mode):
        """Sets the host_mode of this CreateNetworkSwitchAccessPolicyRequest.

        Choose the Host Mode for the access policy.

        :param host_mode: The host_mode of this CreateNetworkSwitchAccessPolicyRequest.
        :type host_mode: str
        """
        allowed_values = ["Multi-Auth", "Multi-Domain", "Multi-Host", "Single-Host"]  # noqa: E501
        if host_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `host_mode` ({0}), must be one of {1}"
                .format(host_mode, allowed_values)
            )

        self._host_mode = host_mode

    @property
    def increase_access_speed(self):
        """Gets the increase_access_speed of this CreateNetworkSwitchAccessPolicyRequest.

        Enabling this option will make switches execute 802.1X and MAC-bypass authentication simultaneously so that clients authenticate faster. Only required when accessPolicyType is 'Hybrid Authentication.

        :return: The increase_access_speed of this CreateNetworkSwitchAccessPolicyRequest.
        :rtype: bool
        """
        return self._increase_access_speed

    @increase_access_speed.setter
    def increase_access_speed(self, increase_access_speed):
        """Sets the increase_access_speed of this CreateNetworkSwitchAccessPolicyRequest.

        Enabling this option will make switches execute 802.1X and MAC-bypass authentication simultaneously so that clients authenticate faster. Only required when accessPolicyType is 'Hybrid Authentication.

        :param increase_access_speed: The increase_access_speed of this CreateNetworkSwitchAccessPolicyRequest.
        :type increase_access_speed: bool
        """

        self._increase_access_speed = increase_access_speed

    @property
    def name(self):
        """Gets the name of this CreateNetworkSwitchAccessPolicyRequest.

        Name of the access policy

        :return: The name of this CreateNetworkSwitchAccessPolicyRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateNetworkSwitchAccessPolicyRequest.

        Name of the access policy

        :param name: The name of this CreateNetworkSwitchAccessPolicyRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def radius(self):
        """Gets the radius of this CreateNetworkSwitchAccessPolicyRequest.


        :return: The radius of this CreateNetworkSwitchAccessPolicyRequest.
        :rtype: GetNetworkSwitchAccessPolicies200ResponseInnerRadius
        """
        return self._radius

    @radius.setter
    def radius(self, radius):
        """Sets the radius of this CreateNetworkSwitchAccessPolicyRequest.


        :param radius: The radius of this CreateNetworkSwitchAccessPolicyRequest.
        :type radius: GetNetworkSwitchAccessPolicies200ResponseInnerRadius
        """

        self._radius = radius

    @property
    def radius_accounting_enabled(self):
        """Gets the radius_accounting_enabled of this CreateNetworkSwitchAccessPolicyRequest.

        Enable to send start, interim-update and stop messages to a configured RADIUS accounting server for tracking connected clients

        :return: The radius_accounting_enabled of this CreateNetworkSwitchAccessPolicyRequest.
        :rtype: bool
        """
        return self._radius_accounting_enabled

    @radius_accounting_enabled.setter
    def radius_accounting_enabled(self, radius_accounting_enabled):
        """Sets the radius_accounting_enabled of this CreateNetworkSwitchAccessPolicyRequest.

        Enable to send start, interim-update and stop messages to a configured RADIUS accounting server for tracking connected clients

        :param radius_accounting_enabled: The radius_accounting_enabled of this CreateNetworkSwitchAccessPolicyRequest.
        :type radius_accounting_enabled: bool
        """
        if radius_accounting_enabled is None:
            raise ValueError("Invalid value for `radius_accounting_enabled`, must not be `None`")

        self._radius_accounting_enabled = radius_accounting_enabled

    @property
    def radius_accounting_servers(self):
        """Gets the radius_accounting_servers of this CreateNetworkSwitchAccessPolicyRequest.

        List of RADIUS accounting servers to require connecting devices to authenticate against before granting network access

        :return: The radius_accounting_servers of this CreateNetworkSwitchAccessPolicyRequest.
        :rtype: List[CreateNetworkSwitchAccessPolicyRequestRadiusAccountingServersInner]
        """
        return self._radius_accounting_servers

    @radius_accounting_servers.setter
    def radius_accounting_servers(self, radius_accounting_servers):
        """Sets the radius_accounting_servers of this CreateNetworkSwitchAccessPolicyRequest.

        List of RADIUS accounting servers to require connecting devices to authenticate against before granting network access

        :param radius_accounting_servers: The radius_accounting_servers of this CreateNetworkSwitchAccessPolicyRequest.
        :type radius_accounting_servers: List[CreateNetworkSwitchAccessPolicyRequestRadiusAccountingServersInner]
        """

        self._radius_accounting_servers = radius_accounting_servers

    @property
    def radius_coa_support_enabled(self):
        """Gets the radius_coa_support_enabled of this CreateNetworkSwitchAccessPolicyRequest.

        Change of authentication for RADIUS re-authentication and disconnection

        :return: The radius_coa_support_enabled of this CreateNetworkSwitchAccessPolicyRequest.
        :rtype: bool
        """
        return self._radius_coa_support_enabled

    @radius_coa_support_enabled.setter
    def radius_coa_support_enabled(self, radius_coa_support_enabled):
        """Sets the radius_coa_support_enabled of this CreateNetworkSwitchAccessPolicyRequest.

        Change of authentication for RADIUS re-authentication and disconnection

        :param radius_coa_support_enabled: The radius_coa_support_enabled of this CreateNetworkSwitchAccessPolicyRequest.
        :type radius_coa_support_enabled: bool
        """
        if radius_coa_support_enabled is None:
            raise ValueError("Invalid value for `radius_coa_support_enabled`, must not be `None`")

        self._radius_coa_support_enabled = radius_coa_support_enabled

    @property
    def radius_group_attribute(self):
        """Gets the radius_group_attribute of this CreateNetworkSwitchAccessPolicyRequest.

        Acceptable values are `\"\"` for None, or `\"11\"` for Group Policies ACL

        :return: The radius_group_attribute of this CreateNetworkSwitchAccessPolicyRequest.
        :rtype: str
        """
        return self._radius_group_attribute

    @radius_group_attribute.setter
    def radius_group_attribute(self, radius_group_attribute):
        """Sets the radius_group_attribute of this CreateNetworkSwitchAccessPolicyRequest.

        Acceptable values are `\"\"` for None, or `\"11\"` for Group Policies ACL

        :param radius_group_attribute: The radius_group_attribute of this CreateNetworkSwitchAccessPolicyRequest.
        :type radius_group_attribute: str
        """

        self._radius_group_attribute = radius_group_attribute

    @property
    def radius_servers(self):
        """Gets the radius_servers of this CreateNetworkSwitchAccessPolicyRequest.

        List of RADIUS servers to require connecting devices to authenticate against before granting network access

        :return: The radius_servers of this CreateNetworkSwitchAccessPolicyRequest.
        :rtype: List[CreateNetworkSwitchAccessPolicyRequestRadiusServersInner]
        """
        return self._radius_servers

    @radius_servers.setter
    def radius_servers(self, radius_servers):
        """Sets the radius_servers of this CreateNetworkSwitchAccessPolicyRequest.

        List of RADIUS servers to require connecting devices to authenticate against before granting network access

        :param radius_servers: The radius_servers of this CreateNetworkSwitchAccessPolicyRequest.
        :type radius_servers: List[CreateNetworkSwitchAccessPolicyRequestRadiusServersInner]
        """
        if radius_servers is None:
            raise ValueError("Invalid value for `radius_servers`, must not be `None`")

        self._radius_servers = radius_servers

    @property
    def radius_testing_enabled(self):
        """Gets the radius_testing_enabled of this CreateNetworkSwitchAccessPolicyRequest.

        If enabled, Meraki devices will periodically send access-request messages to these RADIUS servers

        :return: The radius_testing_enabled of this CreateNetworkSwitchAccessPolicyRequest.
        :rtype: bool
        """
        return self._radius_testing_enabled

    @radius_testing_enabled.setter
    def radius_testing_enabled(self, radius_testing_enabled):
        """Sets the radius_testing_enabled of this CreateNetworkSwitchAccessPolicyRequest.

        If enabled, Meraki devices will periodically send access-request messages to these RADIUS servers

        :param radius_testing_enabled: The radius_testing_enabled of this CreateNetworkSwitchAccessPolicyRequest.
        :type radius_testing_enabled: bool
        """
        if radius_testing_enabled is None:
            raise ValueError("Invalid value for `radius_testing_enabled`, must not be `None`")

        self._radius_testing_enabled = radius_testing_enabled

    @property
    def url_redirect_walled_garden_enabled(self):
        """Gets the url_redirect_walled_garden_enabled of this CreateNetworkSwitchAccessPolicyRequest.

        Enable to restrict access for clients to a specific set of IP addresses or hostnames prior to authentication

        :return: The url_redirect_walled_garden_enabled of this CreateNetworkSwitchAccessPolicyRequest.
        :rtype: bool
        """
        return self._url_redirect_walled_garden_enabled

    @url_redirect_walled_garden_enabled.setter
    def url_redirect_walled_garden_enabled(self, url_redirect_walled_garden_enabled):
        """Sets the url_redirect_walled_garden_enabled of this CreateNetworkSwitchAccessPolicyRequest.

        Enable to restrict access for clients to a specific set of IP addresses or hostnames prior to authentication

        :param url_redirect_walled_garden_enabled: The url_redirect_walled_garden_enabled of this CreateNetworkSwitchAccessPolicyRequest.
        :type url_redirect_walled_garden_enabled: bool
        """
        if url_redirect_walled_garden_enabled is None:
            raise ValueError("Invalid value for `url_redirect_walled_garden_enabled`, must not be `None`")

        self._url_redirect_walled_garden_enabled = url_redirect_walled_garden_enabled

    @property
    def url_redirect_walled_garden_ranges(self):
        """Gets the url_redirect_walled_garden_ranges of this CreateNetworkSwitchAccessPolicyRequest.

        IP address ranges, in CIDR notation, to restrict access for clients to a specific set of IP addresses or hostnames prior to authentication

        :return: The url_redirect_walled_garden_ranges of this CreateNetworkSwitchAccessPolicyRequest.
        :rtype: List[str]
        """
        return self._url_redirect_walled_garden_ranges

    @url_redirect_walled_garden_ranges.setter
    def url_redirect_walled_garden_ranges(self, url_redirect_walled_garden_ranges):
        """Sets the url_redirect_walled_garden_ranges of this CreateNetworkSwitchAccessPolicyRequest.

        IP address ranges, in CIDR notation, to restrict access for clients to a specific set of IP addresses or hostnames prior to authentication

        :param url_redirect_walled_garden_ranges: The url_redirect_walled_garden_ranges of this CreateNetworkSwitchAccessPolicyRequest.
        :type url_redirect_walled_garden_ranges: List[str]
        """

        self._url_redirect_walled_garden_ranges = url_redirect_walled_garden_ranges

    @property
    def voice_vlan_clients(self):
        """Gets the voice_vlan_clients of this CreateNetworkSwitchAccessPolicyRequest.

        CDP/LLDP capable voice clients will be able to use this VLAN. Automatically true when hostMode is 'Multi-Domain'.

        :return: The voice_vlan_clients of this CreateNetworkSwitchAccessPolicyRequest.
        :rtype: bool
        """
        return self._voice_vlan_clients

    @voice_vlan_clients.setter
    def voice_vlan_clients(self, voice_vlan_clients):
        """Sets the voice_vlan_clients of this CreateNetworkSwitchAccessPolicyRequest.

        CDP/LLDP capable voice clients will be able to use this VLAN. Automatically true when hostMode is 'Multi-Domain'.

        :param voice_vlan_clients: The voice_vlan_clients of this CreateNetworkSwitchAccessPolicyRequest.
        :type voice_vlan_clients: bool
        """

        self._voice_vlan_clients = voice_vlan_clients
