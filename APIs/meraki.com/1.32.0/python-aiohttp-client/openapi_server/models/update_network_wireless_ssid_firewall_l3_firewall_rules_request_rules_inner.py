# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestRulesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comment: str=None, dest_cidr: str=None, dest_port: str=None, policy: str=None, protocol: str=None):
        """UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestRulesInner - a model defined in OpenAPI

        :param comment: The comment of this UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestRulesInner.
        :param dest_cidr: The dest_cidr of this UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestRulesInner.
        :param dest_port: The dest_port of this UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestRulesInner.
        :param policy: The policy of this UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestRulesInner.
        :param protocol: The protocol of this UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestRulesInner.
        """
        self.openapi_types = {
            'comment': str,
            'dest_cidr': str,
            'dest_port': str,
            'policy': str,
            'protocol': str
        }

        self.attribute_map = {
            'comment': 'comment',
            'dest_cidr': 'destCidr',
            'dest_port': 'destPort',
            'policy': 'policy',
            'protocol': 'protocol'
        }

        self._comment = comment
        self._dest_cidr = dest_cidr
        self._dest_port = dest_port
        self._policy = policy
        self._protocol = protocol

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestRulesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateNetworkWirelessSsidFirewallL3FirewallRules_request_rules_inner of this UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestRulesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comment(self):
        """Gets the comment of this UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestRulesInner.

        Description of the rule (optional)

        :return: The comment of this UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestRulesInner.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestRulesInner.

        Description of the rule (optional)

        :param comment: The comment of this UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestRulesInner.
        :type comment: str
        """

        self._comment = comment

    @property
    def dest_cidr(self):
        """Gets the dest_cidr of this UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestRulesInner.

        Comma-separated list of destination IP address(es) (in IP or CIDR notation), fully-qualified domain names (FQDN) or 'any'

        :return: The dest_cidr of this UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestRulesInner.
        :rtype: str
        """
        return self._dest_cidr

    @dest_cidr.setter
    def dest_cidr(self, dest_cidr):
        """Sets the dest_cidr of this UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestRulesInner.

        Comma-separated list of destination IP address(es) (in IP or CIDR notation), fully-qualified domain names (FQDN) or 'any'

        :param dest_cidr: The dest_cidr of this UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestRulesInner.
        :type dest_cidr: str
        """
        if dest_cidr is None:
            raise ValueError("Invalid value for `dest_cidr`, must not be `None`")

        self._dest_cidr = dest_cidr

    @property
    def dest_port(self):
        """Gets the dest_port of this UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestRulesInner.

        Comma-separated list of destination port(s) (integer in the range 1-65535), or 'any'

        :return: The dest_port of this UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestRulesInner.
        :rtype: str
        """
        return self._dest_port

    @dest_port.setter
    def dest_port(self, dest_port):
        """Sets the dest_port of this UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestRulesInner.

        Comma-separated list of destination port(s) (integer in the range 1-65535), or 'any'

        :param dest_port: The dest_port of this UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestRulesInner.
        :type dest_port: str
        """

        self._dest_port = dest_port

    @property
    def policy(self):
        """Gets the policy of this UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestRulesInner.

        'allow' or 'deny' traffic specified by this rule

        :return: The policy of this UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestRulesInner.
        :rtype: str
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestRulesInner.

        'allow' or 'deny' traffic specified by this rule

        :param policy: The policy of this UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestRulesInner.
        :type policy: str
        """
        allowed_values = ["allow", "deny"]  # noqa: E501
        if policy not in allowed_values:
            raise ValueError(
                "Invalid value for `policy` ({0}), must be one of {1}"
                .format(policy, allowed_values)
            )

        self._policy = policy

    @property
    def protocol(self):
        """Gets the protocol of this UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestRulesInner.

        The type of protocol (must be 'tcp', 'udp', 'icmp', 'icmp6' or 'any')

        :return: The protocol of this UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestRulesInner.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestRulesInner.

        The type of protocol (must be 'tcp', 'udp', 'icmp', 'icmp6' or 'any')

        :param protocol: The protocol of this UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestRulesInner.
        :type protocol: str
        """
        allowed_values = ["any", "icmp", "icmp6", "tcp", "udp"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"
                .format(protocol, allowed_values)
            )

        self._protocol = protocol
