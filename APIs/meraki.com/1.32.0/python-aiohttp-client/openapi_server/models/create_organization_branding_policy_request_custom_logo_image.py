# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateOrganizationBrandingPolicyRequestCustomLogoImage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contents: str=None, format: str=None):
        """CreateOrganizationBrandingPolicyRequestCustomLogoImage - a model defined in OpenAPI

        :param contents: The contents of this CreateOrganizationBrandingPolicyRequestCustomLogoImage.
        :param format: The format of this CreateOrganizationBrandingPolicyRequestCustomLogoImage.
        """
        self.openapi_types = {
            'contents': str,
            'format': str
        }

        self.attribute_map = {
            'contents': 'contents',
            'format': 'format'
        }

        self._contents = contents
        self._format = format

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateOrganizationBrandingPolicyRequestCustomLogoImage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The createOrganizationBrandingPolicy_request_customLogo_image of this CreateOrganizationBrandingPolicyRequestCustomLogoImage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contents(self):
        """Gets the contents of this CreateOrganizationBrandingPolicyRequestCustomLogoImage.

        The file contents (a base 64 encoded string) of your new logo.

        :return: The contents of this CreateOrganizationBrandingPolicyRequestCustomLogoImage.
        :rtype: str
        """
        return self._contents

    @contents.setter
    def contents(self, contents):
        """Sets the contents of this CreateOrganizationBrandingPolicyRequestCustomLogoImage.

        The file contents (a base 64 encoded string) of your new logo.

        :param contents: The contents of this CreateOrganizationBrandingPolicyRequestCustomLogoImage.
        :type contents: str
        """

        self._contents = contents

    @property
    def format(self):
        """Gets the format of this CreateOrganizationBrandingPolicyRequestCustomLogoImage.

        The format of the encoded contents.  Supported formats are 'png', 'gif', and jpg'.

        :return: The format of this CreateOrganizationBrandingPolicyRequestCustomLogoImage.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this CreateOrganizationBrandingPolicyRequestCustomLogoImage.

        The format of the encoded contents.  Supported formats are 'png', 'gif', and jpg'.

        :param format: The format of this CreateOrganizationBrandingPolicyRequestCustomLogoImage.
        :type format: str
        """
        allowed_values = ["gif", "jpg", "png"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"
                .format(format, allowed_values)
            )

        self._format = format
