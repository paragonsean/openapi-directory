# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_device_cellular_sims_request_sims_inner_apns_inner import UpdateDeviceCellularSimsRequestSimsInnerApnsInner
from openapi_server import util


class UpdateDeviceCellularSimsRequestSimsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, apns: List[UpdateDeviceCellularSimsRequestSimsInnerApnsInner]=[], is_primary: bool=False, slot: str=None):
        """UpdateDeviceCellularSimsRequestSimsInner - a model defined in OpenAPI

        :param apns: The apns of this UpdateDeviceCellularSimsRequestSimsInner.
        :param is_primary: The is_primary of this UpdateDeviceCellularSimsRequestSimsInner.
        :param slot: The slot of this UpdateDeviceCellularSimsRequestSimsInner.
        """
        self.openapi_types = {
            'apns': List[UpdateDeviceCellularSimsRequestSimsInnerApnsInner],
            'is_primary': bool,
            'slot': str
        }

        self.attribute_map = {
            'apns': 'apns',
            'is_primary': 'isPrimary',
            'slot': 'slot'
        }

        self._apns = apns
        self._is_primary = is_primary
        self._slot = slot

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateDeviceCellularSimsRequestSimsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateDeviceCellularSims_request_sims_inner of this UpdateDeviceCellularSimsRequestSimsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def apns(self):
        """Gets the apns of this UpdateDeviceCellularSimsRequestSimsInner.

        APN configurations. If empty, the default APN will be used.

        :return: The apns of this UpdateDeviceCellularSimsRequestSimsInner.
        :rtype: List[UpdateDeviceCellularSimsRequestSimsInnerApnsInner]
        """
        return self._apns

    @apns.setter
    def apns(self, apns):
        """Sets the apns of this UpdateDeviceCellularSimsRequestSimsInner.

        APN configurations. If empty, the default APN will be used.

        :param apns: The apns of this UpdateDeviceCellularSimsRequestSimsInner.
        :type apns: List[UpdateDeviceCellularSimsRequestSimsInnerApnsInner]
        """

        self._apns = apns

    @property
    def is_primary(self):
        """Gets the is_primary of this UpdateDeviceCellularSimsRequestSimsInner.

        If true, this SIM is used for boot. Must be true on single-sim devices.

        :return: The is_primary of this UpdateDeviceCellularSimsRequestSimsInner.
        :rtype: bool
        """
        return self._is_primary

    @is_primary.setter
    def is_primary(self, is_primary):
        """Sets the is_primary of this UpdateDeviceCellularSimsRequestSimsInner.

        If true, this SIM is used for boot. Must be true on single-sim devices.

        :param is_primary: The is_primary of this UpdateDeviceCellularSimsRequestSimsInner.
        :type is_primary: bool
        """

        self._is_primary = is_primary

    @property
    def slot(self):
        """Gets the slot of this UpdateDeviceCellularSimsRequestSimsInner.

        SIM slot being configured. Must be 'sim1' on single-sim devices.

        :return: The slot of this UpdateDeviceCellularSimsRequestSimsInner.
        :rtype: str
        """
        return self._slot

    @slot.setter
    def slot(self, slot):
        """Sets the slot of this UpdateDeviceCellularSimsRequestSimsInner.

        SIM slot being configured. Must be 'sim1' on single-sim devices.

        :param slot: The slot of this UpdateDeviceCellularSimsRequestSimsInner.
        :type slot: str
        """
        allowed_values = ["sim1", "sim2"]  # noqa: E501
        if slot not in allowed_values:
            raise ValueError(
                "Invalid value for `slot` ({0}), must be one of {1}"
                .format(slot, allowed_values)
            )

        self._slot = slot
