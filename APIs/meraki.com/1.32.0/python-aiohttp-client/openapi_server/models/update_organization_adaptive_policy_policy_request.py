# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_organization_adaptive_policy_policy_request_acls_inner import CreateOrganizationAdaptivePolicyPolicyRequestAclsInner
from openapi_server.models.create_organization_adaptive_policy_policy_request_destination_group import CreateOrganizationAdaptivePolicyPolicyRequestDestinationGroup
from openapi_server.models.create_organization_adaptive_policy_policy_request_source_group import CreateOrganizationAdaptivePolicyPolicyRequestSourceGroup
from openapi_server import util


class UpdateOrganizationAdaptivePolicyPolicyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acls: List[CreateOrganizationAdaptivePolicyPolicyRequestAclsInner]=None, destination_group: CreateOrganizationAdaptivePolicyPolicyRequestDestinationGroup=None, last_entry_rule: str=None, source_group: CreateOrganizationAdaptivePolicyPolicyRequestSourceGroup=None):
        """UpdateOrganizationAdaptivePolicyPolicyRequest - a model defined in OpenAPI

        :param acls: The acls of this UpdateOrganizationAdaptivePolicyPolicyRequest.
        :param destination_group: The destination_group of this UpdateOrganizationAdaptivePolicyPolicyRequest.
        :param last_entry_rule: The last_entry_rule of this UpdateOrganizationAdaptivePolicyPolicyRequest.
        :param source_group: The source_group of this UpdateOrganizationAdaptivePolicyPolicyRequest.
        """
        self.openapi_types = {
            'acls': List[CreateOrganizationAdaptivePolicyPolicyRequestAclsInner],
            'destination_group': CreateOrganizationAdaptivePolicyPolicyRequestDestinationGroup,
            'last_entry_rule': str,
            'source_group': CreateOrganizationAdaptivePolicyPolicyRequestSourceGroup
        }

        self.attribute_map = {
            'acls': 'acls',
            'destination_group': 'destinationGroup',
            'last_entry_rule': 'lastEntryRule',
            'source_group': 'sourceGroup'
        }

        self._acls = acls
        self._destination_group = destination_group
        self._last_entry_rule = last_entry_rule
        self._source_group = source_group

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateOrganizationAdaptivePolicyPolicyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateOrganizationAdaptivePolicyPolicy_request of this UpdateOrganizationAdaptivePolicyPolicyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acls(self):
        """Gets the acls of this UpdateOrganizationAdaptivePolicyPolicyRequest.

        An ordered array of adaptive policy ACLs (each requires one unique attribute) that apply to this policy

        :return: The acls of this UpdateOrganizationAdaptivePolicyPolicyRequest.
        :rtype: List[CreateOrganizationAdaptivePolicyPolicyRequestAclsInner]
        """
        return self._acls

    @acls.setter
    def acls(self, acls):
        """Sets the acls of this UpdateOrganizationAdaptivePolicyPolicyRequest.

        An ordered array of adaptive policy ACLs (each requires one unique attribute) that apply to this policy

        :param acls: The acls of this UpdateOrganizationAdaptivePolicyPolicyRequest.
        :type acls: List[CreateOrganizationAdaptivePolicyPolicyRequestAclsInner]
        """

        self._acls = acls

    @property
    def destination_group(self):
        """Gets the destination_group of this UpdateOrganizationAdaptivePolicyPolicyRequest.


        :return: The destination_group of this UpdateOrganizationAdaptivePolicyPolicyRequest.
        :rtype: CreateOrganizationAdaptivePolicyPolicyRequestDestinationGroup
        """
        return self._destination_group

    @destination_group.setter
    def destination_group(self, destination_group):
        """Sets the destination_group of this UpdateOrganizationAdaptivePolicyPolicyRequest.


        :param destination_group: The destination_group of this UpdateOrganizationAdaptivePolicyPolicyRequest.
        :type destination_group: CreateOrganizationAdaptivePolicyPolicyRequestDestinationGroup
        """

        self._destination_group = destination_group

    @property
    def last_entry_rule(self):
        """Gets the last_entry_rule of this UpdateOrganizationAdaptivePolicyPolicyRequest.

        The rule to apply if there is no matching ACL

        :return: The last_entry_rule of this UpdateOrganizationAdaptivePolicyPolicyRequest.
        :rtype: str
        """
        return self._last_entry_rule

    @last_entry_rule.setter
    def last_entry_rule(self, last_entry_rule):
        """Sets the last_entry_rule of this UpdateOrganizationAdaptivePolicyPolicyRequest.

        The rule to apply if there is no matching ACL

        :param last_entry_rule: The last_entry_rule of this UpdateOrganizationAdaptivePolicyPolicyRequest.
        :type last_entry_rule: str
        """
        allowed_values = ["allow", "default", "deny"]  # noqa: E501
        if last_entry_rule not in allowed_values:
            raise ValueError(
                "Invalid value for `last_entry_rule` ({0}), must be one of {1}"
                .format(last_entry_rule, allowed_values)
            )

        self._last_entry_rule = last_entry_rule

    @property
    def source_group(self):
        """Gets the source_group of this UpdateOrganizationAdaptivePolicyPolicyRequest.


        :return: The source_group of this UpdateOrganizationAdaptivePolicyPolicyRequest.
        :rtype: CreateOrganizationAdaptivePolicyPolicyRequestSourceGroup
        """
        return self._source_group

    @source_group.setter
    def source_group(self, source_group):
        """Sets the source_group of this UpdateOrganizationAdaptivePolicyPolicyRequest.


        :param source_group: The source_group of this UpdateOrganizationAdaptivePolicyPolicyRequest.
        :type source_group: CreateOrganizationAdaptivePolicyPolicyRequestSourceGroup
        """

        self._source_group = source_group
