# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_network_sensor_alerts_profiles200_response_inner_conditions_inner_threshold import GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThreshold
from openapi_server import util


class GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, direction: str=None, duration: int=0, metric: str=None, threshold: GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThreshold=None):
        """GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner - a model defined in OpenAPI

        :param direction: The direction of this GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner.
        :param duration: The duration of this GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner.
        :param metric: The metric of this GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner.
        :param threshold: The threshold of this GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner.
        """
        self.openapi_types = {
            'direction': str,
            'duration': int,
            'metric': str,
            'threshold': GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThreshold
        }

        self.attribute_map = {
            'direction': 'direction',
            'duration': 'duration',
            'metric': 'metric',
            'threshold': 'threshold'
        }

        self._direction = direction
        self._duration = duration
        self._metric = metric
        self._threshold = threshold

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getNetworkSensorAlertsProfiles_200_response_inner_conditions_inner of this GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def direction(self):
        """Gets the direction of this GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner.

        If 'above', an alert will be sent when a sensor reads above the threshold. If 'below', an alert will be sent when a sensor reads below the threshold. Only applicable for temperature and humidity thresholds.

        :return: The direction of this GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner.
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner.

        If 'above', an alert will be sent when a sensor reads above the threshold. If 'below', an alert will be sent when a sensor reads below the threshold. Only applicable for temperature and humidity thresholds.

        :param direction: The direction of this GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner.
        :type direction: str
        """
        allowed_values = ["above", "below"]  # noqa: E501
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"
                .format(direction, allowed_values)
            )

        self._direction = direction

    @property
    def duration(self):
        """Gets the duration of this GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner.

        Length of time in seconds that the triggering state must persist before an alert is sent. Available options are 0 seconds, 1 minute, 2 minutes, 3 minutes, 4 minutes, 5 minutes, 10 minutes, 15 minutes, 30 minutes, and 1 hour. Default is 0.

        :return: The duration of this GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner.

        Length of time in seconds that the triggering state must persist before an alert is sent. Available options are 0 seconds, 1 minute, 2 minutes, 3 minutes, 4 minutes, 5 minutes, 10 minutes, 15 minutes, 30 minutes, and 1 hour. Default is 0.

        :param duration: The duration of this GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner.
        :type duration: int
        """
        allowed_values = [0, 60, 120, 180, 240, 300, 600, 900, 1800, 3600]  # noqa: E501
        if duration not in allowed_values:
            raise ValueError(
                "Invalid value for `duration` ({0}), must be one of {1}"
                .format(duration, allowed_values)
            )

        self._duration = duration

    @property
    def metric(self):
        """Gets the metric of this GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner.

        The type of sensor metric that will be monitored for changes. Available metrics are door, humidity, indoorAirQuality, noise, pm25, temperature, tvoc, and water.

        :return: The metric of this GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner.
        :rtype: str
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner.

        The type of sensor metric that will be monitored for changes. Available metrics are door, humidity, indoorAirQuality, noise, pm25, temperature, tvoc, and water.

        :param metric: The metric of this GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner.
        :type metric: str
        """
        if metric is None:
            raise ValueError("Invalid value for `metric`, must not be `None`")

        self._metric = metric

    @property
    def threshold(self):
        """Gets the threshold of this GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner.


        :return: The threshold of this GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner.
        :rtype: GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThreshold
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """Sets the threshold of this GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner.


        :param threshold: The threshold of this GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInner.
        :type threshold: GetNetworkSensorAlertsProfiles200ResponseInnerConditionsInnerThreshold
        """
        if threshold is None:
            raise ValueError("Invalid value for `threshold`, must not be `None`")

        self._threshold = threshold
