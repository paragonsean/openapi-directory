/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 0.0.0-streaming
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UpdateOrganizationThirdPartyVPNPeersRequestPeersInnerIpsecPolicies model module.
 * @module model/UpdateOrganizationThirdPartyVPNPeersRequestPeersInnerIpsecPolicies
 * @version 0.0.0-streaming
 */
class UpdateOrganizationThirdPartyVPNPeersRequestPeersInnerIpsecPolicies {
    /**
     * Constructs a new <code>UpdateOrganizationThirdPartyVPNPeersRequestPeersInnerIpsecPolicies</code>.
     * Custom IPSec policies for the VPN peer. If not included and a preset has not been chosen, the default preset for IPSec policies will be used.
     * @alias module:model/UpdateOrganizationThirdPartyVPNPeersRequestPeersInnerIpsecPolicies
     */
    constructor() { 
        
        UpdateOrganizationThirdPartyVPNPeersRequestPeersInnerIpsecPolicies.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateOrganizationThirdPartyVPNPeersRequestPeersInnerIpsecPolicies</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateOrganizationThirdPartyVPNPeersRequestPeersInnerIpsecPolicies} obj Optional instance to populate.
     * @return {module:model/UpdateOrganizationThirdPartyVPNPeersRequestPeersInnerIpsecPolicies} The populated <code>UpdateOrganizationThirdPartyVPNPeersRequestPeersInnerIpsecPolicies</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateOrganizationThirdPartyVPNPeersRequestPeersInnerIpsecPolicies();

            if (data.hasOwnProperty('childAuthAlgo')) {
                obj['childAuthAlgo'] = ApiClient.convertToType(data['childAuthAlgo'], ['String']);
            }
            if (data.hasOwnProperty('childCipherAlgo')) {
                obj['childCipherAlgo'] = ApiClient.convertToType(data['childCipherAlgo'], ['String']);
            }
            if (data.hasOwnProperty('childLifetime')) {
                obj['childLifetime'] = ApiClient.convertToType(data['childLifetime'], 'Number');
            }
            if (data.hasOwnProperty('childPfsGroup')) {
                obj['childPfsGroup'] = ApiClient.convertToType(data['childPfsGroup'], ['String']);
            }
            if (data.hasOwnProperty('ikeAuthAlgo')) {
                obj['ikeAuthAlgo'] = ApiClient.convertToType(data['ikeAuthAlgo'], ['String']);
            }
            if (data.hasOwnProperty('ikeCipherAlgo')) {
                obj['ikeCipherAlgo'] = ApiClient.convertToType(data['ikeCipherAlgo'], ['String']);
            }
            if (data.hasOwnProperty('ikeDiffieHellmanGroup')) {
                obj['ikeDiffieHellmanGroup'] = ApiClient.convertToType(data['ikeDiffieHellmanGroup'], ['String']);
            }
            if (data.hasOwnProperty('ikeLifetime')) {
                obj['ikeLifetime'] = ApiClient.convertToType(data['ikeLifetime'], 'Number');
            }
            if (data.hasOwnProperty('ikePrfAlgo')) {
                obj['ikePrfAlgo'] = ApiClient.convertToType(data['ikePrfAlgo'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateOrganizationThirdPartyVPNPeersRequestPeersInnerIpsecPolicies</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateOrganizationThirdPartyVPNPeersRequestPeersInnerIpsecPolicies</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['childAuthAlgo'])) {
            throw new Error("Expected the field `childAuthAlgo` to be an array in the JSON data but got " + data['childAuthAlgo']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['childCipherAlgo'])) {
            throw new Error("Expected the field `childCipherAlgo` to be an array in the JSON data but got " + data['childCipherAlgo']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['childPfsGroup'])) {
            throw new Error("Expected the field `childPfsGroup` to be an array in the JSON data but got " + data['childPfsGroup']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ikeAuthAlgo'])) {
            throw new Error("Expected the field `ikeAuthAlgo` to be an array in the JSON data but got " + data['ikeAuthAlgo']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ikeCipherAlgo'])) {
            throw new Error("Expected the field `ikeCipherAlgo` to be an array in the JSON data but got " + data['ikeCipherAlgo']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ikeDiffieHellmanGroup'])) {
            throw new Error("Expected the field `ikeDiffieHellmanGroup` to be an array in the JSON data but got " + data['ikeDiffieHellmanGroup']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ikePrfAlgo'])) {
            throw new Error("Expected the field `ikePrfAlgo` to be an array in the JSON data but got " + data['ikePrfAlgo']);
        }

        return true;
    }


}



/**
 * This is the authentication algorithms to be used in Phase 2. The value should be an array with one of the following algorithms: 'sha256', 'sha1', 'md5'
 * @member {Array.<String>} childAuthAlgo
 */
UpdateOrganizationThirdPartyVPNPeersRequestPeersInnerIpsecPolicies.prototype['childAuthAlgo'] = undefined;

/**
 * This is the cipher algorithms to be used in Phase 2. The value should be an array with one or more of the following algorithms: 'aes256', 'aes192', 'aes128', 'tripledes', 'des', 'null'
 * @member {Array.<String>} childCipherAlgo
 */
UpdateOrganizationThirdPartyVPNPeersRequestPeersInnerIpsecPolicies.prototype['childCipherAlgo'] = undefined;

/**
 * The lifetime of the Phase 2 SA in seconds.
 * @member {Number} childLifetime
 */
UpdateOrganizationThirdPartyVPNPeersRequestPeersInnerIpsecPolicies.prototype['childLifetime'] = undefined;

/**
 * This is the Diffie-Hellman group to be used for Perfect Forward Secrecy in Phase 2. The value should be an array with one of the following values: 'disabled','group14', 'group5', 'group2', 'group1'
 * @member {Array.<String>} childPfsGroup
 */
UpdateOrganizationThirdPartyVPNPeersRequestPeersInnerIpsecPolicies.prototype['childPfsGroup'] = undefined;

/**
 * This is the authentication algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: 'sha256', 'sha1', 'md5'
 * @member {Array.<String>} ikeAuthAlgo
 */
UpdateOrganizationThirdPartyVPNPeersRequestPeersInnerIpsecPolicies.prototype['ikeAuthAlgo'] = undefined;

/**
 * This is the cipher algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: 'aes256', 'aes192', 'aes128', 'tripledes', 'des'
 * @member {Array.<String>} ikeCipherAlgo
 */
UpdateOrganizationThirdPartyVPNPeersRequestPeersInnerIpsecPolicies.prototype['ikeCipherAlgo'] = undefined;

/**
 * This is the Diffie-Hellman group to be used in Phase 1. The value should be an array with one of the following algorithms: 'group14', 'group5', 'group2', 'group1'
 * @member {Array.<String>} ikeDiffieHellmanGroup
 */
UpdateOrganizationThirdPartyVPNPeersRequestPeersInnerIpsecPolicies.prototype['ikeDiffieHellmanGroup'] = undefined;

/**
 * The lifetime of the Phase 1 SA in seconds.
 * @member {Number} ikeLifetime
 */
UpdateOrganizationThirdPartyVPNPeersRequestPeersInnerIpsecPolicies.prototype['ikeLifetime'] = undefined;

/**
 * [optional] This is the pseudo-random function to be used in IKE_SA. The value should be an array with one of the following algorithms: 'prfsha256', 'prfsha1', 'prfmd5', 'default'. The 'default' option can be used to default to the Authentication algorithm.
 * @member {Array.<module:model/UpdateOrganizationThirdPartyVPNPeersRequestPeersInnerIpsecPolicies.IkePrfAlgoEnum>} ikePrfAlgo
 */
UpdateOrganizationThirdPartyVPNPeersRequestPeersInnerIpsecPolicies.prototype['ikePrfAlgo'] = undefined;





/**
 * Allowed values for the <code>ikePrfAlgo</code> property.
 * @enum {String}
 * @readonly
 */
UpdateOrganizationThirdPartyVPNPeersRequestPeersInnerIpsecPolicies['IkePrfAlgoEnum'] = {

    /**
     * value: "default"
     * @const
     */
    "default": "default",

    /**
     * value: "prfmd5"
     * @const
     */
    "prfmd5": "prfmd5",

    /**
     * value: "prfsha1"
     * @const
     */
    "prfsha1": "prfsha1",

    /**
     * value: "prfsha256"
     * @const
     */
    "prfsha256": "prfsha256"
};



export default UpdateOrganizationThirdPartyVPNPeersRequestPeersInnerIpsecPolicies;

