/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 0.0.0-streaming
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ClaimIntoOrganizationRequestLicensesInner model module.
 * @module model/ClaimIntoOrganizationRequestLicensesInner
 * @version 0.0.0-streaming
 */
class ClaimIntoOrganizationRequestLicensesInner {
    /**
     * Constructs a new <code>ClaimIntoOrganizationRequestLicensesInner</code>.
     * @alias module:model/ClaimIntoOrganizationRequestLicensesInner
     * @param key {String} The key of the license
     */
    constructor(key) { 
        
        ClaimIntoOrganizationRequestLicensesInner.initialize(this, key);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, key) { 
        obj['key'] = key;
    }

    /**
     * Constructs a <code>ClaimIntoOrganizationRequestLicensesInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ClaimIntoOrganizationRequestLicensesInner} obj Optional instance to populate.
     * @return {module:model/ClaimIntoOrganizationRequestLicensesInner} The populated <code>ClaimIntoOrganizationRequestLicensesInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ClaimIntoOrganizationRequestLicensesInner();

            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('mode')) {
                obj['mode'] = ApiClient.convertToType(data['mode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ClaimIntoOrganizationRequestLicensesInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ClaimIntoOrganizationRequestLicensesInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ClaimIntoOrganizationRequestLicensesInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // ensure the json data is a string
        if (data['mode'] && !(typeof data['mode'] === 'string' || data['mode'] instanceof String)) {
            throw new Error("Expected the field `mode` to be a primitive type in the JSON string but got " + data['mode']);
        }

        return true;
    }


}

ClaimIntoOrganizationRequestLicensesInner.RequiredProperties = ["key"];

/**
 * The key of the license
 * @member {String} key
 */
ClaimIntoOrganizationRequestLicensesInner.prototype['key'] = undefined;

/**
 * Either 'renew' or 'addDevices'. 'addDevices' will increase the license limit, while 'renew' will extend the amount of time until expiration. Defaults to 'addDevices'. All licenses must be claimed with the same mode, and at most one renewal can be claimed at a time. This parameter is legacy and does not apply to organizations with per-device licensing enabled.
 * @member {module:model/ClaimIntoOrganizationRequestLicensesInner.ModeEnum} mode
 */
ClaimIntoOrganizationRequestLicensesInner.prototype['mode'] = undefined;





/**
 * Allowed values for the <code>mode</code> property.
 * @enum {String}
 * @readonly
 */
ClaimIntoOrganizationRequestLicensesInner['ModeEnum'] = {

    /**
     * value: "addDevices"
     * @const
     */
    "addDevices": "addDevices",

    /**
     * value: "renew"
     * @const
     */
    "renew": "renew"
};



export default ClaimIntoOrganizationRequestLicensesInner;

