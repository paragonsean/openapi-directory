/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 0.0.0-streaming
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UpdateNetworkDeviceRequest model module.
 * @module model/UpdateNetworkDeviceRequest
 * @version 0.0.0-streaming
 */
class UpdateNetworkDeviceRequest {
    /**
     * Constructs a new <code>UpdateNetworkDeviceRequest</code>.
     * @alias module:model/UpdateNetworkDeviceRequest
     */
    constructor() { 
        
        UpdateNetworkDeviceRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateNetworkDeviceRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateNetworkDeviceRequest} obj Optional instance to populate.
     * @return {module:model/UpdateNetworkDeviceRequest} The populated <code>UpdateNetworkDeviceRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateNetworkDeviceRequest();

            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('floorPlanId')) {
                obj['floorPlanId'] = ApiClient.convertToType(data['floorPlanId'], 'String');
            }
            if (data.hasOwnProperty('lat')) {
                obj['lat'] = ApiClient.convertToType(data['lat'], 'Number');
            }
            if (data.hasOwnProperty('lng')) {
                obj['lng'] = ApiClient.convertToType(data['lng'], 'Number');
            }
            if (data.hasOwnProperty('moveMapMarker')) {
                obj['moveMapMarker'] = ApiClient.convertToType(data['moveMapMarker'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('switchProfileId')) {
                obj['switchProfileId'] = ApiClient.convertToType(data['switchProfileId'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateNetworkDeviceRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateNetworkDeviceRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // ensure the json data is a string
        if (data['floorPlanId'] && !(typeof data['floorPlanId'] === 'string' || data['floorPlanId'] instanceof String)) {
            throw new Error("Expected the field `floorPlanId` to be a primitive type in the JSON string but got " + data['floorPlanId']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        // ensure the json data is a string
        if (data['switchProfileId'] && !(typeof data['switchProfileId'] === 'string' || data['switchProfileId'] instanceof String)) {
            throw new Error("Expected the field `switchProfileId` to be a primitive type in the JSON string but got " + data['switchProfileId']);
        }
        // ensure the json data is a string
        if (data['tags'] && !(typeof data['tags'] === 'string' || data['tags'] instanceof String)) {
            throw new Error("Expected the field `tags` to be a primitive type in the JSON string but got " + data['tags']);
        }

        return true;
    }


}



/**
 * The address of a device
 * @member {String} address
 */
UpdateNetworkDeviceRequest.prototype['address'] = undefined;

/**
 * The floor plan to associate to this device. null disassociates the device from the floorplan.
 * @member {String} floorPlanId
 */
UpdateNetworkDeviceRequest.prototype['floorPlanId'] = undefined;

/**
 * The latitude of a device
 * @member {Number} lat
 */
UpdateNetworkDeviceRequest.prototype['lat'] = undefined;

/**
 * The longitude of a device
 * @member {Number} lng
 */
UpdateNetworkDeviceRequest.prototype['lng'] = undefined;

/**
 * Whether or not to set the latitude and longitude of a device based on the new address. Only applies when lat and lng are not specified.
 * @member {Boolean} moveMapMarker
 */
UpdateNetworkDeviceRequest.prototype['moveMapMarker'] = undefined;

/**
 * The name of a device
 * @member {String} name
 */
UpdateNetworkDeviceRequest.prototype['name'] = undefined;

/**
 * The notes for the device. String. Limited to 255 characters.
 * @member {String} notes
 */
UpdateNetworkDeviceRequest.prototype['notes'] = undefined;

/**
 * The ID of a switch profile to bind to the device (for available switch profiles, see the 'Switch Profiles' endpoint). Use null to unbind the switch device from the current profile. For a device to be bindable to a switch profile, it must (1) be a switch, and (2) belong to a network that is bound to a configuration template.
 * @member {String} switchProfileId
 */
UpdateNetworkDeviceRequest.prototype['switchProfileId'] = undefined;

/**
 * The tags of a device
 * @member {String} tags
 */
UpdateNetworkDeviceRequest.prototype['tags'] = undefined;






export default UpdateNetworkDeviceRequest;

