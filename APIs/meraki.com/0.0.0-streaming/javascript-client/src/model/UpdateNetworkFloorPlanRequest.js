/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 0.0.0-streaming
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateNetworkFloorPlanRequestBottomLeftCorner from './CreateNetworkFloorPlanRequestBottomLeftCorner';
import CreateNetworkFloorPlanRequestBottomRightCorner from './CreateNetworkFloorPlanRequestBottomRightCorner';
import CreateNetworkFloorPlanRequestTopLeftCorner from './CreateNetworkFloorPlanRequestTopLeftCorner';
import CreateNetworkFloorPlanRequestTopRightCorner from './CreateNetworkFloorPlanRequestTopRightCorner';
import UpdateNetworkFloorPlanRequestCenter from './UpdateNetworkFloorPlanRequestCenter';

/**
 * The UpdateNetworkFloorPlanRequest model module.
 * @module model/UpdateNetworkFloorPlanRequest
 * @version 0.0.0-streaming
 */
class UpdateNetworkFloorPlanRequest {
    /**
     * Constructs a new <code>UpdateNetworkFloorPlanRequest</code>.
     * @alias module:model/UpdateNetworkFloorPlanRequest
     */
    constructor() { 
        
        UpdateNetworkFloorPlanRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateNetworkFloorPlanRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateNetworkFloorPlanRequest} obj Optional instance to populate.
     * @return {module:model/UpdateNetworkFloorPlanRequest} The populated <code>UpdateNetworkFloorPlanRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateNetworkFloorPlanRequest();

            if (data.hasOwnProperty('bottomLeftCorner')) {
                obj['bottomLeftCorner'] = CreateNetworkFloorPlanRequestBottomLeftCorner.constructFromObject(data['bottomLeftCorner']);
            }
            if (data.hasOwnProperty('bottomRightCorner')) {
                obj['bottomRightCorner'] = CreateNetworkFloorPlanRequestBottomRightCorner.constructFromObject(data['bottomRightCorner']);
            }
            if (data.hasOwnProperty('center')) {
                obj['center'] = UpdateNetworkFloorPlanRequestCenter.constructFromObject(data['center']);
            }
            if (data.hasOwnProperty('imageContents')) {
                obj['imageContents'] = ApiClient.convertToType(data['imageContents'], 'Blob');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('topLeftCorner')) {
                obj['topLeftCorner'] = CreateNetworkFloorPlanRequestTopLeftCorner.constructFromObject(data['topLeftCorner']);
            }
            if (data.hasOwnProperty('topRightCorner')) {
                obj['topRightCorner'] = CreateNetworkFloorPlanRequestTopRightCorner.constructFromObject(data['topRightCorner']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateNetworkFloorPlanRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateNetworkFloorPlanRequest</code>.
     */
    static validateJSON(data) {
        // validate the optional field `bottomLeftCorner`
        if (data['bottomLeftCorner']) { // data not null
          CreateNetworkFloorPlanRequestBottomLeftCorner.validateJSON(data['bottomLeftCorner']);
        }
        // validate the optional field `bottomRightCorner`
        if (data['bottomRightCorner']) { // data not null
          CreateNetworkFloorPlanRequestBottomRightCorner.validateJSON(data['bottomRightCorner']);
        }
        // validate the optional field `center`
        if (data['center']) { // data not null
          UpdateNetworkFloorPlanRequestCenter.validateJSON(data['center']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `topLeftCorner`
        if (data['topLeftCorner']) { // data not null
          CreateNetworkFloorPlanRequestTopLeftCorner.validateJSON(data['topLeftCorner']);
        }
        // validate the optional field `topRightCorner`
        if (data['topRightCorner']) { // data not null
          CreateNetworkFloorPlanRequestTopRightCorner.validateJSON(data['topRightCorner']);
        }

        return true;
    }


}



/**
 * @member {module:model/CreateNetworkFloorPlanRequestBottomLeftCorner} bottomLeftCorner
 */
UpdateNetworkFloorPlanRequest.prototype['bottomLeftCorner'] = undefined;

/**
 * @member {module:model/CreateNetworkFloorPlanRequestBottomRightCorner} bottomRightCorner
 */
UpdateNetworkFloorPlanRequest.prototype['bottomRightCorner'] = undefined;

/**
 * @member {module:model/UpdateNetworkFloorPlanRequestCenter} center
 */
UpdateNetworkFloorPlanRequest.prototype['center'] = undefined;

/**
 * The file contents (a base 64 encoded string) of your new image. Supported formats are PNG, GIF, and JPG. Note that all images are saved as PNG files, regardless of the format they are uploaded in. If you upload a new image, and you do NOT specify any new geolocation fields ('center, 'topLeftCorner', etc), the floor plan will be recentered with no rotation in order to maintain the aspect ratio of your new image.
 * @member {Blob} imageContents
 */
UpdateNetworkFloorPlanRequest.prototype['imageContents'] = undefined;

/**
 * The name of your floor plan.
 * @member {String} name
 */
UpdateNetworkFloorPlanRequest.prototype['name'] = undefined;

/**
 * @member {module:model/CreateNetworkFloorPlanRequestTopLeftCorner} topLeftCorner
 */
UpdateNetworkFloorPlanRequest.prototype['topLeftCorner'] = undefined;

/**
 * @member {module:model/CreateNetworkFloorPlanRequestTopRightCorner} topRightCorner
 */
UpdateNetworkFloorPlanRequest.prototype['topRightCorner'] = undefined;






export default UpdateNetworkFloorPlanRequest;

