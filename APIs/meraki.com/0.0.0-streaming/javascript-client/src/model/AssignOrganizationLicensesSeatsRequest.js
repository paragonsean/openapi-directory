/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 0.0.0-streaming
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AssignOrganizationLicensesSeatsRequest model module.
 * @module model/AssignOrganizationLicensesSeatsRequest
 * @version 0.0.0-streaming
 */
class AssignOrganizationLicensesSeatsRequest {
    /**
     * Constructs a new <code>AssignOrganizationLicensesSeatsRequest</code>.
     * @alias module:model/AssignOrganizationLicensesSeatsRequest
     * @param licenseId {String} The ID of the SM license to assign seats from
     * @param networkId {String} The ID of the SM network to assign the seats to
     * @param seatCount {Number} The number of seats to assign to the SM network. Must be less than or equal to the total number of seats of the license
     */
    constructor(licenseId, networkId, seatCount) { 
        
        AssignOrganizationLicensesSeatsRequest.initialize(this, licenseId, networkId, seatCount);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, licenseId, networkId, seatCount) { 
        obj['licenseId'] = licenseId;
        obj['networkId'] = networkId;
        obj['seatCount'] = seatCount;
    }

    /**
     * Constructs a <code>AssignOrganizationLicensesSeatsRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AssignOrganizationLicensesSeatsRequest} obj Optional instance to populate.
     * @return {module:model/AssignOrganizationLicensesSeatsRequest} The populated <code>AssignOrganizationLicensesSeatsRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AssignOrganizationLicensesSeatsRequest();

            if (data.hasOwnProperty('licenseId')) {
                obj['licenseId'] = ApiClient.convertToType(data['licenseId'], 'String');
            }
            if (data.hasOwnProperty('networkId')) {
                obj['networkId'] = ApiClient.convertToType(data['networkId'], 'String');
            }
            if (data.hasOwnProperty('seatCount')) {
                obj['seatCount'] = ApiClient.convertToType(data['seatCount'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AssignOrganizationLicensesSeatsRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AssignOrganizationLicensesSeatsRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AssignOrganizationLicensesSeatsRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['licenseId'] && !(typeof data['licenseId'] === 'string' || data['licenseId'] instanceof String)) {
            throw new Error("Expected the field `licenseId` to be a primitive type in the JSON string but got " + data['licenseId']);
        }
        // ensure the json data is a string
        if (data['networkId'] && !(typeof data['networkId'] === 'string' || data['networkId'] instanceof String)) {
            throw new Error("Expected the field `networkId` to be a primitive type in the JSON string but got " + data['networkId']);
        }

        return true;
    }


}

AssignOrganizationLicensesSeatsRequest.RequiredProperties = ["licenseId", "networkId", "seatCount"];

/**
 * The ID of the SM license to assign seats from
 * @member {String} licenseId
 */
AssignOrganizationLicensesSeatsRequest.prototype['licenseId'] = undefined;

/**
 * The ID of the SM network to assign the seats to
 * @member {String} networkId
 */
AssignOrganizationLicensesSeatsRequest.prototype['networkId'] = undefined;

/**
 * The number of seats to assign to the SM network. Must be less than or equal to the total number of seats of the license
 * @member {Number} seatCount
 */
AssignOrganizationLicensesSeatsRequest.prototype['seatCount'] = undefined;






export default AssignOrganizationLicensesSeatsRequest;

