/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 0.0.0-streaming
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UpdateNetworkSwitchSettingsRequestPowerExceptionsInner model module.
 * @module model/UpdateNetworkSwitchSettingsRequestPowerExceptionsInner
 * @version 0.0.0-streaming
 */
class UpdateNetworkSwitchSettingsRequestPowerExceptionsInner {
    /**
     * Constructs a new <code>UpdateNetworkSwitchSettingsRequestPowerExceptionsInner</code>.
     * @alias module:model/UpdateNetworkSwitchSettingsRequestPowerExceptionsInner
     * @param powerType {module:model/UpdateNetworkSwitchSettingsRequestPowerExceptionsInner.PowerTypeEnum} Per switch exception (combined, redundant, useNetworkSetting)
     * @param serial {String} Serial number of the switch
     */
    constructor(powerType, serial) { 
        
        UpdateNetworkSwitchSettingsRequestPowerExceptionsInner.initialize(this, powerType, serial);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, powerType, serial) { 
        obj['powerType'] = powerType;
        obj['serial'] = serial;
    }

    /**
     * Constructs a <code>UpdateNetworkSwitchSettingsRequestPowerExceptionsInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateNetworkSwitchSettingsRequestPowerExceptionsInner} obj Optional instance to populate.
     * @return {module:model/UpdateNetworkSwitchSettingsRequestPowerExceptionsInner} The populated <code>UpdateNetworkSwitchSettingsRequestPowerExceptionsInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateNetworkSwitchSettingsRequestPowerExceptionsInner();

            if (data.hasOwnProperty('powerType')) {
                obj['powerType'] = ApiClient.convertToType(data['powerType'], 'String');
            }
            if (data.hasOwnProperty('serial')) {
                obj['serial'] = ApiClient.convertToType(data['serial'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateNetworkSwitchSettingsRequestPowerExceptionsInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateNetworkSwitchSettingsRequestPowerExceptionsInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UpdateNetworkSwitchSettingsRequestPowerExceptionsInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['powerType'] && !(typeof data['powerType'] === 'string' || data['powerType'] instanceof String)) {
            throw new Error("Expected the field `powerType` to be a primitive type in the JSON string but got " + data['powerType']);
        }
        // ensure the json data is a string
        if (data['serial'] && !(typeof data['serial'] === 'string' || data['serial'] instanceof String)) {
            throw new Error("Expected the field `serial` to be a primitive type in the JSON string but got " + data['serial']);
        }

        return true;
    }


}

UpdateNetworkSwitchSettingsRequestPowerExceptionsInner.RequiredProperties = ["powerType", "serial"];

/**
 * Per switch exception (combined, redundant, useNetworkSetting)
 * @member {module:model/UpdateNetworkSwitchSettingsRequestPowerExceptionsInner.PowerTypeEnum} powerType
 */
UpdateNetworkSwitchSettingsRequestPowerExceptionsInner.prototype['powerType'] = undefined;

/**
 * Serial number of the switch
 * @member {String} serial
 */
UpdateNetworkSwitchSettingsRequestPowerExceptionsInner.prototype['serial'] = undefined;





/**
 * Allowed values for the <code>powerType</code> property.
 * @enum {String}
 * @readonly
 */
UpdateNetworkSwitchSettingsRequestPowerExceptionsInner['PowerTypeEnum'] = {

    /**
     * value: "combined"
     * @const
     */
    "combined": "combined",

    /**
     * value: "redundant"
     * @const
     */
    "redundant": "redundant",

    /**
     * value: "useNetworkSetting"
     * @const
     */
    "useNetworkSetting": "useNetworkSetting"
};



export default UpdateNetworkSwitchSettingsRequestPowerExceptionsInner;

