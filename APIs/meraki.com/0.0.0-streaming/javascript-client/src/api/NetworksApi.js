/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 0.0.0-streaming
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BindNetworkRequest from '../model/BindNetworkRequest';
import CombineOrganizationNetworksRequest from '../model/CombineOrganizationNetworksRequest';
import CreateOrganizationNetworkRequest from '../model/CreateOrganizationNetworkRequest';
import UpdateNetworkRequest from '../model/UpdateNetworkRequest';
import UpdateNetworkSiteToSiteVpnRequest from '../model/UpdateNetworkSiteToSiteVpnRequest';

/**
* Networks service.
* @module api/NetworksApi
* @version 0.0.0-streaming
*/
export default class NetworksApi {

    /**
    * Constructs a new NetworksApi. 
    * @alias module:api/NetworksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the bindNetwork operation.
     * @callback module:api/NetworksApi~bindNetworkCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bind a network to a template.
     * Bind a network to a template.
     * @param {String} networkId 
     * @param {module:model/BindNetworkRequest} bindNetworkRequest 
     * @param {module:api/NetworksApi~bindNetworkCallback} callback The callback function, accepting three arguments: error, data, response
     */
    bindNetwork(networkId, bindNetworkRequest, callback) {
      let postBody = bindNetworkRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling bindNetwork");
      }
      // verify the required parameter 'bindNetworkRequest' is set
      if (bindNetworkRequest === undefined || bindNetworkRequest === null) {
        throw new Error("Missing the required parameter 'bindNetworkRequest' when calling bindNetwork");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/bind', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the combineOrganizationNetworks operation.
     * @callback module:api/NetworksApi~combineOrganizationNetworksCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Combine multiple networks into a single network
     * Combine multiple networks into a single network
     * @param {String} organizationId 
     * @param {module:model/CombineOrganizationNetworksRequest} combineOrganizationNetworksRequest 
     * @param {module:api/NetworksApi~combineOrganizationNetworksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    combineOrganizationNetworks(organizationId, combineOrganizationNetworksRequest, callback) {
      let postBody = combineOrganizationNetworksRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling combineOrganizationNetworks");
      }
      // verify the required parameter 'combineOrganizationNetworksRequest' is set
      if (combineOrganizationNetworksRequest === undefined || combineOrganizationNetworksRequest === null) {
        throw new Error("Missing the required parameter 'combineOrganizationNetworksRequest' when calling combineOrganizationNetworks");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/networks/combine', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrganizationNetwork operation.
     * @callback module:api/NetworksApi~createOrganizationNetworkCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a network
     * Create a network
     * @param {String} organizationId 
     * @param {module:model/CreateOrganizationNetworkRequest} createOrganizationNetworkRequest 
     * @param {module:api/NetworksApi~createOrganizationNetworkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createOrganizationNetwork(organizationId, createOrganizationNetworkRequest, callback) {
      let postBody = createOrganizationNetworkRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createOrganizationNetwork");
      }
      // verify the required parameter 'createOrganizationNetworkRequest' is set
      if (createOrganizationNetworkRequest === undefined || createOrganizationNetworkRequest === null) {
        throw new Error("Missing the required parameter 'createOrganizationNetworkRequest' when calling createOrganizationNetwork");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}/networks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetwork operation.
     * @callback module:api/NetworksApi~deleteNetworkCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a network
     * Delete a network
     * @param {String} networkId 
     * @param {module:api/NetworksApi~deleteNetworkCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetwork(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetwork");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetwork operation.
     * @callback module:api/NetworksApi~getNetworkCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a network
     * Return a network
     * @param {String} networkId 
     * @param {module:api/NetworksApi~getNetworkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetwork(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetwork");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkAirMarshal operation.
     * @callback module:api/NetworksApi~getNetworkAirMarshalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Air Marshal scan results from a network
     * List Air Marshal scan results from a network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 7 days.
     * @param {module:api/NetworksApi~getNetworkAirMarshalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkAirMarshal(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkAirMarshal");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        't0': opts['t0'],
        'timespan': opts['timespan']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/airMarshal', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSiteToSiteVpn operation.
     * @callback module:api/NetworksApi~getNetworkSiteToSiteVpnCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the site-to-site VPN settings of a network
     * Return the site-to-site VPN settings of a network. Only valid for MX networks.
     * @param {String} networkId 
     * @param {module:api/NetworksApi~getNetworkSiteToSiteVpnCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkSiteToSiteVpn(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSiteToSiteVpn");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/siteToSiteVpn', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkTraffic operation.
     * @callback module:api/NetworksApi~getNetworkTrafficCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the traffic analysis data for this network
     * Return the traffic analysis data for this network. Traffic analysis with hostname visibility must be enabled on the network.
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 30 days from today.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 30 days.
     * @param {module:model/String} [deviceType] Filter the data by device type: 'combined', 'wireless', 'switch' or 'appliance'. Defaults to 'combined'. When using 'combined', for each rule the data will come from the device type with the most usage.
     * @param {module:api/NetworksApi~getNetworkTrafficCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkTraffic(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkTraffic");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        't0': opts['t0'],
        'timespan': opts['timespan'],
        'deviceType': opts['deviceType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/traffic', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationNetworks operation.
     * @callback module:api/NetworksApi~getOrganizationNetworksCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the networks in an organization
     * List the networks in an organization
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {String} [configTemplateId] An optional parameter that is the ID of a config template. Will return all networks bound to that template.
     * @param {module:api/NetworksApi~getOrganizationNetworksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getOrganizationNetworks(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationNetworks");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'configTemplateId': opts['configTemplateId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/networks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the splitNetwork operation.
     * @callback module:api/NetworksApi~splitNetworkCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Split a combined network into individual networks for each type of device
     * Split a combined network into individual networks for each type of device
     * @param {String} networkId 
     * @param {module:api/NetworksApi~splitNetworkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    splitNetwork(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling splitNetwork");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/split', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unbindNetwork operation.
     * @callback module:api/NetworksApi~unbindNetworkCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unbind a network from a template.
     * Unbind a network from a template.
     * @param {String} networkId 
     * @param {module:api/NetworksApi~unbindNetworkCallback} callback The callback function, accepting three arguments: error, data, response
     */
    unbindNetwork(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling unbindNetwork");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/unbind', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetwork operation.
     * @callback module:api/NetworksApi~updateNetworkCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a network
     * Update a network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkRequest} [updateNetworkRequest] 
     * @param {module:api/NetworksApi~updateNetworkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetwork(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetwork");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSiteToSiteVpn operation.
     * @callback module:api/NetworksApi~updateNetworkSiteToSiteVpnCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the site-to-site VPN settings of a network
     * Update the site-to-site VPN settings of a network. Only valid for MX networks in NAT mode.
     * @param {String} networkId 
     * @param {module:model/UpdateNetworkSiteToSiteVpnRequest} updateNetworkSiteToSiteVpnRequest 
     * @param {module:api/NetworksApi~updateNetworkSiteToSiteVpnCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkSiteToSiteVpn(networkId, updateNetworkSiteToSiteVpnRequest, callback) {
      let postBody = updateNetworkSiteToSiteVpnRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSiteToSiteVpn");
      }
      // verify the required parameter 'updateNetworkSiteToSiteVpnRequest' is set
      if (updateNetworkSiteToSiteVpnRequest === undefined || updateNetworkSiteToSiteVpnRequest === null) {
        throw new Error("Missing the required parameter 'updateNetworkSiteToSiteVpnRequest' when calling updateNetworkSiteToSiteVpn");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/siteToSiteVpn', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
