/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 0.0.0-streaming
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateNetworkStaticRouteRequest from '../model/CreateNetworkStaticRouteRequest';
import UpdateNetworkStaticRouteRequest from '../model/UpdateNetworkStaticRouteRequest';

/**
* MXStaticRoutes service.
* @module api/MXStaticRoutesApi
* @version 0.0.0-streaming
*/
export default class MXStaticRoutesApi {

    /**
    * Constructs a new MXStaticRoutesApi. 
    * @alias module:api/MXStaticRoutesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createNetworkStaticRoute operation.
     * @callback module:api/MXStaticRoutesApi~createNetworkStaticRouteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a static route for an MX or teleworker network
     * Add a static route for an MX or teleworker network
     * @param {String} networkId 
     * @param {module:model/CreateNetworkStaticRouteRequest} createNetworkStaticRouteRequest 
     * @param {module:api/MXStaticRoutesApi~createNetworkStaticRouteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNetworkStaticRoute(networkId, createNetworkStaticRouteRequest, callback) {
      let postBody = createNetworkStaticRouteRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkStaticRoute");
      }
      // verify the required parameter 'createNetworkStaticRouteRequest' is set
      if (createNetworkStaticRouteRequest === undefined || createNetworkStaticRouteRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkStaticRouteRequest' when calling createNetworkStaticRoute");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/staticRoutes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkStaticRoute operation.
     * @callback module:api/MXStaticRoutesApi~deleteNetworkStaticRouteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a static route from an MX or teleworker network
     * Delete a static route from an MX or teleworker network
     * @param {String} networkId 
     * @param {String} staticRouteId 
     * @param {module:api/MXStaticRoutesApi~deleteNetworkStaticRouteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkStaticRoute(networkId, staticRouteId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkStaticRoute");
      }
      // verify the required parameter 'staticRouteId' is set
      if (staticRouteId === undefined || staticRouteId === null) {
        throw new Error("Missing the required parameter 'staticRouteId' when calling deleteNetworkStaticRoute");
      }

      let pathParams = {
        'networkId': networkId,
        'staticRouteId': staticRouteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/staticRoutes/{staticRouteId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkStaticRoute operation.
     * @callback module:api/MXStaticRoutesApi~getNetworkStaticRouteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a static route for an MX or teleworker network
     * Return a static route for an MX or teleworker network
     * @param {String} networkId 
     * @param {String} staticRouteId 
     * @param {module:api/MXStaticRoutesApi~getNetworkStaticRouteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkStaticRoute(networkId, staticRouteId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkStaticRoute");
      }
      // verify the required parameter 'staticRouteId' is set
      if (staticRouteId === undefined || staticRouteId === null) {
        throw new Error("Missing the required parameter 'staticRouteId' when calling getNetworkStaticRoute");
      }

      let pathParams = {
        'networkId': networkId,
        'staticRouteId': staticRouteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/staticRoutes/{staticRouteId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkStaticRoutes operation.
     * @callback module:api/MXStaticRoutesApi~getNetworkStaticRoutesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the static routes for an MX or teleworker network
     * List the static routes for an MX or teleworker network
     * @param {String} networkId 
     * @param {module:api/MXStaticRoutesApi~getNetworkStaticRoutesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkStaticRoutes(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkStaticRoutes");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/staticRoutes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkStaticRoute operation.
     * @callback module:api/MXStaticRoutesApi~updateNetworkStaticRouteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a static route for an MX or teleworker network
     * Update a static route for an MX or teleworker network
     * @param {String} networkId 
     * @param {String} staticRouteId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkStaticRouteRequest} [updateNetworkStaticRouteRequest] 
     * @param {module:api/MXStaticRoutesApi~updateNetworkStaticRouteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkStaticRoute(networkId, staticRouteId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkStaticRouteRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkStaticRoute");
      }
      // verify the required parameter 'staticRouteId' is set
      if (staticRouteId === undefined || staticRouteId === null) {
        throw new Error("Missing the required parameter 'staticRouteId' when calling updateNetworkStaticRoute");
      }

      let pathParams = {
        'networkId': networkId,
        'staticRouteId': staticRouteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/staticRoutes/{staticRouteId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
