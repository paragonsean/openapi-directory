/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 0.0.0-streaming
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ClaimNetworkDevicesRequest from '../model/ClaimNetworkDevicesRequest';
import CycleDeviceSwitchPortsRequest from '../model/CycleDeviceSwitchPortsRequest';
import UpdateNetworkDeviceRequest from '../model/UpdateNetworkDeviceRequest';

/**
* Devices service.
* @module api/DevicesApi
* @version 0.0.0-streaming
*/
export default class DevicesApi {

    /**
    * Constructs a new DevicesApi. 
    * @alias module:api/DevicesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the claimNetworkDevices operation.
     * @callback module:api/DevicesApi~claimNetworkDevicesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Claim devices into a network. (Note: for recently claimed devices, it may take a few minutes for API requests against that device to succeed)
     * Claim devices into a network. (Note: for recently claimed devices, it may take a few minutes for API requests against that device to succeed)
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ClaimNetworkDevicesRequest} [claimNetworkDevicesRequest] 
     * @param {module:api/DevicesApi~claimNetworkDevicesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    claimNetworkDevices(networkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['claimNetworkDevicesRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling claimNetworkDevices");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/devices/claim', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cycleDeviceSwitchPorts operation.
     * @callback module:api/DevicesApi~cycleDeviceSwitchPortsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cycle a set of switch ports
     * Cycle a set of switch ports
     * @param {String} serial 
     * @param {module:model/CycleDeviceSwitchPortsRequest} cycleDeviceSwitchPortsRequest 
     * @param {module:api/DevicesApi~cycleDeviceSwitchPortsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    cycleDeviceSwitchPorts(serial, cycleDeviceSwitchPortsRequest, callback) {
      let postBody = cycleDeviceSwitchPortsRequest;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling cycleDeviceSwitchPorts");
      }
      // verify the required parameter 'cycleDeviceSwitchPortsRequest' is set
      if (cycleDeviceSwitchPortsRequest === undefined || cycleDeviceSwitchPortsRequest === null) {
        throw new Error("Missing the required parameter 'cycleDeviceSwitchPortsRequest' when calling cycleDeviceSwitchPorts");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/devices/{serial}/switch/ports/cycle', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkDevice operation.
     * @callback module:api/DevicesApi~getNetworkDeviceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a single device
     * Return a single device
     * @param {String} networkId 
     * @param {String} serial 
     * @param {module:api/DevicesApi~getNetworkDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkDevice(networkId, serial, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkDevice");
      }
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getNetworkDevice");
      }

      let pathParams = {
        'networkId': networkId,
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/devices/{serial}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkDeviceLossAndLatencyHistory operation.
     * @callback module:api/DevicesApi~getNetworkDeviceLossAndLatencyHistoryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the uplink loss percentage and latency in milliseconds for a wired network device.
     * Get the uplink loss percentage and latency in milliseconds for a wired network device.
     * @param {String} networkId 
     * @param {String} serial 
     * @param {String} ip The destination IP used to obtain the requested stats. This is required.
     * @param {Object} opts Optional parameters
     * @param {String} [t0] The beginning of the timespan for the data. The maximum lookback period is 60 days from today.
     * @param {String} [t1] The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
     * @param {Number} [timespan] The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
     * @param {Number} [resolution] The time resolution in seconds for returned data. The valid resolutions are: 60, 600, 3600, 86400. The default is 60.
     * @param {module:model/String} [uplink] The WAN uplink used to obtain the requested stats. Valid uplinks are wan1, wan2, cellular. The default is wan1.
     * @param {module:api/DevicesApi~getNetworkDeviceLossAndLatencyHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkDeviceLossAndLatencyHistory(networkId, serial, ip, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkDeviceLossAndLatencyHistory");
      }
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getNetworkDeviceLossAndLatencyHistory");
      }
      // verify the required parameter 'ip' is set
      if (ip === undefined || ip === null) {
        throw new Error("Missing the required parameter 'ip' when calling getNetworkDeviceLossAndLatencyHistory");
      }

      let pathParams = {
        'networkId': networkId,
        'serial': serial
      };
      let queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan'],
        'resolution': opts['resolution'],
        'uplink': opts['uplink'],
        'ip': ip
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/devices/{serial}/lossAndLatencyHistory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkDevicePerformance operation.
     * @callback module:api/DevicesApi~getNetworkDevicePerformanceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the performance score for a single MX
     * Return the performance score for a single MX. Only primary MX devices supported. If no data is available, a 204 error code is returned.
     * @param {String} networkId 
     * @param {String} serial 
     * @param {module:api/DevicesApi~getNetworkDevicePerformanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkDevicePerformance(networkId, serial, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkDevicePerformance");
      }
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getNetworkDevicePerformance");
      }

      let pathParams = {
        'networkId': networkId,
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/devices/{serial}/performance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkDeviceUplink operation.
     * @callback module:api/DevicesApi~getNetworkDeviceUplinkCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the uplink information for a device.
     * Return the uplink information for a device.
     * @param {String} networkId 
     * @param {String} serial 
     * @param {module:api/DevicesApi~getNetworkDeviceUplinkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkDeviceUplink(networkId, serial, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkDeviceUplink");
      }
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getNetworkDeviceUplink");
      }

      let pathParams = {
        'networkId': networkId,
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/devices/{serial}/uplink', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkDevices operation.
     * @callback module:api/DevicesApi~getNetworkDevicesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the devices in a network
     * List the devices in a network
     * @param {String} networkId 
     * @param {module:api/DevicesApi~getNetworkDevicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkDevices(networkId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkDevices");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/devices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationDevices operation.
     * @callback module:api/DevicesApi~getOrganizationDevicesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the devices in an organization
     * List the devices in an organization
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
     * @param {String} [startingAfter] A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [endingBefore] A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} [configurationUpdatedAfter] Filter results by whether or not the device's configuration has been updated after the given timestamp
     * @param {module:api/DevicesApi~getOrganizationDevicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getOrganizationDevices(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationDevices");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        'configurationUpdatedAfter': opts['configurationUpdatedAfter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/organizations/{organizationId}/devices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rebootNetworkDevice operation.
     * @callback module:api/DevicesApi~rebootNetworkDeviceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reboot a device
     * Reboot a device
     * @param {String} networkId 
     * @param {String} serial 
     * @param {module:api/DevicesApi~rebootNetworkDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    rebootNetworkDevice(networkId, serial, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling rebootNetworkDevice");
      }
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling rebootNetworkDevice");
      }

      let pathParams = {
        'networkId': networkId,
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/devices/{serial}/reboot', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeNetworkDevice operation.
     * @callback module:api/DevicesApi~removeNetworkDeviceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a single device
     * Remove a single device
     * @param {String} networkId 
     * @param {String} serial 
     * @param {module:api/DevicesApi~removeNetworkDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeNetworkDevice(networkId, serial, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling removeNetworkDevice");
      }
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling removeNetworkDevice");
      }

      let pathParams = {
        'networkId': networkId,
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/devices/{serial}/remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkDevice operation.
     * @callback module:api/DevicesApi~updateNetworkDeviceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the attributes of a device
     * Update the attributes of a device
     * @param {String} networkId 
     * @param {String} serial 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkDeviceRequest} [updateNetworkDeviceRequest] 
     * @param {module:api/DevicesApi~updateNetworkDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkDevice(networkId, serial, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkDeviceRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkDevice");
      }
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling updateNetworkDevice");
      }

      let pathParams = {
        'networkId': networkId,
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/devices/{serial}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
