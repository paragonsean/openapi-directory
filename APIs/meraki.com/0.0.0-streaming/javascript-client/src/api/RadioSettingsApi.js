/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 0.0.0-streaming
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateNetworkWirelessRfProfileRequest from '../model/CreateNetworkWirelessRfProfileRequest';
import UpdateNetworkWirelessRfProfileRequest from '../model/UpdateNetworkWirelessRfProfileRequest';

/**
* RadioSettings service.
* @module api/RadioSettingsApi
* @version 0.0.0-streaming
*/
export default class RadioSettingsApi {

    /**
    * Constructs a new RadioSettingsApi. 
    * @alias module:api/RadioSettingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createNetworkWirelessRfProfile operation.
     * @callback module:api/RadioSettingsApi~createNetworkWirelessRfProfileCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new RF profile for this network
     * Creates new RF profile for this network
     * @param {String} networkId 
     * @param {module:model/CreateNetworkWirelessRfProfileRequest} createNetworkWirelessRfProfileRequest 
     * @param {module:api/RadioSettingsApi~createNetworkWirelessRfProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNetworkWirelessRfProfile(networkId, createNetworkWirelessRfProfileRequest, callback) {
      let postBody = createNetworkWirelessRfProfileRequest;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkWirelessRfProfile");
      }
      // verify the required parameter 'createNetworkWirelessRfProfileRequest' is set
      if (createNetworkWirelessRfProfileRequest === undefined || createNetworkWirelessRfProfileRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkWirelessRfProfileRequest' when calling createNetworkWirelessRfProfile");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/rfProfiles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkWirelessRfProfile operation.
     * @callback module:api/RadioSettingsApi~deleteNetworkWirelessRfProfileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a RF Profile
     * Delete a RF Profile
     * @param {String} networkId 
     * @param {String} rfProfileId 
     * @param {module:api/RadioSettingsApi~deleteNetworkWirelessRfProfileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkWirelessRfProfile(networkId, rfProfileId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkWirelessRfProfile");
      }
      // verify the required parameter 'rfProfileId' is set
      if (rfProfileId === undefined || rfProfileId === null) {
        throw new Error("Missing the required parameter 'rfProfileId' when calling deleteNetworkWirelessRfProfile");
      }

      let pathParams = {
        'networkId': networkId,
        'rfProfileId': rfProfileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/rfProfiles/{rfProfileId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessRfProfile operation.
     * @callback module:api/RadioSettingsApi~getNetworkWirelessRfProfileCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a RF profile
     * Return a RF profile
     * @param {String} networkId 
     * @param {String} rfProfileId 
     * @param {module:api/RadioSettingsApi~getNetworkWirelessRfProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkWirelessRfProfile(networkId, rfProfileId, callback) {
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessRfProfile");
      }
      // verify the required parameter 'rfProfileId' is set
      if (rfProfileId === undefined || rfProfileId === null) {
        throw new Error("Missing the required parameter 'rfProfileId' when calling getNetworkWirelessRfProfile");
      }

      let pathParams = {
        'networkId': networkId,
        'rfProfileId': rfProfileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/rfProfiles/{rfProfileId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessRfProfiles operation.
     * @callback module:api/RadioSettingsApi~getNetworkWirelessRfProfilesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the non-basic RF profiles for this network
     * List the non-basic RF profiles for this network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeTemplateProfiles] If the network is bound to a template, this parameter controls whether or not the non-basic RF profiles defined on the template should be included in the response alongside the non-basic profiles defined on the bound network. Defaults to false.
     * @param {module:api/RadioSettingsApi~getNetworkWirelessRfProfilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getNetworkWirelessRfProfiles(networkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessRfProfiles");
      }

      let pathParams = {
        'networkId': networkId
      };
      let queryParams = {
        'includeTemplateProfiles': opts['includeTemplateProfiles']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/rfProfiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkWirelessRfProfile operation.
     * @callback module:api/RadioSettingsApi~updateNetworkWirelessRfProfileCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates specified RF profile for this network
     * Updates specified RF profile for this network
     * @param {String} networkId 
     * @param {String} rfProfileId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkWirelessRfProfileRequest} [updateNetworkWirelessRfProfileRequest] 
     * @param {module:api/RadioSettingsApi~updateNetworkWirelessRfProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkWirelessRfProfile(networkId, rfProfileId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateNetworkWirelessRfProfileRequest'];
      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkWirelessRfProfile");
      }
      // verify the required parameter 'rfProfileId' is set
      if (rfProfileId === undefined || rfProfileId === null) {
        throw new Error("Missing the required parameter 'rfProfileId' when calling updateNetworkWirelessRfProfile");
      }

      let pathParams = {
        'networkId': networkId,
        'rfProfileId': rfProfileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['meraki_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/rfProfiles/{rfProfileId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
