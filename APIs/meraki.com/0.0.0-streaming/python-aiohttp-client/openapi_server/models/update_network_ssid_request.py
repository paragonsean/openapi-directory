# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_network_ssid_request_ap_tags_and_vlan_ids_inner import UpdateNetworkSsidRequestApTagsAndVlanIdsInner
from openapi_server.models.update_network_ssid_request_radius_accounting_servers_inner import UpdateNetworkSsidRequestRadiusAccountingServersInner
from openapi_server.models.update_network_ssid_request_radius_servers_inner import UpdateNetworkSsidRequestRadiusServersInner
from openapi_server import util


class UpdateNetworkSsidRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ap_tags_and_vlan_ids: List[UpdateNetworkSsidRequestApTagsAndVlanIdsInner]=None, auth_mode: str=None, availability_tags: List[str]=None, available_on_all_aps: bool=None, band_selection: str=None, concentrator_network_id: str=None, default_vlan_id: int=None, disassociate_clients_on_vpn_failover: bool=None, enabled: bool=None, encryption_mode: str=None, enterprise_admin_access: str=None, ip_assignment_mode: str=None, lan_isolation_enabled: bool=None, min_bitrate: float=None, name: str=None, per_client_bandwidth_limit_down: int=None, per_client_bandwidth_limit_up: int=None, psk: str=None, radius_accounting_enabled: bool=None, radius_accounting_servers: List[UpdateNetworkSsidRequestRadiusAccountingServersInner]=None, radius_attribute_for_group_policies: str=None, radius_coa_enabled: bool=None, radius_failover_policy: str=None, radius_load_balancing_policy: str=None, radius_override: bool=None, radius_servers: List[UpdateNetworkSsidRequestRadiusServersInner]=None, secondary_concentrator_network_id: str=None, splash_page: str=None, use_vlan_tagging: bool=None, visible: bool=None, vlan_id: int=None, walled_garden_enabled: bool=None, walled_garden_ranges: str=None, wpa_encryption_mode: str=None):
        """UpdateNetworkSsidRequest - a model defined in OpenAPI

        :param ap_tags_and_vlan_ids: The ap_tags_and_vlan_ids of this UpdateNetworkSsidRequest.
        :param auth_mode: The auth_mode of this UpdateNetworkSsidRequest.
        :param availability_tags: The availability_tags of this UpdateNetworkSsidRequest.
        :param available_on_all_aps: The available_on_all_aps of this UpdateNetworkSsidRequest.
        :param band_selection: The band_selection of this UpdateNetworkSsidRequest.
        :param concentrator_network_id: The concentrator_network_id of this UpdateNetworkSsidRequest.
        :param default_vlan_id: The default_vlan_id of this UpdateNetworkSsidRequest.
        :param disassociate_clients_on_vpn_failover: The disassociate_clients_on_vpn_failover of this UpdateNetworkSsidRequest.
        :param enabled: The enabled of this UpdateNetworkSsidRequest.
        :param encryption_mode: The encryption_mode of this UpdateNetworkSsidRequest.
        :param enterprise_admin_access: The enterprise_admin_access of this UpdateNetworkSsidRequest.
        :param ip_assignment_mode: The ip_assignment_mode of this UpdateNetworkSsidRequest.
        :param lan_isolation_enabled: The lan_isolation_enabled of this UpdateNetworkSsidRequest.
        :param min_bitrate: The min_bitrate of this UpdateNetworkSsidRequest.
        :param name: The name of this UpdateNetworkSsidRequest.
        :param per_client_bandwidth_limit_down: The per_client_bandwidth_limit_down of this UpdateNetworkSsidRequest.
        :param per_client_bandwidth_limit_up: The per_client_bandwidth_limit_up of this UpdateNetworkSsidRequest.
        :param psk: The psk of this UpdateNetworkSsidRequest.
        :param radius_accounting_enabled: The radius_accounting_enabled of this UpdateNetworkSsidRequest.
        :param radius_accounting_servers: The radius_accounting_servers of this UpdateNetworkSsidRequest.
        :param radius_attribute_for_group_policies: The radius_attribute_for_group_policies of this UpdateNetworkSsidRequest.
        :param radius_coa_enabled: The radius_coa_enabled of this UpdateNetworkSsidRequest.
        :param radius_failover_policy: The radius_failover_policy of this UpdateNetworkSsidRequest.
        :param radius_load_balancing_policy: The radius_load_balancing_policy of this UpdateNetworkSsidRequest.
        :param radius_override: The radius_override of this UpdateNetworkSsidRequest.
        :param radius_servers: The radius_servers of this UpdateNetworkSsidRequest.
        :param secondary_concentrator_network_id: The secondary_concentrator_network_id of this UpdateNetworkSsidRequest.
        :param splash_page: The splash_page of this UpdateNetworkSsidRequest.
        :param use_vlan_tagging: The use_vlan_tagging of this UpdateNetworkSsidRequest.
        :param visible: The visible of this UpdateNetworkSsidRequest.
        :param vlan_id: The vlan_id of this UpdateNetworkSsidRequest.
        :param walled_garden_enabled: The walled_garden_enabled of this UpdateNetworkSsidRequest.
        :param walled_garden_ranges: The walled_garden_ranges of this UpdateNetworkSsidRequest.
        :param wpa_encryption_mode: The wpa_encryption_mode of this UpdateNetworkSsidRequest.
        """
        self.openapi_types = {
            'ap_tags_and_vlan_ids': List[UpdateNetworkSsidRequestApTagsAndVlanIdsInner],
            'auth_mode': str,
            'availability_tags': List[str],
            'available_on_all_aps': bool,
            'band_selection': str,
            'concentrator_network_id': str,
            'default_vlan_id': int,
            'disassociate_clients_on_vpn_failover': bool,
            'enabled': bool,
            'encryption_mode': str,
            'enterprise_admin_access': str,
            'ip_assignment_mode': str,
            'lan_isolation_enabled': bool,
            'min_bitrate': float,
            'name': str,
            'per_client_bandwidth_limit_down': int,
            'per_client_bandwidth_limit_up': int,
            'psk': str,
            'radius_accounting_enabled': bool,
            'radius_accounting_servers': List[UpdateNetworkSsidRequestRadiusAccountingServersInner],
            'radius_attribute_for_group_policies': str,
            'radius_coa_enabled': bool,
            'radius_failover_policy': str,
            'radius_load_balancing_policy': str,
            'radius_override': bool,
            'radius_servers': List[UpdateNetworkSsidRequestRadiusServersInner],
            'secondary_concentrator_network_id': str,
            'splash_page': str,
            'use_vlan_tagging': bool,
            'visible': bool,
            'vlan_id': int,
            'walled_garden_enabled': bool,
            'walled_garden_ranges': str,
            'wpa_encryption_mode': str
        }

        self.attribute_map = {
            'ap_tags_and_vlan_ids': 'apTagsAndVlanIds',
            'auth_mode': 'authMode',
            'availability_tags': 'availabilityTags',
            'available_on_all_aps': 'availableOnAllAps',
            'band_selection': 'bandSelection',
            'concentrator_network_id': 'concentratorNetworkId',
            'default_vlan_id': 'defaultVlanId',
            'disassociate_clients_on_vpn_failover': 'disassociateClientsOnVpnFailover',
            'enabled': 'enabled',
            'encryption_mode': 'encryptionMode',
            'enterprise_admin_access': 'enterpriseAdminAccess',
            'ip_assignment_mode': 'ipAssignmentMode',
            'lan_isolation_enabled': 'lanIsolationEnabled',
            'min_bitrate': 'minBitrate',
            'name': 'name',
            'per_client_bandwidth_limit_down': 'perClientBandwidthLimitDown',
            'per_client_bandwidth_limit_up': 'perClientBandwidthLimitUp',
            'psk': 'psk',
            'radius_accounting_enabled': 'radiusAccountingEnabled',
            'radius_accounting_servers': 'radiusAccountingServers',
            'radius_attribute_for_group_policies': 'radiusAttributeForGroupPolicies',
            'radius_coa_enabled': 'radiusCoaEnabled',
            'radius_failover_policy': 'radiusFailoverPolicy',
            'radius_load_balancing_policy': 'radiusLoadBalancingPolicy',
            'radius_override': 'radiusOverride',
            'radius_servers': 'radiusServers',
            'secondary_concentrator_network_id': 'secondaryConcentratorNetworkId',
            'splash_page': 'splashPage',
            'use_vlan_tagging': 'useVlanTagging',
            'visible': 'visible',
            'vlan_id': 'vlanId',
            'walled_garden_enabled': 'walledGardenEnabled',
            'walled_garden_ranges': 'walledGardenRanges',
            'wpa_encryption_mode': 'wpaEncryptionMode'
        }

        self._ap_tags_and_vlan_ids = ap_tags_and_vlan_ids
        self._auth_mode = auth_mode
        self._availability_tags = availability_tags
        self._available_on_all_aps = available_on_all_aps
        self._band_selection = band_selection
        self._concentrator_network_id = concentrator_network_id
        self._default_vlan_id = default_vlan_id
        self._disassociate_clients_on_vpn_failover = disassociate_clients_on_vpn_failover
        self._enabled = enabled
        self._encryption_mode = encryption_mode
        self._enterprise_admin_access = enterprise_admin_access
        self._ip_assignment_mode = ip_assignment_mode
        self._lan_isolation_enabled = lan_isolation_enabled
        self._min_bitrate = min_bitrate
        self._name = name
        self._per_client_bandwidth_limit_down = per_client_bandwidth_limit_down
        self._per_client_bandwidth_limit_up = per_client_bandwidth_limit_up
        self._psk = psk
        self._radius_accounting_enabled = radius_accounting_enabled
        self._radius_accounting_servers = radius_accounting_servers
        self._radius_attribute_for_group_policies = radius_attribute_for_group_policies
        self._radius_coa_enabled = radius_coa_enabled
        self._radius_failover_policy = radius_failover_policy
        self._radius_load_balancing_policy = radius_load_balancing_policy
        self._radius_override = radius_override
        self._radius_servers = radius_servers
        self._secondary_concentrator_network_id = secondary_concentrator_network_id
        self._splash_page = splash_page
        self._use_vlan_tagging = use_vlan_tagging
        self._visible = visible
        self._vlan_id = vlan_id
        self._walled_garden_enabled = walled_garden_enabled
        self._walled_garden_ranges = walled_garden_ranges
        self._wpa_encryption_mode = wpa_encryption_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateNetworkSsidRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateNetworkSsid_request of this UpdateNetworkSsidRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ap_tags_and_vlan_ids(self):
        """Gets the ap_tags_and_vlan_ids of this UpdateNetworkSsidRequest.

        The list of tags and VLAN IDs used for VLAN tagging. This param is only valid when the ipAssignmentMode is 'Bridge mode' or 'Layer 3 roaming'

        :return: The ap_tags_and_vlan_ids of this UpdateNetworkSsidRequest.
        :rtype: List[UpdateNetworkSsidRequestApTagsAndVlanIdsInner]
        """
        return self._ap_tags_and_vlan_ids

    @ap_tags_and_vlan_ids.setter
    def ap_tags_and_vlan_ids(self, ap_tags_and_vlan_ids):
        """Sets the ap_tags_and_vlan_ids of this UpdateNetworkSsidRequest.

        The list of tags and VLAN IDs used for VLAN tagging. This param is only valid when the ipAssignmentMode is 'Bridge mode' or 'Layer 3 roaming'

        :param ap_tags_and_vlan_ids: The ap_tags_and_vlan_ids of this UpdateNetworkSsidRequest.
        :type ap_tags_and_vlan_ids: List[UpdateNetworkSsidRequestApTagsAndVlanIdsInner]
        """

        self._ap_tags_and_vlan_ids = ap_tags_and_vlan_ids

    @property
    def auth_mode(self):
        """Gets the auth_mode of this UpdateNetworkSsidRequest.

        The association control method for the SSID ('open', 'open-enhanced', 'psk', 'open-with-radius', 'open-with-nac', '8021x-meraki', '8021x-nac', '8021x-radius', '8021x-google', '8021x-localradius', 'ipsk-with-radius' or 'ipsk-without-radius')

        :return: The auth_mode of this UpdateNetworkSsidRequest.
        :rtype: str
        """
        return self._auth_mode

    @auth_mode.setter
    def auth_mode(self, auth_mode):
        """Sets the auth_mode of this UpdateNetworkSsidRequest.

        The association control method for the SSID ('open', 'open-enhanced', 'psk', 'open-with-radius', 'open-with-nac', '8021x-meraki', '8021x-nac', '8021x-radius', '8021x-google', '8021x-localradius', 'ipsk-with-radius' or 'ipsk-without-radius')

        :param auth_mode: The auth_mode of this UpdateNetworkSsidRequest.
        :type auth_mode: str
        """
        allowed_values = ["8021x-google", "8021x-localradius", "8021x-meraki", "8021x-nac", "8021x-radius", "ipsk-with-radius", "ipsk-without-radius", "open", "open-enhanced", "open-with-nac", "open-with-radius", "psk"]  # noqa: E501
        if auth_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `auth_mode` ({0}), must be one of {1}"
                .format(auth_mode, allowed_values)
            )

        self._auth_mode = auth_mode

    @property
    def availability_tags(self):
        """Gets the availability_tags of this UpdateNetworkSsidRequest.

        Accepts a list of tags for this SSID. If availableOnAllAps is false, then the SSID will only be broadcast by APs with tags matching any of the tags in this list.

        :return: The availability_tags of this UpdateNetworkSsidRequest.
        :rtype: List[str]
        """
        return self._availability_tags

    @availability_tags.setter
    def availability_tags(self, availability_tags):
        """Sets the availability_tags of this UpdateNetworkSsidRequest.

        Accepts a list of tags for this SSID. If availableOnAllAps is false, then the SSID will only be broadcast by APs with tags matching any of the tags in this list.

        :param availability_tags: The availability_tags of this UpdateNetworkSsidRequest.
        :type availability_tags: List[str]
        """

        self._availability_tags = availability_tags

    @property
    def available_on_all_aps(self):
        """Gets the available_on_all_aps of this UpdateNetworkSsidRequest.

        Boolean indicating whether all APs should broadcast the SSID or if it should be restricted to APs matching any availability tags. Can only be false if the SSID has availability tags.

        :return: The available_on_all_aps of this UpdateNetworkSsidRequest.
        :rtype: bool
        """
        return self._available_on_all_aps

    @available_on_all_aps.setter
    def available_on_all_aps(self, available_on_all_aps):
        """Sets the available_on_all_aps of this UpdateNetworkSsidRequest.

        Boolean indicating whether all APs should broadcast the SSID or if it should be restricted to APs matching any availability tags. Can only be false if the SSID has availability tags.

        :param available_on_all_aps: The available_on_all_aps of this UpdateNetworkSsidRequest.
        :type available_on_all_aps: bool
        """

        self._available_on_all_aps = available_on_all_aps

    @property
    def band_selection(self):
        """Gets the band_selection of this UpdateNetworkSsidRequest.

        The client-serving radio frequencies of this SSID in the default indoor RF profile. ('Dual band operation', '5 GHz band only' or 'Dual band operation with Band Steering')

        :return: The band_selection of this UpdateNetworkSsidRequest.
        :rtype: str
        """
        return self._band_selection

    @band_selection.setter
    def band_selection(self, band_selection):
        """Sets the band_selection of this UpdateNetworkSsidRequest.

        The client-serving radio frequencies of this SSID in the default indoor RF profile. ('Dual band operation', '5 GHz band only' or 'Dual band operation with Band Steering')

        :param band_selection: The band_selection of this UpdateNetworkSsidRequest.
        :type band_selection: str
        """

        self._band_selection = band_selection

    @property
    def concentrator_network_id(self):
        """Gets the concentrator_network_id of this UpdateNetworkSsidRequest.

        The concentrator to use when the ipAssignmentMode is 'Layer 3 roaming with a concentrator' or 'VPN'.

        :return: The concentrator_network_id of this UpdateNetworkSsidRequest.
        :rtype: str
        """
        return self._concentrator_network_id

    @concentrator_network_id.setter
    def concentrator_network_id(self, concentrator_network_id):
        """Sets the concentrator_network_id of this UpdateNetworkSsidRequest.

        The concentrator to use when the ipAssignmentMode is 'Layer 3 roaming with a concentrator' or 'VPN'.

        :param concentrator_network_id: The concentrator_network_id of this UpdateNetworkSsidRequest.
        :type concentrator_network_id: str
        """

        self._concentrator_network_id = concentrator_network_id

    @property
    def default_vlan_id(self):
        """Gets the default_vlan_id of this UpdateNetworkSsidRequest.

        The default VLAN ID used for 'all other APs'. This param is only valid when the ipAssignmentMode is 'Bridge mode' or 'Layer 3 roaming'

        :return: The default_vlan_id of this UpdateNetworkSsidRequest.
        :rtype: int
        """
        return self._default_vlan_id

    @default_vlan_id.setter
    def default_vlan_id(self, default_vlan_id):
        """Sets the default_vlan_id of this UpdateNetworkSsidRequest.

        The default VLAN ID used for 'all other APs'. This param is only valid when the ipAssignmentMode is 'Bridge mode' or 'Layer 3 roaming'

        :param default_vlan_id: The default_vlan_id of this UpdateNetworkSsidRequest.
        :type default_vlan_id: int
        """

        self._default_vlan_id = default_vlan_id

    @property
    def disassociate_clients_on_vpn_failover(self):
        """Gets the disassociate_clients_on_vpn_failover of this UpdateNetworkSsidRequest.

        Disassociate clients when 'VPN' concentrator failover occurs in order to trigger clients to re-associate and generate new DHCP requests. This param is only valid if ipAssignmentMode is 'VPN'.

        :return: The disassociate_clients_on_vpn_failover of this UpdateNetworkSsidRequest.
        :rtype: bool
        """
        return self._disassociate_clients_on_vpn_failover

    @disassociate_clients_on_vpn_failover.setter
    def disassociate_clients_on_vpn_failover(self, disassociate_clients_on_vpn_failover):
        """Sets the disassociate_clients_on_vpn_failover of this UpdateNetworkSsidRequest.

        Disassociate clients when 'VPN' concentrator failover occurs in order to trigger clients to re-associate and generate new DHCP requests. This param is only valid if ipAssignmentMode is 'VPN'.

        :param disassociate_clients_on_vpn_failover: The disassociate_clients_on_vpn_failover of this UpdateNetworkSsidRequest.
        :type disassociate_clients_on_vpn_failover: bool
        """

        self._disassociate_clients_on_vpn_failover = disassociate_clients_on_vpn_failover

    @property
    def enabled(self):
        """Gets the enabled of this UpdateNetworkSsidRequest.

        Whether or not the SSID is enabled

        :return: The enabled of this UpdateNetworkSsidRequest.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this UpdateNetworkSsidRequest.

        Whether or not the SSID is enabled

        :param enabled: The enabled of this UpdateNetworkSsidRequest.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def encryption_mode(self):
        """Gets the encryption_mode of this UpdateNetworkSsidRequest.

        The psk encryption mode for the SSID ('wep' or 'wpa'). This param is only valid if the authMode is 'psk'

        :return: The encryption_mode of this UpdateNetworkSsidRequest.
        :rtype: str
        """
        return self._encryption_mode

    @encryption_mode.setter
    def encryption_mode(self, encryption_mode):
        """Sets the encryption_mode of this UpdateNetworkSsidRequest.

        The psk encryption mode for the SSID ('wep' or 'wpa'). This param is only valid if the authMode is 'psk'

        :param encryption_mode: The encryption_mode of this UpdateNetworkSsidRequest.
        :type encryption_mode: str
        """
        allowed_values = ["wep", "wpa"]  # noqa: E501
        if encryption_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `encryption_mode` ({0}), must be one of {1}"
                .format(encryption_mode, allowed_values)
            )

        self._encryption_mode = encryption_mode

    @property
    def enterprise_admin_access(self):
        """Gets the enterprise_admin_access of this UpdateNetworkSsidRequest.

        Whether or not an SSID is accessible by 'enterprise' administrators ('access disabled' or 'access enabled')

        :return: The enterprise_admin_access of this UpdateNetworkSsidRequest.
        :rtype: str
        """
        return self._enterprise_admin_access

    @enterprise_admin_access.setter
    def enterprise_admin_access(self, enterprise_admin_access):
        """Sets the enterprise_admin_access of this UpdateNetworkSsidRequest.

        Whether or not an SSID is accessible by 'enterprise' administrators ('access disabled' or 'access enabled')

        :param enterprise_admin_access: The enterprise_admin_access of this UpdateNetworkSsidRequest.
        :type enterprise_admin_access: str
        """
        allowed_values = ["access disabled", "access enabled"]  # noqa: E501
        if enterprise_admin_access not in allowed_values:
            raise ValueError(
                "Invalid value for `enterprise_admin_access` ({0}), must be one of {1}"
                .format(enterprise_admin_access, allowed_values)
            )

        self._enterprise_admin_access = enterprise_admin_access

    @property
    def ip_assignment_mode(self):
        """Gets the ip_assignment_mode of this UpdateNetworkSsidRequest.

        The client IP assignment mode ('NAT mode', 'Bridge mode', 'Layer 3 roaming', 'Ethernet over GRE', 'Layer 3 roaming with a concentrator' or 'VPN')

        :return: The ip_assignment_mode of this UpdateNetworkSsidRequest.
        :rtype: str
        """
        return self._ip_assignment_mode

    @ip_assignment_mode.setter
    def ip_assignment_mode(self, ip_assignment_mode):
        """Sets the ip_assignment_mode of this UpdateNetworkSsidRequest.

        The client IP assignment mode ('NAT mode', 'Bridge mode', 'Layer 3 roaming', 'Ethernet over GRE', 'Layer 3 roaming with a concentrator' or 'VPN')

        :param ip_assignment_mode: The ip_assignment_mode of this UpdateNetworkSsidRequest.
        :type ip_assignment_mode: str
        """

        self._ip_assignment_mode = ip_assignment_mode

    @property
    def lan_isolation_enabled(self):
        """Gets the lan_isolation_enabled of this UpdateNetworkSsidRequest.

        Boolean indicating whether Layer 2 LAN isolation should be enabled or disabled. Only configurable when ipAssignmentMode is 'Bridge mode'.

        :return: The lan_isolation_enabled of this UpdateNetworkSsidRequest.
        :rtype: bool
        """
        return self._lan_isolation_enabled

    @lan_isolation_enabled.setter
    def lan_isolation_enabled(self, lan_isolation_enabled):
        """Sets the lan_isolation_enabled of this UpdateNetworkSsidRequest.

        Boolean indicating whether Layer 2 LAN isolation should be enabled or disabled. Only configurable when ipAssignmentMode is 'Bridge mode'.

        :param lan_isolation_enabled: The lan_isolation_enabled of this UpdateNetworkSsidRequest.
        :type lan_isolation_enabled: bool
        """

        self._lan_isolation_enabled = lan_isolation_enabled

    @property
    def min_bitrate(self):
        """Gets the min_bitrate of this UpdateNetworkSsidRequest.

        The minimum bitrate in Mbps of this SSID in the default indoor RF profile. ('1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54')

        :return: The min_bitrate of this UpdateNetworkSsidRequest.
        :rtype: float
        """
        return self._min_bitrate

    @min_bitrate.setter
    def min_bitrate(self, min_bitrate):
        """Sets the min_bitrate of this UpdateNetworkSsidRequest.

        The minimum bitrate in Mbps of this SSID in the default indoor RF profile. ('1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54')

        :param min_bitrate: The min_bitrate of this UpdateNetworkSsidRequest.
        :type min_bitrate: float
        """

        self._min_bitrate = min_bitrate

    @property
    def name(self):
        """Gets the name of this UpdateNetworkSsidRequest.

        The name of the SSID

        :return: The name of this UpdateNetworkSsidRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateNetworkSsidRequest.

        The name of the SSID

        :param name: The name of this UpdateNetworkSsidRequest.
        :type name: str
        """

        self._name = name

    @property
    def per_client_bandwidth_limit_down(self):
        """Gets the per_client_bandwidth_limit_down of this UpdateNetworkSsidRequest.

        The download bandwidth limit in Kbps. (0 represents no limit.)

        :return: The per_client_bandwidth_limit_down of this UpdateNetworkSsidRequest.
        :rtype: int
        """
        return self._per_client_bandwidth_limit_down

    @per_client_bandwidth_limit_down.setter
    def per_client_bandwidth_limit_down(self, per_client_bandwidth_limit_down):
        """Sets the per_client_bandwidth_limit_down of this UpdateNetworkSsidRequest.

        The download bandwidth limit in Kbps. (0 represents no limit.)

        :param per_client_bandwidth_limit_down: The per_client_bandwidth_limit_down of this UpdateNetworkSsidRequest.
        :type per_client_bandwidth_limit_down: int
        """

        self._per_client_bandwidth_limit_down = per_client_bandwidth_limit_down

    @property
    def per_client_bandwidth_limit_up(self):
        """Gets the per_client_bandwidth_limit_up of this UpdateNetworkSsidRequest.

        The upload bandwidth limit in Kbps. (0 represents no limit.)

        :return: The per_client_bandwidth_limit_up of this UpdateNetworkSsidRequest.
        :rtype: int
        """
        return self._per_client_bandwidth_limit_up

    @per_client_bandwidth_limit_up.setter
    def per_client_bandwidth_limit_up(self, per_client_bandwidth_limit_up):
        """Sets the per_client_bandwidth_limit_up of this UpdateNetworkSsidRequest.

        The upload bandwidth limit in Kbps. (0 represents no limit.)

        :param per_client_bandwidth_limit_up: The per_client_bandwidth_limit_up of this UpdateNetworkSsidRequest.
        :type per_client_bandwidth_limit_up: int
        """

        self._per_client_bandwidth_limit_up = per_client_bandwidth_limit_up

    @property
    def psk(self):
        """Gets the psk of this UpdateNetworkSsidRequest.

        The passkey for the SSID. This param is only valid if the authMode is 'psk'

        :return: The psk of this UpdateNetworkSsidRequest.
        :rtype: str
        """
        return self._psk

    @psk.setter
    def psk(self, psk):
        """Sets the psk of this UpdateNetworkSsidRequest.

        The passkey for the SSID. This param is only valid if the authMode is 'psk'

        :param psk: The psk of this UpdateNetworkSsidRequest.
        :type psk: str
        """

        self._psk = psk

    @property
    def radius_accounting_enabled(self):
        """Gets the radius_accounting_enabled of this UpdateNetworkSsidRequest.

        Whether or not RADIUS accounting is enabled. This param is only valid if the authMode is 'open-with-radius', '8021x-radius' or 'ipsk-with-radius'

        :return: The radius_accounting_enabled of this UpdateNetworkSsidRequest.
        :rtype: bool
        """
        return self._radius_accounting_enabled

    @radius_accounting_enabled.setter
    def radius_accounting_enabled(self, radius_accounting_enabled):
        """Sets the radius_accounting_enabled of this UpdateNetworkSsidRequest.

        Whether or not RADIUS accounting is enabled. This param is only valid if the authMode is 'open-with-radius', '8021x-radius' or 'ipsk-with-radius'

        :param radius_accounting_enabled: The radius_accounting_enabled of this UpdateNetworkSsidRequest.
        :type radius_accounting_enabled: bool
        """

        self._radius_accounting_enabled = radius_accounting_enabled

    @property
    def radius_accounting_servers(self):
        """Gets the radius_accounting_servers of this UpdateNetworkSsidRequest.

        The RADIUS accounting 802.1X servers to be used for authentication. This param is only valid if the authMode is 'open-with-radius', '8021x-radius' or 'ipsk-with-radius' and radiusAccountingEnabled is 'true'

        :return: The radius_accounting_servers of this UpdateNetworkSsidRequest.
        :rtype: List[UpdateNetworkSsidRequestRadiusAccountingServersInner]
        """
        return self._radius_accounting_servers

    @radius_accounting_servers.setter
    def radius_accounting_servers(self, radius_accounting_servers):
        """Sets the radius_accounting_servers of this UpdateNetworkSsidRequest.

        The RADIUS accounting 802.1X servers to be used for authentication. This param is only valid if the authMode is 'open-with-radius', '8021x-radius' or 'ipsk-with-radius' and radiusAccountingEnabled is 'true'

        :param radius_accounting_servers: The radius_accounting_servers of this UpdateNetworkSsidRequest.
        :type radius_accounting_servers: List[UpdateNetworkSsidRequestRadiusAccountingServersInner]
        """

        self._radius_accounting_servers = radius_accounting_servers

    @property
    def radius_attribute_for_group_policies(self):
        """Gets the radius_attribute_for_group_policies of this UpdateNetworkSsidRequest.

        Specify the RADIUS attribute used to look up group policies ('Filter-Id', 'Reply-Message', 'Airespace-ACL-Name' or 'Aruba-User-Role'). Access points must receive this attribute in the RADIUS Access-Accept message

        :return: The radius_attribute_for_group_policies of this UpdateNetworkSsidRequest.
        :rtype: str
        """
        return self._radius_attribute_for_group_policies

    @radius_attribute_for_group_policies.setter
    def radius_attribute_for_group_policies(self, radius_attribute_for_group_policies):
        """Sets the radius_attribute_for_group_policies of this UpdateNetworkSsidRequest.

        Specify the RADIUS attribute used to look up group policies ('Filter-Id', 'Reply-Message', 'Airespace-ACL-Name' or 'Aruba-User-Role'). Access points must receive this attribute in the RADIUS Access-Accept message

        :param radius_attribute_for_group_policies: The radius_attribute_for_group_policies of this UpdateNetworkSsidRequest.
        :type radius_attribute_for_group_policies: str
        """

        self._radius_attribute_for_group_policies = radius_attribute_for_group_policies

    @property
    def radius_coa_enabled(self):
        """Gets the radius_coa_enabled of this UpdateNetworkSsidRequest.

        If true, Meraki devices will act as a RADIUS Dynamic Authorization Server and will respond to RADIUS Change-of-Authorization and Disconnect messages sent by the RADIUS server.

        :return: The radius_coa_enabled of this UpdateNetworkSsidRequest.
        :rtype: bool
        """
        return self._radius_coa_enabled

    @radius_coa_enabled.setter
    def radius_coa_enabled(self, radius_coa_enabled):
        """Sets the radius_coa_enabled of this UpdateNetworkSsidRequest.

        If true, Meraki devices will act as a RADIUS Dynamic Authorization Server and will respond to RADIUS Change-of-Authorization and Disconnect messages sent by the RADIUS server.

        :param radius_coa_enabled: The radius_coa_enabled of this UpdateNetworkSsidRequest.
        :type radius_coa_enabled: bool
        """

        self._radius_coa_enabled = radius_coa_enabled

    @property
    def radius_failover_policy(self):
        """Gets the radius_failover_policy of this UpdateNetworkSsidRequest.

        This policy determines how authentication requests should be handled in the event that all of the configured RADIUS servers are unreachable ('Deny access' or 'Allow access')

        :return: The radius_failover_policy of this UpdateNetworkSsidRequest.
        :rtype: str
        """
        return self._radius_failover_policy

    @radius_failover_policy.setter
    def radius_failover_policy(self, radius_failover_policy):
        """Sets the radius_failover_policy of this UpdateNetworkSsidRequest.

        This policy determines how authentication requests should be handled in the event that all of the configured RADIUS servers are unreachable ('Deny access' or 'Allow access')

        :param radius_failover_policy: The radius_failover_policy of this UpdateNetworkSsidRequest.
        :type radius_failover_policy: str
        """
        allowed_values = ["Allow access", "Deny access"]  # noqa: E501
        if radius_failover_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `radius_failover_policy` ({0}), must be one of {1}"
                .format(radius_failover_policy, allowed_values)
            )

        self._radius_failover_policy = radius_failover_policy

    @property
    def radius_load_balancing_policy(self):
        """Gets the radius_load_balancing_policy of this UpdateNetworkSsidRequest.

        This policy determines which RADIUS server will be contacted first in an authentication attempt and the ordering of any necessary retry attempts ('Strict priority order' or 'Round robin')

        :return: The radius_load_balancing_policy of this UpdateNetworkSsidRequest.
        :rtype: str
        """
        return self._radius_load_balancing_policy

    @radius_load_balancing_policy.setter
    def radius_load_balancing_policy(self, radius_load_balancing_policy):
        """Sets the radius_load_balancing_policy of this UpdateNetworkSsidRequest.

        This policy determines which RADIUS server will be contacted first in an authentication attempt and the ordering of any necessary retry attempts ('Strict priority order' or 'Round robin')

        :param radius_load_balancing_policy: The radius_load_balancing_policy of this UpdateNetworkSsidRequest.
        :type radius_load_balancing_policy: str
        """
        allowed_values = ["Round robin", "Strict priority order"]  # noqa: E501
        if radius_load_balancing_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `radius_load_balancing_policy` ({0}), must be one of {1}"
                .format(radius_load_balancing_policy, allowed_values)
            )

        self._radius_load_balancing_policy = radius_load_balancing_policy

    @property
    def radius_override(self):
        """Gets the radius_override of this UpdateNetworkSsidRequest.

        If true, the RADIUS response can override VLAN tag. This is not valid when ipAssignmentMode is 'NAT mode'.

        :return: The radius_override of this UpdateNetworkSsidRequest.
        :rtype: bool
        """
        return self._radius_override

    @radius_override.setter
    def radius_override(self, radius_override):
        """Sets the radius_override of this UpdateNetworkSsidRequest.

        If true, the RADIUS response can override VLAN tag. This is not valid when ipAssignmentMode is 'NAT mode'.

        :param radius_override: The radius_override of this UpdateNetworkSsidRequest.
        :type radius_override: bool
        """

        self._radius_override = radius_override

    @property
    def radius_servers(self):
        """Gets the radius_servers of this UpdateNetworkSsidRequest.

        The RADIUS 802.1X servers to be used for authentication. This param is only valid if the authMode is 'open-with-radius', '8021x-radius' or 'ipsk-with-radius'

        :return: The radius_servers of this UpdateNetworkSsidRequest.
        :rtype: List[UpdateNetworkSsidRequestRadiusServersInner]
        """
        return self._radius_servers

    @radius_servers.setter
    def radius_servers(self, radius_servers):
        """Sets the radius_servers of this UpdateNetworkSsidRequest.

        The RADIUS 802.1X servers to be used for authentication. This param is only valid if the authMode is 'open-with-radius', '8021x-radius' or 'ipsk-with-radius'

        :param radius_servers: The radius_servers of this UpdateNetworkSsidRequest.
        :type radius_servers: List[UpdateNetworkSsidRequestRadiusServersInner]
        """

        self._radius_servers = radius_servers

    @property
    def secondary_concentrator_network_id(self):
        """Gets the secondary_concentrator_network_id of this UpdateNetworkSsidRequest.

        The secondary concentrator to use when the ipAssignmentMode is 'VPN'. If configured, the APs will switch to using this concentrator if the primary concentrator is unreachable. This param is optional. ('disabled' represents no secondary concentrator.)

        :return: The secondary_concentrator_network_id of this UpdateNetworkSsidRequest.
        :rtype: str
        """
        return self._secondary_concentrator_network_id

    @secondary_concentrator_network_id.setter
    def secondary_concentrator_network_id(self, secondary_concentrator_network_id):
        """Sets the secondary_concentrator_network_id of this UpdateNetworkSsidRequest.

        The secondary concentrator to use when the ipAssignmentMode is 'VPN'. If configured, the APs will switch to using this concentrator if the primary concentrator is unreachable. This param is optional. ('disabled' represents no secondary concentrator.)

        :param secondary_concentrator_network_id: The secondary_concentrator_network_id of this UpdateNetworkSsidRequest.
        :type secondary_concentrator_network_id: str
        """

        self._secondary_concentrator_network_id = secondary_concentrator_network_id

    @property
    def splash_page(self):
        """Gets the splash_page of this UpdateNetworkSsidRequest.

        The type of splash page for the SSID ('None', 'Click-through splash page', 'Billing', 'Password-protected with Meraki RADIUS', 'Password-protected with custom RADIUS', 'Password-protected with Active Directory', 'Password-protected with LDAP', 'SMS authentication', 'Systems Manager Sentry', 'Facebook Wi-Fi', 'Google OAuth', 'Sponsored guest', 'Cisco ISE' or 'Google Apps domain'). This attribute is not supported for template children.

        :return: The splash_page of this UpdateNetworkSsidRequest.
        :rtype: str
        """
        return self._splash_page

    @splash_page.setter
    def splash_page(self, splash_page):
        """Sets the splash_page of this UpdateNetworkSsidRequest.

        The type of splash page for the SSID ('None', 'Click-through splash page', 'Billing', 'Password-protected with Meraki RADIUS', 'Password-protected with custom RADIUS', 'Password-protected with Active Directory', 'Password-protected with LDAP', 'SMS authentication', 'Systems Manager Sentry', 'Facebook Wi-Fi', 'Google OAuth', 'Sponsored guest', 'Cisco ISE' or 'Google Apps domain'). This attribute is not supported for template children.

        :param splash_page: The splash_page of this UpdateNetworkSsidRequest.
        :type splash_page: str
        """
        allowed_values = ["Billing", "Cisco ISE", "Click-through splash page", "Facebook Wi-Fi", "Google Apps domain", "Google OAuth", "None", "Password-protected with Active Directory", "Password-protected with LDAP", "Password-protected with Meraki RADIUS", "Password-protected with custom RADIUS", "SMS authentication", "Sponsored guest", "Systems Manager Sentry"]  # noqa: E501
        if splash_page not in allowed_values:
            raise ValueError(
                "Invalid value for `splash_page` ({0}), must be one of {1}"
                .format(splash_page, allowed_values)
            )

        self._splash_page = splash_page

    @property
    def use_vlan_tagging(self):
        """Gets the use_vlan_tagging of this UpdateNetworkSsidRequest.

        Whether or not traffic should be directed to use specific VLANs. This param is only valid if the ipAssignmentMode is 'Bridge mode' or 'Layer 3 roaming'

        :return: The use_vlan_tagging of this UpdateNetworkSsidRequest.
        :rtype: bool
        """
        return self._use_vlan_tagging

    @use_vlan_tagging.setter
    def use_vlan_tagging(self, use_vlan_tagging):
        """Sets the use_vlan_tagging of this UpdateNetworkSsidRequest.

        Whether or not traffic should be directed to use specific VLANs. This param is only valid if the ipAssignmentMode is 'Bridge mode' or 'Layer 3 roaming'

        :param use_vlan_tagging: The use_vlan_tagging of this UpdateNetworkSsidRequest.
        :type use_vlan_tagging: bool
        """

        self._use_vlan_tagging = use_vlan_tagging

    @property
    def visible(self):
        """Gets the visible of this UpdateNetworkSsidRequest.

        Boolean indicating whether APs should advertise or hide this SSID. APs will only broadcast this SSID if set to true

        :return: The visible of this UpdateNetworkSsidRequest.
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this UpdateNetworkSsidRequest.

        Boolean indicating whether APs should advertise or hide this SSID. APs will only broadcast this SSID if set to true

        :param visible: The visible of this UpdateNetworkSsidRequest.
        :type visible: bool
        """

        self._visible = visible

    @property
    def vlan_id(self):
        """Gets the vlan_id of this UpdateNetworkSsidRequest.

        The VLAN ID used for VLAN tagging. This param is only valid when the ipAssignmentMode is 'Layer 3 roaming with a concentrator' or 'VPN'

        :return: The vlan_id of this UpdateNetworkSsidRequest.
        :rtype: int
        """
        return self._vlan_id

    @vlan_id.setter
    def vlan_id(self, vlan_id):
        """Sets the vlan_id of this UpdateNetworkSsidRequest.

        The VLAN ID used for VLAN tagging. This param is only valid when the ipAssignmentMode is 'Layer 3 roaming with a concentrator' or 'VPN'

        :param vlan_id: The vlan_id of this UpdateNetworkSsidRequest.
        :type vlan_id: int
        """

        self._vlan_id = vlan_id

    @property
    def walled_garden_enabled(self):
        """Gets the walled_garden_enabled of this UpdateNetworkSsidRequest.

        Allow access to a configurable list of IP ranges, which users may access prior to sign-on.

        :return: The walled_garden_enabled of this UpdateNetworkSsidRequest.
        :rtype: bool
        """
        return self._walled_garden_enabled

    @walled_garden_enabled.setter
    def walled_garden_enabled(self, walled_garden_enabled):
        """Sets the walled_garden_enabled of this UpdateNetworkSsidRequest.

        Allow access to a configurable list of IP ranges, which users may access prior to sign-on.

        :param walled_garden_enabled: The walled_garden_enabled of this UpdateNetworkSsidRequest.
        :type walled_garden_enabled: bool
        """

        self._walled_garden_enabled = walled_garden_enabled

    @property
    def walled_garden_ranges(self):
        """Gets the walled_garden_ranges of this UpdateNetworkSsidRequest.

        Specify your walled garden by entering space-separated addresses, ranges using CIDR notation, domain names, and domain wildcards (e.g. 192.168.1.1/24 192.168.37.10/32 www.yahoo.com *.google.com). Meraki's splash page is automatically included in your walled garden.

        :return: The walled_garden_ranges of this UpdateNetworkSsidRequest.
        :rtype: str
        """
        return self._walled_garden_ranges

    @walled_garden_ranges.setter
    def walled_garden_ranges(self, walled_garden_ranges):
        """Sets the walled_garden_ranges of this UpdateNetworkSsidRequest.

        Specify your walled garden by entering space-separated addresses, ranges using CIDR notation, domain names, and domain wildcards (e.g. 192.168.1.1/24 192.168.37.10/32 www.yahoo.com *.google.com). Meraki's splash page is automatically included in your walled garden.

        :param walled_garden_ranges: The walled_garden_ranges of this UpdateNetworkSsidRequest.
        :type walled_garden_ranges: str
        """

        self._walled_garden_ranges = walled_garden_ranges

    @property
    def wpa_encryption_mode(self):
        """Gets the wpa_encryption_mode of this UpdateNetworkSsidRequest.

        The types of WPA encryption. ('WPA1 only', 'WPA1 and WPA2', 'WPA2 only', 'WPA3 Transition Mode', 'WPA3 only' or 'WPA3 192-bit Security')

        :return: The wpa_encryption_mode of this UpdateNetworkSsidRequest.
        :rtype: str
        """
        return self._wpa_encryption_mode

    @wpa_encryption_mode.setter
    def wpa_encryption_mode(self, wpa_encryption_mode):
        """Sets the wpa_encryption_mode of this UpdateNetworkSsidRequest.

        The types of WPA encryption. ('WPA1 only', 'WPA1 and WPA2', 'WPA2 only', 'WPA3 Transition Mode', 'WPA3 only' or 'WPA3 192-bit Security')

        :param wpa_encryption_mode: The wpa_encryption_mode of this UpdateNetworkSsidRequest.
        :type wpa_encryption_mode: str
        """
        allowed_values = ["WPA1 and WPA2", "WPA1 only", "WPA2 only", "WPA3 192-bit Security", "WPA3 Transition Mode", "WPA3 only"]  # noqa: E501
        if wpa_encryption_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `wpa_encryption_mode` ({0}), must be one of {1}"
                .format(wpa_encryption_mode, allowed_values)
            )

        self._wpa_encryption_mode = wpa_encryption_mode
