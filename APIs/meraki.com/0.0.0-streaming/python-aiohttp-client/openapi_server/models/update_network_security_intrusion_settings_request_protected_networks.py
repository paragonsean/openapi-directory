# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateNetworkSecurityIntrusionSettingsRequestProtectedNetworks(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, excluded_cidr: List[str]=None, included_cidr: List[str]=None, use_default: bool=None):
        """UpdateNetworkSecurityIntrusionSettingsRequestProtectedNetworks - a model defined in OpenAPI

        :param excluded_cidr: The excluded_cidr of this UpdateNetworkSecurityIntrusionSettingsRequestProtectedNetworks.
        :param included_cidr: The included_cidr of this UpdateNetworkSecurityIntrusionSettingsRequestProtectedNetworks.
        :param use_default: The use_default of this UpdateNetworkSecurityIntrusionSettingsRequestProtectedNetworks.
        """
        self.openapi_types = {
            'excluded_cidr': List[str],
            'included_cidr': List[str],
            'use_default': bool
        }

        self.attribute_map = {
            'excluded_cidr': 'excludedCidr',
            'included_cidr': 'includedCidr',
            'use_default': 'useDefault'
        }

        self._excluded_cidr = excluded_cidr
        self._included_cidr = included_cidr
        self._use_default = use_default

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateNetworkSecurityIntrusionSettingsRequestProtectedNetworks':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateNetworkSecurityIntrusionSettings_request_protectedNetworks of this UpdateNetworkSecurityIntrusionSettingsRequestProtectedNetworks.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def excluded_cidr(self):
        """Gets the excluded_cidr of this UpdateNetworkSecurityIntrusionSettingsRequestProtectedNetworks.

        list of IP addresses or subnets being excluded from protection (required if 'useDefault' is false)

        :return: The excluded_cidr of this UpdateNetworkSecurityIntrusionSettingsRequestProtectedNetworks.
        :rtype: List[str]
        """
        return self._excluded_cidr

    @excluded_cidr.setter
    def excluded_cidr(self, excluded_cidr):
        """Sets the excluded_cidr of this UpdateNetworkSecurityIntrusionSettingsRequestProtectedNetworks.

        list of IP addresses or subnets being excluded from protection (required if 'useDefault' is false)

        :param excluded_cidr: The excluded_cidr of this UpdateNetworkSecurityIntrusionSettingsRequestProtectedNetworks.
        :type excluded_cidr: List[str]
        """

        self._excluded_cidr = excluded_cidr

    @property
    def included_cidr(self):
        """Gets the included_cidr of this UpdateNetworkSecurityIntrusionSettingsRequestProtectedNetworks.

        list of IP addresses or subnets being protected (required if 'useDefault' is false)

        :return: The included_cidr of this UpdateNetworkSecurityIntrusionSettingsRequestProtectedNetworks.
        :rtype: List[str]
        """
        return self._included_cidr

    @included_cidr.setter
    def included_cidr(self, included_cidr):
        """Sets the included_cidr of this UpdateNetworkSecurityIntrusionSettingsRequestProtectedNetworks.

        list of IP addresses or subnets being protected (required if 'useDefault' is false)

        :param included_cidr: The included_cidr of this UpdateNetworkSecurityIntrusionSettingsRequestProtectedNetworks.
        :type included_cidr: List[str]
        """

        self._included_cidr = included_cidr

    @property
    def use_default(self):
        """Gets the use_default of this UpdateNetworkSecurityIntrusionSettingsRequestProtectedNetworks.

        true/false whether to use special IPv4 addresses: https://tools.ietf.org/html/rfc5735 (required). Default value is true if none currently saved

        :return: The use_default of this UpdateNetworkSecurityIntrusionSettingsRequestProtectedNetworks.
        :rtype: bool
        """
        return self._use_default

    @use_default.setter
    def use_default(self, use_default):
        """Sets the use_default of this UpdateNetworkSecurityIntrusionSettingsRequestProtectedNetworks.

        true/false whether to use special IPv4 addresses: https://tools.ietf.org/html/rfc5735 (required). Default value is true if none currently saved

        :param use_default: The use_default of this UpdateNetworkSecurityIntrusionSettingsRequestProtectedNetworks.
        :type use_default: bool
        """

        self._use_default = use_default
