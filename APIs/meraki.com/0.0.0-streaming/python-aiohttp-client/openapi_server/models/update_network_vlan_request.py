# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_network_static_route_request_reserved_ip_ranges_inner import UpdateNetworkStaticRouteRequestReservedIpRangesInner
from openapi_server.models.update_network_vlan_request_dhcp_options_inner import UpdateNetworkVlanRequestDhcpOptionsInner
from openapi_server import util


class UpdateNetworkVlanRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, appliance_ip: str=None, dhcp_boot_filename: str=None, dhcp_boot_next_server: str=None, dhcp_boot_options_enabled: bool=None, dhcp_handling: str=None, dhcp_lease_time: str=None, dhcp_options: List[UpdateNetworkVlanRequestDhcpOptionsInner]=None, dhcp_relay_server_ips: List[str]=None, dns_nameservers: str=None, fixed_ip_assignments: object=None, group_policy_id: str=None, name: str=None, reserved_ip_ranges: List[UpdateNetworkStaticRouteRequestReservedIpRangesInner]=None, subnet: str=None, vpn_nat_subnet: str=None):
        """UpdateNetworkVlanRequest - a model defined in OpenAPI

        :param appliance_ip: The appliance_ip of this UpdateNetworkVlanRequest.
        :param dhcp_boot_filename: The dhcp_boot_filename of this UpdateNetworkVlanRequest.
        :param dhcp_boot_next_server: The dhcp_boot_next_server of this UpdateNetworkVlanRequest.
        :param dhcp_boot_options_enabled: The dhcp_boot_options_enabled of this UpdateNetworkVlanRequest.
        :param dhcp_handling: The dhcp_handling of this UpdateNetworkVlanRequest.
        :param dhcp_lease_time: The dhcp_lease_time of this UpdateNetworkVlanRequest.
        :param dhcp_options: The dhcp_options of this UpdateNetworkVlanRequest.
        :param dhcp_relay_server_ips: The dhcp_relay_server_ips of this UpdateNetworkVlanRequest.
        :param dns_nameservers: The dns_nameservers of this UpdateNetworkVlanRequest.
        :param fixed_ip_assignments: The fixed_ip_assignments of this UpdateNetworkVlanRequest.
        :param group_policy_id: The group_policy_id of this UpdateNetworkVlanRequest.
        :param name: The name of this UpdateNetworkVlanRequest.
        :param reserved_ip_ranges: The reserved_ip_ranges of this UpdateNetworkVlanRequest.
        :param subnet: The subnet of this UpdateNetworkVlanRequest.
        :param vpn_nat_subnet: The vpn_nat_subnet of this UpdateNetworkVlanRequest.
        """
        self.openapi_types = {
            'appliance_ip': str,
            'dhcp_boot_filename': str,
            'dhcp_boot_next_server': str,
            'dhcp_boot_options_enabled': bool,
            'dhcp_handling': str,
            'dhcp_lease_time': str,
            'dhcp_options': List[UpdateNetworkVlanRequestDhcpOptionsInner],
            'dhcp_relay_server_ips': List[str],
            'dns_nameservers': str,
            'fixed_ip_assignments': object,
            'group_policy_id': str,
            'name': str,
            'reserved_ip_ranges': List[UpdateNetworkStaticRouteRequestReservedIpRangesInner],
            'subnet': str,
            'vpn_nat_subnet': str
        }

        self.attribute_map = {
            'appliance_ip': 'applianceIp',
            'dhcp_boot_filename': 'dhcpBootFilename',
            'dhcp_boot_next_server': 'dhcpBootNextServer',
            'dhcp_boot_options_enabled': 'dhcpBootOptionsEnabled',
            'dhcp_handling': 'dhcpHandling',
            'dhcp_lease_time': 'dhcpLeaseTime',
            'dhcp_options': 'dhcpOptions',
            'dhcp_relay_server_ips': 'dhcpRelayServerIps',
            'dns_nameservers': 'dnsNameservers',
            'fixed_ip_assignments': 'fixedIpAssignments',
            'group_policy_id': 'groupPolicyId',
            'name': 'name',
            'reserved_ip_ranges': 'reservedIpRanges',
            'subnet': 'subnet',
            'vpn_nat_subnet': 'vpnNatSubnet'
        }

        self._appliance_ip = appliance_ip
        self._dhcp_boot_filename = dhcp_boot_filename
        self._dhcp_boot_next_server = dhcp_boot_next_server
        self._dhcp_boot_options_enabled = dhcp_boot_options_enabled
        self._dhcp_handling = dhcp_handling
        self._dhcp_lease_time = dhcp_lease_time
        self._dhcp_options = dhcp_options
        self._dhcp_relay_server_ips = dhcp_relay_server_ips
        self._dns_nameservers = dns_nameservers
        self._fixed_ip_assignments = fixed_ip_assignments
        self._group_policy_id = group_policy_id
        self._name = name
        self._reserved_ip_ranges = reserved_ip_ranges
        self._subnet = subnet
        self._vpn_nat_subnet = vpn_nat_subnet

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateNetworkVlanRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateNetworkVlan_request of this UpdateNetworkVlanRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def appliance_ip(self):
        """Gets the appliance_ip of this UpdateNetworkVlanRequest.

        The local IP of the appliance on the VLAN

        :return: The appliance_ip of this UpdateNetworkVlanRequest.
        :rtype: str
        """
        return self._appliance_ip

    @appliance_ip.setter
    def appliance_ip(self, appliance_ip):
        """Sets the appliance_ip of this UpdateNetworkVlanRequest.

        The local IP of the appliance on the VLAN

        :param appliance_ip: The appliance_ip of this UpdateNetworkVlanRequest.
        :type appliance_ip: str
        """

        self._appliance_ip = appliance_ip

    @property
    def dhcp_boot_filename(self):
        """Gets the dhcp_boot_filename of this UpdateNetworkVlanRequest.

        DHCP boot option for boot filename

        :return: The dhcp_boot_filename of this UpdateNetworkVlanRequest.
        :rtype: str
        """
        return self._dhcp_boot_filename

    @dhcp_boot_filename.setter
    def dhcp_boot_filename(self, dhcp_boot_filename):
        """Sets the dhcp_boot_filename of this UpdateNetworkVlanRequest.

        DHCP boot option for boot filename

        :param dhcp_boot_filename: The dhcp_boot_filename of this UpdateNetworkVlanRequest.
        :type dhcp_boot_filename: str
        """

        self._dhcp_boot_filename = dhcp_boot_filename

    @property
    def dhcp_boot_next_server(self):
        """Gets the dhcp_boot_next_server of this UpdateNetworkVlanRequest.

        DHCP boot option to direct boot clients to the server to load the boot file from

        :return: The dhcp_boot_next_server of this UpdateNetworkVlanRequest.
        :rtype: str
        """
        return self._dhcp_boot_next_server

    @dhcp_boot_next_server.setter
    def dhcp_boot_next_server(self, dhcp_boot_next_server):
        """Sets the dhcp_boot_next_server of this UpdateNetworkVlanRequest.

        DHCP boot option to direct boot clients to the server to load the boot file from

        :param dhcp_boot_next_server: The dhcp_boot_next_server of this UpdateNetworkVlanRequest.
        :type dhcp_boot_next_server: str
        """

        self._dhcp_boot_next_server = dhcp_boot_next_server

    @property
    def dhcp_boot_options_enabled(self):
        """Gets the dhcp_boot_options_enabled of this UpdateNetworkVlanRequest.

        Use DHCP boot options specified in other properties

        :return: The dhcp_boot_options_enabled of this UpdateNetworkVlanRequest.
        :rtype: bool
        """
        return self._dhcp_boot_options_enabled

    @dhcp_boot_options_enabled.setter
    def dhcp_boot_options_enabled(self, dhcp_boot_options_enabled):
        """Sets the dhcp_boot_options_enabled of this UpdateNetworkVlanRequest.

        Use DHCP boot options specified in other properties

        :param dhcp_boot_options_enabled: The dhcp_boot_options_enabled of this UpdateNetworkVlanRequest.
        :type dhcp_boot_options_enabled: bool
        """

        self._dhcp_boot_options_enabled = dhcp_boot_options_enabled

    @property
    def dhcp_handling(self):
        """Gets the dhcp_handling of this UpdateNetworkVlanRequest.

        The appliance's handling of DHCP requests on this VLAN. One of: 'Run a DHCP server', 'Relay DHCP to another server' or 'Do not respond to DHCP requests'

        :return: The dhcp_handling of this UpdateNetworkVlanRequest.
        :rtype: str
        """
        return self._dhcp_handling

    @dhcp_handling.setter
    def dhcp_handling(self, dhcp_handling):
        """Sets the dhcp_handling of this UpdateNetworkVlanRequest.

        The appliance's handling of DHCP requests on this VLAN. One of: 'Run a DHCP server', 'Relay DHCP to another server' or 'Do not respond to DHCP requests'

        :param dhcp_handling: The dhcp_handling of this UpdateNetworkVlanRequest.
        :type dhcp_handling: str
        """
        allowed_values = ["Do not respond to DHCP requests", "Relay DHCP to another server", "Run a DHCP server"]  # noqa: E501
        if dhcp_handling not in allowed_values:
            raise ValueError(
                "Invalid value for `dhcp_handling` ({0}), must be one of {1}"
                .format(dhcp_handling, allowed_values)
            )

        self._dhcp_handling = dhcp_handling

    @property
    def dhcp_lease_time(self):
        """Gets the dhcp_lease_time of this UpdateNetworkVlanRequest.

        The term of DHCP leases if the appliance is running a DHCP server on this VLAN. One of: '30 minutes', '1 hour', '4 hours', '12 hours', '1 day' or '1 week'

        :return: The dhcp_lease_time of this UpdateNetworkVlanRequest.
        :rtype: str
        """
        return self._dhcp_lease_time

    @dhcp_lease_time.setter
    def dhcp_lease_time(self, dhcp_lease_time):
        """Sets the dhcp_lease_time of this UpdateNetworkVlanRequest.

        The term of DHCP leases if the appliance is running a DHCP server on this VLAN. One of: '30 minutes', '1 hour', '4 hours', '12 hours', '1 day' or '1 week'

        :param dhcp_lease_time: The dhcp_lease_time of this UpdateNetworkVlanRequest.
        :type dhcp_lease_time: str
        """
        allowed_values = ["1 day", "1 hour", "1 week", "12 hours", "30 minutes", "4 hours"]  # noqa: E501
        if dhcp_lease_time not in allowed_values:
            raise ValueError(
                "Invalid value for `dhcp_lease_time` ({0}), must be one of {1}"
                .format(dhcp_lease_time, allowed_values)
            )

        self._dhcp_lease_time = dhcp_lease_time

    @property
    def dhcp_options(self):
        """Gets the dhcp_options of this UpdateNetworkVlanRequest.

        The list of DHCP options that will be included in DHCP responses. Each object in the list should have \"code\", \"type\", and \"value\" properties.

        :return: The dhcp_options of this UpdateNetworkVlanRequest.
        :rtype: List[UpdateNetworkVlanRequestDhcpOptionsInner]
        """
        return self._dhcp_options

    @dhcp_options.setter
    def dhcp_options(self, dhcp_options):
        """Sets the dhcp_options of this UpdateNetworkVlanRequest.

        The list of DHCP options that will be included in DHCP responses. Each object in the list should have \"code\", \"type\", and \"value\" properties.

        :param dhcp_options: The dhcp_options of this UpdateNetworkVlanRequest.
        :type dhcp_options: List[UpdateNetworkVlanRequestDhcpOptionsInner]
        """

        self._dhcp_options = dhcp_options

    @property
    def dhcp_relay_server_ips(self):
        """Gets the dhcp_relay_server_ips of this UpdateNetworkVlanRequest.

        The IPs of the DHCP servers that DHCP requests should be relayed to

        :return: The dhcp_relay_server_ips of this UpdateNetworkVlanRequest.
        :rtype: List[str]
        """
        return self._dhcp_relay_server_ips

    @dhcp_relay_server_ips.setter
    def dhcp_relay_server_ips(self, dhcp_relay_server_ips):
        """Sets the dhcp_relay_server_ips of this UpdateNetworkVlanRequest.

        The IPs of the DHCP servers that DHCP requests should be relayed to

        :param dhcp_relay_server_ips: The dhcp_relay_server_ips of this UpdateNetworkVlanRequest.
        :type dhcp_relay_server_ips: List[str]
        """

        self._dhcp_relay_server_ips = dhcp_relay_server_ips

    @property
    def dns_nameservers(self):
        """Gets the dns_nameservers of this UpdateNetworkVlanRequest.

        The DNS nameservers used for DHCP responses, either \"upstream_dns\", \"google_dns\", \"opendns\", or a newline seperated string of IP addresses or domain names

        :return: The dns_nameservers of this UpdateNetworkVlanRequest.
        :rtype: str
        """
        return self._dns_nameservers

    @dns_nameservers.setter
    def dns_nameservers(self, dns_nameservers):
        """Sets the dns_nameservers of this UpdateNetworkVlanRequest.

        The DNS nameservers used for DHCP responses, either \"upstream_dns\", \"google_dns\", \"opendns\", or a newline seperated string of IP addresses or domain names

        :param dns_nameservers: The dns_nameservers of this UpdateNetworkVlanRequest.
        :type dns_nameservers: str
        """

        self._dns_nameservers = dns_nameservers

    @property
    def fixed_ip_assignments(self):
        """Gets the fixed_ip_assignments of this UpdateNetworkVlanRequest.

        The DHCP fixed IP assignments on the VLAN. This should be an object that contains mappings from MAC addresses to objects that themselves each contain \"ip\" and \"name\" string fields. See the sample request/response for more details.

        :return: The fixed_ip_assignments of this UpdateNetworkVlanRequest.
        :rtype: object
        """
        return self._fixed_ip_assignments

    @fixed_ip_assignments.setter
    def fixed_ip_assignments(self, fixed_ip_assignments):
        """Sets the fixed_ip_assignments of this UpdateNetworkVlanRequest.

        The DHCP fixed IP assignments on the VLAN. This should be an object that contains mappings from MAC addresses to objects that themselves each contain \"ip\" and \"name\" string fields. See the sample request/response for more details.

        :param fixed_ip_assignments: The fixed_ip_assignments of this UpdateNetworkVlanRequest.
        :type fixed_ip_assignments: object
        """

        self._fixed_ip_assignments = fixed_ip_assignments

    @property
    def group_policy_id(self):
        """Gets the group_policy_id of this UpdateNetworkVlanRequest.

        The id of the desired group policy to apply to the VLAN

        :return: The group_policy_id of this UpdateNetworkVlanRequest.
        :rtype: str
        """
        return self._group_policy_id

    @group_policy_id.setter
    def group_policy_id(self, group_policy_id):
        """Sets the group_policy_id of this UpdateNetworkVlanRequest.

        The id of the desired group policy to apply to the VLAN

        :param group_policy_id: The group_policy_id of this UpdateNetworkVlanRequest.
        :type group_policy_id: str
        """

        self._group_policy_id = group_policy_id

    @property
    def name(self):
        """Gets the name of this UpdateNetworkVlanRequest.

        The name of the VLAN

        :return: The name of this UpdateNetworkVlanRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateNetworkVlanRequest.

        The name of the VLAN

        :param name: The name of this UpdateNetworkVlanRequest.
        :type name: str
        """

        self._name = name

    @property
    def reserved_ip_ranges(self):
        """Gets the reserved_ip_ranges of this UpdateNetworkVlanRequest.

        The DHCP reserved IP ranges on the VLAN

        :return: The reserved_ip_ranges of this UpdateNetworkVlanRequest.
        :rtype: List[UpdateNetworkStaticRouteRequestReservedIpRangesInner]
        """
        return self._reserved_ip_ranges

    @reserved_ip_ranges.setter
    def reserved_ip_ranges(self, reserved_ip_ranges):
        """Sets the reserved_ip_ranges of this UpdateNetworkVlanRequest.

        The DHCP reserved IP ranges on the VLAN

        :param reserved_ip_ranges: The reserved_ip_ranges of this UpdateNetworkVlanRequest.
        :type reserved_ip_ranges: List[UpdateNetworkStaticRouteRequestReservedIpRangesInner]
        """

        self._reserved_ip_ranges = reserved_ip_ranges

    @property
    def subnet(self):
        """Gets the subnet of this UpdateNetworkVlanRequest.

        The subnet of the VLAN

        :return: The subnet of this UpdateNetworkVlanRequest.
        :rtype: str
        """
        return self._subnet

    @subnet.setter
    def subnet(self, subnet):
        """Sets the subnet of this UpdateNetworkVlanRequest.

        The subnet of the VLAN

        :param subnet: The subnet of this UpdateNetworkVlanRequest.
        :type subnet: str
        """

        self._subnet = subnet

    @property
    def vpn_nat_subnet(self):
        """Gets the vpn_nat_subnet of this UpdateNetworkVlanRequest.

        The translated VPN subnet if VPN and VPN subnet translation are enabled on the VLAN

        :return: The vpn_nat_subnet of this UpdateNetworkVlanRequest.
        :rtype: str
        """
        return self._vpn_nat_subnet

    @vpn_nat_subnet.setter
    def vpn_nat_subnet(self, vpn_nat_subnet):
        """Sets the vpn_nat_subnet of this UpdateNetworkVlanRequest.

        The translated VPN subnet if VPN and VPN subnet translation are enabled on the VLAN

        :param vpn_nat_subnet: The vpn_nat_subnet of this UpdateNetworkVlanRequest.
        :type vpn_nat_subnet: str
        """

        self._vpn_nat_subnet = vpn_nat_subnet
