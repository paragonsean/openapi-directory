# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_network_one_to_one_nat_rules_request_rules_inner_allowed_inbound_inner import UpdateNetworkOneToOneNatRulesRequestRulesInnerAllowedInboundInner
from openapi_server import util


class UpdateNetworkOneToOneNatRulesRequestRulesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_inbound: List[UpdateNetworkOneToOneNatRulesRequestRulesInnerAllowedInboundInner]=None, lan_ip: str=None, name: str=None, public_ip: str=None, uplink: str=None):
        """UpdateNetworkOneToOneNatRulesRequestRulesInner - a model defined in OpenAPI

        :param allowed_inbound: The allowed_inbound of this UpdateNetworkOneToOneNatRulesRequestRulesInner.
        :param lan_ip: The lan_ip of this UpdateNetworkOneToOneNatRulesRequestRulesInner.
        :param name: The name of this UpdateNetworkOneToOneNatRulesRequestRulesInner.
        :param public_ip: The public_ip of this UpdateNetworkOneToOneNatRulesRequestRulesInner.
        :param uplink: The uplink of this UpdateNetworkOneToOneNatRulesRequestRulesInner.
        """
        self.openapi_types = {
            'allowed_inbound': List[UpdateNetworkOneToOneNatRulesRequestRulesInnerAllowedInboundInner],
            'lan_ip': str,
            'name': str,
            'public_ip': str,
            'uplink': str
        }

        self.attribute_map = {
            'allowed_inbound': 'allowedInbound',
            'lan_ip': 'lanIp',
            'name': 'name',
            'public_ip': 'publicIp',
            'uplink': 'uplink'
        }

        self._allowed_inbound = allowed_inbound
        self._lan_ip = lan_ip
        self._name = name
        self._public_ip = public_ip
        self._uplink = uplink

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateNetworkOneToOneNatRulesRequestRulesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateNetworkOneToOneNatRules_request_rules_inner of this UpdateNetworkOneToOneNatRulesRequestRulesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_inbound(self):
        """Gets the allowed_inbound of this UpdateNetworkOneToOneNatRulesRequestRulesInner.

        The ports this mapping will provide access on, and the remote IPs that will be allowed access to the resource

        :return: The allowed_inbound of this UpdateNetworkOneToOneNatRulesRequestRulesInner.
        :rtype: List[UpdateNetworkOneToOneNatRulesRequestRulesInnerAllowedInboundInner]
        """
        return self._allowed_inbound

    @allowed_inbound.setter
    def allowed_inbound(self, allowed_inbound):
        """Sets the allowed_inbound of this UpdateNetworkOneToOneNatRulesRequestRulesInner.

        The ports this mapping will provide access on, and the remote IPs that will be allowed access to the resource

        :param allowed_inbound: The allowed_inbound of this UpdateNetworkOneToOneNatRulesRequestRulesInner.
        :type allowed_inbound: List[UpdateNetworkOneToOneNatRulesRequestRulesInnerAllowedInboundInner]
        """

        self._allowed_inbound = allowed_inbound

    @property
    def lan_ip(self):
        """Gets the lan_ip of this UpdateNetworkOneToOneNatRulesRequestRulesInner.

        The IP address of the server or device that hosts the internal resource that you wish to make available on the WAN

        :return: The lan_ip of this UpdateNetworkOneToOneNatRulesRequestRulesInner.
        :rtype: str
        """
        return self._lan_ip

    @lan_ip.setter
    def lan_ip(self, lan_ip):
        """Sets the lan_ip of this UpdateNetworkOneToOneNatRulesRequestRulesInner.

        The IP address of the server or device that hosts the internal resource that you wish to make available on the WAN

        :param lan_ip: The lan_ip of this UpdateNetworkOneToOneNatRulesRequestRulesInner.
        :type lan_ip: str
        """
        if lan_ip is None:
            raise ValueError("Invalid value for `lan_ip`, must not be `None`")

        self._lan_ip = lan_ip

    @property
    def name(self):
        """Gets the name of this UpdateNetworkOneToOneNatRulesRequestRulesInner.

        A descriptive name for the rule

        :return: The name of this UpdateNetworkOneToOneNatRulesRequestRulesInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateNetworkOneToOneNatRulesRequestRulesInner.

        A descriptive name for the rule

        :param name: The name of this UpdateNetworkOneToOneNatRulesRequestRulesInner.
        :type name: str
        """

        self._name = name

    @property
    def public_ip(self):
        """Gets the public_ip of this UpdateNetworkOneToOneNatRulesRequestRulesInner.

        The IP address that will be used to access the internal resource from the WAN

        :return: The public_ip of this UpdateNetworkOneToOneNatRulesRequestRulesInner.
        :rtype: str
        """
        return self._public_ip

    @public_ip.setter
    def public_ip(self, public_ip):
        """Sets the public_ip of this UpdateNetworkOneToOneNatRulesRequestRulesInner.

        The IP address that will be used to access the internal resource from the WAN

        :param public_ip: The public_ip of this UpdateNetworkOneToOneNatRulesRequestRulesInner.
        :type public_ip: str
        """

        self._public_ip = public_ip

    @property
    def uplink(self):
        """Gets the uplink of this UpdateNetworkOneToOneNatRulesRequestRulesInner.

        The physical WAN interface on which the traffic will arrive ('internet1' or, if available, 'internet2')

        :return: The uplink of this UpdateNetworkOneToOneNatRulesRequestRulesInner.
        :rtype: str
        """
        return self._uplink

    @uplink.setter
    def uplink(self, uplink):
        """Sets the uplink of this UpdateNetworkOneToOneNatRulesRequestRulesInner.

        The physical WAN interface on which the traffic will arrive ('internet1' or, if available, 'internet2')

        :param uplink: The uplink of this UpdateNetworkOneToOneNatRulesRequestRulesInner.
        :type uplink: str
        """
        allowed_values = ["internet1", "internet2"]  # noqa: E501
        if uplink not in allowed_values:
            raise ValueError(
                "Invalid value for `uplink` ({0}), must be one of {1}"
                .format(uplink, allowed_values)
            )

        self._uplink = uplink
