# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_network_client_splash_authorization_status_request_ssids import UpdateNetworkClientSplashAuthorizationStatusRequestSsids
from openapi_server import util


class UpdateNetworkClientSplashAuthorizationStatusRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ssids: UpdateNetworkClientSplashAuthorizationStatusRequestSsids=None):
        """UpdateNetworkClientSplashAuthorizationStatusRequest - a model defined in OpenAPI

        :param ssids: The ssids of this UpdateNetworkClientSplashAuthorizationStatusRequest.
        """
        self.openapi_types = {
            'ssids': UpdateNetworkClientSplashAuthorizationStatusRequestSsids
        }

        self.attribute_map = {
            'ssids': 'ssids'
        }

        self._ssids = ssids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateNetworkClientSplashAuthorizationStatusRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateNetworkClientSplashAuthorizationStatus_request of this UpdateNetworkClientSplashAuthorizationStatusRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ssids(self):
        """Gets the ssids of this UpdateNetworkClientSplashAuthorizationStatusRequest.


        :return: The ssids of this UpdateNetworkClientSplashAuthorizationStatusRequest.
        :rtype: UpdateNetworkClientSplashAuthorizationStatusRequestSsids
        """
        return self._ssids

    @ssids.setter
    def ssids(self, ssids):
        """Sets the ssids of this UpdateNetworkClientSplashAuthorizationStatusRequest.


        :param ssids: The ssids of this UpdateNetworkClientSplashAuthorizationStatusRequest.
        :type ssids: UpdateNetworkClientSplashAuthorizationStatusRequestSsids
        """
        if ssids is None:
            raise ValueError("Invalid value for `ssids`, must not be `None`")

        self._ssids = ssids
