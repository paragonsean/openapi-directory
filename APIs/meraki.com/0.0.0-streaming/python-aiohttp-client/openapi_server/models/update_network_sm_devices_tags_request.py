# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateNetworkSmDevicesTagsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ids: str=None, scope: str=None, serials: str=None, tags: str=None, update_action: str=None, wifi_macs: str=None):
        """UpdateNetworkSmDevicesTagsRequest - a model defined in OpenAPI

        :param ids: The ids of this UpdateNetworkSmDevicesTagsRequest.
        :param scope: The scope of this UpdateNetworkSmDevicesTagsRequest.
        :param serials: The serials of this UpdateNetworkSmDevicesTagsRequest.
        :param tags: The tags of this UpdateNetworkSmDevicesTagsRequest.
        :param update_action: The update_action of this UpdateNetworkSmDevicesTagsRequest.
        :param wifi_macs: The wifi_macs of this UpdateNetworkSmDevicesTagsRequest.
        """
        self.openapi_types = {
            'ids': str,
            'scope': str,
            'serials': str,
            'tags': str,
            'update_action': str,
            'wifi_macs': str
        }

        self.attribute_map = {
            'ids': 'ids',
            'scope': 'scope',
            'serials': 'serials',
            'tags': 'tags',
            'update_action': 'updateAction',
            'wifi_macs': 'wifiMacs'
        }

        self._ids = ids
        self._scope = scope
        self._serials = serials
        self._tags = tags
        self._update_action = update_action
        self._wifi_macs = wifi_macs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateNetworkSmDevicesTagsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateNetworkSmDevicesTags_request of this UpdateNetworkSmDevicesTagsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ids(self):
        """Gets the ids of this UpdateNetworkSmDevicesTagsRequest.

        The ids of the devices to be modified.

        :return: The ids of this UpdateNetworkSmDevicesTagsRequest.
        :rtype: str
        """
        return self._ids

    @ids.setter
    def ids(self, ids):
        """Sets the ids of this UpdateNetworkSmDevicesTagsRequest.

        The ids of the devices to be modified.

        :param ids: The ids of this UpdateNetworkSmDevicesTagsRequest.
        :type ids: str
        """

        self._ids = ids

    @property
    def scope(self):
        """Gets the scope of this UpdateNetworkSmDevicesTagsRequest.

        The scope (one of all, none, withAny, withAll, withoutAny, or withoutAll) and a set of tags of the devices to be modified.

        :return: The scope of this UpdateNetworkSmDevicesTagsRequest.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this UpdateNetworkSmDevicesTagsRequest.

        The scope (one of all, none, withAny, withAll, withoutAny, or withoutAll) and a set of tags of the devices to be modified.

        :param scope: The scope of this UpdateNetworkSmDevicesTagsRequest.
        :type scope: str
        """

        self._scope = scope

    @property
    def serials(self):
        """Gets the serials of this UpdateNetworkSmDevicesTagsRequest.

        The serials of the devices to be modified.

        :return: The serials of this UpdateNetworkSmDevicesTagsRequest.
        :rtype: str
        """
        return self._serials

    @serials.setter
    def serials(self, serials):
        """Sets the serials of this UpdateNetworkSmDevicesTagsRequest.

        The serials of the devices to be modified.

        :param serials: The serials of this UpdateNetworkSmDevicesTagsRequest.
        :type serials: str
        """

        self._serials = serials

    @property
    def tags(self):
        """Gets the tags of this UpdateNetworkSmDevicesTagsRequest.

        The tags to be added, deleted, or updated.

        :return: The tags of this UpdateNetworkSmDevicesTagsRequest.
        :rtype: str
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this UpdateNetworkSmDevicesTagsRequest.

        The tags to be added, deleted, or updated.

        :param tags: The tags of this UpdateNetworkSmDevicesTagsRequest.
        :type tags: str
        """
        if tags is None:
            raise ValueError("Invalid value for `tags`, must not be `None`")

        self._tags = tags

    @property
    def update_action(self):
        """Gets the update_action of this UpdateNetworkSmDevicesTagsRequest.

        One of add, delete, or update. Only devices that have been modified will be returned.

        :return: The update_action of this UpdateNetworkSmDevicesTagsRequest.
        :rtype: str
        """
        return self._update_action

    @update_action.setter
    def update_action(self, update_action):
        """Sets the update_action of this UpdateNetworkSmDevicesTagsRequest.

        One of add, delete, or update. Only devices that have been modified will be returned.

        :param update_action: The update_action of this UpdateNetworkSmDevicesTagsRequest.
        :type update_action: str
        """
        if update_action is None:
            raise ValueError("Invalid value for `update_action`, must not be `None`")

        self._update_action = update_action

    @property
    def wifi_macs(self):
        """Gets the wifi_macs of this UpdateNetworkSmDevicesTagsRequest.

        The wifiMacs of the devices to be modified.

        :return: The wifi_macs of this UpdateNetworkSmDevicesTagsRequest.
        :rtype: str
        """
        return self._wifi_macs

    @wifi_macs.setter
    def wifi_macs(self, wifi_macs):
        """Sets the wifi_macs of this UpdateNetworkSmDevicesTagsRequest.

        The wifiMacs of the devices to be modified.

        :param wifi_macs: The wifi_macs of this UpdateNetworkSmDevicesTagsRequest.
        :type wifi_macs: str
        """

        self._wifi_macs = wifi_macs
