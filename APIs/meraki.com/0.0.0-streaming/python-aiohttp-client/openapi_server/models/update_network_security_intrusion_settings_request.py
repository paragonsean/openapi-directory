# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_network_security_intrusion_settings_request_protected_networks import UpdateNetworkSecurityIntrusionSettingsRequestProtectedNetworks
from openapi_server import util


class UpdateNetworkSecurityIntrusionSettingsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ids_rulesets: str=None, mode: str=None, protected_networks: UpdateNetworkSecurityIntrusionSettingsRequestProtectedNetworks=None):
        """UpdateNetworkSecurityIntrusionSettingsRequest - a model defined in OpenAPI

        :param ids_rulesets: The ids_rulesets of this UpdateNetworkSecurityIntrusionSettingsRequest.
        :param mode: The mode of this UpdateNetworkSecurityIntrusionSettingsRequest.
        :param protected_networks: The protected_networks of this UpdateNetworkSecurityIntrusionSettingsRequest.
        """
        self.openapi_types = {
            'ids_rulesets': str,
            'mode': str,
            'protected_networks': UpdateNetworkSecurityIntrusionSettingsRequestProtectedNetworks
        }

        self.attribute_map = {
            'ids_rulesets': 'idsRulesets',
            'mode': 'mode',
            'protected_networks': 'protectedNetworks'
        }

        self._ids_rulesets = ids_rulesets
        self._mode = mode
        self._protected_networks = protected_networks

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateNetworkSecurityIntrusionSettingsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateNetworkSecurityIntrusionSettings_request of this UpdateNetworkSecurityIntrusionSettingsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ids_rulesets(self):
        """Gets the ids_rulesets of this UpdateNetworkSecurityIntrusionSettingsRequest.

        Set the detection ruleset 'connectivity'/'balanced'/'security' (optional - omitting will leave current config unchanged). Default value is 'balanced' if none currently saved

        :return: The ids_rulesets of this UpdateNetworkSecurityIntrusionSettingsRequest.
        :rtype: str
        """
        return self._ids_rulesets

    @ids_rulesets.setter
    def ids_rulesets(self, ids_rulesets):
        """Sets the ids_rulesets of this UpdateNetworkSecurityIntrusionSettingsRequest.

        Set the detection ruleset 'connectivity'/'balanced'/'security' (optional - omitting will leave current config unchanged). Default value is 'balanced' if none currently saved

        :param ids_rulesets: The ids_rulesets of this UpdateNetworkSecurityIntrusionSettingsRequest.
        :type ids_rulesets: str
        """
        allowed_values = ["balanced", "connectivity", "security"]  # noqa: E501
        if ids_rulesets not in allowed_values:
            raise ValueError(
                "Invalid value for `ids_rulesets` ({0}), must be one of {1}"
                .format(ids_rulesets, allowed_values)
            )

        self._ids_rulesets = ids_rulesets

    @property
    def mode(self):
        """Gets the mode of this UpdateNetworkSecurityIntrusionSettingsRequest.

        Set mode to 'disabled'/'detection'/'prevention' (optional - omitting will leave current config unchanged)

        :return: The mode of this UpdateNetworkSecurityIntrusionSettingsRequest.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this UpdateNetworkSecurityIntrusionSettingsRequest.

        Set mode to 'disabled'/'detection'/'prevention' (optional - omitting will leave current config unchanged)

        :param mode: The mode of this UpdateNetworkSecurityIntrusionSettingsRequest.
        :type mode: str
        """
        allowed_values = ["detection", "disabled", "prevention"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def protected_networks(self):
        """Gets the protected_networks of this UpdateNetworkSecurityIntrusionSettingsRequest.


        :return: The protected_networks of this UpdateNetworkSecurityIntrusionSettingsRequest.
        :rtype: UpdateNetworkSecurityIntrusionSettingsRequestProtectedNetworks
        """
        return self._protected_networks

    @protected_networks.setter
    def protected_networks(self, protected_networks):
        """Sets the protected_networks of this UpdateNetworkSecurityIntrusionSettingsRequest.


        :param protected_networks: The protected_networks of this UpdateNetworkSecurityIntrusionSettingsRequest.
        :type protected_networks: UpdateNetworkSecurityIntrusionSettingsRequestProtectedNetworks
        """

        self._protected_networks = protected_networks
