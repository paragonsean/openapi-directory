# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateNetworkPiiRequestRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, datasets: List[str]=None, email: str=None, mac: str=None, sm_device_id: str=None, sm_user_id: str=None, type: str=None, username: str=None):
        """CreateNetworkPiiRequestRequest - a model defined in OpenAPI

        :param datasets: The datasets of this CreateNetworkPiiRequestRequest.
        :param email: The email of this CreateNetworkPiiRequestRequest.
        :param mac: The mac of this CreateNetworkPiiRequestRequest.
        :param sm_device_id: The sm_device_id of this CreateNetworkPiiRequestRequest.
        :param sm_user_id: The sm_user_id of this CreateNetworkPiiRequestRequest.
        :param type: The type of this CreateNetworkPiiRequestRequest.
        :param username: The username of this CreateNetworkPiiRequestRequest.
        """
        self.openapi_types = {
            'datasets': List[str],
            'email': str,
            'mac': str,
            'sm_device_id': str,
            'sm_user_id': str,
            'type': str,
            'username': str
        }

        self.attribute_map = {
            'datasets': 'datasets',
            'email': 'email',
            'mac': 'mac',
            'sm_device_id': 'smDeviceId',
            'sm_user_id': 'smUserId',
            'type': 'type',
            'username': 'username'
        }

        self._datasets = datasets
        self._email = email
        self._mac = mac
        self._sm_device_id = sm_device_id
        self._sm_user_id = sm_user_id
        self._type = type
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateNetworkPiiRequestRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The createNetworkPiiRequest_request of this CreateNetworkPiiRequestRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def datasets(self):
        """Gets the datasets of this CreateNetworkPiiRequestRequest.

        The datasets related to the provided key that should be deleted. Only applies to \"delete\" requests. The value \"all\" will be expanded to all datasets applicable to this type. The datasets by applicable to each type are: mac (usage, events, traffic), email (users, loginAttempts), username (users, loginAttempts), bluetoothMac (client, connectivity), smDeviceId (device), smUserId (user)

        :return: The datasets of this CreateNetworkPiiRequestRequest.
        :rtype: List[str]
        """
        return self._datasets

    @datasets.setter
    def datasets(self, datasets):
        """Sets the datasets of this CreateNetworkPiiRequestRequest.

        The datasets related to the provided key that should be deleted. Only applies to \"delete\" requests. The value \"all\" will be expanded to all datasets applicable to this type. The datasets by applicable to each type are: mac (usage, events, traffic), email (users, loginAttempts), username (users, loginAttempts), bluetoothMac (client, connectivity), smDeviceId (device), smUserId (user)

        :param datasets: The datasets of this CreateNetworkPiiRequestRequest.
        :type datasets: List[str]
        """

        self._datasets = datasets

    @property
    def email(self):
        """Gets the email of this CreateNetworkPiiRequestRequest.

        The email of a network user account. Only applies to \"delete\" requests.

        :return: The email of this CreateNetworkPiiRequestRequest.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CreateNetworkPiiRequestRequest.

        The email of a network user account. Only applies to \"delete\" requests.

        :param email: The email of this CreateNetworkPiiRequestRequest.
        :type email: str
        """

        self._email = email

    @property
    def mac(self):
        """Gets the mac of this CreateNetworkPiiRequestRequest.

        The MAC of a network client device. Applies to both \"restrict processing\" and \"delete\" requests.

        :return: The mac of this CreateNetworkPiiRequestRequest.
        :rtype: str
        """
        return self._mac

    @mac.setter
    def mac(self, mac):
        """Sets the mac of this CreateNetworkPiiRequestRequest.

        The MAC of a network client device. Applies to both \"restrict processing\" and \"delete\" requests.

        :param mac: The mac of this CreateNetworkPiiRequestRequest.
        :type mac: str
        """

        self._mac = mac

    @property
    def sm_device_id(self):
        """Gets the sm_device_id of this CreateNetworkPiiRequestRequest.

        The sm_device_id of a Systems Manager device. The only way to \"restrict processing\" or \"delete\" a Systems Manager device. Must include \"device\" in the dataset for a \"delete\" request to destroy the device.

        :return: The sm_device_id of this CreateNetworkPiiRequestRequest.
        :rtype: str
        """
        return self._sm_device_id

    @sm_device_id.setter
    def sm_device_id(self, sm_device_id):
        """Sets the sm_device_id of this CreateNetworkPiiRequestRequest.

        The sm_device_id of a Systems Manager device. The only way to \"restrict processing\" or \"delete\" a Systems Manager device. Must include \"device\" in the dataset for a \"delete\" request to destroy the device.

        :param sm_device_id: The sm_device_id of this CreateNetworkPiiRequestRequest.
        :type sm_device_id: str
        """

        self._sm_device_id = sm_device_id

    @property
    def sm_user_id(self):
        """Gets the sm_user_id of this CreateNetworkPiiRequestRequest.

        The sm_user_id of a Systems Manager user. The only way to \"restrict processing\" or \"delete\" a Systems Manager user. Must include \"user\" in the dataset for a \"delete\" request to destroy the user.

        :return: The sm_user_id of this CreateNetworkPiiRequestRequest.
        :rtype: str
        """
        return self._sm_user_id

    @sm_user_id.setter
    def sm_user_id(self, sm_user_id):
        """Sets the sm_user_id of this CreateNetworkPiiRequestRequest.

        The sm_user_id of a Systems Manager user. The only way to \"restrict processing\" or \"delete\" a Systems Manager user. Must include \"user\" in the dataset for a \"delete\" request to destroy the user.

        :param sm_user_id: The sm_user_id of this CreateNetworkPiiRequestRequest.
        :type sm_user_id: str
        """

        self._sm_user_id = sm_user_id

    @property
    def type(self):
        """Gets the type of this CreateNetworkPiiRequestRequest.

        One of \"delete\" or \"restrict processing\"

        :return: The type of this CreateNetworkPiiRequestRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateNetworkPiiRequestRequest.

        One of \"delete\" or \"restrict processing\"

        :param type: The type of this CreateNetworkPiiRequestRequest.
        :type type: str
        """
        allowed_values = ["delete", "restrict processing"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def username(self):
        """Gets the username of this CreateNetworkPiiRequestRequest.

        The username of a network log in. Only applies to \"delete\" requests.

        :return: The username of this CreateNetworkPiiRequestRequest.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this CreateNetworkPiiRequestRequest.

        The username of a network log in. Only applies to \"delete\" requests.

        :param username: The username of this CreateNetworkPiiRequestRequest.
        :type username: str
        """

        self._username = username
