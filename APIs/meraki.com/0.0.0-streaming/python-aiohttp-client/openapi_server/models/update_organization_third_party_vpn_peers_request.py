# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_organization_third_party_vpn_peers_request_peers_inner import UpdateOrganizationThirdPartyVPNPeersRequestPeersInner
from openapi_server import util


class UpdateOrganizationThirdPartyVPNPeersRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, peers: List[UpdateOrganizationThirdPartyVPNPeersRequestPeersInner]=None):
        """UpdateOrganizationThirdPartyVPNPeersRequest - a model defined in OpenAPI

        :param peers: The peers of this UpdateOrganizationThirdPartyVPNPeersRequest.
        """
        self.openapi_types = {
            'peers': List[UpdateOrganizationThirdPartyVPNPeersRequestPeersInner]
        }

        self.attribute_map = {
            'peers': 'peers'
        }

        self._peers = peers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateOrganizationThirdPartyVPNPeersRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateOrganizationThirdPartyVPNPeers_request of this UpdateOrganizationThirdPartyVPNPeersRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def peers(self):
        """Gets the peers of this UpdateOrganizationThirdPartyVPNPeersRequest.

        The list of VPN peers

        :return: The peers of this UpdateOrganizationThirdPartyVPNPeersRequest.
        :rtype: List[UpdateOrganizationThirdPartyVPNPeersRequestPeersInner]
        """
        return self._peers

    @peers.setter
    def peers(self, peers):
        """Sets the peers of this UpdateOrganizationThirdPartyVPNPeersRequest.

        The list of VPN peers

        :param peers: The peers of this UpdateOrganizationThirdPartyVPNPeersRequest.
        :type peers: List[UpdateOrganizationThirdPartyVPNPeersRequestPeersInner]
        """
        if peers is None:
            raise ValueError("Invalid value for `peers`, must not be `None`")

        self._peers = peers
