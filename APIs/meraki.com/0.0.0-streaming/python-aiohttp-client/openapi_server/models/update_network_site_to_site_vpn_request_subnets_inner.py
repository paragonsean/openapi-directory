# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateNetworkSiteToSiteVpnRequestSubnetsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, local_subnet: str=None, use_vpn: bool=None):
        """UpdateNetworkSiteToSiteVpnRequestSubnetsInner - a model defined in OpenAPI

        :param local_subnet: The local_subnet of this UpdateNetworkSiteToSiteVpnRequestSubnetsInner.
        :param use_vpn: The use_vpn of this UpdateNetworkSiteToSiteVpnRequestSubnetsInner.
        """
        self.openapi_types = {
            'local_subnet': str,
            'use_vpn': bool
        }

        self.attribute_map = {
            'local_subnet': 'localSubnet',
            'use_vpn': 'useVpn'
        }

        self._local_subnet = local_subnet
        self._use_vpn = use_vpn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateNetworkSiteToSiteVpnRequestSubnetsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateNetworkSiteToSiteVpn_request_subnets_inner of this UpdateNetworkSiteToSiteVpnRequestSubnetsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def local_subnet(self):
        """Gets the local_subnet of this UpdateNetworkSiteToSiteVpnRequestSubnetsInner.

        The CIDR notation subnet used within the VPN

        :return: The local_subnet of this UpdateNetworkSiteToSiteVpnRequestSubnetsInner.
        :rtype: str
        """
        return self._local_subnet

    @local_subnet.setter
    def local_subnet(self, local_subnet):
        """Sets the local_subnet of this UpdateNetworkSiteToSiteVpnRequestSubnetsInner.

        The CIDR notation subnet used within the VPN

        :param local_subnet: The local_subnet of this UpdateNetworkSiteToSiteVpnRequestSubnetsInner.
        :type local_subnet: str
        """
        if local_subnet is None:
            raise ValueError("Invalid value for `local_subnet`, must not be `None`")

        self._local_subnet = local_subnet

    @property
    def use_vpn(self):
        """Gets the use_vpn of this UpdateNetworkSiteToSiteVpnRequestSubnetsInner.

        Indicates the presence of the subnet in the VPN

        :return: The use_vpn of this UpdateNetworkSiteToSiteVpnRequestSubnetsInner.
        :rtype: bool
        """
        return self._use_vpn

    @use_vpn.setter
    def use_vpn(self, use_vpn):
        """Sets the use_vpn of this UpdateNetworkSiteToSiteVpnRequestSubnetsInner.

        Indicates the presence of the subnet in the VPN

        :param use_vpn: The use_vpn of this UpdateNetworkSiteToSiteVpnRequestSubnetsInner.
        :type use_vpn: bool
        """

        self._use_vpn = use_vpn
