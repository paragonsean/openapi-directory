# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateNetworkWarmSpareSettingsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=None, spare_serial: str=None, uplink_mode: str=None, virtual_ip1: str=None, virtual_ip2: str=None):
        """UpdateNetworkWarmSpareSettingsRequest - a model defined in OpenAPI

        :param enabled: The enabled of this UpdateNetworkWarmSpareSettingsRequest.
        :param spare_serial: The spare_serial of this UpdateNetworkWarmSpareSettingsRequest.
        :param uplink_mode: The uplink_mode of this UpdateNetworkWarmSpareSettingsRequest.
        :param virtual_ip1: The virtual_ip1 of this UpdateNetworkWarmSpareSettingsRequest.
        :param virtual_ip2: The virtual_ip2 of this UpdateNetworkWarmSpareSettingsRequest.
        """
        self.openapi_types = {
            'enabled': bool,
            'spare_serial': str,
            'uplink_mode': str,
            'virtual_ip1': str,
            'virtual_ip2': str
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'spare_serial': 'spareSerial',
            'uplink_mode': 'uplinkMode',
            'virtual_ip1': 'virtualIp1',
            'virtual_ip2': 'virtualIp2'
        }

        self._enabled = enabled
        self._spare_serial = spare_serial
        self._uplink_mode = uplink_mode
        self._virtual_ip1 = virtual_ip1
        self._virtual_ip2 = virtual_ip2

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateNetworkWarmSpareSettingsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateNetworkWarmSpareSettings_request of this UpdateNetworkWarmSpareSettingsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this UpdateNetworkWarmSpareSettingsRequest.

        Enable warm spare

        :return: The enabled of this UpdateNetworkWarmSpareSettingsRequest.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this UpdateNetworkWarmSpareSettingsRequest.

        Enable warm spare

        :param enabled: The enabled of this UpdateNetworkWarmSpareSettingsRequest.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def spare_serial(self):
        """Gets the spare_serial of this UpdateNetworkWarmSpareSettingsRequest.

        Serial number of the warm spare appliance

        :return: The spare_serial of this UpdateNetworkWarmSpareSettingsRequest.
        :rtype: str
        """
        return self._spare_serial

    @spare_serial.setter
    def spare_serial(self, spare_serial):
        """Sets the spare_serial of this UpdateNetworkWarmSpareSettingsRequest.

        Serial number of the warm spare appliance

        :param spare_serial: The spare_serial of this UpdateNetworkWarmSpareSettingsRequest.
        :type spare_serial: str
        """

        self._spare_serial = spare_serial

    @property
    def uplink_mode(self):
        """Gets the uplink_mode of this UpdateNetworkWarmSpareSettingsRequest.

        Uplink mode, either virtual or public

        :return: The uplink_mode of this UpdateNetworkWarmSpareSettingsRequest.
        :rtype: str
        """
        return self._uplink_mode

    @uplink_mode.setter
    def uplink_mode(self, uplink_mode):
        """Sets the uplink_mode of this UpdateNetworkWarmSpareSettingsRequest.

        Uplink mode, either virtual or public

        :param uplink_mode: The uplink_mode of this UpdateNetworkWarmSpareSettingsRequest.
        :type uplink_mode: str
        """

        self._uplink_mode = uplink_mode

    @property
    def virtual_ip1(self):
        """Gets the virtual_ip1 of this UpdateNetworkWarmSpareSettingsRequest.

        The WAN 1 shared IP

        :return: The virtual_ip1 of this UpdateNetworkWarmSpareSettingsRequest.
        :rtype: str
        """
        return self._virtual_ip1

    @virtual_ip1.setter
    def virtual_ip1(self, virtual_ip1):
        """Sets the virtual_ip1 of this UpdateNetworkWarmSpareSettingsRequest.

        The WAN 1 shared IP

        :param virtual_ip1: The virtual_ip1 of this UpdateNetworkWarmSpareSettingsRequest.
        :type virtual_ip1: str
        """

        self._virtual_ip1 = virtual_ip1

    @property
    def virtual_ip2(self):
        """Gets the virtual_ip2 of this UpdateNetworkWarmSpareSettingsRequest.

        The WAN 2 shared IP

        :return: The virtual_ip2 of this UpdateNetworkWarmSpareSettingsRequest.
        :rtype: str
        """
        return self._virtual_ip2

    @virtual_ip2.setter
    def virtual_ip2(self, virtual_ip2):
        """Sets the virtual_ip2 of this UpdateNetworkWarmSpareSettingsRequest.

        The WAN 2 shared IP

        :param virtual_ip2: The virtual_ip2 of this UpdateNetworkWarmSpareSettingsRequest.
        :type virtual_ip2: str
        """

        self._virtual_ip2 = virtual_ip2
