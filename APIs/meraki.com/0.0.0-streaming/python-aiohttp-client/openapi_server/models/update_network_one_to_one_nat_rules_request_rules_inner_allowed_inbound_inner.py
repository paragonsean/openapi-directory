# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateNetworkOneToOneNatRulesRequestRulesInnerAllowedInboundInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_ips: List[str]=None, destination_ports: List[str]=None, protocol: str=None):
        """UpdateNetworkOneToOneNatRulesRequestRulesInnerAllowedInboundInner - a model defined in OpenAPI

        :param allowed_ips: The allowed_ips of this UpdateNetworkOneToOneNatRulesRequestRulesInnerAllowedInboundInner.
        :param destination_ports: The destination_ports of this UpdateNetworkOneToOneNatRulesRequestRulesInnerAllowedInboundInner.
        :param protocol: The protocol of this UpdateNetworkOneToOneNatRulesRequestRulesInnerAllowedInboundInner.
        """
        self.openapi_types = {
            'allowed_ips': List[str],
            'destination_ports': List[str],
            'protocol': str
        }

        self.attribute_map = {
            'allowed_ips': 'allowedIps',
            'destination_ports': 'destinationPorts',
            'protocol': 'protocol'
        }

        self._allowed_ips = allowed_ips
        self._destination_ports = destination_ports
        self._protocol = protocol

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateNetworkOneToOneNatRulesRequestRulesInnerAllowedInboundInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateNetworkOneToOneNatRules_request_rules_inner_allowedInbound_inner of this UpdateNetworkOneToOneNatRulesRequestRulesInnerAllowedInboundInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_ips(self):
        """Gets the allowed_ips of this UpdateNetworkOneToOneNatRulesRequestRulesInnerAllowedInboundInner.

        An array of ranges of WAN IP addresses that are allowed to make inbound connections on the specified ports or port ranges, or 'any'

        :return: The allowed_ips of this UpdateNetworkOneToOneNatRulesRequestRulesInnerAllowedInboundInner.
        :rtype: List[str]
        """
        return self._allowed_ips

    @allowed_ips.setter
    def allowed_ips(self, allowed_ips):
        """Sets the allowed_ips of this UpdateNetworkOneToOneNatRulesRequestRulesInnerAllowedInboundInner.

        An array of ranges of WAN IP addresses that are allowed to make inbound connections on the specified ports or port ranges, or 'any'

        :param allowed_ips: The allowed_ips of this UpdateNetworkOneToOneNatRulesRequestRulesInnerAllowedInboundInner.
        :type allowed_ips: List[str]
        """

        self._allowed_ips = allowed_ips

    @property
    def destination_ports(self):
        """Gets the destination_ports of this UpdateNetworkOneToOneNatRulesRequestRulesInnerAllowedInboundInner.

        An array of ports or port ranges that will be forwarded to the host on the LAN

        :return: The destination_ports of this UpdateNetworkOneToOneNatRulesRequestRulesInnerAllowedInboundInner.
        :rtype: List[str]
        """
        return self._destination_ports

    @destination_ports.setter
    def destination_ports(self, destination_ports):
        """Sets the destination_ports of this UpdateNetworkOneToOneNatRulesRequestRulesInnerAllowedInboundInner.

        An array of ports or port ranges that will be forwarded to the host on the LAN

        :param destination_ports: The destination_ports of this UpdateNetworkOneToOneNatRulesRequestRulesInnerAllowedInboundInner.
        :type destination_ports: List[str]
        """

        self._destination_ports = destination_ports

    @property
    def protocol(self):
        """Gets the protocol of this UpdateNetworkOneToOneNatRulesRequestRulesInnerAllowedInboundInner.

        Either of the following: 'tcp', 'udp', 'icmp-ping' or 'any'

        :return: The protocol of this UpdateNetworkOneToOneNatRulesRequestRulesInnerAllowedInboundInner.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this UpdateNetworkOneToOneNatRulesRequestRulesInnerAllowedInboundInner.

        Either of the following: 'tcp', 'udp', 'icmp-ping' or 'any'

        :param protocol: The protocol of this UpdateNetworkOneToOneNatRulesRequestRulesInnerAllowedInboundInner.
        :type protocol: str
        """
        allowed_values = ["any", "icmp-ping", "tcp", "udp"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"
                .format(protocol, allowed_values)
            )

        self._protocol = protocol
