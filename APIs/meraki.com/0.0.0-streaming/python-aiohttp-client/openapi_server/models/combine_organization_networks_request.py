# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CombineOrganizationNetworksRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enrollment_string: str=None, name: str=None, network_ids: List[str]=None):
        """CombineOrganizationNetworksRequest - a model defined in OpenAPI

        :param enrollment_string: The enrollment_string of this CombineOrganizationNetworksRequest.
        :param name: The name of this CombineOrganizationNetworksRequest.
        :param network_ids: The network_ids of this CombineOrganizationNetworksRequest.
        """
        self.openapi_types = {
            'enrollment_string': str,
            'name': str,
            'network_ids': List[str]
        }

        self.attribute_map = {
            'enrollment_string': 'enrollmentString',
            'name': 'name',
            'network_ids': 'networkIds'
        }

        self._enrollment_string = enrollment_string
        self._name = name
        self._network_ids = network_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CombineOrganizationNetworksRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The combineOrganizationNetworks_request of this CombineOrganizationNetworksRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enrollment_string(self):
        """Gets the enrollment_string of this CombineOrganizationNetworksRequest.

        A unique identifier which can be used for device enrollment or easy access through the Meraki SM Registration page or the Self Service Portal. Please note that changing this field may cause existing bookmarks to break. All networks that are part of this combined network will have their enrollment string appended by '-network_type'. If left empty, all exisitng enrollment strings will be deleted.

        :return: The enrollment_string of this CombineOrganizationNetworksRequest.
        :rtype: str
        """
        return self._enrollment_string

    @enrollment_string.setter
    def enrollment_string(self, enrollment_string):
        """Sets the enrollment_string of this CombineOrganizationNetworksRequest.

        A unique identifier which can be used for device enrollment or easy access through the Meraki SM Registration page or the Self Service Portal. Please note that changing this field may cause existing bookmarks to break. All networks that are part of this combined network will have their enrollment string appended by '-network_type'. If left empty, all exisitng enrollment strings will be deleted.

        :param enrollment_string: The enrollment_string of this CombineOrganizationNetworksRequest.
        :type enrollment_string: str
        """

        self._enrollment_string = enrollment_string

    @property
    def name(self):
        """Gets the name of this CombineOrganizationNetworksRequest.

        The name of the combined network

        :return: The name of this CombineOrganizationNetworksRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CombineOrganizationNetworksRequest.

        The name of the combined network

        :param name: The name of this CombineOrganizationNetworksRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def network_ids(self):
        """Gets the network_ids of this CombineOrganizationNetworksRequest.

        A list of the network IDs that will be combined. If an ID of a combined network is included in this list, the other networks in the list will be grouped into that network

        :return: The network_ids of this CombineOrganizationNetworksRequest.
        :rtype: List[str]
        """
        return self._network_ids

    @network_ids.setter
    def network_ids(self, network_ids):
        """Sets the network_ids of this CombineOrganizationNetworksRequest.

        A list of the network IDs that will be combined. If an ID of a combined network is included in this list, the other networks in the list will be grouped into that network

        :param network_ids: The network_ids of this CombineOrganizationNetworksRequest.
        :type network_ids: List[str]
        """
        if network_ids is None:
            raise ValueError("Invalid value for `network_ids`, must not be `None`")

        self._network_ids = network_ids
