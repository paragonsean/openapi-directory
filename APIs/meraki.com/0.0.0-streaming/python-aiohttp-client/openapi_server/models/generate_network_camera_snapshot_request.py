# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GenerateNetworkCameraSnapshotRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fullframe: bool=None, timestamp: datetime=None):
        """GenerateNetworkCameraSnapshotRequest - a model defined in OpenAPI

        :param fullframe: The fullframe of this GenerateNetworkCameraSnapshotRequest.
        :param timestamp: The timestamp of this GenerateNetworkCameraSnapshotRequest.
        """
        self.openapi_types = {
            'fullframe': bool,
            'timestamp': datetime
        }

        self.attribute_map = {
            'fullframe': 'fullframe',
            'timestamp': 'timestamp'
        }

        self._fullframe = fullframe
        self._timestamp = timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GenerateNetworkCameraSnapshotRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The generateNetworkCameraSnapshot_request of this GenerateNetworkCameraSnapshotRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fullframe(self):
        """Gets the fullframe of this GenerateNetworkCameraSnapshotRequest.

        [optional] If set to \"true\" the snapshot will be taken at full sensor resolution. This will error if used with timestamp.

        :return: The fullframe of this GenerateNetworkCameraSnapshotRequest.
        :rtype: bool
        """
        return self._fullframe

    @fullframe.setter
    def fullframe(self, fullframe):
        """Sets the fullframe of this GenerateNetworkCameraSnapshotRequest.

        [optional] If set to \"true\" the snapshot will be taken at full sensor resolution. This will error if used with timestamp.

        :param fullframe: The fullframe of this GenerateNetworkCameraSnapshotRequest.
        :type fullframe: bool
        """

        self._fullframe = fullframe

    @property
    def timestamp(self):
        """Gets the timestamp of this GenerateNetworkCameraSnapshotRequest.

        [optional] The snapshot will be taken from this time on the camera. The timestamp is expected to be in ISO 8601 format. If no timestamp is specified, we will assume current time.

        :return: The timestamp of this GenerateNetworkCameraSnapshotRequest.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this GenerateNetworkCameraSnapshotRequest.

        [optional] The snapshot will be taken from this time on the camera. The timestamp is expected to be in ISO 8601 format. If no timestamp is specified, we will assume current time.

        :param timestamp: The timestamp of this GenerateNetworkCameraSnapshotRequest.
        :type timestamp: datetime
        """

        self._timestamp = timestamp
