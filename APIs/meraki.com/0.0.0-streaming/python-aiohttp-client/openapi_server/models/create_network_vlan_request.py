# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateNetworkVlanRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, appliance_ip: str=None, group_policy_id: str=None, id: str=None, name: str=None, subnet: str=None):
        """CreateNetworkVlanRequest - a model defined in OpenAPI

        :param appliance_ip: The appliance_ip of this CreateNetworkVlanRequest.
        :param group_policy_id: The group_policy_id of this CreateNetworkVlanRequest.
        :param id: The id of this CreateNetworkVlanRequest.
        :param name: The name of this CreateNetworkVlanRequest.
        :param subnet: The subnet of this CreateNetworkVlanRequest.
        """
        self.openapi_types = {
            'appliance_ip': str,
            'group_policy_id': str,
            'id': str,
            'name': str,
            'subnet': str
        }

        self.attribute_map = {
            'appliance_ip': 'applianceIp',
            'group_policy_id': 'groupPolicyId',
            'id': 'id',
            'name': 'name',
            'subnet': 'subnet'
        }

        self._appliance_ip = appliance_ip
        self._group_policy_id = group_policy_id
        self._id = id
        self._name = name
        self._subnet = subnet

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateNetworkVlanRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The createNetworkVlan_request of this CreateNetworkVlanRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def appliance_ip(self):
        """Gets the appliance_ip of this CreateNetworkVlanRequest.

        The local IP of the appliance on the VLAN

        :return: The appliance_ip of this CreateNetworkVlanRequest.
        :rtype: str
        """
        return self._appliance_ip

    @appliance_ip.setter
    def appliance_ip(self, appliance_ip):
        """Sets the appliance_ip of this CreateNetworkVlanRequest.

        The local IP of the appliance on the VLAN

        :param appliance_ip: The appliance_ip of this CreateNetworkVlanRequest.
        :type appliance_ip: str
        """
        if appliance_ip is None:
            raise ValueError("Invalid value for `appliance_ip`, must not be `None`")

        self._appliance_ip = appliance_ip

    @property
    def group_policy_id(self):
        """Gets the group_policy_id of this CreateNetworkVlanRequest.

        The id of the desired group policy to apply to the VLAN

        :return: The group_policy_id of this CreateNetworkVlanRequest.
        :rtype: str
        """
        return self._group_policy_id

    @group_policy_id.setter
    def group_policy_id(self, group_policy_id):
        """Sets the group_policy_id of this CreateNetworkVlanRequest.

        The id of the desired group policy to apply to the VLAN

        :param group_policy_id: The group_policy_id of this CreateNetworkVlanRequest.
        :type group_policy_id: str
        """

        self._group_policy_id = group_policy_id

    @property
    def id(self):
        """Gets the id of this CreateNetworkVlanRequest.

        The VLAN ID of the new VLAN (must be between 1 and 4094)

        :return: The id of this CreateNetworkVlanRequest.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CreateNetworkVlanRequest.

        The VLAN ID of the new VLAN (must be between 1 and 4094)

        :param id: The id of this CreateNetworkVlanRequest.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this CreateNetworkVlanRequest.

        The name of the new VLAN

        :return: The name of this CreateNetworkVlanRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateNetworkVlanRequest.

        The name of the new VLAN

        :param name: The name of this CreateNetworkVlanRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def subnet(self):
        """Gets the subnet of this CreateNetworkVlanRequest.

        The subnet of the VLAN

        :return: The subnet of this CreateNetworkVlanRequest.
        :rtype: str
        """
        return self._subnet

    @subnet.setter
    def subnet(self, subnet):
        """Sets the subnet of this CreateNetworkVlanRequest.

        The subnet of the VLAN

        :param subnet: The subnet of this CreateNetworkVlanRequest.
        :type subnet: str
        """
        if subnet is None:
            raise ValueError("Invalid value for `subnet`, must not be `None`")

        self._subnet = subnet
