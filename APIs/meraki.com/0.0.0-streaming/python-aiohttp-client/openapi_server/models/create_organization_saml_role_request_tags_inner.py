# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateOrganizationSamlRoleRequestTagsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access: str=None, tag: str=None):
        """CreateOrganizationSamlRoleRequestTagsInner - a model defined in OpenAPI

        :param access: The access of this CreateOrganizationSamlRoleRequestTagsInner.
        :param tag: The tag of this CreateOrganizationSamlRoleRequestTagsInner.
        """
        self.openapi_types = {
            'access': str,
            'tag': str
        }

        self.attribute_map = {
            'access': 'access',
            'tag': 'tag'
        }

        self._access = access
        self._tag = tag

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateOrganizationSamlRoleRequestTagsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The createOrganizationSamlRole_request_tags_inner of this CreateOrganizationSamlRoleRequestTagsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access(self):
        """Gets the access of this CreateOrganizationSamlRoleRequestTagsInner.

        The privilege of the SAML administrator on the tag

        :return: The access of this CreateOrganizationSamlRoleRequestTagsInner.
        :rtype: str
        """
        return self._access

    @access.setter
    def access(self, access):
        """Sets the access of this CreateOrganizationSamlRoleRequestTagsInner.

        The privilege of the SAML administrator on the tag

        :param access: The access of this CreateOrganizationSamlRoleRequestTagsInner.
        :type access: str
        """
        if access is None:
            raise ValueError("Invalid value for `access`, must not be `None`")

        self._access = access

    @property
    def tag(self):
        """Gets the tag of this CreateOrganizationSamlRoleRequestTagsInner.

        The name of the tag

        :return: The tag of this CreateOrganizationSamlRoleRequestTagsInner.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this CreateOrganizationSamlRoleRequestTagsInner.

        The name of the tag

        :param tag: The tag of this CreateOrganizationSamlRoleRequestTagsInner.
        :type tag: str
        """
        if tag is None:
            raise ValueError("Invalid value for `tag`, must not be `None`")

        self._tag = tag
