# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateNetworkStaticRouteRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gateway_ip: str=None, name: str=None, subnet: str=None):
        """CreateNetworkStaticRouteRequest - a model defined in OpenAPI

        :param gateway_ip: The gateway_ip of this CreateNetworkStaticRouteRequest.
        :param name: The name of this CreateNetworkStaticRouteRequest.
        :param subnet: The subnet of this CreateNetworkStaticRouteRequest.
        """
        self.openapi_types = {
            'gateway_ip': str,
            'name': str,
            'subnet': str
        }

        self.attribute_map = {
            'gateway_ip': 'gatewayIp',
            'name': 'name',
            'subnet': 'subnet'
        }

        self._gateway_ip = gateway_ip
        self._name = name
        self._subnet = subnet

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateNetworkStaticRouteRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The createNetworkStaticRoute_request of this CreateNetworkStaticRouteRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gateway_ip(self):
        """Gets the gateway_ip of this CreateNetworkStaticRouteRequest.

        The gateway IP (next hop) of the static route

        :return: The gateway_ip of this CreateNetworkStaticRouteRequest.
        :rtype: str
        """
        return self._gateway_ip

    @gateway_ip.setter
    def gateway_ip(self, gateway_ip):
        """Sets the gateway_ip of this CreateNetworkStaticRouteRequest.

        The gateway IP (next hop) of the static route

        :param gateway_ip: The gateway_ip of this CreateNetworkStaticRouteRequest.
        :type gateway_ip: str
        """
        if gateway_ip is None:
            raise ValueError("Invalid value for `gateway_ip`, must not be `None`")

        self._gateway_ip = gateway_ip

    @property
    def name(self):
        """Gets the name of this CreateNetworkStaticRouteRequest.

        The name of the new static route

        :return: The name of this CreateNetworkStaticRouteRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateNetworkStaticRouteRequest.

        The name of the new static route

        :param name: The name of this CreateNetworkStaticRouteRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def subnet(self):
        """Gets the subnet of this CreateNetworkStaticRouteRequest.

        The subnet of the static route

        :return: The subnet of this CreateNetworkStaticRouteRequest.
        :rtype: str
        """
        return self._subnet

    @subnet.setter
    def subnet(self, subnet):
        """Sets the subnet of this CreateNetworkStaticRouteRequest.

        The subnet of the static route

        :param subnet: The subnet of this CreateNetworkStaticRouteRequest.
        :type subnet: str
        """
        if subnet is None:
            raise ValueError("Invalid value for `subnet`, must not be `None`")

        self._subnet = subnet
