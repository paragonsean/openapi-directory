# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RenewOrganizationLicensesSeatsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, license_id_to_renew: str=None, unused_license_id: str=None):
        """RenewOrganizationLicensesSeatsRequest - a model defined in OpenAPI

        :param license_id_to_renew: The license_id_to_renew of this RenewOrganizationLicensesSeatsRequest.
        :param unused_license_id: The unused_license_id of this RenewOrganizationLicensesSeatsRequest.
        """
        self.openapi_types = {
            'license_id_to_renew': str,
            'unused_license_id': str
        }

        self.attribute_map = {
            'license_id_to_renew': 'licenseIdToRenew',
            'unused_license_id': 'unusedLicenseId'
        }

        self._license_id_to_renew = license_id_to_renew
        self._unused_license_id = unused_license_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RenewOrganizationLicensesSeatsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The renewOrganizationLicensesSeats_request of this RenewOrganizationLicensesSeatsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def license_id_to_renew(self):
        """Gets the license_id_to_renew of this RenewOrganizationLicensesSeatsRequest.

        The ID of the SM license to renew. This license must already be assigned to an SM network

        :return: The license_id_to_renew of this RenewOrganizationLicensesSeatsRequest.
        :rtype: str
        """
        return self._license_id_to_renew

    @license_id_to_renew.setter
    def license_id_to_renew(self, license_id_to_renew):
        """Sets the license_id_to_renew of this RenewOrganizationLicensesSeatsRequest.

        The ID of the SM license to renew. This license must already be assigned to an SM network

        :param license_id_to_renew: The license_id_to_renew of this RenewOrganizationLicensesSeatsRequest.
        :type license_id_to_renew: str
        """
        if license_id_to_renew is None:
            raise ValueError("Invalid value for `license_id_to_renew`, must not be `None`")

        self._license_id_to_renew = license_id_to_renew

    @property
    def unused_license_id(self):
        """Gets the unused_license_id of this RenewOrganizationLicensesSeatsRequest.

        The SM license to use to renew the seats on 'licenseIdToRenew'. This license must have at least as many seats available as there are seats on 'licenseIdToRenew'

        :return: The unused_license_id of this RenewOrganizationLicensesSeatsRequest.
        :rtype: str
        """
        return self._unused_license_id

    @unused_license_id.setter
    def unused_license_id(self, unused_license_id):
        """Sets the unused_license_id of this RenewOrganizationLicensesSeatsRequest.

        The SM license to use to renew the seats on 'licenseIdToRenew'. This license must have at least as many seats available as there are seats on 'licenseIdToRenew'

        :param unused_license_id: The unused_license_id of this RenewOrganizationLicensesSeatsRequest.
        :type unused_license_id: str
        """
        if unused_license_id is None:
            raise ValueError("Invalid value for `unused_license_id`, must not be `None`")

        self._unused_license_id = unused_license_id
