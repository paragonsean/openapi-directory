# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_organization_security_intrusion_settings_request_whitelisted_rules_inner import UpdateOrganizationSecurityIntrusionSettingsRequestWhitelistedRulesInner
from openapi_server import util


class UpdateOrganizationSecurityIntrusionSettingsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, whitelisted_rules: List[UpdateOrganizationSecurityIntrusionSettingsRequestWhitelistedRulesInner]=None):
        """UpdateOrganizationSecurityIntrusionSettingsRequest - a model defined in OpenAPI

        :param whitelisted_rules: The whitelisted_rules of this UpdateOrganizationSecurityIntrusionSettingsRequest.
        """
        self.openapi_types = {
            'whitelisted_rules': List[UpdateOrganizationSecurityIntrusionSettingsRequestWhitelistedRulesInner]
        }

        self.attribute_map = {
            'whitelisted_rules': 'whitelistedRules'
        }

        self._whitelisted_rules = whitelisted_rules

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateOrganizationSecurityIntrusionSettingsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateOrganizationSecurityIntrusionSettings_request of this UpdateOrganizationSecurityIntrusionSettingsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def whitelisted_rules(self):
        """Gets the whitelisted_rules of this UpdateOrganizationSecurityIntrusionSettingsRequest.

        Sets a list of specific SNORT signatures to allow

        :return: The whitelisted_rules of this UpdateOrganizationSecurityIntrusionSettingsRequest.
        :rtype: List[UpdateOrganizationSecurityIntrusionSettingsRequestWhitelistedRulesInner]
        """
        return self._whitelisted_rules

    @whitelisted_rules.setter
    def whitelisted_rules(self, whitelisted_rules):
        """Sets the whitelisted_rules of this UpdateOrganizationSecurityIntrusionSettingsRequest.

        Sets a list of specific SNORT signatures to allow

        :param whitelisted_rules: The whitelisted_rules of this UpdateOrganizationSecurityIntrusionSettingsRequest.
        :type whitelisted_rules: List[UpdateOrganizationSecurityIntrusionSettingsRequestWhitelistedRulesInner]
        """
        if whitelisted_rules is None:
            raise ValueError("Invalid value for `whitelisted_rules`, must not be `None`")

        self._whitelisted_rules = whitelisted_rules
