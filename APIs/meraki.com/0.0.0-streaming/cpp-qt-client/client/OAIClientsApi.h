/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 0.0.0-streaming
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIClientsApi_H
#define OAI_OAIClientsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGetNetworkClients_200_response.h"
#include "OAIObject.h"
#include "OAIProvisionNetworkClients_request.h"
#include "OAIUpdateNetworkClientPolicy_request.h"
#include "OAIUpdateNetworkClientSplashAuthorizationStatus_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIClientsApi : public QObject {
    Q_OBJECT

public:
    OAIClientsApi(const int timeOut = 0);
    ~OAIClientsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  timespan float [optional]
    */
    virtual void getDeviceClients(const QString &serial, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  client_id QString [required]
    */
    virtual void getNetworkClient(const QString &network_id, const QString &client_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  client_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getNetworkClientEvents(const QString &network_id, const QString &client_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  client_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  resolution qint32 [optional]
    */
    virtual void getNetworkClientLatencyHistory(const QString &network_id, const QString &client_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &resolution = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  client_id QString [required]
    */
    virtual void getNetworkClientPolicy(const QString &network_id, const QString &client_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  client_id QString [required]
    */
    virtual void getNetworkClientSplashAuthorizationStatus(const QString &network_id, const QString &client_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  client_id QString [required]
    */
    virtual void getNetworkClientUsageHistory(const QString &network_id, const QString &client_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getNetworkClients(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_provision_network_clients_request OAIProvisionNetworkClients_request [required]
    */
    virtual void provisionNetworkClients(const QString &network_id, const OAIProvisionNetworkClients_request &oai_provision_network_clients_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  client_id QString [required]
    * @param[in]  oai_update_network_client_policy_request OAIUpdateNetworkClientPolicy_request [required]
    */
    virtual void updateNetworkClientPolicy(const QString &network_id, const QString &client_id, const OAIUpdateNetworkClientPolicy_request &oai_update_network_client_policy_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  client_id QString [required]
    * @param[in]  oai_update_network_client_splash_authorization_status_request OAIUpdateNetworkClientSplashAuthorizationStatus_request [required]
    */
    virtual void updateNetworkClientSplashAuthorizationStatus(const QString &network_id, const QString &client_id, const OAIUpdateNetworkClientSplashAuthorizationStatus_request &oai_update_network_client_splash_authorization_status_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getDeviceClientsCallback(OAIHttpRequestWorker *worker);
    void getNetworkClientCallback(OAIHttpRequestWorker *worker);
    void getNetworkClientEventsCallback(OAIHttpRequestWorker *worker);
    void getNetworkClientLatencyHistoryCallback(OAIHttpRequestWorker *worker);
    void getNetworkClientPolicyCallback(OAIHttpRequestWorker *worker);
    void getNetworkClientSplashAuthorizationStatusCallback(OAIHttpRequestWorker *worker);
    void getNetworkClientUsageHistoryCallback(OAIHttpRequestWorker *worker);
    void getNetworkClientsCallback(OAIHttpRequestWorker *worker);
    void provisionNetworkClientsCallback(OAIHttpRequestWorker *worker);
    void updateNetworkClientPolicyCallback(OAIHttpRequestWorker *worker);
    void updateNetworkClientSplashAuthorizationStatusCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getDeviceClientsSignal(QList<OAIObject> summary);
    void getNetworkClientSignal(OAIObject summary);
    void getNetworkClientEventsSignal(QList<OAIObject> summary);
    void getNetworkClientLatencyHistorySignal(QList<OAIObject> summary);
    void getNetworkClientPolicySignal(OAIObject summary);
    void getNetworkClientSplashAuthorizationStatusSignal(OAIObject summary);
    void getNetworkClientUsageHistorySignal(QList<OAIObject> summary);
    void getNetworkClientsSignal(OAIGetNetworkClients_200_response summary);
    void provisionNetworkClientsSignal(OAIObject summary);
    void updateNetworkClientPolicySignal(OAIObject summary);
    void updateNetworkClientSplashAuthorizationStatusSignal(OAIObject summary);


    void getDeviceClientsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkClientSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkClientEventsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkClientLatencyHistorySignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkClientPolicySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkClientSplashAuthorizationStatusSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkClientUsageHistorySignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkClientsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkClients_200_response summary);
    void provisionNetworkClientsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkClientPolicySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkClientSplashAuthorizationStatusSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use getDeviceClientsSignalError() instead")
    void getDeviceClientsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceClientsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkClientSignalError() instead")
    void getNetworkClientSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkClientSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkClientEventsSignalError() instead")
    void getNetworkClientEventsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkClientEventsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkClientLatencyHistorySignalError() instead")
    void getNetworkClientLatencyHistorySignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkClientLatencyHistorySignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkClientPolicySignalError() instead")
    void getNetworkClientPolicySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkClientPolicySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkClientSplashAuthorizationStatusSignalError() instead")
    void getNetworkClientSplashAuthorizationStatusSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkClientSplashAuthorizationStatusSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkClientUsageHistorySignalError() instead")
    void getNetworkClientUsageHistorySignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkClientUsageHistorySignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkClientsSignalError() instead")
    void getNetworkClientsSignalE(OAIGetNetworkClients_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkClientsSignalError(OAIGetNetworkClients_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use provisionNetworkClientsSignalError() instead")
    void provisionNetworkClientsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void provisionNetworkClientsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkClientPolicySignalError() instead")
    void updateNetworkClientPolicySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkClientPolicySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkClientSplashAuthorizationStatusSignalError() instead")
    void updateNetworkClientSplashAuthorizationStatusSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkClientSplashAuthorizationStatusSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getDeviceClientsSignalErrorFull() instead")
    void getDeviceClientsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceClientsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkClientSignalErrorFull() instead")
    void getNetworkClientSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkClientSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkClientEventsSignalErrorFull() instead")
    void getNetworkClientEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkClientEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkClientLatencyHistorySignalErrorFull() instead")
    void getNetworkClientLatencyHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkClientLatencyHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkClientPolicySignalErrorFull() instead")
    void getNetworkClientPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkClientPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkClientSplashAuthorizationStatusSignalErrorFull() instead")
    void getNetworkClientSplashAuthorizationStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkClientSplashAuthorizationStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkClientUsageHistorySignalErrorFull() instead")
    void getNetworkClientUsageHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkClientUsageHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkClientsSignalErrorFull() instead")
    void getNetworkClientsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkClientsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use provisionNetworkClientsSignalErrorFull() instead")
    void provisionNetworkClientsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void provisionNetworkClientsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkClientPolicySignalErrorFull() instead")
    void updateNetworkClientPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkClientPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkClientSplashAuthorizationStatusSignalErrorFull() instead")
    void updateNetworkClientSplashAuthorizationStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkClientSplashAuthorizationStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
